
oled_accel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d84  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002178  08009e98  08009e98  00019e98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c010  0800c010  00020274  2**0
                  CONTENTS
  4 .ARM          00000000  0800c010  0800c010  00020274  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c010  0800c010  00020274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c010  0800c010  0001c010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c014  0800c014  0001c014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000274  20000000  0800c018  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009a0  20000274  0800c28c  00020274  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c14  0800c28c  00020c14  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014b19  00000000  00000000  0002029d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002df9  00000000  00000000  00034db6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001168  00000000  00000000  00037bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001020  00000000  00000000  00038d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a7f1  00000000  00000000  00039d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000140dd  00000000  00000000  00054529  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093b5e  00000000  00000000  00068606  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fc164  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e4c  00000000  00000000  000fc1b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000274 	.word	0x20000274
 800012c:	00000000 	.word	0x00000000
 8000130:	08009e7c 	.word	0x08009e7c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000278 	.word	0x20000278
 800014c:	08009e7c 	.word	0x08009e7c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <HAL_TIM_PeriodElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]

//
//	HAL_TIM_Base_Stop_IT(&htim2);

	if(htim->Instance==TIM2)	//	Si interrupcion proviene de TIM2 -> cambio de modo de display
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001120:	d124      	bne.n	800116c <HAL_TIM_PeriodElapsedCallback+0x5c>
	{
		if(az_filter.out > 0.8)
 8001122:	4b1f      	ldr	r3, [pc, #124]	; (80011a0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001124:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff f97d 	bl	8000428 <__aeabi_f2d>
 800112e:	a318      	add	r3, pc, #96	; (adr r3, 8001190 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001134:	f7ff fc60 	bl	80009f8 <__aeabi_dcmpgt>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d002      	beq.n	8001144 <HAL_TIM_PeriodElapsedCallback+0x34>
			display_mode = 2;
 800113e:	4b19      	ldr	r3, [pc, #100]	; (80011a4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001140:	2202      	movs	r2, #2
 8001142:	701a      	strb	r2, [r3, #0]

		if(az_filter.out < 0.2)
 8001144:	4b16      	ldr	r3, [pc, #88]	; (80011a0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001146:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff f96c 	bl	8000428 <__aeabi_f2d>
 8001150:	a311      	add	r3, pc, #68	; (adr r3, 8001198 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001156:	f7ff fc31 	bl	80009bc <__aeabi_dcmplt>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d002      	beq.n	8001166 <HAL_TIM_PeriodElapsedCallback+0x56>
			display_mode = 1;
 8001160:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001162:	2201      	movs	r2, #1
 8001164:	701a      	strb	r2, [r3, #0]

		HAL_TIM_Base_Stop_IT(&htim2);
 8001166:	4810      	ldr	r0, [pc, #64]	; (80011a8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001168:	f003 f876 	bl	8004258 <HAL_TIM_Base_Stop_IT>
	}

	if(htim->Instance==TIM3)	//	Si intrerrupcion proviene de TIM3 -> lectura de MPU6050
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a0e      	ldr	r2, [pc, #56]	; (80011ac <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d106      	bne.n	8001184 <HAL_TIM_PeriodElapsedCallback+0x74>
	{
		mpu6050_Get_Accel(&mpu6050);
 8001176:	480e      	ldr	r0, [pc, #56]	; (80011b0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001178:	f004 f850 	bl	800521c <mpu6050_Get_Accel>

		angles_update(&mpu6050, &angles);
 800117c:	490d      	ldr	r1, [pc, #52]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800117e:	480c      	ldr	r0, [pc, #48]	; (80011b0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001180:	f003 fd4a 	bl	8004c18 <angles_update>
	}

}
 8001184:	bf00      	nop
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	f3af 8000 	nop.w
 8001190:	9999999a 	.word	0x9999999a
 8001194:	3fe99999 	.word	0x3fe99999
 8001198:	9999999a 	.word	0x9999999a
 800119c:	3fc99999 	.word	0x3fc99999
 80011a0:	2000097c 	.word	0x2000097c
 80011a4:	20000290 	.word	0x20000290
 80011a8:	20000a8c 	.word	0x20000a8c
 80011ac:	40000400 	.word	0x40000400
 80011b0:	20000294 	.word	0x20000294
 80011b4:	200002b0 	.word	0x200002b0

080011b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011bc:	f000 fda0 	bl	8001d00 <HAL_Init>

  /* USER CODE BEGIN Init */


  FIRFilter_Init(&az_filter);
 80011c0:	486d      	ldr	r0, [pc, #436]	; (8001378 <main+0x1c0>)
 80011c2:	f003 fcab 	bl	8004b1c <FIRFilter_Init>
  FIRFilter_Init(&angle_yx_filter);
 80011c6:	486d      	ldr	r0, [pc, #436]	; (800137c <main+0x1c4>)
 80011c8:	f003 fca8 	bl	8004b1c <FIRFilter_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011cc:	f000 f8e4 	bl	8001398 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011d0:	f000 fa9e 	bl	8001710 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80011d4:	f000 fa72 	bl	80016bc <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80011d8:	f000 f9d4 	bl	8001584 <MX_TIM2_Init>
  MX_ADC1_Init();
 80011dc:	f000 f938 	bl	8001450 <MX_ADC1_Init>
  MX_I2C1_Init();
 80011e0:	f000 f974 	bl	80014cc <MX_I2C1_Init>
  MX_I2C2_Init();
 80011e4:	f000 f9a0 	bl	8001528 <MX_I2C2_Init>
  MX_TIM3_Init();
 80011e8:	f000 fa1a 	bl	8001620 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */


  mpu6050_Init(&mpu6050);
 80011ec:	4864      	ldr	r0, [pc, #400]	; (8001380 <main+0x1c8>)
 80011ee:	f003 ffe3 	bl	80051b8 <mpu6050_Init>
  ssd1306_Init();
 80011f2:	f004 f8b7 	bl	8005364 <ssd1306_Init>
  gui_Init();
 80011f6:	f003 fdcf 	bl	8004d98 <gui_Init>

  gui_WelcomeScreen();
 80011fa:	f003 fdd3 	bl	8004da4 <gui_WelcomeScreen>
  HAL_Delay(3000);
 80011fe:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001202:	f000 fddf 	bl	8001dc4 <HAL_Delay>

  HAL_TIM_Base_Start_IT(&htim3);
 8001206:	485f      	ldr	r0, [pc, #380]	; (8001384 <main+0x1cc>)
 8001208:	f002 ffd4 	bl	80041b4 <HAL_TIM_Base_Start_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	switch(display_mode)
 800120c:	4b5e      	ldr	r3, [pc, #376]	; (8001388 <main+0x1d0>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d002      	beq.n	800121a <main+0x62>
 8001214:	2b02      	cmp	r3, #2
 8001216:	d02d      	beq.n	8001274 <main+0xbc>
 8001218:	e076      	b.n	8001308 <main+0x150>
	{
		case 1:

			gui_Bubble_1d(angles.yx);
 800121a:	4b5c      	ldr	r3, [pc, #368]	; (800138c <main+0x1d4>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4618      	mov	r0, r3
 8001220:	f003 fdfc 	bl	8004e1c <gui_Bubble_1d>

			if((angles.yx > -0.3) && (angles.yx < 0.3) )
 8001224:	4b59      	ldr	r3, [pc, #356]	; (800138c <main+0x1d4>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff f8fd 	bl	8000428 <__aeabi_f2d>
 800122e:	a34c      	add	r3, pc, #304	; (adr r3, 8001360 <main+0x1a8>)
 8001230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001234:	f7ff fbe0 	bl	80009f8 <__aeabi_dcmpgt>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d013      	beq.n	8001266 <main+0xae>
 800123e:	4b53      	ldr	r3, [pc, #332]	; (800138c <main+0x1d4>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff f8f0 	bl	8000428 <__aeabi_f2d>
 8001248:	a347      	add	r3, pc, #284	; (adr r3, 8001368 <main+0x1b0>)
 800124a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124e:	f7ff fbb5 	bl	80009bc <__aeabi_dcmplt>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d006      	beq.n	8001266 <main+0xae>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8001258:	2200      	movs	r2, #0
 800125a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800125e:	484c      	ldr	r0, [pc, #304]	; (8001390 <main+0x1d8>)
 8001260:	f001 fa70 	bl	8002744 <HAL_GPIO_WritePin>

			else
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);

			break;
 8001264:	e050      	b.n	8001308 <main+0x150>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8001266:	2201      	movs	r2, #1
 8001268:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800126c:	4848      	ldr	r0, [pc, #288]	; (8001390 <main+0x1d8>)
 800126e:	f001 fa69 	bl	8002744 <HAL_GPIO_WritePin>
			break;
 8001272:	e049      	b.n	8001308 <main+0x150>

		case 2:

			gui_Bubble_2d(angles.yz, angles.xz);
 8001274:	4b45      	ldr	r3, [pc, #276]	; (800138c <main+0x1d4>)
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	4a44      	ldr	r2, [pc, #272]	; (800138c <main+0x1d4>)
 800127a:	6852      	ldr	r2, [r2, #4]
 800127c:	4611      	mov	r1, r2
 800127e:	4618      	mov	r0, r3
 8001280:	f003 fe96 	bl	8004fb0 <gui_Bubble_2d>

			if((angles.yz > -0.3) && (angles.yz < 0.3) && (angles.xz > -0.3) && (angles.xz < 0.3) )
 8001284:	4b41      	ldr	r3, [pc, #260]	; (800138c <main+0x1d4>)
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff f8cd 	bl	8000428 <__aeabi_f2d>
 800128e:	a334      	add	r3, pc, #208	; (adr r3, 8001360 <main+0x1a8>)
 8001290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001294:	f7ff fbb0 	bl	80009f8 <__aeabi_dcmpgt>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d02d      	beq.n	80012fa <main+0x142>
 800129e:	4b3b      	ldr	r3, [pc, #236]	; (800138c <main+0x1d4>)
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff f8c0 	bl	8000428 <__aeabi_f2d>
 80012a8:	a32f      	add	r3, pc, #188	; (adr r3, 8001368 <main+0x1b0>)
 80012aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ae:	f7ff fb85 	bl	80009bc <__aeabi_dcmplt>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d020      	beq.n	80012fa <main+0x142>
 80012b8:	4b34      	ldr	r3, [pc, #208]	; (800138c <main+0x1d4>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff f8b3 	bl	8000428 <__aeabi_f2d>
 80012c2:	a327      	add	r3, pc, #156	; (adr r3, 8001360 <main+0x1a8>)
 80012c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c8:	f7ff fb96 	bl	80009f8 <__aeabi_dcmpgt>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d013      	beq.n	80012fa <main+0x142>
 80012d2:	4b2e      	ldr	r3, [pc, #184]	; (800138c <main+0x1d4>)
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff f8a6 	bl	8000428 <__aeabi_f2d>
 80012dc:	a322      	add	r3, pc, #136	; (adr r3, 8001368 <main+0x1b0>)
 80012de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e2:	f7ff fb6b 	bl	80009bc <__aeabi_dcmplt>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d006      	beq.n	80012fa <main+0x142>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 80012ec:	2200      	movs	r2, #0
 80012ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012f2:	4827      	ldr	r0, [pc, #156]	; (8001390 <main+0x1d8>)
 80012f4:	f001 fa26 	bl	8002744 <HAL_GPIO_WritePin>

			else
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);

			break;
 80012f8:	e005      	b.n	8001306 <main+0x14e>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80012fa:	2201      	movs	r2, #1
 80012fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001300:	4823      	ldr	r0, [pc, #140]	; (8001390 <main+0x1d8>)
 8001302:	f001 fa1f 	bl	8002744 <HAL_GPIO_WritePin>
			break;
 8001306:	bf00      	nop
	}

	if( (az_filter.out < 0.3) && (display_mode != 1)  )	// Revisar como evaluar que el timer ya está corriendo, cosa de no iniciarlo más de una vez.
 8001308:	4b1b      	ldr	r3, [pc, #108]	; (8001378 <main+0x1c0>)
 800130a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff f88a 	bl	8000428 <__aeabi_f2d>
 8001314:	a314      	add	r3, pc, #80	; (adr r3, 8001368 <main+0x1b0>)
 8001316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131a:	f7ff fb4f 	bl	80009bc <__aeabi_dcmplt>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d006      	beq.n	8001332 <main+0x17a>
 8001324:	4b18      	ldr	r3, [pc, #96]	; (8001388 <main+0x1d0>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d002      	beq.n	8001332 <main+0x17a>
		HAL_TIM_Base_Start_IT(&htim2);
 800132c:	4819      	ldr	r0, [pc, #100]	; (8001394 <main+0x1dc>)
 800132e:	f002 ff41 	bl	80041b4 <HAL_TIM_Base_Start_IT>

	if( (az_filter.out > 0.7) && (display_mode != 2) )
 8001332:	4b11      	ldr	r3, [pc, #68]	; (8001378 <main+0x1c0>)
 8001334:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff f875 	bl	8000428 <__aeabi_f2d>
 800133e:	a30c      	add	r3, pc, #48	; (adr r3, 8001370 <main+0x1b8>)
 8001340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001344:	f7ff fb58 	bl	80009f8 <__aeabi_dcmpgt>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d007      	beq.n	800135e <main+0x1a6>
 800134e:	4b0e      	ldr	r3, [pc, #56]	; (8001388 <main+0x1d0>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b02      	cmp	r3, #2
 8001354:	f43f af5a 	beq.w	800120c <main+0x54>
		HAL_TIM_Base_Start_IT(&htim2);
 8001358:	480e      	ldr	r0, [pc, #56]	; (8001394 <main+0x1dc>)
 800135a:	f002 ff2b 	bl	80041b4 <HAL_TIM_Base_Start_IT>
	switch(display_mode)
 800135e:	e755      	b.n	800120c <main+0x54>
 8001360:	33333333 	.word	0x33333333
 8001364:	bfd33333 	.word	0xbfd33333
 8001368:	33333333 	.word	0x33333333
 800136c:	3fd33333 	.word	0x3fd33333
 8001370:	66666666 	.word	0x66666666
 8001374:	3fe66666 	.word	0x3fe66666
 8001378:	2000097c 	.word	0x2000097c
 800137c:	200006fc 	.word	0x200006fc
 8001380:	20000294 	.word	0x20000294
 8001384:	200008c4 	.word	0x200008c4
 8001388:	20000290 	.word	0x20000290
 800138c:	200002b0 	.word	0x200002b0
 8001390:	40011000 	.word	0x40011000
 8001394:	20000a8c 	.word	0x20000a8c

08001398 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b094      	sub	sp, #80	; 0x50
 800139c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800139e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013a2:	2228      	movs	r2, #40	; 0x28
 80013a4:	2100      	movs	r1, #0
 80013a6:	4618      	mov	r0, r3
 80013a8:	f004 fb56 	bl	8005a58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013ac:	f107 0314 	add.w	r3, r7, #20
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013c8:	2301      	movs	r3, #1
 80013ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013d2:	2300      	movs	r3, #0
 80013d4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013d6:	2301      	movs	r3, #1
 80013d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013da:	2302      	movs	r3, #2
 80013dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013e4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80013e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013ee:	4618      	mov	r0, r3
 80013f0:	f002 f9c0 	bl	8003774 <HAL_RCC_OscConfig>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <SystemClock_Config+0x66>
  {
    Error_Handler();
 80013fa:	f000 f9ed 	bl	80017d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013fe:	230f      	movs	r3, #15
 8001400:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001402:	2302      	movs	r3, #2
 8001404:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001406:	2300      	movs	r3, #0
 8001408:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800140a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800140e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001410:	2300      	movs	r3, #0
 8001412:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001414:	f107 0314 	add.w	r3, r7, #20
 8001418:	2102      	movs	r1, #2
 800141a:	4618      	mov	r0, r3
 800141c:	f002 fc2a 	bl	8003c74 <HAL_RCC_ClockConfig>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001426:	f000 f9d7 	bl	80017d8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800142a:	2302      	movs	r3, #2
 800142c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800142e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001432:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001434:	1d3b      	adds	r3, r7, #4
 8001436:	4618      	mov	r0, r3
 8001438:	f002 fdb6 	bl	8003fa8 <HAL_RCCEx_PeriphCLKConfig>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001442:	f000 f9c9 	bl	80017d8 <Error_Handler>
  }
}
 8001446:	bf00      	nop
 8001448:	3750      	adds	r7, #80	; 0x50
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
	...

08001450 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001456:	1d3b      	adds	r3, r7, #4
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001460:	4b18      	ldr	r3, [pc, #96]	; (80014c4 <MX_ADC1_Init+0x74>)
 8001462:	4a19      	ldr	r2, [pc, #100]	; (80014c8 <MX_ADC1_Init+0x78>)
 8001464:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001466:	4b17      	ldr	r3, [pc, #92]	; (80014c4 <MX_ADC1_Init+0x74>)
 8001468:	2200      	movs	r2, #0
 800146a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800146c:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <MX_ADC1_Init+0x74>)
 800146e:	2200      	movs	r2, #0
 8001470:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001472:	4b14      	ldr	r3, [pc, #80]	; (80014c4 <MX_ADC1_Init+0x74>)
 8001474:	2200      	movs	r2, #0
 8001476:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001478:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <MX_ADC1_Init+0x74>)
 800147a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800147e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001480:	4b10      	ldr	r3, [pc, #64]	; (80014c4 <MX_ADC1_Init+0x74>)
 8001482:	2200      	movs	r2, #0
 8001484:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001486:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <MX_ADC1_Init+0x74>)
 8001488:	2201      	movs	r2, #1
 800148a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800148c:	480d      	ldr	r0, [pc, #52]	; (80014c4 <MX_ADC1_Init+0x74>)
 800148e:	f000 fcbd 	bl	8001e0c <HAL_ADC_Init>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001498:	f000 f99e 	bl	80017d8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800149c:	2307      	movs	r3, #7
 800149e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014a0:	2301      	movs	r3, #1
 80014a2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80014a4:	2300      	movs	r3, #0
 80014a6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	4619      	mov	r1, r3
 80014ac:	4805      	ldr	r0, [pc, #20]	; (80014c4 <MX_ADC1_Init+0x74>)
 80014ae:	f000 fd85 	bl	8001fbc <HAL_ADC_ConfigChannel>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80014b8:	f000 f98e 	bl	80017d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014bc:	bf00      	nop
 80014be:	3710      	adds	r7, #16
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	2000090c 	.word	0x2000090c
 80014c8:	40012400 	.word	0x40012400

080014cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014d0:	4b12      	ldr	r3, [pc, #72]	; (800151c <MX_I2C1_Init+0x50>)
 80014d2:	4a13      	ldr	r2, [pc, #76]	; (8001520 <MX_I2C1_Init+0x54>)
 80014d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014d6:	4b11      	ldr	r3, [pc, #68]	; (800151c <MX_I2C1_Init+0x50>)
 80014d8:	4a12      	ldr	r2, [pc, #72]	; (8001524 <MX_I2C1_Init+0x58>)
 80014da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014dc:	4b0f      	ldr	r3, [pc, #60]	; (800151c <MX_I2C1_Init+0x50>)
 80014de:	2200      	movs	r2, #0
 80014e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014e2:	4b0e      	ldr	r3, [pc, #56]	; (800151c <MX_I2C1_Init+0x50>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014e8:	4b0c      	ldr	r3, [pc, #48]	; (800151c <MX_I2C1_Init+0x50>)
 80014ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014f0:	4b0a      	ldr	r3, [pc, #40]	; (800151c <MX_I2C1_Init+0x50>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014f6:	4b09      	ldr	r3, [pc, #36]	; (800151c <MX_I2C1_Init+0x50>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014fc:	4b07      	ldr	r3, [pc, #28]	; (800151c <MX_I2C1_Init+0x50>)
 80014fe:	2200      	movs	r2, #0
 8001500:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001502:	4b06      	ldr	r3, [pc, #24]	; (800151c <MX_I2C1_Init+0x50>)
 8001504:	2200      	movs	r2, #0
 8001506:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001508:	4804      	ldr	r0, [pc, #16]	; (800151c <MX_I2C1_Init+0x50>)
 800150a:	f001 f933 	bl	8002774 <HAL_I2C_Init>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001514:	f000 f960 	bl	80017d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001518:	bf00      	nop
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20000784 	.word	0x20000784
 8001520:	40005400 	.word	0x40005400
 8001524:	000186a0 	.word	0x000186a0

08001528 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800152c:	4b12      	ldr	r3, [pc, #72]	; (8001578 <MX_I2C2_Init+0x50>)
 800152e:	4a13      	ldr	r2, [pc, #76]	; (800157c <MX_I2C2_Init+0x54>)
 8001530:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001532:	4b11      	ldr	r3, [pc, #68]	; (8001578 <MX_I2C2_Init+0x50>)
 8001534:	4a12      	ldr	r2, [pc, #72]	; (8001580 <MX_I2C2_Init+0x58>)
 8001536:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001538:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <MX_I2C2_Init+0x50>)
 800153a:	2200      	movs	r2, #0
 800153c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800153e:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <MX_I2C2_Init+0x50>)
 8001540:	2200      	movs	r2, #0
 8001542:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001544:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <MX_I2C2_Init+0x50>)
 8001546:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800154a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800154c:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <MX_I2C2_Init+0x50>)
 800154e:	2200      	movs	r2, #0
 8001550:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001552:	4b09      	ldr	r3, [pc, #36]	; (8001578 <MX_I2C2_Init+0x50>)
 8001554:	2200      	movs	r2, #0
 8001556:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001558:	4b07      	ldr	r3, [pc, #28]	; (8001578 <MX_I2C2_Init+0x50>)
 800155a:	2200      	movs	r2, #0
 800155c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800155e:	4b06      	ldr	r3, [pc, #24]	; (8001578 <MX_I2C2_Init+0x50>)
 8001560:	2200      	movs	r2, #0
 8001562:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001564:	4804      	ldr	r0, [pc, #16]	; (8001578 <MX_I2C2_Init+0x50>)
 8001566:	f001 f905 	bl	8002774 <HAL_I2C_Init>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001570:	f000 f932 	bl	80017d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20000860 	.word	0x20000860
 800157c:	40005800 	.word	0x40005800
 8001580:	000186a0 	.word	0x000186a0

08001584 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800158a:	f107 0308 	add.w	r3, r7, #8
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]
 8001594:	609a      	str	r2, [r3, #8]
 8001596:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001598:	463b      	mov	r3, r7
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015a0:	4b1e      	ldr	r3, [pc, #120]	; (800161c <MX_TIM2_Init+0x98>)
 80015a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200;
 80015a8:	4b1c      	ldr	r3, [pc, #112]	; (800161c <MX_TIM2_Init+0x98>)
 80015aa:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 80015ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b0:	4b1a      	ldr	r3, [pc, #104]	; (800161c <MX_TIM2_Init+0x98>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 80015b6:	4b19      	ldr	r3, [pc, #100]	; (800161c <MX_TIM2_Init+0x98>)
 80015b8:	f242 7210 	movw	r2, #10000	; 0x2710
 80015bc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015be:	4b17      	ldr	r3, [pc, #92]	; (800161c <MX_TIM2_Init+0x98>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015c4:	4b15      	ldr	r3, [pc, #84]	; (800161c <MX_TIM2_Init+0x98>)
 80015c6:	2280      	movs	r2, #128	; 0x80
 80015c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015ca:	4814      	ldr	r0, [pc, #80]	; (800161c <MX_TIM2_Init+0x98>)
 80015cc:	f002 fda2 	bl	8004114 <HAL_TIM_Base_Init>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80015d6:	f000 f8ff 	bl	80017d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015e0:	f107 0308 	add.w	r3, r7, #8
 80015e4:	4619      	mov	r1, r3
 80015e6:	480d      	ldr	r0, [pc, #52]	; (800161c <MX_TIM2_Init+0x98>)
 80015e8:	f002 ff6c 	bl	80044c4 <HAL_TIM_ConfigClockSource>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80015f2:	f000 f8f1 	bl	80017d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f6:	2300      	movs	r3, #0
 80015f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015fa:	2300      	movs	r3, #0
 80015fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015fe:	463b      	mov	r3, r7
 8001600:	4619      	mov	r1, r3
 8001602:	4806      	ldr	r0, [pc, #24]	; (800161c <MX_TIM2_Init+0x98>)
 8001604:	f003 f93e 	bl	8004884 <HAL_TIMEx_MasterConfigSynchronization>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800160e:	f000 f8e3 	bl	80017d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001612:	bf00      	nop
 8001614:	3718      	adds	r7, #24
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000a8c 	.word	0x20000a8c

08001620 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001626:	f107 0308 	add.w	r3, r7, #8
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	605a      	str	r2, [r3, #4]
 8001630:	609a      	str	r2, [r3, #8]
 8001632:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001634:	463b      	mov	r3, r7
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800163c:	4b1d      	ldr	r3, [pc, #116]	; (80016b4 <MX_TIM3_Init+0x94>)
 800163e:	4a1e      	ldr	r2, [pc, #120]	; (80016b8 <MX_TIM3_Init+0x98>)
 8001640:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 720;
 8001642:	4b1c      	ldr	r3, [pc, #112]	; (80016b4 <MX_TIM3_Init+0x94>)
 8001644:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8001648:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800164a:	4b1a      	ldr	r3, [pc, #104]	; (80016b4 <MX_TIM3_Init+0x94>)
 800164c:	2200      	movs	r2, #0
 800164e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500;
 8001650:	4b18      	ldr	r3, [pc, #96]	; (80016b4 <MX_TIM3_Init+0x94>)
 8001652:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001656:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001658:	4b16      	ldr	r3, [pc, #88]	; (80016b4 <MX_TIM3_Init+0x94>)
 800165a:	2200      	movs	r2, #0
 800165c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800165e:	4b15      	ldr	r3, [pc, #84]	; (80016b4 <MX_TIM3_Init+0x94>)
 8001660:	2200      	movs	r2, #0
 8001662:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001664:	4813      	ldr	r0, [pc, #76]	; (80016b4 <MX_TIM3_Init+0x94>)
 8001666:	f002 fd55 	bl	8004114 <HAL_TIM_Base_Init>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001670:	f000 f8b2 	bl	80017d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001674:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001678:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800167a:	f107 0308 	add.w	r3, r7, #8
 800167e:	4619      	mov	r1, r3
 8001680:	480c      	ldr	r0, [pc, #48]	; (80016b4 <MX_TIM3_Init+0x94>)
 8001682:	f002 ff1f 	bl	80044c4 <HAL_TIM_ConfigClockSource>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800168c:	f000 f8a4 	bl	80017d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001690:	2300      	movs	r3, #0
 8001692:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001694:	2300      	movs	r3, #0
 8001696:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001698:	463b      	mov	r3, r7
 800169a:	4619      	mov	r1, r3
 800169c:	4805      	ldr	r0, [pc, #20]	; (80016b4 <MX_TIM3_Init+0x94>)
 800169e:	f003 f8f1 	bl	8004884 <HAL_TIMEx_MasterConfigSynchronization>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80016a8:	f000 f896 	bl	80017d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80016ac:	bf00      	nop
 80016ae:	3718      	adds	r7, #24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	200008c4 	.word	0x200008c4
 80016b8:	40000400 	.word	0x40000400

080016bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016c0:	4b11      	ldr	r3, [pc, #68]	; (8001708 <MX_USART1_UART_Init+0x4c>)
 80016c2:	4a12      	ldr	r2, [pc, #72]	; (800170c <MX_USART1_UART_Init+0x50>)
 80016c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80016c6:	4b10      	ldr	r3, [pc, #64]	; (8001708 <MX_USART1_UART_Init+0x4c>)
 80016c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80016cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016ce:	4b0e      	ldr	r3, [pc, #56]	; (8001708 <MX_USART1_UART_Init+0x4c>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016d4:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <MX_USART1_UART_Init+0x4c>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016da:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <MX_USART1_UART_Init+0x4c>)
 80016dc:	2200      	movs	r2, #0
 80016de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016e0:	4b09      	ldr	r3, [pc, #36]	; (8001708 <MX_USART1_UART_Init+0x4c>)
 80016e2:	220c      	movs	r2, #12
 80016e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016e6:	4b08      	ldr	r3, [pc, #32]	; (8001708 <MX_USART1_UART_Init+0x4c>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016ec:	4b06      	ldr	r3, [pc, #24]	; (8001708 <MX_USART1_UART_Init+0x4c>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016f2:	4805      	ldr	r0, [pc, #20]	; (8001708 <MX_USART1_UART_Init+0x4c>)
 80016f4:	f003 f936 	bl	8004964 <HAL_UART_Init>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016fe:	f000 f86b 	bl	80017d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	2000093c 	.word	0x2000093c
 800170c:	40013800 	.word	0x40013800

08001710 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b088      	sub	sp, #32
 8001714:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001716:	f107 0310 	add.w	r3, r7, #16
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	605a      	str	r2, [r3, #4]
 8001720:	609a      	str	r2, [r3, #8]
 8001722:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001724:	4b2a      	ldr	r3, [pc, #168]	; (80017d0 <MX_GPIO_Init+0xc0>)
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	4a29      	ldr	r2, [pc, #164]	; (80017d0 <MX_GPIO_Init+0xc0>)
 800172a:	f043 0310 	orr.w	r3, r3, #16
 800172e:	6193      	str	r3, [r2, #24]
 8001730:	4b27      	ldr	r3, [pc, #156]	; (80017d0 <MX_GPIO_Init+0xc0>)
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	f003 0310 	and.w	r3, r3, #16
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800173c:	4b24      	ldr	r3, [pc, #144]	; (80017d0 <MX_GPIO_Init+0xc0>)
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	4a23      	ldr	r2, [pc, #140]	; (80017d0 <MX_GPIO_Init+0xc0>)
 8001742:	f043 0320 	orr.w	r3, r3, #32
 8001746:	6193      	str	r3, [r2, #24]
 8001748:	4b21      	ldr	r3, [pc, #132]	; (80017d0 <MX_GPIO_Init+0xc0>)
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	f003 0320 	and.w	r3, r3, #32
 8001750:	60bb      	str	r3, [r7, #8]
 8001752:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001754:	4b1e      	ldr	r3, [pc, #120]	; (80017d0 <MX_GPIO_Init+0xc0>)
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	4a1d      	ldr	r2, [pc, #116]	; (80017d0 <MX_GPIO_Init+0xc0>)
 800175a:	f043 0304 	orr.w	r3, r3, #4
 800175e:	6193      	str	r3, [r2, #24]
 8001760:	4b1b      	ldr	r3, [pc, #108]	; (80017d0 <MX_GPIO_Init+0xc0>)
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	f003 0304 	and.w	r3, r3, #4
 8001768:	607b      	str	r3, [r7, #4]
 800176a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800176c:	4b18      	ldr	r3, [pc, #96]	; (80017d0 <MX_GPIO_Init+0xc0>)
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	4a17      	ldr	r2, [pc, #92]	; (80017d0 <MX_GPIO_Init+0xc0>)
 8001772:	f043 0308 	orr.w	r3, r3, #8
 8001776:	6193      	str	r3, [r2, #24]
 8001778:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <MX_GPIO_Init+0xc0>)
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	f003 0308 	and.w	r3, r3, #8
 8001780:	603b      	str	r3, [r7, #0]
 8001782:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001784:	2201      	movs	r2, #1
 8001786:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800178a:	4812      	ldr	r0, [pc, #72]	; (80017d4 <MX_GPIO_Init+0xc4>)
 800178c:	f000 ffda 	bl	8002744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001790:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001794:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001796:	2301      	movs	r3, #1
 8001798:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179e:	2302      	movs	r3, #2
 80017a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017a2:	f107 0310 	add.w	r3, r7, #16
 80017a6:	4619      	mov	r1, r3
 80017a8:	480a      	ldr	r0, [pc, #40]	; (80017d4 <MX_GPIO_Init+0xc4>)
 80017aa:	f000 fe47 	bl	800243c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80017ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017b4:	2300      	movs	r3, #0
 80017b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017b8:	2301      	movs	r3, #1
 80017ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017bc:	f107 0310 	add.w	r3, r7, #16
 80017c0:	4619      	mov	r1, r3
 80017c2:	4804      	ldr	r0, [pc, #16]	; (80017d4 <MX_GPIO_Init+0xc4>)
 80017c4:	f000 fe3a 	bl	800243c <HAL_GPIO_Init>

}
 80017c8:	bf00      	nop
 80017ca:	3720      	adds	r7, #32
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40021000 	.word	0x40021000
 80017d4:	40011000 	.word	0x40011000

080017d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017dc:	b672      	cpsid	i
}
 80017de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017e0:	e7fe      	b.n	80017e0 <Error_Handler+0x8>
	...

080017e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017ea:	4b15      	ldr	r3, [pc, #84]	; (8001840 <HAL_MspInit+0x5c>)
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	4a14      	ldr	r2, [pc, #80]	; (8001840 <HAL_MspInit+0x5c>)
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	6193      	str	r3, [r2, #24]
 80017f6:	4b12      	ldr	r3, [pc, #72]	; (8001840 <HAL_MspInit+0x5c>)
 80017f8:	699b      	ldr	r3, [r3, #24]
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	60bb      	str	r3, [r7, #8]
 8001800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001802:	4b0f      	ldr	r3, [pc, #60]	; (8001840 <HAL_MspInit+0x5c>)
 8001804:	69db      	ldr	r3, [r3, #28]
 8001806:	4a0e      	ldr	r2, [pc, #56]	; (8001840 <HAL_MspInit+0x5c>)
 8001808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800180c:	61d3      	str	r3, [r2, #28]
 800180e:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <HAL_MspInit+0x5c>)
 8001810:	69db      	ldr	r3, [r3, #28]
 8001812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001816:	607b      	str	r3, [r7, #4]
 8001818:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800181a:	4b0a      	ldr	r3, [pc, #40]	; (8001844 <HAL_MspInit+0x60>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	4a04      	ldr	r2, [pc, #16]	; (8001844 <HAL_MspInit+0x60>)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001836:	bf00      	nop
 8001838:	3714      	adds	r7, #20
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr
 8001840:	40021000 	.word	0x40021000
 8001844:	40010000 	.word	0x40010000

08001848 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b088      	sub	sp, #32
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001850:	f107 0310 	add.w	r3, r7, #16
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a14      	ldr	r2, [pc, #80]	; (80018b4 <HAL_ADC_MspInit+0x6c>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d121      	bne.n	80018ac <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001868:	4b13      	ldr	r3, [pc, #76]	; (80018b8 <HAL_ADC_MspInit+0x70>)
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	4a12      	ldr	r2, [pc, #72]	; (80018b8 <HAL_ADC_MspInit+0x70>)
 800186e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001872:	6193      	str	r3, [r2, #24]
 8001874:	4b10      	ldr	r3, [pc, #64]	; (80018b8 <HAL_ADC_MspInit+0x70>)
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001880:	4b0d      	ldr	r3, [pc, #52]	; (80018b8 <HAL_ADC_MspInit+0x70>)
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	4a0c      	ldr	r2, [pc, #48]	; (80018b8 <HAL_ADC_MspInit+0x70>)
 8001886:	f043 0304 	orr.w	r3, r3, #4
 800188a:	6193      	str	r3, [r2, #24]
 800188c:	4b0a      	ldr	r3, [pc, #40]	; (80018b8 <HAL_ADC_MspInit+0x70>)
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	f003 0304 	and.w	r3, r3, #4
 8001894:	60bb      	str	r3, [r7, #8]
 8001896:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001898:	2380      	movs	r3, #128	; 0x80
 800189a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800189c:	2303      	movs	r3, #3
 800189e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a0:	f107 0310 	add.w	r3, r7, #16
 80018a4:	4619      	mov	r1, r3
 80018a6:	4805      	ldr	r0, [pc, #20]	; (80018bc <HAL_ADC_MspInit+0x74>)
 80018a8:	f000 fdc8 	bl	800243c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018ac:	bf00      	nop
 80018ae:	3720      	adds	r7, #32
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40012400 	.word	0x40012400
 80018b8:	40021000 	.word	0x40021000
 80018bc:	40010800 	.word	0x40010800

080018c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b08a      	sub	sp, #40	; 0x28
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c8:	f107 0318 	add.w	r3, r7, #24
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	609a      	str	r2, [r3, #8]
 80018d4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a2b      	ldr	r2, [pc, #172]	; (8001988 <HAL_I2C_MspInit+0xc8>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d124      	bne.n	800192a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e0:	4b2a      	ldr	r3, [pc, #168]	; (800198c <HAL_I2C_MspInit+0xcc>)
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	4a29      	ldr	r2, [pc, #164]	; (800198c <HAL_I2C_MspInit+0xcc>)
 80018e6:	f043 0308 	orr.w	r3, r3, #8
 80018ea:	6193      	str	r3, [r2, #24]
 80018ec:	4b27      	ldr	r3, [pc, #156]	; (800198c <HAL_I2C_MspInit+0xcc>)
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	f003 0308 	and.w	r3, r3, #8
 80018f4:	617b      	str	r3, [r7, #20]
 80018f6:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018f8:	23c0      	movs	r3, #192	; 0xc0
 80018fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018fc:	2312      	movs	r3, #18
 80018fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001900:	2303      	movs	r3, #3
 8001902:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001904:	f107 0318 	add.w	r3, r7, #24
 8001908:	4619      	mov	r1, r3
 800190a:	4821      	ldr	r0, [pc, #132]	; (8001990 <HAL_I2C_MspInit+0xd0>)
 800190c:	f000 fd96 	bl	800243c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001910:	4b1e      	ldr	r3, [pc, #120]	; (800198c <HAL_I2C_MspInit+0xcc>)
 8001912:	69db      	ldr	r3, [r3, #28]
 8001914:	4a1d      	ldr	r2, [pc, #116]	; (800198c <HAL_I2C_MspInit+0xcc>)
 8001916:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800191a:	61d3      	str	r3, [r2, #28]
 800191c:	4b1b      	ldr	r3, [pc, #108]	; (800198c <HAL_I2C_MspInit+0xcc>)
 800191e:	69db      	ldr	r3, [r3, #28]
 8001920:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001924:	613b      	str	r3, [r7, #16]
 8001926:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001928:	e029      	b.n	800197e <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a19      	ldr	r2, [pc, #100]	; (8001994 <HAL_I2C_MspInit+0xd4>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d124      	bne.n	800197e <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001934:	4b15      	ldr	r3, [pc, #84]	; (800198c <HAL_I2C_MspInit+0xcc>)
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	4a14      	ldr	r2, [pc, #80]	; (800198c <HAL_I2C_MspInit+0xcc>)
 800193a:	f043 0308 	orr.w	r3, r3, #8
 800193e:	6193      	str	r3, [r2, #24]
 8001940:	4b12      	ldr	r3, [pc, #72]	; (800198c <HAL_I2C_MspInit+0xcc>)
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	f003 0308 	and.w	r3, r3, #8
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800194c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001950:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001952:	2312      	movs	r3, #18
 8001954:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001956:	2303      	movs	r3, #3
 8001958:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800195a:	f107 0318 	add.w	r3, r7, #24
 800195e:	4619      	mov	r1, r3
 8001960:	480b      	ldr	r0, [pc, #44]	; (8001990 <HAL_I2C_MspInit+0xd0>)
 8001962:	f000 fd6b 	bl	800243c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001966:	4b09      	ldr	r3, [pc, #36]	; (800198c <HAL_I2C_MspInit+0xcc>)
 8001968:	69db      	ldr	r3, [r3, #28]
 800196a:	4a08      	ldr	r2, [pc, #32]	; (800198c <HAL_I2C_MspInit+0xcc>)
 800196c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001970:	61d3      	str	r3, [r2, #28]
 8001972:	4b06      	ldr	r3, [pc, #24]	; (800198c <HAL_I2C_MspInit+0xcc>)
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800197a:	60bb      	str	r3, [r7, #8]
 800197c:	68bb      	ldr	r3, [r7, #8]
}
 800197e:	bf00      	nop
 8001980:	3728      	adds	r7, #40	; 0x28
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40005400 	.word	0x40005400
 800198c:	40021000 	.word	0x40021000
 8001990:	40010c00 	.word	0x40010c00
 8001994:	40005800 	.word	0x40005800

08001998 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019a8:	d114      	bne.n	80019d4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019aa:	4b19      	ldr	r3, [pc, #100]	; (8001a10 <HAL_TIM_Base_MspInit+0x78>)
 80019ac:	69db      	ldr	r3, [r3, #28]
 80019ae:	4a18      	ldr	r2, [pc, #96]	; (8001a10 <HAL_TIM_Base_MspInit+0x78>)
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	61d3      	str	r3, [r2, #28]
 80019b6:	4b16      	ldr	r3, [pc, #88]	; (8001a10 <HAL_TIM_Base_MspInit+0x78>)
 80019b8:	69db      	ldr	r3, [r3, #28]
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019c2:	2200      	movs	r2, #0
 80019c4:	2100      	movs	r1, #0
 80019c6:	201c      	movs	r0, #28
 80019c8:	f000 fd01 	bl	80023ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019cc:	201c      	movs	r0, #28
 80019ce:	f000 fd1a 	bl	8002406 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80019d2:	e018      	b.n	8001a06 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a0e      	ldr	r2, [pc, #56]	; (8001a14 <HAL_TIM_Base_MspInit+0x7c>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d113      	bne.n	8001a06 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019de:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <HAL_TIM_Base_MspInit+0x78>)
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	4a0b      	ldr	r2, [pc, #44]	; (8001a10 <HAL_TIM_Base_MspInit+0x78>)
 80019e4:	f043 0302 	orr.w	r3, r3, #2
 80019e8:	61d3      	str	r3, [r2, #28]
 80019ea:	4b09      	ldr	r3, [pc, #36]	; (8001a10 <HAL_TIM_Base_MspInit+0x78>)
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	60bb      	str	r3, [r7, #8]
 80019f4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80019f6:	2200      	movs	r2, #0
 80019f8:	2100      	movs	r1, #0
 80019fa:	201d      	movs	r0, #29
 80019fc:	f000 fce7 	bl	80023ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a00:	201d      	movs	r0, #29
 8001a02:	f000 fd00 	bl	8002406 <HAL_NVIC_EnableIRQ>
}
 8001a06:	bf00      	nop
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40021000 	.word	0x40021000
 8001a14:	40000400 	.word	0x40000400

08001a18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b088      	sub	sp, #32
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a20:	f107 0310 	add.w	r3, r7, #16
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a1c      	ldr	r2, [pc, #112]	; (8001aa4 <HAL_UART_MspInit+0x8c>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d131      	bne.n	8001a9c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a38:	4b1b      	ldr	r3, [pc, #108]	; (8001aa8 <HAL_UART_MspInit+0x90>)
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	4a1a      	ldr	r2, [pc, #104]	; (8001aa8 <HAL_UART_MspInit+0x90>)
 8001a3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a42:	6193      	str	r3, [r2, #24]
 8001a44:	4b18      	ldr	r3, [pc, #96]	; (8001aa8 <HAL_UART_MspInit+0x90>)
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a50:	4b15      	ldr	r3, [pc, #84]	; (8001aa8 <HAL_UART_MspInit+0x90>)
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	4a14      	ldr	r2, [pc, #80]	; (8001aa8 <HAL_UART_MspInit+0x90>)
 8001a56:	f043 0304 	orr.w	r3, r3, #4
 8001a5a:	6193      	str	r3, [r2, #24]
 8001a5c:	4b12      	ldr	r3, [pc, #72]	; (8001aa8 <HAL_UART_MspInit+0x90>)
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	f003 0304 	and.w	r3, r3, #4
 8001a64:	60bb      	str	r3, [r7, #8]
 8001a66:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a6c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a72:	2303      	movs	r3, #3
 8001a74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a76:	f107 0310 	add.w	r3, r7, #16
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	480b      	ldr	r0, [pc, #44]	; (8001aac <HAL_UART_MspInit+0x94>)
 8001a7e:	f000 fcdd 	bl	800243c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a90:	f107 0310 	add.w	r3, r7, #16
 8001a94:	4619      	mov	r1, r3
 8001a96:	4805      	ldr	r0, [pc, #20]	; (8001aac <HAL_UART_MspInit+0x94>)
 8001a98:	f000 fcd0 	bl	800243c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a9c:	bf00      	nop
 8001a9e:	3720      	adds	r7, #32
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	40013800 	.word	0x40013800
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	40010800 	.word	0x40010800

08001ab0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ab4:	e7fe      	b.n	8001ab4 <NMI_Handler+0x4>

08001ab6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aba:	e7fe      	b.n	8001aba <HardFault_Handler+0x4>

08001abc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ac0:	e7fe      	b.n	8001ac0 <MemManage_Handler+0x4>

08001ac2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ac6:	e7fe      	b.n	8001ac6 <BusFault_Handler+0x4>

08001ac8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001acc:	e7fe      	b.n	8001acc <UsageFault_Handler+0x4>

08001ace <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bc80      	pop	{r7}
 8001ad8:	4770      	bx	lr

08001ada <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ada:	b480      	push	{r7}
 8001adc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bc80      	pop	{r7}
 8001ae4:	4770      	bx	lr

08001ae6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bc80      	pop	{r7}
 8001af0:	4770      	bx	lr

08001af2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001af6:	f000 f949 	bl	8001d8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
	...

08001b00 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b04:	4802      	ldr	r0, [pc, #8]	; (8001b10 <TIM2_IRQHandler+0x10>)
 8001b06:	f002 fbd5 	bl	80042b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	20000a8c 	.word	0x20000a8c

08001b14 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b18:	4802      	ldr	r0, [pc, #8]	; (8001b24 <TIM3_IRQHandler+0x10>)
 8001b1a:	f002 fbcb 	bl	80042b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	200008c4 	.word	0x200008c4

08001b28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
	return 1;
 8001b2c:	2301      	movs	r3, #1
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bc80      	pop	{r7}
 8001b34:	4770      	bx	lr

08001b36 <_kill>:

int _kill(int pid, int sig)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b082      	sub	sp, #8
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
 8001b3e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b40:	f003 ff52 	bl	80059e8 <__errno>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2216      	movs	r2, #22
 8001b48:	601a      	str	r2, [r3, #0]
	return -1;
 8001b4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <_exit>:

void _exit (int status)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b082      	sub	sp, #8
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b5e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff ffe7 	bl	8001b36 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b68:	e7fe      	b.n	8001b68 <_exit+0x12>

08001b6a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b086      	sub	sp, #24
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	60f8      	str	r0, [r7, #12]
 8001b72:	60b9      	str	r1, [r7, #8]
 8001b74:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b76:	2300      	movs	r3, #0
 8001b78:	617b      	str	r3, [r7, #20]
 8001b7a:	e00a      	b.n	8001b92 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b7c:	f3af 8000 	nop.w
 8001b80:	4601      	mov	r1, r0
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	1c5a      	adds	r2, r3, #1
 8001b86:	60ba      	str	r2, [r7, #8]
 8001b88:	b2ca      	uxtb	r2, r1
 8001b8a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	617b      	str	r3, [r7, #20]
 8001b92:	697a      	ldr	r2, [r7, #20]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	dbf0      	blt.n	8001b7c <_read+0x12>
	}

return len;
 8001b9a:	687b      	ldr	r3, [r7, #4]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3718      	adds	r7, #24
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	617b      	str	r3, [r7, #20]
 8001bb4:	e009      	b.n	8001bca <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	1c5a      	adds	r2, r3, #1
 8001bba:	60ba      	str	r2, [r7, #8]
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	617b      	str	r3, [r7, #20]
 8001bca:	697a      	ldr	r2, [r7, #20]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	dbf1      	blt.n	8001bb6 <_write+0x12>
	}
	return len;
 8001bd2:	687b      	ldr	r3, [r7, #4]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3718      	adds	r7, #24
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <_close>:

int _close(int file)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
	return -1;
 8001be4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bc80      	pop	{r7}
 8001bf0:	4770      	bx	lr

08001bf2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
 8001bfa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c02:	605a      	str	r2, [r3, #4]
	return 0;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr

08001c10 <_isatty>:

int _isatty(int file)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
	return 1;
 8001c18:	2301      	movs	r3, #1
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bc80      	pop	{r7}
 8001c22:	4770      	bx	lr

08001c24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
	return 0;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3714      	adds	r7, #20
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bc80      	pop	{r7}
 8001c3a:	4770      	bx	lr

08001c3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c44:	4a14      	ldr	r2, [pc, #80]	; (8001c98 <_sbrk+0x5c>)
 8001c46:	4b15      	ldr	r3, [pc, #84]	; (8001c9c <_sbrk+0x60>)
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c50:	4b13      	ldr	r3, [pc, #76]	; (8001ca0 <_sbrk+0x64>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d102      	bne.n	8001c5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c58:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <_sbrk+0x64>)
 8001c5a:	4a12      	ldr	r2, [pc, #72]	; (8001ca4 <_sbrk+0x68>)
 8001c5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c5e:	4b10      	ldr	r3, [pc, #64]	; (8001ca0 <_sbrk+0x64>)
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4413      	add	r3, r2
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d207      	bcs.n	8001c7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c6c:	f003 febc 	bl	80059e8 <__errno>
 8001c70:	4603      	mov	r3, r0
 8001c72:	220c      	movs	r2, #12
 8001c74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c7a:	e009      	b.n	8001c90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c7c:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <_sbrk+0x64>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c82:	4b07      	ldr	r3, [pc, #28]	; (8001ca0 <_sbrk+0x64>)
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4413      	add	r3, r2
 8001c8a:	4a05      	ldr	r2, [pc, #20]	; (8001ca0 <_sbrk+0x64>)
 8001c8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3718      	adds	r7, #24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	20005000 	.word	0x20005000
 8001c9c:	00000400 	.word	0x00000400
 8001ca0:	200002c8 	.word	0x200002c8
 8001ca4:	20000c18 	.word	0x20000c18

08001ca8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cac:	bf00      	nop
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr

08001cb4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001cb4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001cb6:	e003      	b.n	8001cc0 <LoopCopyDataInit>

08001cb8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001cb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001cba:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001cbc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001cbe:	3104      	adds	r1, #4

08001cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001cc0:	480a      	ldr	r0, [pc, #40]	; (8001cec <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001cc2:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001cc4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001cc6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001cc8:	d3f6      	bcc.n	8001cb8 <CopyDataInit>
  ldr r2, =_sbss
 8001cca:	4a0a      	ldr	r2, [pc, #40]	; (8001cf4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001ccc:	e002      	b.n	8001cd4 <LoopFillZerobss>

08001cce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001cce:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001cd0:	f842 3b04 	str.w	r3, [r2], #4

08001cd4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001cd4:	4b08      	ldr	r3, [pc, #32]	; (8001cf8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001cd6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001cd8:	d3f9      	bcc.n	8001cce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001cda:	f7ff ffe5 	bl	8001ca8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cde:	f003 fe89 	bl	80059f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ce2:	f7ff fa69 	bl	80011b8 <main>
  bx lr
 8001ce6:	4770      	bx	lr
  ldr r3, =_sidata
 8001ce8:	0800c018 	.word	0x0800c018
  ldr r0, =_sdata
 8001cec:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001cf0:	20000274 	.word	0x20000274
  ldr r2, =_sbss
 8001cf4:	20000274 	.word	0x20000274
  ldr r3, = _ebss
 8001cf8:	20000c14 	.word	0x20000c14

08001cfc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cfc:	e7fe      	b.n	8001cfc <ADC1_2_IRQHandler>
	...

08001d00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d04:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <HAL_Init+0x28>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a07      	ldr	r2, [pc, #28]	; (8001d28 <HAL_Init+0x28>)
 8001d0a:	f043 0310 	orr.w	r3, r3, #16
 8001d0e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d10:	2003      	movs	r0, #3
 8001d12:	f000 fb51 	bl	80023b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d16:	2000      	movs	r0, #0
 8001d18:	f000 f808 	bl	8001d2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d1c:	f7ff fd62 	bl	80017e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40022000 	.word	0x40022000

08001d2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d34:	4b12      	ldr	r3, [pc, #72]	; (8001d80 <HAL_InitTick+0x54>)
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	4b12      	ldr	r3, [pc, #72]	; (8001d84 <HAL_InitTick+0x58>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f000 fb69 	bl	8002422 <HAL_SYSTICK_Config>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e00e      	b.n	8001d78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2b0f      	cmp	r3, #15
 8001d5e:	d80a      	bhi.n	8001d76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d60:	2200      	movs	r2, #0
 8001d62:	6879      	ldr	r1, [r7, #4]
 8001d64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d68:	f000 fb31 	bl	80023ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d6c:	4a06      	ldr	r2, [pc, #24]	; (8001d88 <HAL_InitTick+0x5c>)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d72:	2300      	movs	r3, #0
 8001d74:	e000      	b.n	8001d78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	20000000 	.word	0x20000000
 8001d84:	20000008 	.word	0x20000008
 8001d88:	20000004 	.word	0x20000004

08001d8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d90:	4b05      	ldr	r3, [pc, #20]	; (8001da8 <HAL_IncTick+0x1c>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	461a      	mov	r2, r3
 8001d96:	4b05      	ldr	r3, [pc, #20]	; (8001dac <HAL_IncTick+0x20>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	4a03      	ldr	r2, [pc, #12]	; (8001dac <HAL_IncTick+0x20>)
 8001d9e:	6013      	str	r3, [r2, #0]
}
 8001da0:	bf00      	nop
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bc80      	pop	{r7}
 8001da6:	4770      	bx	lr
 8001da8:	20000008 	.word	0x20000008
 8001dac:	20000bf0 	.word	0x20000bf0

08001db0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  return uwTick;
 8001db4:	4b02      	ldr	r3, [pc, #8]	; (8001dc0 <HAL_GetTick+0x10>)
 8001db6:	681b      	ldr	r3, [r3, #0]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bc80      	pop	{r7}
 8001dbe:	4770      	bx	lr
 8001dc0:	20000bf0 	.word	0x20000bf0

08001dc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dcc:	f7ff fff0 	bl	8001db0 <HAL_GetTick>
 8001dd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ddc:	d005      	beq.n	8001dea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dde:	4b0a      	ldr	r3, [pc, #40]	; (8001e08 <HAL_Delay+0x44>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	461a      	mov	r2, r3
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	4413      	add	r3, r2
 8001de8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dea:	bf00      	nop
 8001dec:	f7ff ffe0 	bl	8001db0 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d8f7      	bhi.n	8001dec <HAL_Delay+0x28>
  {
  }
}
 8001dfc:	bf00      	nop
 8001dfe:	bf00      	nop
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	20000008 	.word	0x20000008

08001e0c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e14:	2300      	movs	r3, #0
 8001e16:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001e20:	2300      	movs	r3, #0
 8001e22:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e0be      	b.n	8001fac <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d109      	bne.n	8001e50 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7ff fcfc 	bl	8001848 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 f9ab 	bl	80021ac <ADC_ConversionStop_Disable>
 8001e56:	4603      	mov	r3, r0
 8001e58:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e5e:	f003 0310 	and.w	r3, r3, #16
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f040 8099 	bne.w	8001f9a <HAL_ADC_Init+0x18e>
 8001e68:	7dfb      	ldrb	r3, [r7, #23]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f040 8095 	bne.w	8001f9a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e74:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e78:	f023 0302 	bic.w	r3, r3, #2
 8001e7c:	f043 0202 	orr.w	r2, r3, #2
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e8c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	7b1b      	ldrb	r3, [r3, #12]
 8001e92:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e94:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e96:	68ba      	ldr	r2, [r7, #8]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ea4:	d003      	beq.n	8001eae <HAL_ADC_Init+0xa2>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d102      	bne.n	8001eb4 <HAL_ADC_Init+0xa8>
 8001eae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eb2:	e000      	b.n	8001eb6 <HAL_ADC_Init+0xaa>
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	7d1b      	ldrb	r3, [r3, #20]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d119      	bne.n	8001ef8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	7b1b      	ldrb	r3, [r3, #12]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d109      	bne.n	8001ee0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	035a      	lsls	r2, r3, #13
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001edc:	613b      	str	r3, [r7, #16]
 8001ede:	e00b      	b.n	8001ef8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee4:	f043 0220 	orr.w	r2, r3, #32
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef0:	f043 0201 	orr.w	r2, r3, #1
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	689a      	ldr	r2, [r3, #8]
 8001f12:	4b28      	ldr	r3, [pc, #160]	; (8001fb4 <HAL_ADC_Init+0x1a8>)
 8001f14:	4013      	ands	r3, r2
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	6812      	ldr	r2, [r2, #0]
 8001f1a:	68b9      	ldr	r1, [r7, #8]
 8001f1c:	430b      	orrs	r3, r1
 8001f1e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f28:	d003      	beq.n	8001f32 <HAL_ADC_Init+0x126>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d104      	bne.n	8001f3c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	3b01      	subs	r3, #1
 8001f38:	051b      	lsls	r3, r3, #20
 8001f3a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f42:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	689a      	ldr	r2, [r3, #8]
 8001f56:	4b18      	ldr	r3, [pc, #96]	; (8001fb8 <HAL_ADC_Init+0x1ac>)
 8001f58:	4013      	ands	r3, r2
 8001f5a:	68ba      	ldr	r2, [r7, #8]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d10b      	bne.n	8001f78 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6a:	f023 0303 	bic.w	r3, r3, #3
 8001f6e:	f043 0201 	orr.w	r2, r3, #1
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f76:	e018      	b.n	8001faa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7c:	f023 0312 	bic.w	r3, r3, #18
 8001f80:	f043 0210 	orr.w	r2, r3, #16
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f8c:	f043 0201 	orr.w	r2, r3, #1
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f98:	e007      	b.n	8001faa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f9e:	f043 0210 	orr.w	r2, r3, #16
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001faa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3718      	adds	r7, #24
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	ffe1f7fd 	.word	0xffe1f7fd
 8001fb8:	ff1f0efe 	.word	0xff1f0efe

08001fbc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d101      	bne.n	8001fdc <HAL_ADC_ConfigChannel+0x20>
 8001fd8:	2302      	movs	r3, #2
 8001fda:	e0dc      	b.n	8002196 <HAL_ADC_ConfigChannel+0x1da>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	2b06      	cmp	r3, #6
 8001fea:	d81c      	bhi.n	8002026 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685a      	ldr	r2, [r3, #4]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	4413      	add	r3, r2
 8001ffc:	3b05      	subs	r3, #5
 8001ffe:	221f      	movs	r2, #31
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	43db      	mvns	r3, r3
 8002006:	4019      	ands	r1, r3
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	6818      	ldr	r0, [r3, #0]
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685a      	ldr	r2, [r3, #4]
 8002010:	4613      	mov	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	3b05      	subs	r3, #5
 8002018:	fa00 f203 	lsl.w	r2, r0, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	430a      	orrs	r2, r1
 8002022:	635a      	str	r2, [r3, #52]	; 0x34
 8002024:	e03c      	b.n	80020a0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	2b0c      	cmp	r3, #12
 800202c:	d81c      	bhi.n	8002068 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685a      	ldr	r2, [r3, #4]
 8002038:	4613      	mov	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	4413      	add	r3, r2
 800203e:	3b23      	subs	r3, #35	; 0x23
 8002040:	221f      	movs	r2, #31
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	43db      	mvns	r3, r3
 8002048:	4019      	ands	r1, r3
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	6818      	ldr	r0, [r3, #0]
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685a      	ldr	r2, [r3, #4]
 8002052:	4613      	mov	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4413      	add	r3, r2
 8002058:	3b23      	subs	r3, #35	; 0x23
 800205a:	fa00 f203 	lsl.w	r2, r0, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	430a      	orrs	r2, r1
 8002064:	631a      	str	r2, [r3, #48]	; 0x30
 8002066:	e01b      	b.n	80020a0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685a      	ldr	r2, [r3, #4]
 8002072:	4613      	mov	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4413      	add	r3, r2
 8002078:	3b41      	subs	r3, #65	; 0x41
 800207a:	221f      	movs	r2, #31
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	43db      	mvns	r3, r3
 8002082:	4019      	ands	r1, r3
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	6818      	ldr	r0, [r3, #0]
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685a      	ldr	r2, [r3, #4]
 800208c:	4613      	mov	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4413      	add	r3, r2
 8002092:	3b41      	subs	r3, #65	; 0x41
 8002094:	fa00 f203 	lsl.w	r2, r0, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	430a      	orrs	r2, r1
 800209e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2b09      	cmp	r3, #9
 80020a6:	d91c      	bls.n	80020e2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68d9      	ldr	r1, [r3, #12]
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	4613      	mov	r3, r2
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	4413      	add	r3, r2
 80020b8:	3b1e      	subs	r3, #30
 80020ba:	2207      	movs	r2, #7
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	43db      	mvns	r3, r3
 80020c2:	4019      	ands	r1, r3
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	6898      	ldr	r0, [r3, #8]
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	4613      	mov	r3, r2
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	4413      	add	r3, r2
 80020d2:	3b1e      	subs	r3, #30
 80020d4:	fa00 f203 	lsl.w	r2, r0, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	430a      	orrs	r2, r1
 80020de:	60da      	str	r2, [r3, #12]
 80020e0:	e019      	b.n	8002116 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6919      	ldr	r1, [r3, #16]
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	4613      	mov	r3, r2
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	4413      	add	r3, r2
 80020f2:	2207      	movs	r2, #7
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	43db      	mvns	r3, r3
 80020fa:	4019      	ands	r1, r3
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	6898      	ldr	r0, [r3, #8]
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	4613      	mov	r3, r2
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	4413      	add	r3, r2
 800210a:	fa00 f203 	lsl.w	r2, r0, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	430a      	orrs	r2, r1
 8002114:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2b10      	cmp	r3, #16
 800211c:	d003      	beq.n	8002126 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002122:	2b11      	cmp	r3, #17
 8002124:	d132      	bne.n	800218c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a1d      	ldr	r2, [pc, #116]	; (80021a0 <HAL_ADC_ConfigChannel+0x1e4>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d125      	bne.n	800217c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d126      	bne.n	800218c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800214c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2b10      	cmp	r3, #16
 8002154:	d11a      	bne.n	800218c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002156:	4b13      	ldr	r3, [pc, #76]	; (80021a4 <HAL_ADC_ConfigChannel+0x1e8>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a13      	ldr	r2, [pc, #76]	; (80021a8 <HAL_ADC_ConfigChannel+0x1ec>)
 800215c:	fba2 2303 	umull	r2, r3, r2, r3
 8002160:	0c9a      	lsrs	r2, r3, #18
 8002162:	4613      	mov	r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	4413      	add	r3, r2
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800216c:	e002      	b.n	8002174 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	3b01      	subs	r3, #1
 8002172:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1f9      	bne.n	800216e <HAL_ADC_ConfigChannel+0x1b2>
 800217a:	e007      	b.n	800218c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002180:	f043 0220 	orr.w	r2, r3, #32
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002194:	7bfb      	ldrb	r3, [r7, #15]
}
 8002196:	4618      	mov	r0, r3
 8002198:	3714      	adds	r7, #20
 800219a:	46bd      	mov	sp, r7
 800219c:	bc80      	pop	{r7}
 800219e:	4770      	bx	lr
 80021a0:	40012400 	.word	0x40012400
 80021a4:	20000000 	.word	0x20000000
 80021a8:	431bde83 	.word	0x431bde83

080021ac <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021b4:	2300      	movs	r3, #0
 80021b6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d127      	bne.n	8002216 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f022 0201 	bic.w	r2, r2, #1
 80021d4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80021d6:	f7ff fdeb 	bl	8001db0 <HAL_GetTick>
 80021da:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80021dc:	e014      	b.n	8002208 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80021de:	f7ff fde7 	bl	8001db0 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d90d      	bls.n	8002208 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f0:	f043 0210 	orr.w	r2, r3, #16
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fc:	f043 0201 	orr.w	r2, r3, #1
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e007      	b.n	8002218 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b01      	cmp	r3, #1
 8002214:	d0e3      	beq.n	80021de <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f003 0307 	and.w	r3, r3, #7
 800222e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002230:	4b0c      	ldr	r3, [pc, #48]	; (8002264 <__NVIC_SetPriorityGrouping+0x44>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800223c:	4013      	ands	r3, r2
 800223e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002248:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800224c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002250:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002252:	4a04      	ldr	r2, [pc, #16]	; (8002264 <__NVIC_SetPriorityGrouping+0x44>)
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	60d3      	str	r3, [r2, #12]
}
 8002258:	bf00      	nop
 800225a:	3714      	adds	r7, #20
 800225c:	46bd      	mov	sp, r7
 800225e:	bc80      	pop	{r7}
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	e000ed00 	.word	0xe000ed00

08002268 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800226c:	4b04      	ldr	r3, [pc, #16]	; (8002280 <__NVIC_GetPriorityGrouping+0x18>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	0a1b      	lsrs	r3, r3, #8
 8002272:	f003 0307 	and.w	r3, r3, #7
}
 8002276:	4618      	mov	r0, r3
 8002278:	46bd      	mov	sp, r7
 800227a:	bc80      	pop	{r7}
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	e000ed00 	.word	0xe000ed00

08002284 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	4603      	mov	r3, r0
 800228c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800228e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002292:	2b00      	cmp	r3, #0
 8002294:	db0b      	blt.n	80022ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002296:	79fb      	ldrb	r3, [r7, #7]
 8002298:	f003 021f 	and.w	r2, r3, #31
 800229c:	4906      	ldr	r1, [pc, #24]	; (80022b8 <__NVIC_EnableIRQ+0x34>)
 800229e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a2:	095b      	lsrs	r3, r3, #5
 80022a4:	2001      	movs	r0, #1
 80022a6:	fa00 f202 	lsl.w	r2, r0, r2
 80022aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022ae:	bf00      	nop
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bc80      	pop	{r7}
 80022b6:	4770      	bx	lr
 80022b8:	e000e100 	.word	0xe000e100

080022bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	4603      	mov	r3, r0
 80022c4:	6039      	str	r1, [r7, #0]
 80022c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	db0a      	blt.n	80022e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	b2da      	uxtb	r2, r3
 80022d4:	490c      	ldr	r1, [pc, #48]	; (8002308 <__NVIC_SetPriority+0x4c>)
 80022d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022da:	0112      	lsls	r2, r2, #4
 80022dc:	b2d2      	uxtb	r2, r2
 80022de:	440b      	add	r3, r1
 80022e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022e4:	e00a      	b.n	80022fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	4908      	ldr	r1, [pc, #32]	; (800230c <__NVIC_SetPriority+0x50>)
 80022ec:	79fb      	ldrb	r3, [r7, #7]
 80022ee:	f003 030f 	and.w	r3, r3, #15
 80022f2:	3b04      	subs	r3, #4
 80022f4:	0112      	lsls	r2, r2, #4
 80022f6:	b2d2      	uxtb	r2, r2
 80022f8:	440b      	add	r3, r1
 80022fa:	761a      	strb	r2, [r3, #24]
}
 80022fc:	bf00      	nop
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	bc80      	pop	{r7}
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	e000e100 	.word	0xe000e100
 800230c:	e000ed00 	.word	0xe000ed00

08002310 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002310:	b480      	push	{r7}
 8002312:	b089      	sub	sp, #36	; 0x24
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f003 0307 	and.w	r3, r3, #7
 8002322:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	f1c3 0307 	rsb	r3, r3, #7
 800232a:	2b04      	cmp	r3, #4
 800232c:	bf28      	it	cs
 800232e:	2304      	movcs	r3, #4
 8002330:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	3304      	adds	r3, #4
 8002336:	2b06      	cmp	r3, #6
 8002338:	d902      	bls.n	8002340 <NVIC_EncodePriority+0x30>
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	3b03      	subs	r3, #3
 800233e:	e000      	b.n	8002342 <NVIC_EncodePriority+0x32>
 8002340:	2300      	movs	r3, #0
 8002342:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002344:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	43da      	mvns	r2, r3
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	401a      	ands	r2, r3
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002358:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	fa01 f303 	lsl.w	r3, r1, r3
 8002362:	43d9      	mvns	r1, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002368:	4313      	orrs	r3, r2
         );
}
 800236a:	4618      	mov	r0, r3
 800236c:	3724      	adds	r7, #36	; 0x24
 800236e:	46bd      	mov	sp, r7
 8002370:	bc80      	pop	{r7}
 8002372:	4770      	bx	lr

08002374 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	3b01      	subs	r3, #1
 8002380:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002384:	d301      	bcc.n	800238a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002386:	2301      	movs	r3, #1
 8002388:	e00f      	b.n	80023aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800238a:	4a0a      	ldr	r2, [pc, #40]	; (80023b4 <SysTick_Config+0x40>)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	3b01      	subs	r3, #1
 8002390:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002392:	210f      	movs	r1, #15
 8002394:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002398:	f7ff ff90 	bl	80022bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800239c:	4b05      	ldr	r3, [pc, #20]	; (80023b4 <SysTick_Config+0x40>)
 800239e:	2200      	movs	r2, #0
 80023a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023a2:	4b04      	ldr	r3, [pc, #16]	; (80023b4 <SysTick_Config+0x40>)
 80023a4:	2207      	movs	r2, #7
 80023a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	e000e010 	.word	0xe000e010

080023b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f7ff ff2d 	bl	8002220 <__NVIC_SetPriorityGrouping>
}
 80023c6:	bf00      	nop
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b086      	sub	sp, #24
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	4603      	mov	r3, r0
 80023d6:	60b9      	str	r1, [r7, #8]
 80023d8:	607a      	str	r2, [r7, #4]
 80023da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023dc:	2300      	movs	r3, #0
 80023de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023e0:	f7ff ff42 	bl	8002268 <__NVIC_GetPriorityGrouping>
 80023e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	68b9      	ldr	r1, [r7, #8]
 80023ea:	6978      	ldr	r0, [r7, #20]
 80023ec:	f7ff ff90 	bl	8002310 <NVIC_EncodePriority>
 80023f0:	4602      	mov	r2, r0
 80023f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023f6:	4611      	mov	r1, r2
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff ff5f 	bl	80022bc <__NVIC_SetPriority>
}
 80023fe:	bf00      	nop
 8002400:	3718      	adds	r7, #24
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b082      	sub	sp, #8
 800240a:	af00      	add	r7, sp, #0
 800240c:	4603      	mov	r3, r0
 800240e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff ff35 	bl	8002284 <__NVIC_EnableIRQ>
}
 800241a:	bf00      	nop
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b082      	sub	sp, #8
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7ff ffa2 	bl	8002374 <SysTick_Config>
 8002430:	4603      	mov	r3, r0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
	...

0800243c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800243c:	b480      	push	{r7}
 800243e:	b08b      	sub	sp, #44	; 0x2c
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002446:	2300      	movs	r3, #0
 8002448:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800244a:	2300      	movs	r3, #0
 800244c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800244e:	e169      	b.n	8002724 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002450:	2201      	movs	r2, #1
 8002452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	69fa      	ldr	r2, [r7, #28]
 8002460:	4013      	ands	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	429a      	cmp	r2, r3
 800246a:	f040 8158 	bne.w	800271e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	4a9a      	ldr	r2, [pc, #616]	; (80026dc <HAL_GPIO_Init+0x2a0>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d05e      	beq.n	8002536 <HAL_GPIO_Init+0xfa>
 8002478:	4a98      	ldr	r2, [pc, #608]	; (80026dc <HAL_GPIO_Init+0x2a0>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d875      	bhi.n	800256a <HAL_GPIO_Init+0x12e>
 800247e:	4a98      	ldr	r2, [pc, #608]	; (80026e0 <HAL_GPIO_Init+0x2a4>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d058      	beq.n	8002536 <HAL_GPIO_Init+0xfa>
 8002484:	4a96      	ldr	r2, [pc, #600]	; (80026e0 <HAL_GPIO_Init+0x2a4>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d86f      	bhi.n	800256a <HAL_GPIO_Init+0x12e>
 800248a:	4a96      	ldr	r2, [pc, #600]	; (80026e4 <HAL_GPIO_Init+0x2a8>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d052      	beq.n	8002536 <HAL_GPIO_Init+0xfa>
 8002490:	4a94      	ldr	r2, [pc, #592]	; (80026e4 <HAL_GPIO_Init+0x2a8>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d869      	bhi.n	800256a <HAL_GPIO_Init+0x12e>
 8002496:	4a94      	ldr	r2, [pc, #592]	; (80026e8 <HAL_GPIO_Init+0x2ac>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d04c      	beq.n	8002536 <HAL_GPIO_Init+0xfa>
 800249c:	4a92      	ldr	r2, [pc, #584]	; (80026e8 <HAL_GPIO_Init+0x2ac>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d863      	bhi.n	800256a <HAL_GPIO_Init+0x12e>
 80024a2:	4a92      	ldr	r2, [pc, #584]	; (80026ec <HAL_GPIO_Init+0x2b0>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d046      	beq.n	8002536 <HAL_GPIO_Init+0xfa>
 80024a8:	4a90      	ldr	r2, [pc, #576]	; (80026ec <HAL_GPIO_Init+0x2b0>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d85d      	bhi.n	800256a <HAL_GPIO_Init+0x12e>
 80024ae:	2b12      	cmp	r3, #18
 80024b0:	d82a      	bhi.n	8002508 <HAL_GPIO_Init+0xcc>
 80024b2:	2b12      	cmp	r3, #18
 80024b4:	d859      	bhi.n	800256a <HAL_GPIO_Init+0x12e>
 80024b6:	a201      	add	r2, pc, #4	; (adr r2, 80024bc <HAL_GPIO_Init+0x80>)
 80024b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024bc:	08002537 	.word	0x08002537
 80024c0:	08002511 	.word	0x08002511
 80024c4:	08002523 	.word	0x08002523
 80024c8:	08002565 	.word	0x08002565
 80024cc:	0800256b 	.word	0x0800256b
 80024d0:	0800256b 	.word	0x0800256b
 80024d4:	0800256b 	.word	0x0800256b
 80024d8:	0800256b 	.word	0x0800256b
 80024dc:	0800256b 	.word	0x0800256b
 80024e0:	0800256b 	.word	0x0800256b
 80024e4:	0800256b 	.word	0x0800256b
 80024e8:	0800256b 	.word	0x0800256b
 80024ec:	0800256b 	.word	0x0800256b
 80024f0:	0800256b 	.word	0x0800256b
 80024f4:	0800256b 	.word	0x0800256b
 80024f8:	0800256b 	.word	0x0800256b
 80024fc:	0800256b 	.word	0x0800256b
 8002500:	08002519 	.word	0x08002519
 8002504:	0800252d 	.word	0x0800252d
 8002508:	4a79      	ldr	r2, [pc, #484]	; (80026f0 <HAL_GPIO_Init+0x2b4>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d013      	beq.n	8002536 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800250e:	e02c      	b.n	800256a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	623b      	str	r3, [r7, #32]
          break;
 8002516:	e029      	b.n	800256c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	3304      	adds	r3, #4
 800251e:	623b      	str	r3, [r7, #32]
          break;
 8002520:	e024      	b.n	800256c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	3308      	adds	r3, #8
 8002528:	623b      	str	r3, [r7, #32]
          break;
 800252a:	e01f      	b.n	800256c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	330c      	adds	r3, #12
 8002532:	623b      	str	r3, [r7, #32]
          break;
 8002534:	e01a      	b.n	800256c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d102      	bne.n	8002544 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800253e:	2304      	movs	r3, #4
 8002540:	623b      	str	r3, [r7, #32]
          break;
 8002542:	e013      	b.n	800256c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d105      	bne.n	8002558 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800254c:	2308      	movs	r3, #8
 800254e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	69fa      	ldr	r2, [r7, #28]
 8002554:	611a      	str	r2, [r3, #16]
          break;
 8002556:	e009      	b.n	800256c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002558:	2308      	movs	r3, #8
 800255a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	69fa      	ldr	r2, [r7, #28]
 8002560:	615a      	str	r2, [r3, #20]
          break;
 8002562:	e003      	b.n	800256c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002564:	2300      	movs	r3, #0
 8002566:	623b      	str	r3, [r7, #32]
          break;
 8002568:	e000      	b.n	800256c <HAL_GPIO_Init+0x130>
          break;
 800256a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	2bff      	cmp	r3, #255	; 0xff
 8002570:	d801      	bhi.n	8002576 <HAL_GPIO_Init+0x13a>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	e001      	b.n	800257a <HAL_GPIO_Init+0x13e>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	3304      	adds	r3, #4
 800257a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	2bff      	cmp	r3, #255	; 0xff
 8002580:	d802      	bhi.n	8002588 <HAL_GPIO_Init+0x14c>
 8002582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	e002      	b.n	800258e <HAL_GPIO_Init+0x152>
 8002588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258a:	3b08      	subs	r3, #8
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	210f      	movs	r1, #15
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	fa01 f303 	lsl.w	r3, r1, r3
 800259c:	43db      	mvns	r3, r3
 800259e:	401a      	ands	r2, r3
 80025a0:	6a39      	ldr	r1, [r7, #32]
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	fa01 f303 	lsl.w	r3, r1, r3
 80025a8:	431a      	orrs	r2, r3
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f000 80b1 	beq.w	800271e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80025bc:	4b4d      	ldr	r3, [pc, #308]	; (80026f4 <HAL_GPIO_Init+0x2b8>)
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	4a4c      	ldr	r2, [pc, #304]	; (80026f4 <HAL_GPIO_Init+0x2b8>)
 80025c2:	f043 0301 	orr.w	r3, r3, #1
 80025c6:	6193      	str	r3, [r2, #24]
 80025c8:	4b4a      	ldr	r3, [pc, #296]	; (80026f4 <HAL_GPIO_Init+0x2b8>)
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	60bb      	str	r3, [r7, #8]
 80025d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80025d4:	4a48      	ldr	r2, [pc, #288]	; (80026f8 <HAL_GPIO_Init+0x2bc>)
 80025d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d8:	089b      	lsrs	r3, r3, #2
 80025da:	3302      	adds	r3, #2
 80025dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80025e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e4:	f003 0303 	and.w	r3, r3, #3
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	220f      	movs	r2, #15
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	43db      	mvns	r3, r3
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	4013      	ands	r3, r2
 80025f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4a40      	ldr	r2, [pc, #256]	; (80026fc <HAL_GPIO_Init+0x2c0>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d013      	beq.n	8002628 <HAL_GPIO_Init+0x1ec>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4a3f      	ldr	r2, [pc, #252]	; (8002700 <HAL_GPIO_Init+0x2c4>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d00d      	beq.n	8002624 <HAL_GPIO_Init+0x1e8>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a3e      	ldr	r2, [pc, #248]	; (8002704 <HAL_GPIO_Init+0x2c8>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d007      	beq.n	8002620 <HAL_GPIO_Init+0x1e4>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a3d      	ldr	r2, [pc, #244]	; (8002708 <HAL_GPIO_Init+0x2cc>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d101      	bne.n	800261c <HAL_GPIO_Init+0x1e0>
 8002618:	2303      	movs	r3, #3
 800261a:	e006      	b.n	800262a <HAL_GPIO_Init+0x1ee>
 800261c:	2304      	movs	r3, #4
 800261e:	e004      	b.n	800262a <HAL_GPIO_Init+0x1ee>
 8002620:	2302      	movs	r3, #2
 8002622:	e002      	b.n	800262a <HAL_GPIO_Init+0x1ee>
 8002624:	2301      	movs	r3, #1
 8002626:	e000      	b.n	800262a <HAL_GPIO_Init+0x1ee>
 8002628:	2300      	movs	r3, #0
 800262a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800262c:	f002 0203 	and.w	r2, r2, #3
 8002630:	0092      	lsls	r2, r2, #2
 8002632:	4093      	lsls	r3, r2
 8002634:	68fa      	ldr	r2, [r7, #12]
 8002636:	4313      	orrs	r3, r2
 8002638:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800263a:	492f      	ldr	r1, [pc, #188]	; (80026f8 <HAL_GPIO_Init+0x2bc>)
 800263c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263e:	089b      	lsrs	r3, r3, #2
 8002640:	3302      	adds	r3, #2
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d006      	beq.n	8002662 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002654:	4b2d      	ldr	r3, [pc, #180]	; (800270c <HAL_GPIO_Init+0x2d0>)
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	492c      	ldr	r1, [pc, #176]	; (800270c <HAL_GPIO_Init+0x2d0>)
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	4313      	orrs	r3, r2
 800265e:	600b      	str	r3, [r1, #0]
 8002660:	e006      	b.n	8002670 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002662:	4b2a      	ldr	r3, [pc, #168]	; (800270c <HAL_GPIO_Init+0x2d0>)
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	43db      	mvns	r3, r3
 800266a:	4928      	ldr	r1, [pc, #160]	; (800270c <HAL_GPIO_Init+0x2d0>)
 800266c:	4013      	ands	r3, r2
 800266e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d006      	beq.n	800268a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800267c:	4b23      	ldr	r3, [pc, #140]	; (800270c <HAL_GPIO_Init+0x2d0>)
 800267e:	685a      	ldr	r2, [r3, #4]
 8002680:	4922      	ldr	r1, [pc, #136]	; (800270c <HAL_GPIO_Init+0x2d0>)
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	4313      	orrs	r3, r2
 8002686:	604b      	str	r3, [r1, #4]
 8002688:	e006      	b.n	8002698 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800268a:	4b20      	ldr	r3, [pc, #128]	; (800270c <HAL_GPIO_Init+0x2d0>)
 800268c:	685a      	ldr	r2, [r3, #4]
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	43db      	mvns	r3, r3
 8002692:	491e      	ldr	r1, [pc, #120]	; (800270c <HAL_GPIO_Init+0x2d0>)
 8002694:	4013      	ands	r3, r2
 8002696:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d006      	beq.n	80026b2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80026a4:	4b19      	ldr	r3, [pc, #100]	; (800270c <HAL_GPIO_Init+0x2d0>)
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	4918      	ldr	r1, [pc, #96]	; (800270c <HAL_GPIO_Init+0x2d0>)
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	608b      	str	r3, [r1, #8]
 80026b0:	e006      	b.n	80026c0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80026b2:	4b16      	ldr	r3, [pc, #88]	; (800270c <HAL_GPIO_Init+0x2d0>)
 80026b4:	689a      	ldr	r2, [r3, #8]
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	43db      	mvns	r3, r3
 80026ba:	4914      	ldr	r1, [pc, #80]	; (800270c <HAL_GPIO_Init+0x2d0>)
 80026bc:	4013      	ands	r3, r2
 80026be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d021      	beq.n	8002710 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80026cc:	4b0f      	ldr	r3, [pc, #60]	; (800270c <HAL_GPIO_Init+0x2d0>)
 80026ce:	68da      	ldr	r2, [r3, #12]
 80026d0:	490e      	ldr	r1, [pc, #56]	; (800270c <HAL_GPIO_Init+0x2d0>)
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	60cb      	str	r3, [r1, #12]
 80026d8:	e021      	b.n	800271e <HAL_GPIO_Init+0x2e2>
 80026da:	bf00      	nop
 80026dc:	10320000 	.word	0x10320000
 80026e0:	10310000 	.word	0x10310000
 80026e4:	10220000 	.word	0x10220000
 80026e8:	10210000 	.word	0x10210000
 80026ec:	10120000 	.word	0x10120000
 80026f0:	10110000 	.word	0x10110000
 80026f4:	40021000 	.word	0x40021000
 80026f8:	40010000 	.word	0x40010000
 80026fc:	40010800 	.word	0x40010800
 8002700:	40010c00 	.word	0x40010c00
 8002704:	40011000 	.word	0x40011000
 8002708:	40011400 	.word	0x40011400
 800270c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002710:	4b0b      	ldr	r3, [pc, #44]	; (8002740 <HAL_GPIO_Init+0x304>)
 8002712:	68da      	ldr	r2, [r3, #12]
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	43db      	mvns	r3, r3
 8002718:	4909      	ldr	r1, [pc, #36]	; (8002740 <HAL_GPIO_Init+0x304>)
 800271a:	4013      	ands	r3, r2
 800271c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800271e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002720:	3301      	adds	r3, #1
 8002722:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272a:	fa22 f303 	lsr.w	r3, r2, r3
 800272e:	2b00      	cmp	r3, #0
 8002730:	f47f ae8e 	bne.w	8002450 <HAL_GPIO_Init+0x14>
  }
}
 8002734:	bf00      	nop
 8002736:	bf00      	nop
 8002738:	372c      	adds	r7, #44	; 0x2c
 800273a:	46bd      	mov	sp, r7
 800273c:	bc80      	pop	{r7}
 800273e:	4770      	bx	lr
 8002740:	40010400 	.word	0x40010400

08002744 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	460b      	mov	r3, r1
 800274e:	807b      	strh	r3, [r7, #2]
 8002750:	4613      	mov	r3, r2
 8002752:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002754:	787b      	ldrb	r3, [r7, #1]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d003      	beq.n	8002762 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800275a:	887a      	ldrh	r2, [r7, #2]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002760:	e003      	b.n	800276a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002762:	887b      	ldrh	r3, [r7, #2]
 8002764:	041a      	lsls	r2, r3, #16
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	611a      	str	r2, [r3, #16]
}
 800276a:	bf00      	nop
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr

08002774 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e12b      	b.n	80029de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d106      	bne.n	80027a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f7ff f890 	bl	80018c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2224      	movs	r2, #36	; 0x24
 80027a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f022 0201 	bic.w	r2, r2, #1
 80027b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027d8:	f001 fba0 	bl	8003f1c <HAL_RCC_GetPCLK1Freq>
 80027dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	4a81      	ldr	r2, [pc, #516]	; (80029e8 <HAL_I2C_Init+0x274>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d807      	bhi.n	80027f8 <HAL_I2C_Init+0x84>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	4a80      	ldr	r2, [pc, #512]	; (80029ec <HAL_I2C_Init+0x278>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	bf94      	ite	ls
 80027f0:	2301      	movls	r3, #1
 80027f2:	2300      	movhi	r3, #0
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	e006      	b.n	8002806 <HAL_I2C_Init+0x92>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	4a7d      	ldr	r2, [pc, #500]	; (80029f0 <HAL_I2C_Init+0x27c>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	bf94      	ite	ls
 8002800:	2301      	movls	r3, #1
 8002802:	2300      	movhi	r3, #0
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e0e7      	b.n	80029de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	4a78      	ldr	r2, [pc, #480]	; (80029f4 <HAL_I2C_Init+0x280>)
 8002812:	fba2 2303 	umull	r2, r3, r2, r3
 8002816:	0c9b      	lsrs	r3, r3, #18
 8002818:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68ba      	ldr	r2, [r7, #8]
 800282a:	430a      	orrs	r2, r1
 800282c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	4a6a      	ldr	r2, [pc, #424]	; (80029e8 <HAL_I2C_Init+0x274>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d802      	bhi.n	8002848 <HAL_I2C_Init+0xd4>
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	3301      	adds	r3, #1
 8002846:	e009      	b.n	800285c <HAL_I2C_Init+0xe8>
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800284e:	fb02 f303 	mul.w	r3, r2, r3
 8002852:	4a69      	ldr	r2, [pc, #420]	; (80029f8 <HAL_I2C_Init+0x284>)
 8002854:	fba2 2303 	umull	r2, r3, r2, r3
 8002858:	099b      	lsrs	r3, r3, #6
 800285a:	3301      	adds	r3, #1
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	6812      	ldr	r2, [r2, #0]
 8002860:	430b      	orrs	r3, r1
 8002862:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800286e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	495c      	ldr	r1, [pc, #368]	; (80029e8 <HAL_I2C_Init+0x274>)
 8002878:	428b      	cmp	r3, r1
 800287a:	d819      	bhi.n	80028b0 <HAL_I2C_Init+0x13c>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	1e59      	subs	r1, r3, #1
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	fbb1 f3f3 	udiv	r3, r1, r3
 800288a:	1c59      	adds	r1, r3, #1
 800288c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002890:	400b      	ands	r3, r1
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00a      	beq.n	80028ac <HAL_I2C_Init+0x138>
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	1e59      	subs	r1, r3, #1
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80028a4:	3301      	adds	r3, #1
 80028a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028aa:	e051      	b.n	8002950 <HAL_I2C_Init+0x1dc>
 80028ac:	2304      	movs	r3, #4
 80028ae:	e04f      	b.n	8002950 <HAL_I2C_Init+0x1dc>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d111      	bne.n	80028dc <HAL_I2C_Init+0x168>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	1e58      	subs	r0, r3, #1
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6859      	ldr	r1, [r3, #4]
 80028c0:	460b      	mov	r3, r1
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	440b      	add	r3, r1
 80028c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ca:	3301      	adds	r3, #1
 80028cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	bf0c      	ite	eq
 80028d4:	2301      	moveq	r3, #1
 80028d6:	2300      	movne	r3, #0
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	e012      	b.n	8002902 <HAL_I2C_Init+0x18e>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	1e58      	subs	r0, r3, #1
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6859      	ldr	r1, [r3, #4]
 80028e4:	460b      	mov	r3, r1
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	440b      	add	r3, r1
 80028ea:	0099      	lsls	r1, r3, #2
 80028ec:	440b      	add	r3, r1
 80028ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80028f2:	3301      	adds	r3, #1
 80028f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	bf0c      	ite	eq
 80028fc:	2301      	moveq	r3, #1
 80028fe:	2300      	movne	r3, #0
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <HAL_I2C_Init+0x196>
 8002906:	2301      	movs	r3, #1
 8002908:	e022      	b.n	8002950 <HAL_I2C_Init+0x1dc>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10e      	bne.n	8002930 <HAL_I2C_Init+0x1bc>
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	1e58      	subs	r0, r3, #1
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6859      	ldr	r1, [r3, #4]
 800291a:	460b      	mov	r3, r1
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	440b      	add	r3, r1
 8002920:	fbb0 f3f3 	udiv	r3, r0, r3
 8002924:	3301      	adds	r3, #1
 8002926:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800292a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800292e:	e00f      	b.n	8002950 <HAL_I2C_Init+0x1dc>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	1e58      	subs	r0, r3, #1
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6859      	ldr	r1, [r3, #4]
 8002938:	460b      	mov	r3, r1
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	440b      	add	r3, r1
 800293e:	0099      	lsls	r1, r3, #2
 8002940:	440b      	add	r3, r1
 8002942:	fbb0 f3f3 	udiv	r3, r0, r3
 8002946:	3301      	adds	r3, #1
 8002948:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800294c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002950:	6879      	ldr	r1, [r7, #4]
 8002952:	6809      	ldr	r1, [r1, #0]
 8002954:	4313      	orrs	r3, r2
 8002956:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	69da      	ldr	r2, [r3, #28]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	431a      	orrs	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	430a      	orrs	r2, r1
 8002972:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800297e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	6911      	ldr	r1, [r2, #16]
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	68d2      	ldr	r2, [r2, #12]
 800298a:	4311      	orrs	r1, r2
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	6812      	ldr	r2, [r2, #0]
 8002990:	430b      	orrs	r3, r1
 8002992:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	695a      	ldr	r2, [r3, #20]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	431a      	orrs	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	430a      	orrs	r2, r1
 80029ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f042 0201 	orr.w	r2, r2, #1
 80029be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2220      	movs	r2, #32
 80029ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	000186a0 	.word	0x000186a0
 80029ec:	001e847f 	.word	0x001e847f
 80029f0:	003d08ff 	.word	0x003d08ff
 80029f4:	431bde83 	.word	0x431bde83
 80029f8:	10624dd3 	.word	0x10624dd3

080029fc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b088      	sub	sp, #32
 8002a00:	af02      	add	r7, sp, #8
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	4608      	mov	r0, r1
 8002a06:	4611      	mov	r1, r2
 8002a08:	461a      	mov	r2, r3
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	817b      	strh	r3, [r7, #10]
 8002a0e:	460b      	mov	r3, r1
 8002a10:	813b      	strh	r3, [r7, #8]
 8002a12:	4613      	mov	r3, r2
 8002a14:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a16:	f7ff f9cb 	bl	8001db0 <HAL_GetTick>
 8002a1a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	2b20      	cmp	r3, #32
 8002a26:	f040 80d9 	bne.w	8002bdc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	2319      	movs	r3, #25
 8002a30:	2201      	movs	r2, #1
 8002a32:	496d      	ldr	r1, [pc, #436]	; (8002be8 <HAL_I2C_Mem_Write+0x1ec>)
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f000 fcc1 	bl	80033bc <I2C_WaitOnFlagUntilTimeout>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002a40:	2302      	movs	r3, #2
 8002a42:	e0cc      	b.n	8002bde <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d101      	bne.n	8002a52 <HAL_I2C_Mem_Write+0x56>
 8002a4e:	2302      	movs	r3, #2
 8002a50:	e0c5      	b.n	8002bde <HAL_I2C_Mem_Write+0x1e2>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0301 	and.w	r3, r3, #1
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d007      	beq.n	8002a78 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f042 0201 	orr.w	r2, r2, #1
 8002a76:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a86:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2221      	movs	r2, #33	; 0x21
 8002a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2240      	movs	r2, #64	; 0x40
 8002a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6a3a      	ldr	r2, [r7, #32]
 8002aa2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002aa8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	4a4d      	ldr	r2, [pc, #308]	; (8002bec <HAL_I2C_Mem_Write+0x1f0>)
 8002ab8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002aba:	88f8      	ldrh	r0, [r7, #6]
 8002abc:	893a      	ldrh	r2, [r7, #8]
 8002abe:	8979      	ldrh	r1, [r7, #10]
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	9301      	str	r3, [sp, #4]
 8002ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac6:	9300      	str	r3, [sp, #0]
 8002ac8:	4603      	mov	r3, r0
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f000 faf8 	bl	80030c0 <I2C_RequestMemoryWrite>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d052      	beq.n	8002b7c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e081      	b.n	8002bde <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ada:	697a      	ldr	r2, [r7, #20]
 8002adc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f000 fd42 	bl	8003568 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00d      	beq.n	8002b06 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	d107      	bne.n	8002b02 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b00:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e06b      	b.n	8002bde <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0a:	781a      	ldrb	r2, [r3, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b16:	1c5a      	adds	r2, r3, #1
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b20:	3b01      	subs	r3, #1
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	695b      	ldr	r3, [r3, #20]
 8002b3c:	f003 0304 	and.w	r3, r3, #4
 8002b40:	2b04      	cmp	r3, #4
 8002b42:	d11b      	bne.n	8002b7c <HAL_I2C_Mem_Write+0x180>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d017      	beq.n	8002b7c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b50:	781a      	ldrb	r2, [r3, #0]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5c:	1c5a      	adds	r2, r3, #1
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b66:	3b01      	subs	r3, #1
 8002b68:	b29a      	uxth	r2, r3
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	3b01      	subs	r3, #1
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d1aa      	bne.n	8002ada <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b84:	697a      	ldr	r2, [r7, #20]
 8002b86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f000 fd2e 	bl	80035ea <I2C_WaitOnBTFFlagUntilTimeout>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00d      	beq.n	8002bb0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b98:	2b04      	cmp	r3, #4
 8002b9a:	d107      	bne.n	8002bac <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002baa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e016      	b.n	8002bde <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2220      	movs	r2, #32
 8002bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	e000      	b.n	8002bde <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002bdc:	2302      	movs	r3, #2
  }
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3718      	adds	r7, #24
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	00100002 	.word	0x00100002
 8002bec:	ffff0000 	.word	0xffff0000

08002bf0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b08c      	sub	sp, #48	; 0x30
 8002bf4:	af02      	add	r7, sp, #8
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	4608      	mov	r0, r1
 8002bfa:	4611      	mov	r1, r2
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	4603      	mov	r3, r0
 8002c00:	817b      	strh	r3, [r7, #10]
 8002c02:	460b      	mov	r3, r1
 8002c04:	813b      	strh	r3, [r7, #8]
 8002c06:	4613      	mov	r3, r2
 8002c08:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c0e:	f7ff f8cf 	bl	8001db0 <HAL_GetTick>
 8002c12:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	2b20      	cmp	r3, #32
 8002c1e:	f040 8244 	bne.w	80030aa <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c24:	9300      	str	r3, [sp, #0]
 8002c26:	2319      	movs	r3, #25
 8002c28:	2201      	movs	r2, #1
 8002c2a:	4982      	ldr	r1, [pc, #520]	; (8002e34 <HAL_I2C_Mem_Read+0x244>)
 8002c2c:	68f8      	ldr	r0, [r7, #12]
 8002c2e:	f000 fbc5 	bl	80033bc <I2C_WaitOnFlagUntilTimeout>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002c38:	2302      	movs	r3, #2
 8002c3a:	e237      	b.n	80030ac <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d101      	bne.n	8002c4a <HAL_I2C_Mem_Read+0x5a>
 8002c46:	2302      	movs	r3, #2
 8002c48:	e230      	b.n	80030ac <HAL_I2C_Mem_Read+0x4bc>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d007      	beq.n	8002c70 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f042 0201 	orr.w	r2, r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c7e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2222      	movs	r2, #34	; 0x22
 8002c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2240      	movs	r2, #64	; 0x40
 8002c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002ca0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	4a62      	ldr	r2, [pc, #392]	; (8002e38 <HAL_I2C_Mem_Read+0x248>)
 8002cb0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002cb2:	88f8      	ldrh	r0, [r7, #6]
 8002cb4:	893a      	ldrh	r2, [r7, #8]
 8002cb6:	8979      	ldrh	r1, [r7, #10]
 8002cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cba:	9301      	str	r3, [sp, #4]
 8002cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	68f8      	ldr	r0, [r7, #12]
 8002cc4:	f000 fa92 	bl	80031ec <I2C_RequestMemoryRead>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e1ec      	b.n	80030ac <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d113      	bne.n	8002d02 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cda:	2300      	movs	r3, #0
 8002cdc:	61fb      	str	r3, [r7, #28]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	61fb      	str	r3, [r7, #28]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	61fb      	str	r3, [r7, #28]
 8002cee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	e1c0      	b.n	8003084 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d11e      	bne.n	8002d48 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d18:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002d1a:	b672      	cpsid	i
}
 8002d1c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d1e:	2300      	movs	r3, #0
 8002d20:	61bb      	str	r3, [r7, #24]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	695b      	ldr	r3, [r3, #20]
 8002d28:	61bb      	str	r3, [r7, #24]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	61bb      	str	r3, [r7, #24]
 8002d32:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d42:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002d44:	b662      	cpsie	i
}
 8002d46:	e035      	b.n	8002db4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d11e      	bne.n	8002d8e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d5e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002d60:	b672      	cpsid	i
}
 8002d62:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d64:	2300      	movs	r3, #0
 8002d66:	617b      	str	r3, [r7, #20]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	617b      	str	r3, [r7, #20]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	617b      	str	r3, [r7, #20]
 8002d78:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d88:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002d8a:	b662      	cpsie	i
}
 8002d8c:	e012      	b.n	8002db4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d9c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d9e:	2300      	movs	r3, #0
 8002da0:	613b      	str	r3, [r7, #16]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	613b      	str	r3, [r7, #16]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	699b      	ldr	r3, [r3, #24]
 8002db0:	613b      	str	r3, [r7, #16]
 8002db2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002db4:	e166      	b.n	8003084 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dba:	2b03      	cmp	r3, #3
 8002dbc:	f200 811f 	bhi.w	8002ffe <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d123      	bne.n	8002e10 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002dcc:	68f8      	ldr	r0, [r7, #12]
 8002dce:	f000 fc4d 	bl	800366c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e167      	b.n	80030ac <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	691a      	ldr	r2, [r3, #16]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de6:	b2d2      	uxtb	r2, r2
 8002de8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dee:	1c5a      	adds	r2, r3, #1
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	3b01      	subs	r3, #1
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e0e:	e139      	b.n	8003084 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d152      	bne.n	8002ebe <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e1e:	2200      	movs	r2, #0
 8002e20:	4906      	ldr	r1, [pc, #24]	; (8002e3c <HAL_I2C_Mem_Read+0x24c>)
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f000 faca 	bl	80033bc <I2C_WaitOnFlagUntilTimeout>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d008      	beq.n	8002e40 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e13c      	b.n	80030ac <HAL_I2C_Mem_Read+0x4bc>
 8002e32:	bf00      	nop
 8002e34:	00100002 	.word	0x00100002
 8002e38:	ffff0000 	.word	0xffff0000
 8002e3c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002e40:	b672      	cpsid	i
}
 8002e42:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	691a      	ldr	r2, [r3, #16]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5e:	b2d2      	uxtb	r2, r2
 8002e60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e66:	1c5a      	adds	r2, r3, #1
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e70:	3b01      	subs	r3, #1
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002e86:	b662      	cpsie	i
}
 8002e88:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	691a      	ldr	r2, [r3, #16]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e94:	b2d2      	uxtb	r2, r2
 8002e96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9c:	1c5a      	adds	r2, r3, #1
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	b29a      	uxth	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ebc:	e0e2      	b.n	8003084 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec0:	9300      	str	r3, [sp, #0]
 8002ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	497b      	ldr	r1, [pc, #492]	; (80030b4 <HAL_I2C_Mem_Read+0x4c4>)
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f000 fa77 	bl	80033bc <I2C_WaitOnFlagUntilTimeout>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e0e9      	b.n	80030ac <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ee6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ee8:	b672      	cpsid	i
}
 8002eea:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	691a      	ldr	r2, [r3, #16]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef6:	b2d2      	uxtb	r2, r2
 8002ef8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efe:	1c5a      	adds	r2, r3, #1
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	3b01      	subs	r3, #1
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002f1e:	4b66      	ldr	r3, [pc, #408]	; (80030b8 <HAL_I2C_Mem_Read+0x4c8>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	08db      	lsrs	r3, r3, #3
 8002f24:	4a65      	ldr	r2, [pc, #404]	; (80030bc <HAL_I2C_Mem_Read+0x4cc>)
 8002f26:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2a:	0a1a      	lsrs	r2, r3, #8
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	4413      	add	r3, r2
 8002f32:	00da      	lsls	r2, r3, #3
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002f38:	6a3b      	ldr	r3, [r7, #32]
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002f3e:	6a3b      	ldr	r3, [r7, #32]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d118      	bne.n	8002f76 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2220      	movs	r2, #32
 8002f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	f043 0220 	orr.w	r2, r3, #32
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002f66:	b662      	cpsie	i
}
 8002f68:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e09a      	b.n	80030ac <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	f003 0304 	and.w	r3, r3, #4
 8002f80:	2b04      	cmp	r3, #4
 8002f82:	d1d9      	bne.n	8002f38 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	691a      	ldr	r2, [r3, #16]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9e:	b2d2      	uxtb	r2, r2
 8002fa0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa6:	1c5a      	adds	r2, r3, #1
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002fc6:	b662      	cpsie	i
}
 8002fc8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	691a      	ldr	r2, [r3, #16]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd4:	b2d2      	uxtb	r2, r2
 8002fd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fdc:	1c5a      	adds	r2, r3, #1
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ffc:	e042      	b.n	8003084 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003000:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	f000 fb32 	bl	800366c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e04c      	b.n	80030ac <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	691a      	ldr	r2, [r3, #16]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301c:	b2d2      	uxtb	r2, r2
 800301e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003024:	1c5a      	adds	r2, r3, #1
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800302e:	3b01      	subs	r3, #1
 8003030:	b29a      	uxth	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800303a:	b29b      	uxth	r3, r3
 800303c:	3b01      	subs	r3, #1
 800303e:	b29a      	uxth	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	f003 0304 	and.w	r3, r3, #4
 800304e:	2b04      	cmp	r3, #4
 8003050:	d118      	bne.n	8003084 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	691a      	ldr	r2, [r3, #16]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305c:	b2d2      	uxtb	r2, r2
 800305e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003064:	1c5a      	adds	r2, r3, #1
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800306e:	3b01      	subs	r3, #1
 8003070:	b29a      	uxth	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800307a:	b29b      	uxth	r3, r3
 800307c:	3b01      	subs	r3, #1
 800307e:	b29a      	uxth	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003088:	2b00      	cmp	r3, #0
 800308a:	f47f ae94 	bne.w	8002db6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2220      	movs	r2, #32
 8003092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80030a6:	2300      	movs	r3, #0
 80030a8:	e000      	b.n	80030ac <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80030aa:	2302      	movs	r3, #2
  }
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3728      	adds	r7, #40	; 0x28
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	00010004 	.word	0x00010004
 80030b8:	20000000 	.word	0x20000000
 80030bc:	14f8b589 	.word	0x14f8b589

080030c0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b088      	sub	sp, #32
 80030c4:	af02      	add	r7, sp, #8
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	4608      	mov	r0, r1
 80030ca:	4611      	mov	r1, r2
 80030cc:	461a      	mov	r2, r3
 80030ce:	4603      	mov	r3, r0
 80030d0:	817b      	strh	r3, [r7, #10]
 80030d2:	460b      	mov	r3, r1
 80030d4:	813b      	strh	r3, [r7, #8]
 80030d6:	4613      	mov	r3, r2
 80030d8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ec:	9300      	str	r3, [sp, #0]
 80030ee:	6a3b      	ldr	r3, [r7, #32]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	f000 f960 	bl	80033bc <I2C_WaitOnFlagUntilTimeout>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00d      	beq.n	800311e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800310c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003110:	d103      	bne.n	800311a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003118:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e05f      	b.n	80031de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800311e:	897b      	ldrh	r3, [r7, #10]
 8003120:	b2db      	uxtb	r3, r3
 8003122:	461a      	mov	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800312c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800312e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003130:	6a3a      	ldr	r2, [r7, #32]
 8003132:	492d      	ldr	r1, [pc, #180]	; (80031e8 <I2C_RequestMemoryWrite+0x128>)
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f000 f998 	bl	800346a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e04c      	b.n	80031de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003144:	2300      	movs	r3, #0
 8003146:	617b      	str	r3, [r7, #20]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	617b      	str	r3, [r7, #20]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	617b      	str	r3, [r7, #20]
 8003158:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800315a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800315c:	6a39      	ldr	r1, [r7, #32]
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f000 fa02 	bl	8003568 <I2C_WaitOnTXEFlagUntilTimeout>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00d      	beq.n	8003186 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	2b04      	cmp	r3, #4
 8003170:	d107      	bne.n	8003182 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003180:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e02b      	b.n	80031de <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003186:	88fb      	ldrh	r3, [r7, #6]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d105      	bne.n	8003198 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800318c:	893b      	ldrh	r3, [r7, #8]
 800318e:	b2da      	uxtb	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	611a      	str	r2, [r3, #16]
 8003196:	e021      	b.n	80031dc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003198:	893b      	ldrh	r3, [r7, #8]
 800319a:	0a1b      	lsrs	r3, r3, #8
 800319c:	b29b      	uxth	r3, r3
 800319e:	b2da      	uxtb	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031a8:	6a39      	ldr	r1, [r7, #32]
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f000 f9dc 	bl	8003568 <I2C_WaitOnTXEFlagUntilTimeout>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00d      	beq.n	80031d2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ba:	2b04      	cmp	r3, #4
 80031bc:	d107      	bne.n	80031ce <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e005      	b.n	80031de <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80031d2:	893b      	ldrh	r3, [r7, #8]
 80031d4:	b2da      	uxtb	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3718      	adds	r7, #24
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	00010002 	.word	0x00010002

080031ec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b088      	sub	sp, #32
 80031f0:	af02      	add	r7, sp, #8
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	4608      	mov	r0, r1
 80031f6:	4611      	mov	r1, r2
 80031f8:	461a      	mov	r2, r3
 80031fa:	4603      	mov	r3, r0
 80031fc:	817b      	strh	r3, [r7, #10]
 80031fe:	460b      	mov	r3, r1
 8003200:	813b      	strh	r3, [r7, #8]
 8003202:	4613      	mov	r3, r2
 8003204:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003214:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003224:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003228:	9300      	str	r3, [sp, #0]
 800322a:	6a3b      	ldr	r3, [r7, #32]
 800322c:	2200      	movs	r2, #0
 800322e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003232:	68f8      	ldr	r0, [r7, #12]
 8003234:	f000 f8c2 	bl	80033bc <I2C_WaitOnFlagUntilTimeout>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00d      	beq.n	800325a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003248:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800324c:	d103      	bne.n	8003256 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003254:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e0aa      	b.n	80033b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800325a:	897b      	ldrh	r3, [r7, #10]
 800325c:	b2db      	uxtb	r3, r3
 800325e:	461a      	mov	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003268:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800326a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326c:	6a3a      	ldr	r2, [r7, #32]
 800326e:	4952      	ldr	r1, [pc, #328]	; (80033b8 <I2C_RequestMemoryRead+0x1cc>)
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f000 f8fa 	bl	800346a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d001      	beq.n	8003280 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e097      	b.n	80033b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003280:	2300      	movs	r3, #0
 8003282:	617b      	str	r3, [r7, #20]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	617b      	str	r3, [r7, #20]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	617b      	str	r3, [r7, #20]
 8003294:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003298:	6a39      	ldr	r1, [r7, #32]
 800329a:	68f8      	ldr	r0, [r7, #12]
 800329c:	f000 f964 	bl	8003568 <I2C_WaitOnTXEFlagUntilTimeout>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00d      	beq.n	80032c2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032aa:	2b04      	cmp	r3, #4
 80032ac:	d107      	bne.n	80032be <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e076      	b.n	80033b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032c2:	88fb      	ldrh	r3, [r7, #6]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d105      	bne.n	80032d4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032c8:	893b      	ldrh	r3, [r7, #8]
 80032ca:	b2da      	uxtb	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	611a      	str	r2, [r3, #16]
 80032d2:	e021      	b.n	8003318 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80032d4:	893b      	ldrh	r3, [r7, #8]
 80032d6:	0a1b      	lsrs	r3, r3, #8
 80032d8:	b29b      	uxth	r3, r3
 80032da:	b2da      	uxtb	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032e4:	6a39      	ldr	r1, [r7, #32]
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f000 f93e 	bl	8003568 <I2C_WaitOnTXEFlagUntilTimeout>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00d      	beq.n	800330e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	2b04      	cmp	r3, #4
 80032f8:	d107      	bne.n	800330a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003308:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e050      	b.n	80033b0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800330e:	893b      	ldrh	r3, [r7, #8]
 8003310:	b2da      	uxtb	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800331a:	6a39      	ldr	r1, [r7, #32]
 800331c:	68f8      	ldr	r0, [r7, #12]
 800331e:	f000 f923 	bl	8003568 <I2C_WaitOnTXEFlagUntilTimeout>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00d      	beq.n	8003344 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332c:	2b04      	cmp	r3, #4
 800332e:	d107      	bne.n	8003340 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800333e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e035      	b.n	80033b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003352:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003356:	9300      	str	r3, [sp, #0]
 8003358:	6a3b      	ldr	r3, [r7, #32]
 800335a:	2200      	movs	r2, #0
 800335c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003360:	68f8      	ldr	r0, [r7, #12]
 8003362:	f000 f82b 	bl	80033bc <I2C_WaitOnFlagUntilTimeout>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00d      	beq.n	8003388 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003376:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800337a:	d103      	bne.n	8003384 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003382:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e013      	b.n	80033b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003388:	897b      	ldrh	r3, [r7, #10]
 800338a:	b2db      	uxtb	r3, r3
 800338c:	f043 0301 	orr.w	r3, r3, #1
 8003390:	b2da      	uxtb	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339a:	6a3a      	ldr	r2, [r7, #32]
 800339c:	4906      	ldr	r1, [pc, #24]	; (80033b8 <I2C_RequestMemoryRead+0x1cc>)
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	f000 f863 	bl	800346a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d001      	beq.n	80033ae <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e000      	b.n	80033b0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3718      	adds	r7, #24
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	00010002 	.word	0x00010002

080033bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	603b      	str	r3, [r7, #0]
 80033c8:	4613      	mov	r3, r2
 80033ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033cc:	e025      	b.n	800341a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033d4:	d021      	beq.n	800341a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033d6:	f7fe fceb 	bl	8001db0 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	683a      	ldr	r2, [r7, #0]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d302      	bcc.n	80033ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d116      	bne.n	800341a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2220      	movs	r2, #32
 80033f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	f043 0220 	orr.w	r2, r3, #32
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e023      	b.n	8003462 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	0c1b      	lsrs	r3, r3, #16
 800341e:	b2db      	uxtb	r3, r3
 8003420:	2b01      	cmp	r3, #1
 8003422:	d10d      	bne.n	8003440 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	43da      	mvns	r2, r3
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	4013      	ands	r3, r2
 8003430:	b29b      	uxth	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	bf0c      	ite	eq
 8003436:	2301      	moveq	r3, #1
 8003438:	2300      	movne	r3, #0
 800343a:	b2db      	uxtb	r3, r3
 800343c:	461a      	mov	r2, r3
 800343e:	e00c      	b.n	800345a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	43da      	mvns	r2, r3
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	4013      	ands	r3, r2
 800344c:	b29b      	uxth	r3, r3
 800344e:	2b00      	cmp	r3, #0
 8003450:	bf0c      	ite	eq
 8003452:	2301      	moveq	r3, #1
 8003454:	2300      	movne	r3, #0
 8003456:	b2db      	uxtb	r3, r3
 8003458:	461a      	mov	r2, r3
 800345a:	79fb      	ldrb	r3, [r7, #7]
 800345c:	429a      	cmp	r2, r3
 800345e:	d0b6      	beq.n	80033ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3710      	adds	r7, #16
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800346a:	b580      	push	{r7, lr}
 800346c:	b084      	sub	sp, #16
 800346e:	af00      	add	r7, sp, #0
 8003470:	60f8      	str	r0, [r7, #12]
 8003472:	60b9      	str	r1, [r7, #8]
 8003474:	607a      	str	r2, [r7, #4]
 8003476:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003478:	e051      	b.n	800351e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	695b      	ldr	r3, [r3, #20]
 8003480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003484:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003488:	d123      	bne.n	80034d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003498:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034a2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2220      	movs	r2, #32
 80034ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034be:	f043 0204 	orr.w	r2, r3, #4
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e046      	b.n	8003560 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034d8:	d021      	beq.n	800351e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034da:	f7fe fc69 	bl	8001db0 <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d302      	bcc.n	80034f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d116      	bne.n	800351e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2220      	movs	r2, #32
 80034fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	f043 0220 	orr.w	r2, r3, #32
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e020      	b.n	8003560 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	0c1b      	lsrs	r3, r3, #16
 8003522:	b2db      	uxtb	r3, r3
 8003524:	2b01      	cmp	r3, #1
 8003526:	d10c      	bne.n	8003542 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	43da      	mvns	r2, r3
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	4013      	ands	r3, r2
 8003534:	b29b      	uxth	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	bf14      	ite	ne
 800353a:	2301      	movne	r3, #1
 800353c:	2300      	moveq	r3, #0
 800353e:	b2db      	uxtb	r3, r3
 8003540:	e00b      	b.n	800355a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	43da      	mvns	r2, r3
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	4013      	ands	r3, r2
 800354e:	b29b      	uxth	r3, r3
 8003550:	2b00      	cmp	r3, #0
 8003552:	bf14      	ite	ne
 8003554:	2301      	movne	r3, #1
 8003556:	2300      	moveq	r3, #0
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d18d      	bne.n	800347a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003574:	e02d      	b.n	80035d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f000 f8ce 	bl	8003718 <I2C_IsAcknowledgeFailed>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e02d      	b.n	80035e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800358c:	d021      	beq.n	80035d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800358e:	f7fe fc0f 	bl	8001db0 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	68ba      	ldr	r2, [r7, #8]
 800359a:	429a      	cmp	r2, r3
 800359c:	d302      	bcc.n	80035a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d116      	bne.n	80035d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2220      	movs	r2, #32
 80035ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035be:	f043 0220 	orr.w	r2, r3, #32
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e007      	b.n	80035e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035dc:	2b80      	cmp	r3, #128	; 0x80
 80035de:	d1ca      	bne.n	8003576 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3710      	adds	r7, #16
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b084      	sub	sp, #16
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	60f8      	str	r0, [r7, #12]
 80035f2:	60b9      	str	r1, [r7, #8]
 80035f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035f6:	e02d      	b.n	8003654 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035f8:	68f8      	ldr	r0, [r7, #12]
 80035fa:	f000 f88d 	bl	8003718 <I2C_IsAcknowledgeFailed>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d001      	beq.n	8003608 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e02d      	b.n	8003664 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800360e:	d021      	beq.n	8003654 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003610:	f7fe fbce 	bl	8001db0 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	68ba      	ldr	r2, [r7, #8]
 800361c:	429a      	cmp	r2, r3
 800361e:	d302      	bcc.n	8003626 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d116      	bne.n	8003654 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2220      	movs	r2, #32
 8003630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003640:	f043 0220 	orr.w	r2, r3, #32
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e007      	b.n	8003664 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	f003 0304 	and.w	r3, r3, #4
 800365e:	2b04      	cmp	r3, #4
 8003660:	d1ca      	bne.n	80035f8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003678:	e042      	b.n	8003700 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	695b      	ldr	r3, [r3, #20]
 8003680:	f003 0310 	and.w	r3, r3, #16
 8003684:	2b10      	cmp	r3, #16
 8003686:	d119      	bne.n	80036bc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f06f 0210 	mvn.w	r2, #16
 8003690:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2220      	movs	r2, #32
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e029      	b.n	8003710 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036bc:	f7fe fb78 	bl	8001db0 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	68ba      	ldr	r2, [r7, #8]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d302      	bcc.n	80036d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d116      	bne.n	8003700 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2220      	movs	r2, #32
 80036dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ec:	f043 0220 	orr.w	r2, r3, #32
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e007      	b.n	8003710 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800370a:	2b40      	cmp	r3, #64	; 0x40
 800370c:	d1b5      	bne.n	800367a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3710      	adds	r7, #16
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800372a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800372e:	d11b      	bne.n	8003768 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003738:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2220      	movs	r2, #32
 8003744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003754:	f043 0204 	orr.w	r2, r3, #4
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e000      	b.n	800376a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	bc80      	pop	{r7}
 8003772:	4770      	bx	lr

08003774 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b086      	sub	sp, #24
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d101      	bne.n	8003786 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e26c      	b.n	8003c60 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	2b00      	cmp	r3, #0
 8003790:	f000 8087 	beq.w	80038a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003794:	4b92      	ldr	r3, [pc, #584]	; (80039e0 <HAL_RCC_OscConfig+0x26c>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f003 030c 	and.w	r3, r3, #12
 800379c:	2b04      	cmp	r3, #4
 800379e:	d00c      	beq.n	80037ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80037a0:	4b8f      	ldr	r3, [pc, #572]	; (80039e0 <HAL_RCC_OscConfig+0x26c>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f003 030c 	and.w	r3, r3, #12
 80037a8:	2b08      	cmp	r3, #8
 80037aa:	d112      	bne.n	80037d2 <HAL_RCC_OscConfig+0x5e>
 80037ac:	4b8c      	ldr	r3, [pc, #560]	; (80039e0 <HAL_RCC_OscConfig+0x26c>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037b8:	d10b      	bne.n	80037d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037ba:	4b89      	ldr	r3, [pc, #548]	; (80039e0 <HAL_RCC_OscConfig+0x26c>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d06c      	beq.n	80038a0 <HAL_RCC_OscConfig+0x12c>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d168      	bne.n	80038a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e246      	b.n	8003c60 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037da:	d106      	bne.n	80037ea <HAL_RCC_OscConfig+0x76>
 80037dc:	4b80      	ldr	r3, [pc, #512]	; (80039e0 <HAL_RCC_OscConfig+0x26c>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a7f      	ldr	r2, [pc, #508]	; (80039e0 <HAL_RCC_OscConfig+0x26c>)
 80037e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037e6:	6013      	str	r3, [r2, #0]
 80037e8:	e02e      	b.n	8003848 <HAL_RCC_OscConfig+0xd4>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10c      	bne.n	800380c <HAL_RCC_OscConfig+0x98>
 80037f2:	4b7b      	ldr	r3, [pc, #492]	; (80039e0 <HAL_RCC_OscConfig+0x26c>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a7a      	ldr	r2, [pc, #488]	; (80039e0 <HAL_RCC_OscConfig+0x26c>)
 80037f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037fc:	6013      	str	r3, [r2, #0]
 80037fe:	4b78      	ldr	r3, [pc, #480]	; (80039e0 <HAL_RCC_OscConfig+0x26c>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a77      	ldr	r2, [pc, #476]	; (80039e0 <HAL_RCC_OscConfig+0x26c>)
 8003804:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003808:	6013      	str	r3, [r2, #0]
 800380a:	e01d      	b.n	8003848 <HAL_RCC_OscConfig+0xd4>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003814:	d10c      	bne.n	8003830 <HAL_RCC_OscConfig+0xbc>
 8003816:	4b72      	ldr	r3, [pc, #456]	; (80039e0 <HAL_RCC_OscConfig+0x26c>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a71      	ldr	r2, [pc, #452]	; (80039e0 <HAL_RCC_OscConfig+0x26c>)
 800381c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003820:	6013      	str	r3, [r2, #0]
 8003822:	4b6f      	ldr	r3, [pc, #444]	; (80039e0 <HAL_RCC_OscConfig+0x26c>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a6e      	ldr	r2, [pc, #440]	; (80039e0 <HAL_RCC_OscConfig+0x26c>)
 8003828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800382c:	6013      	str	r3, [r2, #0]
 800382e:	e00b      	b.n	8003848 <HAL_RCC_OscConfig+0xd4>
 8003830:	4b6b      	ldr	r3, [pc, #428]	; (80039e0 <HAL_RCC_OscConfig+0x26c>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a6a      	ldr	r2, [pc, #424]	; (80039e0 <HAL_RCC_OscConfig+0x26c>)
 8003836:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800383a:	6013      	str	r3, [r2, #0]
 800383c:	4b68      	ldr	r3, [pc, #416]	; (80039e0 <HAL_RCC_OscConfig+0x26c>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a67      	ldr	r2, [pc, #412]	; (80039e0 <HAL_RCC_OscConfig+0x26c>)
 8003842:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003846:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d013      	beq.n	8003878 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003850:	f7fe faae 	bl	8001db0 <HAL_GetTick>
 8003854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003856:	e008      	b.n	800386a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003858:	f7fe faaa 	bl	8001db0 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	2b64      	cmp	r3, #100	; 0x64
 8003864:	d901      	bls.n	800386a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e1fa      	b.n	8003c60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800386a:	4b5d      	ldr	r3, [pc, #372]	; (80039e0 <HAL_RCC_OscConfig+0x26c>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d0f0      	beq.n	8003858 <HAL_RCC_OscConfig+0xe4>
 8003876:	e014      	b.n	80038a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003878:	f7fe fa9a 	bl	8001db0 <HAL_GetTick>
 800387c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800387e:	e008      	b.n	8003892 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003880:	f7fe fa96 	bl	8001db0 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b64      	cmp	r3, #100	; 0x64
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e1e6      	b.n	8003c60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003892:	4b53      	ldr	r3, [pc, #332]	; (80039e0 <HAL_RCC_OscConfig+0x26c>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1f0      	bne.n	8003880 <HAL_RCC_OscConfig+0x10c>
 800389e:	e000      	b.n	80038a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d063      	beq.n	8003976 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038ae:	4b4c      	ldr	r3, [pc, #304]	; (80039e0 <HAL_RCC_OscConfig+0x26c>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f003 030c 	and.w	r3, r3, #12
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00b      	beq.n	80038d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80038ba:	4b49      	ldr	r3, [pc, #292]	; (80039e0 <HAL_RCC_OscConfig+0x26c>)
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f003 030c 	and.w	r3, r3, #12
 80038c2:	2b08      	cmp	r3, #8
 80038c4:	d11c      	bne.n	8003900 <HAL_RCC_OscConfig+0x18c>
 80038c6:	4b46      	ldr	r3, [pc, #280]	; (80039e0 <HAL_RCC_OscConfig+0x26c>)
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d116      	bne.n	8003900 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038d2:	4b43      	ldr	r3, [pc, #268]	; (80039e0 <HAL_RCC_OscConfig+0x26c>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d005      	beq.n	80038ea <HAL_RCC_OscConfig+0x176>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d001      	beq.n	80038ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e1ba      	b.n	8003c60 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ea:	4b3d      	ldr	r3, [pc, #244]	; (80039e0 <HAL_RCC_OscConfig+0x26c>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	00db      	lsls	r3, r3, #3
 80038f8:	4939      	ldr	r1, [pc, #228]	; (80039e0 <HAL_RCC_OscConfig+0x26c>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038fe:	e03a      	b.n	8003976 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	691b      	ldr	r3, [r3, #16]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d020      	beq.n	800394a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003908:	4b36      	ldr	r3, [pc, #216]	; (80039e4 <HAL_RCC_OscConfig+0x270>)
 800390a:	2201      	movs	r2, #1
 800390c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800390e:	f7fe fa4f 	bl	8001db0 <HAL_GetTick>
 8003912:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003914:	e008      	b.n	8003928 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003916:	f7fe fa4b 	bl	8001db0 <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	2b02      	cmp	r3, #2
 8003922:	d901      	bls.n	8003928 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e19b      	b.n	8003c60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003928:	4b2d      	ldr	r3, [pc, #180]	; (80039e0 <HAL_RCC_OscConfig+0x26c>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0302 	and.w	r3, r3, #2
 8003930:	2b00      	cmp	r3, #0
 8003932:	d0f0      	beq.n	8003916 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003934:	4b2a      	ldr	r3, [pc, #168]	; (80039e0 <HAL_RCC_OscConfig+0x26c>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	00db      	lsls	r3, r3, #3
 8003942:	4927      	ldr	r1, [pc, #156]	; (80039e0 <HAL_RCC_OscConfig+0x26c>)
 8003944:	4313      	orrs	r3, r2
 8003946:	600b      	str	r3, [r1, #0]
 8003948:	e015      	b.n	8003976 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800394a:	4b26      	ldr	r3, [pc, #152]	; (80039e4 <HAL_RCC_OscConfig+0x270>)
 800394c:	2200      	movs	r2, #0
 800394e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003950:	f7fe fa2e 	bl	8001db0 <HAL_GetTick>
 8003954:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003956:	e008      	b.n	800396a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003958:	f7fe fa2a 	bl	8001db0 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b02      	cmp	r3, #2
 8003964:	d901      	bls.n	800396a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e17a      	b.n	8003c60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800396a:	4b1d      	ldr	r3, [pc, #116]	; (80039e0 <HAL_RCC_OscConfig+0x26c>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1f0      	bne.n	8003958 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0308 	and.w	r3, r3, #8
 800397e:	2b00      	cmp	r3, #0
 8003980:	d03a      	beq.n	80039f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d019      	beq.n	80039be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800398a:	4b17      	ldr	r3, [pc, #92]	; (80039e8 <HAL_RCC_OscConfig+0x274>)
 800398c:	2201      	movs	r2, #1
 800398e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003990:	f7fe fa0e 	bl	8001db0 <HAL_GetTick>
 8003994:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003996:	e008      	b.n	80039aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003998:	f7fe fa0a 	bl	8001db0 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e15a      	b.n	8003c60 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039aa:	4b0d      	ldr	r3, [pc, #52]	; (80039e0 <HAL_RCC_OscConfig+0x26c>)
 80039ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d0f0      	beq.n	8003998 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80039b6:	2001      	movs	r0, #1
 80039b8:	f000 fad8 	bl	8003f6c <RCC_Delay>
 80039bc:	e01c      	b.n	80039f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039be:	4b0a      	ldr	r3, [pc, #40]	; (80039e8 <HAL_RCC_OscConfig+0x274>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039c4:	f7fe f9f4 	bl	8001db0 <HAL_GetTick>
 80039c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039ca:	e00f      	b.n	80039ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039cc:	f7fe f9f0 	bl	8001db0 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d908      	bls.n	80039ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e140      	b.n	8003c60 <HAL_RCC_OscConfig+0x4ec>
 80039de:	bf00      	nop
 80039e0:	40021000 	.word	0x40021000
 80039e4:	42420000 	.word	0x42420000
 80039e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039ec:	4b9e      	ldr	r3, [pc, #632]	; (8003c68 <HAL_RCC_OscConfig+0x4f4>)
 80039ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1e9      	bne.n	80039cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0304 	and.w	r3, r3, #4
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f000 80a6 	beq.w	8003b52 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a06:	2300      	movs	r3, #0
 8003a08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a0a:	4b97      	ldr	r3, [pc, #604]	; (8003c68 <HAL_RCC_OscConfig+0x4f4>)
 8003a0c:	69db      	ldr	r3, [r3, #28]
 8003a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d10d      	bne.n	8003a32 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a16:	4b94      	ldr	r3, [pc, #592]	; (8003c68 <HAL_RCC_OscConfig+0x4f4>)
 8003a18:	69db      	ldr	r3, [r3, #28]
 8003a1a:	4a93      	ldr	r2, [pc, #588]	; (8003c68 <HAL_RCC_OscConfig+0x4f4>)
 8003a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a20:	61d3      	str	r3, [r2, #28]
 8003a22:	4b91      	ldr	r3, [pc, #580]	; (8003c68 <HAL_RCC_OscConfig+0x4f4>)
 8003a24:	69db      	ldr	r3, [r3, #28]
 8003a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a2a:	60bb      	str	r3, [r7, #8]
 8003a2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a32:	4b8e      	ldr	r3, [pc, #568]	; (8003c6c <HAL_RCC_OscConfig+0x4f8>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d118      	bne.n	8003a70 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a3e:	4b8b      	ldr	r3, [pc, #556]	; (8003c6c <HAL_RCC_OscConfig+0x4f8>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a8a      	ldr	r2, [pc, #552]	; (8003c6c <HAL_RCC_OscConfig+0x4f8>)
 8003a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a4a:	f7fe f9b1 	bl	8001db0 <HAL_GetTick>
 8003a4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a50:	e008      	b.n	8003a64 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a52:	f7fe f9ad 	bl	8001db0 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	2b64      	cmp	r3, #100	; 0x64
 8003a5e:	d901      	bls.n	8003a64 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e0fd      	b.n	8003c60 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a64:	4b81      	ldr	r3, [pc, #516]	; (8003c6c <HAL_RCC_OscConfig+0x4f8>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d0f0      	beq.n	8003a52 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d106      	bne.n	8003a86 <HAL_RCC_OscConfig+0x312>
 8003a78:	4b7b      	ldr	r3, [pc, #492]	; (8003c68 <HAL_RCC_OscConfig+0x4f4>)
 8003a7a:	6a1b      	ldr	r3, [r3, #32]
 8003a7c:	4a7a      	ldr	r2, [pc, #488]	; (8003c68 <HAL_RCC_OscConfig+0x4f4>)
 8003a7e:	f043 0301 	orr.w	r3, r3, #1
 8003a82:	6213      	str	r3, [r2, #32]
 8003a84:	e02d      	b.n	8003ae2 <HAL_RCC_OscConfig+0x36e>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10c      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x334>
 8003a8e:	4b76      	ldr	r3, [pc, #472]	; (8003c68 <HAL_RCC_OscConfig+0x4f4>)
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	4a75      	ldr	r2, [pc, #468]	; (8003c68 <HAL_RCC_OscConfig+0x4f4>)
 8003a94:	f023 0301 	bic.w	r3, r3, #1
 8003a98:	6213      	str	r3, [r2, #32]
 8003a9a:	4b73      	ldr	r3, [pc, #460]	; (8003c68 <HAL_RCC_OscConfig+0x4f4>)
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	4a72      	ldr	r2, [pc, #456]	; (8003c68 <HAL_RCC_OscConfig+0x4f4>)
 8003aa0:	f023 0304 	bic.w	r3, r3, #4
 8003aa4:	6213      	str	r3, [r2, #32]
 8003aa6:	e01c      	b.n	8003ae2 <HAL_RCC_OscConfig+0x36e>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	2b05      	cmp	r3, #5
 8003aae:	d10c      	bne.n	8003aca <HAL_RCC_OscConfig+0x356>
 8003ab0:	4b6d      	ldr	r3, [pc, #436]	; (8003c68 <HAL_RCC_OscConfig+0x4f4>)
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	4a6c      	ldr	r2, [pc, #432]	; (8003c68 <HAL_RCC_OscConfig+0x4f4>)
 8003ab6:	f043 0304 	orr.w	r3, r3, #4
 8003aba:	6213      	str	r3, [r2, #32]
 8003abc:	4b6a      	ldr	r3, [pc, #424]	; (8003c68 <HAL_RCC_OscConfig+0x4f4>)
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	4a69      	ldr	r2, [pc, #420]	; (8003c68 <HAL_RCC_OscConfig+0x4f4>)
 8003ac2:	f043 0301 	orr.w	r3, r3, #1
 8003ac6:	6213      	str	r3, [r2, #32]
 8003ac8:	e00b      	b.n	8003ae2 <HAL_RCC_OscConfig+0x36e>
 8003aca:	4b67      	ldr	r3, [pc, #412]	; (8003c68 <HAL_RCC_OscConfig+0x4f4>)
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	4a66      	ldr	r2, [pc, #408]	; (8003c68 <HAL_RCC_OscConfig+0x4f4>)
 8003ad0:	f023 0301 	bic.w	r3, r3, #1
 8003ad4:	6213      	str	r3, [r2, #32]
 8003ad6:	4b64      	ldr	r3, [pc, #400]	; (8003c68 <HAL_RCC_OscConfig+0x4f4>)
 8003ad8:	6a1b      	ldr	r3, [r3, #32]
 8003ada:	4a63      	ldr	r2, [pc, #396]	; (8003c68 <HAL_RCC_OscConfig+0x4f4>)
 8003adc:	f023 0304 	bic.w	r3, r3, #4
 8003ae0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d015      	beq.n	8003b16 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aea:	f7fe f961 	bl	8001db0 <HAL_GetTick>
 8003aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003af0:	e00a      	b.n	8003b08 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003af2:	f7fe f95d 	bl	8001db0 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d901      	bls.n	8003b08 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e0ab      	b.n	8003c60 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b08:	4b57      	ldr	r3, [pc, #348]	; (8003c68 <HAL_RCC_OscConfig+0x4f4>)
 8003b0a:	6a1b      	ldr	r3, [r3, #32]
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d0ee      	beq.n	8003af2 <HAL_RCC_OscConfig+0x37e>
 8003b14:	e014      	b.n	8003b40 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b16:	f7fe f94b 	bl	8001db0 <HAL_GetTick>
 8003b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b1c:	e00a      	b.n	8003b34 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b1e:	f7fe f947 	bl	8001db0 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d901      	bls.n	8003b34 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e095      	b.n	8003c60 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b34:	4b4c      	ldr	r3, [pc, #304]	; (8003c68 <HAL_RCC_OscConfig+0x4f4>)
 8003b36:	6a1b      	ldr	r3, [r3, #32]
 8003b38:	f003 0302 	and.w	r3, r3, #2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d1ee      	bne.n	8003b1e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b40:	7dfb      	ldrb	r3, [r7, #23]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d105      	bne.n	8003b52 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b46:	4b48      	ldr	r3, [pc, #288]	; (8003c68 <HAL_RCC_OscConfig+0x4f4>)
 8003b48:	69db      	ldr	r3, [r3, #28]
 8003b4a:	4a47      	ldr	r2, [pc, #284]	; (8003c68 <HAL_RCC_OscConfig+0x4f4>)
 8003b4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b50:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	69db      	ldr	r3, [r3, #28]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	f000 8081 	beq.w	8003c5e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b5c:	4b42      	ldr	r3, [pc, #264]	; (8003c68 <HAL_RCC_OscConfig+0x4f4>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f003 030c 	and.w	r3, r3, #12
 8003b64:	2b08      	cmp	r3, #8
 8003b66:	d061      	beq.n	8003c2c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	69db      	ldr	r3, [r3, #28]
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d146      	bne.n	8003bfe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b70:	4b3f      	ldr	r3, [pc, #252]	; (8003c70 <HAL_RCC_OscConfig+0x4fc>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b76:	f7fe f91b 	bl	8001db0 <HAL_GetTick>
 8003b7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b7c:	e008      	b.n	8003b90 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b7e:	f7fe f917 	bl	8001db0 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d901      	bls.n	8003b90 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e067      	b.n	8003c60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b90:	4b35      	ldr	r3, [pc, #212]	; (8003c68 <HAL_RCC_OscConfig+0x4f4>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1f0      	bne.n	8003b7e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a1b      	ldr	r3, [r3, #32]
 8003ba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ba4:	d108      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003ba6:	4b30      	ldr	r3, [pc, #192]	; (8003c68 <HAL_RCC_OscConfig+0x4f4>)
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	492d      	ldr	r1, [pc, #180]	; (8003c68 <HAL_RCC_OscConfig+0x4f4>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bb8:	4b2b      	ldr	r3, [pc, #172]	; (8003c68 <HAL_RCC_OscConfig+0x4f4>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a19      	ldr	r1, [r3, #32]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc8:	430b      	orrs	r3, r1
 8003bca:	4927      	ldr	r1, [pc, #156]	; (8003c68 <HAL_RCC_OscConfig+0x4f4>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bd0:	4b27      	ldr	r3, [pc, #156]	; (8003c70 <HAL_RCC_OscConfig+0x4fc>)
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd6:	f7fe f8eb 	bl	8001db0 <HAL_GetTick>
 8003bda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bdc:	e008      	b.n	8003bf0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bde:	f7fe f8e7 	bl	8001db0 <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d901      	bls.n	8003bf0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e037      	b.n	8003c60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bf0:	4b1d      	ldr	r3, [pc, #116]	; (8003c68 <HAL_RCC_OscConfig+0x4f4>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d0f0      	beq.n	8003bde <HAL_RCC_OscConfig+0x46a>
 8003bfc:	e02f      	b.n	8003c5e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bfe:	4b1c      	ldr	r3, [pc, #112]	; (8003c70 <HAL_RCC_OscConfig+0x4fc>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c04:	f7fe f8d4 	bl	8001db0 <HAL_GetTick>
 8003c08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c0a:	e008      	b.n	8003c1e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c0c:	f7fe f8d0 	bl	8001db0 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e020      	b.n	8003c60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c1e:	4b12      	ldr	r3, [pc, #72]	; (8003c68 <HAL_RCC_OscConfig+0x4f4>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1f0      	bne.n	8003c0c <HAL_RCC_OscConfig+0x498>
 8003c2a:	e018      	b.n	8003c5e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	69db      	ldr	r3, [r3, #28]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d101      	bne.n	8003c38 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e013      	b.n	8003c60 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c38:	4b0b      	ldr	r3, [pc, #44]	; (8003c68 <HAL_RCC_OscConfig+0x4f4>)
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d106      	bne.n	8003c5a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d001      	beq.n	8003c5e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e000      	b.n	8003c60 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3718      	adds	r7, #24
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	40021000 	.word	0x40021000
 8003c6c:	40007000 	.word	0x40007000
 8003c70:	42420060 	.word	0x42420060

08003c74 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d101      	bne.n	8003c88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e0d0      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c88:	4b6a      	ldr	r3, [pc, #424]	; (8003e34 <HAL_RCC_ClockConfig+0x1c0>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0307 	and.w	r3, r3, #7
 8003c90:	683a      	ldr	r2, [r7, #0]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d910      	bls.n	8003cb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c96:	4b67      	ldr	r3, [pc, #412]	; (8003e34 <HAL_RCC_ClockConfig+0x1c0>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f023 0207 	bic.w	r2, r3, #7
 8003c9e:	4965      	ldr	r1, [pc, #404]	; (8003e34 <HAL_RCC_ClockConfig+0x1c0>)
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ca6:	4b63      	ldr	r3, [pc, #396]	; (8003e34 <HAL_RCC_ClockConfig+0x1c0>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0307 	and.w	r3, r3, #7
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d001      	beq.n	8003cb8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e0b8      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d020      	beq.n	8003d06 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0304 	and.w	r3, r3, #4
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d005      	beq.n	8003cdc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cd0:	4b59      	ldr	r3, [pc, #356]	; (8003e38 <HAL_RCC_ClockConfig+0x1c4>)
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	4a58      	ldr	r2, [pc, #352]	; (8003e38 <HAL_RCC_ClockConfig+0x1c4>)
 8003cd6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003cda:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0308 	and.w	r3, r3, #8
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d005      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ce8:	4b53      	ldr	r3, [pc, #332]	; (8003e38 <HAL_RCC_ClockConfig+0x1c4>)
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	4a52      	ldr	r2, [pc, #328]	; (8003e38 <HAL_RCC_ClockConfig+0x1c4>)
 8003cee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003cf2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cf4:	4b50      	ldr	r3, [pc, #320]	; (8003e38 <HAL_RCC_ClockConfig+0x1c4>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	494d      	ldr	r1, [pc, #308]	; (8003e38 <HAL_RCC_ClockConfig+0x1c4>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d040      	beq.n	8003d94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d107      	bne.n	8003d2a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d1a:	4b47      	ldr	r3, [pc, #284]	; (8003e38 <HAL_RCC_ClockConfig+0x1c4>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d115      	bne.n	8003d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e07f      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d107      	bne.n	8003d42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d32:	4b41      	ldr	r3, [pc, #260]	; (8003e38 <HAL_RCC_ClockConfig+0x1c4>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d109      	bne.n	8003d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e073      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d42:	4b3d      	ldr	r3, [pc, #244]	; (8003e38 <HAL_RCC_ClockConfig+0x1c4>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e06b      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d52:	4b39      	ldr	r3, [pc, #228]	; (8003e38 <HAL_RCC_ClockConfig+0x1c4>)
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f023 0203 	bic.w	r2, r3, #3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	4936      	ldr	r1, [pc, #216]	; (8003e38 <HAL_RCC_ClockConfig+0x1c4>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d64:	f7fe f824 	bl	8001db0 <HAL_GetTick>
 8003d68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d6a:	e00a      	b.n	8003d82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d6c:	f7fe f820 	bl	8001db0 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e053      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d82:	4b2d      	ldr	r3, [pc, #180]	; (8003e38 <HAL_RCC_ClockConfig+0x1c4>)
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f003 020c 	and.w	r2, r3, #12
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d1eb      	bne.n	8003d6c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d94:	4b27      	ldr	r3, [pc, #156]	; (8003e34 <HAL_RCC_ClockConfig+0x1c0>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0307 	and.w	r3, r3, #7
 8003d9c:	683a      	ldr	r2, [r7, #0]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d210      	bcs.n	8003dc4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003da2:	4b24      	ldr	r3, [pc, #144]	; (8003e34 <HAL_RCC_ClockConfig+0x1c0>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f023 0207 	bic.w	r2, r3, #7
 8003daa:	4922      	ldr	r1, [pc, #136]	; (8003e34 <HAL_RCC_ClockConfig+0x1c0>)
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003db2:	4b20      	ldr	r3, [pc, #128]	; (8003e34 <HAL_RCC_ClockConfig+0x1c0>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0307 	and.w	r3, r3, #7
 8003dba:	683a      	ldr	r2, [r7, #0]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d001      	beq.n	8003dc4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e032      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0304 	and.w	r3, r3, #4
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d008      	beq.n	8003de2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dd0:	4b19      	ldr	r3, [pc, #100]	; (8003e38 <HAL_RCC_ClockConfig+0x1c4>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	4916      	ldr	r1, [pc, #88]	; (8003e38 <HAL_RCC_ClockConfig+0x1c4>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0308 	and.w	r3, r3, #8
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d009      	beq.n	8003e02 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003dee:	4b12      	ldr	r3, [pc, #72]	; (8003e38 <HAL_RCC_ClockConfig+0x1c4>)
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	00db      	lsls	r3, r3, #3
 8003dfc:	490e      	ldr	r1, [pc, #56]	; (8003e38 <HAL_RCC_ClockConfig+0x1c4>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e02:	f000 f821 	bl	8003e48 <HAL_RCC_GetSysClockFreq>
 8003e06:	4602      	mov	r2, r0
 8003e08:	4b0b      	ldr	r3, [pc, #44]	; (8003e38 <HAL_RCC_ClockConfig+0x1c4>)
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	091b      	lsrs	r3, r3, #4
 8003e0e:	f003 030f 	and.w	r3, r3, #15
 8003e12:	490a      	ldr	r1, [pc, #40]	; (8003e3c <HAL_RCC_ClockConfig+0x1c8>)
 8003e14:	5ccb      	ldrb	r3, [r1, r3]
 8003e16:	fa22 f303 	lsr.w	r3, r2, r3
 8003e1a:	4a09      	ldr	r2, [pc, #36]	; (8003e40 <HAL_RCC_ClockConfig+0x1cc>)
 8003e1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e1e:	4b09      	ldr	r3, [pc, #36]	; (8003e44 <HAL_RCC_ClockConfig+0x1d0>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7fd ff82 	bl	8001d2c <HAL_InitTick>

  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	40022000 	.word	0x40022000
 8003e38:	40021000 	.word	0x40021000
 8003e3c:	08009f10 	.word	0x08009f10
 8003e40:	20000000 	.word	0x20000000
 8003e44:	20000004 	.word	0x20000004

08003e48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e48:	b490      	push	{r4, r7}
 8003e4a:	b08a      	sub	sp, #40	; 0x28
 8003e4c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003e4e:	4b2a      	ldr	r3, [pc, #168]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003e50:	1d3c      	adds	r4, r7, #4
 8003e52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003e58:	f240 2301 	movw	r3, #513	; 0x201
 8003e5c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	61fb      	str	r3, [r7, #28]
 8003e62:	2300      	movs	r3, #0
 8003e64:	61bb      	str	r3, [r7, #24]
 8003e66:	2300      	movs	r3, #0
 8003e68:	627b      	str	r3, [r7, #36]	; 0x24
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003e72:	4b22      	ldr	r3, [pc, #136]	; (8003efc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	f003 030c 	and.w	r3, r3, #12
 8003e7e:	2b04      	cmp	r3, #4
 8003e80:	d002      	beq.n	8003e88 <HAL_RCC_GetSysClockFreq+0x40>
 8003e82:	2b08      	cmp	r3, #8
 8003e84:	d003      	beq.n	8003e8e <HAL_RCC_GetSysClockFreq+0x46>
 8003e86:	e02d      	b.n	8003ee4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e88:	4b1d      	ldr	r3, [pc, #116]	; (8003f00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e8a:	623b      	str	r3, [r7, #32]
      break;
 8003e8c:	e02d      	b.n	8003eea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	0c9b      	lsrs	r3, r3, #18
 8003e92:	f003 030f 	and.w	r3, r3, #15
 8003e96:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003e9a:	4413      	add	r3, r2
 8003e9c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003ea0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d013      	beq.n	8003ed4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003eac:	4b13      	ldr	r3, [pc, #76]	; (8003efc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	0c5b      	lsrs	r3, r3, #17
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003eba:	4413      	add	r3, r2
 8003ebc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003ec0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	4a0e      	ldr	r2, [pc, #56]	; (8003f00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ec6:	fb02 f203 	mul.w	r2, r2, r3
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ed2:	e004      	b.n	8003ede <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	4a0b      	ldr	r2, [pc, #44]	; (8003f04 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ed8:	fb02 f303 	mul.w	r3, r2, r3
 8003edc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee0:	623b      	str	r3, [r7, #32]
      break;
 8003ee2:	e002      	b.n	8003eea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ee4:	4b06      	ldr	r3, [pc, #24]	; (8003f00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ee6:	623b      	str	r3, [r7, #32]
      break;
 8003ee8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003eea:	6a3b      	ldr	r3, [r7, #32]
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3728      	adds	r7, #40	; 0x28
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bc90      	pop	{r4, r7}
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	08009e98 	.word	0x08009e98
 8003efc:	40021000 	.word	0x40021000
 8003f00:	007a1200 	.word	0x007a1200
 8003f04:	003d0900 	.word	0x003d0900

08003f08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f0c:	4b02      	ldr	r3, [pc, #8]	; (8003f18 <HAL_RCC_GetHCLKFreq+0x10>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bc80      	pop	{r7}
 8003f16:	4770      	bx	lr
 8003f18:	20000000 	.word	0x20000000

08003f1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f20:	f7ff fff2 	bl	8003f08 <HAL_RCC_GetHCLKFreq>
 8003f24:	4602      	mov	r2, r0
 8003f26:	4b05      	ldr	r3, [pc, #20]	; (8003f3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	0a1b      	lsrs	r3, r3, #8
 8003f2c:	f003 0307 	and.w	r3, r3, #7
 8003f30:	4903      	ldr	r1, [pc, #12]	; (8003f40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f32:	5ccb      	ldrb	r3, [r1, r3]
 8003f34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	40021000 	.word	0x40021000
 8003f40:	08009f20 	.word	0x08009f20

08003f44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f48:	f7ff ffde 	bl	8003f08 <HAL_RCC_GetHCLKFreq>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	4b05      	ldr	r3, [pc, #20]	; (8003f64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	0adb      	lsrs	r3, r3, #11
 8003f54:	f003 0307 	and.w	r3, r3, #7
 8003f58:	4903      	ldr	r1, [pc, #12]	; (8003f68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f5a:	5ccb      	ldrb	r3, [r1, r3]
 8003f5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	40021000 	.word	0x40021000
 8003f68:	08009f20 	.word	0x08009f20

08003f6c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b085      	sub	sp, #20
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003f74:	4b0a      	ldr	r3, [pc, #40]	; (8003fa0 <RCC_Delay+0x34>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a0a      	ldr	r2, [pc, #40]	; (8003fa4 <RCC_Delay+0x38>)
 8003f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7e:	0a5b      	lsrs	r3, r3, #9
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	fb02 f303 	mul.w	r3, r2, r3
 8003f86:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003f88:	bf00      	nop
  }
  while (Delay --);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	1e5a      	subs	r2, r3, #1
 8003f8e:	60fa      	str	r2, [r7, #12]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1f9      	bne.n	8003f88 <RCC_Delay+0x1c>
}
 8003f94:	bf00      	nop
 8003f96:	bf00      	nop
 8003f98:	3714      	adds	r7, #20
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bc80      	pop	{r7}
 8003f9e:	4770      	bx	lr
 8003fa0:	20000000 	.word	0x20000000
 8003fa4:	10624dd3 	.word	0x10624dd3

08003fa8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	613b      	str	r3, [r7, #16]
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0301 	and.w	r3, r3, #1
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d07d      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fc8:	4b4f      	ldr	r3, [pc, #316]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fca:	69db      	ldr	r3, [r3, #28]
 8003fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d10d      	bne.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fd4:	4b4c      	ldr	r3, [pc, #304]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fd6:	69db      	ldr	r3, [r3, #28]
 8003fd8:	4a4b      	ldr	r2, [pc, #300]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fde:	61d3      	str	r3, [r2, #28]
 8003fe0:	4b49      	ldr	r3, [pc, #292]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fe2:	69db      	ldr	r3, [r3, #28]
 8003fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fe8:	60bb      	str	r3, [r7, #8]
 8003fea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fec:	2301      	movs	r3, #1
 8003fee:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ff0:	4b46      	ldr	r3, [pc, #280]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d118      	bne.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ffc:	4b43      	ldr	r3, [pc, #268]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a42      	ldr	r2, [pc, #264]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004002:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004006:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004008:	f7fd fed2 	bl	8001db0 <HAL_GetTick>
 800400c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800400e:	e008      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004010:	f7fd fece 	bl	8001db0 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b64      	cmp	r3, #100	; 0x64
 800401c:	d901      	bls.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e06d      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004022:	4b3a      	ldr	r3, [pc, #232]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800402a:	2b00      	cmp	r3, #0
 800402c:	d0f0      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800402e:	4b36      	ldr	r3, [pc, #216]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004036:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d02e      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	429a      	cmp	r2, r3
 800404a:	d027      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800404c:	4b2e      	ldr	r3, [pc, #184]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800404e:	6a1b      	ldr	r3, [r3, #32]
 8004050:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004054:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004056:	4b2e      	ldr	r3, [pc, #184]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004058:	2201      	movs	r2, #1
 800405a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800405c:	4b2c      	ldr	r3, [pc, #176]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800405e:	2200      	movs	r2, #0
 8004060:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004062:	4a29      	ldr	r2, [pc, #164]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	2b00      	cmp	r3, #0
 8004070:	d014      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004072:	f7fd fe9d 	bl	8001db0 <HAL_GetTick>
 8004076:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004078:	e00a      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800407a:	f7fd fe99 	bl	8001db0 <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	f241 3288 	movw	r2, #5000	; 0x1388
 8004088:	4293      	cmp	r3, r2
 800408a:	d901      	bls.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e036      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004090:	4b1d      	ldr	r3, [pc, #116]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004092:	6a1b      	ldr	r3, [r3, #32]
 8004094:	f003 0302 	and.w	r3, r3, #2
 8004098:	2b00      	cmp	r3, #0
 800409a:	d0ee      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800409c:	4b1a      	ldr	r3, [pc, #104]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800409e:	6a1b      	ldr	r3, [r3, #32]
 80040a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	4917      	ldr	r1, [pc, #92]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80040ae:	7dfb      	ldrb	r3, [r7, #23]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d105      	bne.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040b4:	4b14      	ldr	r3, [pc, #80]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040b6:	69db      	ldr	r3, [r3, #28]
 80040b8:	4a13      	ldr	r2, [pc, #76]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040be:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d008      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040cc:	4b0e      	ldr	r3, [pc, #56]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	490b      	ldr	r1, [pc, #44]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0310 	and.w	r3, r3, #16
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d008      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040ea:	4b07      	ldr	r3, [pc, #28]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	4904      	ldr	r1, [pc, #16]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3718      	adds	r7, #24
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	40021000 	.word	0x40021000
 800410c:	40007000 	.word	0x40007000
 8004110:	42420440 	.word	0x42420440

08004114 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d101      	bne.n	8004126 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e041      	b.n	80041aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d106      	bne.n	8004140 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f7fd fc2c 	bl	8001998 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2202      	movs	r2, #2
 8004144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	3304      	adds	r3, #4
 8004150:	4619      	mov	r1, r3
 8004152:	4610      	mov	r0, r2
 8004154:	f000 fa9e 	bl	8004694 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3708      	adds	r7, #8
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
	...

080041b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d001      	beq.n	80041cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e03a      	b.n	8004242 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2202      	movs	r2, #2
 80041d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68da      	ldr	r2, [r3, #12]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f042 0201 	orr.w	r2, r2, #1
 80041e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a18      	ldr	r2, [pc, #96]	; (800424c <HAL_TIM_Base_Start_IT+0x98>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d00e      	beq.n	800420c <HAL_TIM_Base_Start_IT+0x58>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041f6:	d009      	beq.n	800420c <HAL_TIM_Base_Start_IT+0x58>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a14      	ldr	r2, [pc, #80]	; (8004250 <HAL_TIM_Base_Start_IT+0x9c>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d004      	beq.n	800420c <HAL_TIM_Base_Start_IT+0x58>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a13      	ldr	r2, [pc, #76]	; (8004254 <HAL_TIM_Base_Start_IT+0xa0>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d111      	bne.n	8004230 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f003 0307 	and.w	r3, r3, #7
 8004216:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2b06      	cmp	r3, #6
 800421c:	d010      	beq.n	8004240 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f042 0201 	orr.w	r2, r2, #1
 800422c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800422e:	e007      	b.n	8004240 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f042 0201 	orr.w	r2, r2, #1
 800423e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3714      	adds	r7, #20
 8004246:	46bd      	mov	sp, r7
 8004248:	bc80      	pop	{r7}
 800424a:	4770      	bx	lr
 800424c:	40012c00 	.word	0x40012c00
 8004250:	40000400 	.word	0x40000400
 8004254:	40000800 	.word	0x40000800

08004258 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68da      	ldr	r2, [r3, #12]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f022 0201 	bic.w	r2, r2, #1
 800426e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6a1a      	ldr	r2, [r3, #32]
 8004276:	f241 1311 	movw	r3, #4369	; 0x1111
 800427a:	4013      	ands	r3, r2
 800427c:	2b00      	cmp	r3, #0
 800427e:	d10f      	bne.n	80042a0 <HAL_TIM_Base_Stop_IT+0x48>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6a1a      	ldr	r2, [r3, #32]
 8004286:	f240 4344 	movw	r3, #1092	; 0x444
 800428a:	4013      	ands	r3, r2
 800428c:	2b00      	cmp	r3, #0
 800428e:	d107      	bne.n	80042a0 <HAL_TIM_Base_Stop_IT+0x48>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f022 0201 	bic.w	r2, r2, #1
 800429e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bc80      	pop	{r7}
 80042b2:	4770      	bx	lr

080042b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d122      	bne.n	8004310 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d11b      	bne.n	8004310 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f06f 0202 	mvn.w	r2, #2
 80042e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2201      	movs	r2, #1
 80042e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	699b      	ldr	r3, [r3, #24]
 80042ee:	f003 0303 	and.w	r3, r3, #3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d003      	beq.n	80042fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 f9b1 	bl	800465e <HAL_TIM_IC_CaptureCallback>
 80042fc:	e005      	b.n	800430a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 f9a4 	bl	800464c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f000 f9b3 	bl	8004670 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	f003 0304 	and.w	r3, r3, #4
 800431a:	2b04      	cmp	r3, #4
 800431c:	d122      	bne.n	8004364 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	f003 0304 	and.w	r3, r3, #4
 8004328:	2b04      	cmp	r3, #4
 800432a:	d11b      	bne.n	8004364 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f06f 0204 	mvn.w	r2, #4
 8004334:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2202      	movs	r2, #2
 800433a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004346:	2b00      	cmp	r3, #0
 8004348:	d003      	beq.n	8004352 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 f987 	bl	800465e <HAL_TIM_IC_CaptureCallback>
 8004350:	e005      	b.n	800435e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 f97a 	bl	800464c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f000 f989 	bl	8004670 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	f003 0308 	and.w	r3, r3, #8
 800436e:	2b08      	cmp	r3, #8
 8004370:	d122      	bne.n	80043b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	f003 0308 	and.w	r3, r3, #8
 800437c:	2b08      	cmp	r3, #8
 800437e:	d11b      	bne.n	80043b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f06f 0208 	mvn.w	r2, #8
 8004388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2204      	movs	r2, #4
 800438e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	69db      	ldr	r3, [r3, #28]
 8004396:	f003 0303 	and.w	r3, r3, #3
 800439a:	2b00      	cmp	r3, #0
 800439c:	d003      	beq.n	80043a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 f95d 	bl	800465e <HAL_TIM_IC_CaptureCallback>
 80043a4:	e005      	b.n	80043b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 f950 	bl	800464c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f000 f95f 	bl	8004670 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	f003 0310 	and.w	r3, r3, #16
 80043c2:	2b10      	cmp	r3, #16
 80043c4:	d122      	bne.n	800440c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	f003 0310 	and.w	r3, r3, #16
 80043d0:	2b10      	cmp	r3, #16
 80043d2:	d11b      	bne.n	800440c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f06f 0210 	mvn.w	r2, #16
 80043dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2208      	movs	r2, #8
 80043e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	69db      	ldr	r3, [r3, #28]
 80043ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d003      	beq.n	80043fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 f933 	bl	800465e <HAL_TIM_IC_CaptureCallback>
 80043f8:	e005      	b.n	8004406 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 f926 	bl	800464c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f000 f935 	bl	8004670 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b01      	cmp	r3, #1
 8004418:	d10e      	bne.n	8004438 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	f003 0301 	and.w	r3, r3, #1
 8004424:	2b01      	cmp	r3, #1
 8004426:	d107      	bne.n	8004438 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f06f 0201 	mvn.w	r2, #1
 8004430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f7fc fe6c 	bl	8001110 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004442:	2b80      	cmp	r3, #128	; 0x80
 8004444:	d10e      	bne.n	8004464 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004450:	2b80      	cmp	r3, #128	; 0x80
 8004452:	d107      	bne.n	8004464 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800445c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 fa77 	bl	8004952 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800446e:	2b40      	cmp	r3, #64	; 0x40
 8004470:	d10e      	bne.n	8004490 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800447c:	2b40      	cmp	r3, #64	; 0x40
 800447e:	d107      	bne.n	8004490 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 f8f9 	bl	8004682 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	f003 0320 	and.w	r3, r3, #32
 800449a:	2b20      	cmp	r3, #32
 800449c:	d10e      	bne.n	80044bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	f003 0320 	and.w	r3, r3, #32
 80044a8:	2b20      	cmp	r3, #32
 80044aa:	d107      	bne.n	80044bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f06f 0220 	mvn.w	r2, #32
 80044b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 fa42 	bl	8004940 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044bc:	bf00      	nop
 80044be:	3708      	adds	r7, #8
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d101      	bne.n	80044dc <HAL_TIM_ConfigClockSource+0x18>
 80044d8:	2302      	movs	r3, #2
 80044da:	e0b3      	b.n	8004644 <HAL_TIM_ConfigClockSource+0x180>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2202      	movs	r2, #2
 80044e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80044fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004502:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004514:	d03e      	beq.n	8004594 <HAL_TIM_ConfigClockSource+0xd0>
 8004516:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800451a:	f200 8087 	bhi.w	800462c <HAL_TIM_ConfigClockSource+0x168>
 800451e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004522:	f000 8085 	beq.w	8004630 <HAL_TIM_ConfigClockSource+0x16c>
 8004526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800452a:	d87f      	bhi.n	800462c <HAL_TIM_ConfigClockSource+0x168>
 800452c:	2b70      	cmp	r3, #112	; 0x70
 800452e:	d01a      	beq.n	8004566 <HAL_TIM_ConfigClockSource+0xa2>
 8004530:	2b70      	cmp	r3, #112	; 0x70
 8004532:	d87b      	bhi.n	800462c <HAL_TIM_ConfigClockSource+0x168>
 8004534:	2b60      	cmp	r3, #96	; 0x60
 8004536:	d050      	beq.n	80045da <HAL_TIM_ConfigClockSource+0x116>
 8004538:	2b60      	cmp	r3, #96	; 0x60
 800453a:	d877      	bhi.n	800462c <HAL_TIM_ConfigClockSource+0x168>
 800453c:	2b50      	cmp	r3, #80	; 0x50
 800453e:	d03c      	beq.n	80045ba <HAL_TIM_ConfigClockSource+0xf6>
 8004540:	2b50      	cmp	r3, #80	; 0x50
 8004542:	d873      	bhi.n	800462c <HAL_TIM_ConfigClockSource+0x168>
 8004544:	2b40      	cmp	r3, #64	; 0x40
 8004546:	d058      	beq.n	80045fa <HAL_TIM_ConfigClockSource+0x136>
 8004548:	2b40      	cmp	r3, #64	; 0x40
 800454a:	d86f      	bhi.n	800462c <HAL_TIM_ConfigClockSource+0x168>
 800454c:	2b30      	cmp	r3, #48	; 0x30
 800454e:	d064      	beq.n	800461a <HAL_TIM_ConfigClockSource+0x156>
 8004550:	2b30      	cmp	r3, #48	; 0x30
 8004552:	d86b      	bhi.n	800462c <HAL_TIM_ConfigClockSource+0x168>
 8004554:	2b20      	cmp	r3, #32
 8004556:	d060      	beq.n	800461a <HAL_TIM_ConfigClockSource+0x156>
 8004558:	2b20      	cmp	r3, #32
 800455a:	d867      	bhi.n	800462c <HAL_TIM_ConfigClockSource+0x168>
 800455c:	2b00      	cmp	r3, #0
 800455e:	d05c      	beq.n	800461a <HAL_TIM_ConfigClockSource+0x156>
 8004560:	2b10      	cmp	r3, #16
 8004562:	d05a      	beq.n	800461a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004564:	e062      	b.n	800462c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6818      	ldr	r0, [r3, #0]
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	6899      	ldr	r1, [r3, #8]
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	685a      	ldr	r2, [r3, #4]
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	f000 f966 	bl	8004846 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004588:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	609a      	str	r2, [r3, #8]
      break;
 8004592:	e04e      	b.n	8004632 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6818      	ldr	r0, [r3, #0]
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	6899      	ldr	r1, [r3, #8]
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	f000 f94f 	bl	8004846 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	689a      	ldr	r2, [r3, #8]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045b6:	609a      	str	r2, [r3, #8]
      break;
 80045b8:	e03b      	b.n	8004632 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6818      	ldr	r0, [r3, #0]
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	6859      	ldr	r1, [r3, #4]
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	461a      	mov	r2, r3
 80045c8:	f000 f8c6 	bl	8004758 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2150      	movs	r1, #80	; 0x50
 80045d2:	4618      	mov	r0, r3
 80045d4:	f000 f91d 	bl	8004812 <TIM_ITRx_SetConfig>
      break;
 80045d8:	e02b      	b.n	8004632 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6818      	ldr	r0, [r3, #0]
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	6859      	ldr	r1, [r3, #4]
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	461a      	mov	r2, r3
 80045e8:	f000 f8e4 	bl	80047b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2160      	movs	r1, #96	; 0x60
 80045f2:	4618      	mov	r0, r3
 80045f4:	f000 f90d 	bl	8004812 <TIM_ITRx_SetConfig>
      break;
 80045f8:	e01b      	b.n	8004632 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6818      	ldr	r0, [r3, #0]
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	6859      	ldr	r1, [r3, #4]
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	461a      	mov	r2, r3
 8004608:	f000 f8a6 	bl	8004758 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2140      	movs	r1, #64	; 0x40
 8004612:	4618      	mov	r0, r3
 8004614:	f000 f8fd 	bl	8004812 <TIM_ITRx_SetConfig>
      break;
 8004618:	e00b      	b.n	8004632 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4619      	mov	r1, r3
 8004624:	4610      	mov	r0, r2
 8004626:	f000 f8f4 	bl	8004812 <TIM_ITRx_SetConfig>
        break;
 800462a:	e002      	b.n	8004632 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800462c:	bf00      	nop
 800462e:	e000      	b.n	8004632 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004630:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2201      	movs	r2, #1
 8004636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	bc80      	pop	{r7}
 800465c:	4770      	bx	lr

0800465e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800465e:	b480      	push	{r7}
 8004660:	b083      	sub	sp, #12
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004666:	bf00      	nop
 8004668:	370c      	adds	r7, #12
 800466a:	46bd      	mov	sp, r7
 800466c:	bc80      	pop	{r7}
 800466e:	4770      	bx	lr

08004670 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004678:	bf00      	nop
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	bc80      	pop	{r7}
 8004680:	4770      	bx	lr

08004682 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004682:	b480      	push	{r7}
 8004684:	b083      	sub	sp, #12
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800468a:	bf00      	nop
 800468c:	370c      	adds	r7, #12
 800468e:	46bd      	mov	sp, r7
 8004690:	bc80      	pop	{r7}
 8004692:	4770      	bx	lr

08004694 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004694:	b480      	push	{r7}
 8004696:	b085      	sub	sp, #20
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a29      	ldr	r2, [pc, #164]	; (800474c <TIM_Base_SetConfig+0xb8>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d00b      	beq.n	80046c4 <TIM_Base_SetConfig+0x30>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046b2:	d007      	beq.n	80046c4 <TIM_Base_SetConfig+0x30>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a26      	ldr	r2, [pc, #152]	; (8004750 <TIM_Base_SetConfig+0xbc>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d003      	beq.n	80046c4 <TIM_Base_SetConfig+0x30>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a25      	ldr	r2, [pc, #148]	; (8004754 <TIM_Base_SetConfig+0xc0>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d108      	bne.n	80046d6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a1c      	ldr	r2, [pc, #112]	; (800474c <TIM_Base_SetConfig+0xb8>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d00b      	beq.n	80046f6 <TIM_Base_SetConfig+0x62>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046e4:	d007      	beq.n	80046f6 <TIM_Base_SetConfig+0x62>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a19      	ldr	r2, [pc, #100]	; (8004750 <TIM_Base_SetConfig+0xbc>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d003      	beq.n	80046f6 <TIM_Base_SetConfig+0x62>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a18      	ldr	r2, [pc, #96]	; (8004754 <TIM_Base_SetConfig+0xc0>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d108      	bne.n	8004708 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	4313      	orrs	r3, r2
 8004706:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	4313      	orrs	r3, r2
 8004714:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	68fa      	ldr	r2, [r7, #12]
 800471a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	689a      	ldr	r2, [r3, #8]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a07      	ldr	r2, [pc, #28]	; (800474c <TIM_Base_SetConfig+0xb8>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d103      	bne.n	800473c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	691a      	ldr	r2, [r3, #16]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	615a      	str	r2, [r3, #20]
}
 8004742:	bf00      	nop
 8004744:	3714      	adds	r7, #20
 8004746:	46bd      	mov	sp, r7
 8004748:	bc80      	pop	{r7}
 800474a:	4770      	bx	lr
 800474c:	40012c00 	.word	0x40012c00
 8004750:	40000400 	.word	0x40000400
 8004754:	40000800 	.word	0x40000800

08004758 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004758:	b480      	push	{r7}
 800475a:	b087      	sub	sp, #28
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6a1b      	ldr	r3, [r3, #32]
 8004768:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6a1b      	ldr	r3, [r3, #32]
 800476e:	f023 0201 	bic.w	r2, r3, #1
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004782:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	011b      	lsls	r3, r3, #4
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	4313      	orrs	r3, r2
 800478c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	f023 030a 	bic.w	r3, r3, #10
 8004794:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004796:	697a      	ldr	r2, [r7, #20]
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	4313      	orrs	r3, r2
 800479c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	621a      	str	r2, [r3, #32]
}
 80047aa:	bf00      	nop
 80047ac:	371c      	adds	r7, #28
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bc80      	pop	{r7}
 80047b2:	4770      	bx	lr

080047b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b087      	sub	sp, #28
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6a1b      	ldr	r3, [r3, #32]
 80047c4:	f023 0210 	bic.w	r2, r3, #16
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047de:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	031b      	lsls	r3, r3, #12
 80047e4:	697a      	ldr	r2, [r7, #20]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	011b      	lsls	r3, r3, #4
 80047f6:	693a      	ldr	r2, [r7, #16]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	697a      	ldr	r2, [r7, #20]
 8004800:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	693a      	ldr	r2, [r7, #16]
 8004806:	621a      	str	r2, [r3, #32]
}
 8004808:	bf00      	nop
 800480a:	371c      	adds	r7, #28
 800480c:	46bd      	mov	sp, r7
 800480e:	bc80      	pop	{r7}
 8004810:	4770      	bx	lr

08004812 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004812:	b480      	push	{r7}
 8004814:	b085      	sub	sp, #20
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
 800481a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004828:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800482a:	683a      	ldr	r2, [r7, #0]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	4313      	orrs	r3, r2
 8004830:	f043 0307 	orr.w	r3, r3, #7
 8004834:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	609a      	str	r2, [r3, #8]
}
 800483c:	bf00      	nop
 800483e:	3714      	adds	r7, #20
 8004840:	46bd      	mov	sp, r7
 8004842:	bc80      	pop	{r7}
 8004844:	4770      	bx	lr

08004846 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004846:	b480      	push	{r7}
 8004848:	b087      	sub	sp, #28
 800484a:	af00      	add	r7, sp, #0
 800484c:	60f8      	str	r0, [r7, #12]
 800484e:	60b9      	str	r1, [r7, #8]
 8004850:	607a      	str	r2, [r7, #4]
 8004852:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004860:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	021a      	lsls	r2, r3, #8
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	431a      	orrs	r2, r3
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	4313      	orrs	r3, r2
 800486e:	697a      	ldr	r2, [r7, #20]
 8004870:	4313      	orrs	r3, r2
 8004872:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	697a      	ldr	r2, [r7, #20]
 8004878:	609a      	str	r2, [r3, #8]
}
 800487a:	bf00      	nop
 800487c:	371c      	adds	r7, #28
 800487e:	46bd      	mov	sp, r7
 8004880:	bc80      	pop	{r7}
 8004882:	4770      	bx	lr

08004884 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004884:	b480      	push	{r7}
 8004886:	b085      	sub	sp, #20
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004894:	2b01      	cmp	r3, #1
 8004896:	d101      	bne.n	800489c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004898:	2302      	movs	r3, #2
 800489a:	e046      	b.n	800492a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2202      	movs	r2, #2
 80048a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a16      	ldr	r2, [pc, #88]	; (8004934 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d00e      	beq.n	80048fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048e8:	d009      	beq.n	80048fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a12      	ldr	r2, [pc, #72]	; (8004938 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d004      	beq.n	80048fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a10      	ldr	r2, [pc, #64]	; (800493c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d10c      	bne.n	8004918 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004904:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	68ba      	ldr	r2, [r7, #8]
 800490c:	4313      	orrs	r3, r2
 800490e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68ba      	ldr	r2, [r7, #8]
 8004916:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3714      	adds	r7, #20
 800492e:	46bd      	mov	sp, r7
 8004930:	bc80      	pop	{r7}
 8004932:	4770      	bx	lr
 8004934:	40012c00 	.word	0x40012c00
 8004938:	40000400 	.word	0x40000400
 800493c:	40000800 	.word	0x40000800

08004940 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004948:	bf00      	nop
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	bc80      	pop	{r7}
 8004950:	4770      	bx	lr

08004952 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004952:	b480      	push	{r7}
 8004954:	b083      	sub	sp, #12
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800495a:	bf00      	nop
 800495c:	370c      	adds	r7, #12
 800495e:	46bd      	mov	sp, r7
 8004960:	bc80      	pop	{r7}
 8004962:	4770      	bx	lr

08004964 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d101      	bne.n	8004976 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e03f      	b.n	80049f6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800497c:	b2db      	uxtb	r3, r3
 800497e:	2b00      	cmp	r3, #0
 8004980:	d106      	bne.n	8004990 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f7fd f844 	bl	8001a18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2224      	movs	r2, #36	; 0x24
 8004994:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68da      	ldr	r2, [r3, #12]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f000 f829 	bl	8004a00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	691a      	ldr	r2, [r3, #16]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	695a      	ldr	r2, [r3, #20]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68da      	ldr	r2, [r3, #12]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2220      	movs	r2, #32
 80049e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2220      	movs	r2, #32
 80049f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3708      	adds	r7, #8
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
	...

08004a00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	68da      	ldr	r2, [r3, #12]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	689a      	ldr	r2, [r3, #8]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	431a      	orrs	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	695b      	ldr	r3, [r3, #20]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004a3a:	f023 030c 	bic.w	r3, r3, #12
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	6812      	ldr	r2, [r2, #0]
 8004a42:	68b9      	ldr	r1, [r7, #8]
 8004a44:	430b      	orrs	r3, r1
 8004a46:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	699a      	ldr	r2, [r3, #24]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	430a      	orrs	r2, r1
 8004a5c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a2c      	ldr	r2, [pc, #176]	; (8004b14 <UART_SetConfig+0x114>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d103      	bne.n	8004a70 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004a68:	f7ff fa6c 	bl	8003f44 <HAL_RCC_GetPCLK2Freq>
 8004a6c:	60f8      	str	r0, [r7, #12]
 8004a6e:	e002      	b.n	8004a76 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004a70:	f7ff fa54 	bl	8003f1c <HAL_RCC_GetPCLK1Freq>
 8004a74:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	4613      	mov	r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	4413      	add	r3, r2
 8004a7e:	009a      	lsls	r2, r3, #2
 8004a80:	441a      	add	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a8c:	4a22      	ldr	r2, [pc, #136]	; (8004b18 <UART_SetConfig+0x118>)
 8004a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a92:	095b      	lsrs	r3, r3, #5
 8004a94:	0119      	lsls	r1, r3, #4
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	4613      	mov	r3, r2
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	4413      	add	r3, r2
 8004a9e:	009a      	lsls	r2, r3, #2
 8004aa0:	441a      	add	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004aac:	4b1a      	ldr	r3, [pc, #104]	; (8004b18 <UART_SetConfig+0x118>)
 8004aae:	fba3 0302 	umull	r0, r3, r3, r2
 8004ab2:	095b      	lsrs	r3, r3, #5
 8004ab4:	2064      	movs	r0, #100	; 0x64
 8004ab6:	fb00 f303 	mul.w	r3, r0, r3
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	011b      	lsls	r3, r3, #4
 8004abe:	3332      	adds	r3, #50	; 0x32
 8004ac0:	4a15      	ldr	r2, [pc, #84]	; (8004b18 <UART_SetConfig+0x118>)
 8004ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac6:	095b      	lsrs	r3, r3, #5
 8004ac8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004acc:	4419      	add	r1, r3
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	4413      	add	r3, r2
 8004ad6:	009a      	lsls	r2, r3, #2
 8004ad8:	441a      	add	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ae4:	4b0c      	ldr	r3, [pc, #48]	; (8004b18 <UART_SetConfig+0x118>)
 8004ae6:	fba3 0302 	umull	r0, r3, r3, r2
 8004aea:	095b      	lsrs	r3, r3, #5
 8004aec:	2064      	movs	r0, #100	; 0x64
 8004aee:	fb00 f303 	mul.w	r3, r0, r3
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	011b      	lsls	r3, r3, #4
 8004af6:	3332      	adds	r3, #50	; 0x32
 8004af8:	4a07      	ldr	r2, [pc, #28]	; (8004b18 <UART_SetConfig+0x118>)
 8004afa:	fba2 2303 	umull	r2, r3, r2, r3
 8004afe:	095b      	lsrs	r3, r3, #5
 8004b00:	f003 020f 	and.w	r2, r3, #15
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	440a      	add	r2, r1
 8004b0a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004b0c:	bf00      	nop
 8004b0e:	3710      	adds	r7, #16
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	40013800 	.word	0x40013800
 8004b18:	51eb851f 	.word	0x51eb851f

08004b1c <FIRFilter_Init>:
};




void FIRFilter_Init(FIRFilter *fir) {
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]

	/* Clear filter buffer */
	for (uint8_t n = 0; n < FIR_FILTER_LENGTH; n++) {
 8004b24:	2300      	movs	r3, #0
 8004b26:	73fb      	strb	r3, [r7, #15]
 8004b28:	e008      	b.n	8004b3c <FIRFilter_Init+0x20>

		fir->buf[n] = 0.0f;
 8004b2a:	7bfa      	ldrb	r2, [r7, #15]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f04f 0100 	mov.w	r1, #0
 8004b32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (uint8_t n = 0; n < FIR_FILTER_LENGTH; n++) {
 8004b36:	7bfb      	ldrb	r3, [r7, #15]
 8004b38:	3301      	adds	r3, #1
 8004b3a:	73fb      	strb	r3, [r7, #15]
 8004b3c:	7bfb      	ldrb	r3, [r7, #15]
 8004b3e:	2b1f      	cmp	r3, #31
 8004b40:	d9f3      	bls.n	8004b2a <FIRFilter_Init+0xe>

	}

	/* Reset buffer index */
	fir->bufIndex = 0;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	/* Clear filter output */
	fir->out = 0.0f;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f04f 0200 	mov.w	r2, #0
 8004b50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

}
 8004b54:	bf00      	nop
 8004b56:	3714      	adds	r7, #20
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bc80      	pop	{r7}
 8004b5c:	4770      	bx	lr
	...

08004b60 <FIRFilter_Update>:

float FIRFilter_Update(FIRFilter *fir, float inp) {
 8004b60:	b590      	push	{r4, r7, lr}
 8004b62:	b085      	sub	sp, #20
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]

	/* Store latest sample in buffer */
	fir->buf[fir->bufIndex] = inp;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004b70:	4619      	mov	r1, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	683a      	ldr	r2, [r7, #0]
 8004b76:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	/* Increment buffer index and wrap around if necessary */
	fir->bufIndex++;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004b80:	3301      	adds	r3, #1
 8004b82:	b2da      	uxtb	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	if (fir->bufIndex == FIR_FILTER_LENGTH) {
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004b90:	2b20      	cmp	r3, #32
 8004b92:	d103      	bne.n	8004b9c <FIRFilter_Update+0x3c>

		fir->bufIndex = 0;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	}

	/* Compute new output sample (via convolution) */
	fir->out = 0.0f;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f04f 0200 	mov.w	r2, #0
 8004ba2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

	uint8_t sumIndex = fir->bufIndex;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004bac:	73fb      	strb	r3, [r7, #15]

	for (uint8_t n = 0; n < FIR_FILTER_LENGTH; n++) {
 8004bae:	2300      	movs	r3, #0
 8004bb0:	73bb      	strb	r3, [r7, #14]
 8004bb2:	e023      	b.n	8004bfc <FIRFilter_Update+0x9c>

		/* Decrement index and wrap if necessary */
		if (sumIndex > 0) {
 8004bb4:	7bfb      	ldrb	r3, [r7, #15]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d003      	beq.n	8004bc2 <FIRFilter_Update+0x62>

			sumIndex--;
 8004bba:	7bfb      	ldrb	r3, [r7, #15]
 8004bbc:	3b01      	subs	r3, #1
 8004bbe:	73fb      	strb	r3, [r7, #15]
 8004bc0:	e001      	b.n	8004bc6 <FIRFilter_Update+0x66>

		} else {

			sumIndex = FIR_FILTER_LENGTH - 1;
 8004bc2:	231f      	movs	r3, #31
 8004bc4:	73fb      	strb	r3, [r7, #15]

		}

		/* Multiply impulse response with shifted input sample and add to output */
		fir->out += FIR_IMPULSE_RESPONSE[n] * fir->buf[sumIndex];
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8004bcc:	7bbb      	ldrb	r3, [r7, #14]
 8004bce:	4a10      	ldr	r2, [pc, #64]	; (8004c10 <FIRFilter_Update+0xb0>)
 8004bd0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004bd4:	7bfa      	ldrb	r2, [r7, #15]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bdc:	4619      	mov	r1, r3
 8004bde:	f7fc f8d1 	bl	8000d84 <__aeabi_fmul>
 8004be2:	4603      	mov	r3, r0
 8004be4:	4619      	mov	r1, r3
 8004be6:	4620      	mov	r0, r4
 8004be8:	f7fb ffc4 	bl	8000b74 <__addsf3>
 8004bec:	4603      	mov	r3, r0
 8004bee:	461a      	mov	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	for (uint8_t n = 0; n < FIR_FILTER_LENGTH; n++) {
 8004bf6:	7bbb      	ldrb	r3, [r7, #14]
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	73bb      	strb	r3, [r7, #14]
 8004bfc:	7bbb      	ldrb	r3, [r7, #14]
 8004bfe:	2b1f      	cmp	r3, #31
 8004c00:	d9d8      	bls.n	8004bb4 <FIRFilter_Update+0x54>

	}

	/* Return filtered output */
	return fir->out;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84

}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3714      	adds	r7, #20
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd90      	pop	{r4, r7, pc}
 8004c10:	2000000c 	.word	0x2000000c
 8004c14:	00000000 	.word	0x00000000

08004c18 <angles_update>:

#include "angles.h"


void angles_update(MPU6050 *mpu6050, ANGLES *angle)
{
 8004c18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c1c:	b082      	sub	sp, #8
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
 8004c22:	6039      	str	r1, [r7, #0]
	angle->accel_x = mpu6050->accel_x;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	60da      	str	r2, [r3, #12]
	angle->accel_y = mpu6050->accel_y;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	685a      	ldr	r2, [r3, #4]
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	611a      	str	r2, [r3, #16]
	angle->accel_z = mpu6050->accel_z;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	689a      	ldr	r2, [r3, #8]
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	615a      	str	r2, [r3, #20]

	angle->accel_x = FIRFilter_Update(&ax_filter, angle->accel_x);
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	4619      	mov	r1, r3
 8004c42:	4851      	ldr	r0, [pc, #324]	; (8004d88 <angles_update+0x170>)
 8004c44:	f7ff ff8c 	bl	8004b60 <FIRFilter_Update>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	60da      	str	r2, [r3, #12]
	angle->accel_y = FIRFilter_Update(&ay_filter, angle->accel_y);
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	4619      	mov	r1, r3
 8004c54:	484d      	ldr	r0, [pc, #308]	; (8004d8c <angles_update+0x174>)
 8004c56:	f7ff ff83 	bl	8004b60 <FIRFilter_Update>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	611a      	str	r2, [r3, #16]
	angle->accel_z = FIRFilter_Update(&az_filter, angle->accel_z);
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	695b      	ldr	r3, [r3, #20]
 8004c64:	4619      	mov	r1, r3
 8004c66:	484a      	ldr	r0, [pc, #296]	; (8004d90 <angles_update+0x178>)
 8004c68:	f7ff ff7a 	bl	8004b60 <FIRFilter_Update>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	615a      	str	r2, [r3, #20]

	angle->yx = -1*(atan2(angle->accel_y,angle->accel_x)*180)/PI;
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7fb fbd6 	bl	8000428 <__aeabi_f2d>
 8004c7c:	4682      	mov	sl, r0
 8004c7e:	468b      	mov	fp, r1
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	4618      	mov	r0, r3
 8004c86:	f7fb fbcf 	bl	8000428 <__aeabi_f2d>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	4650      	mov	r0, sl
 8004c90:	4659      	mov	r1, fp
 8004c92:	f003 fdfd 	bl	8008890 <atan2>
 8004c96:	f04f 0200 	mov.w	r2, #0
 8004c9a:	4b3e      	ldr	r3, [pc, #248]	; (8004d94 <angles_update+0x17c>)
 8004c9c:	f7fb fc1c 	bl	80004d8 <__aeabi_dmul>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	460b      	mov	r3, r1
 8004ca4:	4690      	mov	r8, r2
 8004ca6:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8004caa:	a335      	add	r3, pc, #212	; (adr r3, 8004d80 <angles_update+0x168>)
 8004cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb0:	4640      	mov	r0, r8
 8004cb2:	4649      	mov	r1, r9
 8004cb4:	f7fb fd3a 	bl	800072c <__aeabi_ddiv>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	460b      	mov	r3, r1
 8004cbc:	4610      	mov	r0, r2
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	f7fb ff02 	bl	8000ac8 <__aeabi_d2f>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	601a      	str	r2, [r3, #0]
	angle->xz = (atan2(angle->accel_x,angle->accel_z)*180)/PI;
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f7fb fbaa 	bl	8000428 <__aeabi_f2d>
 8004cd4:	4680      	mov	r8, r0
 8004cd6:	4689      	mov	r9, r1
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	695b      	ldr	r3, [r3, #20]
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f7fb fba3 	bl	8000428 <__aeabi_f2d>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	4640      	mov	r0, r8
 8004ce8:	4649      	mov	r1, r9
 8004cea:	f003 fdd1 	bl	8008890 <atan2>
 8004cee:	f04f 0200 	mov.w	r2, #0
 8004cf2:	4b28      	ldr	r3, [pc, #160]	; (8004d94 <angles_update+0x17c>)
 8004cf4:	f7fb fbf0 	bl	80004d8 <__aeabi_dmul>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	4610      	mov	r0, r2
 8004cfe:	4619      	mov	r1, r3
 8004d00:	a31f      	add	r3, pc, #124	; (adr r3, 8004d80 <angles_update+0x168>)
 8004d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d06:	f7fb fd11 	bl	800072c <__aeabi_ddiv>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	460b      	mov	r3, r1
 8004d0e:	4610      	mov	r0, r2
 8004d10:	4619      	mov	r1, r3
 8004d12:	f7fb fed9 	bl	8000ac8 <__aeabi_d2f>
 8004d16:	4602      	mov	r2, r0
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	605a      	str	r2, [r3, #4]
	angle->yz = -1*(atan2(angle->accel_y,angle->accel_z)*180)/PI;
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	691b      	ldr	r3, [r3, #16]
 8004d20:	4618      	mov	r0, r3
 8004d22:	f7fb fb81 	bl	8000428 <__aeabi_f2d>
 8004d26:	4680      	mov	r8, r0
 8004d28:	4689      	mov	r9, r1
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	695b      	ldr	r3, [r3, #20]
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f7fb fb7a 	bl	8000428 <__aeabi_f2d>
 8004d34:	4602      	mov	r2, r0
 8004d36:	460b      	mov	r3, r1
 8004d38:	4640      	mov	r0, r8
 8004d3a:	4649      	mov	r1, r9
 8004d3c:	f003 fda8 	bl	8008890 <atan2>
 8004d40:	f04f 0200 	mov.w	r2, #0
 8004d44:	4b13      	ldr	r3, [pc, #76]	; (8004d94 <angles_update+0x17c>)
 8004d46:	f7fb fbc7 	bl	80004d8 <__aeabi_dmul>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	4614      	mov	r4, r2
 8004d50:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8004d54:	a30a      	add	r3, pc, #40	; (adr r3, 8004d80 <angles_update+0x168>)
 8004d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d5a:	4620      	mov	r0, r4
 8004d5c:	4629      	mov	r1, r5
 8004d5e:	f7fb fce5 	bl	800072c <__aeabi_ddiv>
 8004d62:	4602      	mov	r2, r0
 8004d64:	460b      	mov	r3, r1
 8004d66:	4610      	mov	r0, r2
 8004d68:	4619      	mov	r1, r3
 8004d6a:	f7fb fead 	bl	8000ac8 <__aeabi_d2f>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	609a      	str	r2, [r3, #8]

	return;
 8004d74:	bf00      	nop
}
 8004d76:	3708      	adds	r7, #8
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d7e:	bf00      	nop
 8004d80:	5443d6f4 	.word	0x5443d6f4
 8004d84:	400921fb 	.word	0x400921fb
 8004d88:	20000a04 	.word	0x20000a04
 8004d8c:	20000ae0 	.word	0x20000ae0
 8004d90:	2000097c 	.word	0x2000097c
 8004d94:	40668000 	.word	0x40668000

08004d98 <gui_Init>:
 */

#include "gui_multitool.h"

void gui_Init(void)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	af00      	add	r7, sp, #0

}
 8004d9c:	bf00      	nop
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bc80      	pop	{r7}
 8004da2:	4770      	bx	lr

08004da4 <gui_WelcomeScreen>:

void gui_WelcomeScreen(void)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	af00      	add	r7, sp, #0

	ssd1306_Fill(Black);
 8004da8:	2000      	movs	r0, #0
 8004daa:	f000 fb45 	bl	8005438 <ssd1306_Fill>
	ssd1306_SetCursor(1, 3);
 8004dae:	2103      	movs	r1, #3
 8004db0:	2001      	movs	r0, #1
 8004db2:	f000 fca7 	bl	8005704 <ssd1306_SetCursor>
	ssd1306_WriteString("Sistemas Embebidos", Font_7x10, White);
 8004db6:	4a14      	ldr	r2, [pc, #80]	; (8004e08 <gui_WelcomeScreen+0x64>)
 8004db8:	2301      	movs	r3, #1
 8004dba:	ca06      	ldmia	r2, {r1, r2}
 8004dbc:	4813      	ldr	r0, [pc, #76]	; (8004e0c <gui_WelcomeScreen+0x68>)
 8004dbe:	f000 fc7b 	bl	80056b8 <ssd1306_WriteString>
	ssd1306_SetCursor(1, 19);
 8004dc2:	2113      	movs	r1, #19
 8004dc4:	2001      	movs	r0, #1
 8004dc6:	f000 fc9d 	bl	8005704 <ssd1306_SetCursor>
	ssd1306_WriteString("Proyecto final:", Font_7x10, White);
 8004dca:	4a0f      	ldr	r2, [pc, #60]	; (8004e08 <gui_WelcomeScreen+0x64>)
 8004dcc:	2301      	movs	r3, #1
 8004dce:	ca06      	ldmia	r2, {r1, r2}
 8004dd0:	480f      	ldr	r0, [pc, #60]	; (8004e10 <gui_WelcomeScreen+0x6c>)
 8004dd2:	f000 fc71 	bl	80056b8 <ssd1306_WriteString>
	ssd1306_SetCursor(1, 35);
 8004dd6:	2123      	movs	r1, #35	; 0x23
 8004dd8:	2001      	movs	r0, #1
 8004dda:	f000 fc93 	bl	8005704 <ssd1306_SetCursor>
	ssd1306_WriteString("NIVEL DE BURBUJA", Font_7x10, White);
 8004dde:	4a0a      	ldr	r2, [pc, #40]	; (8004e08 <gui_WelcomeScreen+0x64>)
 8004de0:	2301      	movs	r3, #1
 8004de2:	ca06      	ldmia	r2, {r1, r2}
 8004de4:	480b      	ldr	r0, [pc, #44]	; (8004e14 <gui_WelcomeScreen+0x70>)
 8004de6:	f000 fc67 	bl	80056b8 <ssd1306_WriteString>
	ssd1306_SetCursor(1, 51);
 8004dea:	2133      	movs	r1, #51	; 0x33
 8004dec:	2001      	movs	r0, #1
 8004dee:	f000 fc89 	bl	8005704 <ssd1306_SetCursor>
	ssd1306_WriteString("Tomas Cornaglia", Font_7x10, White);
 8004df2:	4a05      	ldr	r2, [pc, #20]	; (8004e08 <gui_WelcomeScreen+0x64>)
 8004df4:	2301      	movs	r3, #1
 8004df6:	ca06      	ldmia	r2, {r1, r2}
 8004df8:	4807      	ldr	r0, [pc, #28]	; (8004e18 <gui_WelcomeScreen+0x74>)
 8004dfa:	f000 fc5d 	bl	80056b8 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8004dfe:	f000 fb3d 	bl	800547c <ssd1306_UpdateScreen>

	return;
 8004e02:	bf00      	nop

}
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	20000090 	.word	0x20000090
 8004e0c:	08009ea8 	.word	0x08009ea8
 8004e10:	08009ebc 	.word	0x08009ebc
 8004e14:	08009ecc 	.word	0x08009ecc
 8004e18:	08009ee0 	.word	0x08009ee0

08004e1c <gui_Bubble_1d>:

void gui_Bubble_1d(float angle)
{
 8004e1c:	b5b0      	push	{r4, r5, r7, lr}
 8004e1e:	b086      	sub	sp, #24
 8004e20:	af02      	add	r7, sp, #8
 8004e22:	6078      	str	r0, [r7, #4]

	static uint8_t radius = 9;
	static int16_t x0;
	const uint8_t y0 = 52;
 8004e24:	2334      	movs	r3, #52	; 0x34
 8004e26:	73fb      	strb	r3, [r7, #15]
	const uint8_t x1 = 10;
 8004e28:	230a      	movs	r3, #10
 8004e2a:	73bb      	strb	r3, [r7, #14]
	const uint8_t x2 = 120;
 8004e2c:	2378      	movs	r3, #120	; 0x78
 8004e2e:	737b      	strb	r3, [r7, #13]

	//angle = -170;

	//x0 = ((angle + 180)/360.0)*(x2 - x1 - 2*(radius + 1)) + (x1 + radius +1);
	//x0 = (angle/60.0)*45.0 + 65;
	x0 = (angle/60.0)*(x2 - (radius+1) - (x2 + x1)/2) + (x2 + x1)/2;
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f7fb faf9 	bl	8000428 <__aeabi_f2d>
 8004e36:	f04f 0200 	mov.w	r2, #0
 8004e3a:	4b57      	ldr	r3, [pc, #348]	; (8004f98 <gui_Bubble_1d+0x17c>)
 8004e3c:	f7fb fc76 	bl	800072c <__aeabi_ddiv>
 8004e40:	4602      	mov	r2, r0
 8004e42:	460b      	mov	r3, r1
 8004e44:	4614      	mov	r4, r2
 8004e46:	461d      	mov	r5, r3
 8004e48:	7b7a      	ldrb	r2, [r7, #13]
 8004e4a:	4b54      	ldr	r3, [pc, #336]	; (8004f9c <gui_Bubble_1d+0x180>)
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	3301      	adds	r3, #1
 8004e50:	1ad2      	subs	r2, r2, r3
 8004e52:	7b79      	ldrb	r1, [r7, #13]
 8004e54:	7bbb      	ldrb	r3, [r7, #14]
 8004e56:	440b      	add	r3, r1
 8004e58:	0fd9      	lsrs	r1, r3, #31
 8004e5a:	440b      	add	r3, r1
 8004e5c:	105b      	asrs	r3, r3, #1
 8004e5e:	425b      	negs	r3, r3
 8004e60:	4413      	add	r3, r2
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7fb face 	bl	8000404 <__aeabi_i2d>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	4620      	mov	r0, r4
 8004e6e:	4629      	mov	r1, r5
 8004e70:	f7fb fb32 	bl	80004d8 <__aeabi_dmul>
 8004e74:	4602      	mov	r2, r0
 8004e76:	460b      	mov	r3, r1
 8004e78:	4614      	mov	r4, r2
 8004e7a:	461d      	mov	r5, r3
 8004e7c:	7b7a      	ldrb	r2, [r7, #13]
 8004e7e:	7bbb      	ldrb	r3, [r7, #14]
 8004e80:	4413      	add	r3, r2
 8004e82:	0fda      	lsrs	r2, r3, #31
 8004e84:	4413      	add	r3, r2
 8004e86:	105b      	asrs	r3, r3, #1
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f7fb fabb 	bl	8000404 <__aeabi_i2d>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	460b      	mov	r3, r1
 8004e92:	4620      	mov	r0, r4
 8004e94:	4629      	mov	r1, r5
 8004e96:	f7fb f969 	bl	800016c <__adddf3>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	4610      	mov	r0, r2
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	f7fb fdc9 	bl	8000a38 <__aeabi_d2iz>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	b21a      	sxth	r2, r3
 8004eaa:	4b3d      	ldr	r3, [pc, #244]	; (8004fa0 <gui_Bubble_1d+0x184>)
 8004eac:	801a      	strh	r2, [r3, #0]

	if( (x0 - (radius +1)) <= x1 )
 8004eae:	4b3c      	ldr	r3, [pc, #240]	; (8004fa0 <gui_Bubble_1d+0x184>)
 8004eb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	4b39      	ldr	r3, [pc, #228]	; (8004f9c <gui_Bubble_1d+0x180>)
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	3301      	adds	r3, #1
 8004ebc:	1ad2      	subs	r2, r2, r3
 8004ebe:	7bbb      	ldrb	r3, [r7, #14]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	dc0b      	bgt.n	8004edc <gui_Bubble_1d+0xc0>
		x0 = x1 + (radius + 1);
 8004ec4:	7bbb      	ldrb	r3, [r7, #14]
 8004ec6:	b29a      	uxth	r2, r3
 8004ec8:	4b34      	ldr	r3, [pc, #208]	; (8004f9c <gui_Bubble_1d+0x180>)
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	4413      	add	r3, r2
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	b21a      	sxth	r2, r3
 8004ed8:	4b31      	ldr	r3, [pc, #196]	; (8004fa0 <gui_Bubble_1d+0x184>)
 8004eda:	801a      	strh	r2, [r3, #0]
										//	SON NECESARIOS ESTOS LÍMITES?
	if( (x0 + (radius +1)) >= x2 )
 8004edc:	4b30      	ldr	r3, [pc, #192]	; (8004fa0 <gui_Bubble_1d+0x184>)
 8004ede:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	4b2d      	ldr	r3, [pc, #180]	; (8004f9c <gui_Bubble_1d+0x180>)
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	3301      	adds	r3, #1
 8004eea:	441a      	add	r2, r3
 8004eec:	7b7b      	ldrb	r3, [r7, #13]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	db0b      	blt.n	8004f0a <gui_Bubble_1d+0xee>
		x0 = x2 - (radius + 1);
 8004ef2:	7b7b      	ldrb	r3, [r7, #13]
 8004ef4:	b29a      	uxth	r2, r3
 8004ef6:	4b29      	ldr	r3, [pc, #164]	; (8004f9c <gui_Bubble_1d+0x180>)
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	3b01      	subs	r3, #1
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	b21a      	sxth	r2, r3
 8004f06:	4b26      	ldr	r3, [pc, #152]	; (8004fa0 <gui_Bubble_1d+0x184>)
 8004f08:	801a      	strh	r2, [r3, #0]

	sprintf(MSG0, "%+4.1f", angle);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f7fb fa8c 	bl	8000428 <__aeabi_f2d>
 8004f10:	4602      	mov	r2, r0
 8004f12:	460b      	mov	r3, r1
 8004f14:	4923      	ldr	r1, [pc, #140]	; (8004fa4 <gui_Bubble_1d+0x188>)
 8004f16:	4824      	ldr	r0, [pc, #144]	; (8004fa8 <gui_Bubble_1d+0x18c>)
 8004f18:	f001 fa06 	bl	8006328 <siprintf>

	ssd1306_Fill(Black);
 8004f1c:	2000      	movs	r0, #0
 8004f1e:	f000 fa8b 	bl	8005438 <ssd1306_Fill>
	ssd1306_DrawRectangle(x1, y0 - (radius + 1), x2, y0 + (radius +1), White);
 8004f22:	4b1e      	ldr	r3, [pc, #120]	; (8004f9c <gui_Bubble_1d+0x180>)
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	7bfa      	ldrb	r2, [r7, #15]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	b2d9      	uxtb	r1, r3
 8004f30:	4b1a      	ldr	r3, [pc, #104]	; (8004f9c <gui_Bubble_1d+0x180>)
 8004f32:	781a      	ldrb	r2, [r3, #0]
 8004f34:	7bfb      	ldrb	r3, [r7, #15]
 8004f36:	4413      	add	r3, r2
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	7b7a      	ldrb	r2, [r7, #13]
 8004f40:	7bb8      	ldrb	r0, [r7, #14]
 8004f42:	2401      	movs	r4, #1
 8004f44:	9400      	str	r4, [sp, #0]
 8004f46:	f000 fce7 	bl	8005918 <ssd1306_DrawRectangle>
	ssd1306_DrawCircle(x0, y0, radius, White);
 8004f4a:	4b15      	ldr	r3, [pc, #84]	; (8004fa0 <gui_Bubble_1d+0x184>)
 8004f4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f50:	b2d8      	uxtb	r0, r3
 8004f52:	4b12      	ldr	r3, [pc, #72]	; (8004f9c <gui_Bubble_1d+0x180>)
 8004f54:	781a      	ldrb	r2, [r3, #0]
 8004f56:	7bf9      	ldrb	r1, [r7, #15]
 8004f58:	2301      	movs	r3, #1
 8004f5a:	f000 fc57 	bl	800580c <ssd1306_DrawCircle>
	ssd1306_DrawCircle(x0+3, y0-3, 2, White);
 8004f5e:	4b10      	ldr	r3, [pc, #64]	; (8004fa0 <gui_Bubble_1d+0x184>)
 8004f60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	3303      	adds	r3, #3
 8004f68:	b2d8      	uxtb	r0, r3
 8004f6a:	7bfb      	ldrb	r3, [r7, #15]
 8004f6c:	3b03      	subs	r3, #3
 8004f6e:	b2d9      	uxtb	r1, r3
 8004f70:	2301      	movs	r3, #1
 8004f72:	2202      	movs	r2, #2
 8004f74:	f000 fc4a 	bl	800580c <ssd1306_DrawCircle>
	ssd1306_SetCursor(26, 8);
 8004f78:	2108      	movs	r1, #8
 8004f7a:	201a      	movs	r0, #26
 8004f7c:	f000 fbc2 	bl	8005704 <ssd1306_SetCursor>
	ssd1306_WriteString(MSG0, Font_16x26, White);
 8004f80:	4a0a      	ldr	r2, [pc, #40]	; (8004fac <gui_Bubble_1d+0x190>)
 8004f82:	2301      	movs	r3, #1
 8004f84:	ca06      	ldmia	r2, {r1, r2}
 8004f86:	4808      	ldr	r0, [pc, #32]	; (8004fa8 <gui_Bubble_1d+0x18c>)
 8004f88:	f000 fb96 	bl	80056b8 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8004f8c:	f000 fa76 	bl	800547c <ssd1306_UpdateScreen>

	return;
 8004f90:	bf00      	nop

}
 8004f92:	3710      	adds	r7, #16
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bdb0      	pop	{r4, r5, r7, pc}
 8004f98:	404e0000 	.word	0x404e0000
 8004f9c:	2000008c 	.word	0x2000008c
 8004fa0:	200002cc 	.word	0x200002cc
 8004fa4:	08009ef0 	.word	0x08009ef0
 8004fa8:	200006f0 	.word	0x200006f0
 8004fac:	20000098 	.word	0x20000098

08004fb0 <gui_Bubble_2d>:

void gui_Bubble_2d(float angle_xz, float angle_yz)
{
 8004fb0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004fb4:	b088      	sub	sp, #32
 8004fb6:	af02      	add	r7, sp, #8
 8004fb8:	6078      	str	r0, [r7, #4]
 8004fba:	6039      	str	r1, [r7, #0]

	sprintf(MSG0, "X: %+.1f", angle_xz);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f7fb fa33 	bl	8000428 <__aeabi_f2d>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	4976      	ldr	r1, [pc, #472]	; (80051a0 <gui_Bubble_2d+0x1f0>)
 8004fc8:	4876      	ldr	r0, [pc, #472]	; (80051a4 <gui_Bubble_2d+0x1f4>)
 8004fca:	f001 f9ad 	bl	8006328 <siprintf>
	sprintf(MSG1, "Y: %+.1f", angle_yz);
 8004fce:	6838      	ldr	r0, [r7, #0]
 8004fd0:	f7fb fa2a 	bl	8000428 <__aeabi_f2d>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	4973      	ldr	r1, [pc, #460]	; (80051a8 <gui_Bubble_2d+0x1f8>)
 8004fda:	4874      	ldr	r0, [pc, #464]	; (80051ac <gui_Bubble_2d+0x1fc>)
 8004fdc:	f001 f9a4 	bl	8006328 <siprintf>

	uint8_t x0 = 95;
 8004fe0:	235f      	movs	r3, #95	; 0x5f
 8004fe2:	74fb      	strb	r3, [r7, #19]
	uint8_t y0 = 32;
 8004fe4:	2320      	movs	r3, #32
 8004fe6:	74bb      	strb	r3, [r7, #18]

	float radius;
	float theta;

	//radius = sqrt(pow(angle_yz, 2) + pow(angle_xz, 2));
	radius = sqrt(angle_yz*angle_yz + angle_xz*angle_xz);
 8004fe8:	6839      	ldr	r1, [r7, #0]
 8004fea:	6838      	ldr	r0, [r7, #0]
 8004fec:	f7fb feca 	bl	8000d84 <__aeabi_fmul>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	461c      	mov	r4, r3
 8004ff4:	6879      	ldr	r1, [r7, #4]
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f7fb fec4 	bl	8000d84 <__aeabi_fmul>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	4619      	mov	r1, r3
 8005000:	4620      	mov	r0, r4
 8005002:	f7fb fdb7 	bl	8000b74 <__addsf3>
 8005006:	4603      	mov	r3, r0
 8005008:	4618      	mov	r0, r3
 800500a:	f7fb fa0d 	bl	8000428 <__aeabi_f2d>
 800500e:	4602      	mov	r2, r0
 8005010:	460b      	mov	r3, r1
 8005012:	4610      	mov	r0, r2
 8005014:	4619      	mov	r1, r3
 8005016:	f003 fc3d 	bl	8008894 <sqrt>
 800501a:	4602      	mov	r2, r0
 800501c:	460b      	mov	r3, r1
 800501e:	4610      	mov	r0, r2
 8005020:	4619      	mov	r1, r3
 8005022:	f7fb fd51 	bl	8000ac8 <__aeabi_d2f>
 8005026:	4603      	mov	r3, r0
 8005028:	617b      	str	r3, [r7, #20]

	if(radius > 26)
 800502a:	4961      	ldr	r1, [pc, #388]	; (80051b0 <gui_Bubble_2d+0x200>)
 800502c:	6978      	ldr	r0, [r7, #20]
 800502e:	f7fc f865 	bl	80010fc <__aeabi_fcmpgt>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d001      	beq.n	800503c <gui_Bubble_2d+0x8c>
		radius = 26;
 8005038:	4b5d      	ldr	r3, [pc, #372]	; (80051b0 <gui_Bubble_2d+0x200>)
 800503a:	617b      	str	r3, [r7, #20]

	theta = atan2(angle_xz, angle_yz);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f7fb f9f3 	bl	8000428 <__aeabi_f2d>
 8005042:	4604      	mov	r4, r0
 8005044:	460d      	mov	r5, r1
 8005046:	6838      	ldr	r0, [r7, #0]
 8005048:	f7fb f9ee 	bl	8000428 <__aeabi_f2d>
 800504c:	4602      	mov	r2, r0
 800504e:	460b      	mov	r3, r1
 8005050:	4620      	mov	r0, r4
 8005052:	4629      	mov	r1, r5
 8005054:	f003 fc1c 	bl	8008890 <atan2>
 8005058:	4602      	mov	r2, r0
 800505a:	460b      	mov	r3, r1
 800505c:	4610      	mov	r0, r2
 800505e:	4619      	mov	r1, r3
 8005060:	f7fb fd32 	bl	8000ac8 <__aeabi_d2f>
 8005064:	4603      	mov	r3, r0
 8005066:	60fb      	str	r3, [r7, #12]

	x0 += radius * sin(theta);
 8005068:	7cfb      	ldrb	r3, [r7, #19]
 800506a:	4618      	mov	r0, r3
 800506c:	f7fb f9ca 	bl	8000404 <__aeabi_i2d>
 8005070:	4604      	mov	r4, r0
 8005072:	460d      	mov	r5, r1
 8005074:	6978      	ldr	r0, [r7, #20]
 8005076:	f7fb f9d7 	bl	8000428 <__aeabi_f2d>
 800507a:	4680      	mov	r8, r0
 800507c:	4689      	mov	r9, r1
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	f7fb f9d2 	bl	8000428 <__aeabi_f2d>
 8005084:	4602      	mov	r2, r0
 8005086:	460b      	mov	r3, r1
 8005088:	4610      	mov	r0, r2
 800508a:	4619      	mov	r1, r3
 800508c:	f003 fbba 	bl	8008804 <sin>
 8005090:	4602      	mov	r2, r0
 8005092:	460b      	mov	r3, r1
 8005094:	4640      	mov	r0, r8
 8005096:	4649      	mov	r1, r9
 8005098:	f7fb fa1e 	bl	80004d8 <__aeabi_dmul>
 800509c:	4602      	mov	r2, r0
 800509e:	460b      	mov	r3, r1
 80050a0:	4620      	mov	r0, r4
 80050a2:	4629      	mov	r1, r5
 80050a4:	f7fb f862 	bl	800016c <__adddf3>
 80050a8:	4602      	mov	r2, r0
 80050aa:	460b      	mov	r3, r1
 80050ac:	4610      	mov	r0, r2
 80050ae:	4619      	mov	r1, r3
 80050b0:	f7fb fcea 	bl	8000a88 <__aeabi_d2uiz>
 80050b4:	4603      	mov	r3, r0
 80050b6:	74fb      	strb	r3, [r7, #19]
	y0 -= radius * cos(theta);
 80050b8:	7cbb      	ldrb	r3, [r7, #18]
 80050ba:	4618      	mov	r0, r3
 80050bc:	f7fb f9a2 	bl	8000404 <__aeabi_i2d>
 80050c0:	4604      	mov	r4, r0
 80050c2:	460d      	mov	r5, r1
 80050c4:	6978      	ldr	r0, [r7, #20]
 80050c6:	f7fb f9af 	bl	8000428 <__aeabi_f2d>
 80050ca:	4680      	mov	r8, r0
 80050cc:	4689      	mov	r9, r1
 80050ce:	68f8      	ldr	r0, [r7, #12]
 80050d0:	f7fb f9aa 	bl	8000428 <__aeabi_f2d>
 80050d4:	4602      	mov	r2, r0
 80050d6:	460b      	mov	r3, r1
 80050d8:	4610      	mov	r0, r2
 80050da:	4619      	mov	r1, r3
 80050dc:	f003 fb50 	bl	8008780 <cos>
 80050e0:	4602      	mov	r2, r0
 80050e2:	460b      	mov	r3, r1
 80050e4:	4640      	mov	r0, r8
 80050e6:	4649      	mov	r1, r9
 80050e8:	f7fb f9f6 	bl	80004d8 <__aeabi_dmul>
 80050ec:	4602      	mov	r2, r0
 80050ee:	460b      	mov	r3, r1
 80050f0:	4620      	mov	r0, r4
 80050f2:	4629      	mov	r1, r5
 80050f4:	f7fb f838 	bl	8000168 <__aeabi_dsub>
 80050f8:	4602      	mov	r2, r0
 80050fa:	460b      	mov	r3, r1
 80050fc:	4610      	mov	r0, r2
 80050fe:	4619      	mov	r1, r3
 8005100:	f7fb fcc2 	bl	8000a88 <__aeabi_d2uiz>
 8005104:	4603      	mov	r3, r0
 8005106:	74bb      	strb	r3, [r7, #18]

	//	FIN CONVERSION A COORDENADAS POLARES

	ssd1306_Fill(Black);
 8005108:	2000      	movs	r0, #0
 800510a:	f000 f995 	bl	8005438 <ssd1306_Fill>
	ssd1306_DrawCircle(95, 32, 31, White);
 800510e:	2301      	movs	r3, #1
 8005110:	221f      	movs	r2, #31
 8005112:	2120      	movs	r1, #32
 8005114:	205f      	movs	r0, #95	; 0x5f
 8005116:	f000 fb79 	bl	800580c <ssd1306_DrawCircle>
	//ssd1306_DrawRectangle(63, 1, 126, 63, COLOR);	//	Descomentar en caso de no usar coordenadas polares
	ssd1306_Line(64, 32, 126, 32, White);
 800511a:	2301      	movs	r3, #1
 800511c:	9300      	str	r3, [sp, #0]
 800511e:	2320      	movs	r3, #32
 8005120:	227e      	movs	r2, #126	; 0x7e
 8005122:	2120      	movs	r1, #32
 8005124:	2040      	movs	r0, #64	; 0x40
 8005126:	f000 fb05 	bl	8005734 <ssd1306_Line>
	ssd1306_Line(95, 1, 95, 63, White);
 800512a:	2301      	movs	r3, #1
 800512c:	9300      	str	r3, [sp, #0]
 800512e:	233f      	movs	r3, #63	; 0x3f
 8005130:	225f      	movs	r2, #95	; 0x5f
 8005132:	2101      	movs	r1, #1
 8005134:	205f      	movs	r0, #95	; 0x5f
 8005136:	f000 fafd 	bl	8005734 <ssd1306_Line>
	ssd1306_DrawRectangle(89, 26, 101, 38, White);
 800513a:	2301      	movs	r3, #1
 800513c:	9300      	str	r3, [sp, #0]
 800513e:	2326      	movs	r3, #38	; 0x26
 8005140:	2265      	movs	r2, #101	; 0x65
 8005142:	211a      	movs	r1, #26
 8005144:	2059      	movs	r0, #89	; 0x59
 8005146:	f000 fbe7 	bl	8005918 <ssd1306_DrawRectangle>
	ssd1306_DrawCircle(x0, y0, 5, White);
 800514a:	7cb9      	ldrb	r1, [r7, #18]
 800514c:	7cf8      	ldrb	r0, [r7, #19]
 800514e:	2301      	movs	r3, #1
 8005150:	2205      	movs	r2, #5
 8005152:	f000 fb5b 	bl	800580c <ssd1306_DrawCircle>
	ssd1306_DrawCircle(x0+2, y0-2, 1, White);
 8005156:	7cfb      	ldrb	r3, [r7, #19]
 8005158:	3302      	adds	r3, #2
 800515a:	b2d8      	uxtb	r0, r3
 800515c:	7cbb      	ldrb	r3, [r7, #18]
 800515e:	3b02      	subs	r3, #2
 8005160:	b2d9      	uxtb	r1, r3
 8005162:	2301      	movs	r3, #1
 8005164:	2201      	movs	r2, #1
 8005166:	f000 fb51 	bl	800580c <ssd1306_DrawCircle>
	ssd1306_SetCursor(1, 12);
 800516a:	210c      	movs	r1, #12
 800516c:	2001      	movs	r0, #1
 800516e:	f000 fac9 	bl	8005704 <ssd1306_SetCursor>
	ssd1306_WriteString(MSG0, Font_7x10, White);
 8005172:	4a10      	ldr	r2, [pc, #64]	; (80051b4 <gui_Bubble_2d+0x204>)
 8005174:	2301      	movs	r3, #1
 8005176:	ca06      	ldmia	r2, {r1, r2}
 8005178:	480a      	ldr	r0, [pc, #40]	; (80051a4 <gui_Bubble_2d+0x1f4>)
 800517a:	f000 fa9d 	bl	80056b8 <ssd1306_WriteString>
	ssd1306_SetCursor(1, 42);
 800517e:	212a      	movs	r1, #42	; 0x2a
 8005180:	2001      	movs	r0, #1
 8005182:	f000 fabf 	bl	8005704 <ssd1306_SetCursor>
	ssd1306_WriteString(MSG1, Font_7x10, White);
 8005186:	4a0b      	ldr	r2, [pc, #44]	; (80051b4 <gui_Bubble_2d+0x204>)
 8005188:	2301      	movs	r3, #1
 800518a:	ca06      	ldmia	r2, {r1, r2}
 800518c:	4807      	ldr	r0, [pc, #28]	; (80051ac <gui_Bubble_2d+0x1fc>)
 800518e:	f000 fa93 	bl	80056b8 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8005192:	f000 f973 	bl	800547c <ssd1306_UpdateScreen>

	return;
 8005196:	bf00      	nop

}
 8005198:	3718      	adds	r7, #24
 800519a:	46bd      	mov	sp, r7
 800519c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80051a0:	08009ef8 	.word	0x08009ef8
 80051a4:	200006f0 	.word	0x200006f0
 80051a8:	08009f04 	.word	0x08009f04
 80051ac:	20000ad4 	.word	0x20000ad4
 80051b0:	41d00000 	.word	0x41d00000
 80051b4:	20000090 	.word	0x20000090

080051b8 <mpu6050_Init>:
#include "mpu6050.h"

RAW_DATA raw;

void mpu6050_Init (MPU6050 *mpu6050)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b086      	sub	sp, #24
 80051bc:	af04      	add	r7, sp, #16
 80051be:	6078      	str	r0, [r7, #4]
	mpu6050->accel_x = 0;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f04f 0200 	mov.w	r2, #0
 80051c6:	601a      	str	r2, [r3, #0]
	mpu6050->accel_y = 0;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f04f 0200 	mov.w	r2, #0
 80051ce:	605a      	str	r2, [r3, #4]
	mpu6050->accel_z = 0;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f04f 0200 	mov.w	r2, #0
 80051d6:	609a      	str	r2, [r3, #8]

	mpu6050->temp = 0;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f04f 0200 	mov.w	r2, #0
 80051de:	60da      	str	r2, [r3, #12]

	mpu6050->gyro_x = 0;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f04f 0200 	mov.w	r2, #0
 80051e6:	611a      	str	r2, [r3, #16]
	mpu6050->gyro_y = 0;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f04f 0200 	mov.w	r2, #0
 80051ee:	615a      	str	r2, [r3, #20]
	mpu6050->gyro_z = 0;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f04f 0200 	mov.w	r2, #0
 80051f6:	619a      	str	r2, [r3, #24]

	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDRESS | 0, PWRMNGT1_REG, 1, 0x00, 1, 100);
 80051f8:	2364      	movs	r3, #100	; 0x64
 80051fa:	9302      	str	r3, [sp, #8]
 80051fc:	2301      	movs	r3, #1
 80051fe:	9301      	str	r3, [sp, #4]
 8005200:	2300      	movs	r3, #0
 8005202:	9300      	str	r3, [sp, #0]
 8005204:	2301      	movs	r3, #1
 8005206:	226b      	movs	r2, #107	; 0x6b
 8005208:	21d0      	movs	r1, #208	; 0xd0
 800520a:	4803      	ldr	r0, [pc, #12]	; (8005218 <mpu6050_Init+0x60>)
 800520c:	f7fd fbf6 	bl	80029fc <HAL_I2C_Mem_Write>

	return;
 8005210:	bf00      	nop
}
 8005212:	3708      	adds	r7, #8
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}
 8005218:	20000784 	.word	0x20000784

0800521c <mpu6050_Get_Accel>:

void mpu6050_Get_Accel(MPU6050 *mpu6050)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b086      	sub	sp, #24
 8005220:	af04      	add	r7, sp, #16
 8005222:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(&MPU6050_I2C_PORT, MPU6050_ADDRESS | 0, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8005224:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005228:	9302      	str	r3, [sp, #8]
 800522a:	2306      	movs	r3, #6
 800522c:	9301      	str	r3, [sp, #4]
 800522e:	4b2e      	ldr	r3, [pc, #184]	; (80052e8 <mpu6050_Get_Accel+0xcc>)
 8005230:	9300      	str	r3, [sp, #0]
 8005232:	2301      	movs	r3, #1
 8005234:	223b      	movs	r2, #59	; 0x3b
 8005236:	21d0      	movs	r1, #208	; 0xd0
 8005238:	482c      	ldr	r0, [pc, #176]	; (80052ec <mpu6050_Get_Accel+0xd0>)
 800523a:	f7fd fcd9 	bl	8002bf0 <HAL_I2C_Mem_Read>


	raw.accel_x = (Rec_Data[0] << 8 | Rec_Data [1]);
 800523e:	4b2a      	ldr	r3, [pc, #168]	; (80052e8 <mpu6050_Get_Accel+0xcc>)
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	021b      	lsls	r3, r3, #8
 8005244:	b21a      	sxth	r2, r3
 8005246:	4b28      	ldr	r3, [pc, #160]	; (80052e8 <mpu6050_Get_Accel+0xcc>)
 8005248:	785b      	ldrb	r3, [r3, #1]
 800524a:	b21b      	sxth	r3, r3
 800524c:	4313      	orrs	r3, r2
 800524e:	b21a      	sxth	r2, r3
 8005250:	4b27      	ldr	r3, [pc, #156]	; (80052f0 <mpu6050_Get_Accel+0xd4>)
 8005252:	801a      	strh	r2, [r3, #0]
	raw.accel_y = (Rec_Data[2] << 8 | Rec_Data [3]);
 8005254:	4b24      	ldr	r3, [pc, #144]	; (80052e8 <mpu6050_Get_Accel+0xcc>)
 8005256:	789b      	ldrb	r3, [r3, #2]
 8005258:	021b      	lsls	r3, r3, #8
 800525a:	b21a      	sxth	r2, r3
 800525c:	4b22      	ldr	r3, [pc, #136]	; (80052e8 <mpu6050_Get_Accel+0xcc>)
 800525e:	78db      	ldrb	r3, [r3, #3]
 8005260:	b21b      	sxth	r3, r3
 8005262:	4313      	orrs	r3, r2
 8005264:	b21a      	sxth	r2, r3
 8005266:	4b22      	ldr	r3, [pc, #136]	; (80052f0 <mpu6050_Get_Accel+0xd4>)
 8005268:	805a      	strh	r2, [r3, #2]
	raw.accel_z = (Rec_Data[4] << 8 | Rec_Data [5]);
 800526a:	4b1f      	ldr	r3, [pc, #124]	; (80052e8 <mpu6050_Get_Accel+0xcc>)
 800526c:	791b      	ldrb	r3, [r3, #4]
 800526e:	021b      	lsls	r3, r3, #8
 8005270:	b21a      	sxth	r2, r3
 8005272:	4b1d      	ldr	r3, [pc, #116]	; (80052e8 <mpu6050_Get_Accel+0xcc>)
 8005274:	795b      	ldrb	r3, [r3, #5]
 8005276:	b21b      	sxth	r3, r3
 8005278:	4313      	orrs	r3, r2
 800527a:	b21a      	sxth	r2, r3
 800527c:	4b1c      	ldr	r3, [pc, #112]	; (80052f0 <mpu6050_Get_Accel+0xd4>)
 800527e:	809a      	strh	r2, [r3, #4]

	mpu6050->accel_x = (float)raw.accel_x / 16384.0;
 8005280:	4b1b      	ldr	r3, [pc, #108]	; (80052f0 <mpu6050_Get_Accel+0xd4>)
 8005282:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005286:	4618      	mov	r0, r3
 8005288:	f7fb fd28 	bl	8000cdc <__aeabi_i2f>
 800528c:	4603      	mov	r3, r0
 800528e:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8005292:	4618      	mov	r0, r3
 8005294:	f7fb fe2a 	bl	8000eec <__aeabi_fdiv>
 8005298:	4603      	mov	r3, r0
 800529a:	461a      	mov	r2, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	601a      	str	r2, [r3, #0]
	mpu6050->accel_y = (float)raw.accel_y / 16384.0;
 80052a0:	4b13      	ldr	r3, [pc, #76]	; (80052f0 <mpu6050_Get_Accel+0xd4>)
 80052a2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80052a6:	4618      	mov	r0, r3
 80052a8:	f7fb fd18 	bl	8000cdc <__aeabi_i2f>
 80052ac:	4603      	mov	r3, r0
 80052ae:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7fb fe1a 	bl	8000eec <__aeabi_fdiv>
 80052b8:	4603      	mov	r3, r0
 80052ba:	461a      	mov	r2, r3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	605a      	str	r2, [r3, #4]
	mpu6050->accel_z = (float)raw.accel_z / 16384.0;
 80052c0:	4b0b      	ldr	r3, [pc, #44]	; (80052f0 <mpu6050_Get_Accel+0xd4>)
 80052c2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7fb fd08 	bl	8000cdc <__aeabi_i2f>
 80052cc:	4603      	mov	r3, r0
 80052ce:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80052d2:	4618      	mov	r0, r3
 80052d4:	f7fb fe0a 	bl	8000eec <__aeabi_fdiv>
 80052d8:	4603      	mov	r3, r0
 80052da:	461a      	mov	r2, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	609a      	str	r2, [r3, #8]

	return;
 80052e0:	bf00      	nop
}
 80052e2:	3708      	adds	r7, #8
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	200008b4 	.word	0x200008b4
 80052ec:	20000784 	.word	0x20000784
 80052f0:	20000bf4 	.word	0x20000bf4

080052f4 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80052f4:	b480      	push	{r7}
 80052f6:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80052f8:	bf00      	nop
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bc80      	pop	{r7}
 80052fe:	4770      	bx	lr

08005300 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8005300:	b580      	push	{r7, lr}
 8005302:	b086      	sub	sp, #24
 8005304:	af04      	add	r7, sp, #16
 8005306:	4603      	mov	r3, r0
 8005308:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800530a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800530e:	9302      	str	r3, [sp, #8]
 8005310:	2301      	movs	r3, #1
 8005312:	9301      	str	r3, [sp, #4]
 8005314:	1dfb      	adds	r3, r7, #7
 8005316:	9300      	str	r3, [sp, #0]
 8005318:	2301      	movs	r3, #1
 800531a:	2200      	movs	r2, #0
 800531c:	2178      	movs	r1, #120	; 0x78
 800531e:	4803      	ldr	r0, [pc, #12]	; (800532c <ssd1306_WriteCommand+0x2c>)
 8005320:	f7fd fb6c 	bl	80029fc <HAL_I2C_Mem_Write>
}
 8005324:	bf00      	nop
 8005326:	3708      	adds	r7, #8
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}
 800532c:	20000860 	.word	0x20000860

08005330 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8005330:	b580      	push	{r7, lr}
 8005332:	b086      	sub	sp, #24
 8005334:	af04      	add	r7, sp, #16
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	b29b      	uxth	r3, r3
 800533e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005342:	9202      	str	r2, [sp, #8]
 8005344:	9301      	str	r3, [sp, #4]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	9300      	str	r3, [sp, #0]
 800534a:	2301      	movs	r3, #1
 800534c:	2240      	movs	r2, #64	; 0x40
 800534e:	2178      	movs	r1, #120	; 0x78
 8005350:	4803      	ldr	r0, [pc, #12]	; (8005360 <ssd1306_WriteData+0x30>)
 8005352:	f7fd fb53 	bl	80029fc <HAL_I2C_Mem_Write>
}
 8005356:	bf00      	nop
 8005358:	3708      	adds	r7, #8
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	20000860 	.word	0x20000860

08005364 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8005364:	b580      	push	{r7, lr}
 8005366:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8005368:	f7ff ffc4 	bl	80052f4 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800536c:	2064      	movs	r0, #100	; 0x64
 800536e:	f7fc fd29 	bl	8001dc4 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8005372:	2000      	movs	r0, #0
 8005374:	f000 fb1a 	bl	80059ac <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8005378:	2020      	movs	r0, #32
 800537a:	f7ff ffc1 	bl	8005300 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800537e:	2000      	movs	r0, #0
 8005380:	f7ff ffbe 	bl	8005300 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8005384:	20b0      	movs	r0, #176	; 0xb0
 8005386:	f7ff ffbb 	bl	8005300 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800538a:	20c8      	movs	r0, #200	; 0xc8
 800538c:	f7ff ffb8 	bl	8005300 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8005390:	2000      	movs	r0, #0
 8005392:	f7ff ffb5 	bl	8005300 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8005396:	2010      	movs	r0, #16
 8005398:	f7ff ffb2 	bl	8005300 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800539c:	2040      	movs	r0, #64	; 0x40
 800539e:	f7ff ffaf 	bl	8005300 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80053a2:	20ff      	movs	r0, #255	; 0xff
 80053a4:	f000 faef 	bl	8005986 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80053a8:	20a1      	movs	r0, #161	; 0xa1
 80053aa:	f7ff ffa9 	bl	8005300 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80053ae:	20a6      	movs	r0, #166	; 0xa6
 80053b0:	f7ff ffa6 	bl	8005300 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80053b4:	20a8      	movs	r0, #168	; 0xa8
 80053b6:	f7ff ffa3 	bl	8005300 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80053ba:	203f      	movs	r0, #63	; 0x3f
 80053bc:	f7ff ffa0 	bl	8005300 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80053c0:	20a4      	movs	r0, #164	; 0xa4
 80053c2:	f7ff ff9d 	bl	8005300 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80053c6:	20d3      	movs	r0, #211	; 0xd3
 80053c8:	f7ff ff9a 	bl	8005300 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80053cc:	2000      	movs	r0, #0
 80053ce:	f7ff ff97 	bl	8005300 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80053d2:	20d5      	movs	r0, #213	; 0xd5
 80053d4:	f7ff ff94 	bl	8005300 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80053d8:	20f0      	movs	r0, #240	; 0xf0
 80053da:	f7ff ff91 	bl	8005300 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80053de:	20d9      	movs	r0, #217	; 0xd9
 80053e0:	f7ff ff8e 	bl	8005300 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80053e4:	2022      	movs	r0, #34	; 0x22
 80053e6:	f7ff ff8b 	bl	8005300 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80053ea:	20da      	movs	r0, #218	; 0xda
 80053ec:	f7ff ff88 	bl	8005300 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80053f0:	2012      	movs	r0, #18
 80053f2:	f7ff ff85 	bl	8005300 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80053f6:	20db      	movs	r0, #219	; 0xdb
 80053f8:	f7ff ff82 	bl	8005300 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80053fc:	2020      	movs	r0, #32
 80053fe:	f7ff ff7f 	bl	8005300 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8005402:	208d      	movs	r0, #141	; 0x8d
 8005404:	f7ff ff7c 	bl	8005300 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8005408:	2014      	movs	r0, #20
 800540a:	f7ff ff79 	bl	8005300 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800540e:	2001      	movs	r0, #1
 8005410:	f000 facc 	bl	80059ac <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8005414:	2000      	movs	r0, #0
 8005416:	f000 f80f 	bl	8005438 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800541a:	f000 f82f 	bl	800547c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800541e:	4b05      	ldr	r3, [pc, #20]	; (8005434 <ssd1306_Init+0xd0>)
 8005420:	2200      	movs	r2, #0
 8005422:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8005424:	4b03      	ldr	r3, [pc, #12]	; (8005434 <ssd1306_Init+0xd0>)
 8005426:	2200      	movs	r2, #0
 8005428:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800542a:	4b02      	ldr	r3, [pc, #8]	; (8005434 <ssd1306_Init+0xd0>)
 800542c:	2201      	movs	r2, #1
 800542e:	715a      	strb	r2, [r3, #5]
}
 8005430:	bf00      	nop
 8005432:	bd80      	pop	{r7, pc}
 8005434:	200006e0 	.word	0x200006e0

08005438 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	4603      	mov	r3, r0
 8005440:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8005442:	2300      	movs	r3, #0
 8005444:	60fb      	str	r3, [r7, #12]
 8005446:	e00d      	b.n	8005464 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8005448:	79fb      	ldrb	r3, [r7, #7]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d101      	bne.n	8005452 <ssd1306_Fill+0x1a>
 800544e:	2100      	movs	r1, #0
 8005450:	e000      	b.n	8005454 <ssd1306_Fill+0x1c>
 8005452:	21ff      	movs	r1, #255	; 0xff
 8005454:	4a08      	ldr	r2, [pc, #32]	; (8005478 <ssd1306_Fill+0x40>)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	4413      	add	r3, r2
 800545a:	460a      	mov	r2, r1
 800545c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	3301      	adds	r3, #1
 8005462:	60fb      	str	r3, [r7, #12]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 800546a:	d3ed      	bcc.n	8005448 <ssd1306_Fill+0x10>
    }
}
 800546c:	bf00      	nop
 800546e:	bf00      	nop
 8005470:	3714      	adds	r7, #20
 8005472:	46bd      	mov	sp, r7
 8005474:	bc80      	pop	{r7}
 8005476:	4770      	bx	lr
 8005478:	200002d0 	.word	0x200002d0

0800547c <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 800547c:	b580      	push	{r7, lr}
 800547e:	b082      	sub	sp, #8
 8005480:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8005482:	2300      	movs	r3, #0
 8005484:	71fb      	strb	r3, [r7, #7]
 8005486:	e01a      	b.n	80054be <ssd1306_UpdateScreen+0x42>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8005488:	79fb      	ldrb	r3, [r7, #7]
 800548a:	3b50      	subs	r3, #80	; 0x50
 800548c:	b2db      	uxtb	r3, r3
 800548e:	4618      	mov	r0, r3
 8005490:	f7ff ff36 	bl	8005300 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8005494:	2000      	movs	r0, #0
 8005496:	f7ff ff33 	bl	8005300 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 800549a:	2010      	movs	r0, #16
 800549c:	f7ff ff30 	bl	8005300 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80054a0:	79fa      	ldrb	r2, [r7, #7]
 80054a2:	4613      	mov	r3, r2
 80054a4:	019b      	lsls	r3, r3, #6
 80054a6:	4413      	add	r3, r2
 80054a8:	005b      	lsls	r3, r3, #1
 80054aa:	461a      	mov	r2, r3
 80054ac:	4b08      	ldr	r3, [pc, #32]	; (80054d0 <ssd1306_UpdateScreen+0x54>)
 80054ae:	4413      	add	r3, r2
 80054b0:	2182      	movs	r1, #130	; 0x82
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7ff ff3c 	bl	8005330 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80054b8:	79fb      	ldrb	r3, [r7, #7]
 80054ba:	3301      	adds	r3, #1
 80054bc:	71fb      	strb	r3, [r7, #7]
 80054be:	79fb      	ldrb	r3, [r7, #7]
 80054c0:	2b07      	cmp	r3, #7
 80054c2:	d9e1      	bls.n	8005488 <ssd1306_UpdateScreen+0xc>
    }
}
 80054c4:	bf00      	nop
 80054c6:	bf00      	nop
 80054c8:	3708      	adds	r7, #8
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	200002d0 	.word	0x200002d0

080054d4 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80054d4:	b490      	push	{r4, r7}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	4603      	mov	r3, r0
 80054dc:	71fb      	strb	r3, [r7, #7]
 80054de:	460b      	mov	r3, r1
 80054e0:	71bb      	strb	r3, [r7, #6]
 80054e2:	4613      	mov	r3, r2
 80054e4:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80054e6:	79fb      	ldrb	r3, [r7, #7]
 80054e8:	2b81      	cmp	r3, #129	; 0x81
 80054ea:	d854      	bhi.n	8005596 <ssd1306_DrawPixel+0xc2>
 80054ec:	79bb      	ldrb	r3, [r7, #6]
 80054ee:	2b3f      	cmp	r3, #63	; 0x3f
 80054f0:	d851      	bhi.n	8005596 <ssd1306_DrawPixel+0xc2>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 80054f2:	4b2b      	ldr	r3, [pc, #172]	; (80055a0 <ssd1306_DrawPixel+0xcc>)
 80054f4:	791b      	ldrb	r3, [r3, #4]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d006      	beq.n	8005508 <ssd1306_DrawPixel+0x34>
        color = (SSD1306_COLOR)!color;
 80054fa:	797b      	ldrb	r3, [r7, #5]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	bf0c      	ite	eq
 8005500:	2301      	moveq	r3, #1
 8005502:	2300      	movne	r3, #0
 8005504:	b2db      	uxtb	r3, r3
 8005506:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 8005508:	797b      	ldrb	r3, [r7, #5]
 800550a:	2b01      	cmp	r3, #1
 800550c:	d120      	bne.n	8005550 <ssd1306_DrawPixel+0x7c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800550e:	79fa      	ldrb	r2, [r7, #7]
 8005510:	79bb      	ldrb	r3, [r7, #6]
 8005512:	08db      	lsrs	r3, r3, #3
 8005514:	b2d8      	uxtb	r0, r3
 8005516:	4601      	mov	r1, r0
 8005518:	460b      	mov	r3, r1
 800551a:	019b      	lsls	r3, r3, #6
 800551c:	440b      	add	r3, r1
 800551e:	005b      	lsls	r3, r3, #1
 8005520:	4413      	add	r3, r2
 8005522:	4a20      	ldr	r2, [pc, #128]	; (80055a4 <ssd1306_DrawPixel+0xd0>)
 8005524:	5cd3      	ldrb	r3, [r2, r3]
 8005526:	b25a      	sxtb	r2, r3
 8005528:	79bb      	ldrb	r3, [r7, #6]
 800552a:	f003 0307 	and.w	r3, r3, #7
 800552e:	2101      	movs	r1, #1
 8005530:	fa01 f303 	lsl.w	r3, r1, r3
 8005534:	b25b      	sxtb	r3, r3
 8005536:	4313      	orrs	r3, r2
 8005538:	b25c      	sxtb	r4, r3
 800553a:	79fa      	ldrb	r2, [r7, #7]
 800553c:	4601      	mov	r1, r0
 800553e:	460b      	mov	r3, r1
 8005540:	019b      	lsls	r3, r3, #6
 8005542:	440b      	add	r3, r1
 8005544:	005b      	lsls	r3, r3, #1
 8005546:	4413      	add	r3, r2
 8005548:	b2e1      	uxtb	r1, r4
 800554a:	4a16      	ldr	r2, [pc, #88]	; (80055a4 <ssd1306_DrawPixel+0xd0>)
 800554c:	54d1      	strb	r1, [r2, r3]
 800554e:	e023      	b.n	8005598 <ssd1306_DrawPixel+0xc4>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8005550:	79fa      	ldrb	r2, [r7, #7]
 8005552:	79bb      	ldrb	r3, [r7, #6]
 8005554:	08db      	lsrs	r3, r3, #3
 8005556:	b2d8      	uxtb	r0, r3
 8005558:	4601      	mov	r1, r0
 800555a:	460b      	mov	r3, r1
 800555c:	019b      	lsls	r3, r3, #6
 800555e:	440b      	add	r3, r1
 8005560:	005b      	lsls	r3, r3, #1
 8005562:	4413      	add	r3, r2
 8005564:	4a0f      	ldr	r2, [pc, #60]	; (80055a4 <ssd1306_DrawPixel+0xd0>)
 8005566:	5cd3      	ldrb	r3, [r2, r3]
 8005568:	b25a      	sxtb	r2, r3
 800556a:	79bb      	ldrb	r3, [r7, #6]
 800556c:	f003 0307 	and.w	r3, r3, #7
 8005570:	2101      	movs	r1, #1
 8005572:	fa01 f303 	lsl.w	r3, r1, r3
 8005576:	b25b      	sxtb	r3, r3
 8005578:	43db      	mvns	r3, r3
 800557a:	b25b      	sxtb	r3, r3
 800557c:	4013      	ands	r3, r2
 800557e:	b25c      	sxtb	r4, r3
 8005580:	79fa      	ldrb	r2, [r7, #7]
 8005582:	4601      	mov	r1, r0
 8005584:	460b      	mov	r3, r1
 8005586:	019b      	lsls	r3, r3, #6
 8005588:	440b      	add	r3, r1
 800558a:	005b      	lsls	r3, r3, #1
 800558c:	4413      	add	r3, r2
 800558e:	b2e1      	uxtb	r1, r4
 8005590:	4a04      	ldr	r2, [pc, #16]	; (80055a4 <ssd1306_DrawPixel+0xd0>)
 8005592:	54d1      	strb	r1, [r2, r3]
 8005594:	e000      	b.n	8005598 <ssd1306_DrawPixel+0xc4>
        return;
 8005596:	bf00      	nop
    }
}
 8005598:	3708      	adds	r7, #8
 800559a:	46bd      	mov	sp, r7
 800559c:	bc90      	pop	{r4, r7}
 800559e:	4770      	bx	lr
 80055a0:	200006e0 	.word	0x200006e0
 80055a4:	200002d0 	.word	0x200002d0

080055a8 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80055a8:	b590      	push	{r4, r7, lr}
 80055aa:	b089      	sub	sp, #36	; 0x24
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	4604      	mov	r4, r0
 80055b0:	1d38      	adds	r0, r7, #4
 80055b2:	e880 0006 	stmia.w	r0, {r1, r2}
 80055b6:	461a      	mov	r2, r3
 80055b8:	4623      	mov	r3, r4
 80055ba:	73fb      	strb	r3, [r7, #15]
 80055bc:	4613      	mov	r3, r2
 80055be:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80055c0:	7bfb      	ldrb	r3, [r7, #15]
 80055c2:	2b1f      	cmp	r3, #31
 80055c4:	d902      	bls.n	80055cc <ssd1306_WriteChar+0x24>
 80055c6:	7bfb      	ldrb	r3, [r7, #15]
 80055c8:	2b7e      	cmp	r3, #126	; 0x7e
 80055ca:	d901      	bls.n	80055d0 <ssd1306_WriteChar+0x28>
        return 0;
 80055cc:	2300      	movs	r3, #0
 80055ce:	e06d      	b.n	80056ac <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80055d0:	4b38      	ldr	r3, [pc, #224]	; (80056b4 <ssd1306_WriteChar+0x10c>)
 80055d2:	881b      	ldrh	r3, [r3, #0]
 80055d4:	461a      	mov	r2, r3
 80055d6:	793b      	ldrb	r3, [r7, #4]
 80055d8:	4413      	add	r3, r2
 80055da:	2b82      	cmp	r3, #130	; 0x82
 80055dc:	dc06      	bgt.n	80055ec <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80055de:	4b35      	ldr	r3, [pc, #212]	; (80056b4 <ssd1306_WriteChar+0x10c>)
 80055e0:	885b      	ldrh	r3, [r3, #2]
 80055e2:	461a      	mov	r2, r3
 80055e4:	797b      	ldrb	r3, [r7, #5]
 80055e6:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80055e8:	2b40      	cmp	r3, #64	; 0x40
 80055ea:	dd01      	ble.n	80055f0 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80055ec:	2300      	movs	r3, #0
 80055ee:	e05d      	b.n	80056ac <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80055f0:	2300      	movs	r3, #0
 80055f2:	61fb      	str	r3, [r7, #28]
 80055f4:	e04c      	b.n	8005690 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80055f6:	68ba      	ldr	r2, [r7, #8]
 80055f8:	7bfb      	ldrb	r3, [r7, #15]
 80055fa:	3b20      	subs	r3, #32
 80055fc:	7979      	ldrb	r1, [r7, #5]
 80055fe:	fb01 f303 	mul.w	r3, r1, r3
 8005602:	4619      	mov	r1, r3
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	440b      	add	r3, r1
 8005608:	005b      	lsls	r3, r3, #1
 800560a:	4413      	add	r3, r2
 800560c:	881b      	ldrh	r3, [r3, #0]
 800560e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8005610:	2300      	movs	r3, #0
 8005612:	61bb      	str	r3, [r7, #24]
 8005614:	e034      	b.n	8005680 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	fa02 f303 	lsl.w	r3, r2, r3
 800561e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d012      	beq.n	800564c <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8005626:	4b23      	ldr	r3, [pc, #140]	; (80056b4 <ssd1306_WriteChar+0x10c>)
 8005628:	881b      	ldrh	r3, [r3, #0]
 800562a:	b2da      	uxtb	r2, r3
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	b2db      	uxtb	r3, r3
 8005630:	4413      	add	r3, r2
 8005632:	b2d8      	uxtb	r0, r3
 8005634:	4b1f      	ldr	r3, [pc, #124]	; (80056b4 <ssd1306_WriteChar+0x10c>)
 8005636:	885b      	ldrh	r3, [r3, #2]
 8005638:	b2da      	uxtb	r2, r3
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	b2db      	uxtb	r3, r3
 800563e:	4413      	add	r3, r2
 8005640:	b2db      	uxtb	r3, r3
 8005642:	7bba      	ldrb	r2, [r7, #14]
 8005644:	4619      	mov	r1, r3
 8005646:	f7ff ff45 	bl	80054d4 <ssd1306_DrawPixel>
 800564a:	e016      	b.n	800567a <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800564c:	4b19      	ldr	r3, [pc, #100]	; (80056b4 <ssd1306_WriteChar+0x10c>)
 800564e:	881b      	ldrh	r3, [r3, #0]
 8005650:	b2da      	uxtb	r2, r3
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	b2db      	uxtb	r3, r3
 8005656:	4413      	add	r3, r2
 8005658:	b2d8      	uxtb	r0, r3
 800565a:	4b16      	ldr	r3, [pc, #88]	; (80056b4 <ssd1306_WriteChar+0x10c>)
 800565c:	885b      	ldrh	r3, [r3, #2]
 800565e:	b2da      	uxtb	r2, r3
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	b2db      	uxtb	r3, r3
 8005664:	4413      	add	r3, r2
 8005666:	b2d9      	uxtb	r1, r3
 8005668:	7bbb      	ldrb	r3, [r7, #14]
 800566a:	2b00      	cmp	r3, #0
 800566c:	bf0c      	ite	eq
 800566e:	2301      	moveq	r3, #1
 8005670:	2300      	movne	r3, #0
 8005672:	b2db      	uxtb	r3, r3
 8005674:	461a      	mov	r2, r3
 8005676:	f7ff ff2d 	bl	80054d4 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	3301      	adds	r3, #1
 800567e:	61bb      	str	r3, [r7, #24]
 8005680:	793b      	ldrb	r3, [r7, #4]
 8005682:	461a      	mov	r2, r3
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	4293      	cmp	r3, r2
 8005688:	d3c5      	bcc.n	8005616 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	3301      	adds	r3, #1
 800568e:	61fb      	str	r3, [r7, #28]
 8005690:	797b      	ldrb	r3, [r7, #5]
 8005692:	461a      	mov	r2, r3
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	4293      	cmp	r3, r2
 8005698:	d3ad      	bcc.n	80055f6 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800569a:	4b06      	ldr	r3, [pc, #24]	; (80056b4 <ssd1306_WriteChar+0x10c>)
 800569c:	881a      	ldrh	r2, [r3, #0]
 800569e:	793b      	ldrb	r3, [r7, #4]
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	4413      	add	r3, r2
 80056a4:	b29a      	uxth	r2, r3
 80056a6:	4b03      	ldr	r3, [pc, #12]	; (80056b4 <ssd1306_WriteChar+0x10c>)
 80056a8:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80056aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3724      	adds	r7, #36	; 0x24
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd90      	pop	{r4, r7, pc}
 80056b4:	200006e0 	.word	0x200006e0

080056b8 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	1d38      	adds	r0, r7, #4
 80056c2:	e880 0006 	stmia.w	r0, {r1, r2}
 80056c6:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 80056c8:	e012      	b.n	80056f0 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	7818      	ldrb	r0, [r3, #0]
 80056ce:	78fb      	ldrb	r3, [r7, #3]
 80056d0:	1d3a      	adds	r2, r7, #4
 80056d2:	ca06      	ldmia	r2, {r1, r2}
 80056d4:	f7ff ff68 	bl	80055a8 <ssd1306_WriteChar>
 80056d8:	4603      	mov	r3, r0
 80056da:	461a      	mov	r2, r3
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d002      	beq.n	80056ea <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	e008      	b.n	80056fc <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	3301      	adds	r3, #1
 80056ee:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1e8      	bne.n	80056ca <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	781b      	ldrb	r3, [r3, #0]
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3710      	adds	r7, #16
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	4603      	mov	r3, r0
 800570c:	460a      	mov	r2, r1
 800570e:	71fb      	strb	r3, [r7, #7]
 8005710:	4613      	mov	r3, r2
 8005712:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8005714:	79fb      	ldrb	r3, [r7, #7]
 8005716:	b29a      	uxth	r2, r3
 8005718:	4b05      	ldr	r3, [pc, #20]	; (8005730 <ssd1306_SetCursor+0x2c>)
 800571a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800571c:	79bb      	ldrb	r3, [r7, #6]
 800571e:	b29a      	uxth	r2, r3
 8005720:	4b03      	ldr	r3, [pc, #12]	; (8005730 <ssd1306_SetCursor+0x2c>)
 8005722:	805a      	strh	r2, [r3, #2]
}
 8005724:	bf00      	nop
 8005726:	370c      	adds	r7, #12
 8005728:	46bd      	mov	sp, r7
 800572a:	bc80      	pop	{r7}
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop
 8005730:	200006e0 	.word	0x200006e0

08005734 <ssd1306_Line>:

// Draw line by Bresenhem's algorithm
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8005734:	b590      	push	{r4, r7, lr}
 8005736:	b089      	sub	sp, #36	; 0x24
 8005738:	af00      	add	r7, sp, #0
 800573a:	4604      	mov	r4, r0
 800573c:	4608      	mov	r0, r1
 800573e:	4611      	mov	r1, r2
 8005740:	461a      	mov	r2, r3
 8005742:	4623      	mov	r3, r4
 8005744:	71fb      	strb	r3, [r7, #7]
 8005746:	4603      	mov	r3, r0
 8005748:	71bb      	strb	r3, [r7, #6]
 800574a:	460b      	mov	r3, r1
 800574c:	717b      	strb	r3, [r7, #5]
 800574e:	4613      	mov	r3, r2
 8005750:	713b      	strb	r3, [r7, #4]
  int32_t deltaX = abs(x2 - x1);
 8005752:	797a      	ldrb	r2, [r7, #5]
 8005754:	79fb      	ldrb	r3, [r7, #7]
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	2b00      	cmp	r3, #0
 800575a:	bfb8      	it	lt
 800575c:	425b      	neglt	r3, r3
 800575e:	61bb      	str	r3, [r7, #24]
  int32_t deltaY = abs(y2 - y1);
 8005760:	793a      	ldrb	r2, [r7, #4]
 8005762:	79bb      	ldrb	r3, [r7, #6]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	2b00      	cmp	r3, #0
 8005768:	bfb8      	it	lt
 800576a:	425b      	neglt	r3, r3
 800576c:	617b      	str	r3, [r7, #20]
  int32_t signX = ((x1 < x2) ? 1 : -1);
 800576e:	79fa      	ldrb	r2, [r7, #7]
 8005770:	797b      	ldrb	r3, [r7, #5]
 8005772:	429a      	cmp	r2, r3
 8005774:	d201      	bcs.n	800577a <ssd1306_Line+0x46>
 8005776:	2301      	movs	r3, #1
 8005778:	e001      	b.n	800577e <ssd1306_Line+0x4a>
 800577a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800577e:	613b      	str	r3, [r7, #16]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 8005780:	79ba      	ldrb	r2, [r7, #6]
 8005782:	793b      	ldrb	r3, [r7, #4]
 8005784:	429a      	cmp	r2, r3
 8005786:	d201      	bcs.n	800578c <ssd1306_Line+0x58>
 8005788:	2301      	movs	r3, #1
 800578a:	e001      	b.n	8005790 <ssd1306_Line+0x5c>
 800578c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005790:	60fb      	str	r3, [r7, #12]
  int32_t error = deltaX - deltaY;
 8005792:	69ba      	ldr	r2, [r7, #24]
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	61fb      	str	r3, [r7, #28]
  int32_t error2;
    
  ssd1306_DrawPixel(x2, y2, color);
 800579a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800579e:	7939      	ldrb	r1, [r7, #4]
 80057a0:	797b      	ldrb	r3, [r7, #5]
 80057a2:	4618      	mov	r0, r3
 80057a4:	f7ff fe96 	bl	80054d4 <ssd1306_DrawPixel>
    while((x1 != x2) || (y1 != y2))
 80057a8:	e024      	b.n	80057f4 <ssd1306_Line+0xc0>
    {
    ssd1306_DrawPixel(x1, y1, color);
 80057aa:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80057ae:	79b9      	ldrb	r1, [r7, #6]
 80057b0:	79fb      	ldrb	r3, [r7, #7]
 80057b2:	4618      	mov	r0, r3
 80057b4:	f7ff fe8e 	bl	80054d4 <ssd1306_DrawPixel>
    error2 = error * 2;
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	005b      	lsls	r3, r3, #1
 80057bc:	60bb      	str	r3, [r7, #8]
    if(error2 > -deltaY)
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	425b      	negs	r3, r3
 80057c2:	68ba      	ldr	r2, [r7, #8]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	dd08      	ble.n	80057da <ssd1306_Line+0xa6>
    {
      error -= deltaY;
 80057c8:	69fa      	ldr	r2, [r7, #28]
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	61fb      	str	r3, [r7, #28]
      x1 += signX;
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	b2da      	uxtb	r2, r3
 80057d4:	79fb      	ldrb	r3, [r7, #7]
 80057d6:	4413      	add	r3, r2
 80057d8:	71fb      	strb	r3, [r7, #7]
    else
    {
    /*nothing to do*/
    }
        
    if(error2 < deltaX)
 80057da:	68ba      	ldr	r2, [r7, #8]
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	429a      	cmp	r2, r3
 80057e0:	da08      	bge.n	80057f4 <ssd1306_Line+0xc0>
    {
      error += deltaX;
 80057e2:	69fa      	ldr	r2, [r7, #28]
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	4413      	add	r3, r2
 80057e8:	61fb      	str	r3, [r7, #28]
      y1 += signY;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	b2da      	uxtb	r2, r3
 80057ee:	79bb      	ldrb	r3, [r7, #6]
 80057f0:	4413      	add	r3, r2
 80057f2:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2))
 80057f4:	79fa      	ldrb	r2, [r7, #7]
 80057f6:	797b      	ldrb	r3, [r7, #5]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d1d6      	bne.n	80057aa <ssd1306_Line+0x76>
 80057fc:	79ba      	ldrb	r2, [r7, #6]
 80057fe:	793b      	ldrb	r3, [r7, #4]
 8005800:	429a      	cmp	r2, r3
 8005802:	d1d2      	bne.n	80057aa <ssd1306_Line+0x76>
    else
    {
    /*nothing to do*/
    }
  }
  return;
 8005804:	bf00      	nop
}
 8005806:	3724      	adds	r7, #36	; 0x24
 8005808:	46bd      	mov	sp, r7
 800580a:	bd90      	pop	{r4, r7, pc}

0800580c <ssd1306_DrawCircle>:
    }
    
    return;
}
//Draw circle by Bresenhem's algorithm
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 800580c:	b590      	push	{r4, r7, lr}
 800580e:	b087      	sub	sp, #28
 8005810:	af00      	add	r7, sp, #0
 8005812:	4604      	mov	r4, r0
 8005814:	4608      	mov	r0, r1
 8005816:	4611      	mov	r1, r2
 8005818:	461a      	mov	r2, r3
 800581a:	4623      	mov	r3, r4
 800581c:	71fb      	strb	r3, [r7, #7]
 800581e:	4603      	mov	r3, r0
 8005820:	71bb      	strb	r3, [r7, #6]
 8005822:	460b      	mov	r3, r1
 8005824:	717b      	strb	r3, [r7, #5]
 8005826:	4613      	mov	r3, r2
 8005828:	713b      	strb	r3, [r7, #4]
  int32_t x = -par_r;
 800582a:	797b      	ldrb	r3, [r7, #5]
 800582c:	425b      	negs	r3, r3
 800582e:	617b      	str	r3, [r7, #20]
  int32_t y = 0;
 8005830:	2300      	movs	r3, #0
 8005832:	613b      	str	r3, [r7, #16]
  int32_t err = 2 - 2 * par_r;
 8005834:	797b      	ldrb	r3, [r7, #5]
 8005836:	f1c3 0301 	rsb	r3, r3, #1
 800583a:	005b      	lsls	r3, r3, #1
 800583c:	60fb      	str	r3, [r7, #12]
  int32_t e2;

  if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 800583e:	79fb      	ldrb	r3, [r7, #7]
 8005840:	2b81      	cmp	r3, #129	; 0x81
 8005842:	d865      	bhi.n	8005910 <ssd1306_DrawCircle+0x104>
 8005844:	79bb      	ldrb	r3, [r7, #6]
 8005846:	2b3f      	cmp	r3, #63	; 0x3f
 8005848:	d862      	bhi.n	8005910 <ssd1306_DrawCircle+0x104>
    return;
  }

    do {
      ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	b2db      	uxtb	r3, r3
 800584e:	79fa      	ldrb	r2, [r7, #7]
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	b2d8      	uxtb	r0, r3
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	b2da      	uxtb	r2, r3
 8005858:	79bb      	ldrb	r3, [r7, #6]
 800585a:	4413      	add	r3, r2
 800585c:	b2db      	uxtb	r3, r3
 800585e:	793a      	ldrb	r2, [r7, #4]
 8005860:	4619      	mov	r1, r3
 8005862:	f7ff fe37 	bl	80054d4 <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	b2da      	uxtb	r2, r3
 800586a:	79fb      	ldrb	r3, [r7, #7]
 800586c:	4413      	add	r3, r2
 800586e:	b2d8      	uxtb	r0, r3
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	b2da      	uxtb	r2, r3
 8005874:	79bb      	ldrb	r3, [r7, #6]
 8005876:	4413      	add	r3, r2
 8005878:	b2db      	uxtb	r3, r3
 800587a:	793a      	ldrb	r2, [r7, #4]
 800587c:	4619      	mov	r1, r3
 800587e:	f7ff fe29 	bl	80054d4 <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	b2da      	uxtb	r2, r3
 8005886:	79fb      	ldrb	r3, [r7, #7]
 8005888:	4413      	add	r3, r2
 800588a:	b2d8      	uxtb	r0, r3
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	b2db      	uxtb	r3, r3
 8005890:	79ba      	ldrb	r2, [r7, #6]
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	b2db      	uxtb	r3, r3
 8005896:	793a      	ldrb	r2, [r7, #4]
 8005898:	4619      	mov	r1, r3
 800589a:	f7ff fe1b 	bl	80054d4 <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	79fa      	ldrb	r2, [r7, #7]
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	b2d8      	uxtb	r0, r3
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	79ba      	ldrb	r2, [r7, #6]
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	793a      	ldrb	r2, [r7, #4]
 80058b4:	4619      	mov	r1, r3
 80058b6:	f7ff fe0d 	bl	80054d4 <ssd1306_DrawPixel>
        e2 = err;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	60bb      	str	r3, [r7, #8]
        if (e2 <= y) {
 80058be:	68ba      	ldr	r2, [r7, #8]
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	dc13      	bgt.n	80058ee <ssd1306_DrawCircle+0xe2>
            y++;
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	3301      	adds	r3, #1
 80058ca:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	005b      	lsls	r3, r3, #1
 80058d0:	3301      	adds	r3, #1
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	4413      	add	r3, r2
 80058d6:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	425b      	negs	r3, r3
 80058dc:	693a      	ldr	r2, [r7, #16]
 80058de:	429a      	cmp	r2, r3
 80058e0:	d105      	bne.n	80058ee <ssd1306_DrawCircle+0xe2>
 80058e2:	68ba      	ldr	r2, [r7, #8]
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	dc01      	bgt.n	80058ee <ssd1306_DrawCircle+0xe2>
              e2 = 0;
 80058ea:	2300      	movs	r3, #0
 80058ec:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          /*nothing to do*/
        }
        if(e2 > x) {
 80058ee:	68ba      	ldr	r2, [r7, #8]
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	429a      	cmp	r2, r3
 80058f4:	dd08      	ble.n	8005908 <ssd1306_DrawCircle+0xfc>
          x++;
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	3301      	adds	r3, #1
 80058fa:	617b      	str	r3, [r7, #20]
          err = err + (x * 2 + 1);
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	005b      	lsls	r3, r3, #1
 8005900:	3301      	adds	r3, #1
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	4413      	add	r3, r2
 8005906:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          /*nothing to do*/
        }
    } while(x <= 0);
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	2b00      	cmp	r3, #0
 800590c:	dd9d      	ble.n	800584a <ssd1306_DrawCircle+0x3e>

    return;
 800590e:	e000      	b.n	8005912 <ssd1306_DrawCircle+0x106>
    return;
 8005910:	bf00      	nop
}
 8005912:	371c      	adds	r7, #28
 8005914:	46bd      	mov	sp, r7
 8005916:	bd90      	pop	{r4, r7, pc}

08005918 <ssd1306_DrawRectangle>:

//Draw rectangle
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8005918:	b590      	push	{r4, r7, lr}
 800591a:	b085      	sub	sp, #20
 800591c:	af02      	add	r7, sp, #8
 800591e:	4604      	mov	r4, r0
 8005920:	4608      	mov	r0, r1
 8005922:	4611      	mov	r1, r2
 8005924:	461a      	mov	r2, r3
 8005926:	4623      	mov	r3, r4
 8005928:	71fb      	strb	r3, [r7, #7]
 800592a:	4603      	mov	r3, r0
 800592c:	71bb      	strb	r3, [r7, #6]
 800592e:	460b      	mov	r3, r1
 8005930:	717b      	strb	r3, [r7, #5]
 8005932:	4613      	mov	r3, r2
 8005934:	713b      	strb	r3, [r7, #4]
  ssd1306_Line(x1,y1,x2,y1,color);
 8005936:	79bc      	ldrb	r4, [r7, #6]
 8005938:	797a      	ldrb	r2, [r7, #5]
 800593a:	79b9      	ldrb	r1, [r7, #6]
 800593c:	79f8      	ldrb	r0, [r7, #7]
 800593e:	7e3b      	ldrb	r3, [r7, #24]
 8005940:	9300      	str	r3, [sp, #0]
 8005942:	4623      	mov	r3, r4
 8005944:	f7ff fef6 	bl	8005734 <ssd1306_Line>
  ssd1306_Line(x2,y1,x2,y2,color);
 8005948:	793c      	ldrb	r4, [r7, #4]
 800594a:	797a      	ldrb	r2, [r7, #5]
 800594c:	79b9      	ldrb	r1, [r7, #6]
 800594e:	7978      	ldrb	r0, [r7, #5]
 8005950:	7e3b      	ldrb	r3, [r7, #24]
 8005952:	9300      	str	r3, [sp, #0]
 8005954:	4623      	mov	r3, r4
 8005956:	f7ff feed 	bl	8005734 <ssd1306_Line>
  ssd1306_Line(x2,y2,x1,y2,color);
 800595a:	793c      	ldrb	r4, [r7, #4]
 800595c:	79fa      	ldrb	r2, [r7, #7]
 800595e:	7939      	ldrb	r1, [r7, #4]
 8005960:	7978      	ldrb	r0, [r7, #5]
 8005962:	7e3b      	ldrb	r3, [r7, #24]
 8005964:	9300      	str	r3, [sp, #0]
 8005966:	4623      	mov	r3, r4
 8005968:	f7ff fee4 	bl	8005734 <ssd1306_Line>
  ssd1306_Line(x1,y2,x1,y1,color);
 800596c:	79bc      	ldrb	r4, [r7, #6]
 800596e:	79fa      	ldrb	r2, [r7, #7]
 8005970:	7939      	ldrb	r1, [r7, #4]
 8005972:	79f8      	ldrb	r0, [r7, #7]
 8005974:	7e3b      	ldrb	r3, [r7, #24]
 8005976:	9300      	str	r3, [sp, #0]
 8005978:	4623      	mov	r3, r4
 800597a:	f7ff fedb 	bl	8005734 <ssd1306_Line>

  return;
 800597e:	bf00      	nop
}
 8005980:	370c      	adds	r7, #12
 8005982:	46bd      	mov	sp, r7
 8005984:	bd90      	pop	{r4, r7, pc}

08005986 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8005986:	b580      	push	{r7, lr}
 8005988:	b084      	sub	sp, #16
 800598a:	af00      	add	r7, sp, #0
 800598c:	4603      	mov	r3, r0
 800598e:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8005990:	2381      	movs	r3, #129	; 0x81
 8005992:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8005994:	7bfb      	ldrb	r3, [r7, #15]
 8005996:	4618      	mov	r0, r3
 8005998:	f7ff fcb2 	bl	8005300 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800599c:	79fb      	ldrb	r3, [r7, #7]
 800599e:	4618      	mov	r0, r3
 80059a0:	f7ff fcae 	bl	8005300 <ssd1306_WriteCommand>
}
 80059a4:	bf00      	nop
 80059a6:	3710      	adds	r7, #16
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	4603      	mov	r3, r0
 80059b4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80059b6:	79fb      	ldrb	r3, [r7, #7]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d005      	beq.n	80059c8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80059bc:	23af      	movs	r3, #175	; 0xaf
 80059be:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80059c0:	4b08      	ldr	r3, [pc, #32]	; (80059e4 <ssd1306_SetDisplayOn+0x38>)
 80059c2:	2201      	movs	r2, #1
 80059c4:	719a      	strb	r2, [r3, #6]
 80059c6:	e004      	b.n	80059d2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80059c8:	23ae      	movs	r3, #174	; 0xae
 80059ca:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80059cc:	4b05      	ldr	r3, [pc, #20]	; (80059e4 <ssd1306_SetDisplayOn+0x38>)
 80059ce:	2200      	movs	r2, #0
 80059d0:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 80059d2:	7bfb      	ldrb	r3, [r7, #15]
 80059d4:	4618      	mov	r0, r3
 80059d6:	f7ff fc93 	bl	8005300 <ssd1306_WriteCommand>
}
 80059da:	bf00      	nop
 80059dc:	3710      	adds	r7, #16
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	200006e0 	.word	0x200006e0

080059e8 <__errno>:
 80059e8:	4b01      	ldr	r3, [pc, #4]	; (80059f0 <__errno+0x8>)
 80059ea:	6818      	ldr	r0, [r3, #0]
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop
 80059f0:	200000a0 	.word	0x200000a0

080059f4 <__libc_init_array>:
 80059f4:	b570      	push	{r4, r5, r6, lr}
 80059f6:	2600      	movs	r6, #0
 80059f8:	4d0c      	ldr	r5, [pc, #48]	; (8005a2c <__libc_init_array+0x38>)
 80059fa:	4c0d      	ldr	r4, [pc, #52]	; (8005a30 <__libc_init_array+0x3c>)
 80059fc:	1b64      	subs	r4, r4, r5
 80059fe:	10a4      	asrs	r4, r4, #2
 8005a00:	42a6      	cmp	r6, r4
 8005a02:	d109      	bne.n	8005a18 <__libc_init_array+0x24>
 8005a04:	f004 fa3a 	bl	8009e7c <_init>
 8005a08:	2600      	movs	r6, #0
 8005a0a:	4d0a      	ldr	r5, [pc, #40]	; (8005a34 <__libc_init_array+0x40>)
 8005a0c:	4c0a      	ldr	r4, [pc, #40]	; (8005a38 <__libc_init_array+0x44>)
 8005a0e:	1b64      	subs	r4, r4, r5
 8005a10:	10a4      	asrs	r4, r4, #2
 8005a12:	42a6      	cmp	r6, r4
 8005a14:	d105      	bne.n	8005a22 <__libc_init_array+0x2e>
 8005a16:	bd70      	pop	{r4, r5, r6, pc}
 8005a18:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a1c:	4798      	blx	r3
 8005a1e:	3601      	adds	r6, #1
 8005a20:	e7ee      	b.n	8005a00 <__libc_init_array+0xc>
 8005a22:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a26:	4798      	blx	r3
 8005a28:	3601      	adds	r6, #1
 8005a2a:	e7f2      	b.n	8005a12 <__libc_init_array+0x1e>
 8005a2c:	0800c010 	.word	0x0800c010
 8005a30:	0800c010 	.word	0x0800c010
 8005a34:	0800c010 	.word	0x0800c010
 8005a38:	0800c014 	.word	0x0800c014

08005a3c <memcpy>:
 8005a3c:	440a      	add	r2, r1
 8005a3e:	4291      	cmp	r1, r2
 8005a40:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005a44:	d100      	bne.n	8005a48 <memcpy+0xc>
 8005a46:	4770      	bx	lr
 8005a48:	b510      	push	{r4, lr}
 8005a4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a4e:	4291      	cmp	r1, r2
 8005a50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a54:	d1f9      	bne.n	8005a4a <memcpy+0xe>
 8005a56:	bd10      	pop	{r4, pc}

08005a58 <memset>:
 8005a58:	4603      	mov	r3, r0
 8005a5a:	4402      	add	r2, r0
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d100      	bne.n	8005a62 <memset+0xa>
 8005a60:	4770      	bx	lr
 8005a62:	f803 1b01 	strb.w	r1, [r3], #1
 8005a66:	e7f9      	b.n	8005a5c <memset+0x4>

08005a68 <__cvt>:
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a6e:	461f      	mov	r7, r3
 8005a70:	bfbb      	ittet	lt
 8005a72:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005a76:	461f      	movlt	r7, r3
 8005a78:	2300      	movge	r3, #0
 8005a7a:	232d      	movlt	r3, #45	; 0x2d
 8005a7c:	b088      	sub	sp, #32
 8005a7e:	4614      	mov	r4, r2
 8005a80:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005a82:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005a84:	7013      	strb	r3, [r2, #0]
 8005a86:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005a88:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005a8c:	f023 0820 	bic.w	r8, r3, #32
 8005a90:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005a94:	d005      	beq.n	8005aa2 <__cvt+0x3a>
 8005a96:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005a9a:	d100      	bne.n	8005a9e <__cvt+0x36>
 8005a9c:	3501      	adds	r5, #1
 8005a9e:	2302      	movs	r3, #2
 8005aa0:	e000      	b.n	8005aa4 <__cvt+0x3c>
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	aa07      	add	r2, sp, #28
 8005aa6:	9204      	str	r2, [sp, #16]
 8005aa8:	aa06      	add	r2, sp, #24
 8005aaa:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005aae:	e9cd 3500 	strd	r3, r5, [sp]
 8005ab2:	4622      	mov	r2, r4
 8005ab4:	463b      	mov	r3, r7
 8005ab6:	f000 fce7 	bl	8006488 <_dtoa_r>
 8005aba:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005abe:	4606      	mov	r6, r0
 8005ac0:	d102      	bne.n	8005ac8 <__cvt+0x60>
 8005ac2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005ac4:	07db      	lsls	r3, r3, #31
 8005ac6:	d522      	bpl.n	8005b0e <__cvt+0xa6>
 8005ac8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005acc:	eb06 0905 	add.w	r9, r6, r5
 8005ad0:	d110      	bne.n	8005af4 <__cvt+0x8c>
 8005ad2:	7833      	ldrb	r3, [r6, #0]
 8005ad4:	2b30      	cmp	r3, #48	; 0x30
 8005ad6:	d10a      	bne.n	8005aee <__cvt+0x86>
 8005ad8:	2200      	movs	r2, #0
 8005ada:	2300      	movs	r3, #0
 8005adc:	4620      	mov	r0, r4
 8005ade:	4639      	mov	r1, r7
 8005ae0:	f7fa ff62 	bl	80009a8 <__aeabi_dcmpeq>
 8005ae4:	b918      	cbnz	r0, 8005aee <__cvt+0x86>
 8005ae6:	f1c5 0501 	rsb	r5, r5, #1
 8005aea:	f8ca 5000 	str.w	r5, [sl]
 8005aee:	f8da 3000 	ldr.w	r3, [sl]
 8005af2:	4499      	add	r9, r3
 8005af4:	2200      	movs	r2, #0
 8005af6:	2300      	movs	r3, #0
 8005af8:	4620      	mov	r0, r4
 8005afa:	4639      	mov	r1, r7
 8005afc:	f7fa ff54 	bl	80009a8 <__aeabi_dcmpeq>
 8005b00:	b108      	cbz	r0, 8005b06 <__cvt+0x9e>
 8005b02:	f8cd 901c 	str.w	r9, [sp, #28]
 8005b06:	2230      	movs	r2, #48	; 0x30
 8005b08:	9b07      	ldr	r3, [sp, #28]
 8005b0a:	454b      	cmp	r3, r9
 8005b0c:	d307      	bcc.n	8005b1e <__cvt+0xb6>
 8005b0e:	4630      	mov	r0, r6
 8005b10:	9b07      	ldr	r3, [sp, #28]
 8005b12:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005b14:	1b9b      	subs	r3, r3, r6
 8005b16:	6013      	str	r3, [r2, #0]
 8005b18:	b008      	add	sp, #32
 8005b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b1e:	1c59      	adds	r1, r3, #1
 8005b20:	9107      	str	r1, [sp, #28]
 8005b22:	701a      	strb	r2, [r3, #0]
 8005b24:	e7f0      	b.n	8005b08 <__cvt+0xa0>

08005b26 <__exponent>:
 8005b26:	4603      	mov	r3, r0
 8005b28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b2a:	2900      	cmp	r1, #0
 8005b2c:	f803 2b02 	strb.w	r2, [r3], #2
 8005b30:	bfb6      	itet	lt
 8005b32:	222d      	movlt	r2, #45	; 0x2d
 8005b34:	222b      	movge	r2, #43	; 0x2b
 8005b36:	4249      	neglt	r1, r1
 8005b38:	2909      	cmp	r1, #9
 8005b3a:	7042      	strb	r2, [r0, #1]
 8005b3c:	dd2b      	ble.n	8005b96 <__exponent+0x70>
 8005b3e:	f10d 0407 	add.w	r4, sp, #7
 8005b42:	46a4      	mov	ip, r4
 8005b44:	270a      	movs	r7, #10
 8005b46:	fb91 f6f7 	sdiv	r6, r1, r7
 8005b4a:	460a      	mov	r2, r1
 8005b4c:	46a6      	mov	lr, r4
 8005b4e:	fb07 1516 	mls	r5, r7, r6, r1
 8005b52:	2a63      	cmp	r2, #99	; 0x63
 8005b54:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005b58:	4631      	mov	r1, r6
 8005b5a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8005b5e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005b62:	dcf0      	bgt.n	8005b46 <__exponent+0x20>
 8005b64:	3130      	adds	r1, #48	; 0x30
 8005b66:	f1ae 0502 	sub.w	r5, lr, #2
 8005b6a:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005b6e:	4629      	mov	r1, r5
 8005b70:	1c44      	adds	r4, r0, #1
 8005b72:	4561      	cmp	r1, ip
 8005b74:	d30a      	bcc.n	8005b8c <__exponent+0x66>
 8005b76:	f10d 0209 	add.w	r2, sp, #9
 8005b7a:	eba2 020e 	sub.w	r2, r2, lr
 8005b7e:	4565      	cmp	r5, ip
 8005b80:	bf88      	it	hi
 8005b82:	2200      	movhi	r2, #0
 8005b84:	4413      	add	r3, r2
 8005b86:	1a18      	subs	r0, r3, r0
 8005b88:	b003      	add	sp, #12
 8005b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b8c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b90:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005b94:	e7ed      	b.n	8005b72 <__exponent+0x4c>
 8005b96:	2330      	movs	r3, #48	; 0x30
 8005b98:	3130      	adds	r1, #48	; 0x30
 8005b9a:	7083      	strb	r3, [r0, #2]
 8005b9c:	70c1      	strb	r1, [r0, #3]
 8005b9e:	1d03      	adds	r3, r0, #4
 8005ba0:	e7f1      	b.n	8005b86 <__exponent+0x60>
	...

08005ba4 <_printf_float>:
 8005ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ba8:	b091      	sub	sp, #68	; 0x44
 8005baa:	460c      	mov	r4, r1
 8005bac:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005bb0:	4616      	mov	r6, r2
 8005bb2:	461f      	mov	r7, r3
 8005bb4:	4605      	mov	r5, r0
 8005bb6:	f001 fa55 	bl	8007064 <_localeconv_r>
 8005bba:	6803      	ldr	r3, [r0, #0]
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	9309      	str	r3, [sp, #36]	; 0x24
 8005bc0:	f7fa fac6 	bl	8000150 <strlen>
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	930e      	str	r3, [sp, #56]	; 0x38
 8005bc8:	f8d8 3000 	ldr.w	r3, [r8]
 8005bcc:	900a      	str	r0, [sp, #40]	; 0x28
 8005bce:	3307      	adds	r3, #7
 8005bd0:	f023 0307 	bic.w	r3, r3, #7
 8005bd4:	f103 0208 	add.w	r2, r3, #8
 8005bd8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005bdc:	f8d4 b000 	ldr.w	fp, [r4]
 8005be0:	f8c8 2000 	str.w	r2, [r8]
 8005be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005bec:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005bf0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005bf4:	930b      	str	r3, [sp, #44]	; 0x2c
 8005bf6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005bfa:	4640      	mov	r0, r8
 8005bfc:	4b9c      	ldr	r3, [pc, #624]	; (8005e70 <_printf_float+0x2cc>)
 8005bfe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005c00:	f7fa ff04 	bl	8000a0c <__aeabi_dcmpun>
 8005c04:	bb70      	cbnz	r0, 8005c64 <_printf_float+0xc0>
 8005c06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c0a:	4640      	mov	r0, r8
 8005c0c:	4b98      	ldr	r3, [pc, #608]	; (8005e70 <_printf_float+0x2cc>)
 8005c0e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005c10:	f7fa fede 	bl	80009d0 <__aeabi_dcmple>
 8005c14:	bb30      	cbnz	r0, 8005c64 <_printf_float+0xc0>
 8005c16:	2200      	movs	r2, #0
 8005c18:	2300      	movs	r3, #0
 8005c1a:	4640      	mov	r0, r8
 8005c1c:	4651      	mov	r1, sl
 8005c1e:	f7fa fecd 	bl	80009bc <__aeabi_dcmplt>
 8005c22:	b110      	cbz	r0, 8005c2a <_printf_float+0x86>
 8005c24:	232d      	movs	r3, #45	; 0x2d
 8005c26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c2a:	4b92      	ldr	r3, [pc, #584]	; (8005e74 <_printf_float+0x2d0>)
 8005c2c:	4892      	ldr	r0, [pc, #584]	; (8005e78 <_printf_float+0x2d4>)
 8005c2e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005c32:	bf94      	ite	ls
 8005c34:	4698      	movls	r8, r3
 8005c36:	4680      	movhi	r8, r0
 8005c38:	2303      	movs	r3, #3
 8005c3a:	f04f 0a00 	mov.w	sl, #0
 8005c3e:	6123      	str	r3, [r4, #16]
 8005c40:	f02b 0304 	bic.w	r3, fp, #4
 8005c44:	6023      	str	r3, [r4, #0]
 8005c46:	4633      	mov	r3, r6
 8005c48:	4621      	mov	r1, r4
 8005c4a:	4628      	mov	r0, r5
 8005c4c:	9700      	str	r7, [sp, #0]
 8005c4e:	aa0f      	add	r2, sp, #60	; 0x3c
 8005c50:	f000 f9d4 	bl	8005ffc <_printf_common>
 8005c54:	3001      	adds	r0, #1
 8005c56:	f040 8090 	bne.w	8005d7a <_printf_float+0x1d6>
 8005c5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c5e:	b011      	add	sp, #68	; 0x44
 8005c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c64:	4642      	mov	r2, r8
 8005c66:	4653      	mov	r3, sl
 8005c68:	4640      	mov	r0, r8
 8005c6a:	4651      	mov	r1, sl
 8005c6c:	f7fa fece 	bl	8000a0c <__aeabi_dcmpun>
 8005c70:	b148      	cbz	r0, 8005c86 <_printf_float+0xe2>
 8005c72:	f1ba 0f00 	cmp.w	sl, #0
 8005c76:	bfb8      	it	lt
 8005c78:	232d      	movlt	r3, #45	; 0x2d
 8005c7a:	4880      	ldr	r0, [pc, #512]	; (8005e7c <_printf_float+0x2d8>)
 8005c7c:	bfb8      	it	lt
 8005c7e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005c82:	4b7f      	ldr	r3, [pc, #508]	; (8005e80 <_printf_float+0x2dc>)
 8005c84:	e7d3      	b.n	8005c2e <_printf_float+0x8a>
 8005c86:	6863      	ldr	r3, [r4, #4]
 8005c88:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005c8c:	1c5a      	adds	r2, r3, #1
 8005c8e:	d142      	bne.n	8005d16 <_printf_float+0x172>
 8005c90:	2306      	movs	r3, #6
 8005c92:	6063      	str	r3, [r4, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	9206      	str	r2, [sp, #24]
 8005c98:	aa0e      	add	r2, sp, #56	; 0x38
 8005c9a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005c9e:	aa0d      	add	r2, sp, #52	; 0x34
 8005ca0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005ca4:	9203      	str	r2, [sp, #12]
 8005ca6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005caa:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005cae:	6023      	str	r3, [r4, #0]
 8005cb0:	6863      	ldr	r3, [r4, #4]
 8005cb2:	4642      	mov	r2, r8
 8005cb4:	9300      	str	r3, [sp, #0]
 8005cb6:	4628      	mov	r0, r5
 8005cb8:	4653      	mov	r3, sl
 8005cba:	910b      	str	r1, [sp, #44]	; 0x2c
 8005cbc:	f7ff fed4 	bl	8005a68 <__cvt>
 8005cc0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005cc2:	4680      	mov	r8, r0
 8005cc4:	2947      	cmp	r1, #71	; 0x47
 8005cc6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005cc8:	d108      	bne.n	8005cdc <_printf_float+0x138>
 8005cca:	1cc8      	adds	r0, r1, #3
 8005ccc:	db02      	blt.n	8005cd4 <_printf_float+0x130>
 8005cce:	6863      	ldr	r3, [r4, #4]
 8005cd0:	4299      	cmp	r1, r3
 8005cd2:	dd40      	ble.n	8005d56 <_printf_float+0x1b2>
 8005cd4:	f1a9 0902 	sub.w	r9, r9, #2
 8005cd8:	fa5f f989 	uxtb.w	r9, r9
 8005cdc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005ce0:	d81f      	bhi.n	8005d22 <_printf_float+0x17e>
 8005ce2:	464a      	mov	r2, r9
 8005ce4:	3901      	subs	r1, #1
 8005ce6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005cea:	910d      	str	r1, [sp, #52]	; 0x34
 8005cec:	f7ff ff1b 	bl	8005b26 <__exponent>
 8005cf0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005cf2:	4682      	mov	sl, r0
 8005cf4:	1813      	adds	r3, r2, r0
 8005cf6:	2a01      	cmp	r2, #1
 8005cf8:	6123      	str	r3, [r4, #16]
 8005cfa:	dc02      	bgt.n	8005d02 <_printf_float+0x15e>
 8005cfc:	6822      	ldr	r2, [r4, #0]
 8005cfe:	07d2      	lsls	r2, r2, #31
 8005d00:	d501      	bpl.n	8005d06 <_printf_float+0x162>
 8005d02:	3301      	adds	r3, #1
 8005d04:	6123      	str	r3, [r4, #16]
 8005d06:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d09b      	beq.n	8005c46 <_printf_float+0xa2>
 8005d0e:	232d      	movs	r3, #45	; 0x2d
 8005d10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d14:	e797      	b.n	8005c46 <_printf_float+0xa2>
 8005d16:	2947      	cmp	r1, #71	; 0x47
 8005d18:	d1bc      	bne.n	8005c94 <_printf_float+0xf0>
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d1ba      	bne.n	8005c94 <_printf_float+0xf0>
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e7b7      	b.n	8005c92 <_printf_float+0xee>
 8005d22:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005d26:	d118      	bne.n	8005d5a <_printf_float+0x1b6>
 8005d28:	2900      	cmp	r1, #0
 8005d2a:	6863      	ldr	r3, [r4, #4]
 8005d2c:	dd0b      	ble.n	8005d46 <_printf_float+0x1a2>
 8005d2e:	6121      	str	r1, [r4, #16]
 8005d30:	b913      	cbnz	r3, 8005d38 <_printf_float+0x194>
 8005d32:	6822      	ldr	r2, [r4, #0]
 8005d34:	07d0      	lsls	r0, r2, #31
 8005d36:	d502      	bpl.n	8005d3e <_printf_float+0x19a>
 8005d38:	3301      	adds	r3, #1
 8005d3a:	440b      	add	r3, r1
 8005d3c:	6123      	str	r3, [r4, #16]
 8005d3e:	f04f 0a00 	mov.w	sl, #0
 8005d42:	65a1      	str	r1, [r4, #88]	; 0x58
 8005d44:	e7df      	b.n	8005d06 <_printf_float+0x162>
 8005d46:	b913      	cbnz	r3, 8005d4e <_printf_float+0x1aa>
 8005d48:	6822      	ldr	r2, [r4, #0]
 8005d4a:	07d2      	lsls	r2, r2, #31
 8005d4c:	d501      	bpl.n	8005d52 <_printf_float+0x1ae>
 8005d4e:	3302      	adds	r3, #2
 8005d50:	e7f4      	b.n	8005d3c <_printf_float+0x198>
 8005d52:	2301      	movs	r3, #1
 8005d54:	e7f2      	b.n	8005d3c <_printf_float+0x198>
 8005d56:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005d5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d5c:	4299      	cmp	r1, r3
 8005d5e:	db05      	blt.n	8005d6c <_printf_float+0x1c8>
 8005d60:	6823      	ldr	r3, [r4, #0]
 8005d62:	6121      	str	r1, [r4, #16]
 8005d64:	07d8      	lsls	r0, r3, #31
 8005d66:	d5ea      	bpl.n	8005d3e <_printf_float+0x19a>
 8005d68:	1c4b      	adds	r3, r1, #1
 8005d6a:	e7e7      	b.n	8005d3c <_printf_float+0x198>
 8005d6c:	2900      	cmp	r1, #0
 8005d6e:	bfcc      	ite	gt
 8005d70:	2201      	movgt	r2, #1
 8005d72:	f1c1 0202 	rsble	r2, r1, #2
 8005d76:	4413      	add	r3, r2
 8005d78:	e7e0      	b.n	8005d3c <_printf_float+0x198>
 8005d7a:	6823      	ldr	r3, [r4, #0]
 8005d7c:	055a      	lsls	r2, r3, #21
 8005d7e:	d407      	bmi.n	8005d90 <_printf_float+0x1ec>
 8005d80:	6923      	ldr	r3, [r4, #16]
 8005d82:	4642      	mov	r2, r8
 8005d84:	4631      	mov	r1, r6
 8005d86:	4628      	mov	r0, r5
 8005d88:	47b8      	blx	r7
 8005d8a:	3001      	adds	r0, #1
 8005d8c:	d12b      	bne.n	8005de6 <_printf_float+0x242>
 8005d8e:	e764      	b.n	8005c5a <_printf_float+0xb6>
 8005d90:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005d94:	f240 80dd 	bls.w	8005f52 <_printf_float+0x3ae>
 8005d98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	2300      	movs	r3, #0
 8005da0:	f7fa fe02 	bl	80009a8 <__aeabi_dcmpeq>
 8005da4:	2800      	cmp	r0, #0
 8005da6:	d033      	beq.n	8005e10 <_printf_float+0x26c>
 8005da8:	2301      	movs	r3, #1
 8005daa:	4631      	mov	r1, r6
 8005dac:	4628      	mov	r0, r5
 8005dae:	4a35      	ldr	r2, [pc, #212]	; (8005e84 <_printf_float+0x2e0>)
 8005db0:	47b8      	blx	r7
 8005db2:	3001      	adds	r0, #1
 8005db4:	f43f af51 	beq.w	8005c5a <_printf_float+0xb6>
 8005db8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	db02      	blt.n	8005dc6 <_printf_float+0x222>
 8005dc0:	6823      	ldr	r3, [r4, #0]
 8005dc2:	07d8      	lsls	r0, r3, #31
 8005dc4:	d50f      	bpl.n	8005de6 <_printf_float+0x242>
 8005dc6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005dca:	4631      	mov	r1, r6
 8005dcc:	4628      	mov	r0, r5
 8005dce:	47b8      	blx	r7
 8005dd0:	3001      	adds	r0, #1
 8005dd2:	f43f af42 	beq.w	8005c5a <_printf_float+0xb6>
 8005dd6:	f04f 0800 	mov.w	r8, #0
 8005dda:	f104 091a 	add.w	r9, r4, #26
 8005dde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005de0:	3b01      	subs	r3, #1
 8005de2:	4543      	cmp	r3, r8
 8005de4:	dc09      	bgt.n	8005dfa <_printf_float+0x256>
 8005de6:	6823      	ldr	r3, [r4, #0]
 8005de8:	079b      	lsls	r3, r3, #30
 8005dea:	f100 8102 	bmi.w	8005ff2 <_printf_float+0x44e>
 8005dee:	68e0      	ldr	r0, [r4, #12]
 8005df0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005df2:	4298      	cmp	r0, r3
 8005df4:	bfb8      	it	lt
 8005df6:	4618      	movlt	r0, r3
 8005df8:	e731      	b.n	8005c5e <_printf_float+0xba>
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	464a      	mov	r2, r9
 8005dfe:	4631      	mov	r1, r6
 8005e00:	4628      	mov	r0, r5
 8005e02:	47b8      	blx	r7
 8005e04:	3001      	adds	r0, #1
 8005e06:	f43f af28 	beq.w	8005c5a <_printf_float+0xb6>
 8005e0a:	f108 0801 	add.w	r8, r8, #1
 8005e0e:	e7e6      	b.n	8005dde <_printf_float+0x23a>
 8005e10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	dc38      	bgt.n	8005e88 <_printf_float+0x2e4>
 8005e16:	2301      	movs	r3, #1
 8005e18:	4631      	mov	r1, r6
 8005e1a:	4628      	mov	r0, r5
 8005e1c:	4a19      	ldr	r2, [pc, #100]	; (8005e84 <_printf_float+0x2e0>)
 8005e1e:	47b8      	blx	r7
 8005e20:	3001      	adds	r0, #1
 8005e22:	f43f af1a 	beq.w	8005c5a <_printf_float+0xb6>
 8005e26:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	d102      	bne.n	8005e34 <_printf_float+0x290>
 8005e2e:	6823      	ldr	r3, [r4, #0]
 8005e30:	07d9      	lsls	r1, r3, #31
 8005e32:	d5d8      	bpl.n	8005de6 <_printf_float+0x242>
 8005e34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e38:	4631      	mov	r1, r6
 8005e3a:	4628      	mov	r0, r5
 8005e3c:	47b8      	blx	r7
 8005e3e:	3001      	adds	r0, #1
 8005e40:	f43f af0b 	beq.w	8005c5a <_printf_float+0xb6>
 8005e44:	f04f 0900 	mov.w	r9, #0
 8005e48:	f104 0a1a 	add.w	sl, r4, #26
 8005e4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e4e:	425b      	negs	r3, r3
 8005e50:	454b      	cmp	r3, r9
 8005e52:	dc01      	bgt.n	8005e58 <_printf_float+0x2b4>
 8005e54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e56:	e794      	b.n	8005d82 <_printf_float+0x1de>
 8005e58:	2301      	movs	r3, #1
 8005e5a:	4652      	mov	r2, sl
 8005e5c:	4631      	mov	r1, r6
 8005e5e:	4628      	mov	r0, r5
 8005e60:	47b8      	blx	r7
 8005e62:	3001      	adds	r0, #1
 8005e64:	f43f aef9 	beq.w	8005c5a <_printf_float+0xb6>
 8005e68:	f109 0901 	add.w	r9, r9, #1
 8005e6c:	e7ee      	b.n	8005e4c <_printf_float+0x2a8>
 8005e6e:	bf00      	nop
 8005e70:	7fefffff 	.word	0x7fefffff
 8005e74:	0800b9e4 	.word	0x0800b9e4
 8005e78:	0800b9e8 	.word	0x0800b9e8
 8005e7c:	0800b9f0 	.word	0x0800b9f0
 8005e80:	0800b9ec 	.word	0x0800b9ec
 8005e84:	0800b9f4 	.word	0x0800b9f4
 8005e88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005e8a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	bfa8      	it	ge
 8005e90:	461a      	movge	r2, r3
 8005e92:	2a00      	cmp	r2, #0
 8005e94:	4691      	mov	r9, r2
 8005e96:	dc37      	bgt.n	8005f08 <_printf_float+0x364>
 8005e98:	f04f 0b00 	mov.w	fp, #0
 8005e9c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ea0:	f104 021a 	add.w	r2, r4, #26
 8005ea4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005ea8:	ebaa 0309 	sub.w	r3, sl, r9
 8005eac:	455b      	cmp	r3, fp
 8005eae:	dc33      	bgt.n	8005f18 <_printf_float+0x374>
 8005eb0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	db3b      	blt.n	8005f30 <_printf_float+0x38c>
 8005eb8:	6823      	ldr	r3, [r4, #0]
 8005eba:	07da      	lsls	r2, r3, #31
 8005ebc:	d438      	bmi.n	8005f30 <_printf_float+0x38c>
 8005ebe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ec0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005ec2:	eba2 030a 	sub.w	r3, r2, sl
 8005ec6:	eba2 0901 	sub.w	r9, r2, r1
 8005eca:	4599      	cmp	r9, r3
 8005ecc:	bfa8      	it	ge
 8005ece:	4699      	movge	r9, r3
 8005ed0:	f1b9 0f00 	cmp.w	r9, #0
 8005ed4:	dc34      	bgt.n	8005f40 <_printf_float+0x39c>
 8005ed6:	f04f 0800 	mov.w	r8, #0
 8005eda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ede:	f104 0a1a 	add.w	sl, r4, #26
 8005ee2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005ee6:	1a9b      	subs	r3, r3, r2
 8005ee8:	eba3 0309 	sub.w	r3, r3, r9
 8005eec:	4543      	cmp	r3, r8
 8005eee:	f77f af7a 	ble.w	8005de6 <_printf_float+0x242>
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	4652      	mov	r2, sl
 8005ef6:	4631      	mov	r1, r6
 8005ef8:	4628      	mov	r0, r5
 8005efa:	47b8      	blx	r7
 8005efc:	3001      	adds	r0, #1
 8005efe:	f43f aeac 	beq.w	8005c5a <_printf_float+0xb6>
 8005f02:	f108 0801 	add.w	r8, r8, #1
 8005f06:	e7ec      	b.n	8005ee2 <_printf_float+0x33e>
 8005f08:	4613      	mov	r3, r2
 8005f0a:	4631      	mov	r1, r6
 8005f0c:	4642      	mov	r2, r8
 8005f0e:	4628      	mov	r0, r5
 8005f10:	47b8      	blx	r7
 8005f12:	3001      	adds	r0, #1
 8005f14:	d1c0      	bne.n	8005e98 <_printf_float+0x2f4>
 8005f16:	e6a0      	b.n	8005c5a <_printf_float+0xb6>
 8005f18:	2301      	movs	r3, #1
 8005f1a:	4631      	mov	r1, r6
 8005f1c:	4628      	mov	r0, r5
 8005f1e:	920b      	str	r2, [sp, #44]	; 0x2c
 8005f20:	47b8      	blx	r7
 8005f22:	3001      	adds	r0, #1
 8005f24:	f43f ae99 	beq.w	8005c5a <_printf_float+0xb6>
 8005f28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005f2a:	f10b 0b01 	add.w	fp, fp, #1
 8005f2e:	e7b9      	b.n	8005ea4 <_printf_float+0x300>
 8005f30:	4631      	mov	r1, r6
 8005f32:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f36:	4628      	mov	r0, r5
 8005f38:	47b8      	blx	r7
 8005f3a:	3001      	adds	r0, #1
 8005f3c:	d1bf      	bne.n	8005ebe <_printf_float+0x31a>
 8005f3e:	e68c      	b.n	8005c5a <_printf_float+0xb6>
 8005f40:	464b      	mov	r3, r9
 8005f42:	4631      	mov	r1, r6
 8005f44:	4628      	mov	r0, r5
 8005f46:	eb08 020a 	add.w	r2, r8, sl
 8005f4a:	47b8      	blx	r7
 8005f4c:	3001      	adds	r0, #1
 8005f4e:	d1c2      	bne.n	8005ed6 <_printf_float+0x332>
 8005f50:	e683      	b.n	8005c5a <_printf_float+0xb6>
 8005f52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f54:	2a01      	cmp	r2, #1
 8005f56:	dc01      	bgt.n	8005f5c <_printf_float+0x3b8>
 8005f58:	07db      	lsls	r3, r3, #31
 8005f5a:	d537      	bpl.n	8005fcc <_printf_float+0x428>
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	4642      	mov	r2, r8
 8005f60:	4631      	mov	r1, r6
 8005f62:	4628      	mov	r0, r5
 8005f64:	47b8      	blx	r7
 8005f66:	3001      	adds	r0, #1
 8005f68:	f43f ae77 	beq.w	8005c5a <_printf_float+0xb6>
 8005f6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f70:	4631      	mov	r1, r6
 8005f72:	4628      	mov	r0, r5
 8005f74:	47b8      	blx	r7
 8005f76:	3001      	adds	r0, #1
 8005f78:	f43f ae6f 	beq.w	8005c5a <_printf_float+0xb6>
 8005f7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005f80:	2200      	movs	r2, #0
 8005f82:	2300      	movs	r3, #0
 8005f84:	f7fa fd10 	bl	80009a8 <__aeabi_dcmpeq>
 8005f88:	b9d8      	cbnz	r0, 8005fc2 <_printf_float+0x41e>
 8005f8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f8c:	f108 0201 	add.w	r2, r8, #1
 8005f90:	3b01      	subs	r3, #1
 8005f92:	4631      	mov	r1, r6
 8005f94:	4628      	mov	r0, r5
 8005f96:	47b8      	blx	r7
 8005f98:	3001      	adds	r0, #1
 8005f9a:	d10e      	bne.n	8005fba <_printf_float+0x416>
 8005f9c:	e65d      	b.n	8005c5a <_printf_float+0xb6>
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	464a      	mov	r2, r9
 8005fa2:	4631      	mov	r1, r6
 8005fa4:	4628      	mov	r0, r5
 8005fa6:	47b8      	blx	r7
 8005fa8:	3001      	adds	r0, #1
 8005faa:	f43f ae56 	beq.w	8005c5a <_printf_float+0xb6>
 8005fae:	f108 0801 	add.w	r8, r8, #1
 8005fb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005fb4:	3b01      	subs	r3, #1
 8005fb6:	4543      	cmp	r3, r8
 8005fb8:	dcf1      	bgt.n	8005f9e <_printf_float+0x3fa>
 8005fba:	4653      	mov	r3, sl
 8005fbc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005fc0:	e6e0      	b.n	8005d84 <_printf_float+0x1e0>
 8005fc2:	f04f 0800 	mov.w	r8, #0
 8005fc6:	f104 091a 	add.w	r9, r4, #26
 8005fca:	e7f2      	b.n	8005fb2 <_printf_float+0x40e>
 8005fcc:	2301      	movs	r3, #1
 8005fce:	4642      	mov	r2, r8
 8005fd0:	e7df      	b.n	8005f92 <_printf_float+0x3ee>
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	464a      	mov	r2, r9
 8005fd6:	4631      	mov	r1, r6
 8005fd8:	4628      	mov	r0, r5
 8005fda:	47b8      	blx	r7
 8005fdc:	3001      	adds	r0, #1
 8005fde:	f43f ae3c 	beq.w	8005c5a <_printf_float+0xb6>
 8005fe2:	f108 0801 	add.w	r8, r8, #1
 8005fe6:	68e3      	ldr	r3, [r4, #12]
 8005fe8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005fea:	1a5b      	subs	r3, r3, r1
 8005fec:	4543      	cmp	r3, r8
 8005fee:	dcf0      	bgt.n	8005fd2 <_printf_float+0x42e>
 8005ff0:	e6fd      	b.n	8005dee <_printf_float+0x24a>
 8005ff2:	f04f 0800 	mov.w	r8, #0
 8005ff6:	f104 0919 	add.w	r9, r4, #25
 8005ffa:	e7f4      	b.n	8005fe6 <_printf_float+0x442>

08005ffc <_printf_common>:
 8005ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006000:	4616      	mov	r6, r2
 8006002:	4699      	mov	r9, r3
 8006004:	688a      	ldr	r2, [r1, #8]
 8006006:	690b      	ldr	r3, [r1, #16]
 8006008:	4607      	mov	r7, r0
 800600a:	4293      	cmp	r3, r2
 800600c:	bfb8      	it	lt
 800600e:	4613      	movlt	r3, r2
 8006010:	6033      	str	r3, [r6, #0]
 8006012:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006016:	460c      	mov	r4, r1
 8006018:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800601c:	b10a      	cbz	r2, 8006022 <_printf_common+0x26>
 800601e:	3301      	adds	r3, #1
 8006020:	6033      	str	r3, [r6, #0]
 8006022:	6823      	ldr	r3, [r4, #0]
 8006024:	0699      	lsls	r1, r3, #26
 8006026:	bf42      	ittt	mi
 8006028:	6833      	ldrmi	r3, [r6, #0]
 800602a:	3302      	addmi	r3, #2
 800602c:	6033      	strmi	r3, [r6, #0]
 800602e:	6825      	ldr	r5, [r4, #0]
 8006030:	f015 0506 	ands.w	r5, r5, #6
 8006034:	d106      	bne.n	8006044 <_printf_common+0x48>
 8006036:	f104 0a19 	add.w	sl, r4, #25
 800603a:	68e3      	ldr	r3, [r4, #12]
 800603c:	6832      	ldr	r2, [r6, #0]
 800603e:	1a9b      	subs	r3, r3, r2
 8006040:	42ab      	cmp	r3, r5
 8006042:	dc28      	bgt.n	8006096 <_printf_common+0x9a>
 8006044:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006048:	1e13      	subs	r3, r2, #0
 800604a:	6822      	ldr	r2, [r4, #0]
 800604c:	bf18      	it	ne
 800604e:	2301      	movne	r3, #1
 8006050:	0692      	lsls	r2, r2, #26
 8006052:	d42d      	bmi.n	80060b0 <_printf_common+0xb4>
 8006054:	4649      	mov	r1, r9
 8006056:	4638      	mov	r0, r7
 8006058:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800605c:	47c0      	blx	r8
 800605e:	3001      	adds	r0, #1
 8006060:	d020      	beq.n	80060a4 <_printf_common+0xa8>
 8006062:	6823      	ldr	r3, [r4, #0]
 8006064:	68e5      	ldr	r5, [r4, #12]
 8006066:	f003 0306 	and.w	r3, r3, #6
 800606a:	2b04      	cmp	r3, #4
 800606c:	bf18      	it	ne
 800606e:	2500      	movne	r5, #0
 8006070:	6832      	ldr	r2, [r6, #0]
 8006072:	f04f 0600 	mov.w	r6, #0
 8006076:	68a3      	ldr	r3, [r4, #8]
 8006078:	bf08      	it	eq
 800607a:	1aad      	subeq	r5, r5, r2
 800607c:	6922      	ldr	r2, [r4, #16]
 800607e:	bf08      	it	eq
 8006080:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006084:	4293      	cmp	r3, r2
 8006086:	bfc4      	itt	gt
 8006088:	1a9b      	subgt	r3, r3, r2
 800608a:	18ed      	addgt	r5, r5, r3
 800608c:	341a      	adds	r4, #26
 800608e:	42b5      	cmp	r5, r6
 8006090:	d11a      	bne.n	80060c8 <_printf_common+0xcc>
 8006092:	2000      	movs	r0, #0
 8006094:	e008      	b.n	80060a8 <_printf_common+0xac>
 8006096:	2301      	movs	r3, #1
 8006098:	4652      	mov	r2, sl
 800609a:	4649      	mov	r1, r9
 800609c:	4638      	mov	r0, r7
 800609e:	47c0      	blx	r8
 80060a0:	3001      	adds	r0, #1
 80060a2:	d103      	bne.n	80060ac <_printf_common+0xb0>
 80060a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060ac:	3501      	adds	r5, #1
 80060ae:	e7c4      	b.n	800603a <_printf_common+0x3e>
 80060b0:	2030      	movs	r0, #48	; 0x30
 80060b2:	18e1      	adds	r1, r4, r3
 80060b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80060b8:	1c5a      	adds	r2, r3, #1
 80060ba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80060be:	4422      	add	r2, r4
 80060c0:	3302      	adds	r3, #2
 80060c2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80060c6:	e7c5      	b.n	8006054 <_printf_common+0x58>
 80060c8:	2301      	movs	r3, #1
 80060ca:	4622      	mov	r2, r4
 80060cc:	4649      	mov	r1, r9
 80060ce:	4638      	mov	r0, r7
 80060d0:	47c0      	blx	r8
 80060d2:	3001      	adds	r0, #1
 80060d4:	d0e6      	beq.n	80060a4 <_printf_common+0xa8>
 80060d6:	3601      	adds	r6, #1
 80060d8:	e7d9      	b.n	800608e <_printf_common+0x92>
	...

080060dc <_printf_i>:
 80060dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060e0:	460c      	mov	r4, r1
 80060e2:	7e27      	ldrb	r7, [r4, #24]
 80060e4:	4691      	mov	r9, r2
 80060e6:	2f78      	cmp	r7, #120	; 0x78
 80060e8:	4680      	mov	r8, r0
 80060ea:	469a      	mov	sl, r3
 80060ec:	990c      	ldr	r1, [sp, #48]	; 0x30
 80060ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060f2:	d807      	bhi.n	8006104 <_printf_i+0x28>
 80060f4:	2f62      	cmp	r7, #98	; 0x62
 80060f6:	d80a      	bhi.n	800610e <_printf_i+0x32>
 80060f8:	2f00      	cmp	r7, #0
 80060fa:	f000 80d9 	beq.w	80062b0 <_printf_i+0x1d4>
 80060fe:	2f58      	cmp	r7, #88	; 0x58
 8006100:	f000 80a4 	beq.w	800624c <_printf_i+0x170>
 8006104:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006108:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800610c:	e03a      	b.n	8006184 <_printf_i+0xa8>
 800610e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006112:	2b15      	cmp	r3, #21
 8006114:	d8f6      	bhi.n	8006104 <_printf_i+0x28>
 8006116:	a001      	add	r0, pc, #4	; (adr r0, 800611c <_printf_i+0x40>)
 8006118:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800611c:	08006175 	.word	0x08006175
 8006120:	08006189 	.word	0x08006189
 8006124:	08006105 	.word	0x08006105
 8006128:	08006105 	.word	0x08006105
 800612c:	08006105 	.word	0x08006105
 8006130:	08006105 	.word	0x08006105
 8006134:	08006189 	.word	0x08006189
 8006138:	08006105 	.word	0x08006105
 800613c:	08006105 	.word	0x08006105
 8006140:	08006105 	.word	0x08006105
 8006144:	08006105 	.word	0x08006105
 8006148:	08006297 	.word	0x08006297
 800614c:	080061b9 	.word	0x080061b9
 8006150:	08006279 	.word	0x08006279
 8006154:	08006105 	.word	0x08006105
 8006158:	08006105 	.word	0x08006105
 800615c:	080062b9 	.word	0x080062b9
 8006160:	08006105 	.word	0x08006105
 8006164:	080061b9 	.word	0x080061b9
 8006168:	08006105 	.word	0x08006105
 800616c:	08006105 	.word	0x08006105
 8006170:	08006281 	.word	0x08006281
 8006174:	680b      	ldr	r3, [r1, #0]
 8006176:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800617a:	1d1a      	adds	r2, r3, #4
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	600a      	str	r2, [r1, #0]
 8006180:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006184:	2301      	movs	r3, #1
 8006186:	e0a4      	b.n	80062d2 <_printf_i+0x1f6>
 8006188:	6825      	ldr	r5, [r4, #0]
 800618a:	6808      	ldr	r0, [r1, #0]
 800618c:	062e      	lsls	r6, r5, #24
 800618e:	f100 0304 	add.w	r3, r0, #4
 8006192:	d50a      	bpl.n	80061aa <_printf_i+0xce>
 8006194:	6805      	ldr	r5, [r0, #0]
 8006196:	600b      	str	r3, [r1, #0]
 8006198:	2d00      	cmp	r5, #0
 800619a:	da03      	bge.n	80061a4 <_printf_i+0xc8>
 800619c:	232d      	movs	r3, #45	; 0x2d
 800619e:	426d      	negs	r5, r5
 80061a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061a4:	230a      	movs	r3, #10
 80061a6:	485e      	ldr	r0, [pc, #376]	; (8006320 <_printf_i+0x244>)
 80061a8:	e019      	b.n	80061de <_printf_i+0x102>
 80061aa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80061ae:	6805      	ldr	r5, [r0, #0]
 80061b0:	600b      	str	r3, [r1, #0]
 80061b2:	bf18      	it	ne
 80061b4:	b22d      	sxthne	r5, r5
 80061b6:	e7ef      	b.n	8006198 <_printf_i+0xbc>
 80061b8:	680b      	ldr	r3, [r1, #0]
 80061ba:	6825      	ldr	r5, [r4, #0]
 80061bc:	1d18      	adds	r0, r3, #4
 80061be:	6008      	str	r0, [r1, #0]
 80061c0:	0628      	lsls	r0, r5, #24
 80061c2:	d501      	bpl.n	80061c8 <_printf_i+0xec>
 80061c4:	681d      	ldr	r5, [r3, #0]
 80061c6:	e002      	b.n	80061ce <_printf_i+0xf2>
 80061c8:	0669      	lsls	r1, r5, #25
 80061ca:	d5fb      	bpl.n	80061c4 <_printf_i+0xe8>
 80061cc:	881d      	ldrh	r5, [r3, #0]
 80061ce:	2f6f      	cmp	r7, #111	; 0x6f
 80061d0:	bf0c      	ite	eq
 80061d2:	2308      	moveq	r3, #8
 80061d4:	230a      	movne	r3, #10
 80061d6:	4852      	ldr	r0, [pc, #328]	; (8006320 <_printf_i+0x244>)
 80061d8:	2100      	movs	r1, #0
 80061da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80061de:	6866      	ldr	r6, [r4, #4]
 80061e0:	2e00      	cmp	r6, #0
 80061e2:	bfa8      	it	ge
 80061e4:	6821      	ldrge	r1, [r4, #0]
 80061e6:	60a6      	str	r6, [r4, #8]
 80061e8:	bfa4      	itt	ge
 80061ea:	f021 0104 	bicge.w	r1, r1, #4
 80061ee:	6021      	strge	r1, [r4, #0]
 80061f0:	b90d      	cbnz	r5, 80061f6 <_printf_i+0x11a>
 80061f2:	2e00      	cmp	r6, #0
 80061f4:	d04d      	beq.n	8006292 <_printf_i+0x1b6>
 80061f6:	4616      	mov	r6, r2
 80061f8:	fbb5 f1f3 	udiv	r1, r5, r3
 80061fc:	fb03 5711 	mls	r7, r3, r1, r5
 8006200:	5dc7      	ldrb	r7, [r0, r7]
 8006202:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006206:	462f      	mov	r7, r5
 8006208:	42bb      	cmp	r3, r7
 800620a:	460d      	mov	r5, r1
 800620c:	d9f4      	bls.n	80061f8 <_printf_i+0x11c>
 800620e:	2b08      	cmp	r3, #8
 8006210:	d10b      	bne.n	800622a <_printf_i+0x14e>
 8006212:	6823      	ldr	r3, [r4, #0]
 8006214:	07df      	lsls	r7, r3, #31
 8006216:	d508      	bpl.n	800622a <_printf_i+0x14e>
 8006218:	6923      	ldr	r3, [r4, #16]
 800621a:	6861      	ldr	r1, [r4, #4]
 800621c:	4299      	cmp	r1, r3
 800621e:	bfde      	ittt	le
 8006220:	2330      	movle	r3, #48	; 0x30
 8006222:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006226:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800622a:	1b92      	subs	r2, r2, r6
 800622c:	6122      	str	r2, [r4, #16]
 800622e:	464b      	mov	r3, r9
 8006230:	4621      	mov	r1, r4
 8006232:	4640      	mov	r0, r8
 8006234:	f8cd a000 	str.w	sl, [sp]
 8006238:	aa03      	add	r2, sp, #12
 800623a:	f7ff fedf 	bl	8005ffc <_printf_common>
 800623e:	3001      	adds	r0, #1
 8006240:	d14c      	bne.n	80062dc <_printf_i+0x200>
 8006242:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006246:	b004      	add	sp, #16
 8006248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800624c:	4834      	ldr	r0, [pc, #208]	; (8006320 <_printf_i+0x244>)
 800624e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006252:	680e      	ldr	r6, [r1, #0]
 8006254:	6823      	ldr	r3, [r4, #0]
 8006256:	f856 5b04 	ldr.w	r5, [r6], #4
 800625a:	061f      	lsls	r7, r3, #24
 800625c:	600e      	str	r6, [r1, #0]
 800625e:	d514      	bpl.n	800628a <_printf_i+0x1ae>
 8006260:	07d9      	lsls	r1, r3, #31
 8006262:	bf44      	itt	mi
 8006264:	f043 0320 	orrmi.w	r3, r3, #32
 8006268:	6023      	strmi	r3, [r4, #0]
 800626a:	b91d      	cbnz	r5, 8006274 <_printf_i+0x198>
 800626c:	6823      	ldr	r3, [r4, #0]
 800626e:	f023 0320 	bic.w	r3, r3, #32
 8006272:	6023      	str	r3, [r4, #0]
 8006274:	2310      	movs	r3, #16
 8006276:	e7af      	b.n	80061d8 <_printf_i+0xfc>
 8006278:	6823      	ldr	r3, [r4, #0]
 800627a:	f043 0320 	orr.w	r3, r3, #32
 800627e:	6023      	str	r3, [r4, #0]
 8006280:	2378      	movs	r3, #120	; 0x78
 8006282:	4828      	ldr	r0, [pc, #160]	; (8006324 <_printf_i+0x248>)
 8006284:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006288:	e7e3      	b.n	8006252 <_printf_i+0x176>
 800628a:	065e      	lsls	r6, r3, #25
 800628c:	bf48      	it	mi
 800628e:	b2ad      	uxthmi	r5, r5
 8006290:	e7e6      	b.n	8006260 <_printf_i+0x184>
 8006292:	4616      	mov	r6, r2
 8006294:	e7bb      	b.n	800620e <_printf_i+0x132>
 8006296:	680b      	ldr	r3, [r1, #0]
 8006298:	6826      	ldr	r6, [r4, #0]
 800629a:	1d1d      	adds	r5, r3, #4
 800629c:	6960      	ldr	r0, [r4, #20]
 800629e:	600d      	str	r5, [r1, #0]
 80062a0:	0635      	lsls	r5, r6, #24
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	d501      	bpl.n	80062aa <_printf_i+0x1ce>
 80062a6:	6018      	str	r0, [r3, #0]
 80062a8:	e002      	b.n	80062b0 <_printf_i+0x1d4>
 80062aa:	0671      	lsls	r1, r6, #25
 80062ac:	d5fb      	bpl.n	80062a6 <_printf_i+0x1ca>
 80062ae:	8018      	strh	r0, [r3, #0]
 80062b0:	2300      	movs	r3, #0
 80062b2:	4616      	mov	r6, r2
 80062b4:	6123      	str	r3, [r4, #16]
 80062b6:	e7ba      	b.n	800622e <_printf_i+0x152>
 80062b8:	680b      	ldr	r3, [r1, #0]
 80062ba:	1d1a      	adds	r2, r3, #4
 80062bc:	600a      	str	r2, [r1, #0]
 80062be:	681e      	ldr	r6, [r3, #0]
 80062c0:	2100      	movs	r1, #0
 80062c2:	4630      	mov	r0, r6
 80062c4:	6862      	ldr	r2, [r4, #4]
 80062c6:	f000 fed9 	bl	800707c <memchr>
 80062ca:	b108      	cbz	r0, 80062d0 <_printf_i+0x1f4>
 80062cc:	1b80      	subs	r0, r0, r6
 80062ce:	6060      	str	r0, [r4, #4]
 80062d0:	6863      	ldr	r3, [r4, #4]
 80062d2:	6123      	str	r3, [r4, #16]
 80062d4:	2300      	movs	r3, #0
 80062d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062da:	e7a8      	b.n	800622e <_printf_i+0x152>
 80062dc:	4632      	mov	r2, r6
 80062de:	4649      	mov	r1, r9
 80062e0:	4640      	mov	r0, r8
 80062e2:	6923      	ldr	r3, [r4, #16]
 80062e4:	47d0      	blx	sl
 80062e6:	3001      	adds	r0, #1
 80062e8:	d0ab      	beq.n	8006242 <_printf_i+0x166>
 80062ea:	6823      	ldr	r3, [r4, #0]
 80062ec:	079b      	lsls	r3, r3, #30
 80062ee:	d413      	bmi.n	8006318 <_printf_i+0x23c>
 80062f0:	68e0      	ldr	r0, [r4, #12]
 80062f2:	9b03      	ldr	r3, [sp, #12]
 80062f4:	4298      	cmp	r0, r3
 80062f6:	bfb8      	it	lt
 80062f8:	4618      	movlt	r0, r3
 80062fa:	e7a4      	b.n	8006246 <_printf_i+0x16a>
 80062fc:	2301      	movs	r3, #1
 80062fe:	4632      	mov	r2, r6
 8006300:	4649      	mov	r1, r9
 8006302:	4640      	mov	r0, r8
 8006304:	47d0      	blx	sl
 8006306:	3001      	adds	r0, #1
 8006308:	d09b      	beq.n	8006242 <_printf_i+0x166>
 800630a:	3501      	adds	r5, #1
 800630c:	68e3      	ldr	r3, [r4, #12]
 800630e:	9903      	ldr	r1, [sp, #12]
 8006310:	1a5b      	subs	r3, r3, r1
 8006312:	42ab      	cmp	r3, r5
 8006314:	dcf2      	bgt.n	80062fc <_printf_i+0x220>
 8006316:	e7eb      	b.n	80062f0 <_printf_i+0x214>
 8006318:	2500      	movs	r5, #0
 800631a:	f104 0619 	add.w	r6, r4, #25
 800631e:	e7f5      	b.n	800630c <_printf_i+0x230>
 8006320:	0800b9f6 	.word	0x0800b9f6
 8006324:	0800ba07 	.word	0x0800ba07

08006328 <siprintf>:
 8006328:	b40e      	push	{r1, r2, r3}
 800632a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800632e:	b500      	push	{lr}
 8006330:	b09c      	sub	sp, #112	; 0x70
 8006332:	ab1d      	add	r3, sp, #116	; 0x74
 8006334:	9002      	str	r0, [sp, #8]
 8006336:	9006      	str	r0, [sp, #24]
 8006338:	9107      	str	r1, [sp, #28]
 800633a:	9104      	str	r1, [sp, #16]
 800633c:	4808      	ldr	r0, [pc, #32]	; (8006360 <siprintf+0x38>)
 800633e:	4909      	ldr	r1, [pc, #36]	; (8006364 <siprintf+0x3c>)
 8006340:	f853 2b04 	ldr.w	r2, [r3], #4
 8006344:	9105      	str	r1, [sp, #20]
 8006346:	6800      	ldr	r0, [r0, #0]
 8006348:	a902      	add	r1, sp, #8
 800634a:	9301      	str	r3, [sp, #4]
 800634c:	f001 fb36 	bl	80079bc <_svfiprintf_r>
 8006350:	2200      	movs	r2, #0
 8006352:	9b02      	ldr	r3, [sp, #8]
 8006354:	701a      	strb	r2, [r3, #0]
 8006356:	b01c      	add	sp, #112	; 0x70
 8006358:	f85d eb04 	ldr.w	lr, [sp], #4
 800635c:	b003      	add	sp, #12
 800635e:	4770      	bx	lr
 8006360:	200000a0 	.word	0x200000a0
 8006364:	ffff0208 	.word	0xffff0208

08006368 <quorem>:
 8006368:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800636c:	6903      	ldr	r3, [r0, #16]
 800636e:	690c      	ldr	r4, [r1, #16]
 8006370:	4607      	mov	r7, r0
 8006372:	42a3      	cmp	r3, r4
 8006374:	f2c0 8083 	blt.w	800647e <quorem+0x116>
 8006378:	3c01      	subs	r4, #1
 800637a:	f100 0514 	add.w	r5, r0, #20
 800637e:	f101 0814 	add.w	r8, r1, #20
 8006382:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006386:	9301      	str	r3, [sp, #4]
 8006388:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800638c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006390:	3301      	adds	r3, #1
 8006392:	429a      	cmp	r2, r3
 8006394:	fbb2 f6f3 	udiv	r6, r2, r3
 8006398:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800639c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80063a0:	d332      	bcc.n	8006408 <quorem+0xa0>
 80063a2:	f04f 0e00 	mov.w	lr, #0
 80063a6:	4640      	mov	r0, r8
 80063a8:	46ac      	mov	ip, r5
 80063aa:	46f2      	mov	sl, lr
 80063ac:	f850 2b04 	ldr.w	r2, [r0], #4
 80063b0:	b293      	uxth	r3, r2
 80063b2:	fb06 e303 	mla	r3, r6, r3, lr
 80063b6:	0c12      	lsrs	r2, r2, #16
 80063b8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80063bc:	fb06 e202 	mla	r2, r6, r2, lr
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	ebaa 0303 	sub.w	r3, sl, r3
 80063c6:	f8dc a000 	ldr.w	sl, [ip]
 80063ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80063ce:	fa1f fa8a 	uxth.w	sl, sl
 80063d2:	4453      	add	r3, sl
 80063d4:	fa1f fa82 	uxth.w	sl, r2
 80063d8:	f8dc 2000 	ldr.w	r2, [ip]
 80063dc:	4581      	cmp	r9, r0
 80063de:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80063e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80063ec:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80063f0:	f84c 3b04 	str.w	r3, [ip], #4
 80063f4:	d2da      	bcs.n	80063ac <quorem+0x44>
 80063f6:	f855 300b 	ldr.w	r3, [r5, fp]
 80063fa:	b92b      	cbnz	r3, 8006408 <quorem+0xa0>
 80063fc:	9b01      	ldr	r3, [sp, #4]
 80063fe:	3b04      	subs	r3, #4
 8006400:	429d      	cmp	r5, r3
 8006402:	461a      	mov	r2, r3
 8006404:	d32f      	bcc.n	8006466 <quorem+0xfe>
 8006406:	613c      	str	r4, [r7, #16]
 8006408:	4638      	mov	r0, r7
 800640a:	f001 f8bf 	bl	800758c <__mcmp>
 800640e:	2800      	cmp	r0, #0
 8006410:	db25      	blt.n	800645e <quorem+0xf6>
 8006412:	4628      	mov	r0, r5
 8006414:	f04f 0c00 	mov.w	ip, #0
 8006418:	3601      	adds	r6, #1
 800641a:	f858 1b04 	ldr.w	r1, [r8], #4
 800641e:	f8d0 e000 	ldr.w	lr, [r0]
 8006422:	b28b      	uxth	r3, r1
 8006424:	ebac 0303 	sub.w	r3, ip, r3
 8006428:	fa1f f28e 	uxth.w	r2, lr
 800642c:	4413      	add	r3, r2
 800642e:	0c0a      	lsrs	r2, r1, #16
 8006430:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006434:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006438:	b29b      	uxth	r3, r3
 800643a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800643e:	45c1      	cmp	r9, r8
 8006440:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006444:	f840 3b04 	str.w	r3, [r0], #4
 8006448:	d2e7      	bcs.n	800641a <quorem+0xb2>
 800644a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800644e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006452:	b922      	cbnz	r2, 800645e <quorem+0xf6>
 8006454:	3b04      	subs	r3, #4
 8006456:	429d      	cmp	r5, r3
 8006458:	461a      	mov	r2, r3
 800645a:	d30a      	bcc.n	8006472 <quorem+0x10a>
 800645c:	613c      	str	r4, [r7, #16]
 800645e:	4630      	mov	r0, r6
 8006460:	b003      	add	sp, #12
 8006462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006466:	6812      	ldr	r2, [r2, #0]
 8006468:	3b04      	subs	r3, #4
 800646a:	2a00      	cmp	r2, #0
 800646c:	d1cb      	bne.n	8006406 <quorem+0x9e>
 800646e:	3c01      	subs	r4, #1
 8006470:	e7c6      	b.n	8006400 <quorem+0x98>
 8006472:	6812      	ldr	r2, [r2, #0]
 8006474:	3b04      	subs	r3, #4
 8006476:	2a00      	cmp	r2, #0
 8006478:	d1f0      	bne.n	800645c <quorem+0xf4>
 800647a:	3c01      	subs	r4, #1
 800647c:	e7eb      	b.n	8006456 <quorem+0xee>
 800647e:	2000      	movs	r0, #0
 8006480:	e7ee      	b.n	8006460 <quorem+0xf8>
 8006482:	0000      	movs	r0, r0
 8006484:	0000      	movs	r0, r0
	...

08006488 <_dtoa_r>:
 8006488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800648c:	4616      	mov	r6, r2
 800648e:	461f      	mov	r7, r3
 8006490:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006492:	b099      	sub	sp, #100	; 0x64
 8006494:	4605      	mov	r5, r0
 8006496:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800649a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800649e:	b974      	cbnz	r4, 80064be <_dtoa_r+0x36>
 80064a0:	2010      	movs	r0, #16
 80064a2:	f000 fde3 	bl	800706c <malloc>
 80064a6:	4602      	mov	r2, r0
 80064a8:	6268      	str	r0, [r5, #36]	; 0x24
 80064aa:	b920      	cbnz	r0, 80064b6 <_dtoa_r+0x2e>
 80064ac:	21ea      	movs	r1, #234	; 0xea
 80064ae:	4bae      	ldr	r3, [pc, #696]	; (8006768 <_dtoa_r+0x2e0>)
 80064b0:	48ae      	ldr	r0, [pc, #696]	; (800676c <_dtoa_r+0x2e4>)
 80064b2:	f001 fb93 	bl	8007bdc <__assert_func>
 80064b6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80064ba:	6004      	str	r4, [r0, #0]
 80064bc:	60c4      	str	r4, [r0, #12]
 80064be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80064c0:	6819      	ldr	r1, [r3, #0]
 80064c2:	b151      	cbz	r1, 80064da <_dtoa_r+0x52>
 80064c4:	685a      	ldr	r2, [r3, #4]
 80064c6:	2301      	movs	r3, #1
 80064c8:	4093      	lsls	r3, r2
 80064ca:	604a      	str	r2, [r1, #4]
 80064cc:	608b      	str	r3, [r1, #8]
 80064ce:	4628      	mov	r0, r5
 80064d0:	f000 fe22 	bl	8007118 <_Bfree>
 80064d4:	2200      	movs	r2, #0
 80064d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80064d8:	601a      	str	r2, [r3, #0]
 80064da:	1e3b      	subs	r3, r7, #0
 80064dc:	bfaf      	iteee	ge
 80064de:	2300      	movge	r3, #0
 80064e0:	2201      	movlt	r2, #1
 80064e2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80064e6:	9305      	strlt	r3, [sp, #20]
 80064e8:	bfa8      	it	ge
 80064ea:	f8c8 3000 	strge.w	r3, [r8]
 80064ee:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80064f2:	4b9f      	ldr	r3, [pc, #636]	; (8006770 <_dtoa_r+0x2e8>)
 80064f4:	bfb8      	it	lt
 80064f6:	f8c8 2000 	strlt.w	r2, [r8]
 80064fa:	ea33 0309 	bics.w	r3, r3, r9
 80064fe:	d119      	bne.n	8006534 <_dtoa_r+0xac>
 8006500:	f242 730f 	movw	r3, #9999	; 0x270f
 8006504:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006506:	6013      	str	r3, [r2, #0]
 8006508:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800650c:	4333      	orrs	r3, r6
 800650e:	f000 8580 	beq.w	8007012 <_dtoa_r+0xb8a>
 8006512:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006514:	b953      	cbnz	r3, 800652c <_dtoa_r+0xa4>
 8006516:	4b97      	ldr	r3, [pc, #604]	; (8006774 <_dtoa_r+0x2ec>)
 8006518:	e022      	b.n	8006560 <_dtoa_r+0xd8>
 800651a:	4b97      	ldr	r3, [pc, #604]	; (8006778 <_dtoa_r+0x2f0>)
 800651c:	9308      	str	r3, [sp, #32]
 800651e:	3308      	adds	r3, #8
 8006520:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006522:	6013      	str	r3, [r2, #0]
 8006524:	9808      	ldr	r0, [sp, #32]
 8006526:	b019      	add	sp, #100	; 0x64
 8006528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800652c:	4b91      	ldr	r3, [pc, #580]	; (8006774 <_dtoa_r+0x2ec>)
 800652e:	9308      	str	r3, [sp, #32]
 8006530:	3303      	adds	r3, #3
 8006532:	e7f5      	b.n	8006520 <_dtoa_r+0x98>
 8006534:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006538:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800653c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006540:	2200      	movs	r2, #0
 8006542:	2300      	movs	r3, #0
 8006544:	f7fa fa30 	bl	80009a8 <__aeabi_dcmpeq>
 8006548:	4680      	mov	r8, r0
 800654a:	b158      	cbz	r0, 8006564 <_dtoa_r+0xdc>
 800654c:	2301      	movs	r3, #1
 800654e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006550:	6013      	str	r3, [r2, #0]
 8006552:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006554:	2b00      	cmp	r3, #0
 8006556:	f000 8559 	beq.w	800700c <_dtoa_r+0xb84>
 800655a:	4888      	ldr	r0, [pc, #544]	; (800677c <_dtoa_r+0x2f4>)
 800655c:	6018      	str	r0, [r3, #0]
 800655e:	1e43      	subs	r3, r0, #1
 8006560:	9308      	str	r3, [sp, #32]
 8006562:	e7df      	b.n	8006524 <_dtoa_r+0x9c>
 8006564:	ab16      	add	r3, sp, #88	; 0x58
 8006566:	9301      	str	r3, [sp, #4]
 8006568:	ab17      	add	r3, sp, #92	; 0x5c
 800656a:	9300      	str	r3, [sp, #0]
 800656c:	4628      	mov	r0, r5
 800656e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006572:	f001 f8b7 	bl	80076e4 <__d2b>
 8006576:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800657a:	4682      	mov	sl, r0
 800657c:	2c00      	cmp	r4, #0
 800657e:	d07e      	beq.n	800667e <_dtoa_r+0x1f6>
 8006580:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006584:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006586:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800658a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800658e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006592:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006596:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800659a:	2200      	movs	r2, #0
 800659c:	4b78      	ldr	r3, [pc, #480]	; (8006780 <_dtoa_r+0x2f8>)
 800659e:	f7f9 fde3 	bl	8000168 <__aeabi_dsub>
 80065a2:	a36b      	add	r3, pc, #428	; (adr r3, 8006750 <_dtoa_r+0x2c8>)
 80065a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a8:	f7f9 ff96 	bl	80004d8 <__aeabi_dmul>
 80065ac:	a36a      	add	r3, pc, #424	; (adr r3, 8006758 <_dtoa_r+0x2d0>)
 80065ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b2:	f7f9 fddb 	bl	800016c <__adddf3>
 80065b6:	4606      	mov	r6, r0
 80065b8:	4620      	mov	r0, r4
 80065ba:	460f      	mov	r7, r1
 80065bc:	f7f9 ff22 	bl	8000404 <__aeabi_i2d>
 80065c0:	a367      	add	r3, pc, #412	; (adr r3, 8006760 <_dtoa_r+0x2d8>)
 80065c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c6:	f7f9 ff87 	bl	80004d8 <__aeabi_dmul>
 80065ca:	4602      	mov	r2, r0
 80065cc:	460b      	mov	r3, r1
 80065ce:	4630      	mov	r0, r6
 80065d0:	4639      	mov	r1, r7
 80065d2:	f7f9 fdcb 	bl	800016c <__adddf3>
 80065d6:	4606      	mov	r6, r0
 80065d8:	460f      	mov	r7, r1
 80065da:	f7fa fa2d 	bl	8000a38 <__aeabi_d2iz>
 80065de:	2200      	movs	r2, #0
 80065e0:	4681      	mov	r9, r0
 80065e2:	2300      	movs	r3, #0
 80065e4:	4630      	mov	r0, r6
 80065e6:	4639      	mov	r1, r7
 80065e8:	f7fa f9e8 	bl	80009bc <__aeabi_dcmplt>
 80065ec:	b148      	cbz	r0, 8006602 <_dtoa_r+0x17a>
 80065ee:	4648      	mov	r0, r9
 80065f0:	f7f9 ff08 	bl	8000404 <__aeabi_i2d>
 80065f4:	4632      	mov	r2, r6
 80065f6:	463b      	mov	r3, r7
 80065f8:	f7fa f9d6 	bl	80009a8 <__aeabi_dcmpeq>
 80065fc:	b908      	cbnz	r0, 8006602 <_dtoa_r+0x17a>
 80065fe:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8006602:	f1b9 0f16 	cmp.w	r9, #22
 8006606:	d857      	bhi.n	80066b8 <_dtoa_r+0x230>
 8006608:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800660c:	4b5d      	ldr	r3, [pc, #372]	; (8006784 <_dtoa_r+0x2fc>)
 800660e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006616:	f7fa f9d1 	bl	80009bc <__aeabi_dcmplt>
 800661a:	2800      	cmp	r0, #0
 800661c:	d04e      	beq.n	80066bc <_dtoa_r+0x234>
 800661e:	2300      	movs	r3, #0
 8006620:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8006624:	930f      	str	r3, [sp, #60]	; 0x3c
 8006626:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006628:	1b1c      	subs	r4, r3, r4
 800662a:	1e63      	subs	r3, r4, #1
 800662c:	9309      	str	r3, [sp, #36]	; 0x24
 800662e:	bf49      	itett	mi
 8006630:	f1c4 0301 	rsbmi	r3, r4, #1
 8006634:	2300      	movpl	r3, #0
 8006636:	9306      	strmi	r3, [sp, #24]
 8006638:	2300      	movmi	r3, #0
 800663a:	bf54      	ite	pl
 800663c:	9306      	strpl	r3, [sp, #24]
 800663e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006640:	f1b9 0f00 	cmp.w	r9, #0
 8006644:	db3c      	blt.n	80066c0 <_dtoa_r+0x238>
 8006646:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006648:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800664c:	444b      	add	r3, r9
 800664e:	9309      	str	r3, [sp, #36]	; 0x24
 8006650:	2300      	movs	r3, #0
 8006652:	930a      	str	r3, [sp, #40]	; 0x28
 8006654:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006656:	2b09      	cmp	r3, #9
 8006658:	d86c      	bhi.n	8006734 <_dtoa_r+0x2ac>
 800665a:	2b05      	cmp	r3, #5
 800665c:	bfc4      	itt	gt
 800665e:	3b04      	subgt	r3, #4
 8006660:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006662:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006664:	bfc8      	it	gt
 8006666:	2400      	movgt	r4, #0
 8006668:	f1a3 0302 	sub.w	r3, r3, #2
 800666c:	bfd8      	it	le
 800666e:	2401      	movle	r4, #1
 8006670:	2b03      	cmp	r3, #3
 8006672:	f200 808b 	bhi.w	800678c <_dtoa_r+0x304>
 8006676:	e8df f003 	tbb	[pc, r3]
 800667a:	4f2d      	.short	0x4f2d
 800667c:	5b4d      	.short	0x5b4d
 800667e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006682:	441c      	add	r4, r3
 8006684:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006688:	2b20      	cmp	r3, #32
 800668a:	bfc3      	ittte	gt
 800668c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006690:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8006694:	fa09 f303 	lslgt.w	r3, r9, r3
 8006698:	f1c3 0320 	rsble	r3, r3, #32
 800669c:	bfc6      	itte	gt
 800669e:	fa26 f000 	lsrgt.w	r0, r6, r0
 80066a2:	4318      	orrgt	r0, r3
 80066a4:	fa06 f003 	lslle.w	r0, r6, r3
 80066a8:	f7f9 fe9c 	bl	80003e4 <__aeabi_ui2d>
 80066ac:	2301      	movs	r3, #1
 80066ae:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80066b2:	3c01      	subs	r4, #1
 80066b4:	9313      	str	r3, [sp, #76]	; 0x4c
 80066b6:	e770      	b.n	800659a <_dtoa_r+0x112>
 80066b8:	2301      	movs	r3, #1
 80066ba:	e7b3      	b.n	8006624 <_dtoa_r+0x19c>
 80066bc:	900f      	str	r0, [sp, #60]	; 0x3c
 80066be:	e7b2      	b.n	8006626 <_dtoa_r+0x19e>
 80066c0:	9b06      	ldr	r3, [sp, #24]
 80066c2:	eba3 0309 	sub.w	r3, r3, r9
 80066c6:	9306      	str	r3, [sp, #24]
 80066c8:	f1c9 0300 	rsb	r3, r9, #0
 80066cc:	930a      	str	r3, [sp, #40]	; 0x28
 80066ce:	2300      	movs	r3, #0
 80066d0:	930e      	str	r3, [sp, #56]	; 0x38
 80066d2:	e7bf      	b.n	8006654 <_dtoa_r+0x1cc>
 80066d4:	2300      	movs	r3, #0
 80066d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80066d8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80066da:	2b00      	cmp	r3, #0
 80066dc:	dc59      	bgt.n	8006792 <_dtoa_r+0x30a>
 80066de:	f04f 0b01 	mov.w	fp, #1
 80066e2:	465b      	mov	r3, fp
 80066e4:	f8cd b008 	str.w	fp, [sp, #8]
 80066e8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80066ec:	2200      	movs	r2, #0
 80066ee:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80066f0:	6042      	str	r2, [r0, #4]
 80066f2:	2204      	movs	r2, #4
 80066f4:	f102 0614 	add.w	r6, r2, #20
 80066f8:	429e      	cmp	r6, r3
 80066fa:	6841      	ldr	r1, [r0, #4]
 80066fc:	d94f      	bls.n	800679e <_dtoa_r+0x316>
 80066fe:	4628      	mov	r0, r5
 8006700:	f000 fcca 	bl	8007098 <_Balloc>
 8006704:	9008      	str	r0, [sp, #32]
 8006706:	2800      	cmp	r0, #0
 8006708:	d14d      	bne.n	80067a6 <_dtoa_r+0x31e>
 800670a:	4602      	mov	r2, r0
 800670c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006710:	4b1d      	ldr	r3, [pc, #116]	; (8006788 <_dtoa_r+0x300>)
 8006712:	e6cd      	b.n	80064b0 <_dtoa_r+0x28>
 8006714:	2301      	movs	r3, #1
 8006716:	e7de      	b.n	80066d6 <_dtoa_r+0x24e>
 8006718:	2300      	movs	r3, #0
 800671a:	930b      	str	r3, [sp, #44]	; 0x2c
 800671c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800671e:	eb09 0b03 	add.w	fp, r9, r3
 8006722:	f10b 0301 	add.w	r3, fp, #1
 8006726:	2b01      	cmp	r3, #1
 8006728:	9302      	str	r3, [sp, #8]
 800672a:	bfb8      	it	lt
 800672c:	2301      	movlt	r3, #1
 800672e:	e7dd      	b.n	80066ec <_dtoa_r+0x264>
 8006730:	2301      	movs	r3, #1
 8006732:	e7f2      	b.n	800671a <_dtoa_r+0x292>
 8006734:	2401      	movs	r4, #1
 8006736:	2300      	movs	r3, #0
 8006738:	940b      	str	r4, [sp, #44]	; 0x2c
 800673a:	9322      	str	r3, [sp, #136]	; 0x88
 800673c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8006740:	2200      	movs	r2, #0
 8006742:	2312      	movs	r3, #18
 8006744:	f8cd b008 	str.w	fp, [sp, #8]
 8006748:	9223      	str	r2, [sp, #140]	; 0x8c
 800674a:	e7cf      	b.n	80066ec <_dtoa_r+0x264>
 800674c:	f3af 8000 	nop.w
 8006750:	636f4361 	.word	0x636f4361
 8006754:	3fd287a7 	.word	0x3fd287a7
 8006758:	8b60c8b3 	.word	0x8b60c8b3
 800675c:	3fc68a28 	.word	0x3fc68a28
 8006760:	509f79fb 	.word	0x509f79fb
 8006764:	3fd34413 	.word	0x3fd34413
 8006768:	0800ba25 	.word	0x0800ba25
 800676c:	0800ba3c 	.word	0x0800ba3c
 8006770:	7ff00000 	.word	0x7ff00000
 8006774:	0800ba21 	.word	0x0800ba21
 8006778:	0800ba18 	.word	0x0800ba18
 800677c:	0800b9f5 	.word	0x0800b9f5
 8006780:	3ff80000 	.word	0x3ff80000
 8006784:	0800bb38 	.word	0x0800bb38
 8006788:	0800ba9b 	.word	0x0800ba9b
 800678c:	2301      	movs	r3, #1
 800678e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006790:	e7d4      	b.n	800673c <_dtoa_r+0x2b4>
 8006792:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8006796:	465b      	mov	r3, fp
 8006798:	f8cd b008 	str.w	fp, [sp, #8]
 800679c:	e7a6      	b.n	80066ec <_dtoa_r+0x264>
 800679e:	3101      	adds	r1, #1
 80067a0:	6041      	str	r1, [r0, #4]
 80067a2:	0052      	lsls	r2, r2, #1
 80067a4:	e7a6      	b.n	80066f4 <_dtoa_r+0x26c>
 80067a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80067a8:	9a08      	ldr	r2, [sp, #32]
 80067aa:	601a      	str	r2, [r3, #0]
 80067ac:	9b02      	ldr	r3, [sp, #8]
 80067ae:	2b0e      	cmp	r3, #14
 80067b0:	f200 80a8 	bhi.w	8006904 <_dtoa_r+0x47c>
 80067b4:	2c00      	cmp	r4, #0
 80067b6:	f000 80a5 	beq.w	8006904 <_dtoa_r+0x47c>
 80067ba:	f1b9 0f00 	cmp.w	r9, #0
 80067be:	dd34      	ble.n	800682a <_dtoa_r+0x3a2>
 80067c0:	4a9a      	ldr	r2, [pc, #616]	; (8006a2c <_dtoa_r+0x5a4>)
 80067c2:	f009 030f 	and.w	r3, r9, #15
 80067c6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80067ca:	f419 7f80 	tst.w	r9, #256	; 0x100
 80067ce:	e9d3 3400 	ldrd	r3, r4, [r3]
 80067d2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80067d6:	ea4f 1429 	mov.w	r4, r9, asr #4
 80067da:	d016      	beq.n	800680a <_dtoa_r+0x382>
 80067dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80067e0:	4b93      	ldr	r3, [pc, #588]	; (8006a30 <_dtoa_r+0x5a8>)
 80067e2:	2703      	movs	r7, #3
 80067e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80067e8:	f7f9 ffa0 	bl	800072c <__aeabi_ddiv>
 80067ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80067f0:	f004 040f 	and.w	r4, r4, #15
 80067f4:	4e8e      	ldr	r6, [pc, #568]	; (8006a30 <_dtoa_r+0x5a8>)
 80067f6:	b954      	cbnz	r4, 800680e <_dtoa_r+0x386>
 80067f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80067fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006800:	f7f9 ff94 	bl	800072c <__aeabi_ddiv>
 8006804:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006808:	e029      	b.n	800685e <_dtoa_r+0x3d6>
 800680a:	2702      	movs	r7, #2
 800680c:	e7f2      	b.n	80067f4 <_dtoa_r+0x36c>
 800680e:	07e1      	lsls	r1, r4, #31
 8006810:	d508      	bpl.n	8006824 <_dtoa_r+0x39c>
 8006812:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006816:	e9d6 2300 	ldrd	r2, r3, [r6]
 800681a:	f7f9 fe5d 	bl	80004d8 <__aeabi_dmul>
 800681e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006822:	3701      	adds	r7, #1
 8006824:	1064      	asrs	r4, r4, #1
 8006826:	3608      	adds	r6, #8
 8006828:	e7e5      	b.n	80067f6 <_dtoa_r+0x36e>
 800682a:	f000 80a5 	beq.w	8006978 <_dtoa_r+0x4f0>
 800682e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006832:	f1c9 0400 	rsb	r4, r9, #0
 8006836:	4b7d      	ldr	r3, [pc, #500]	; (8006a2c <_dtoa_r+0x5a4>)
 8006838:	f004 020f 	and.w	r2, r4, #15
 800683c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006844:	f7f9 fe48 	bl	80004d8 <__aeabi_dmul>
 8006848:	2702      	movs	r7, #2
 800684a:	2300      	movs	r3, #0
 800684c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006850:	4e77      	ldr	r6, [pc, #476]	; (8006a30 <_dtoa_r+0x5a8>)
 8006852:	1124      	asrs	r4, r4, #4
 8006854:	2c00      	cmp	r4, #0
 8006856:	f040 8084 	bne.w	8006962 <_dtoa_r+0x4da>
 800685a:	2b00      	cmp	r3, #0
 800685c:	d1d2      	bne.n	8006804 <_dtoa_r+0x37c>
 800685e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006860:	2b00      	cmp	r3, #0
 8006862:	f000 808b 	beq.w	800697c <_dtoa_r+0x4f4>
 8006866:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800686a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800686e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006872:	2200      	movs	r2, #0
 8006874:	4b6f      	ldr	r3, [pc, #444]	; (8006a34 <_dtoa_r+0x5ac>)
 8006876:	f7fa f8a1 	bl	80009bc <__aeabi_dcmplt>
 800687a:	2800      	cmp	r0, #0
 800687c:	d07e      	beq.n	800697c <_dtoa_r+0x4f4>
 800687e:	9b02      	ldr	r3, [sp, #8]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d07b      	beq.n	800697c <_dtoa_r+0x4f4>
 8006884:	f1bb 0f00 	cmp.w	fp, #0
 8006888:	dd38      	ble.n	80068fc <_dtoa_r+0x474>
 800688a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800688e:	2200      	movs	r2, #0
 8006890:	4b69      	ldr	r3, [pc, #420]	; (8006a38 <_dtoa_r+0x5b0>)
 8006892:	f7f9 fe21 	bl	80004d8 <__aeabi_dmul>
 8006896:	465c      	mov	r4, fp
 8006898:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800689c:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
 80068a0:	3701      	adds	r7, #1
 80068a2:	4638      	mov	r0, r7
 80068a4:	f7f9 fdae 	bl	8000404 <__aeabi_i2d>
 80068a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068ac:	f7f9 fe14 	bl	80004d8 <__aeabi_dmul>
 80068b0:	2200      	movs	r2, #0
 80068b2:	4b62      	ldr	r3, [pc, #392]	; (8006a3c <_dtoa_r+0x5b4>)
 80068b4:	f7f9 fc5a 	bl	800016c <__adddf3>
 80068b8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80068bc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80068c0:	9611      	str	r6, [sp, #68]	; 0x44
 80068c2:	2c00      	cmp	r4, #0
 80068c4:	d15d      	bne.n	8006982 <_dtoa_r+0x4fa>
 80068c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068ca:	2200      	movs	r2, #0
 80068cc:	4b5c      	ldr	r3, [pc, #368]	; (8006a40 <_dtoa_r+0x5b8>)
 80068ce:	f7f9 fc4b 	bl	8000168 <__aeabi_dsub>
 80068d2:	4602      	mov	r2, r0
 80068d4:	460b      	mov	r3, r1
 80068d6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80068da:	4633      	mov	r3, r6
 80068dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80068de:	f7fa f88b 	bl	80009f8 <__aeabi_dcmpgt>
 80068e2:	2800      	cmp	r0, #0
 80068e4:	f040 829e 	bne.w	8006e24 <_dtoa_r+0x99c>
 80068e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80068ee:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80068f2:	f7fa f863 	bl	80009bc <__aeabi_dcmplt>
 80068f6:	2800      	cmp	r0, #0
 80068f8:	f040 8292 	bne.w	8006e20 <_dtoa_r+0x998>
 80068fc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006900:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006904:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006906:	2b00      	cmp	r3, #0
 8006908:	f2c0 8153 	blt.w	8006bb2 <_dtoa_r+0x72a>
 800690c:	f1b9 0f0e 	cmp.w	r9, #14
 8006910:	f300 814f 	bgt.w	8006bb2 <_dtoa_r+0x72a>
 8006914:	4b45      	ldr	r3, [pc, #276]	; (8006a2c <_dtoa_r+0x5a4>)
 8006916:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800691a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800691e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006922:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006924:	2b00      	cmp	r3, #0
 8006926:	f280 80db 	bge.w	8006ae0 <_dtoa_r+0x658>
 800692a:	9b02      	ldr	r3, [sp, #8]
 800692c:	2b00      	cmp	r3, #0
 800692e:	f300 80d7 	bgt.w	8006ae0 <_dtoa_r+0x658>
 8006932:	f040 8274 	bne.w	8006e1e <_dtoa_r+0x996>
 8006936:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800693a:	2200      	movs	r2, #0
 800693c:	4b40      	ldr	r3, [pc, #256]	; (8006a40 <_dtoa_r+0x5b8>)
 800693e:	f7f9 fdcb 	bl	80004d8 <__aeabi_dmul>
 8006942:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006946:	f7fa f84d 	bl	80009e4 <__aeabi_dcmpge>
 800694a:	9c02      	ldr	r4, [sp, #8]
 800694c:	4626      	mov	r6, r4
 800694e:	2800      	cmp	r0, #0
 8006950:	f040 824a 	bne.w	8006de8 <_dtoa_r+0x960>
 8006954:	2331      	movs	r3, #49	; 0x31
 8006956:	9f08      	ldr	r7, [sp, #32]
 8006958:	f109 0901 	add.w	r9, r9, #1
 800695c:	f807 3b01 	strb.w	r3, [r7], #1
 8006960:	e246      	b.n	8006df0 <_dtoa_r+0x968>
 8006962:	07e2      	lsls	r2, r4, #31
 8006964:	d505      	bpl.n	8006972 <_dtoa_r+0x4ea>
 8006966:	e9d6 2300 	ldrd	r2, r3, [r6]
 800696a:	f7f9 fdb5 	bl	80004d8 <__aeabi_dmul>
 800696e:	2301      	movs	r3, #1
 8006970:	3701      	adds	r7, #1
 8006972:	1064      	asrs	r4, r4, #1
 8006974:	3608      	adds	r6, #8
 8006976:	e76d      	b.n	8006854 <_dtoa_r+0x3cc>
 8006978:	2702      	movs	r7, #2
 800697a:	e770      	b.n	800685e <_dtoa_r+0x3d6>
 800697c:	46c8      	mov	r8, r9
 800697e:	9c02      	ldr	r4, [sp, #8]
 8006980:	e78f      	b.n	80068a2 <_dtoa_r+0x41a>
 8006982:	9908      	ldr	r1, [sp, #32]
 8006984:	4b29      	ldr	r3, [pc, #164]	; (8006a2c <_dtoa_r+0x5a4>)
 8006986:	4421      	add	r1, r4
 8006988:	9112      	str	r1, [sp, #72]	; 0x48
 800698a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800698c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006990:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006994:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006998:	2900      	cmp	r1, #0
 800699a:	d055      	beq.n	8006a48 <_dtoa_r+0x5c0>
 800699c:	2000      	movs	r0, #0
 800699e:	4929      	ldr	r1, [pc, #164]	; (8006a44 <_dtoa_r+0x5bc>)
 80069a0:	f7f9 fec4 	bl	800072c <__aeabi_ddiv>
 80069a4:	463b      	mov	r3, r7
 80069a6:	4632      	mov	r2, r6
 80069a8:	f7f9 fbde 	bl	8000168 <__aeabi_dsub>
 80069ac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80069b0:	9f08      	ldr	r7, [sp, #32]
 80069b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069b6:	f7fa f83f 	bl	8000a38 <__aeabi_d2iz>
 80069ba:	4604      	mov	r4, r0
 80069bc:	f7f9 fd22 	bl	8000404 <__aeabi_i2d>
 80069c0:	4602      	mov	r2, r0
 80069c2:	460b      	mov	r3, r1
 80069c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069c8:	f7f9 fbce 	bl	8000168 <__aeabi_dsub>
 80069cc:	4602      	mov	r2, r0
 80069ce:	460b      	mov	r3, r1
 80069d0:	3430      	adds	r4, #48	; 0x30
 80069d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80069d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80069da:	f807 4b01 	strb.w	r4, [r7], #1
 80069de:	f7f9 ffed 	bl	80009bc <__aeabi_dcmplt>
 80069e2:	2800      	cmp	r0, #0
 80069e4:	d174      	bne.n	8006ad0 <_dtoa_r+0x648>
 80069e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069ea:	2000      	movs	r0, #0
 80069ec:	4911      	ldr	r1, [pc, #68]	; (8006a34 <_dtoa_r+0x5ac>)
 80069ee:	f7f9 fbbb 	bl	8000168 <__aeabi_dsub>
 80069f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80069f6:	f7f9 ffe1 	bl	80009bc <__aeabi_dcmplt>
 80069fa:	2800      	cmp	r0, #0
 80069fc:	f040 80b6 	bne.w	8006b6c <_dtoa_r+0x6e4>
 8006a00:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a02:	429f      	cmp	r7, r3
 8006a04:	f43f af7a 	beq.w	80068fc <_dtoa_r+0x474>
 8006a08:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	4b0a      	ldr	r3, [pc, #40]	; (8006a38 <_dtoa_r+0x5b0>)
 8006a10:	f7f9 fd62 	bl	80004d8 <__aeabi_dmul>
 8006a14:	2200      	movs	r2, #0
 8006a16:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006a1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a1e:	4b06      	ldr	r3, [pc, #24]	; (8006a38 <_dtoa_r+0x5b0>)
 8006a20:	f7f9 fd5a 	bl	80004d8 <__aeabi_dmul>
 8006a24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a28:	e7c3      	b.n	80069b2 <_dtoa_r+0x52a>
 8006a2a:	bf00      	nop
 8006a2c:	0800bb38 	.word	0x0800bb38
 8006a30:	0800bb10 	.word	0x0800bb10
 8006a34:	3ff00000 	.word	0x3ff00000
 8006a38:	40240000 	.word	0x40240000
 8006a3c:	401c0000 	.word	0x401c0000
 8006a40:	40140000 	.word	0x40140000
 8006a44:	3fe00000 	.word	0x3fe00000
 8006a48:	4630      	mov	r0, r6
 8006a4a:	4639      	mov	r1, r7
 8006a4c:	f7f9 fd44 	bl	80004d8 <__aeabi_dmul>
 8006a50:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a52:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006a56:	9c08      	ldr	r4, [sp, #32]
 8006a58:	9314      	str	r3, [sp, #80]	; 0x50
 8006a5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a5e:	f7f9 ffeb 	bl	8000a38 <__aeabi_d2iz>
 8006a62:	9015      	str	r0, [sp, #84]	; 0x54
 8006a64:	f7f9 fcce 	bl	8000404 <__aeabi_i2d>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	460b      	mov	r3, r1
 8006a6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a70:	f7f9 fb7a 	bl	8000168 <__aeabi_dsub>
 8006a74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006a76:	4606      	mov	r6, r0
 8006a78:	3330      	adds	r3, #48	; 0x30
 8006a7a:	f804 3b01 	strb.w	r3, [r4], #1
 8006a7e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a80:	460f      	mov	r7, r1
 8006a82:	429c      	cmp	r4, r3
 8006a84:	f04f 0200 	mov.w	r2, #0
 8006a88:	d124      	bne.n	8006ad4 <_dtoa_r+0x64c>
 8006a8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006a8e:	4bb3      	ldr	r3, [pc, #716]	; (8006d5c <_dtoa_r+0x8d4>)
 8006a90:	f7f9 fb6c 	bl	800016c <__adddf3>
 8006a94:	4602      	mov	r2, r0
 8006a96:	460b      	mov	r3, r1
 8006a98:	4630      	mov	r0, r6
 8006a9a:	4639      	mov	r1, r7
 8006a9c:	f7f9 ffac 	bl	80009f8 <__aeabi_dcmpgt>
 8006aa0:	2800      	cmp	r0, #0
 8006aa2:	d162      	bne.n	8006b6a <_dtoa_r+0x6e2>
 8006aa4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006aa8:	2000      	movs	r0, #0
 8006aaa:	49ac      	ldr	r1, [pc, #688]	; (8006d5c <_dtoa_r+0x8d4>)
 8006aac:	f7f9 fb5c 	bl	8000168 <__aeabi_dsub>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	460b      	mov	r3, r1
 8006ab4:	4630      	mov	r0, r6
 8006ab6:	4639      	mov	r1, r7
 8006ab8:	f7f9 ff80 	bl	80009bc <__aeabi_dcmplt>
 8006abc:	2800      	cmp	r0, #0
 8006abe:	f43f af1d 	beq.w	80068fc <_dtoa_r+0x474>
 8006ac2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006ac4:	1e7b      	subs	r3, r7, #1
 8006ac6:	9314      	str	r3, [sp, #80]	; 0x50
 8006ac8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006acc:	2b30      	cmp	r3, #48	; 0x30
 8006ace:	d0f8      	beq.n	8006ac2 <_dtoa_r+0x63a>
 8006ad0:	46c1      	mov	r9, r8
 8006ad2:	e03a      	b.n	8006b4a <_dtoa_r+0x6c2>
 8006ad4:	4ba2      	ldr	r3, [pc, #648]	; (8006d60 <_dtoa_r+0x8d8>)
 8006ad6:	f7f9 fcff 	bl	80004d8 <__aeabi_dmul>
 8006ada:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ade:	e7bc      	b.n	8006a5a <_dtoa_r+0x5d2>
 8006ae0:	9f08      	ldr	r7, [sp, #32]
 8006ae2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006ae6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006aea:	f7f9 fe1f 	bl	800072c <__aeabi_ddiv>
 8006aee:	f7f9 ffa3 	bl	8000a38 <__aeabi_d2iz>
 8006af2:	4604      	mov	r4, r0
 8006af4:	f7f9 fc86 	bl	8000404 <__aeabi_i2d>
 8006af8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006afc:	f7f9 fcec 	bl	80004d8 <__aeabi_dmul>
 8006b00:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006b04:	460b      	mov	r3, r1
 8006b06:	4602      	mov	r2, r0
 8006b08:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b0c:	f7f9 fb2c 	bl	8000168 <__aeabi_dsub>
 8006b10:	f807 6b01 	strb.w	r6, [r7], #1
 8006b14:	9e08      	ldr	r6, [sp, #32]
 8006b16:	9b02      	ldr	r3, [sp, #8]
 8006b18:	1bbe      	subs	r6, r7, r6
 8006b1a:	42b3      	cmp	r3, r6
 8006b1c:	d13a      	bne.n	8006b94 <_dtoa_r+0x70c>
 8006b1e:	4602      	mov	r2, r0
 8006b20:	460b      	mov	r3, r1
 8006b22:	f7f9 fb23 	bl	800016c <__adddf3>
 8006b26:	4602      	mov	r2, r0
 8006b28:	460b      	mov	r3, r1
 8006b2a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006b2e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006b32:	f7f9 ff61 	bl	80009f8 <__aeabi_dcmpgt>
 8006b36:	bb58      	cbnz	r0, 8006b90 <_dtoa_r+0x708>
 8006b38:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006b3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b40:	f7f9 ff32 	bl	80009a8 <__aeabi_dcmpeq>
 8006b44:	b108      	cbz	r0, 8006b4a <_dtoa_r+0x6c2>
 8006b46:	07e1      	lsls	r1, r4, #31
 8006b48:	d422      	bmi.n	8006b90 <_dtoa_r+0x708>
 8006b4a:	4628      	mov	r0, r5
 8006b4c:	4651      	mov	r1, sl
 8006b4e:	f000 fae3 	bl	8007118 <_Bfree>
 8006b52:	2300      	movs	r3, #0
 8006b54:	703b      	strb	r3, [r7, #0]
 8006b56:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006b58:	f109 0001 	add.w	r0, r9, #1
 8006b5c:	6018      	str	r0, [r3, #0]
 8006b5e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	f43f acdf 	beq.w	8006524 <_dtoa_r+0x9c>
 8006b66:	601f      	str	r7, [r3, #0]
 8006b68:	e4dc      	b.n	8006524 <_dtoa_r+0x9c>
 8006b6a:	4627      	mov	r7, r4
 8006b6c:	463b      	mov	r3, r7
 8006b6e:	461f      	mov	r7, r3
 8006b70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b74:	2a39      	cmp	r2, #57	; 0x39
 8006b76:	d107      	bne.n	8006b88 <_dtoa_r+0x700>
 8006b78:	9a08      	ldr	r2, [sp, #32]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d1f7      	bne.n	8006b6e <_dtoa_r+0x6e6>
 8006b7e:	2230      	movs	r2, #48	; 0x30
 8006b80:	9908      	ldr	r1, [sp, #32]
 8006b82:	f108 0801 	add.w	r8, r8, #1
 8006b86:	700a      	strb	r2, [r1, #0]
 8006b88:	781a      	ldrb	r2, [r3, #0]
 8006b8a:	3201      	adds	r2, #1
 8006b8c:	701a      	strb	r2, [r3, #0]
 8006b8e:	e79f      	b.n	8006ad0 <_dtoa_r+0x648>
 8006b90:	46c8      	mov	r8, r9
 8006b92:	e7eb      	b.n	8006b6c <_dtoa_r+0x6e4>
 8006b94:	2200      	movs	r2, #0
 8006b96:	4b72      	ldr	r3, [pc, #456]	; (8006d60 <_dtoa_r+0x8d8>)
 8006b98:	f7f9 fc9e 	bl	80004d8 <__aeabi_dmul>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	460b      	mov	r3, r1
 8006ba0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	f7f9 fefe 	bl	80009a8 <__aeabi_dcmpeq>
 8006bac:	2800      	cmp	r0, #0
 8006bae:	d098      	beq.n	8006ae2 <_dtoa_r+0x65a>
 8006bb0:	e7cb      	b.n	8006b4a <_dtoa_r+0x6c2>
 8006bb2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006bb4:	2a00      	cmp	r2, #0
 8006bb6:	f000 80cd 	beq.w	8006d54 <_dtoa_r+0x8cc>
 8006bba:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006bbc:	2a01      	cmp	r2, #1
 8006bbe:	f300 80af 	bgt.w	8006d20 <_dtoa_r+0x898>
 8006bc2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006bc4:	2a00      	cmp	r2, #0
 8006bc6:	f000 80a7 	beq.w	8006d18 <_dtoa_r+0x890>
 8006bca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006bce:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006bd0:	9f06      	ldr	r7, [sp, #24]
 8006bd2:	9a06      	ldr	r2, [sp, #24]
 8006bd4:	2101      	movs	r1, #1
 8006bd6:	441a      	add	r2, r3
 8006bd8:	9206      	str	r2, [sp, #24]
 8006bda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bdc:	4628      	mov	r0, r5
 8006bde:	441a      	add	r2, r3
 8006be0:	9209      	str	r2, [sp, #36]	; 0x24
 8006be2:	f000 fb53 	bl	800728c <__i2b>
 8006be6:	4606      	mov	r6, r0
 8006be8:	2f00      	cmp	r7, #0
 8006bea:	dd0c      	ble.n	8006c06 <_dtoa_r+0x77e>
 8006bec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	dd09      	ble.n	8006c06 <_dtoa_r+0x77e>
 8006bf2:	42bb      	cmp	r3, r7
 8006bf4:	bfa8      	it	ge
 8006bf6:	463b      	movge	r3, r7
 8006bf8:	9a06      	ldr	r2, [sp, #24]
 8006bfa:	1aff      	subs	r7, r7, r3
 8006bfc:	1ad2      	subs	r2, r2, r3
 8006bfe:	9206      	str	r2, [sp, #24]
 8006c00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c02:	1ad3      	subs	r3, r2, r3
 8006c04:	9309      	str	r3, [sp, #36]	; 0x24
 8006c06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c08:	b1f3      	cbz	r3, 8006c48 <_dtoa_r+0x7c0>
 8006c0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	f000 80a9 	beq.w	8006d64 <_dtoa_r+0x8dc>
 8006c12:	2c00      	cmp	r4, #0
 8006c14:	dd10      	ble.n	8006c38 <_dtoa_r+0x7b0>
 8006c16:	4631      	mov	r1, r6
 8006c18:	4622      	mov	r2, r4
 8006c1a:	4628      	mov	r0, r5
 8006c1c:	f000 fbf0 	bl	8007400 <__pow5mult>
 8006c20:	4652      	mov	r2, sl
 8006c22:	4601      	mov	r1, r0
 8006c24:	4606      	mov	r6, r0
 8006c26:	4628      	mov	r0, r5
 8006c28:	f000 fb46 	bl	80072b8 <__multiply>
 8006c2c:	4680      	mov	r8, r0
 8006c2e:	4651      	mov	r1, sl
 8006c30:	4628      	mov	r0, r5
 8006c32:	f000 fa71 	bl	8007118 <_Bfree>
 8006c36:	46c2      	mov	sl, r8
 8006c38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c3a:	1b1a      	subs	r2, r3, r4
 8006c3c:	d004      	beq.n	8006c48 <_dtoa_r+0x7c0>
 8006c3e:	4651      	mov	r1, sl
 8006c40:	4628      	mov	r0, r5
 8006c42:	f000 fbdd 	bl	8007400 <__pow5mult>
 8006c46:	4682      	mov	sl, r0
 8006c48:	2101      	movs	r1, #1
 8006c4a:	4628      	mov	r0, r5
 8006c4c:	f000 fb1e 	bl	800728c <__i2b>
 8006c50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c52:	4604      	mov	r4, r0
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	f340 8087 	ble.w	8006d68 <_dtoa_r+0x8e0>
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	4601      	mov	r1, r0
 8006c5e:	4628      	mov	r0, r5
 8006c60:	f000 fbce 	bl	8007400 <__pow5mult>
 8006c64:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c66:	4604      	mov	r4, r0
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	f340 8080 	ble.w	8006d6e <_dtoa_r+0x8e6>
 8006c6e:	f04f 0800 	mov.w	r8, #0
 8006c72:	6923      	ldr	r3, [r4, #16]
 8006c74:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006c78:	6918      	ldr	r0, [r3, #16]
 8006c7a:	f000 fab9 	bl	80071f0 <__hi0bits>
 8006c7e:	f1c0 0020 	rsb	r0, r0, #32
 8006c82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c84:	4418      	add	r0, r3
 8006c86:	f010 001f 	ands.w	r0, r0, #31
 8006c8a:	f000 8092 	beq.w	8006db2 <_dtoa_r+0x92a>
 8006c8e:	f1c0 0320 	rsb	r3, r0, #32
 8006c92:	2b04      	cmp	r3, #4
 8006c94:	f340 808a 	ble.w	8006dac <_dtoa_r+0x924>
 8006c98:	f1c0 001c 	rsb	r0, r0, #28
 8006c9c:	9b06      	ldr	r3, [sp, #24]
 8006c9e:	4407      	add	r7, r0
 8006ca0:	4403      	add	r3, r0
 8006ca2:	9306      	str	r3, [sp, #24]
 8006ca4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ca6:	4403      	add	r3, r0
 8006ca8:	9309      	str	r3, [sp, #36]	; 0x24
 8006caa:	9b06      	ldr	r3, [sp, #24]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	dd05      	ble.n	8006cbc <_dtoa_r+0x834>
 8006cb0:	4651      	mov	r1, sl
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	4628      	mov	r0, r5
 8006cb6:	f000 fbfd 	bl	80074b4 <__lshift>
 8006cba:	4682      	mov	sl, r0
 8006cbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	dd05      	ble.n	8006cce <_dtoa_r+0x846>
 8006cc2:	4621      	mov	r1, r4
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	4628      	mov	r0, r5
 8006cc8:	f000 fbf4 	bl	80074b4 <__lshift>
 8006ccc:	4604      	mov	r4, r0
 8006cce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d070      	beq.n	8006db6 <_dtoa_r+0x92e>
 8006cd4:	4621      	mov	r1, r4
 8006cd6:	4650      	mov	r0, sl
 8006cd8:	f000 fc58 	bl	800758c <__mcmp>
 8006cdc:	2800      	cmp	r0, #0
 8006cde:	da6a      	bge.n	8006db6 <_dtoa_r+0x92e>
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	4651      	mov	r1, sl
 8006ce4:	220a      	movs	r2, #10
 8006ce6:	4628      	mov	r0, r5
 8006ce8:	f000 fa38 	bl	800715c <__multadd>
 8006cec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cee:	4682      	mov	sl, r0
 8006cf0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	f000 8193 	beq.w	8007020 <_dtoa_r+0xb98>
 8006cfa:	4631      	mov	r1, r6
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	220a      	movs	r2, #10
 8006d00:	4628      	mov	r0, r5
 8006d02:	f000 fa2b 	bl	800715c <__multadd>
 8006d06:	f1bb 0f00 	cmp.w	fp, #0
 8006d0a:	4606      	mov	r6, r0
 8006d0c:	f300 8093 	bgt.w	8006e36 <_dtoa_r+0x9ae>
 8006d10:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d12:	2b02      	cmp	r3, #2
 8006d14:	dc57      	bgt.n	8006dc6 <_dtoa_r+0x93e>
 8006d16:	e08e      	b.n	8006e36 <_dtoa_r+0x9ae>
 8006d18:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006d1a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006d1e:	e756      	b.n	8006bce <_dtoa_r+0x746>
 8006d20:	9b02      	ldr	r3, [sp, #8]
 8006d22:	1e5c      	subs	r4, r3, #1
 8006d24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d26:	42a3      	cmp	r3, r4
 8006d28:	bfb7      	itett	lt
 8006d2a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006d2c:	1b1c      	subge	r4, r3, r4
 8006d2e:	1ae2      	sublt	r2, r4, r3
 8006d30:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006d32:	bfbe      	ittt	lt
 8006d34:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006d36:	189b      	addlt	r3, r3, r2
 8006d38:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006d3a:	9b02      	ldr	r3, [sp, #8]
 8006d3c:	bfb8      	it	lt
 8006d3e:	2400      	movlt	r4, #0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	bfbb      	ittet	lt
 8006d44:	9b06      	ldrlt	r3, [sp, #24]
 8006d46:	9a02      	ldrlt	r2, [sp, #8]
 8006d48:	9f06      	ldrge	r7, [sp, #24]
 8006d4a:	1a9f      	sublt	r7, r3, r2
 8006d4c:	bfac      	ite	ge
 8006d4e:	9b02      	ldrge	r3, [sp, #8]
 8006d50:	2300      	movlt	r3, #0
 8006d52:	e73e      	b.n	8006bd2 <_dtoa_r+0x74a>
 8006d54:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006d56:	9f06      	ldr	r7, [sp, #24]
 8006d58:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006d5a:	e745      	b.n	8006be8 <_dtoa_r+0x760>
 8006d5c:	3fe00000 	.word	0x3fe00000
 8006d60:	40240000 	.word	0x40240000
 8006d64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d66:	e76a      	b.n	8006c3e <_dtoa_r+0x7b6>
 8006d68:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	dc19      	bgt.n	8006da2 <_dtoa_r+0x91a>
 8006d6e:	9b04      	ldr	r3, [sp, #16]
 8006d70:	b9bb      	cbnz	r3, 8006da2 <_dtoa_r+0x91a>
 8006d72:	9b05      	ldr	r3, [sp, #20]
 8006d74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d78:	b99b      	cbnz	r3, 8006da2 <_dtoa_r+0x91a>
 8006d7a:	9b05      	ldr	r3, [sp, #20]
 8006d7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d80:	0d1b      	lsrs	r3, r3, #20
 8006d82:	051b      	lsls	r3, r3, #20
 8006d84:	b183      	cbz	r3, 8006da8 <_dtoa_r+0x920>
 8006d86:	f04f 0801 	mov.w	r8, #1
 8006d8a:	9b06      	ldr	r3, [sp, #24]
 8006d8c:	3301      	adds	r3, #1
 8006d8e:	9306      	str	r3, [sp, #24]
 8006d90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d92:	3301      	adds	r3, #1
 8006d94:	9309      	str	r3, [sp, #36]	; 0x24
 8006d96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	f47f af6a 	bne.w	8006c72 <_dtoa_r+0x7ea>
 8006d9e:	2001      	movs	r0, #1
 8006da0:	e76f      	b.n	8006c82 <_dtoa_r+0x7fa>
 8006da2:	f04f 0800 	mov.w	r8, #0
 8006da6:	e7f6      	b.n	8006d96 <_dtoa_r+0x90e>
 8006da8:	4698      	mov	r8, r3
 8006daa:	e7f4      	b.n	8006d96 <_dtoa_r+0x90e>
 8006dac:	f43f af7d 	beq.w	8006caa <_dtoa_r+0x822>
 8006db0:	4618      	mov	r0, r3
 8006db2:	301c      	adds	r0, #28
 8006db4:	e772      	b.n	8006c9c <_dtoa_r+0x814>
 8006db6:	9b02      	ldr	r3, [sp, #8]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	dc36      	bgt.n	8006e2a <_dtoa_r+0x9a2>
 8006dbc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006dbe:	2b02      	cmp	r3, #2
 8006dc0:	dd33      	ble.n	8006e2a <_dtoa_r+0x9a2>
 8006dc2:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006dc6:	f1bb 0f00 	cmp.w	fp, #0
 8006dca:	d10d      	bne.n	8006de8 <_dtoa_r+0x960>
 8006dcc:	4621      	mov	r1, r4
 8006dce:	465b      	mov	r3, fp
 8006dd0:	2205      	movs	r2, #5
 8006dd2:	4628      	mov	r0, r5
 8006dd4:	f000 f9c2 	bl	800715c <__multadd>
 8006dd8:	4601      	mov	r1, r0
 8006dda:	4604      	mov	r4, r0
 8006ddc:	4650      	mov	r0, sl
 8006dde:	f000 fbd5 	bl	800758c <__mcmp>
 8006de2:	2800      	cmp	r0, #0
 8006de4:	f73f adb6 	bgt.w	8006954 <_dtoa_r+0x4cc>
 8006de8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006dea:	9f08      	ldr	r7, [sp, #32]
 8006dec:	ea6f 0903 	mvn.w	r9, r3
 8006df0:	f04f 0800 	mov.w	r8, #0
 8006df4:	4621      	mov	r1, r4
 8006df6:	4628      	mov	r0, r5
 8006df8:	f000 f98e 	bl	8007118 <_Bfree>
 8006dfc:	2e00      	cmp	r6, #0
 8006dfe:	f43f aea4 	beq.w	8006b4a <_dtoa_r+0x6c2>
 8006e02:	f1b8 0f00 	cmp.w	r8, #0
 8006e06:	d005      	beq.n	8006e14 <_dtoa_r+0x98c>
 8006e08:	45b0      	cmp	r8, r6
 8006e0a:	d003      	beq.n	8006e14 <_dtoa_r+0x98c>
 8006e0c:	4641      	mov	r1, r8
 8006e0e:	4628      	mov	r0, r5
 8006e10:	f000 f982 	bl	8007118 <_Bfree>
 8006e14:	4631      	mov	r1, r6
 8006e16:	4628      	mov	r0, r5
 8006e18:	f000 f97e 	bl	8007118 <_Bfree>
 8006e1c:	e695      	b.n	8006b4a <_dtoa_r+0x6c2>
 8006e1e:	2400      	movs	r4, #0
 8006e20:	4626      	mov	r6, r4
 8006e22:	e7e1      	b.n	8006de8 <_dtoa_r+0x960>
 8006e24:	46c1      	mov	r9, r8
 8006e26:	4626      	mov	r6, r4
 8006e28:	e594      	b.n	8006954 <_dtoa_r+0x4cc>
 8006e2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e2c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	f000 80fc 	beq.w	800702e <_dtoa_r+0xba6>
 8006e36:	2f00      	cmp	r7, #0
 8006e38:	dd05      	ble.n	8006e46 <_dtoa_r+0x9be>
 8006e3a:	4631      	mov	r1, r6
 8006e3c:	463a      	mov	r2, r7
 8006e3e:	4628      	mov	r0, r5
 8006e40:	f000 fb38 	bl	80074b4 <__lshift>
 8006e44:	4606      	mov	r6, r0
 8006e46:	f1b8 0f00 	cmp.w	r8, #0
 8006e4a:	d05c      	beq.n	8006f06 <_dtoa_r+0xa7e>
 8006e4c:	4628      	mov	r0, r5
 8006e4e:	6871      	ldr	r1, [r6, #4]
 8006e50:	f000 f922 	bl	8007098 <_Balloc>
 8006e54:	4607      	mov	r7, r0
 8006e56:	b928      	cbnz	r0, 8006e64 <_dtoa_r+0x9dc>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006e5e:	4b7e      	ldr	r3, [pc, #504]	; (8007058 <_dtoa_r+0xbd0>)
 8006e60:	f7ff bb26 	b.w	80064b0 <_dtoa_r+0x28>
 8006e64:	6932      	ldr	r2, [r6, #16]
 8006e66:	f106 010c 	add.w	r1, r6, #12
 8006e6a:	3202      	adds	r2, #2
 8006e6c:	0092      	lsls	r2, r2, #2
 8006e6e:	300c      	adds	r0, #12
 8006e70:	f7fe fde4 	bl	8005a3c <memcpy>
 8006e74:	2201      	movs	r2, #1
 8006e76:	4639      	mov	r1, r7
 8006e78:	4628      	mov	r0, r5
 8006e7a:	f000 fb1b 	bl	80074b4 <__lshift>
 8006e7e:	46b0      	mov	r8, r6
 8006e80:	4606      	mov	r6, r0
 8006e82:	9b08      	ldr	r3, [sp, #32]
 8006e84:	3301      	adds	r3, #1
 8006e86:	9302      	str	r3, [sp, #8]
 8006e88:	9b08      	ldr	r3, [sp, #32]
 8006e8a:	445b      	add	r3, fp
 8006e8c:	930a      	str	r3, [sp, #40]	; 0x28
 8006e8e:	9b04      	ldr	r3, [sp, #16]
 8006e90:	f003 0301 	and.w	r3, r3, #1
 8006e94:	9309      	str	r3, [sp, #36]	; 0x24
 8006e96:	9b02      	ldr	r3, [sp, #8]
 8006e98:	4621      	mov	r1, r4
 8006e9a:	4650      	mov	r0, sl
 8006e9c:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8006ea0:	f7ff fa62 	bl	8006368 <quorem>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	4641      	mov	r1, r8
 8006ea8:	3330      	adds	r3, #48	; 0x30
 8006eaa:	9004      	str	r0, [sp, #16]
 8006eac:	4650      	mov	r0, sl
 8006eae:	930b      	str	r3, [sp, #44]	; 0x2c
 8006eb0:	f000 fb6c 	bl	800758c <__mcmp>
 8006eb4:	4632      	mov	r2, r6
 8006eb6:	9006      	str	r0, [sp, #24]
 8006eb8:	4621      	mov	r1, r4
 8006eba:	4628      	mov	r0, r5
 8006ebc:	f000 fb82 	bl	80075c4 <__mdiff>
 8006ec0:	68c2      	ldr	r2, [r0, #12]
 8006ec2:	4607      	mov	r7, r0
 8006ec4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ec6:	bb02      	cbnz	r2, 8006f0a <_dtoa_r+0xa82>
 8006ec8:	4601      	mov	r1, r0
 8006eca:	4650      	mov	r0, sl
 8006ecc:	f000 fb5e 	bl	800758c <__mcmp>
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ed4:	4639      	mov	r1, r7
 8006ed6:	4628      	mov	r0, r5
 8006ed8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006edc:	f000 f91c 	bl	8007118 <_Bfree>
 8006ee0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ee2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ee4:	9f02      	ldr	r7, [sp, #8]
 8006ee6:	ea43 0102 	orr.w	r1, r3, r2
 8006eea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eec:	430b      	orrs	r3, r1
 8006eee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ef0:	d10d      	bne.n	8006f0e <_dtoa_r+0xa86>
 8006ef2:	2b39      	cmp	r3, #57	; 0x39
 8006ef4:	d027      	beq.n	8006f46 <_dtoa_r+0xabe>
 8006ef6:	9a06      	ldr	r2, [sp, #24]
 8006ef8:	2a00      	cmp	r2, #0
 8006efa:	dd01      	ble.n	8006f00 <_dtoa_r+0xa78>
 8006efc:	9b04      	ldr	r3, [sp, #16]
 8006efe:	3331      	adds	r3, #49	; 0x31
 8006f00:	f88b 3000 	strb.w	r3, [fp]
 8006f04:	e776      	b.n	8006df4 <_dtoa_r+0x96c>
 8006f06:	4630      	mov	r0, r6
 8006f08:	e7b9      	b.n	8006e7e <_dtoa_r+0x9f6>
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	e7e2      	b.n	8006ed4 <_dtoa_r+0xa4c>
 8006f0e:	9906      	ldr	r1, [sp, #24]
 8006f10:	2900      	cmp	r1, #0
 8006f12:	db04      	blt.n	8006f1e <_dtoa_r+0xa96>
 8006f14:	9822      	ldr	r0, [sp, #136]	; 0x88
 8006f16:	4301      	orrs	r1, r0
 8006f18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f1a:	4301      	orrs	r1, r0
 8006f1c:	d120      	bne.n	8006f60 <_dtoa_r+0xad8>
 8006f1e:	2a00      	cmp	r2, #0
 8006f20:	ddee      	ble.n	8006f00 <_dtoa_r+0xa78>
 8006f22:	4651      	mov	r1, sl
 8006f24:	2201      	movs	r2, #1
 8006f26:	4628      	mov	r0, r5
 8006f28:	9302      	str	r3, [sp, #8]
 8006f2a:	f000 fac3 	bl	80074b4 <__lshift>
 8006f2e:	4621      	mov	r1, r4
 8006f30:	4682      	mov	sl, r0
 8006f32:	f000 fb2b 	bl	800758c <__mcmp>
 8006f36:	2800      	cmp	r0, #0
 8006f38:	9b02      	ldr	r3, [sp, #8]
 8006f3a:	dc02      	bgt.n	8006f42 <_dtoa_r+0xaba>
 8006f3c:	d1e0      	bne.n	8006f00 <_dtoa_r+0xa78>
 8006f3e:	07da      	lsls	r2, r3, #31
 8006f40:	d5de      	bpl.n	8006f00 <_dtoa_r+0xa78>
 8006f42:	2b39      	cmp	r3, #57	; 0x39
 8006f44:	d1da      	bne.n	8006efc <_dtoa_r+0xa74>
 8006f46:	2339      	movs	r3, #57	; 0x39
 8006f48:	f88b 3000 	strb.w	r3, [fp]
 8006f4c:	463b      	mov	r3, r7
 8006f4e:	461f      	mov	r7, r3
 8006f50:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006f54:	3b01      	subs	r3, #1
 8006f56:	2a39      	cmp	r2, #57	; 0x39
 8006f58:	d050      	beq.n	8006ffc <_dtoa_r+0xb74>
 8006f5a:	3201      	adds	r2, #1
 8006f5c:	701a      	strb	r2, [r3, #0]
 8006f5e:	e749      	b.n	8006df4 <_dtoa_r+0x96c>
 8006f60:	2a00      	cmp	r2, #0
 8006f62:	dd03      	ble.n	8006f6c <_dtoa_r+0xae4>
 8006f64:	2b39      	cmp	r3, #57	; 0x39
 8006f66:	d0ee      	beq.n	8006f46 <_dtoa_r+0xabe>
 8006f68:	3301      	adds	r3, #1
 8006f6a:	e7c9      	b.n	8006f00 <_dtoa_r+0xa78>
 8006f6c:	9a02      	ldr	r2, [sp, #8]
 8006f6e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006f70:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006f74:	428a      	cmp	r2, r1
 8006f76:	d02a      	beq.n	8006fce <_dtoa_r+0xb46>
 8006f78:	4651      	mov	r1, sl
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	220a      	movs	r2, #10
 8006f7e:	4628      	mov	r0, r5
 8006f80:	f000 f8ec 	bl	800715c <__multadd>
 8006f84:	45b0      	cmp	r8, r6
 8006f86:	4682      	mov	sl, r0
 8006f88:	f04f 0300 	mov.w	r3, #0
 8006f8c:	f04f 020a 	mov.w	r2, #10
 8006f90:	4641      	mov	r1, r8
 8006f92:	4628      	mov	r0, r5
 8006f94:	d107      	bne.n	8006fa6 <_dtoa_r+0xb1e>
 8006f96:	f000 f8e1 	bl	800715c <__multadd>
 8006f9a:	4680      	mov	r8, r0
 8006f9c:	4606      	mov	r6, r0
 8006f9e:	9b02      	ldr	r3, [sp, #8]
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	9302      	str	r3, [sp, #8]
 8006fa4:	e777      	b.n	8006e96 <_dtoa_r+0xa0e>
 8006fa6:	f000 f8d9 	bl	800715c <__multadd>
 8006faa:	4631      	mov	r1, r6
 8006fac:	4680      	mov	r8, r0
 8006fae:	2300      	movs	r3, #0
 8006fb0:	220a      	movs	r2, #10
 8006fb2:	4628      	mov	r0, r5
 8006fb4:	f000 f8d2 	bl	800715c <__multadd>
 8006fb8:	4606      	mov	r6, r0
 8006fba:	e7f0      	b.n	8006f9e <_dtoa_r+0xb16>
 8006fbc:	f1bb 0f00 	cmp.w	fp, #0
 8006fc0:	bfcc      	ite	gt
 8006fc2:	465f      	movgt	r7, fp
 8006fc4:	2701      	movle	r7, #1
 8006fc6:	f04f 0800 	mov.w	r8, #0
 8006fca:	9a08      	ldr	r2, [sp, #32]
 8006fcc:	4417      	add	r7, r2
 8006fce:	4651      	mov	r1, sl
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	4628      	mov	r0, r5
 8006fd4:	9302      	str	r3, [sp, #8]
 8006fd6:	f000 fa6d 	bl	80074b4 <__lshift>
 8006fda:	4621      	mov	r1, r4
 8006fdc:	4682      	mov	sl, r0
 8006fde:	f000 fad5 	bl	800758c <__mcmp>
 8006fe2:	2800      	cmp	r0, #0
 8006fe4:	dcb2      	bgt.n	8006f4c <_dtoa_r+0xac4>
 8006fe6:	d102      	bne.n	8006fee <_dtoa_r+0xb66>
 8006fe8:	9b02      	ldr	r3, [sp, #8]
 8006fea:	07db      	lsls	r3, r3, #31
 8006fec:	d4ae      	bmi.n	8006f4c <_dtoa_r+0xac4>
 8006fee:	463b      	mov	r3, r7
 8006ff0:	461f      	mov	r7, r3
 8006ff2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ff6:	2a30      	cmp	r2, #48	; 0x30
 8006ff8:	d0fa      	beq.n	8006ff0 <_dtoa_r+0xb68>
 8006ffa:	e6fb      	b.n	8006df4 <_dtoa_r+0x96c>
 8006ffc:	9a08      	ldr	r2, [sp, #32]
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d1a5      	bne.n	8006f4e <_dtoa_r+0xac6>
 8007002:	2331      	movs	r3, #49	; 0x31
 8007004:	f109 0901 	add.w	r9, r9, #1
 8007008:	7013      	strb	r3, [r2, #0]
 800700a:	e6f3      	b.n	8006df4 <_dtoa_r+0x96c>
 800700c:	4b13      	ldr	r3, [pc, #76]	; (800705c <_dtoa_r+0xbd4>)
 800700e:	f7ff baa7 	b.w	8006560 <_dtoa_r+0xd8>
 8007012:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007014:	2b00      	cmp	r3, #0
 8007016:	f47f aa80 	bne.w	800651a <_dtoa_r+0x92>
 800701a:	4b11      	ldr	r3, [pc, #68]	; (8007060 <_dtoa_r+0xbd8>)
 800701c:	f7ff baa0 	b.w	8006560 <_dtoa_r+0xd8>
 8007020:	f1bb 0f00 	cmp.w	fp, #0
 8007024:	dc03      	bgt.n	800702e <_dtoa_r+0xba6>
 8007026:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007028:	2b02      	cmp	r3, #2
 800702a:	f73f aecc 	bgt.w	8006dc6 <_dtoa_r+0x93e>
 800702e:	9f08      	ldr	r7, [sp, #32]
 8007030:	4621      	mov	r1, r4
 8007032:	4650      	mov	r0, sl
 8007034:	f7ff f998 	bl	8006368 <quorem>
 8007038:	9a08      	ldr	r2, [sp, #32]
 800703a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800703e:	f807 3b01 	strb.w	r3, [r7], #1
 8007042:	1aba      	subs	r2, r7, r2
 8007044:	4593      	cmp	fp, r2
 8007046:	ddb9      	ble.n	8006fbc <_dtoa_r+0xb34>
 8007048:	4651      	mov	r1, sl
 800704a:	2300      	movs	r3, #0
 800704c:	220a      	movs	r2, #10
 800704e:	4628      	mov	r0, r5
 8007050:	f000 f884 	bl	800715c <__multadd>
 8007054:	4682      	mov	sl, r0
 8007056:	e7eb      	b.n	8007030 <_dtoa_r+0xba8>
 8007058:	0800ba9b 	.word	0x0800ba9b
 800705c:	0800b9f4 	.word	0x0800b9f4
 8007060:	0800ba18 	.word	0x0800ba18

08007064 <_localeconv_r>:
 8007064:	4800      	ldr	r0, [pc, #0]	; (8007068 <_localeconv_r+0x4>)
 8007066:	4770      	bx	lr
 8007068:	200001f4 	.word	0x200001f4

0800706c <malloc>:
 800706c:	4b02      	ldr	r3, [pc, #8]	; (8007078 <malloc+0xc>)
 800706e:	4601      	mov	r1, r0
 8007070:	6818      	ldr	r0, [r3, #0]
 8007072:	f000 bbed 	b.w	8007850 <_malloc_r>
 8007076:	bf00      	nop
 8007078:	200000a0 	.word	0x200000a0

0800707c <memchr>:
 800707c:	4603      	mov	r3, r0
 800707e:	b510      	push	{r4, lr}
 8007080:	b2c9      	uxtb	r1, r1
 8007082:	4402      	add	r2, r0
 8007084:	4293      	cmp	r3, r2
 8007086:	4618      	mov	r0, r3
 8007088:	d101      	bne.n	800708e <memchr+0x12>
 800708a:	2000      	movs	r0, #0
 800708c:	e003      	b.n	8007096 <memchr+0x1a>
 800708e:	7804      	ldrb	r4, [r0, #0]
 8007090:	3301      	adds	r3, #1
 8007092:	428c      	cmp	r4, r1
 8007094:	d1f6      	bne.n	8007084 <memchr+0x8>
 8007096:	bd10      	pop	{r4, pc}

08007098 <_Balloc>:
 8007098:	b570      	push	{r4, r5, r6, lr}
 800709a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800709c:	4604      	mov	r4, r0
 800709e:	460d      	mov	r5, r1
 80070a0:	b976      	cbnz	r6, 80070c0 <_Balloc+0x28>
 80070a2:	2010      	movs	r0, #16
 80070a4:	f7ff ffe2 	bl	800706c <malloc>
 80070a8:	4602      	mov	r2, r0
 80070aa:	6260      	str	r0, [r4, #36]	; 0x24
 80070ac:	b920      	cbnz	r0, 80070b8 <_Balloc+0x20>
 80070ae:	2166      	movs	r1, #102	; 0x66
 80070b0:	4b17      	ldr	r3, [pc, #92]	; (8007110 <_Balloc+0x78>)
 80070b2:	4818      	ldr	r0, [pc, #96]	; (8007114 <_Balloc+0x7c>)
 80070b4:	f000 fd92 	bl	8007bdc <__assert_func>
 80070b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80070bc:	6006      	str	r6, [r0, #0]
 80070be:	60c6      	str	r6, [r0, #12]
 80070c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80070c2:	68f3      	ldr	r3, [r6, #12]
 80070c4:	b183      	cbz	r3, 80070e8 <_Balloc+0x50>
 80070c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070c8:	68db      	ldr	r3, [r3, #12]
 80070ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80070ce:	b9b8      	cbnz	r0, 8007100 <_Balloc+0x68>
 80070d0:	2101      	movs	r1, #1
 80070d2:	fa01 f605 	lsl.w	r6, r1, r5
 80070d6:	1d72      	adds	r2, r6, #5
 80070d8:	4620      	mov	r0, r4
 80070da:	0092      	lsls	r2, r2, #2
 80070dc:	f000 fb5e 	bl	800779c <_calloc_r>
 80070e0:	b160      	cbz	r0, 80070fc <_Balloc+0x64>
 80070e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80070e6:	e00e      	b.n	8007106 <_Balloc+0x6e>
 80070e8:	2221      	movs	r2, #33	; 0x21
 80070ea:	2104      	movs	r1, #4
 80070ec:	4620      	mov	r0, r4
 80070ee:	f000 fb55 	bl	800779c <_calloc_r>
 80070f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070f4:	60f0      	str	r0, [r6, #12]
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d1e4      	bne.n	80070c6 <_Balloc+0x2e>
 80070fc:	2000      	movs	r0, #0
 80070fe:	bd70      	pop	{r4, r5, r6, pc}
 8007100:	6802      	ldr	r2, [r0, #0]
 8007102:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007106:	2300      	movs	r3, #0
 8007108:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800710c:	e7f7      	b.n	80070fe <_Balloc+0x66>
 800710e:	bf00      	nop
 8007110:	0800ba25 	.word	0x0800ba25
 8007114:	0800baac 	.word	0x0800baac

08007118 <_Bfree>:
 8007118:	b570      	push	{r4, r5, r6, lr}
 800711a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800711c:	4605      	mov	r5, r0
 800711e:	460c      	mov	r4, r1
 8007120:	b976      	cbnz	r6, 8007140 <_Bfree+0x28>
 8007122:	2010      	movs	r0, #16
 8007124:	f7ff ffa2 	bl	800706c <malloc>
 8007128:	4602      	mov	r2, r0
 800712a:	6268      	str	r0, [r5, #36]	; 0x24
 800712c:	b920      	cbnz	r0, 8007138 <_Bfree+0x20>
 800712e:	218a      	movs	r1, #138	; 0x8a
 8007130:	4b08      	ldr	r3, [pc, #32]	; (8007154 <_Bfree+0x3c>)
 8007132:	4809      	ldr	r0, [pc, #36]	; (8007158 <_Bfree+0x40>)
 8007134:	f000 fd52 	bl	8007bdc <__assert_func>
 8007138:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800713c:	6006      	str	r6, [r0, #0]
 800713e:	60c6      	str	r6, [r0, #12]
 8007140:	b13c      	cbz	r4, 8007152 <_Bfree+0x3a>
 8007142:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007144:	6862      	ldr	r2, [r4, #4]
 8007146:	68db      	ldr	r3, [r3, #12]
 8007148:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800714c:	6021      	str	r1, [r4, #0]
 800714e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007152:	bd70      	pop	{r4, r5, r6, pc}
 8007154:	0800ba25 	.word	0x0800ba25
 8007158:	0800baac 	.word	0x0800baac

0800715c <__multadd>:
 800715c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007160:	4698      	mov	r8, r3
 8007162:	460c      	mov	r4, r1
 8007164:	2300      	movs	r3, #0
 8007166:	690e      	ldr	r6, [r1, #16]
 8007168:	4607      	mov	r7, r0
 800716a:	f101 0014 	add.w	r0, r1, #20
 800716e:	6805      	ldr	r5, [r0, #0]
 8007170:	3301      	adds	r3, #1
 8007172:	b2a9      	uxth	r1, r5
 8007174:	fb02 8101 	mla	r1, r2, r1, r8
 8007178:	0c2d      	lsrs	r5, r5, #16
 800717a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800717e:	fb02 c505 	mla	r5, r2, r5, ip
 8007182:	b289      	uxth	r1, r1
 8007184:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007188:	429e      	cmp	r6, r3
 800718a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800718e:	f840 1b04 	str.w	r1, [r0], #4
 8007192:	dcec      	bgt.n	800716e <__multadd+0x12>
 8007194:	f1b8 0f00 	cmp.w	r8, #0
 8007198:	d022      	beq.n	80071e0 <__multadd+0x84>
 800719a:	68a3      	ldr	r3, [r4, #8]
 800719c:	42b3      	cmp	r3, r6
 800719e:	dc19      	bgt.n	80071d4 <__multadd+0x78>
 80071a0:	6861      	ldr	r1, [r4, #4]
 80071a2:	4638      	mov	r0, r7
 80071a4:	3101      	adds	r1, #1
 80071a6:	f7ff ff77 	bl	8007098 <_Balloc>
 80071aa:	4605      	mov	r5, r0
 80071ac:	b928      	cbnz	r0, 80071ba <__multadd+0x5e>
 80071ae:	4602      	mov	r2, r0
 80071b0:	21b5      	movs	r1, #181	; 0xb5
 80071b2:	4b0d      	ldr	r3, [pc, #52]	; (80071e8 <__multadd+0x8c>)
 80071b4:	480d      	ldr	r0, [pc, #52]	; (80071ec <__multadd+0x90>)
 80071b6:	f000 fd11 	bl	8007bdc <__assert_func>
 80071ba:	6922      	ldr	r2, [r4, #16]
 80071bc:	f104 010c 	add.w	r1, r4, #12
 80071c0:	3202      	adds	r2, #2
 80071c2:	0092      	lsls	r2, r2, #2
 80071c4:	300c      	adds	r0, #12
 80071c6:	f7fe fc39 	bl	8005a3c <memcpy>
 80071ca:	4621      	mov	r1, r4
 80071cc:	4638      	mov	r0, r7
 80071ce:	f7ff ffa3 	bl	8007118 <_Bfree>
 80071d2:	462c      	mov	r4, r5
 80071d4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80071d8:	3601      	adds	r6, #1
 80071da:	f8c3 8014 	str.w	r8, [r3, #20]
 80071de:	6126      	str	r6, [r4, #16]
 80071e0:	4620      	mov	r0, r4
 80071e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071e6:	bf00      	nop
 80071e8:	0800ba9b 	.word	0x0800ba9b
 80071ec:	0800baac 	.word	0x0800baac

080071f0 <__hi0bits>:
 80071f0:	0c02      	lsrs	r2, r0, #16
 80071f2:	0412      	lsls	r2, r2, #16
 80071f4:	4603      	mov	r3, r0
 80071f6:	b9ca      	cbnz	r2, 800722c <__hi0bits+0x3c>
 80071f8:	0403      	lsls	r3, r0, #16
 80071fa:	2010      	movs	r0, #16
 80071fc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007200:	bf04      	itt	eq
 8007202:	021b      	lsleq	r3, r3, #8
 8007204:	3008      	addeq	r0, #8
 8007206:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800720a:	bf04      	itt	eq
 800720c:	011b      	lsleq	r3, r3, #4
 800720e:	3004      	addeq	r0, #4
 8007210:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007214:	bf04      	itt	eq
 8007216:	009b      	lsleq	r3, r3, #2
 8007218:	3002      	addeq	r0, #2
 800721a:	2b00      	cmp	r3, #0
 800721c:	db05      	blt.n	800722a <__hi0bits+0x3a>
 800721e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007222:	f100 0001 	add.w	r0, r0, #1
 8007226:	bf08      	it	eq
 8007228:	2020      	moveq	r0, #32
 800722a:	4770      	bx	lr
 800722c:	2000      	movs	r0, #0
 800722e:	e7e5      	b.n	80071fc <__hi0bits+0xc>

08007230 <__lo0bits>:
 8007230:	6803      	ldr	r3, [r0, #0]
 8007232:	4602      	mov	r2, r0
 8007234:	f013 0007 	ands.w	r0, r3, #7
 8007238:	d00b      	beq.n	8007252 <__lo0bits+0x22>
 800723a:	07d9      	lsls	r1, r3, #31
 800723c:	d422      	bmi.n	8007284 <__lo0bits+0x54>
 800723e:	0798      	lsls	r0, r3, #30
 8007240:	bf49      	itett	mi
 8007242:	085b      	lsrmi	r3, r3, #1
 8007244:	089b      	lsrpl	r3, r3, #2
 8007246:	2001      	movmi	r0, #1
 8007248:	6013      	strmi	r3, [r2, #0]
 800724a:	bf5c      	itt	pl
 800724c:	2002      	movpl	r0, #2
 800724e:	6013      	strpl	r3, [r2, #0]
 8007250:	4770      	bx	lr
 8007252:	b299      	uxth	r1, r3
 8007254:	b909      	cbnz	r1, 800725a <__lo0bits+0x2a>
 8007256:	2010      	movs	r0, #16
 8007258:	0c1b      	lsrs	r3, r3, #16
 800725a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800725e:	bf04      	itt	eq
 8007260:	0a1b      	lsreq	r3, r3, #8
 8007262:	3008      	addeq	r0, #8
 8007264:	0719      	lsls	r1, r3, #28
 8007266:	bf04      	itt	eq
 8007268:	091b      	lsreq	r3, r3, #4
 800726a:	3004      	addeq	r0, #4
 800726c:	0799      	lsls	r1, r3, #30
 800726e:	bf04      	itt	eq
 8007270:	089b      	lsreq	r3, r3, #2
 8007272:	3002      	addeq	r0, #2
 8007274:	07d9      	lsls	r1, r3, #31
 8007276:	d403      	bmi.n	8007280 <__lo0bits+0x50>
 8007278:	085b      	lsrs	r3, r3, #1
 800727a:	f100 0001 	add.w	r0, r0, #1
 800727e:	d003      	beq.n	8007288 <__lo0bits+0x58>
 8007280:	6013      	str	r3, [r2, #0]
 8007282:	4770      	bx	lr
 8007284:	2000      	movs	r0, #0
 8007286:	4770      	bx	lr
 8007288:	2020      	movs	r0, #32
 800728a:	4770      	bx	lr

0800728c <__i2b>:
 800728c:	b510      	push	{r4, lr}
 800728e:	460c      	mov	r4, r1
 8007290:	2101      	movs	r1, #1
 8007292:	f7ff ff01 	bl	8007098 <_Balloc>
 8007296:	4602      	mov	r2, r0
 8007298:	b928      	cbnz	r0, 80072a6 <__i2b+0x1a>
 800729a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800729e:	4b04      	ldr	r3, [pc, #16]	; (80072b0 <__i2b+0x24>)
 80072a0:	4804      	ldr	r0, [pc, #16]	; (80072b4 <__i2b+0x28>)
 80072a2:	f000 fc9b 	bl	8007bdc <__assert_func>
 80072a6:	2301      	movs	r3, #1
 80072a8:	6144      	str	r4, [r0, #20]
 80072aa:	6103      	str	r3, [r0, #16]
 80072ac:	bd10      	pop	{r4, pc}
 80072ae:	bf00      	nop
 80072b0:	0800ba9b 	.word	0x0800ba9b
 80072b4:	0800baac 	.word	0x0800baac

080072b8 <__multiply>:
 80072b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072bc:	4614      	mov	r4, r2
 80072be:	690a      	ldr	r2, [r1, #16]
 80072c0:	6923      	ldr	r3, [r4, #16]
 80072c2:	460d      	mov	r5, r1
 80072c4:	429a      	cmp	r2, r3
 80072c6:	bfbe      	ittt	lt
 80072c8:	460b      	movlt	r3, r1
 80072ca:	4625      	movlt	r5, r4
 80072cc:	461c      	movlt	r4, r3
 80072ce:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80072d2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80072d6:	68ab      	ldr	r3, [r5, #8]
 80072d8:	6869      	ldr	r1, [r5, #4]
 80072da:	eb0a 0709 	add.w	r7, sl, r9
 80072de:	42bb      	cmp	r3, r7
 80072e0:	b085      	sub	sp, #20
 80072e2:	bfb8      	it	lt
 80072e4:	3101      	addlt	r1, #1
 80072e6:	f7ff fed7 	bl	8007098 <_Balloc>
 80072ea:	b930      	cbnz	r0, 80072fa <__multiply+0x42>
 80072ec:	4602      	mov	r2, r0
 80072ee:	f240 115d 	movw	r1, #349	; 0x15d
 80072f2:	4b41      	ldr	r3, [pc, #260]	; (80073f8 <__multiply+0x140>)
 80072f4:	4841      	ldr	r0, [pc, #260]	; (80073fc <__multiply+0x144>)
 80072f6:	f000 fc71 	bl	8007bdc <__assert_func>
 80072fa:	f100 0614 	add.w	r6, r0, #20
 80072fe:	4633      	mov	r3, r6
 8007300:	2200      	movs	r2, #0
 8007302:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007306:	4543      	cmp	r3, r8
 8007308:	d31e      	bcc.n	8007348 <__multiply+0x90>
 800730a:	f105 0c14 	add.w	ip, r5, #20
 800730e:	f104 0314 	add.w	r3, r4, #20
 8007312:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007316:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800731a:	9202      	str	r2, [sp, #8]
 800731c:	ebac 0205 	sub.w	r2, ip, r5
 8007320:	3a15      	subs	r2, #21
 8007322:	f022 0203 	bic.w	r2, r2, #3
 8007326:	3204      	adds	r2, #4
 8007328:	f105 0115 	add.w	r1, r5, #21
 800732c:	458c      	cmp	ip, r1
 800732e:	bf38      	it	cc
 8007330:	2204      	movcc	r2, #4
 8007332:	9201      	str	r2, [sp, #4]
 8007334:	9a02      	ldr	r2, [sp, #8]
 8007336:	9303      	str	r3, [sp, #12]
 8007338:	429a      	cmp	r2, r3
 800733a:	d808      	bhi.n	800734e <__multiply+0x96>
 800733c:	2f00      	cmp	r7, #0
 800733e:	dc55      	bgt.n	80073ec <__multiply+0x134>
 8007340:	6107      	str	r7, [r0, #16]
 8007342:	b005      	add	sp, #20
 8007344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007348:	f843 2b04 	str.w	r2, [r3], #4
 800734c:	e7db      	b.n	8007306 <__multiply+0x4e>
 800734e:	f8b3 a000 	ldrh.w	sl, [r3]
 8007352:	f1ba 0f00 	cmp.w	sl, #0
 8007356:	d020      	beq.n	800739a <__multiply+0xe2>
 8007358:	46b1      	mov	r9, r6
 800735a:	2200      	movs	r2, #0
 800735c:	f105 0e14 	add.w	lr, r5, #20
 8007360:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007364:	f8d9 b000 	ldr.w	fp, [r9]
 8007368:	b2a1      	uxth	r1, r4
 800736a:	fa1f fb8b 	uxth.w	fp, fp
 800736e:	fb0a b101 	mla	r1, sl, r1, fp
 8007372:	4411      	add	r1, r2
 8007374:	f8d9 2000 	ldr.w	r2, [r9]
 8007378:	0c24      	lsrs	r4, r4, #16
 800737a:	0c12      	lsrs	r2, r2, #16
 800737c:	fb0a 2404 	mla	r4, sl, r4, r2
 8007380:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007384:	b289      	uxth	r1, r1
 8007386:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800738a:	45f4      	cmp	ip, lr
 800738c:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007390:	f849 1b04 	str.w	r1, [r9], #4
 8007394:	d8e4      	bhi.n	8007360 <__multiply+0xa8>
 8007396:	9901      	ldr	r1, [sp, #4]
 8007398:	5072      	str	r2, [r6, r1]
 800739a:	9a03      	ldr	r2, [sp, #12]
 800739c:	3304      	adds	r3, #4
 800739e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80073a2:	f1b9 0f00 	cmp.w	r9, #0
 80073a6:	d01f      	beq.n	80073e8 <__multiply+0x130>
 80073a8:	46b6      	mov	lr, r6
 80073aa:	f04f 0a00 	mov.w	sl, #0
 80073ae:	6834      	ldr	r4, [r6, #0]
 80073b0:	f105 0114 	add.w	r1, r5, #20
 80073b4:	880a      	ldrh	r2, [r1, #0]
 80073b6:	f8be b002 	ldrh.w	fp, [lr, #2]
 80073ba:	b2a4      	uxth	r4, r4
 80073bc:	fb09 b202 	mla	r2, r9, r2, fp
 80073c0:	4492      	add	sl, r2
 80073c2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80073c6:	f84e 4b04 	str.w	r4, [lr], #4
 80073ca:	f851 4b04 	ldr.w	r4, [r1], #4
 80073ce:	f8be 2000 	ldrh.w	r2, [lr]
 80073d2:	0c24      	lsrs	r4, r4, #16
 80073d4:	fb09 2404 	mla	r4, r9, r4, r2
 80073d8:	458c      	cmp	ip, r1
 80073da:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80073de:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80073e2:	d8e7      	bhi.n	80073b4 <__multiply+0xfc>
 80073e4:	9a01      	ldr	r2, [sp, #4]
 80073e6:	50b4      	str	r4, [r6, r2]
 80073e8:	3604      	adds	r6, #4
 80073ea:	e7a3      	b.n	8007334 <__multiply+0x7c>
 80073ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d1a5      	bne.n	8007340 <__multiply+0x88>
 80073f4:	3f01      	subs	r7, #1
 80073f6:	e7a1      	b.n	800733c <__multiply+0x84>
 80073f8:	0800ba9b 	.word	0x0800ba9b
 80073fc:	0800baac 	.word	0x0800baac

08007400 <__pow5mult>:
 8007400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007404:	4615      	mov	r5, r2
 8007406:	f012 0203 	ands.w	r2, r2, #3
 800740a:	4606      	mov	r6, r0
 800740c:	460f      	mov	r7, r1
 800740e:	d007      	beq.n	8007420 <__pow5mult+0x20>
 8007410:	4c25      	ldr	r4, [pc, #148]	; (80074a8 <__pow5mult+0xa8>)
 8007412:	3a01      	subs	r2, #1
 8007414:	2300      	movs	r3, #0
 8007416:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800741a:	f7ff fe9f 	bl	800715c <__multadd>
 800741e:	4607      	mov	r7, r0
 8007420:	10ad      	asrs	r5, r5, #2
 8007422:	d03d      	beq.n	80074a0 <__pow5mult+0xa0>
 8007424:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007426:	b97c      	cbnz	r4, 8007448 <__pow5mult+0x48>
 8007428:	2010      	movs	r0, #16
 800742a:	f7ff fe1f 	bl	800706c <malloc>
 800742e:	4602      	mov	r2, r0
 8007430:	6270      	str	r0, [r6, #36]	; 0x24
 8007432:	b928      	cbnz	r0, 8007440 <__pow5mult+0x40>
 8007434:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007438:	4b1c      	ldr	r3, [pc, #112]	; (80074ac <__pow5mult+0xac>)
 800743a:	481d      	ldr	r0, [pc, #116]	; (80074b0 <__pow5mult+0xb0>)
 800743c:	f000 fbce 	bl	8007bdc <__assert_func>
 8007440:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007444:	6004      	str	r4, [r0, #0]
 8007446:	60c4      	str	r4, [r0, #12]
 8007448:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800744c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007450:	b94c      	cbnz	r4, 8007466 <__pow5mult+0x66>
 8007452:	f240 2171 	movw	r1, #625	; 0x271
 8007456:	4630      	mov	r0, r6
 8007458:	f7ff ff18 	bl	800728c <__i2b>
 800745c:	2300      	movs	r3, #0
 800745e:	4604      	mov	r4, r0
 8007460:	f8c8 0008 	str.w	r0, [r8, #8]
 8007464:	6003      	str	r3, [r0, #0]
 8007466:	f04f 0900 	mov.w	r9, #0
 800746a:	07eb      	lsls	r3, r5, #31
 800746c:	d50a      	bpl.n	8007484 <__pow5mult+0x84>
 800746e:	4639      	mov	r1, r7
 8007470:	4622      	mov	r2, r4
 8007472:	4630      	mov	r0, r6
 8007474:	f7ff ff20 	bl	80072b8 <__multiply>
 8007478:	4680      	mov	r8, r0
 800747a:	4639      	mov	r1, r7
 800747c:	4630      	mov	r0, r6
 800747e:	f7ff fe4b 	bl	8007118 <_Bfree>
 8007482:	4647      	mov	r7, r8
 8007484:	106d      	asrs	r5, r5, #1
 8007486:	d00b      	beq.n	80074a0 <__pow5mult+0xa0>
 8007488:	6820      	ldr	r0, [r4, #0]
 800748a:	b938      	cbnz	r0, 800749c <__pow5mult+0x9c>
 800748c:	4622      	mov	r2, r4
 800748e:	4621      	mov	r1, r4
 8007490:	4630      	mov	r0, r6
 8007492:	f7ff ff11 	bl	80072b8 <__multiply>
 8007496:	6020      	str	r0, [r4, #0]
 8007498:	f8c0 9000 	str.w	r9, [r0]
 800749c:	4604      	mov	r4, r0
 800749e:	e7e4      	b.n	800746a <__pow5mult+0x6a>
 80074a0:	4638      	mov	r0, r7
 80074a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074a6:	bf00      	nop
 80074a8:	0800bc00 	.word	0x0800bc00
 80074ac:	0800ba25 	.word	0x0800ba25
 80074b0:	0800baac 	.word	0x0800baac

080074b4 <__lshift>:
 80074b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074b8:	460c      	mov	r4, r1
 80074ba:	4607      	mov	r7, r0
 80074bc:	4691      	mov	r9, r2
 80074be:	6923      	ldr	r3, [r4, #16]
 80074c0:	6849      	ldr	r1, [r1, #4]
 80074c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80074c6:	68a3      	ldr	r3, [r4, #8]
 80074c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80074cc:	f108 0601 	add.w	r6, r8, #1
 80074d0:	42b3      	cmp	r3, r6
 80074d2:	db0b      	blt.n	80074ec <__lshift+0x38>
 80074d4:	4638      	mov	r0, r7
 80074d6:	f7ff fddf 	bl	8007098 <_Balloc>
 80074da:	4605      	mov	r5, r0
 80074dc:	b948      	cbnz	r0, 80074f2 <__lshift+0x3e>
 80074de:	4602      	mov	r2, r0
 80074e0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80074e4:	4b27      	ldr	r3, [pc, #156]	; (8007584 <__lshift+0xd0>)
 80074e6:	4828      	ldr	r0, [pc, #160]	; (8007588 <__lshift+0xd4>)
 80074e8:	f000 fb78 	bl	8007bdc <__assert_func>
 80074ec:	3101      	adds	r1, #1
 80074ee:	005b      	lsls	r3, r3, #1
 80074f0:	e7ee      	b.n	80074d0 <__lshift+0x1c>
 80074f2:	2300      	movs	r3, #0
 80074f4:	f100 0114 	add.w	r1, r0, #20
 80074f8:	f100 0210 	add.w	r2, r0, #16
 80074fc:	4618      	mov	r0, r3
 80074fe:	4553      	cmp	r3, sl
 8007500:	db33      	blt.n	800756a <__lshift+0xb6>
 8007502:	6920      	ldr	r0, [r4, #16]
 8007504:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007508:	f104 0314 	add.w	r3, r4, #20
 800750c:	f019 091f 	ands.w	r9, r9, #31
 8007510:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007514:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007518:	d02b      	beq.n	8007572 <__lshift+0xbe>
 800751a:	468a      	mov	sl, r1
 800751c:	2200      	movs	r2, #0
 800751e:	f1c9 0e20 	rsb	lr, r9, #32
 8007522:	6818      	ldr	r0, [r3, #0]
 8007524:	fa00 f009 	lsl.w	r0, r0, r9
 8007528:	4302      	orrs	r2, r0
 800752a:	f84a 2b04 	str.w	r2, [sl], #4
 800752e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007532:	459c      	cmp	ip, r3
 8007534:	fa22 f20e 	lsr.w	r2, r2, lr
 8007538:	d8f3      	bhi.n	8007522 <__lshift+0x6e>
 800753a:	ebac 0304 	sub.w	r3, ip, r4
 800753e:	3b15      	subs	r3, #21
 8007540:	f023 0303 	bic.w	r3, r3, #3
 8007544:	3304      	adds	r3, #4
 8007546:	f104 0015 	add.w	r0, r4, #21
 800754a:	4584      	cmp	ip, r0
 800754c:	bf38      	it	cc
 800754e:	2304      	movcc	r3, #4
 8007550:	50ca      	str	r2, [r1, r3]
 8007552:	b10a      	cbz	r2, 8007558 <__lshift+0xa4>
 8007554:	f108 0602 	add.w	r6, r8, #2
 8007558:	3e01      	subs	r6, #1
 800755a:	4638      	mov	r0, r7
 800755c:	4621      	mov	r1, r4
 800755e:	612e      	str	r6, [r5, #16]
 8007560:	f7ff fdda 	bl	8007118 <_Bfree>
 8007564:	4628      	mov	r0, r5
 8007566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800756a:	f842 0f04 	str.w	r0, [r2, #4]!
 800756e:	3301      	adds	r3, #1
 8007570:	e7c5      	b.n	80074fe <__lshift+0x4a>
 8007572:	3904      	subs	r1, #4
 8007574:	f853 2b04 	ldr.w	r2, [r3], #4
 8007578:	459c      	cmp	ip, r3
 800757a:	f841 2f04 	str.w	r2, [r1, #4]!
 800757e:	d8f9      	bhi.n	8007574 <__lshift+0xc0>
 8007580:	e7ea      	b.n	8007558 <__lshift+0xa4>
 8007582:	bf00      	nop
 8007584:	0800ba9b 	.word	0x0800ba9b
 8007588:	0800baac 	.word	0x0800baac

0800758c <__mcmp>:
 800758c:	4603      	mov	r3, r0
 800758e:	690a      	ldr	r2, [r1, #16]
 8007590:	6900      	ldr	r0, [r0, #16]
 8007592:	b530      	push	{r4, r5, lr}
 8007594:	1a80      	subs	r0, r0, r2
 8007596:	d10d      	bne.n	80075b4 <__mcmp+0x28>
 8007598:	3314      	adds	r3, #20
 800759a:	3114      	adds	r1, #20
 800759c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80075a0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80075a4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80075a8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80075ac:	4295      	cmp	r5, r2
 80075ae:	d002      	beq.n	80075b6 <__mcmp+0x2a>
 80075b0:	d304      	bcc.n	80075bc <__mcmp+0x30>
 80075b2:	2001      	movs	r0, #1
 80075b4:	bd30      	pop	{r4, r5, pc}
 80075b6:	42a3      	cmp	r3, r4
 80075b8:	d3f4      	bcc.n	80075a4 <__mcmp+0x18>
 80075ba:	e7fb      	b.n	80075b4 <__mcmp+0x28>
 80075bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80075c0:	e7f8      	b.n	80075b4 <__mcmp+0x28>
	...

080075c4 <__mdiff>:
 80075c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075c8:	460c      	mov	r4, r1
 80075ca:	4606      	mov	r6, r0
 80075cc:	4611      	mov	r1, r2
 80075ce:	4620      	mov	r0, r4
 80075d0:	4692      	mov	sl, r2
 80075d2:	f7ff ffdb 	bl	800758c <__mcmp>
 80075d6:	1e05      	subs	r5, r0, #0
 80075d8:	d111      	bne.n	80075fe <__mdiff+0x3a>
 80075da:	4629      	mov	r1, r5
 80075dc:	4630      	mov	r0, r6
 80075de:	f7ff fd5b 	bl	8007098 <_Balloc>
 80075e2:	4602      	mov	r2, r0
 80075e4:	b928      	cbnz	r0, 80075f2 <__mdiff+0x2e>
 80075e6:	f240 2132 	movw	r1, #562	; 0x232
 80075ea:	4b3c      	ldr	r3, [pc, #240]	; (80076dc <__mdiff+0x118>)
 80075ec:	483c      	ldr	r0, [pc, #240]	; (80076e0 <__mdiff+0x11c>)
 80075ee:	f000 faf5 	bl	8007bdc <__assert_func>
 80075f2:	2301      	movs	r3, #1
 80075f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80075f8:	4610      	mov	r0, r2
 80075fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075fe:	bfa4      	itt	ge
 8007600:	4653      	movge	r3, sl
 8007602:	46a2      	movge	sl, r4
 8007604:	4630      	mov	r0, r6
 8007606:	f8da 1004 	ldr.w	r1, [sl, #4]
 800760a:	bfa6      	itte	ge
 800760c:	461c      	movge	r4, r3
 800760e:	2500      	movge	r5, #0
 8007610:	2501      	movlt	r5, #1
 8007612:	f7ff fd41 	bl	8007098 <_Balloc>
 8007616:	4602      	mov	r2, r0
 8007618:	b918      	cbnz	r0, 8007622 <__mdiff+0x5e>
 800761a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800761e:	4b2f      	ldr	r3, [pc, #188]	; (80076dc <__mdiff+0x118>)
 8007620:	e7e4      	b.n	80075ec <__mdiff+0x28>
 8007622:	f100 0814 	add.w	r8, r0, #20
 8007626:	f8da 7010 	ldr.w	r7, [sl, #16]
 800762a:	60c5      	str	r5, [r0, #12]
 800762c:	f04f 0c00 	mov.w	ip, #0
 8007630:	f10a 0514 	add.w	r5, sl, #20
 8007634:	f10a 0010 	add.w	r0, sl, #16
 8007638:	46c2      	mov	sl, r8
 800763a:	6926      	ldr	r6, [r4, #16]
 800763c:	f104 0914 	add.w	r9, r4, #20
 8007640:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8007644:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007648:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800764c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007650:	fa1f f18b 	uxth.w	r1, fp
 8007654:	4461      	add	r1, ip
 8007656:	fa1f fc83 	uxth.w	ip, r3
 800765a:	0c1b      	lsrs	r3, r3, #16
 800765c:	eba1 010c 	sub.w	r1, r1, ip
 8007660:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007664:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007668:	b289      	uxth	r1, r1
 800766a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800766e:	454e      	cmp	r6, r9
 8007670:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007674:	f84a 3b04 	str.w	r3, [sl], #4
 8007678:	d8e6      	bhi.n	8007648 <__mdiff+0x84>
 800767a:	1b33      	subs	r3, r6, r4
 800767c:	3b15      	subs	r3, #21
 800767e:	f023 0303 	bic.w	r3, r3, #3
 8007682:	3415      	adds	r4, #21
 8007684:	3304      	adds	r3, #4
 8007686:	42a6      	cmp	r6, r4
 8007688:	bf38      	it	cc
 800768a:	2304      	movcc	r3, #4
 800768c:	441d      	add	r5, r3
 800768e:	4443      	add	r3, r8
 8007690:	461e      	mov	r6, r3
 8007692:	462c      	mov	r4, r5
 8007694:	4574      	cmp	r4, lr
 8007696:	d30e      	bcc.n	80076b6 <__mdiff+0xf2>
 8007698:	f10e 0103 	add.w	r1, lr, #3
 800769c:	1b49      	subs	r1, r1, r5
 800769e:	f021 0103 	bic.w	r1, r1, #3
 80076a2:	3d03      	subs	r5, #3
 80076a4:	45ae      	cmp	lr, r5
 80076a6:	bf38      	it	cc
 80076a8:	2100      	movcc	r1, #0
 80076aa:	4419      	add	r1, r3
 80076ac:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80076b0:	b18b      	cbz	r3, 80076d6 <__mdiff+0x112>
 80076b2:	6117      	str	r7, [r2, #16]
 80076b4:	e7a0      	b.n	80075f8 <__mdiff+0x34>
 80076b6:	f854 8b04 	ldr.w	r8, [r4], #4
 80076ba:	fa1f f188 	uxth.w	r1, r8
 80076be:	4461      	add	r1, ip
 80076c0:	1408      	asrs	r0, r1, #16
 80076c2:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 80076c6:	b289      	uxth	r1, r1
 80076c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80076cc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80076d0:	f846 1b04 	str.w	r1, [r6], #4
 80076d4:	e7de      	b.n	8007694 <__mdiff+0xd0>
 80076d6:	3f01      	subs	r7, #1
 80076d8:	e7e8      	b.n	80076ac <__mdiff+0xe8>
 80076da:	bf00      	nop
 80076dc:	0800ba9b 	.word	0x0800ba9b
 80076e0:	0800baac 	.word	0x0800baac

080076e4 <__d2b>:
 80076e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80076e8:	2101      	movs	r1, #1
 80076ea:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80076ee:	4690      	mov	r8, r2
 80076f0:	461d      	mov	r5, r3
 80076f2:	f7ff fcd1 	bl	8007098 <_Balloc>
 80076f6:	4604      	mov	r4, r0
 80076f8:	b930      	cbnz	r0, 8007708 <__d2b+0x24>
 80076fa:	4602      	mov	r2, r0
 80076fc:	f240 310a 	movw	r1, #778	; 0x30a
 8007700:	4b24      	ldr	r3, [pc, #144]	; (8007794 <__d2b+0xb0>)
 8007702:	4825      	ldr	r0, [pc, #148]	; (8007798 <__d2b+0xb4>)
 8007704:	f000 fa6a 	bl	8007bdc <__assert_func>
 8007708:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800770c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007710:	bb2d      	cbnz	r5, 800775e <__d2b+0x7a>
 8007712:	9301      	str	r3, [sp, #4]
 8007714:	f1b8 0300 	subs.w	r3, r8, #0
 8007718:	d026      	beq.n	8007768 <__d2b+0x84>
 800771a:	4668      	mov	r0, sp
 800771c:	9300      	str	r3, [sp, #0]
 800771e:	f7ff fd87 	bl	8007230 <__lo0bits>
 8007722:	9900      	ldr	r1, [sp, #0]
 8007724:	b1f0      	cbz	r0, 8007764 <__d2b+0x80>
 8007726:	9a01      	ldr	r2, [sp, #4]
 8007728:	f1c0 0320 	rsb	r3, r0, #32
 800772c:	fa02 f303 	lsl.w	r3, r2, r3
 8007730:	430b      	orrs	r3, r1
 8007732:	40c2      	lsrs	r2, r0
 8007734:	6163      	str	r3, [r4, #20]
 8007736:	9201      	str	r2, [sp, #4]
 8007738:	9b01      	ldr	r3, [sp, #4]
 800773a:	2b00      	cmp	r3, #0
 800773c:	bf14      	ite	ne
 800773e:	2102      	movne	r1, #2
 8007740:	2101      	moveq	r1, #1
 8007742:	61a3      	str	r3, [r4, #24]
 8007744:	6121      	str	r1, [r4, #16]
 8007746:	b1c5      	cbz	r5, 800777a <__d2b+0x96>
 8007748:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800774c:	4405      	add	r5, r0
 800774e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007752:	603d      	str	r5, [r7, #0]
 8007754:	6030      	str	r0, [r6, #0]
 8007756:	4620      	mov	r0, r4
 8007758:	b002      	add	sp, #8
 800775a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800775e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007762:	e7d6      	b.n	8007712 <__d2b+0x2e>
 8007764:	6161      	str	r1, [r4, #20]
 8007766:	e7e7      	b.n	8007738 <__d2b+0x54>
 8007768:	a801      	add	r0, sp, #4
 800776a:	f7ff fd61 	bl	8007230 <__lo0bits>
 800776e:	2101      	movs	r1, #1
 8007770:	9b01      	ldr	r3, [sp, #4]
 8007772:	6121      	str	r1, [r4, #16]
 8007774:	6163      	str	r3, [r4, #20]
 8007776:	3020      	adds	r0, #32
 8007778:	e7e5      	b.n	8007746 <__d2b+0x62>
 800777a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800777e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007782:	6038      	str	r0, [r7, #0]
 8007784:	6918      	ldr	r0, [r3, #16]
 8007786:	f7ff fd33 	bl	80071f0 <__hi0bits>
 800778a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800778e:	6031      	str	r1, [r6, #0]
 8007790:	e7e1      	b.n	8007756 <__d2b+0x72>
 8007792:	bf00      	nop
 8007794:	0800ba9b 	.word	0x0800ba9b
 8007798:	0800baac 	.word	0x0800baac

0800779c <_calloc_r>:
 800779c:	b538      	push	{r3, r4, r5, lr}
 800779e:	fb02 f501 	mul.w	r5, r2, r1
 80077a2:	4629      	mov	r1, r5
 80077a4:	f000 f854 	bl	8007850 <_malloc_r>
 80077a8:	4604      	mov	r4, r0
 80077aa:	b118      	cbz	r0, 80077b4 <_calloc_r+0x18>
 80077ac:	462a      	mov	r2, r5
 80077ae:	2100      	movs	r1, #0
 80077b0:	f7fe f952 	bl	8005a58 <memset>
 80077b4:	4620      	mov	r0, r4
 80077b6:	bd38      	pop	{r3, r4, r5, pc}

080077b8 <_free_r>:
 80077b8:	b538      	push	{r3, r4, r5, lr}
 80077ba:	4605      	mov	r5, r0
 80077bc:	2900      	cmp	r1, #0
 80077be:	d043      	beq.n	8007848 <_free_r+0x90>
 80077c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077c4:	1f0c      	subs	r4, r1, #4
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	bfb8      	it	lt
 80077ca:	18e4      	addlt	r4, r4, r3
 80077cc:	f000 fa62 	bl	8007c94 <__malloc_lock>
 80077d0:	4a1e      	ldr	r2, [pc, #120]	; (800784c <_free_r+0x94>)
 80077d2:	6813      	ldr	r3, [r2, #0]
 80077d4:	4610      	mov	r0, r2
 80077d6:	b933      	cbnz	r3, 80077e6 <_free_r+0x2e>
 80077d8:	6063      	str	r3, [r4, #4]
 80077da:	6014      	str	r4, [r2, #0]
 80077dc:	4628      	mov	r0, r5
 80077de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077e2:	f000 ba5d 	b.w	8007ca0 <__malloc_unlock>
 80077e6:	42a3      	cmp	r3, r4
 80077e8:	d90a      	bls.n	8007800 <_free_r+0x48>
 80077ea:	6821      	ldr	r1, [r4, #0]
 80077ec:	1862      	adds	r2, r4, r1
 80077ee:	4293      	cmp	r3, r2
 80077f0:	bf01      	itttt	eq
 80077f2:	681a      	ldreq	r2, [r3, #0]
 80077f4:	685b      	ldreq	r3, [r3, #4]
 80077f6:	1852      	addeq	r2, r2, r1
 80077f8:	6022      	streq	r2, [r4, #0]
 80077fa:	6063      	str	r3, [r4, #4]
 80077fc:	6004      	str	r4, [r0, #0]
 80077fe:	e7ed      	b.n	80077dc <_free_r+0x24>
 8007800:	461a      	mov	r2, r3
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	b10b      	cbz	r3, 800780a <_free_r+0x52>
 8007806:	42a3      	cmp	r3, r4
 8007808:	d9fa      	bls.n	8007800 <_free_r+0x48>
 800780a:	6811      	ldr	r1, [r2, #0]
 800780c:	1850      	adds	r0, r2, r1
 800780e:	42a0      	cmp	r0, r4
 8007810:	d10b      	bne.n	800782a <_free_r+0x72>
 8007812:	6820      	ldr	r0, [r4, #0]
 8007814:	4401      	add	r1, r0
 8007816:	1850      	adds	r0, r2, r1
 8007818:	4283      	cmp	r3, r0
 800781a:	6011      	str	r1, [r2, #0]
 800781c:	d1de      	bne.n	80077dc <_free_r+0x24>
 800781e:	6818      	ldr	r0, [r3, #0]
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	4401      	add	r1, r0
 8007824:	6011      	str	r1, [r2, #0]
 8007826:	6053      	str	r3, [r2, #4]
 8007828:	e7d8      	b.n	80077dc <_free_r+0x24>
 800782a:	d902      	bls.n	8007832 <_free_r+0x7a>
 800782c:	230c      	movs	r3, #12
 800782e:	602b      	str	r3, [r5, #0]
 8007830:	e7d4      	b.n	80077dc <_free_r+0x24>
 8007832:	6820      	ldr	r0, [r4, #0]
 8007834:	1821      	adds	r1, r4, r0
 8007836:	428b      	cmp	r3, r1
 8007838:	bf01      	itttt	eq
 800783a:	6819      	ldreq	r1, [r3, #0]
 800783c:	685b      	ldreq	r3, [r3, #4]
 800783e:	1809      	addeq	r1, r1, r0
 8007840:	6021      	streq	r1, [r4, #0]
 8007842:	6063      	str	r3, [r4, #4]
 8007844:	6054      	str	r4, [r2, #4]
 8007846:	e7c9      	b.n	80077dc <_free_r+0x24>
 8007848:	bd38      	pop	{r3, r4, r5, pc}
 800784a:	bf00      	nop
 800784c:	200006e8 	.word	0x200006e8

08007850 <_malloc_r>:
 8007850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007852:	1ccd      	adds	r5, r1, #3
 8007854:	f025 0503 	bic.w	r5, r5, #3
 8007858:	3508      	adds	r5, #8
 800785a:	2d0c      	cmp	r5, #12
 800785c:	bf38      	it	cc
 800785e:	250c      	movcc	r5, #12
 8007860:	2d00      	cmp	r5, #0
 8007862:	4606      	mov	r6, r0
 8007864:	db01      	blt.n	800786a <_malloc_r+0x1a>
 8007866:	42a9      	cmp	r1, r5
 8007868:	d903      	bls.n	8007872 <_malloc_r+0x22>
 800786a:	230c      	movs	r3, #12
 800786c:	6033      	str	r3, [r6, #0]
 800786e:	2000      	movs	r0, #0
 8007870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007872:	f000 fa0f 	bl	8007c94 <__malloc_lock>
 8007876:	4921      	ldr	r1, [pc, #132]	; (80078fc <_malloc_r+0xac>)
 8007878:	680a      	ldr	r2, [r1, #0]
 800787a:	4614      	mov	r4, r2
 800787c:	b99c      	cbnz	r4, 80078a6 <_malloc_r+0x56>
 800787e:	4f20      	ldr	r7, [pc, #128]	; (8007900 <_malloc_r+0xb0>)
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	b923      	cbnz	r3, 800788e <_malloc_r+0x3e>
 8007884:	4621      	mov	r1, r4
 8007886:	4630      	mov	r0, r6
 8007888:	f000 f998 	bl	8007bbc <_sbrk_r>
 800788c:	6038      	str	r0, [r7, #0]
 800788e:	4629      	mov	r1, r5
 8007890:	4630      	mov	r0, r6
 8007892:	f000 f993 	bl	8007bbc <_sbrk_r>
 8007896:	1c43      	adds	r3, r0, #1
 8007898:	d123      	bne.n	80078e2 <_malloc_r+0x92>
 800789a:	230c      	movs	r3, #12
 800789c:	4630      	mov	r0, r6
 800789e:	6033      	str	r3, [r6, #0]
 80078a0:	f000 f9fe 	bl	8007ca0 <__malloc_unlock>
 80078a4:	e7e3      	b.n	800786e <_malloc_r+0x1e>
 80078a6:	6823      	ldr	r3, [r4, #0]
 80078a8:	1b5b      	subs	r3, r3, r5
 80078aa:	d417      	bmi.n	80078dc <_malloc_r+0x8c>
 80078ac:	2b0b      	cmp	r3, #11
 80078ae:	d903      	bls.n	80078b8 <_malloc_r+0x68>
 80078b0:	6023      	str	r3, [r4, #0]
 80078b2:	441c      	add	r4, r3
 80078b4:	6025      	str	r5, [r4, #0]
 80078b6:	e004      	b.n	80078c2 <_malloc_r+0x72>
 80078b8:	6863      	ldr	r3, [r4, #4]
 80078ba:	42a2      	cmp	r2, r4
 80078bc:	bf0c      	ite	eq
 80078be:	600b      	streq	r3, [r1, #0]
 80078c0:	6053      	strne	r3, [r2, #4]
 80078c2:	4630      	mov	r0, r6
 80078c4:	f000 f9ec 	bl	8007ca0 <__malloc_unlock>
 80078c8:	f104 000b 	add.w	r0, r4, #11
 80078cc:	1d23      	adds	r3, r4, #4
 80078ce:	f020 0007 	bic.w	r0, r0, #7
 80078d2:	1ac2      	subs	r2, r0, r3
 80078d4:	d0cc      	beq.n	8007870 <_malloc_r+0x20>
 80078d6:	1a1b      	subs	r3, r3, r0
 80078d8:	50a3      	str	r3, [r4, r2]
 80078da:	e7c9      	b.n	8007870 <_malloc_r+0x20>
 80078dc:	4622      	mov	r2, r4
 80078de:	6864      	ldr	r4, [r4, #4]
 80078e0:	e7cc      	b.n	800787c <_malloc_r+0x2c>
 80078e2:	1cc4      	adds	r4, r0, #3
 80078e4:	f024 0403 	bic.w	r4, r4, #3
 80078e8:	42a0      	cmp	r0, r4
 80078ea:	d0e3      	beq.n	80078b4 <_malloc_r+0x64>
 80078ec:	1a21      	subs	r1, r4, r0
 80078ee:	4630      	mov	r0, r6
 80078f0:	f000 f964 	bl	8007bbc <_sbrk_r>
 80078f4:	3001      	adds	r0, #1
 80078f6:	d1dd      	bne.n	80078b4 <_malloc_r+0x64>
 80078f8:	e7cf      	b.n	800789a <_malloc_r+0x4a>
 80078fa:	bf00      	nop
 80078fc:	200006e8 	.word	0x200006e8
 8007900:	200006ec 	.word	0x200006ec

08007904 <__ssputs_r>:
 8007904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007908:	688e      	ldr	r6, [r1, #8]
 800790a:	4682      	mov	sl, r0
 800790c:	429e      	cmp	r6, r3
 800790e:	460c      	mov	r4, r1
 8007910:	4690      	mov	r8, r2
 8007912:	461f      	mov	r7, r3
 8007914:	d838      	bhi.n	8007988 <__ssputs_r+0x84>
 8007916:	898a      	ldrh	r2, [r1, #12]
 8007918:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800791c:	d032      	beq.n	8007984 <__ssputs_r+0x80>
 800791e:	6825      	ldr	r5, [r4, #0]
 8007920:	6909      	ldr	r1, [r1, #16]
 8007922:	3301      	adds	r3, #1
 8007924:	eba5 0901 	sub.w	r9, r5, r1
 8007928:	6965      	ldr	r5, [r4, #20]
 800792a:	444b      	add	r3, r9
 800792c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007930:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007934:	106d      	asrs	r5, r5, #1
 8007936:	429d      	cmp	r5, r3
 8007938:	bf38      	it	cc
 800793a:	461d      	movcc	r5, r3
 800793c:	0553      	lsls	r3, r2, #21
 800793e:	d531      	bpl.n	80079a4 <__ssputs_r+0xa0>
 8007940:	4629      	mov	r1, r5
 8007942:	f7ff ff85 	bl	8007850 <_malloc_r>
 8007946:	4606      	mov	r6, r0
 8007948:	b950      	cbnz	r0, 8007960 <__ssputs_r+0x5c>
 800794a:	230c      	movs	r3, #12
 800794c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007950:	f8ca 3000 	str.w	r3, [sl]
 8007954:	89a3      	ldrh	r3, [r4, #12]
 8007956:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800795a:	81a3      	strh	r3, [r4, #12]
 800795c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007960:	464a      	mov	r2, r9
 8007962:	6921      	ldr	r1, [r4, #16]
 8007964:	f7fe f86a 	bl	8005a3c <memcpy>
 8007968:	89a3      	ldrh	r3, [r4, #12]
 800796a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800796e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007972:	81a3      	strh	r3, [r4, #12]
 8007974:	6126      	str	r6, [r4, #16]
 8007976:	444e      	add	r6, r9
 8007978:	6026      	str	r6, [r4, #0]
 800797a:	463e      	mov	r6, r7
 800797c:	6165      	str	r5, [r4, #20]
 800797e:	eba5 0509 	sub.w	r5, r5, r9
 8007982:	60a5      	str	r5, [r4, #8]
 8007984:	42be      	cmp	r6, r7
 8007986:	d900      	bls.n	800798a <__ssputs_r+0x86>
 8007988:	463e      	mov	r6, r7
 800798a:	4632      	mov	r2, r6
 800798c:	4641      	mov	r1, r8
 800798e:	6820      	ldr	r0, [r4, #0]
 8007990:	f000 f966 	bl	8007c60 <memmove>
 8007994:	68a3      	ldr	r3, [r4, #8]
 8007996:	6822      	ldr	r2, [r4, #0]
 8007998:	1b9b      	subs	r3, r3, r6
 800799a:	4432      	add	r2, r6
 800799c:	2000      	movs	r0, #0
 800799e:	60a3      	str	r3, [r4, #8]
 80079a0:	6022      	str	r2, [r4, #0]
 80079a2:	e7db      	b.n	800795c <__ssputs_r+0x58>
 80079a4:	462a      	mov	r2, r5
 80079a6:	f000 f981 	bl	8007cac <_realloc_r>
 80079aa:	4606      	mov	r6, r0
 80079ac:	2800      	cmp	r0, #0
 80079ae:	d1e1      	bne.n	8007974 <__ssputs_r+0x70>
 80079b0:	4650      	mov	r0, sl
 80079b2:	6921      	ldr	r1, [r4, #16]
 80079b4:	f7ff ff00 	bl	80077b8 <_free_r>
 80079b8:	e7c7      	b.n	800794a <__ssputs_r+0x46>
	...

080079bc <_svfiprintf_r>:
 80079bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079c0:	4698      	mov	r8, r3
 80079c2:	898b      	ldrh	r3, [r1, #12]
 80079c4:	4607      	mov	r7, r0
 80079c6:	061b      	lsls	r3, r3, #24
 80079c8:	460d      	mov	r5, r1
 80079ca:	4614      	mov	r4, r2
 80079cc:	b09d      	sub	sp, #116	; 0x74
 80079ce:	d50e      	bpl.n	80079ee <_svfiprintf_r+0x32>
 80079d0:	690b      	ldr	r3, [r1, #16]
 80079d2:	b963      	cbnz	r3, 80079ee <_svfiprintf_r+0x32>
 80079d4:	2140      	movs	r1, #64	; 0x40
 80079d6:	f7ff ff3b 	bl	8007850 <_malloc_r>
 80079da:	6028      	str	r0, [r5, #0]
 80079dc:	6128      	str	r0, [r5, #16]
 80079de:	b920      	cbnz	r0, 80079ea <_svfiprintf_r+0x2e>
 80079e0:	230c      	movs	r3, #12
 80079e2:	603b      	str	r3, [r7, #0]
 80079e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079e8:	e0d1      	b.n	8007b8e <_svfiprintf_r+0x1d2>
 80079ea:	2340      	movs	r3, #64	; 0x40
 80079ec:	616b      	str	r3, [r5, #20]
 80079ee:	2300      	movs	r3, #0
 80079f0:	9309      	str	r3, [sp, #36]	; 0x24
 80079f2:	2320      	movs	r3, #32
 80079f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80079f8:	2330      	movs	r3, #48	; 0x30
 80079fa:	f04f 0901 	mov.w	r9, #1
 80079fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a02:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007ba8 <_svfiprintf_r+0x1ec>
 8007a06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a0a:	4623      	mov	r3, r4
 8007a0c:	469a      	mov	sl, r3
 8007a0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a12:	b10a      	cbz	r2, 8007a18 <_svfiprintf_r+0x5c>
 8007a14:	2a25      	cmp	r2, #37	; 0x25
 8007a16:	d1f9      	bne.n	8007a0c <_svfiprintf_r+0x50>
 8007a18:	ebba 0b04 	subs.w	fp, sl, r4
 8007a1c:	d00b      	beq.n	8007a36 <_svfiprintf_r+0x7a>
 8007a1e:	465b      	mov	r3, fp
 8007a20:	4622      	mov	r2, r4
 8007a22:	4629      	mov	r1, r5
 8007a24:	4638      	mov	r0, r7
 8007a26:	f7ff ff6d 	bl	8007904 <__ssputs_r>
 8007a2a:	3001      	adds	r0, #1
 8007a2c:	f000 80aa 	beq.w	8007b84 <_svfiprintf_r+0x1c8>
 8007a30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a32:	445a      	add	r2, fp
 8007a34:	9209      	str	r2, [sp, #36]	; 0x24
 8007a36:	f89a 3000 	ldrb.w	r3, [sl]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	f000 80a2 	beq.w	8007b84 <_svfiprintf_r+0x1c8>
 8007a40:	2300      	movs	r3, #0
 8007a42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a4a:	f10a 0a01 	add.w	sl, sl, #1
 8007a4e:	9304      	str	r3, [sp, #16]
 8007a50:	9307      	str	r3, [sp, #28]
 8007a52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a56:	931a      	str	r3, [sp, #104]	; 0x68
 8007a58:	4654      	mov	r4, sl
 8007a5a:	2205      	movs	r2, #5
 8007a5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a60:	4851      	ldr	r0, [pc, #324]	; (8007ba8 <_svfiprintf_r+0x1ec>)
 8007a62:	f7ff fb0b 	bl	800707c <memchr>
 8007a66:	9a04      	ldr	r2, [sp, #16]
 8007a68:	b9d8      	cbnz	r0, 8007aa2 <_svfiprintf_r+0xe6>
 8007a6a:	06d0      	lsls	r0, r2, #27
 8007a6c:	bf44      	itt	mi
 8007a6e:	2320      	movmi	r3, #32
 8007a70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a74:	0711      	lsls	r1, r2, #28
 8007a76:	bf44      	itt	mi
 8007a78:	232b      	movmi	r3, #43	; 0x2b
 8007a7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a7e:	f89a 3000 	ldrb.w	r3, [sl]
 8007a82:	2b2a      	cmp	r3, #42	; 0x2a
 8007a84:	d015      	beq.n	8007ab2 <_svfiprintf_r+0xf6>
 8007a86:	4654      	mov	r4, sl
 8007a88:	2000      	movs	r0, #0
 8007a8a:	f04f 0c0a 	mov.w	ip, #10
 8007a8e:	9a07      	ldr	r2, [sp, #28]
 8007a90:	4621      	mov	r1, r4
 8007a92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a96:	3b30      	subs	r3, #48	; 0x30
 8007a98:	2b09      	cmp	r3, #9
 8007a9a:	d94e      	bls.n	8007b3a <_svfiprintf_r+0x17e>
 8007a9c:	b1b0      	cbz	r0, 8007acc <_svfiprintf_r+0x110>
 8007a9e:	9207      	str	r2, [sp, #28]
 8007aa0:	e014      	b.n	8007acc <_svfiprintf_r+0x110>
 8007aa2:	eba0 0308 	sub.w	r3, r0, r8
 8007aa6:	fa09 f303 	lsl.w	r3, r9, r3
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	46a2      	mov	sl, r4
 8007aae:	9304      	str	r3, [sp, #16]
 8007ab0:	e7d2      	b.n	8007a58 <_svfiprintf_r+0x9c>
 8007ab2:	9b03      	ldr	r3, [sp, #12]
 8007ab4:	1d19      	adds	r1, r3, #4
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	9103      	str	r1, [sp, #12]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	bfbb      	ittet	lt
 8007abe:	425b      	neglt	r3, r3
 8007ac0:	f042 0202 	orrlt.w	r2, r2, #2
 8007ac4:	9307      	strge	r3, [sp, #28]
 8007ac6:	9307      	strlt	r3, [sp, #28]
 8007ac8:	bfb8      	it	lt
 8007aca:	9204      	strlt	r2, [sp, #16]
 8007acc:	7823      	ldrb	r3, [r4, #0]
 8007ace:	2b2e      	cmp	r3, #46	; 0x2e
 8007ad0:	d10c      	bne.n	8007aec <_svfiprintf_r+0x130>
 8007ad2:	7863      	ldrb	r3, [r4, #1]
 8007ad4:	2b2a      	cmp	r3, #42	; 0x2a
 8007ad6:	d135      	bne.n	8007b44 <_svfiprintf_r+0x188>
 8007ad8:	9b03      	ldr	r3, [sp, #12]
 8007ada:	3402      	adds	r4, #2
 8007adc:	1d1a      	adds	r2, r3, #4
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	9203      	str	r2, [sp, #12]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	bfb8      	it	lt
 8007ae6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007aea:	9305      	str	r3, [sp, #20]
 8007aec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007bb8 <_svfiprintf_r+0x1fc>
 8007af0:	2203      	movs	r2, #3
 8007af2:	4650      	mov	r0, sl
 8007af4:	7821      	ldrb	r1, [r4, #0]
 8007af6:	f7ff fac1 	bl	800707c <memchr>
 8007afa:	b140      	cbz	r0, 8007b0e <_svfiprintf_r+0x152>
 8007afc:	2340      	movs	r3, #64	; 0x40
 8007afe:	eba0 000a 	sub.w	r0, r0, sl
 8007b02:	fa03 f000 	lsl.w	r0, r3, r0
 8007b06:	9b04      	ldr	r3, [sp, #16]
 8007b08:	3401      	adds	r4, #1
 8007b0a:	4303      	orrs	r3, r0
 8007b0c:	9304      	str	r3, [sp, #16]
 8007b0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b12:	2206      	movs	r2, #6
 8007b14:	4825      	ldr	r0, [pc, #148]	; (8007bac <_svfiprintf_r+0x1f0>)
 8007b16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b1a:	f7ff faaf 	bl	800707c <memchr>
 8007b1e:	2800      	cmp	r0, #0
 8007b20:	d038      	beq.n	8007b94 <_svfiprintf_r+0x1d8>
 8007b22:	4b23      	ldr	r3, [pc, #140]	; (8007bb0 <_svfiprintf_r+0x1f4>)
 8007b24:	bb1b      	cbnz	r3, 8007b6e <_svfiprintf_r+0x1b2>
 8007b26:	9b03      	ldr	r3, [sp, #12]
 8007b28:	3307      	adds	r3, #7
 8007b2a:	f023 0307 	bic.w	r3, r3, #7
 8007b2e:	3308      	adds	r3, #8
 8007b30:	9303      	str	r3, [sp, #12]
 8007b32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b34:	4433      	add	r3, r6
 8007b36:	9309      	str	r3, [sp, #36]	; 0x24
 8007b38:	e767      	b.n	8007a0a <_svfiprintf_r+0x4e>
 8007b3a:	460c      	mov	r4, r1
 8007b3c:	2001      	movs	r0, #1
 8007b3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b42:	e7a5      	b.n	8007a90 <_svfiprintf_r+0xd4>
 8007b44:	2300      	movs	r3, #0
 8007b46:	f04f 0c0a 	mov.w	ip, #10
 8007b4a:	4619      	mov	r1, r3
 8007b4c:	3401      	adds	r4, #1
 8007b4e:	9305      	str	r3, [sp, #20]
 8007b50:	4620      	mov	r0, r4
 8007b52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b56:	3a30      	subs	r2, #48	; 0x30
 8007b58:	2a09      	cmp	r2, #9
 8007b5a:	d903      	bls.n	8007b64 <_svfiprintf_r+0x1a8>
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d0c5      	beq.n	8007aec <_svfiprintf_r+0x130>
 8007b60:	9105      	str	r1, [sp, #20]
 8007b62:	e7c3      	b.n	8007aec <_svfiprintf_r+0x130>
 8007b64:	4604      	mov	r4, r0
 8007b66:	2301      	movs	r3, #1
 8007b68:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b6c:	e7f0      	b.n	8007b50 <_svfiprintf_r+0x194>
 8007b6e:	ab03      	add	r3, sp, #12
 8007b70:	9300      	str	r3, [sp, #0]
 8007b72:	462a      	mov	r2, r5
 8007b74:	4638      	mov	r0, r7
 8007b76:	4b0f      	ldr	r3, [pc, #60]	; (8007bb4 <_svfiprintf_r+0x1f8>)
 8007b78:	a904      	add	r1, sp, #16
 8007b7a:	f7fe f813 	bl	8005ba4 <_printf_float>
 8007b7e:	1c42      	adds	r2, r0, #1
 8007b80:	4606      	mov	r6, r0
 8007b82:	d1d6      	bne.n	8007b32 <_svfiprintf_r+0x176>
 8007b84:	89ab      	ldrh	r3, [r5, #12]
 8007b86:	065b      	lsls	r3, r3, #25
 8007b88:	f53f af2c 	bmi.w	80079e4 <_svfiprintf_r+0x28>
 8007b8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b8e:	b01d      	add	sp, #116	; 0x74
 8007b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b94:	ab03      	add	r3, sp, #12
 8007b96:	9300      	str	r3, [sp, #0]
 8007b98:	462a      	mov	r2, r5
 8007b9a:	4638      	mov	r0, r7
 8007b9c:	4b05      	ldr	r3, [pc, #20]	; (8007bb4 <_svfiprintf_r+0x1f8>)
 8007b9e:	a904      	add	r1, sp, #16
 8007ba0:	f7fe fa9c 	bl	80060dc <_printf_i>
 8007ba4:	e7eb      	b.n	8007b7e <_svfiprintf_r+0x1c2>
 8007ba6:	bf00      	nop
 8007ba8:	0800bc0c 	.word	0x0800bc0c
 8007bac:	0800bc16 	.word	0x0800bc16
 8007bb0:	08005ba5 	.word	0x08005ba5
 8007bb4:	08007905 	.word	0x08007905
 8007bb8:	0800bc12 	.word	0x0800bc12

08007bbc <_sbrk_r>:
 8007bbc:	b538      	push	{r3, r4, r5, lr}
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	4d05      	ldr	r5, [pc, #20]	; (8007bd8 <_sbrk_r+0x1c>)
 8007bc2:	4604      	mov	r4, r0
 8007bc4:	4608      	mov	r0, r1
 8007bc6:	602b      	str	r3, [r5, #0]
 8007bc8:	f7fa f838 	bl	8001c3c <_sbrk>
 8007bcc:	1c43      	adds	r3, r0, #1
 8007bce:	d102      	bne.n	8007bd6 <_sbrk_r+0x1a>
 8007bd0:	682b      	ldr	r3, [r5, #0]
 8007bd2:	b103      	cbz	r3, 8007bd6 <_sbrk_r+0x1a>
 8007bd4:	6023      	str	r3, [r4, #0]
 8007bd6:	bd38      	pop	{r3, r4, r5, pc}
 8007bd8:	20000c04 	.word	0x20000c04

08007bdc <__assert_func>:
 8007bdc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007bde:	4614      	mov	r4, r2
 8007be0:	461a      	mov	r2, r3
 8007be2:	4b09      	ldr	r3, [pc, #36]	; (8007c08 <__assert_func+0x2c>)
 8007be4:	4605      	mov	r5, r0
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	68d8      	ldr	r0, [r3, #12]
 8007bea:	b14c      	cbz	r4, 8007c00 <__assert_func+0x24>
 8007bec:	4b07      	ldr	r3, [pc, #28]	; (8007c0c <__assert_func+0x30>)
 8007bee:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007bf2:	9100      	str	r1, [sp, #0]
 8007bf4:	462b      	mov	r3, r5
 8007bf6:	4906      	ldr	r1, [pc, #24]	; (8007c10 <__assert_func+0x34>)
 8007bf8:	f000 f80e 	bl	8007c18 <fiprintf>
 8007bfc:	f000 faa2 	bl	8008144 <abort>
 8007c00:	4b04      	ldr	r3, [pc, #16]	; (8007c14 <__assert_func+0x38>)
 8007c02:	461c      	mov	r4, r3
 8007c04:	e7f3      	b.n	8007bee <__assert_func+0x12>
 8007c06:	bf00      	nop
 8007c08:	200000a0 	.word	0x200000a0
 8007c0c:	0800bc1d 	.word	0x0800bc1d
 8007c10:	0800bc2a 	.word	0x0800bc2a
 8007c14:	0800bc58 	.word	0x0800bc58

08007c18 <fiprintf>:
 8007c18:	b40e      	push	{r1, r2, r3}
 8007c1a:	b503      	push	{r0, r1, lr}
 8007c1c:	4601      	mov	r1, r0
 8007c1e:	ab03      	add	r3, sp, #12
 8007c20:	4805      	ldr	r0, [pc, #20]	; (8007c38 <fiprintf+0x20>)
 8007c22:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c26:	6800      	ldr	r0, [r0, #0]
 8007c28:	9301      	str	r3, [sp, #4]
 8007c2a:	f000 f88d 	bl	8007d48 <_vfiprintf_r>
 8007c2e:	b002      	add	sp, #8
 8007c30:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c34:	b003      	add	sp, #12
 8007c36:	4770      	bx	lr
 8007c38:	200000a0 	.word	0x200000a0

08007c3c <__ascii_mbtowc>:
 8007c3c:	b082      	sub	sp, #8
 8007c3e:	b901      	cbnz	r1, 8007c42 <__ascii_mbtowc+0x6>
 8007c40:	a901      	add	r1, sp, #4
 8007c42:	b142      	cbz	r2, 8007c56 <__ascii_mbtowc+0x1a>
 8007c44:	b14b      	cbz	r3, 8007c5a <__ascii_mbtowc+0x1e>
 8007c46:	7813      	ldrb	r3, [r2, #0]
 8007c48:	600b      	str	r3, [r1, #0]
 8007c4a:	7812      	ldrb	r2, [r2, #0]
 8007c4c:	1e10      	subs	r0, r2, #0
 8007c4e:	bf18      	it	ne
 8007c50:	2001      	movne	r0, #1
 8007c52:	b002      	add	sp, #8
 8007c54:	4770      	bx	lr
 8007c56:	4610      	mov	r0, r2
 8007c58:	e7fb      	b.n	8007c52 <__ascii_mbtowc+0x16>
 8007c5a:	f06f 0001 	mvn.w	r0, #1
 8007c5e:	e7f8      	b.n	8007c52 <__ascii_mbtowc+0x16>

08007c60 <memmove>:
 8007c60:	4288      	cmp	r0, r1
 8007c62:	b510      	push	{r4, lr}
 8007c64:	eb01 0402 	add.w	r4, r1, r2
 8007c68:	d902      	bls.n	8007c70 <memmove+0x10>
 8007c6a:	4284      	cmp	r4, r0
 8007c6c:	4623      	mov	r3, r4
 8007c6e:	d807      	bhi.n	8007c80 <memmove+0x20>
 8007c70:	1e43      	subs	r3, r0, #1
 8007c72:	42a1      	cmp	r1, r4
 8007c74:	d008      	beq.n	8007c88 <memmove+0x28>
 8007c76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c7e:	e7f8      	b.n	8007c72 <memmove+0x12>
 8007c80:	4601      	mov	r1, r0
 8007c82:	4402      	add	r2, r0
 8007c84:	428a      	cmp	r2, r1
 8007c86:	d100      	bne.n	8007c8a <memmove+0x2a>
 8007c88:	bd10      	pop	{r4, pc}
 8007c8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007c92:	e7f7      	b.n	8007c84 <memmove+0x24>

08007c94 <__malloc_lock>:
 8007c94:	4801      	ldr	r0, [pc, #4]	; (8007c9c <__malloc_lock+0x8>)
 8007c96:	f000 bc15 	b.w	80084c4 <__retarget_lock_acquire_recursive>
 8007c9a:	bf00      	nop
 8007c9c:	20000c0c 	.word	0x20000c0c

08007ca0 <__malloc_unlock>:
 8007ca0:	4801      	ldr	r0, [pc, #4]	; (8007ca8 <__malloc_unlock+0x8>)
 8007ca2:	f000 bc10 	b.w	80084c6 <__retarget_lock_release_recursive>
 8007ca6:	bf00      	nop
 8007ca8:	20000c0c 	.word	0x20000c0c

08007cac <_realloc_r>:
 8007cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cae:	4607      	mov	r7, r0
 8007cb0:	4614      	mov	r4, r2
 8007cb2:	460e      	mov	r6, r1
 8007cb4:	b921      	cbnz	r1, 8007cc0 <_realloc_r+0x14>
 8007cb6:	4611      	mov	r1, r2
 8007cb8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007cbc:	f7ff bdc8 	b.w	8007850 <_malloc_r>
 8007cc0:	b922      	cbnz	r2, 8007ccc <_realloc_r+0x20>
 8007cc2:	f7ff fd79 	bl	80077b8 <_free_r>
 8007cc6:	4625      	mov	r5, r4
 8007cc8:	4628      	mov	r0, r5
 8007cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ccc:	f000 fc60 	bl	8008590 <_malloc_usable_size_r>
 8007cd0:	42a0      	cmp	r0, r4
 8007cd2:	d20f      	bcs.n	8007cf4 <_realloc_r+0x48>
 8007cd4:	4621      	mov	r1, r4
 8007cd6:	4638      	mov	r0, r7
 8007cd8:	f7ff fdba 	bl	8007850 <_malloc_r>
 8007cdc:	4605      	mov	r5, r0
 8007cde:	2800      	cmp	r0, #0
 8007ce0:	d0f2      	beq.n	8007cc8 <_realloc_r+0x1c>
 8007ce2:	4631      	mov	r1, r6
 8007ce4:	4622      	mov	r2, r4
 8007ce6:	f7fd fea9 	bl	8005a3c <memcpy>
 8007cea:	4631      	mov	r1, r6
 8007cec:	4638      	mov	r0, r7
 8007cee:	f7ff fd63 	bl	80077b8 <_free_r>
 8007cf2:	e7e9      	b.n	8007cc8 <_realloc_r+0x1c>
 8007cf4:	4635      	mov	r5, r6
 8007cf6:	e7e7      	b.n	8007cc8 <_realloc_r+0x1c>

08007cf8 <__sfputc_r>:
 8007cf8:	6893      	ldr	r3, [r2, #8]
 8007cfa:	b410      	push	{r4}
 8007cfc:	3b01      	subs	r3, #1
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	6093      	str	r3, [r2, #8]
 8007d02:	da07      	bge.n	8007d14 <__sfputc_r+0x1c>
 8007d04:	6994      	ldr	r4, [r2, #24]
 8007d06:	42a3      	cmp	r3, r4
 8007d08:	db01      	blt.n	8007d0e <__sfputc_r+0x16>
 8007d0a:	290a      	cmp	r1, #10
 8007d0c:	d102      	bne.n	8007d14 <__sfputc_r+0x1c>
 8007d0e:	bc10      	pop	{r4}
 8007d10:	f000 b94a 	b.w	8007fa8 <__swbuf_r>
 8007d14:	6813      	ldr	r3, [r2, #0]
 8007d16:	1c58      	adds	r0, r3, #1
 8007d18:	6010      	str	r0, [r2, #0]
 8007d1a:	7019      	strb	r1, [r3, #0]
 8007d1c:	4608      	mov	r0, r1
 8007d1e:	bc10      	pop	{r4}
 8007d20:	4770      	bx	lr

08007d22 <__sfputs_r>:
 8007d22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d24:	4606      	mov	r6, r0
 8007d26:	460f      	mov	r7, r1
 8007d28:	4614      	mov	r4, r2
 8007d2a:	18d5      	adds	r5, r2, r3
 8007d2c:	42ac      	cmp	r4, r5
 8007d2e:	d101      	bne.n	8007d34 <__sfputs_r+0x12>
 8007d30:	2000      	movs	r0, #0
 8007d32:	e007      	b.n	8007d44 <__sfputs_r+0x22>
 8007d34:	463a      	mov	r2, r7
 8007d36:	4630      	mov	r0, r6
 8007d38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d3c:	f7ff ffdc 	bl	8007cf8 <__sfputc_r>
 8007d40:	1c43      	adds	r3, r0, #1
 8007d42:	d1f3      	bne.n	8007d2c <__sfputs_r+0xa>
 8007d44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007d48 <_vfiprintf_r>:
 8007d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d4c:	460d      	mov	r5, r1
 8007d4e:	4614      	mov	r4, r2
 8007d50:	4698      	mov	r8, r3
 8007d52:	4606      	mov	r6, r0
 8007d54:	b09d      	sub	sp, #116	; 0x74
 8007d56:	b118      	cbz	r0, 8007d60 <_vfiprintf_r+0x18>
 8007d58:	6983      	ldr	r3, [r0, #24]
 8007d5a:	b90b      	cbnz	r3, 8007d60 <_vfiprintf_r+0x18>
 8007d5c:	f000 fb14 	bl	8008388 <__sinit>
 8007d60:	4b89      	ldr	r3, [pc, #548]	; (8007f88 <_vfiprintf_r+0x240>)
 8007d62:	429d      	cmp	r5, r3
 8007d64:	d11b      	bne.n	8007d9e <_vfiprintf_r+0x56>
 8007d66:	6875      	ldr	r5, [r6, #4]
 8007d68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d6a:	07d9      	lsls	r1, r3, #31
 8007d6c:	d405      	bmi.n	8007d7a <_vfiprintf_r+0x32>
 8007d6e:	89ab      	ldrh	r3, [r5, #12]
 8007d70:	059a      	lsls	r2, r3, #22
 8007d72:	d402      	bmi.n	8007d7a <_vfiprintf_r+0x32>
 8007d74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d76:	f000 fba5 	bl	80084c4 <__retarget_lock_acquire_recursive>
 8007d7a:	89ab      	ldrh	r3, [r5, #12]
 8007d7c:	071b      	lsls	r3, r3, #28
 8007d7e:	d501      	bpl.n	8007d84 <_vfiprintf_r+0x3c>
 8007d80:	692b      	ldr	r3, [r5, #16]
 8007d82:	b9eb      	cbnz	r3, 8007dc0 <_vfiprintf_r+0x78>
 8007d84:	4629      	mov	r1, r5
 8007d86:	4630      	mov	r0, r6
 8007d88:	f000 f96e 	bl	8008068 <__swsetup_r>
 8007d8c:	b1c0      	cbz	r0, 8007dc0 <_vfiprintf_r+0x78>
 8007d8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d90:	07dc      	lsls	r4, r3, #31
 8007d92:	d50e      	bpl.n	8007db2 <_vfiprintf_r+0x6a>
 8007d94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d98:	b01d      	add	sp, #116	; 0x74
 8007d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d9e:	4b7b      	ldr	r3, [pc, #492]	; (8007f8c <_vfiprintf_r+0x244>)
 8007da0:	429d      	cmp	r5, r3
 8007da2:	d101      	bne.n	8007da8 <_vfiprintf_r+0x60>
 8007da4:	68b5      	ldr	r5, [r6, #8]
 8007da6:	e7df      	b.n	8007d68 <_vfiprintf_r+0x20>
 8007da8:	4b79      	ldr	r3, [pc, #484]	; (8007f90 <_vfiprintf_r+0x248>)
 8007daa:	429d      	cmp	r5, r3
 8007dac:	bf08      	it	eq
 8007dae:	68f5      	ldreq	r5, [r6, #12]
 8007db0:	e7da      	b.n	8007d68 <_vfiprintf_r+0x20>
 8007db2:	89ab      	ldrh	r3, [r5, #12]
 8007db4:	0598      	lsls	r0, r3, #22
 8007db6:	d4ed      	bmi.n	8007d94 <_vfiprintf_r+0x4c>
 8007db8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007dba:	f000 fb84 	bl	80084c6 <__retarget_lock_release_recursive>
 8007dbe:	e7e9      	b.n	8007d94 <_vfiprintf_r+0x4c>
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	9309      	str	r3, [sp, #36]	; 0x24
 8007dc4:	2320      	movs	r3, #32
 8007dc6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007dca:	2330      	movs	r3, #48	; 0x30
 8007dcc:	f04f 0901 	mov.w	r9, #1
 8007dd0:	f8cd 800c 	str.w	r8, [sp, #12]
 8007dd4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007f94 <_vfiprintf_r+0x24c>
 8007dd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ddc:	4623      	mov	r3, r4
 8007dde:	469a      	mov	sl, r3
 8007de0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007de4:	b10a      	cbz	r2, 8007dea <_vfiprintf_r+0xa2>
 8007de6:	2a25      	cmp	r2, #37	; 0x25
 8007de8:	d1f9      	bne.n	8007dde <_vfiprintf_r+0x96>
 8007dea:	ebba 0b04 	subs.w	fp, sl, r4
 8007dee:	d00b      	beq.n	8007e08 <_vfiprintf_r+0xc0>
 8007df0:	465b      	mov	r3, fp
 8007df2:	4622      	mov	r2, r4
 8007df4:	4629      	mov	r1, r5
 8007df6:	4630      	mov	r0, r6
 8007df8:	f7ff ff93 	bl	8007d22 <__sfputs_r>
 8007dfc:	3001      	adds	r0, #1
 8007dfe:	f000 80aa 	beq.w	8007f56 <_vfiprintf_r+0x20e>
 8007e02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e04:	445a      	add	r2, fp
 8007e06:	9209      	str	r2, [sp, #36]	; 0x24
 8007e08:	f89a 3000 	ldrb.w	r3, [sl]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	f000 80a2 	beq.w	8007f56 <_vfiprintf_r+0x20e>
 8007e12:	2300      	movs	r3, #0
 8007e14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e1c:	f10a 0a01 	add.w	sl, sl, #1
 8007e20:	9304      	str	r3, [sp, #16]
 8007e22:	9307      	str	r3, [sp, #28]
 8007e24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e28:	931a      	str	r3, [sp, #104]	; 0x68
 8007e2a:	4654      	mov	r4, sl
 8007e2c:	2205      	movs	r2, #5
 8007e2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e32:	4858      	ldr	r0, [pc, #352]	; (8007f94 <_vfiprintf_r+0x24c>)
 8007e34:	f7ff f922 	bl	800707c <memchr>
 8007e38:	9a04      	ldr	r2, [sp, #16]
 8007e3a:	b9d8      	cbnz	r0, 8007e74 <_vfiprintf_r+0x12c>
 8007e3c:	06d1      	lsls	r1, r2, #27
 8007e3e:	bf44      	itt	mi
 8007e40:	2320      	movmi	r3, #32
 8007e42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e46:	0713      	lsls	r3, r2, #28
 8007e48:	bf44      	itt	mi
 8007e4a:	232b      	movmi	r3, #43	; 0x2b
 8007e4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e50:	f89a 3000 	ldrb.w	r3, [sl]
 8007e54:	2b2a      	cmp	r3, #42	; 0x2a
 8007e56:	d015      	beq.n	8007e84 <_vfiprintf_r+0x13c>
 8007e58:	4654      	mov	r4, sl
 8007e5a:	2000      	movs	r0, #0
 8007e5c:	f04f 0c0a 	mov.w	ip, #10
 8007e60:	9a07      	ldr	r2, [sp, #28]
 8007e62:	4621      	mov	r1, r4
 8007e64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e68:	3b30      	subs	r3, #48	; 0x30
 8007e6a:	2b09      	cmp	r3, #9
 8007e6c:	d94e      	bls.n	8007f0c <_vfiprintf_r+0x1c4>
 8007e6e:	b1b0      	cbz	r0, 8007e9e <_vfiprintf_r+0x156>
 8007e70:	9207      	str	r2, [sp, #28]
 8007e72:	e014      	b.n	8007e9e <_vfiprintf_r+0x156>
 8007e74:	eba0 0308 	sub.w	r3, r0, r8
 8007e78:	fa09 f303 	lsl.w	r3, r9, r3
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	46a2      	mov	sl, r4
 8007e80:	9304      	str	r3, [sp, #16]
 8007e82:	e7d2      	b.n	8007e2a <_vfiprintf_r+0xe2>
 8007e84:	9b03      	ldr	r3, [sp, #12]
 8007e86:	1d19      	adds	r1, r3, #4
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	9103      	str	r1, [sp, #12]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	bfbb      	ittet	lt
 8007e90:	425b      	neglt	r3, r3
 8007e92:	f042 0202 	orrlt.w	r2, r2, #2
 8007e96:	9307      	strge	r3, [sp, #28]
 8007e98:	9307      	strlt	r3, [sp, #28]
 8007e9a:	bfb8      	it	lt
 8007e9c:	9204      	strlt	r2, [sp, #16]
 8007e9e:	7823      	ldrb	r3, [r4, #0]
 8007ea0:	2b2e      	cmp	r3, #46	; 0x2e
 8007ea2:	d10c      	bne.n	8007ebe <_vfiprintf_r+0x176>
 8007ea4:	7863      	ldrb	r3, [r4, #1]
 8007ea6:	2b2a      	cmp	r3, #42	; 0x2a
 8007ea8:	d135      	bne.n	8007f16 <_vfiprintf_r+0x1ce>
 8007eaa:	9b03      	ldr	r3, [sp, #12]
 8007eac:	3402      	adds	r4, #2
 8007eae:	1d1a      	adds	r2, r3, #4
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	9203      	str	r2, [sp, #12]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	bfb8      	it	lt
 8007eb8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007ebc:	9305      	str	r3, [sp, #20]
 8007ebe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007fa4 <_vfiprintf_r+0x25c>
 8007ec2:	2203      	movs	r2, #3
 8007ec4:	4650      	mov	r0, sl
 8007ec6:	7821      	ldrb	r1, [r4, #0]
 8007ec8:	f7ff f8d8 	bl	800707c <memchr>
 8007ecc:	b140      	cbz	r0, 8007ee0 <_vfiprintf_r+0x198>
 8007ece:	2340      	movs	r3, #64	; 0x40
 8007ed0:	eba0 000a 	sub.w	r0, r0, sl
 8007ed4:	fa03 f000 	lsl.w	r0, r3, r0
 8007ed8:	9b04      	ldr	r3, [sp, #16]
 8007eda:	3401      	adds	r4, #1
 8007edc:	4303      	orrs	r3, r0
 8007ede:	9304      	str	r3, [sp, #16]
 8007ee0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ee4:	2206      	movs	r2, #6
 8007ee6:	482c      	ldr	r0, [pc, #176]	; (8007f98 <_vfiprintf_r+0x250>)
 8007ee8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007eec:	f7ff f8c6 	bl	800707c <memchr>
 8007ef0:	2800      	cmp	r0, #0
 8007ef2:	d03f      	beq.n	8007f74 <_vfiprintf_r+0x22c>
 8007ef4:	4b29      	ldr	r3, [pc, #164]	; (8007f9c <_vfiprintf_r+0x254>)
 8007ef6:	bb1b      	cbnz	r3, 8007f40 <_vfiprintf_r+0x1f8>
 8007ef8:	9b03      	ldr	r3, [sp, #12]
 8007efa:	3307      	adds	r3, #7
 8007efc:	f023 0307 	bic.w	r3, r3, #7
 8007f00:	3308      	adds	r3, #8
 8007f02:	9303      	str	r3, [sp, #12]
 8007f04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f06:	443b      	add	r3, r7
 8007f08:	9309      	str	r3, [sp, #36]	; 0x24
 8007f0a:	e767      	b.n	8007ddc <_vfiprintf_r+0x94>
 8007f0c:	460c      	mov	r4, r1
 8007f0e:	2001      	movs	r0, #1
 8007f10:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f14:	e7a5      	b.n	8007e62 <_vfiprintf_r+0x11a>
 8007f16:	2300      	movs	r3, #0
 8007f18:	f04f 0c0a 	mov.w	ip, #10
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	3401      	adds	r4, #1
 8007f20:	9305      	str	r3, [sp, #20]
 8007f22:	4620      	mov	r0, r4
 8007f24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f28:	3a30      	subs	r2, #48	; 0x30
 8007f2a:	2a09      	cmp	r2, #9
 8007f2c:	d903      	bls.n	8007f36 <_vfiprintf_r+0x1ee>
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d0c5      	beq.n	8007ebe <_vfiprintf_r+0x176>
 8007f32:	9105      	str	r1, [sp, #20]
 8007f34:	e7c3      	b.n	8007ebe <_vfiprintf_r+0x176>
 8007f36:	4604      	mov	r4, r0
 8007f38:	2301      	movs	r3, #1
 8007f3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f3e:	e7f0      	b.n	8007f22 <_vfiprintf_r+0x1da>
 8007f40:	ab03      	add	r3, sp, #12
 8007f42:	9300      	str	r3, [sp, #0]
 8007f44:	462a      	mov	r2, r5
 8007f46:	4630      	mov	r0, r6
 8007f48:	4b15      	ldr	r3, [pc, #84]	; (8007fa0 <_vfiprintf_r+0x258>)
 8007f4a:	a904      	add	r1, sp, #16
 8007f4c:	f7fd fe2a 	bl	8005ba4 <_printf_float>
 8007f50:	4607      	mov	r7, r0
 8007f52:	1c78      	adds	r0, r7, #1
 8007f54:	d1d6      	bne.n	8007f04 <_vfiprintf_r+0x1bc>
 8007f56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f58:	07d9      	lsls	r1, r3, #31
 8007f5a:	d405      	bmi.n	8007f68 <_vfiprintf_r+0x220>
 8007f5c:	89ab      	ldrh	r3, [r5, #12]
 8007f5e:	059a      	lsls	r2, r3, #22
 8007f60:	d402      	bmi.n	8007f68 <_vfiprintf_r+0x220>
 8007f62:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f64:	f000 faaf 	bl	80084c6 <__retarget_lock_release_recursive>
 8007f68:	89ab      	ldrh	r3, [r5, #12]
 8007f6a:	065b      	lsls	r3, r3, #25
 8007f6c:	f53f af12 	bmi.w	8007d94 <_vfiprintf_r+0x4c>
 8007f70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f72:	e711      	b.n	8007d98 <_vfiprintf_r+0x50>
 8007f74:	ab03      	add	r3, sp, #12
 8007f76:	9300      	str	r3, [sp, #0]
 8007f78:	462a      	mov	r2, r5
 8007f7a:	4630      	mov	r0, r6
 8007f7c:	4b08      	ldr	r3, [pc, #32]	; (8007fa0 <_vfiprintf_r+0x258>)
 8007f7e:	a904      	add	r1, sp, #16
 8007f80:	f7fe f8ac 	bl	80060dc <_printf_i>
 8007f84:	e7e4      	b.n	8007f50 <_vfiprintf_r+0x208>
 8007f86:	bf00      	nop
 8007f88:	0800bd84 	.word	0x0800bd84
 8007f8c:	0800bda4 	.word	0x0800bda4
 8007f90:	0800bd64 	.word	0x0800bd64
 8007f94:	0800bc0c 	.word	0x0800bc0c
 8007f98:	0800bc16 	.word	0x0800bc16
 8007f9c:	08005ba5 	.word	0x08005ba5
 8007fa0:	08007d23 	.word	0x08007d23
 8007fa4:	0800bc12 	.word	0x0800bc12

08007fa8 <__swbuf_r>:
 8007fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007faa:	460e      	mov	r6, r1
 8007fac:	4614      	mov	r4, r2
 8007fae:	4605      	mov	r5, r0
 8007fb0:	b118      	cbz	r0, 8007fba <__swbuf_r+0x12>
 8007fb2:	6983      	ldr	r3, [r0, #24]
 8007fb4:	b90b      	cbnz	r3, 8007fba <__swbuf_r+0x12>
 8007fb6:	f000 f9e7 	bl	8008388 <__sinit>
 8007fba:	4b21      	ldr	r3, [pc, #132]	; (8008040 <__swbuf_r+0x98>)
 8007fbc:	429c      	cmp	r4, r3
 8007fbe:	d12b      	bne.n	8008018 <__swbuf_r+0x70>
 8007fc0:	686c      	ldr	r4, [r5, #4]
 8007fc2:	69a3      	ldr	r3, [r4, #24]
 8007fc4:	60a3      	str	r3, [r4, #8]
 8007fc6:	89a3      	ldrh	r3, [r4, #12]
 8007fc8:	071a      	lsls	r2, r3, #28
 8007fca:	d52f      	bpl.n	800802c <__swbuf_r+0x84>
 8007fcc:	6923      	ldr	r3, [r4, #16]
 8007fce:	b36b      	cbz	r3, 800802c <__swbuf_r+0x84>
 8007fd0:	6923      	ldr	r3, [r4, #16]
 8007fd2:	6820      	ldr	r0, [r4, #0]
 8007fd4:	b2f6      	uxtb	r6, r6
 8007fd6:	1ac0      	subs	r0, r0, r3
 8007fd8:	6963      	ldr	r3, [r4, #20]
 8007fda:	4637      	mov	r7, r6
 8007fdc:	4283      	cmp	r3, r0
 8007fde:	dc04      	bgt.n	8007fea <__swbuf_r+0x42>
 8007fe0:	4621      	mov	r1, r4
 8007fe2:	4628      	mov	r0, r5
 8007fe4:	f000 f93c 	bl	8008260 <_fflush_r>
 8007fe8:	bb30      	cbnz	r0, 8008038 <__swbuf_r+0x90>
 8007fea:	68a3      	ldr	r3, [r4, #8]
 8007fec:	3001      	adds	r0, #1
 8007fee:	3b01      	subs	r3, #1
 8007ff0:	60a3      	str	r3, [r4, #8]
 8007ff2:	6823      	ldr	r3, [r4, #0]
 8007ff4:	1c5a      	adds	r2, r3, #1
 8007ff6:	6022      	str	r2, [r4, #0]
 8007ff8:	701e      	strb	r6, [r3, #0]
 8007ffa:	6963      	ldr	r3, [r4, #20]
 8007ffc:	4283      	cmp	r3, r0
 8007ffe:	d004      	beq.n	800800a <__swbuf_r+0x62>
 8008000:	89a3      	ldrh	r3, [r4, #12]
 8008002:	07db      	lsls	r3, r3, #31
 8008004:	d506      	bpl.n	8008014 <__swbuf_r+0x6c>
 8008006:	2e0a      	cmp	r6, #10
 8008008:	d104      	bne.n	8008014 <__swbuf_r+0x6c>
 800800a:	4621      	mov	r1, r4
 800800c:	4628      	mov	r0, r5
 800800e:	f000 f927 	bl	8008260 <_fflush_r>
 8008012:	b988      	cbnz	r0, 8008038 <__swbuf_r+0x90>
 8008014:	4638      	mov	r0, r7
 8008016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008018:	4b0a      	ldr	r3, [pc, #40]	; (8008044 <__swbuf_r+0x9c>)
 800801a:	429c      	cmp	r4, r3
 800801c:	d101      	bne.n	8008022 <__swbuf_r+0x7a>
 800801e:	68ac      	ldr	r4, [r5, #8]
 8008020:	e7cf      	b.n	8007fc2 <__swbuf_r+0x1a>
 8008022:	4b09      	ldr	r3, [pc, #36]	; (8008048 <__swbuf_r+0xa0>)
 8008024:	429c      	cmp	r4, r3
 8008026:	bf08      	it	eq
 8008028:	68ec      	ldreq	r4, [r5, #12]
 800802a:	e7ca      	b.n	8007fc2 <__swbuf_r+0x1a>
 800802c:	4621      	mov	r1, r4
 800802e:	4628      	mov	r0, r5
 8008030:	f000 f81a 	bl	8008068 <__swsetup_r>
 8008034:	2800      	cmp	r0, #0
 8008036:	d0cb      	beq.n	8007fd0 <__swbuf_r+0x28>
 8008038:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800803c:	e7ea      	b.n	8008014 <__swbuf_r+0x6c>
 800803e:	bf00      	nop
 8008040:	0800bd84 	.word	0x0800bd84
 8008044:	0800bda4 	.word	0x0800bda4
 8008048:	0800bd64 	.word	0x0800bd64

0800804c <__ascii_wctomb>:
 800804c:	4603      	mov	r3, r0
 800804e:	4608      	mov	r0, r1
 8008050:	b141      	cbz	r1, 8008064 <__ascii_wctomb+0x18>
 8008052:	2aff      	cmp	r2, #255	; 0xff
 8008054:	d904      	bls.n	8008060 <__ascii_wctomb+0x14>
 8008056:	228a      	movs	r2, #138	; 0x8a
 8008058:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800805c:	601a      	str	r2, [r3, #0]
 800805e:	4770      	bx	lr
 8008060:	2001      	movs	r0, #1
 8008062:	700a      	strb	r2, [r1, #0]
 8008064:	4770      	bx	lr
	...

08008068 <__swsetup_r>:
 8008068:	4b32      	ldr	r3, [pc, #200]	; (8008134 <__swsetup_r+0xcc>)
 800806a:	b570      	push	{r4, r5, r6, lr}
 800806c:	681d      	ldr	r5, [r3, #0]
 800806e:	4606      	mov	r6, r0
 8008070:	460c      	mov	r4, r1
 8008072:	b125      	cbz	r5, 800807e <__swsetup_r+0x16>
 8008074:	69ab      	ldr	r3, [r5, #24]
 8008076:	b913      	cbnz	r3, 800807e <__swsetup_r+0x16>
 8008078:	4628      	mov	r0, r5
 800807a:	f000 f985 	bl	8008388 <__sinit>
 800807e:	4b2e      	ldr	r3, [pc, #184]	; (8008138 <__swsetup_r+0xd0>)
 8008080:	429c      	cmp	r4, r3
 8008082:	d10f      	bne.n	80080a4 <__swsetup_r+0x3c>
 8008084:	686c      	ldr	r4, [r5, #4]
 8008086:	89a3      	ldrh	r3, [r4, #12]
 8008088:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800808c:	0719      	lsls	r1, r3, #28
 800808e:	d42c      	bmi.n	80080ea <__swsetup_r+0x82>
 8008090:	06dd      	lsls	r5, r3, #27
 8008092:	d411      	bmi.n	80080b8 <__swsetup_r+0x50>
 8008094:	2309      	movs	r3, #9
 8008096:	6033      	str	r3, [r6, #0]
 8008098:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800809c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080a0:	81a3      	strh	r3, [r4, #12]
 80080a2:	e03e      	b.n	8008122 <__swsetup_r+0xba>
 80080a4:	4b25      	ldr	r3, [pc, #148]	; (800813c <__swsetup_r+0xd4>)
 80080a6:	429c      	cmp	r4, r3
 80080a8:	d101      	bne.n	80080ae <__swsetup_r+0x46>
 80080aa:	68ac      	ldr	r4, [r5, #8]
 80080ac:	e7eb      	b.n	8008086 <__swsetup_r+0x1e>
 80080ae:	4b24      	ldr	r3, [pc, #144]	; (8008140 <__swsetup_r+0xd8>)
 80080b0:	429c      	cmp	r4, r3
 80080b2:	bf08      	it	eq
 80080b4:	68ec      	ldreq	r4, [r5, #12]
 80080b6:	e7e6      	b.n	8008086 <__swsetup_r+0x1e>
 80080b8:	0758      	lsls	r0, r3, #29
 80080ba:	d512      	bpl.n	80080e2 <__swsetup_r+0x7a>
 80080bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080be:	b141      	cbz	r1, 80080d2 <__swsetup_r+0x6a>
 80080c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80080c4:	4299      	cmp	r1, r3
 80080c6:	d002      	beq.n	80080ce <__swsetup_r+0x66>
 80080c8:	4630      	mov	r0, r6
 80080ca:	f7ff fb75 	bl	80077b8 <_free_r>
 80080ce:	2300      	movs	r3, #0
 80080d0:	6363      	str	r3, [r4, #52]	; 0x34
 80080d2:	89a3      	ldrh	r3, [r4, #12]
 80080d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80080d8:	81a3      	strh	r3, [r4, #12]
 80080da:	2300      	movs	r3, #0
 80080dc:	6063      	str	r3, [r4, #4]
 80080de:	6923      	ldr	r3, [r4, #16]
 80080e0:	6023      	str	r3, [r4, #0]
 80080e2:	89a3      	ldrh	r3, [r4, #12]
 80080e4:	f043 0308 	orr.w	r3, r3, #8
 80080e8:	81a3      	strh	r3, [r4, #12]
 80080ea:	6923      	ldr	r3, [r4, #16]
 80080ec:	b94b      	cbnz	r3, 8008102 <__swsetup_r+0x9a>
 80080ee:	89a3      	ldrh	r3, [r4, #12]
 80080f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80080f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080f8:	d003      	beq.n	8008102 <__swsetup_r+0x9a>
 80080fa:	4621      	mov	r1, r4
 80080fc:	4630      	mov	r0, r6
 80080fe:	f000 fa07 	bl	8008510 <__smakebuf_r>
 8008102:	89a0      	ldrh	r0, [r4, #12]
 8008104:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008108:	f010 0301 	ands.w	r3, r0, #1
 800810c:	d00a      	beq.n	8008124 <__swsetup_r+0xbc>
 800810e:	2300      	movs	r3, #0
 8008110:	60a3      	str	r3, [r4, #8]
 8008112:	6963      	ldr	r3, [r4, #20]
 8008114:	425b      	negs	r3, r3
 8008116:	61a3      	str	r3, [r4, #24]
 8008118:	6923      	ldr	r3, [r4, #16]
 800811a:	b943      	cbnz	r3, 800812e <__swsetup_r+0xc6>
 800811c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008120:	d1ba      	bne.n	8008098 <__swsetup_r+0x30>
 8008122:	bd70      	pop	{r4, r5, r6, pc}
 8008124:	0781      	lsls	r1, r0, #30
 8008126:	bf58      	it	pl
 8008128:	6963      	ldrpl	r3, [r4, #20]
 800812a:	60a3      	str	r3, [r4, #8]
 800812c:	e7f4      	b.n	8008118 <__swsetup_r+0xb0>
 800812e:	2000      	movs	r0, #0
 8008130:	e7f7      	b.n	8008122 <__swsetup_r+0xba>
 8008132:	bf00      	nop
 8008134:	200000a0 	.word	0x200000a0
 8008138:	0800bd84 	.word	0x0800bd84
 800813c:	0800bda4 	.word	0x0800bda4
 8008140:	0800bd64 	.word	0x0800bd64

08008144 <abort>:
 8008144:	2006      	movs	r0, #6
 8008146:	b508      	push	{r3, lr}
 8008148:	f000 fa52 	bl	80085f0 <raise>
 800814c:	2001      	movs	r0, #1
 800814e:	f7f9 fd02 	bl	8001b56 <_exit>
	...

08008154 <__sflush_r>:
 8008154:	898a      	ldrh	r2, [r1, #12]
 8008156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800815a:	4605      	mov	r5, r0
 800815c:	0710      	lsls	r0, r2, #28
 800815e:	460c      	mov	r4, r1
 8008160:	d458      	bmi.n	8008214 <__sflush_r+0xc0>
 8008162:	684b      	ldr	r3, [r1, #4]
 8008164:	2b00      	cmp	r3, #0
 8008166:	dc05      	bgt.n	8008174 <__sflush_r+0x20>
 8008168:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800816a:	2b00      	cmp	r3, #0
 800816c:	dc02      	bgt.n	8008174 <__sflush_r+0x20>
 800816e:	2000      	movs	r0, #0
 8008170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008174:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008176:	2e00      	cmp	r6, #0
 8008178:	d0f9      	beq.n	800816e <__sflush_r+0x1a>
 800817a:	2300      	movs	r3, #0
 800817c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008180:	682f      	ldr	r7, [r5, #0]
 8008182:	602b      	str	r3, [r5, #0]
 8008184:	d032      	beq.n	80081ec <__sflush_r+0x98>
 8008186:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008188:	89a3      	ldrh	r3, [r4, #12]
 800818a:	075a      	lsls	r2, r3, #29
 800818c:	d505      	bpl.n	800819a <__sflush_r+0x46>
 800818e:	6863      	ldr	r3, [r4, #4]
 8008190:	1ac0      	subs	r0, r0, r3
 8008192:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008194:	b10b      	cbz	r3, 800819a <__sflush_r+0x46>
 8008196:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008198:	1ac0      	subs	r0, r0, r3
 800819a:	2300      	movs	r3, #0
 800819c:	4602      	mov	r2, r0
 800819e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80081a0:	4628      	mov	r0, r5
 80081a2:	6a21      	ldr	r1, [r4, #32]
 80081a4:	47b0      	blx	r6
 80081a6:	1c43      	adds	r3, r0, #1
 80081a8:	89a3      	ldrh	r3, [r4, #12]
 80081aa:	d106      	bne.n	80081ba <__sflush_r+0x66>
 80081ac:	6829      	ldr	r1, [r5, #0]
 80081ae:	291d      	cmp	r1, #29
 80081b0:	d82c      	bhi.n	800820c <__sflush_r+0xb8>
 80081b2:	4a2a      	ldr	r2, [pc, #168]	; (800825c <__sflush_r+0x108>)
 80081b4:	40ca      	lsrs	r2, r1
 80081b6:	07d6      	lsls	r6, r2, #31
 80081b8:	d528      	bpl.n	800820c <__sflush_r+0xb8>
 80081ba:	2200      	movs	r2, #0
 80081bc:	6062      	str	r2, [r4, #4]
 80081be:	6922      	ldr	r2, [r4, #16]
 80081c0:	04d9      	lsls	r1, r3, #19
 80081c2:	6022      	str	r2, [r4, #0]
 80081c4:	d504      	bpl.n	80081d0 <__sflush_r+0x7c>
 80081c6:	1c42      	adds	r2, r0, #1
 80081c8:	d101      	bne.n	80081ce <__sflush_r+0x7a>
 80081ca:	682b      	ldr	r3, [r5, #0]
 80081cc:	b903      	cbnz	r3, 80081d0 <__sflush_r+0x7c>
 80081ce:	6560      	str	r0, [r4, #84]	; 0x54
 80081d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80081d2:	602f      	str	r7, [r5, #0]
 80081d4:	2900      	cmp	r1, #0
 80081d6:	d0ca      	beq.n	800816e <__sflush_r+0x1a>
 80081d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80081dc:	4299      	cmp	r1, r3
 80081de:	d002      	beq.n	80081e6 <__sflush_r+0x92>
 80081e0:	4628      	mov	r0, r5
 80081e2:	f7ff fae9 	bl	80077b8 <_free_r>
 80081e6:	2000      	movs	r0, #0
 80081e8:	6360      	str	r0, [r4, #52]	; 0x34
 80081ea:	e7c1      	b.n	8008170 <__sflush_r+0x1c>
 80081ec:	6a21      	ldr	r1, [r4, #32]
 80081ee:	2301      	movs	r3, #1
 80081f0:	4628      	mov	r0, r5
 80081f2:	47b0      	blx	r6
 80081f4:	1c41      	adds	r1, r0, #1
 80081f6:	d1c7      	bne.n	8008188 <__sflush_r+0x34>
 80081f8:	682b      	ldr	r3, [r5, #0]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d0c4      	beq.n	8008188 <__sflush_r+0x34>
 80081fe:	2b1d      	cmp	r3, #29
 8008200:	d001      	beq.n	8008206 <__sflush_r+0xb2>
 8008202:	2b16      	cmp	r3, #22
 8008204:	d101      	bne.n	800820a <__sflush_r+0xb6>
 8008206:	602f      	str	r7, [r5, #0]
 8008208:	e7b1      	b.n	800816e <__sflush_r+0x1a>
 800820a:	89a3      	ldrh	r3, [r4, #12]
 800820c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008210:	81a3      	strh	r3, [r4, #12]
 8008212:	e7ad      	b.n	8008170 <__sflush_r+0x1c>
 8008214:	690f      	ldr	r7, [r1, #16]
 8008216:	2f00      	cmp	r7, #0
 8008218:	d0a9      	beq.n	800816e <__sflush_r+0x1a>
 800821a:	0793      	lsls	r3, r2, #30
 800821c:	bf18      	it	ne
 800821e:	2300      	movne	r3, #0
 8008220:	680e      	ldr	r6, [r1, #0]
 8008222:	bf08      	it	eq
 8008224:	694b      	ldreq	r3, [r1, #20]
 8008226:	eba6 0807 	sub.w	r8, r6, r7
 800822a:	600f      	str	r7, [r1, #0]
 800822c:	608b      	str	r3, [r1, #8]
 800822e:	f1b8 0f00 	cmp.w	r8, #0
 8008232:	dd9c      	ble.n	800816e <__sflush_r+0x1a>
 8008234:	4643      	mov	r3, r8
 8008236:	463a      	mov	r2, r7
 8008238:	4628      	mov	r0, r5
 800823a:	6a21      	ldr	r1, [r4, #32]
 800823c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800823e:	47b0      	blx	r6
 8008240:	2800      	cmp	r0, #0
 8008242:	dc06      	bgt.n	8008252 <__sflush_r+0xfe>
 8008244:	89a3      	ldrh	r3, [r4, #12]
 8008246:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800824a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800824e:	81a3      	strh	r3, [r4, #12]
 8008250:	e78e      	b.n	8008170 <__sflush_r+0x1c>
 8008252:	4407      	add	r7, r0
 8008254:	eba8 0800 	sub.w	r8, r8, r0
 8008258:	e7e9      	b.n	800822e <__sflush_r+0xda>
 800825a:	bf00      	nop
 800825c:	20400001 	.word	0x20400001

08008260 <_fflush_r>:
 8008260:	b538      	push	{r3, r4, r5, lr}
 8008262:	690b      	ldr	r3, [r1, #16]
 8008264:	4605      	mov	r5, r0
 8008266:	460c      	mov	r4, r1
 8008268:	b913      	cbnz	r3, 8008270 <_fflush_r+0x10>
 800826a:	2500      	movs	r5, #0
 800826c:	4628      	mov	r0, r5
 800826e:	bd38      	pop	{r3, r4, r5, pc}
 8008270:	b118      	cbz	r0, 800827a <_fflush_r+0x1a>
 8008272:	6983      	ldr	r3, [r0, #24]
 8008274:	b90b      	cbnz	r3, 800827a <_fflush_r+0x1a>
 8008276:	f000 f887 	bl	8008388 <__sinit>
 800827a:	4b14      	ldr	r3, [pc, #80]	; (80082cc <_fflush_r+0x6c>)
 800827c:	429c      	cmp	r4, r3
 800827e:	d11b      	bne.n	80082b8 <_fflush_r+0x58>
 8008280:	686c      	ldr	r4, [r5, #4]
 8008282:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d0ef      	beq.n	800826a <_fflush_r+0xa>
 800828a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800828c:	07d0      	lsls	r0, r2, #31
 800828e:	d404      	bmi.n	800829a <_fflush_r+0x3a>
 8008290:	0599      	lsls	r1, r3, #22
 8008292:	d402      	bmi.n	800829a <_fflush_r+0x3a>
 8008294:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008296:	f000 f915 	bl	80084c4 <__retarget_lock_acquire_recursive>
 800829a:	4628      	mov	r0, r5
 800829c:	4621      	mov	r1, r4
 800829e:	f7ff ff59 	bl	8008154 <__sflush_r>
 80082a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80082a4:	4605      	mov	r5, r0
 80082a6:	07da      	lsls	r2, r3, #31
 80082a8:	d4e0      	bmi.n	800826c <_fflush_r+0xc>
 80082aa:	89a3      	ldrh	r3, [r4, #12]
 80082ac:	059b      	lsls	r3, r3, #22
 80082ae:	d4dd      	bmi.n	800826c <_fflush_r+0xc>
 80082b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082b2:	f000 f908 	bl	80084c6 <__retarget_lock_release_recursive>
 80082b6:	e7d9      	b.n	800826c <_fflush_r+0xc>
 80082b8:	4b05      	ldr	r3, [pc, #20]	; (80082d0 <_fflush_r+0x70>)
 80082ba:	429c      	cmp	r4, r3
 80082bc:	d101      	bne.n	80082c2 <_fflush_r+0x62>
 80082be:	68ac      	ldr	r4, [r5, #8]
 80082c0:	e7df      	b.n	8008282 <_fflush_r+0x22>
 80082c2:	4b04      	ldr	r3, [pc, #16]	; (80082d4 <_fflush_r+0x74>)
 80082c4:	429c      	cmp	r4, r3
 80082c6:	bf08      	it	eq
 80082c8:	68ec      	ldreq	r4, [r5, #12]
 80082ca:	e7da      	b.n	8008282 <_fflush_r+0x22>
 80082cc:	0800bd84 	.word	0x0800bd84
 80082d0:	0800bda4 	.word	0x0800bda4
 80082d4:	0800bd64 	.word	0x0800bd64

080082d8 <std>:
 80082d8:	2300      	movs	r3, #0
 80082da:	b510      	push	{r4, lr}
 80082dc:	4604      	mov	r4, r0
 80082de:	e9c0 3300 	strd	r3, r3, [r0]
 80082e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80082e6:	6083      	str	r3, [r0, #8]
 80082e8:	8181      	strh	r1, [r0, #12]
 80082ea:	6643      	str	r3, [r0, #100]	; 0x64
 80082ec:	81c2      	strh	r2, [r0, #14]
 80082ee:	6183      	str	r3, [r0, #24]
 80082f0:	4619      	mov	r1, r3
 80082f2:	2208      	movs	r2, #8
 80082f4:	305c      	adds	r0, #92	; 0x5c
 80082f6:	f7fd fbaf 	bl	8005a58 <memset>
 80082fa:	4b05      	ldr	r3, [pc, #20]	; (8008310 <std+0x38>)
 80082fc:	6224      	str	r4, [r4, #32]
 80082fe:	6263      	str	r3, [r4, #36]	; 0x24
 8008300:	4b04      	ldr	r3, [pc, #16]	; (8008314 <std+0x3c>)
 8008302:	62a3      	str	r3, [r4, #40]	; 0x28
 8008304:	4b04      	ldr	r3, [pc, #16]	; (8008318 <std+0x40>)
 8008306:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008308:	4b04      	ldr	r3, [pc, #16]	; (800831c <std+0x44>)
 800830a:	6323      	str	r3, [r4, #48]	; 0x30
 800830c:	bd10      	pop	{r4, pc}
 800830e:	bf00      	nop
 8008310:	08008629 	.word	0x08008629
 8008314:	0800864b 	.word	0x0800864b
 8008318:	08008683 	.word	0x08008683
 800831c:	080086a7 	.word	0x080086a7

08008320 <_cleanup_r>:
 8008320:	4901      	ldr	r1, [pc, #4]	; (8008328 <_cleanup_r+0x8>)
 8008322:	f000 b8af 	b.w	8008484 <_fwalk_reent>
 8008326:	bf00      	nop
 8008328:	08008261 	.word	0x08008261

0800832c <__sfmoreglue>:
 800832c:	b570      	push	{r4, r5, r6, lr}
 800832e:	2568      	movs	r5, #104	; 0x68
 8008330:	1e4a      	subs	r2, r1, #1
 8008332:	4355      	muls	r5, r2
 8008334:	460e      	mov	r6, r1
 8008336:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800833a:	f7ff fa89 	bl	8007850 <_malloc_r>
 800833e:	4604      	mov	r4, r0
 8008340:	b140      	cbz	r0, 8008354 <__sfmoreglue+0x28>
 8008342:	2100      	movs	r1, #0
 8008344:	e9c0 1600 	strd	r1, r6, [r0]
 8008348:	300c      	adds	r0, #12
 800834a:	60a0      	str	r0, [r4, #8]
 800834c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008350:	f7fd fb82 	bl	8005a58 <memset>
 8008354:	4620      	mov	r0, r4
 8008356:	bd70      	pop	{r4, r5, r6, pc}

08008358 <__sfp_lock_acquire>:
 8008358:	4801      	ldr	r0, [pc, #4]	; (8008360 <__sfp_lock_acquire+0x8>)
 800835a:	f000 b8b3 	b.w	80084c4 <__retarget_lock_acquire_recursive>
 800835e:	bf00      	nop
 8008360:	20000c10 	.word	0x20000c10

08008364 <__sfp_lock_release>:
 8008364:	4801      	ldr	r0, [pc, #4]	; (800836c <__sfp_lock_release+0x8>)
 8008366:	f000 b8ae 	b.w	80084c6 <__retarget_lock_release_recursive>
 800836a:	bf00      	nop
 800836c:	20000c10 	.word	0x20000c10

08008370 <__sinit_lock_acquire>:
 8008370:	4801      	ldr	r0, [pc, #4]	; (8008378 <__sinit_lock_acquire+0x8>)
 8008372:	f000 b8a7 	b.w	80084c4 <__retarget_lock_acquire_recursive>
 8008376:	bf00      	nop
 8008378:	20000c0b 	.word	0x20000c0b

0800837c <__sinit_lock_release>:
 800837c:	4801      	ldr	r0, [pc, #4]	; (8008384 <__sinit_lock_release+0x8>)
 800837e:	f000 b8a2 	b.w	80084c6 <__retarget_lock_release_recursive>
 8008382:	bf00      	nop
 8008384:	20000c0b 	.word	0x20000c0b

08008388 <__sinit>:
 8008388:	b510      	push	{r4, lr}
 800838a:	4604      	mov	r4, r0
 800838c:	f7ff fff0 	bl	8008370 <__sinit_lock_acquire>
 8008390:	69a3      	ldr	r3, [r4, #24]
 8008392:	b11b      	cbz	r3, 800839c <__sinit+0x14>
 8008394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008398:	f7ff bff0 	b.w	800837c <__sinit_lock_release>
 800839c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80083a0:	6523      	str	r3, [r4, #80]	; 0x50
 80083a2:	4b13      	ldr	r3, [pc, #76]	; (80083f0 <__sinit+0x68>)
 80083a4:	4a13      	ldr	r2, [pc, #76]	; (80083f4 <__sinit+0x6c>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80083aa:	42a3      	cmp	r3, r4
 80083ac:	bf08      	it	eq
 80083ae:	2301      	moveq	r3, #1
 80083b0:	4620      	mov	r0, r4
 80083b2:	bf08      	it	eq
 80083b4:	61a3      	streq	r3, [r4, #24]
 80083b6:	f000 f81f 	bl	80083f8 <__sfp>
 80083ba:	6060      	str	r0, [r4, #4]
 80083bc:	4620      	mov	r0, r4
 80083be:	f000 f81b 	bl	80083f8 <__sfp>
 80083c2:	60a0      	str	r0, [r4, #8]
 80083c4:	4620      	mov	r0, r4
 80083c6:	f000 f817 	bl	80083f8 <__sfp>
 80083ca:	2200      	movs	r2, #0
 80083cc:	2104      	movs	r1, #4
 80083ce:	60e0      	str	r0, [r4, #12]
 80083d0:	6860      	ldr	r0, [r4, #4]
 80083d2:	f7ff ff81 	bl	80082d8 <std>
 80083d6:	2201      	movs	r2, #1
 80083d8:	2109      	movs	r1, #9
 80083da:	68a0      	ldr	r0, [r4, #8]
 80083dc:	f7ff ff7c 	bl	80082d8 <std>
 80083e0:	2202      	movs	r2, #2
 80083e2:	2112      	movs	r1, #18
 80083e4:	68e0      	ldr	r0, [r4, #12]
 80083e6:	f7ff ff77 	bl	80082d8 <std>
 80083ea:	2301      	movs	r3, #1
 80083ec:	61a3      	str	r3, [r4, #24]
 80083ee:	e7d1      	b.n	8008394 <__sinit+0xc>
 80083f0:	0800b9e0 	.word	0x0800b9e0
 80083f4:	08008321 	.word	0x08008321

080083f8 <__sfp>:
 80083f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083fa:	4607      	mov	r7, r0
 80083fc:	f7ff ffac 	bl	8008358 <__sfp_lock_acquire>
 8008400:	4b1e      	ldr	r3, [pc, #120]	; (800847c <__sfp+0x84>)
 8008402:	681e      	ldr	r6, [r3, #0]
 8008404:	69b3      	ldr	r3, [r6, #24]
 8008406:	b913      	cbnz	r3, 800840e <__sfp+0x16>
 8008408:	4630      	mov	r0, r6
 800840a:	f7ff ffbd 	bl	8008388 <__sinit>
 800840e:	3648      	adds	r6, #72	; 0x48
 8008410:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008414:	3b01      	subs	r3, #1
 8008416:	d503      	bpl.n	8008420 <__sfp+0x28>
 8008418:	6833      	ldr	r3, [r6, #0]
 800841a:	b30b      	cbz	r3, 8008460 <__sfp+0x68>
 800841c:	6836      	ldr	r6, [r6, #0]
 800841e:	e7f7      	b.n	8008410 <__sfp+0x18>
 8008420:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008424:	b9d5      	cbnz	r5, 800845c <__sfp+0x64>
 8008426:	4b16      	ldr	r3, [pc, #88]	; (8008480 <__sfp+0x88>)
 8008428:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800842c:	60e3      	str	r3, [r4, #12]
 800842e:	6665      	str	r5, [r4, #100]	; 0x64
 8008430:	f000 f847 	bl	80084c2 <__retarget_lock_init_recursive>
 8008434:	f7ff ff96 	bl	8008364 <__sfp_lock_release>
 8008438:	2208      	movs	r2, #8
 800843a:	4629      	mov	r1, r5
 800843c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008440:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008444:	6025      	str	r5, [r4, #0]
 8008446:	61a5      	str	r5, [r4, #24]
 8008448:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800844c:	f7fd fb04 	bl	8005a58 <memset>
 8008450:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008454:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008458:	4620      	mov	r0, r4
 800845a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800845c:	3468      	adds	r4, #104	; 0x68
 800845e:	e7d9      	b.n	8008414 <__sfp+0x1c>
 8008460:	2104      	movs	r1, #4
 8008462:	4638      	mov	r0, r7
 8008464:	f7ff ff62 	bl	800832c <__sfmoreglue>
 8008468:	4604      	mov	r4, r0
 800846a:	6030      	str	r0, [r6, #0]
 800846c:	2800      	cmp	r0, #0
 800846e:	d1d5      	bne.n	800841c <__sfp+0x24>
 8008470:	f7ff ff78 	bl	8008364 <__sfp_lock_release>
 8008474:	230c      	movs	r3, #12
 8008476:	603b      	str	r3, [r7, #0]
 8008478:	e7ee      	b.n	8008458 <__sfp+0x60>
 800847a:	bf00      	nop
 800847c:	0800b9e0 	.word	0x0800b9e0
 8008480:	ffff0001 	.word	0xffff0001

08008484 <_fwalk_reent>:
 8008484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008488:	4606      	mov	r6, r0
 800848a:	4688      	mov	r8, r1
 800848c:	2700      	movs	r7, #0
 800848e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008492:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008496:	f1b9 0901 	subs.w	r9, r9, #1
 800849a:	d505      	bpl.n	80084a8 <_fwalk_reent+0x24>
 800849c:	6824      	ldr	r4, [r4, #0]
 800849e:	2c00      	cmp	r4, #0
 80084a0:	d1f7      	bne.n	8008492 <_fwalk_reent+0xe>
 80084a2:	4638      	mov	r0, r7
 80084a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084a8:	89ab      	ldrh	r3, [r5, #12]
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d907      	bls.n	80084be <_fwalk_reent+0x3a>
 80084ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80084b2:	3301      	adds	r3, #1
 80084b4:	d003      	beq.n	80084be <_fwalk_reent+0x3a>
 80084b6:	4629      	mov	r1, r5
 80084b8:	4630      	mov	r0, r6
 80084ba:	47c0      	blx	r8
 80084bc:	4307      	orrs	r7, r0
 80084be:	3568      	adds	r5, #104	; 0x68
 80084c0:	e7e9      	b.n	8008496 <_fwalk_reent+0x12>

080084c2 <__retarget_lock_init_recursive>:
 80084c2:	4770      	bx	lr

080084c4 <__retarget_lock_acquire_recursive>:
 80084c4:	4770      	bx	lr

080084c6 <__retarget_lock_release_recursive>:
 80084c6:	4770      	bx	lr

080084c8 <__swhatbuf_r>:
 80084c8:	b570      	push	{r4, r5, r6, lr}
 80084ca:	460e      	mov	r6, r1
 80084cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084d0:	4614      	mov	r4, r2
 80084d2:	2900      	cmp	r1, #0
 80084d4:	461d      	mov	r5, r3
 80084d6:	b096      	sub	sp, #88	; 0x58
 80084d8:	da07      	bge.n	80084ea <__swhatbuf_r+0x22>
 80084da:	2300      	movs	r3, #0
 80084dc:	602b      	str	r3, [r5, #0]
 80084de:	89b3      	ldrh	r3, [r6, #12]
 80084e0:	061a      	lsls	r2, r3, #24
 80084e2:	d410      	bmi.n	8008506 <__swhatbuf_r+0x3e>
 80084e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084e8:	e00e      	b.n	8008508 <__swhatbuf_r+0x40>
 80084ea:	466a      	mov	r2, sp
 80084ec:	f000 f902 	bl	80086f4 <_fstat_r>
 80084f0:	2800      	cmp	r0, #0
 80084f2:	dbf2      	blt.n	80084da <__swhatbuf_r+0x12>
 80084f4:	9a01      	ldr	r2, [sp, #4]
 80084f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80084fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80084fe:	425a      	negs	r2, r3
 8008500:	415a      	adcs	r2, r3
 8008502:	602a      	str	r2, [r5, #0]
 8008504:	e7ee      	b.n	80084e4 <__swhatbuf_r+0x1c>
 8008506:	2340      	movs	r3, #64	; 0x40
 8008508:	2000      	movs	r0, #0
 800850a:	6023      	str	r3, [r4, #0]
 800850c:	b016      	add	sp, #88	; 0x58
 800850e:	bd70      	pop	{r4, r5, r6, pc}

08008510 <__smakebuf_r>:
 8008510:	898b      	ldrh	r3, [r1, #12]
 8008512:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008514:	079d      	lsls	r5, r3, #30
 8008516:	4606      	mov	r6, r0
 8008518:	460c      	mov	r4, r1
 800851a:	d507      	bpl.n	800852c <__smakebuf_r+0x1c>
 800851c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008520:	6023      	str	r3, [r4, #0]
 8008522:	6123      	str	r3, [r4, #16]
 8008524:	2301      	movs	r3, #1
 8008526:	6163      	str	r3, [r4, #20]
 8008528:	b002      	add	sp, #8
 800852a:	bd70      	pop	{r4, r5, r6, pc}
 800852c:	466a      	mov	r2, sp
 800852e:	ab01      	add	r3, sp, #4
 8008530:	f7ff ffca 	bl	80084c8 <__swhatbuf_r>
 8008534:	9900      	ldr	r1, [sp, #0]
 8008536:	4605      	mov	r5, r0
 8008538:	4630      	mov	r0, r6
 800853a:	f7ff f989 	bl	8007850 <_malloc_r>
 800853e:	b948      	cbnz	r0, 8008554 <__smakebuf_r+0x44>
 8008540:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008544:	059a      	lsls	r2, r3, #22
 8008546:	d4ef      	bmi.n	8008528 <__smakebuf_r+0x18>
 8008548:	f023 0303 	bic.w	r3, r3, #3
 800854c:	f043 0302 	orr.w	r3, r3, #2
 8008550:	81a3      	strh	r3, [r4, #12]
 8008552:	e7e3      	b.n	800851c <__smakebuf_r+0xc>
 8008554:	4b0d      	ldr	r3, [pc, #52]	; (800858c <__smakebuf_r+0x7c>)
 8008556:	62b3      	str	r3, [r6, #40]	; 0x28
 8008558:	89a3      	ldrh	r3, [r4, #12]
 800855a:	6020      	str	r0, [r4, #0]
 800855c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008560:	81a3      	strh	r3, [r4, #12]
 8008562:	9b00      	ldr	r3, [sp, #0]
 8008564:	6120      	str	r0, [r4, #16]
 8008566:	6163      	str	r3, [r4, #20]
 8008568:	9b01      	ldr	r3, [sp, #4]
 800856a:	b15b      	cbz	r3, 8008584 <__smakebuf_r+0x74>
 800856c:	4630      	mov	r0, r6
 800856e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008572:	f000 f8d1 	bl	8008718 <_isatty_r>
 8008576:	b128      	cbz	r0, 8008584 <__smakebuf_r+0x74>
 8008578:	89a3      	ldrh	r3, [r4, #12]
 800857a:	f023 0303 	bic.w	r3, r3, #3
 800857e:	f043 0301 	orr.w	r3, r3, #1
 8008582:	81a3      	strh	r3, [r4, #12]
 8008584:	89a0      	ldrh	r0, [r4, #12]
 8008586:	4305      	orrs	r5, r0
 8008588:	81a5      	strh	r5, [r4, #12]
 800858a:	e7cd      	b.n	8008528 <__smakebuf_r+0x18>
 800858c:	08008321 	.word	0x08008321

08008590 <_malloc_usable_size_r>:
 8008590:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008594:	1f18      	subs	r0, r3, #4
 8008596:	2b00      	cmp	r3, #0
 8008598:	bfbc      	itt	lt
 800859a:	580b      	ldrlt	r3, [r1, r0]
 800859c:	18c0      	addlt	r0, r0, r3
 800859e:	4770      	bx	lr

080085a0 <_raise_r>:
 80085a0:	291f      	cmp	r1, #31
 80085a2:	b538      	push	{r3, r4, r5, lr}
 80085a4:	4604      	mov	r4, r0
 80085a6:	460d      	mov	r5, r1
 80085a8:	d904      	bls.n	80085b4 <_raise_r+0x14>
 80085aa:	2316      	movs	r3, #22
 80085ac:	6003      	str	r3, [r0, #0]
 80085ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085b2:	bd38      	pop	{r3, r4, r5, pc}
 80085b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80085b6:	b112      	cbz	r2, 80085be <_raise_r+0x1e>
 80085b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80085bc:	b94b      	cbnz	r3, 80085d2 <_raise_r+0x32>
 80085be:	4620      	mov	r0, r4
 80085c0:	f000 f830 	bl	8008624 <_getpid_r>
 80085c4:	462a      	mov	r2, r5
 80085c6:	4601      	mov	r1, r0
 80085c8:	4620      	mov	r0, r4
 80085ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085ce:	f000 b817 	b.w	8008600 <_kill_r>
 80085d2:	2b01      	cmp	r3, #1
 80085d4:	d00a      	beq.n	80085ec <_raise_r+0x4c>
 80085d6:	1c59      	adds	r1, r3, #1
 80085d8:	d103      	bne.n	80085e2 <_raise_r+0x42>
 80085da:	2316      	movs	r3, #22
 80085dc:	6003      	str	r3, [r0, #0]
 80085de:	2001      	movs	r0, #1
 80085e0:	e7e7      	b.n	80085b2 <_raise_r+0x12>
 80085e2:	2400      	movs	r4, #0
 80085e4:	4628      	mov	r0, r5
 80085e6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80085ea:	4798      	blx	r3
 80085ec:	2000      	movs	r0, #0
 80085ee:	e7e0      	b.n	80085b2 <_raise_r+0x12>

080085f0 <raise>:
 80085f0:	4b02      	ldr	r3, [pc, #8]	; (80085fc <raise+0xc>)
 80085f2:	4601      	mov	r1, r0
 80085f4:	6818      	ldr	r0, [r3, #0]
 80085f6:	f7ff bfd3 	b.w	80085a0 <_raise_r>
 80085fa:	bf00      	nop
 80085fc:	200000a0 	.word	0x200000a0

08008600 <_kill_r>:
 8008600:	b538      	push	{r3, r4, r5, lr}
 8008602:	2300      	movs	r3, #0
 8008604:	4d06      	ldr	r5, [pc, #24]	; (8008620 <_kill_r+0x20>)
 8008606:	4604      	mov	r4, r0
 8008608:	4608      	mov	r0, r1
 800860a:	4611      	mov	r1, r2
 800860c:	602b      	str	r3, [r5, #0]
 800860e:	f7f9 fa92 	bl	8001b36 <_kill>
 8008612:	1c43      	adds	r3, r0, #1
 8008614:	d102      	bne.n	800861c <_kill_r+0x1c>
 8008616:	682b      	ldr	r3, [r5, #0]
 8008618:	b103      	cbz	r3, 800861c <_kill_r+0x1c>
 800861a:	6023      	str	r3, [r4, #0]
 800861c:	bd38      	pop	{r3, r4, r5, pc}
 800861e:	bf00      	nop
 8008620:	20000c04 	.word	0x20000c04

08008624 <_getpid_r>:
 8008624:	f7f9 ba80 	b.w	8001b28 <_getpid>

08008628 <__sread>:
 8008628:	b510      	push	{r4, lr}
 800862a:	460c      	mov	r4, r1
 800862c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008630:	f000 f894 	bl	800875c <_read_r>
 8008634:	2800      	cmp	r0, #0
 8008636:	bfab      	itete	ge
 8008638:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800863a:	89a3      	ldrhlt	r3, [r4, #12]
 800863c:	181b      	addge	r3, r3, r0
 800863e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008642:	bfac      	ite	ge
 8008644:	6563      	strge	r3, [r4, #84]	; 0x54
 8008646:	81a3      	strhlt	r3, [r4, #12]
 8008648:	bd10      	pop	{r4, pc}

0800864a <__swrite>:
 800864a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800864e:	461f      	mov	r7, r3
 8008650:	898b      	ldrh	r3, [r1, #12]
 8008652:	4605      	mov	r5, r0
 8008654:	05db      	lsls	r3, r3, #23
 8008656:	460c      	mov	r4, r1
 8008658:	4616      	mov	r6, r2
 800865a:	d505      	bpl.n	8008668 <__swrite+0x1e>
 800865c:	2302      	movs	r3, #2
 800865e:	2200      	movs	r2, #0
 8008660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008664:	f000 f868 	bl	8008738 <_lseek_r>
 8008668:	89a3      	ldrh	r3, [r4, #12]
 800866a:	4632      	mov	r2, r6
 800866c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008670:	81a3      	strh	r3, [r4, #12]
 8008672:	4628      	mov	r0, r5
 8008674:	463b      	mov	r3, r7
 8008676:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800867a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800867e:	f000 b817 	b.w	80086b0 <_write_r>

08008682 <__sseek>:
 8008682:	b510      	push	{r4, lr}
 8008684:	460c      	mov	r4, r1
 8008686:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800868a:	f000 f855 	bl	8008738 <_lseek_r>
 800868e:	1c43      	adds	r3, r0, #1
 8008690:	89a3      	ldrh	r3, [r4, #12]
 8008692:	bf15      	itete	ne
 8008694:	6560      	strne	r0, [r4, #84]	; 0x54
 8008696:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800869a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800869e:	81a3      	strheq	r3, [r4, #12]
 80086a0:	bf18      	it	ne
 80086a2:	81a3      	strhne	r3, [r4, #12]
 80086a4:	bd10      	pop	{r4, pc}

080086a6 <__sclose>:
 80086a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086aa:	f000 b813 	b.w	80086d4 <_close_r>
	...

080086b0 <_write_r>:
 80086b0:	b538      	push	{r3, r4, r5, lr}
 80086b2:	4604      	mov	r4, r0
 80086b4:	4608      	mov	r0, r1
 80086b6:	4611      	mov	r1, r2
 80086b8:	2200      	movs	r2, #0
 80086ba:	4d05      	ldr	r5, [pc, #20]	; (80086d0 <_write_r+0x20>)
 80086bc:	602a      	str	r2, [r5, #0]
 80086be:	461a      	mov	r2, r3
 80086c0:	f7f9 fa70 	bl	8001ba4 <_write>
 80086c4:	1c43      	adds	r3, r0, #1
 80086c6:	d102      	bne.n	80086ce <_write_r+0x1e>
 80086c8:	682b      	ldr	r3, [r5, #0]
 80086ca:	b103      	cbz	r3, 80086ce <_write_r+0x1e>
 80086cc:	6023      	str	r3, [r4, #0]
 80086ce:	bd38      	pop	{r3, r4, r5, pc}
 80086d0:	20000c04 	.word	0x20000c04

080086d4 <_close_r>:
 80086d4:	b538      	push	{r3, r4, r5, lr}
 80086d6:	2300      	movs	r3, #0
 80086d8:	4d05      	ldr	r5, [pc, #20]	; (80086f0 <_close_r+0x1c>)
 80086da:	4604      	mov	r4, r0
 80086dc:	4608      	mov	r0, r1
 80086de:	602b      	str	r3, [r5, #0]
 80086e0:	f7f9 fa7c 	bl	8001bdc <_close>
 80086e4:	1c43      	adds	r3, r0, #1
 80086e6:	d102      	bne.n	80086ee <_close_r+0x1a>
 80086e8:	682b      	ldr	r3, [r5, #0]
 80086ea:	b103      	cbz	r3, 80086ee <_close_r+0x1a>
 80086ec:	6023      	str	r3, [r4, #0]
 80086ee:	bd38      	pop	{r3, r4, r5, pc}
 80086f0:	20000c04 	.word	0x20000c04

080086f4 <_fstat_r>:
 80086f4:	b538      	push	{r3, r4, r5, lr}
 80086f6:	2300      	movs	r3, #0
 80086f8:	4d06      	ldr	r5, [pc, #24]	; (8008714 <_fstat_r+0x20>)
 80086fa:	4604      	mov	r4, r0
 80086fc:	4608      	mov	r0, r1
 80086fe:	4611      	mov	r1, r2
 8008700:	602b      	str	r3, [r5, #0]
 8008702:	f7f9 fa76 	bl	8001bf2 <_fstat>
 8008706:	1c43      	adds	r3, r0, #1
 8008708:	d102      	bne.n	8008710 <_fstat_r+0x1c>
 800870a:	682b      	ldr	r3, [r5, #0]
 800870c:	b103      	cbz	r3, 8008710 <_fstat_r+0x1c>
 800870e:	6023      	str	r3, [r4, #0]
 8008710:	bd38      	pop	{r3, r4, r5, pc}
 8008712:	bf00      	nop
 8008714:	20000c04 	.word	0x20000c04

08008718 <_isatty_r>:
 8008718:	b538      	push	{r3, r4, r5, lr}
 800871a:	2300      	movs	r3, #0
 800871c:	4d05      	ldr	r5, [pc, #20]	; (8008734 <_isatty_r+0x1c>)
 800871e:	4604      	mov	r4, r0
 8008720:	4608      	mov	r0, r1
 8008722:	602b      	str	r3, [r5, #0]
 8008724:	f7f9 fa74 	bl	8001c10 <_isatty>
 8008728:	1c43      	adds	r3, r0, #1
 800872a:	d102      	bne.n	8008732 <_isatty_r+0x1a>
 800872c:	682b      	ldr	r3, [r5, #0]
 800872e:	b103      	cbz	r3, 8008732 <_isatty_r+0x1a>
 8008730:	6023      	str	r3, [r4, #0]
 8008732:	bd38      	pop	{r3, r4, r5, pc}
 8008734:	20000c04 	.word	0x20000c04

08008738 <_lseek_r>:
 8008738:	b538      	push	{r3, r4, r5, lr}
 800873a:	4604      	mov	r4, r0
 800873c:	4608      	mov	r0, r1
 800873e:	4611      	mov	r1, r2
 8008740:	2200      	movs	r2, #0
 8008742:	4d05      	ldr	r5, [pc, #20]	; (8008758 <_lseek_r+0x20>)
 8008744:	602a      	str	r2, [r5, #0]
 8008746:	461a      	mov	r2, r3
 8008748:	f7f9 fa6c 	bl	8001c24 <_lseek>
 800874c:	1c43      	adds	r3, r0, #1
 800874e:	d102      	bne.n	8008756 <_lseek_r+0x1e>
 8008750:	682b      	ldr	r3, [r5, #0]
 8008752:	b103      	cbz	r3, 8008756 <_lseek_r+0x1e>
 8008754:	6023      	str	r3, [r4, #0]
 8008756:	bd38      	pop	{r3, r4, r5, pc}
 8008758:	20000c04 	.word	0x20000c04

0800875c <_read_r>:
 800875c:	b538      	push	{r3, r4, r5, lr}
 800875e:	4604      	mov	r4, r0
 8008760:	4608      	mov	r0, r1
 8008762:	4611      	mov	r1, r2
 8008764:	2200      	movs	r2, #0
 8008766:	4d05      	ldr	r5, [pc, #20]	; (800877c <_read_r+0x20>)
 8008768:	602a      	str	r2, [r5, #0]
 800876a:	461a      	mov	r2, r3
 800876c:	f7f9 f9fd 	bl	8001b6a <_read>
 8008770:	1c43      	adds	r3, r0, #1
 8008772:	d102      	bne.n	800877a <_read_r+0x1e>
 8008774:	682b      	ldr	r3, [r5, #0]
 8008776:	b103      	cbz	r3, 800877a <_read_r+0x1e>
 8008778:	6023      	str	r3, [r4, #0]
 800877a:	bd38      	pop	{r3, r4, r5, pc}
 800877c:	20000c04 	.word	0x20000c04

08008780 <cos>:
 8008780:	b530      	push	{r4, r5, lr}
 8008782:	4a1e      	ldr	r2, [pc, #120]	; (80087fc <cos+0x7c>)
 8008784:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008788:	4293      	cmp	r3, r2
 800878a:	b087      	sub	sp, #28
 800878c:	dc04      	bgt.n	8008798 <cos+0x18>
 800878e:	2200      	movs	r2, #0
 8008790:	2300      	movs	r3, #0
 8008792:	f000 fc1d 	bl	8008fd0 <__kernel_cos>
 8008796:	e006      	b.n	80087a6 <cos+0x26>
 8008798:	4a19      	ldr	r2, [pc, #100]	; (8008800 <cos+0x80>)
 800879a:	4293      	cmp	r3, r2
 800879c:	dd05      	ble.n	80087aa <cos+0x2a>
 800879e:	4602      	mov	r2, r0
 80087a0:	460b      	mov	r3, r1
 80087a2:	f7f7 fce1 	bl	8000168 <__aeabi_dsub>
 80087a6:	b007      	add	sp, #28
 80087a8:	bd30      	pop	{r4, r5, pc}
 80087aa:	aa02      	add	r2, sp, #8
 80087ac:	f000 f974 	bl	8008a98 <__ieee754_rem_pio2>
 80087b0:	f000 0003 	and.w	r0, r0, #3
 80087b4:	2801      	cmp	r0, #1
 80087b6:	d007      	beq.n	80087c8 <cos+0x48>
 80087b8:	2802      	cmp	r0, #2
 80087ba:	d00f      	beq.n	80087dc <cos+0x5c>
 80087bc:	b9a8      	cbnz	r0, 80087ea <cos+0x6a>
 80087be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087c6:	e7e4      	b.n	8008792 <cos+0x12>
 80087c8:	9000      	str	r0, [sp, #0]
 80087ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087d2:	f001 f805 	bl	80097e0 <__kernel_sin>
 80087d6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80087da:	e7e4      	b.n	80087a6 <cos+0x26>
 80087dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087e4:	f000 fbf4 	bl	8008fd0 <__kernel_cos>
 80087e8:	e7f5      	b.n	80087d6 <cos+0x56>
 80087ea:	2301      	movs	r3, #1
 80087ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087f0:	9300      	str	r3, [sp, #0]
 80087f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087f6:	f000 fff3 	bl	80097e0 <__kernel_sin>
 80087fa:	e7d4      	b.n	80087a6 <cos+0x26>
 80087fc:	3fe921fb 	.word	0x3fe921fb
 8008800:	7fefffff 	.word	0x7fefffff

08008804 <sin>:
 8008804:	b530      	push	{r4, r5, lr}
 8008806:	4a20      	ldr	r2, [pc, #128]	; (8008888 <sin+0x84>)
 8008808:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800880c:	4293      	cmp	r3, r2
 800880e:	b087      	sub	sp, #28
 8008810:	dc06      	bgt.n	8008820 <sin+0x1c>
 8008812:	2300      	movs	r3, #0
 8008814:	2200      	movs	r2, #0
 8008816:	9300      	str	r3, [sp, #0]
 8008818:	2300      	movs	r3, #0
 800881a:	f000 ffe1 	bl	80097e0 <__kernel_sin>
 800881e:	e006      	b.n	800882e <sin+0x2a>
 8008820:	4a1a      	ldr	r2, [pc, #104]	; (800888c <sin+0x88>)
 8008822:	4293      	cmp	r3, r2
 8008824:	dd05      	ble.n	8008832 <sin+0x2e>
 8008826:	4602      	mov	r2, r0
 8008828:	460b      	mov	r3, r1
 800882a:	f7f7 fc9d 	bl	8000168 <__aeabi_dsub>
 800882e:	b007      	add	sp, #28
 8008830:	bd30      	pop	{r4, r5, pc}
 8008832:	aa02      	add	r2, sp, #8
 8008834:	f000 f930 	bl	8008a98 <__ieee754_rem_pio2>
 8008838:	f000 0003 	and.w	r0, r0, #3
 800883c:	2801      	cmp	r0, #1
 800883e:	d009      	beq.n	8008854 <sin+0x50>
 8008840:	2802      	cmp	r0, #2
 8008842:	d00e      	beq.n	8008862 <sin+0x5e>
 8008844:	b9c0      	cbnz	r0, 8008878 <sin+0x74>
 8008846:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800884a:	2301      	movs	r3, #1
 800884c:	9300      	str	r3, [sp, #0]
 800884e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008852:	e7e2      	b.n	800881a <sin+0x16>
 8008854:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008858:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800885c:	f000 fbb8 	bl	8008fd0 <__kernel_cos>
 8008860:	e7e5      	b.n	800882e <sin+0x2a>
 8008862:	2301      	movs	r3, #1
 8008864:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008868:	9300      	str	r3, [sp, #0]
 800886a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800886e:	f000 ffb7 	bl	80097e0 <__kernel_sin>
 8008872:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8008876:	e7da      	b.n	800882e <sin+0x2a>
 8008878:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800887c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008880:	f000 fba6 	bl	8008fd0 <__kernel_cos>
 8008884:	e7f5      	b.n	8008872 <sin+0x6e>
 8008886:	bf00      	nop
 8008888:	3fe921fb 	.word	0x3fe921fb
 800888c:	7fefffff 	.word	0x7fefffff

08008890 <atan2>:
 8008890:	f000 b82e 	b.w	80088f0 <__ieee754_atan2>

08008894 <sqrt>:
 8008894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008896:	4606      	mov	r6, r0
 8008898:	460f      	mov	r7, r1
 800889a:	f000 faed 	bl	8008e78 <__ieee754_sqrt>
 800889e:	4b12      	ldr	r3, [pc, #72]	; (80088e8 <sqrt+0x54>)
 80088a0:	4604      	mov	r4, r0
 80088a2:	f993 3000 	ldrsb.w	r3, [r3]
 80088a6:	460d      	mov	r5, r1
 80088a8:	3301      	adds	r3, #1
 80088aa:	d019      	beq.n	80088e0 <sqrt+0x4c>
 80088ac:	4632      	mov	r2, r6
 80088ae:	463b      	mov	r3, r7
 80088b0:	4630      	mov	r0, r6
 80088b2:	4639      	mov	r1, r7
 80088b4:	f7f8 f8aa 	bl	8000a0c <__aeabi_dcmpun>
 80088b8:	b990      	cbnz	r0, 80088e0 <sqrt+0x4c>
 80088ba:	2200      	movs	r2, #0
 80088bc:	2300      	movs	r3, #0
 80088be:	4630      	mov	r0, r6
 80088c0:	4639      	mov	r1, r7
 80088c2:	f7f8 f87b 	bl	80009bc <__aeabi_dcmplt>
 80088c6:	b158      	cbz	r0, 80088e0 <sqrt+0x4c>
 80088c8:	f7fd f88e 	bl	80059e8 <__errno>
 80088cc:	2321      	movs	r3, #33	; 0x21
 80088ce:	2200      	movs	r2, #0
 80088d0:	6003      	str	r3, [r0, #0]
 80088d2:	2300      	movs	r3, #0
 80088d4:	4610      	mov	r0, r2
 80088d6:	4619      	mov	r1, r3
 80088d8:	f7f7 ff28 	bl	800072c <__aeabi_ddiv>
 80088dc:	4604      	mov	r4, r0
 80088de:	460d      	mov	r5, r1
 80088e0:	4620      	mov	r0, r4
 80088e2:	4629      	mov	r1, r5
 80088e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088e6:	bf00      	nop
 80088e8:	20000270 	.word	0x20000270
 80088ec:	00000000 	.word	0x00000000

080088f0 <__ieee754_atan2>:
 80088f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088f4:	4692      	mov	sl, r2
 80088f6:	4699      	mov	r9, r3
 80088f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80088fc:	461f      	mov	r7, r3
 80088fe:	f1ca 0300 	rsb	r3, sl, #0
 8008902:	f8df e18c 	ldr.w	lr, [pc, #396]	; 8008a90 <__ieee754_atan2+0x1a0>
 8008906:	ea43 030a 	orr.w	r3, r3, sl
 800890a:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800890e:	4573      	cmp	r3, lr
 8008910:	4604      	mov	r4, r0
 8008912:	460d      	mov	r5, r1
 8008914:	d808      	bhi.n	8008928 <__ieee754_atan2+0x38>
 8008916:	4246      	negs	r6, r0
 8008918:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800891c:	4306      	orrs	r6, r0
 800891e:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8008922:	4576      	cmp	r6, lr
 8008924:	468c      	mov	ip, r1
 8008926:	d908      	bls.n	800893a <__ieee754_atan2+0x4a>
 8008928:	4652      	mov	r2, sl
 800892a:	464b      	mov	r3, r9
 800892c:	4620      	mov	r0, r4
 800892e:	4629      	mov	r1, r5
 8008930:	f7f7 fc1c 	bl	800016c <__adddf3>
 8008934:	4604      	mov	r4, r0
 8008936:	460d      	mov	r5, r1
 8008938:	e019      	b.n	800896e <__ieee754_atan2+0x7e>
 800893a:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 800893e:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8008942:	ea56 060a 	orrs.w	r6, r6, sl
 8008946:	d103      	bne.n	8008950 <__ieee754_atan2+0x60>
 8008948:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800894c:	f001 b800 	b.w	8009950 <atan>
 8008950:	17be      	asrs	r6, r7, #30
 8008952:	f006 0602 	and.w	r6, r6, #2
 8008956:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800895a:	ea53 0100 	orrs.w	r1, r3, r0
 800895e:	d10a      	bne.n	8008976 <__ieee754_atan2+0x86>
 8008960:	2e02      	cmp	r6, #2
 8008962:	d067      	beq.n	8008a34 <__ieee754_atan2+0x144>
 8008964:	2e03      	cmp	r6, #3
 8008966:	d102      	bne.n	800896e <__ieee754_atan2+0x7e>
 8008968:	a53b      	add	r5, pc, #236	; (adr r5, 8008a58 <__ieee754_atan2+0x168>)
 800896a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800896e:	4620      	mov	r0, r4
 8008970:	4629      	mov	r1, r5
 8008972:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008976:	ea52 010a 	orrs.w	r1, r2, sl
 800897a:	d106      	bne.n	800898a <__ieee754_atan2+0x9a>
 800897c:	f1bc 0f00 	cmp.w	ip, #0
 8008980:	da63      	bge.n	8008a4a <__ieee754_atan2+0x15a>
 8008982:	a537      	add	r5, pc, #220	; (adr r5, 8008a60 <__ieee754_atan2+0x170>)
 8008984:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008988:	e7f1      	b.n	800896e <__ieee754_atan2+0x7e>
 800898a:	4572      	cmp	r2, lr
 800898c:	d10f      	bne.n	80089ae <__ieee754_atan2+0xbe>
 800898e:	4293      	cmp	r3, r2
 8008990:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 8008994:	d107      	bne.n	80089a6 <__ieee754_atan2+0xb6>
 8008996:	2e02      	cmp	r6, #2
 8008998:	d850      	bhi.n	8008a3c <__ieee754_atan2+0x14c>
 800899a:	4b3b      	ldr	r3, [pc, #236]	; (8008a88 <__ieee754_atan2+0x198>)
 800899c:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80089a0:	e9d6 4500 	ldrd	r4, r5, [r6]
 80089a4:	e7e3      	b.n	800896e <__ieee754_atan2+0x7e>
 80089a6:	2e02      	cmp	r6, #2
 80089a8:	d84c      	bhi.n	8008a44 <__ieee754_atan2+0x154>
 80089aa:	4b38      	ldr	r3, [pc, #224]	; (8008a8c <__ieee754_atan2+0x19c>)
 80089ac:	e7f6      	b.n	800899c <__ieee754_atan2+0xac>
 80089ae:	4573      	cmp	r3, lr
 80089b0:	d0e4      	beq.n	800897c <__ieee754_atan2+0x8c>
 80089b2:	1a9b      	subs	r3, r3, r2
 80089b4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80089b8:	ea4f 5223 	mov.w	r2, r3, asr #20
 80089bc:	da20      	bge.n	8008a00 <__ieee754_atan2+0x110>
 80089be:	2f00      	cmp	r7, #0
 80089c0:	da01      	bge.n	80089c6 <__ieee754_atan2+0xd6>
 80089c2:	323c      	adds	r2, #60	; 0x3c
 80089c4:	db20      	blt.n	8008a08 <__ieee754_atan2+0x118>
 80089c6:	4652      	mov	r2, sl
 80089c8:	464b      	mov	r3, r9
 80089ca:	4620      	mov	r0, r4
 80089cc:	4629      	mov	r1, r5
 80089ce:	f7f7 fead 	bl	800072c <__aeabi_ddiv>
 80089d2:	f001 f947 	bl	8009c64 <fabs>
 80089d6:	f000 ffbb 	bl	8009950 <atan>
 80089da:	4604      	mov	r4, r0
 80089dc:	460d      	mov	r5, r1
 80089de:	2e01      	cmp	r6, #1
 80089e0:	d015      	beq.n	8008a0e <__ieee754_atan2+0x11e>
 80089e2:	2e02      	cmp	r6, #2
 80089e4:	d017      	beq.n	8008a16 <__ieee754_atan2+0x126>
 80089e6:	2e00      	cmp	r6, #0
 80089e8:	d0c1      	beq.n	800896e <__ieee754_atan2+0x7e>
 80089ea:	a31f      	add	r3, pc, #124	; (adr r3, 8008a68 <__ieee754_atan2+0x178>)
 80089ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f0:	4620      	mov	r0, r4
 80089f2:	4629      	mov	r1, r5
 80089f4:	f7f7 fbb8 	bl	8000168 <__aeabi_dsub>
 80089f8:	a31d      	add	r3, pc, #116	; (adr r3, 8008a70 <__ieee754_atan2+0x180>)
 80089fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089fe:	e016      	b.n	8008a2e <__ieee754_atan2+0x13e>
 8008a00:	a51d      	add	r5, pc, #116	; (adr r5, 8008a78 <__ieee754_atan2+0x188>)
 8008a02:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008a06:	e7ea      	b.n	80089de <__ieee754_atan2+0xee>
 8008a08:	2400      	movs	r4, #0
 8008a0a:	2500      	movs	r5, #0
 8008a0c:	e7e7      	b.n	80089de <__ieee754_atan2+0xee>
 8008a0e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008a12:	461d      	mov	r5, r3
 8008a14:	e7ab      	b.n	800896e <__ieee754_atan2+0x7e>
 8008a16:	a314      	add	r3, pc, #80	; (adr r3, 8008a68 <__ieee754_atan2+0x178>)
 8008a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a1c:	4620      	mov	r0, r4
 8008a1e:	4629      	mov	r1, r5
 8008a20:	f7f7 fba2 	bl	8000168 <__aeabi_dsub>
 8008a24:	4602      	mov	r2, r0
 8008a26:	460b      	mov	r3, r1
 8008a28:	a111      	add	r1, pc, #68	; (adr r1, 8008a70 <__ieee754_atan2+0x180>)
 8008a2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a2e:	f7f7 fb9b 	bl	8000168 <__aeabi_dsub>
 8008a32:	e77f      	b.n	8008934 <__ieee754_atan2+0x44>
 8008a34:	a50e      	add	r5, pc, #56	; (adr r5, 8008a70 <__ieee754_atan2+0x180>)
 8008a36:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008a3a:	e798      	b.n	800896e <__ieee754_atan2+0x7e>
 8008a3c:	a510      	add	r5, pc, #64	; (adr r5, 8008a80 <__ieee754_atan2+0x190>)
 8008a3e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008a42:	e794      	b.n	800896e <__ieee754_atan2+0x7e>
 8008a44:	2400      	movs	r4, #0
 8008a46:	2500      	movs	r5, #0
 8008a48:	e791      	b.n	800896e <__ieee754_atan2+0x7e>
 8008a4a:	a50b      	add	r5, pc, #44	; (adr r5, 8008a78 <__ieee754_atan2+0x188>)
 8008a4c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008a50:	e78d      	b.n	800896e <__ieee754_atan2+0x7e>
 8008a52:	bf00      	nop
 8008a54:	f3af 8000 	nop.w
 8008a58:	54442d18 	.word	0x54442d18
 8008a5c:	c00921fb 	.word	0xc00921fb
 8008a60:	54442d18 	.word	0x54442d18
 8008a64:	bff921fb 	.word	0xbff921fb
 8008a68:	33145c07 	.word	0x33145c07
 8008a6c:	3ca1a626 	.word	0x3ca1a626
 8008a70:	54442d18 	.word	0x54442d18
 8008a74:	400921fb 	.word	0x400921fb
 8008a78:	54442d18 	.word	0x54442d18
 8008a7c:	3ff921fb 	.word	0x3ff921fb
 8008a80:	54442d18 	.word	0x54442d18
 8008a84:	3fe921fb 	.word	0x3fe921fb
 8008a88:	0800bdc8 	.word	0x0800bdc8
 8008a8c:	0800bde0 	.word	0x0800bde0
 8008a90:	7ff00000 	.word	0x7ff00000
 8008a94:	00000000 	.word	0x00000000

08008a98 <__ieee754_rem_pio2>:
 8008a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a9c:	4614      	mov	r4, r2
 8008a9e:	4ac4      	ldr	r2, [pc, #784]	; (8008db0 <__ieee754_rem_pio2+0x318>)
 8008aa0:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8008aa4:	b08d      	sub	sp, #52	; 0x34
 8008aa6:	4592      	cmp	sl, r2
 8008aa8:	9104      	str	r1, [sp, #16]
 8008aaa:	dc07      	bgt.n	8008abc <__ieee754_rem_pio2+0x24>
 8008aac:	2200      	movs	r2, #0
 8008aae:	2300      	movs	r3, #0
 8008ab0:	e9c4 0100 	strd	r0, r1, [r4]
 8008ab4:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8008ab8:	2500      	movs	r5, #0
 8008aba:	e024      	b.n	8008b06 <__ieee754_rem_pio2+0x6e>
 8008abc:	4abd      	ldr	r2, [pc, #756]	; (8008db4 <__ieee754_rem_pio2+0x31c>)
 8008abe:	4592      	cmp	sl, r2
 8008ac0:	dc72      	bgt.n	8008ba8 <__ieee754_rem_pio2+0x110>
 8008ac2:	9b04      	ldr	r3, [sp, #16]
 8008ac4:	4dbc      	ldr	r5, [pc, #752]	; (8008db8 <__ieee754_rem_pio2+0x320>)
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	a3ab      	add	r3, pc, #684	; (adr r3, 8008d78 <__ieee754_rem_pio2+0x2e0>)
 8008aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ace:	dd36      	ble.n	8008b3e <__ieee754_rem_pio2+0xa6>
 8008ad0:	f7f7 fb4a 	bl	8000168 <__aeabi_dsub>
 8008ad4:	45aa      	cmp	sl, r5
 8008ad6:	4606      	mov	r6, r0
 8008ad8:	460f      	mov	r7, r1
 8008ada:	d018      	beq.n	8008b0e <__ieee754_rem_pio2+0x76>
 8008adc:	a3a8      	add	r3, pc, #672	; (adr r3, 8008d80 <__ieee754_rem_pio2+0x2e8>)
 8008ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae2:	f7f7 fb41 	bl	8000168 <__aeabi_dsub>
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	460b      	mov	r3, r1
 8008aea:	4630      	mov	r0, r6
 8008aec:	e9c4 2300 	strd	r2, r3, [r4]
 8008af0:	4639      	mov	r1, r7
 8008af2:	f7f7 fb39 	bl	8000168 <__aeabi_dsub>
 8008af6:	a3a2      	add	r3, pc, #648	; (adr r3, 8008d80 <__ieee754_rem_pio2+0x2e8>)
 8008af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008afc:	f7f7 fb34 	bl	8000168 <__aeabi_dsub>
 8008b00:	2501      	movs	r5, #1
 8008b02:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008b06:	4628      	mov	r0, r5
 8008b08:	b00d      	add	sp, #52	; 0x34
 8008b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b0e:	a39e      	add	r3, pc, #632	; (adr r3, 8008d88 <__ieee754_rem_pio2+0x2f0>)
 8008b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b14:	f7f7 fb28 	bl	8000168 <__aeabi_dsub>
 8008b18:	a39d      	add	r3, pc, #628	; (adr r3, 8008d90 <__ieee754_rem_pio2+0x2f8>)
 8008b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b1e:	4606      	mov	r6, r0
 8008b20:	460f      	mov	r7, r1
 8008b22:	f7f7 fb21 	bl	8000168 <__aeabi_dsub>
 8008b26:	4602      	mov	r2, r0
 8008b28:	460b      	mov	r3, r1
 8008b2a:	4630      	mov	r0, r6
 8008b2c:	e9c4 2300 	strd	r2, r3, [r4]
 8008b30:	4639      	mov	r1, r7
 8008b32:	f7f7 fb19 	bl	8000168 <__aeabi_dsub>
 8008b36:	a396      	add	r3, pc, #600	; (adr r3, 8008d90 <__ieee754_rem_pio2+0x2f8>)
 8008b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b3c:	e7de      	b.n	8008afc <__ieee754_rem_pio2+0x64>
 8008b3e:	f7f7 fb15 	bl	800016c <__adddf3>
 8008b42:	45aa      	cmp	sl, r5
 8008b44:	4606      	mov	r6, r0
 8008b46:	460f      	mov	r7, r1
 8008b48:	d016      	beq.n	8008b78 <__ieee754_rem_pio2+0xe0>
 8008b4a:	a38d      	add	r3, pc, #564	; (adr r3, 8008d80 <__ieee754_rem_pio2+0x2e8>)
 8008b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b50:	f7f7 fb0c 	bl	800016c <__adddf3>
 8008b54:	4602      	mov	r2, r0
 8008b56:	460b      	mov	r3, r1
 8008b58:	4630      	mov	r0, r6
 8008b5a:	e9c4 2300 	strd	r2, r3, [r4]
 8008b5e:	4639      	mov	r1, r7
 8008b60:	f7f7 fb02 	bl	8000168 <__aeabi_dsub>
 8008b64:	a386      	add	r3, pc, #536	; (adr r3, 8008d80 <__ieee754_rem_pio2+0x2e8>)
 8008b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b6a:	f7f7 faff 	bl	800016c <__adddf3>
 8008b6e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008b72:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008b76:	e7c6      	b.n	8008b06 <__ieee754_rem_pio2+0x6e>
 8008b78:	a383      	add	r3, pc, #524	; (adr r3, 8008d88 <__ieee754_rem_pio2+0x2f0>)
 8008b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b7e:	f7f7 faf5 	bl	800016c <__adddf3>
 8008b82:	a383      	add	r3, pc, #524	; (adr r3, 8008d90 <__ieee754_rem_pio2+0x2f8>)
 8008b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b88:	4606      	mov	r6, r0
 8008b8a:	460f      	mov	r7, r1
 8008b8c:	f7f7 faee 	bl	800016c <__adddf3>
 8008b90:	4602      	mov	r2, r0
 8008b92:	460b      	mov	r3, r1
 8008b94:	4630      	mov	r0, r6
 8008b96:	e9c4 2300 	strd	r2, r3, [r4]
 8008b9a:	4639      	mov	r1, r7
 8008b9c:	f7f7 fae4 	bl	8000168 <__aeabi_dsub>
 8008ba0:	a37b      	add	r3, pc, #492	; (adr r3, 8008d90 <__ieee754_rem_pio2+0x2f8>)
 8008ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba6:	e7e0      	b.n	8008b6a <__ieee754_rem_pio2+0xd2>
 8008ba8:	4a84      	ldr	r2, [pc, #528]	; (8008dbc <__ieee754_rem_pio2+0x324>)
 8008baa:	4592      	cmp	sl, r2
 8008bac:	f300 80d5 	bgt.w	8008d5a <__ieee754_rem_pio2+0x2c2>
 8008bb0:	f001 f858 	bl	8009c64 <fabs>
 8008bb4:	a378      	add	r3, pc, #480	; (adr r3, 8008d98 <__ieee754_rem_pio2+0x300>)
 8008bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bba:	4606      	mov	r6, r0
 8008bbc:	460f      	mov	r7, r1
 8008bbe:	f7f7 fc8b 	bl	80004d8 <__aeabi_dmul>
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	4b7e      	ldr	r3, [pc, #504]	; (8008dc0 <__ieee754_rem_pio2+0x328>)
 8008bc6:	f7f7 fad1 	bl	800016c <__adddf3>
 8008bca:	f7f7 ff35 	bl	8000a38 <__aeabi_d2iz>
 8008bce:	4605      	mov	r5, r0
 8008bd0:	f7f7 fc18 	bl	8000404 <__aeabi_i2d>
 8008bd4:	4602      	mov	r2, r0
 8008bd6:	460b      	mov	r3, r1
 8008bd8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008bdc:	a366      	add	r3, pc, #408	; (adr r3, 8008d78 <__ieee754_rem_pio2+0x2e0>)
 8008bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be2:	f7f7 fc79 	bl	80004d8 <__aeabi_dmul>
 8008be6:	4602      	mov	r2, r0
 8008be8:	460b      	mov	r3, r1
 8008bea:	4630      	mov	r0, r6
 8008bec:	4639      	mov	r1, r7
 8008bee:	f7f7 fabb 	bl	8000168 <__aeabi_dsub>
 8008bf2:	a363      	add	r3, pc, #396	; (adr r3, 8008d80 <__ieee754_rem_pio2+0x2e8>)
 8008bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf8:	4680      	mov	r8, r0
 8008bfa:	4689      	mov	r9, r1
 8008bfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c00:	f7f7 fc6a 	bl	80004d8 <__aeabi_dmul>
 8008c04:	2d1f      	cmp	r5, #31
 8008c06:	4606      	mov	r6, r0
 8008c08:	460f      	mov	r7, r1
 8008c0a:	dc0e      	bgt.n	8008c2a <__ieee754_rem_pio2+0x192>
 8008c0c:	4b6d      	ldr	r3, [pc, #436]	; (8008dc4 <__ieee754_rem_pio2+0x32c>)
 8008c0e:	1e6a      	subs	r2, r5, #1
 8008c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c14:	4553      	cmp	r3, sl
 8008c16:	d008      	beq.n	8008c2a <__ieee754_rem_pio2+0x192>
 8008c18:	4632      	mov	r2, r6
 8008c1a:	463b      	mov	r3, r7
 8008c1c:	4640      	mov	r0, r8
 8008c1e:	4649      	mov	r1, r9
 8008c20:	f7f7 faa2 	bl	8000168 <__aeabi_dsub>
 8008c24:	e9c4 0100 	strd	r0, r1, [r4]
 8008c28:	e013      	b.n	8008c52 <__ieee754_rem_pio2+0x1ba>
 8008c2a:	463b      	mov	r3, r7
 8008c2c:	4632      	mov	r2, r6
 8008c2e:	4640      	mov	r0, r8
 8008c30:	4649      	mov	r1, r9
 8008c32:	f7f7 fa99 	bl	8000168 <__aeabi_dsub>
 8008c36:	ea4f 532a 	mov.w	r3, sl, asr #20
 8008c3a:	9305      	str	r3, [sp, #20]
 8008c3c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008c40:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 8008c44:	f1ba 0f10 	cmp.w	sl, #16
 8008c48:	dc1f      	bgt.n	8008c8a <__ieee754_rem_pio2+0x1f2>
 8008c4a:	4602      	mov	r2, r0
 8008c4c:	460b      	mov	r3, r1
 8008c4e:	e9c4 2300 	strd	r2, r3, [r4]
 8008c52:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8008c56:	4640      	mov	r0, r8
 8008c58:	4653      	mov	r3, sl
 8008c5a:	4649      	mov	r1, r9
 8008c5c:	f7f7 fa84 	bl	8000168 <__aeabi_dsub>
 8008c60:	4632      	mov	r2, r6
 8008c62:	463b      	mov	r3, r7
 8008c64:	f7f7 fa80 	bl	8000168 <__aeabi_dsub>
 8008c68:	460b      	mov	r3, r1
 8008c6a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008c6e:	9904      	ldr	r1, [sp, #16]
 8008c70:	4602      	mov	r2, r0
 8008c72:	2900      	cmp	r1, #0
 8008c74:	f6bf af47 	bge.w	8008b06 <__ieee754_rem_pio2+0x6e>
 8008c78:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 8008c7c:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8008c80:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008c84:	60e3      	str	r3, [r4, #12]
 8008c86:	426d      	negs	r5, r5
 8008c88:	e73d      	b.n	8008b06 <__ieee754_rem_pio2+0x6e>
 8008c8a:	a33f      	add	r3, pc, #252	; (adr r3, 8008d88 <__ieee754_rem_pio2+0x2f0>)
 8008c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c94:	f7f7 fc20 	bl	80004d8 <__aeabi_dmul>
 8008c98:	4606      	mov	r6, r0
 8008c9a:	460f      	mov	r7, r1
 8008c9c:	4602      	mov	r2, r0
 8008c9e:	460b      	mov	r3, r1
 8008ca0:	4640      	mov	r0, r8
 8008ca2:	4649      	mov	r1, r9
 8008ca4:	f7f7 fa60 	bl	8000168 <__aeabi_dsub>
 8008ca8:	4602      	mov	r2, r0
 8008caa:	460b      	mov	r3, r1
 8008cac:	4682      	mov	sl, r0
 8008cae:	468b      	mov	fp, r1
 8008cb0:	4640      	mov	r0, r8
 8008cb2:	4649      	mov	r1, r9
 8008cb4:	f7f7 fa58 	bl	8000168 <__aeabi_dsub>
 8008cb8:	4632      	mov	r2, r6
 8008cba:	463b      	mov	r3, r7
 8008cbc:	f7f7 fa54 	bl	8000168 <__aeabi_dsub>
 8008cc0:	a333      	add	r3, pc, #204	; (adr r3, 8008d90 <__ieee754_rem_pio2+0x2f8>)
 8008cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc6:	4606      	mov	r6, r0
 8008cc8:	460f      	mov	r7, r1
 8008cca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cce:	f7f7 fc03 	bl	80004d8 <__aeabi_dmul>
 8008cd2:	4632      	mov	r2, r6
 8008cd4:	463b      	mov	r3, r7
 8008cd6:	f7f7 fa47 	bl	8000168 <__aeabi_dsub>
 8008cda:	4602      	mov	r2, r0
 8008cdc:	460b      	mov	r3, r1
 8008cde:	4606      	mov	r6, r0
 8008ce0:	460f      	mov	r7, r1
 8008ce2:	4650      	mov	r0, sl
 8008ce4:	4659      	mov	r1, fp
 8008ce6:	f7f7 fa3f 	bl	8000168 <__aeabi_dsub>
 8008cea:	9a05      	ldr	r2, [sp, #20]
 8008cec:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008cf0:	1ad3      	subs	r3, r2, r3
 8008cf2:	2b31      	cmp	r3, #49	; 0x31
 8008cf4:	dc06      	bgt.n	8008d04 <__ieee754_rem_pio2+0x26c>
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	460b      	mov	r3, r1
 8008cfa:	46d0      	mov	r8, sl
 8008cfc:	46d9      	mov	r9, fp
 8008cfe:	e9c4 2300 	strd	r2, r3, [r4]
 8008d02:	e7a6      	b.n	8008c52 <__ieee754_rem_pio2+0x1ba>
 8008d04:	a326      	add	r3, pc, #152	; (adr r3, 8008da0 <__ieee754_rem_pio2+0x308>)
 8008d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d0e:	f7f7 fbe3 	bl	80004d8 <__aeabi_dmul>
 8008d12:	4606      	mov	r6, r0
 8008d14:	460f      	mov	r7, r1
 8008d16:	4602      	mov	r2, r0
 8008d18:	460b      	mov	r3, r1
 8008d1a:	4650      	mov	r0, sl
 8008d1c:	4659      	mov	r1, fp
 8008d1e:	f7f7 fa23 	bl	8000168 <__aeabi_dsub>
 8008d22:	4602      	mov	r2, r0
 8008d24:	460b      	mov	r3, r1
 8008d26:	4680      	mov	r8, r0
 8008d28:	4689      	mov	r9, r1
 8008d2a:	4650      	mov	r0, sl
 8008d2c:	4659      	mov	r1, fp
 8008d2e:	f7f7 fa1b 	bl	8000168 <__aeabi_dsub>
 8008d32:	4632      	mov	r2, r6
 8008d34:	463b      	mov	r3, r7
 8008d36:	f7f7 fa17 	bl	8000168 <__aeabi_dsub>
 8008d3a:	a31b      	add	r3, pc, #108	; (adr r3, 8008da8 <__ieee754_rem_pio2+0x310>)
 8008d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d40:	4606      	mov	r6, r0
 8008d42:	460f      	mov	r7, r1
 8008d44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d48:	f7f7 fbc6 	bl	80004d8 <__aeabi_dmul>
 8008d4c:	4632      	mov	r2, r6
 8008d4e:	463b      	mov	r3, r7
 8008d50:	f7f7 fa0a 	bl	8000168 <__aeabi_dsub>
 8008d54:	4606      	mov	r6, r0
 8008d56:	460f      	mov	r7, r1
 8008d58:	e75e      	b.n	8008c18 <__ieee754_rem_pio2+0x180>
 8008d5a:	4a1b      	ldr	r2, [pc, #108]	; (8008dc8 <__ieee754_rem_pio2+0x330>)
 8008d5c:	4592      	cmp	sl, r2
 8008d5e:	dd35      	ble.n	8008dcc <__ieee754_rem_pio2+0x334>
 8008d60:	4602      	mov	r2, r0
 8008d62:	460b      	mov	r3, r1
 8008d64:	f7f7 fa00 	bl	8000168 <__aeabi_dsub>
 8008d68:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008d6c:	e9c4 0100 	strd	r0, r1, [r4]
 8008d70:	e6a2      	b.n	8008ab8 <__ieee754_rem_pio2+0x20>
 8008d72:	bf00      	nop
 8008d74:	f3af 8000 	nop.w
 8008d78:	54400000 	.word	0x54400000
 8008d7c:	3ff921fb 	.word	0x3ff921fb
 8008d80:	1a626331 	.word	0x1a626331
 8008d84:	3dd0b461 	.word	0x3dd0b461
 8008d88:	1a600000 	.word	0x1a600000
 8008d8c:	3dd0b461 	.word	0x3dd0b461
 8008d90:	2e037073 	.word	0x2e037073
 8008d94:	3ba3198a 	.word	0x3ba3198a
 8008d98:	6dc9c883 	.word	0x6dc9c883
 8008d9c:	3fe45f30 	.word	0x3fe45f30
 8008da0:	2e000000 	.word	0x2e000000
 8008da4:	3ba3198a 	.word	0x3ba3198a
 8008da8:	252049c1 	.word	0x252049c1
 8008dac:	397b839a 	.word	0x397b839a
 8008db0:	3fe921fb 	.word	0x3fe921fb
 8008db4:	4002d97b 	.word	0x4002d97b
 8008db8:	3ff921fb 	.word	0x3ff921fb
 8008dbc:	413921fb 	.word	0x413921fb
 8008dc0:	3fe00000 	.word	0x3fe00000
 8008dc4:	0800bdf8 	.word	0x0800bdf8
 8008dc8:	7fefffff 	.word	0x7fefffff
 8008dcc:	ea4f 552a 	mov.w	r5, sl, asr #20
 8008dd0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8008dd4:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8008dd8:	460f      	mov	r7, r1
 8008dda:	4606      	mov	r6, r0
 8008ddc:	f7f7 fe2c 	bl	8000a38 <__aeabi_d2iz>
 8008de0:	f7f7 fb10 	bl	8000404 <__aeabi_i2d>
 8008de4:	4602      	mov	r2, r0
 8008de6:	460b      	mov	r3, r1
 8008de8:	4630      	mov	r0, r6
 8008dea:	4639      	mov	r1, r7
 8008dec:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008df0:	f7f7 f9ba 	bl	8000168 <__aeabi_dsub>
 8008df4:	2200      	movs	r2, #0
 8008df6:	4b1e      	ldr	r3, [pc, #120]	; (8008e70 <__ieee754_rem_pio2+0x3d8>)
 8008df8:	f7f7 fb6e 	bl	80004d8 <__aeabi_dmul>
 8008dfc:	460f      	mov	r7, r1
 8008dfe:	4606      	mov	r6, r0
 8008e00:	f7f7 fe1a 	bl	8000a38 <__aeabi_d2iz>
 8008e04:	f7f7 fafe 	bl	8000404 <__aeabi_i2d>
 8008e08:	4602      	mov	r2, r0
 8008e0a:	460b      	mov	r3, r1
 8008e0c:	4630      	mov	r0, r6
 8008e0e:	4639      	mov	r1, r7
 8008e10:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008e14:	f7f7 f9a8 	bl	8000168 <__aeabi_dsub>
 8008e18:	2200      	movs	r2, #0
 8008e1a:	4b15      	ldr	r3, [pc, #84]	; (8008e70 <__ieee754_rem_pio2+0x3d8>)
 8008e1c:	f7f7 fb5c 	bl	80004d8 <__aeabi_dmul>
 8008e20:	f04f 0803 	mov.w	r8, #3
 8008e24:	2600      	movs	r6, #0
 8008e26:	2700      	movs	r7, #0
 8008e28:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008e2c:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8008e30:	4632      	mov	r2, r6
 8008e32:	e879 0102 	ldrd	r0, r1, [r9], #-8
 8008e36:	463b      	mov	r3, r7
 8008e38:	46c2      	mov	sl, r8
 8008e3a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8008e3e:	f7f7 fdb3 	bl	80009a8 <__aeabi_dcmpeq>
 8008e42:	2800      	cmp	r0, #0
 8008e44:	d1f4      	bne.n	8008e30 <__ieee754_rem_pio2+0x398>
 8008e46:	4b0b      	ldr	r3, [pc, #44]	; (8008e74 <__ieee754_rem_pio2+0x3dc>)
 8008e48:	462a      	mov	r2, r5
 8008e4a:	9301      	str	r3, [sp, #4]
 8008e4c:	2302      	movs	r3, #2
 8008e4e:	4621      	mov	r1, r4
 8008e50:	9300      	str	r3, [sp, #0]
 8008e52:	a806      	add	r0, sp, #24
 8008e54:	4653      	mov	r3, sl
 8008e56:	f000 f979 	bl	800914c <__kernel_rem_pio2>
 8008e5a:	9b04      	ldr	r3, [sp, #16]
 8008e5c:	4605      	mov	r5, r0
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	f6bf ae51 	bge.w	8008b06 <__ieee754_rem_pio2+0x6e>
 8008e64:	6863      	ldr	r3, [r4, #4]
 8008e66:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008e6a:	6063      	str	r3, [r4, #4]
 8008e6c:	68e3      	ldr	r3, [r4, #12]
 8008e6e:	e707      	b.n	8008c80 <__ieee754_rem_pio2+0x1e8>
 8008e70:	41700000 	.word	0x41700000
 8008e74:	0800be78 	.word	0x0800be78

08008e78 <__ieee754_sqrt>:
 8008e78:	f8df c150 	ldr.w	ip, [pc, #336]	; 8008fcc <__ieee754_sqrt+0x154>
 8008e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e80:	ea3c 0c01 	bics.w	ip, ip, r1
 8008e84:	460b      	mov	r3, r1
 8008e86:	4606      	mov	r6, r0
 8008e88:	460d      	mov	r5, r1
 8008e8a:	460a      	mov	r2, r1
 8008e8c:	4607      	mov	r7, r0
 8008e8e:	4604      	mov	r4, r0
 8008e90:	d10e      	bne.n	8008eb0 <__ieee754_sqrt+0x38>
 8008e92:	4602      	mov	r2, r0
 8008e94:	f7f7 fb20 	bl	80004d8 <__aeabi_dmul>
 8008e98:	4602      	mov	r2, r0
 8008e9a:	460b      	mov	r3, r1
 8008e9c:	4630      	mov	r0, r6
 8008e9e:	4629      	mov	r1, r5
 8008ea0:	f7f7 f964 	bl	800016c <__adddf3>
 8008ea4:	4606      	mov	r6, r0
 8008ea6:	460d      	mov	r5, r1
 8008ea8:	4630      	mov	r0, r6
 8008eaa:	4629      	mov	r1, r5
 8008eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008eb0:	2900      	cmp	r1, #0
 8008eb2:	dc0d      	bgt.n	8008ed0 <__ieee754_sqrt+0x58>
 8008eb4:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8008eb8:	ea5c 0707 	orrs.w	r7, ip, r7
 8008ebc:	d0f4      	beq.n	8008ea8 <__ieee754_sqrt+0x30>
 8008ebe:	b139      	cbz	r1, 8008ed0 <__ieee754_sqrt+0x58>
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	f7f7 f951 	bl	8000168 <__aeabi_dsub>
 8008ec6:	4602      	mov	r2, r0
 8008ec8:	460b      	mov	r3, r1
 8008eca:	f7f7 fc2f 	bl	800072c <__aeabi_ddiv>
 8008ece:	e7e9      	b.n	8008ea4 <__ieee754_sqrt+0x2c>
 8008ed0:	1512      	asrs	r2, r2, #20
 8008ed2:	d074      	beq.n	8008fbe <__ieee754_sqrt+0x146>
 8008ed4:	2000      	movs	r0, #0
 8008ed6:	07d5      	lsls	r5, r2, #31
 8008ed8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008edc:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 8008ee0:	bf5e      	ittt	pl
 8008ee2:	0fe3      	lsrpl	r3, r4, #31
 8008ee4:	0064      	lslpl	r4, r4, #1
 8008ee6:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 8008eea:	0fe3      	lsrs	r3, r4, #31
 8008eec:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8008ef0:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8008ef4:	2516      	movs	r5, #22
 8008ef6:	4601      	mov	r1, r0
 8008ef8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008efc:	1076      	asrs	r6, r6, #1
 8008efe:	0064      	lsls	r4, r4, #1
 8008f00:	188f      	adds	r7, r1, r2
 8008f02:	429f      	cmp	r7, r3
 8008f04:	bfde      	ittt	le
 8008f06:	1bdb      	suble	r3, r3, r7
 8008f08:	18b9      	addle	r1, r7, r2
 8008f0a:	1880      	addle	r0, r0, r2
 8008f0c:	005b      	lsls	r3, r3, #1
 8008f0e:	3d01      	subs	r5, #1
 8008f10:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8008f14:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8008f18:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8008f1c:	d1f0      	bne.n	8008f00 <__ieee754_sqrt+0x88>
 8008f1e:	462a      	mov	r2, r5
 8008f20:	f04f 0e20 	mov.w	lr, #32
 8008f24:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8008f28:	428b      	cmp	r3, r1
 8008f2a:	eb07 0c05 	add.w	ip, r7, r5
 8008f2e:	dc02      	bgt.n	8008f36 <__ieee754_sqrt+0xbe>
 8008f30:	d113      	bne.n	8008f5a <__ieee754_sqrt+0xe2>
 8008f32:	45a4      	cmp	ip, r4
 8008f34:	d811      	bhi.n	8008f5a <__ieee754_sqrt+0xe2>
 8008f36:	f1bc 0f00 	cmp.w	ip, #0
 8008f3a:	eb0c 0507 	add.w	r5, ip, r7
 8008f3e:	da43      	bge.n	8008fc8 <__ieee754_sqrt+0x150>
 8008f40:	2d00      	cmp	r5, #0
 8008f42:	db41      	blt.n	8008fc8 <__ieee754_sqrt+0x150>
 8008f44:	f101 0801 	add.w	r8, r1, #1
 8008f48:	1a5b      	subs	r3, r3, r1
 8008f4a:	4641      	mov	r1, r8
 8008f4c:	45a4      	cmp	ip, r4
 8008f4e:	bf88      	it	hi
 8008f50:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 8008f54:	eba4 040c 	sub.w	r4, r4, ip
 8008f58:	443a      	add	r2, r7
 8008f5a:	005b      	lsls	r3, r3, #1
 8008f5c:	f1be 0e01 	subs.w	lr, lr, #1
 8008f60:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8008f64:	ea4f 0757 	mov.w	r7, r7, lsr #1
 8008f68:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8008f6c:	d1dc      	bne.n	8008f28 <__ieee754_sqrt+0xb0>
 8008f6e:	4323      	orrs	r3, r4
 8008f70:	d006      	beq.n	8008f80 <__ieee754_sqrt+0x108>
 8008f72:	1c54      	adds	r4, r2, #1
 8008f74:	bf0b      	itete	eq
 8008f76:	4672      	moveq	r2, lr
 8008f78:	3201      	addne	r2, #1
 8008f7a:	3001      	addeq	r0, #1
 8008f7c:	f022 0201 	bicne.w	r2, r2, #1
 8008f80:	1043      	asrs	r3, r0, #1
 8008f82:	07c1      	lsls	r1, r0, #31
 8008f84:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8008f88:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008f8c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008f90:	bf48      	it	mi
 8008f92:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8008f96:	4610      	mov	r0, r2
 8008f98:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8008f9c:	e782      	b.n	8008ea4 <__ieee754_sqrt+0x2c>
 8008f9e:	0ae3      	lsrs	r3, r4, #11
 8008fa0:	3915      	subs	r1, #21
 8008fa2:	0564      	lsls	r4, r4, #21
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d0fa      	beq.n	8008f9e <__ieee754_sqrt+0x126>
 8008fa8:	02de      	lsls	r6, r3, #11
 8008faa:	d50a      	bpl.n	8008fc2 <__ieee754_sqrt+0x14a>
 8008fac:	f1c2 0020 	rsb	r0, r2, #32
 8008fb0:	fa24 f000 	lsr.w	r0, r4, r0
 8008fb4:	1e55      	subs	r5, r2, #1
 8008fb6:	4094      	lsls	r4, r2
 8008fb8:	4303      	orrs	r3, r0
 8008fba:	1b4a      	subs	r2, r1, r5
 8008fbc:	e78a      	b.n	8008ed4 <__ieee754_sqrt+0x5c>
 8008fbe:	4611      	mov	r1, r2
 8008fc0:	e7f0      	b.n	8008fa4 <__ieee754_sqrt+0x12c>
 8008fc2:	005b      	lsls	r3, r3, #1
 8008fc4:	3201      	adds	r2, #1
 8008fc6:	e7ef      	b.n	8008fa8 <__ieee754_sqrt+0x130>
 8008fc8:	4688      	mov	r8, r1
 8008fca:	e7bd      	b.n	8008f48 <__ieee754_sqrt+0xd0>
 8008fcc:	7ff00000 	.word	0x7ff00000

08008fd0 <__kernel_cos>:
 8008fd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fd4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008fd8:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8008fdc:	4680      	mov	r8, r0
 8008fde:	460f      	mov	r7, r1
 8008fe0:	e9cd 2300 	strd	r2, r3, [sp]
 8008fe4:	da04      	bge.n	8008ff0 <__kernel_cos+0x20>
 8008fe6:	f7f7 fd27 	bl	8000a38 <__aeabi_d2iz>
 8008fea:	2800      	cmp	r0, #0
 8008fec:	f000 8086 	beq.w	80090fc <__kernel_cos+0x12c>
 8008ff0:	4642      	mov	r2, r8
 8008ff2:	463b      	mov	r3, r7
 8008ff4:	4640      	mov	r0, r8
 8008ff6:	4639      	mov	r1, r7
 8008ff8:	f7f7 fa6e 	bl	80004d8 <__aeabi_dmul>
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	4b4e      	ldr	r3, [pc, #312]	; (8009138 <__kernel_cos+0x168>)
 8009000:	4604      	mov	r4, r0
 8009002:	460d      	mov	r5, r1
 8009004:	f7f7 fa68 	bl	80004d8 <__aeabi_dmul>
 8009008:	a33f      	add	r3, pc, #252	; (adr r3, 8009108 <__kernel_cos+0x138>)
 800900a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800900e:	4682      	mov	sl, r0
 8009010:	468b      	mov	fp, r1
 8009012:	4620      	mov	r0, r4
 8009014:	4629      	mov	r1, r5
 8009016:	f7f7 fa5f 	bl	80004d8 <__aeabi_dmul>
 800901a:	a33d      	add	r3, pc, #244	; (adr r3, 8009110 <__kernel_cos+0x140>)
 800901c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009020:	f7f7 f8a4 	bl	800016c <__adddf3>
 8009024:	4622      	mov	r2, r4
 8009026:	462b      	mov	r3, r5
 8009028:	f7f7 fa56 	bl	80004d8 <__aeabi_dmul>
 800902c:	a33a      	add	r3, pc, #232	; (adr r3, 8009118 <__kernel_cos+0x148>)
 800902e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009032:	f7f7 f899 	bl	8000168 <__aeabi_dsub>
 8009036:	4622      	mov	r2, r4
 8009038:	462b      	mov	r3, r5
 800903a:	f7f7 fa4d 	bl	80004d8 <__aeabi_dmul>
 800903e:	a338      	add	r3, pc, #224	; (adr r3, 8009120 <__kernel_cos+0x150>)
 8009040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009044:	f7f7 f892 	bl	800016c <__adddf3>
 8009048:	4622      	mov	r2, r4
 800904a:	462b      	mov	r3, r5
 800904c:	f7f7 fa44 	bl	80004d8 <__aeabi_dmul>
 8009050:	a335      	add	r3, pc, #212	; (adr r3, 8009128 <__kernel_cos+0x158>)
 8009052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009056:	f7f7 f887 	bl	8000168 <__aeabi_dsub>
 800905a:	4622      	mov	r2, r4
 800905c:	462b      	mov	r3, r5
 800905e:	f7f7 fa3b 	bl	80004d8 <__aeabi_dmul>
 8009062:	a333      	add	r3, pc, #204	; (adr r3, 8009130 <__kernel_cos+0x160>)
 8009064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009068:	f7f7 f880 	bl	800016c <__adddf3>
 800906c:	4622      	mov	r2, r4
 800906e:	462b      	mov	r3, r5
 8009070:	f7f7 fa32 	bl	80004d8 <__aeabi_dmul>
 8009074:	4622      	mov	r2, r4
 8009076:	462b      	mov	r3, r5
 8009078:	f7f7 fa2e 	bl	80004d8 <__aeabi_dmul>
 800907c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009080:	4604      	mov	r4, r0
 8009082:	460d      	mov	r5, r1
 8009084:	4640      	mov	r0, r8
 8009086:	4639      	mov	r1, r7
 8009088:	f7f7 fa26 	bl	80004d8 <__aeabi_dmul>
 800908c:	460b      	mov	r3, r1
 800908e:	4602      	mov	r2, r0
 8009090:	4629      	mov	r1, r5
 8009092:	4620      	mov	r0, r4
 8009094:	f7f7 f868 	bl	8000168 <__aeabi_dsub>
 8009098:	4b28      	ldr	r3, [pc, #160]	; (800913c <__kernel_cos+0x16c>)
 800909a:	4680      	mov	r8, r0
 800909c:	429e      	cmp	r6, r3
 800909e:	4689      	mov	r9, r1
 80090a0:	dc0e      	bgt.n	80090c0 <__kernel_cos+0xf0>
 80090a2:	4602      	mov	r2, r0
 80090a4:	460b      	mov	r3, r1
 80090a6:	4650      	mov	r0, sl
 80090a8:	4659      	mov	r1, fp
 80090aa:	f7f7 f85d 	bl	8000168 <__aeabi_dsub>
 80090ae:	4602      	mov	r2, r0
 80090b0:	2000      	movs	r0, #0
 80090b2:	460b      	mov	r3, r1
 80090b4:	4922      	ldr	r1, [pc, #136]	; (8009140 <__kernel_cos+0x170>)
 80090b6:	f7f7 f857 	bl	8000168 <__aeabi_dsub>
 80090ba:	b003      	add	sp, #12
 80090bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090c0:	2400      	movs	r4, #0
 80090c2:	4b20      	ldr	r3, [pc, #128]	; (8009144 <__kernel_cos+0x174>)
 80090c4:	4622      	mov	r2, r4
 80090c6:	429e      	cmp	r6, r3
 80090c8:	bfcc      	ite	gt
 80090ca:	4d1f      	ldrgt	r5, [pc, #124]	; (8009148 <__kernel_cos+0x178>)
 80090cc:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80090d0:	462b      	mov	r3, r5
 80090d2:	2000      	movs	r0, #0
 80090d4:	491a      	ldr	r1, [pc, #104]	; (8009140 <__kernel_cos+0x170>)
 80090d6:	f7f7 f847 	bl	8000168 <__aeabi_dsub>
 80090da:	4622      	mov	r2, r4
 80090dc:	4606      	mov	r6, r0
 80090de:	460f      	mov	r7, r1
 80090e0:	462b      	mov	r3, r5
 80090e2:	4650      	mov	r0, sl
 80090e4:	4659      	mov	r1, fp
 80090e6:	f7f7 f83f 	bl	8000168 <__aeabi_dsub>
 80090ea:	4642      	mov	r2, r8
 80090ec:	464b      	mov	r3, r9
 80090ee:	f7f7 f83b 	bl	8000168 <__aeabi_dsub>
 80090f2:	4602      	mov	r2, r0
 80090f4:	460b      	mov	r3, r1
 80090f6:	4630      	mov	r0, r6
 80090f8:	4639      	mov	r1, r7
 80090fa:	e7dc      	b.n	80090b6 <__kernel_cos+0xe6>
 80090fc:	2000      	movs	r0, #0
 80090fe:	4910      	ldr	r1, [pc, #64]	; (8009140 <__kernel_cos+0x170>)
 8009100:	e7db      	b.n	80090ba <__kernel_cos+0xea>
 8009102:	bf00      	nop
 8009104:	f3af 8000 	nop.w
 8009108:	be8838d4 	.word	0xbe8838d4
 800910c:	bda8fae9 	.word	0xbda8fae9
 8009110:	bdb4b1c4 	.word	0xbdb4b1c4
 8009114:	3e21ee9e 	.word	0x3e21ee9e
 8009118:	809c52ad 	.word	0x809c52ad
 800911c:	3e927e4f 	.word	0x3e927e4f
 8009120:	19cb1590 	.word	0x19cb1590
 8009124:	3efa01a0 	.word	0x3efa01a0
 8009128:	16c15177 	.word	0x16c15177
 800912c:	3f56c16c 	.word	0x3f56c16c
 8009130:	5555554c 	.word	0x5555554c
 8009134:	3fa55555 	.word	0x3fa55555
 8009138:	3fe00000 	.word	0x3fe00000
 800913c:	3fd33332 	.word	0x3fd33332
 8009140:	3ff00000 	.word	0x3ff00000
 8009144:	3fe90000 	.word	0x3fe90000
 8009148:	3fd20000 	.word	0x3fd20000

0800914c <__kernel_rem_pio2>:
 800914c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009150:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8009154:	9308      	str	r3, [sp, #32]
 8009156:	9101      	str	r1, [sp, #4]
 8009158:	4bc0      	ldr	r3, [pc, #768]	; (800945c <__kernel_rem_pio2+0x310>)
 800915a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800915c:	f112 0f14 	cmn.w	r2, #20
 8009160:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009164:	bfa8      	it	ge
 8009166:	1ed4      	subge	r4, r2, #3
 8009168:	9304      	str	r3, [sp, #16]
 800916a:	9b08      	ldr	r3, [sp, #32]
 800916c:	bfb8      	it	lt
 800916e:	2400      	movlt	r4, #0
 8009170:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8009174:	9306      	str	r3, [sp, #24]
 8009176:	bfa4      	itt	ge
 8009178:	2318      	movge	r3, #24
 800917a:	fb94 f4f3 	sdivge	r4, r4, r3
 800917e:	f06f 0317 	mvn.w	r3, #23
 8009182:	fb04 3303 	mla	r3, r4, r3, r3
 8009186:	eb03 0a02 	add.w	sl, r3, r2
 800918a:	9a06      	ldr	r2, [sp, #24]
 800918c:	9b04      	ldr	r3, [sp, #16]
 800918e:	1aa7      	subs	r7, r4, r2
 8009190:	eb03 0802 	add.w	r8, r3, r2
 8009194:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8009196:	2500      	movs	r5, #0
 8009198:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800919c:	2200      	movs	r2, #0
 800919e:	2300      	movs	r3, #0
 80091a0:	9009      	str	r0, [sp, #36]	; 0x24
 80091a2:	ae20      	add	r6, sp, #128	; 0x80
 80091a4:	4545      	cmp	r5, r8
 80091a6:	dd19      	ble.n	80091dc <__kernel_rem_pio2+0x90>
 80091a8:	9b08      	ldr	r3, [sp, #32]
 80091aa:	aa20      	add	r2, sp, #128	; 0x80
 80091ac:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80091b0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80091b4:	f1c3 0301 	rsb	r3, r3, #1
 80091b8:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80091bc:	9307      	str	r3, [sp, #28]
 80091be:	9b07      	ldr	r3, [sp, #28]
 80091c0:	9a04      	ldr	r2, [sp, #16]
 80091c2:	4443      	add	r3, r8
 80091c4:	429a      	cmp	r2, r3
 80091c6:	db35      	blt.n	8009234 <__kernel_rem_pio2+0xe8>
 80091c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091ca:	2200      	movs	r2, #0
 80091cc:	f1a3 0908 	sub.w	r9, r3, #8
 80091d0:	2300      	movs	r3, #0
 80091d2:	462f      	mov	r7, r5
 80091d4:	2600      	movs	r6, #0
 80091d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80091da:	e01f      	b.n	800921c <__kernel_rem_pio2+0xd0>
 80091dc:	42ef      	cmn	r7, r5
 80091de:	d40b      	bmi.n	80091f8 <__kernel_rem_pio2+0xac>
 80091e0:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80091e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80091e8:	f7f7 f90c 	bl	8000404 <__aeabi_i2d>
 80091ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80091f0:	e8e6 0102 	strd	r0, r1, [r6], #8
 80091f4:	3501      	adds	r5, #1
 80091f6:	e7d5      	b.n	80091a4 <__kernel_rem_pio2+0x58>
 80091f8:	4610      	mov	r0, r2
 80091fa:	4619      	mov	r1, r3
 80091fc:	e7f8      	b.n	80091f0 <__kernel_rem_pio2+0xa4>
 80091fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009202:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8009206:	f7f7 f967 	bl	80004d8 <__aeabi_dmul>
 800920a:	4602      	mov	r2, r0
 800920c:	460b      	mov	r3, r1
 800920e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009212:	f7f6 ffab 	bl	800016c <__adddf3>
 8009216:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800921a:	3601      	adds	r6, #1
 800921c:	9b06      	ldr	r3, [sp, #24]
 800921e:	3f08      	subs	r7, #8
 8009220:	429e      	cmp	r6, r3
 8009222:	ddec      	ble.n	80091fe <__kernel_rem_pio2+0xb2>
 8009224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009228:	3508      	adds	r5, #8
 800922a:	e8eb 2302 	strd	r2, r3, [fp], #8
 800922e:	f108 0801 	add.w	r8, r8, #1
 8009232:	e7c4      	b.n	80091be <__kernel_rem_pio2+0x72>
 8009234:	9b04      	ldr	r3, [sp, #16]
 8009236:	aa0c      	add	r2, sp, #48	; 0x30
 8009238:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800923c:	930b      	str	r3, [sp, #44]	; 0x2c
 800923e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8009240:	9f04      	ldr	r7, [sp, #16]
 8009242:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009246:	930a      	str	r3, [sp, #40]	; 0x28
 8009248:	463e      	mov	r6, r7
 800924a:	ab98      	add	r3, sp, #608	; 0x260
 800924c:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8009250:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009254:	f8cd b008 	str.w	fp, [sp, #8]
 8009258:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800925c:	2e00      	cmp	r6, #0
 800925e:	dc71      	bgt.n	8009344 <__kernel_rem_pio2+0x1f8>
 8009260:	4652      	mov	r2, sl
 8009262:	4620      	mov	r0, r4
 8009264:	4629      	mov	r1, r5
 8009266:	f000 fd83 	bl	8009d70 <scalbn>
 800926a:	2200      	movs	r2, #0
 800926c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8009270:	4604      	mov	r4, r0
 8009272:	460d      	mov	r5, r1
 8009274:	f7f7 f930 	bl	80004d8 <__aeabi_dmul>
 8009278:	f000 fcfa 	bl	8009c70 <floor>
 800927c:	2200      	movs	r2, #0
 800927e:	4b78      	ldr	r3, [pc, #480]	; (8009460 <__kernel_rem_pio2+0x314>)
 8009280:	f7f7 f92a 	bl	80004d8 <__aeabi_dmul>
 8009284:	4602      	mov	r2, r0
 8009286:	460b      	mov	r3, r1
 8009288:	4620      	mov	r0, r4
 800928a:	4629      	mov	r1, r5
 800928c:	f7f6 ff6c 	bl	8000168 <__aeabi_dsub>
 8009290:	460d      	mov	r5, r1
 8009292:	4604      	mov	r4, r0
 8009294:	f7f7 fbd0 	bl	8000a38 <__aeabi_d2iz>
 8009298:	9007      	str	r0, [sp, #28]
 800929a:	f7f7 f8b3 	bl	8000404 <__aeabi_i2d>
 800929e:	4602      	mov	r2, r0
 80092a0:	460b      	mov	r3, r1
 80092a2:	4620      	mov	r0, r4
 80092a4:	4629      	mov	r1, r5
 80092a6:	f7f6 ff5f 	bl	8000168 <__aeabi_dsub>
 80092aa:	f1ba 0f00 	cmp.w	sl, #0
 80092ae:	4680      	mov	r8, r0
 80092b0:	4689      	mov	r9, r1
 80092b2:	dd70      	ble.n	8009396 <__kernel_rem_pio2+0x24a>
 80092b4:	1e7a      	subs	r2, r7, #1
 80092b6:	ab0c      	add	r3, sp, #48	; 0x30
 80092b8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80092bc:	9c07      	ldr	r4, [sp, #28]
 80092be:	f1ca 0118 	rsb	r1, sl, #24
 80092c2:	fa40 f301 	asr.w	r3, r0, r1
 80092c6:	441c      	add	r4, r3
 80092c8:	408b      	lsls	r3, r1
 80092ca:	1ac0      	subs	r0, r0, r3
 80092cc:	ab0c      	add	r3, sp, #48	; 0x30
 80092ce:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80092d2:	f1ca 0317 	rsb	r3, sl, #23
 80092d6:	9407      	str	r4, [sp, #28]
 80092d8:	fa40 f303 	asr.w	r3, r0, r3
 80092dc:	9302      	str	r3, [sp, #8]
 80092de:	9b02      	ldr	r3, [sp, #8]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	dd66      	ble.n	80093b2 <__kernel_rem_pio2+0x266>
 80092e4:	2200      	movs	r2, #0
 80092e6:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80092ea:	4614      	mov	r4, r2
 80092ec:	9b07      	ldr	r3, [sp, #28]
 80092ee:	3301      	adds	r3, #1
 80092f0:	9307      	str	r3, [sp, #28]
 80092f2:	4297      	cmp	r7, r2
 80092f4:	f300 809f 	bgt.w	8009436 <__kernel_rem_pio2+0x2ea>
 80092f8:	f1ba 0f00 	cmp.w	sl, #0
 80092fc:	dd07      	ble.n	800930e <__kernel_rem_pio2+0x1c2>
 80092fe:	f1ba 0f01 	cmp.w	sl, #1
 8009302:	f000 80b9 	beq.w	8009478 <__kernel_rem_pio2+0x32c>
 8009306:	f1ba 0f02 	cmp.w	sl, #2
 800930a:	f000 80bf 	beq.w	800948c <__kernel_rem_pio2+0x340>
 800930e:	9b02      	ldr	r3, [sp, #8]
 8009310:	2b02      	cmp	r3, #2
 8009312:	d14e      	bne.n	80093b2 <__kernel_rem_pio2+0x266>
 8009314:	4642      	mov	r2, r8
 8009316:	464b      	mov	r3, r9
 8009318:	2000      	movs	r0, #0
 800931a:	4952      	ldr	r1, [pc, #328]	; (8009464 <__kernel_rem_pio2+0x318>)
 800931c:	f7f6 ff24 	bl	8000168 <__aeabi_dsub>
 8009320:	4680      	mov	r8, r0
 8009322:	4689      	mov	r9, r1
 8009324:	2c00      	cmp	r4, #0
 8009326:	d044      	beq.n	80093b2 <__kernel_rem_pio2+0x266>
 8009328:	4652      	mov	r2, sl
 800932a:	2000      	movs	r0, #0
 800932c:	494d      	ldr	r1, [pc, #308]	; (8009464 <__kernel_rem_pio2+0x318>)
 800932e:	f000 fd1f 	bl	8009d70 <scalbn>
 8009332:	4602      	mov	r2, r0
 8009334:	460b      	mov	r3, r1
 8009336:	4640      	mov	r0, r8
 8009338:	4649      	mov	r1, r9
 800933a:	f7f6 ff15 	bl	8000168 <__aeabi_dsub>
 800933e:	4680      	mov	r8, r0
 8009340:	4689      	mov	r9, r1
 8009342:	e036      	b.n	80093b2 <__kernel_rem_pio2+0x266>
 8009344:	2200      	movs	r2, #0
 8009346:	4b48      	ldr	r3, [pc, #288]	; (8009468 <__kernel_rem_pio2+0x31c>)
 8009348:	4620      	mov	r0, r4
 800934a:	4629      	mov	r1, r5
 800934c:	f7f7 f8c4 	bl	80004d8 <__aeabi_dmul>
 8009350:	f7f7 fb72 	bl	8000a38 <__aeabi_d2iz>
 8009354:	f7f7 f856 	bl	8000404 <__aeabi_i2d>
 8009358:	2200      	movs	r2, #0
 800935a:	4b44      	ldr	r3, [pc, #272]	; (800946c <__kernel_rem_pio2+0x320>)
 800935c:	4680      	mov	r8, r0
 800935e:	4689      	mov	r9, r1
 8009360:	f7f7 f8ba 	bl	80004d8 <__aeabi_dmul>
 8009364:	4602      	mov	r2, r0
 8009366:	460b      	mov	r3, r1
 8009368:	4620      	mov	r0, r4
 800936a:	4629      	mov	r1, r5
 800936c:	f7f6 fefc 	bl	8000168 <__aeabi_dsub>
 8009370:	f7f7 fb62 	bl	8000a38 <__aeabi_d2iz>
 8009374:	9b02      	ldr	r3, [sp, #8]
 8009376:	3e01      	subs	r6, #1
 8009378:	f843 0b04 	str.w	r0, [r3], #4
 800937c:	9302      	str	r3, [sp, #8]
 800937e:	ab70      	add	r3, sp, #448	; 0x1c0
 8009380:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009384:	4640      	mov	r0, r8
 8009386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800938a:	4649      	mov	r1, r9
 800938c:	f7f6 feee 	bl	800016c <__adddf3>
 8009390:	4604      	mov	r4, r0
 8009392:	460d      	mov	r5, r1
 8009394:	e762      	b.n	800925c <__kernel_rem_pio2+0x110>
 8009396:	d105      	bne.n	80093a4 <__kernel_rem_pio2+0x258>
 8009398:	1e7b      	subs	r3, r7, #1
 800939a:	aa0c      	add	r2, sp, #48	; 0x30
 800939c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80093a0:	15c3      	asrs	r3, r0, #23
 80093a2:	e79b      	b.n	80092dc <__kernel_rem_pio2+0x190>
 80093a4:	2200      	movs	r2, #0
 80093a6:	4b32      	ldr	r3, [pc, #200]	; (8009470 <__kernel_rem_pio2+0x324>)
 80093a8:	f7f7 fb1c 	bl	80009e4 <__aeabi_dcmpge>
 80093ac:	2800      	cmp	r0, #0
 80093ae:	d13f      	bne.n	8009430 <__kernel_rem_pio2+0x2e4>
 80093b0:	9002      	str	r0, [sp, #8]
 80093b2:	2200      	movs	r2, #0
 80093b4:	2300      	movs	r3, #0
 80093b6:	4640      	mov	r0, r8
 80093b8:	4649      	mov	r1, r9
 80093ba:	f7f7 faf5 	bl	80009a8 <__aeabi_dcmpeq>
 80093be:	2800      	cmp	r0, #0
 80093c0:	f000 80b5 	beq.w	800952e <__kernel_rem_pio2+0x3e2>
 80093c4:	1e7c      	subs	r4, r7, #1
 80093c6:	4623      	mov	r3, r4
 80093c8:	2200      	movs	r2, #0
 80093ca:	9904      	ldr	r1, [sp, #16]
 80093cc:	428b      	cmp	r3, r1
 80093ce:	da64      	bge.n	800949a <__kernel_rem_pio2+0x34e>
 80093d0:	2a00      	cmp	r2, #0
 80093d2:	d078      	beq.n	80094c6 <__kernel_rem_pio2+0x37a>
 80093d4:	ab0c      	add	r3, sp, #48	; 0x30
 80093d6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80093da:	f1aa 0a18 	sub.w	sl, sl, #24
 80093de:	2b00      	cmp	r3, #0
 80093e0:	f000 80a3 	beq.w	800952a <__kernel_rem_pio2+0x3de>
 80093e4:	4652      	mov	r2, sl
 80093e6:	2000      	movs	r0, #0
 80093e8:	491e      	ldr	r1, [pc, #120]	; (8009464 <__kernel_rem_pio2+0x318>)
 80093ea:	f000 fcc1 	bl	8009d70 <scalbn>
 80093ee:	46a2      	mov	sl, r4
 80093f0:	4606      	mov	r6, r0
 80093f2:	460f      	mov	r7, r1
 80093f4:	f04f 0800 	mov.w	r8, #0
 80093f8:	00e3      	lsls	r3, r4, #3
 80093fa:	9306      	str	r3, [sp, #24]
 80093fc:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8009468 <__kernel_rem_pio2+0x31c>
 8009400:	ab70      	add	r3, sp, #448	; 0x1c0
 8009402:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8009406:	f1ba 0f00 	cmp.w	sl, #0
 800940a:	f280 80c6 	bge.w	800959a <__kernel_rem_pio2+0x44e>
 800940e:	4627      	mov	r7, r4
 8009410:	f04f 0800 	mov.w	r8, #0
 8009414:	2f00      	cmp	r7, #0
 8009416:	f2c0 80f3 	blt.w	8009600 <__kernel_rem_pio2+0x4b4>
 800941a:	4b16      	ldr	r3, [pc, #88]	; (8009474 <__kernel_rem_pio2+0x328>)
 800941c:	f04f 0a00 	mov.w	sl, #0
 8009420:	461d      	mov	r5, r3
 8009422:	ab70      	add	r3, sp, #448	; 0x1c0
 8009424:	f04f 0b00 	mov.w	fp, #0
 8009428:	2600      	movs	r6, #0
 800942a:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800942e:	e0d9      	b.n	80095e4 <__kernel_rem_pio2+0x498>
 8009430:	2302      	movs	r3, #2
 8009432:	9302      	str	r3, [sp, #8]
 8009434:	e756      	b.n	80092e4 <__kernel_rem_pio2+0x198>
 8009436:	f8db 3000 	ldr.w	r3, [fp]
 800943a:	b954      	cbnz	r4, 8009452 <__kernel_rem_pio2+0x306>
 800943c:	b123      	cbz	r3, 8009448 <__kernel_rem_pio2+0x2fc>
 800943e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8009442:	f8cb 3000 	str.w	r3, [fp]
 8009446:	2301      	movs	r3, #1
 8009448:	461c      	mov	r4, r3
 800944a:	3201      	adds	r2, #1
 800944c:	f10b 0b04 	add.w	fp, fp, #4
 8009450:	e74f      	b.n	80092f2 <__kernel_rem_pio2+0x1a6>
 8009452:	1acb      	subs	r3, r1, r3
 8009454:	f8cb 3000 	str.w	r3, [fp]
 8009458:	4623      	mov	r3, r4
 800945a:	e7f5      	b.n	8009448 <__kernel_rem_pio2+0x2fc>
 800945c:	0800bfc0 	.word	0x0800bfc0
 8009460:	40200000 	.word	0x40200000
 8009464:	3ff00000 	.word	0x3ff00000
 8009468:	3e700000 	.word	0x3e700000
 800946c:	41700000 	.word	0x41700000
 8009470:	3fe00000 	.word	0x3fe00000
 8009474:	0800bf80 	.word	0x0800bf80
 8009478:	1e7a      	subs	r2, r7, #1
 800947a:	ab0c      	add	r3, sp, #48	; 0x30
 800947c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009480:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009484:	a90c      	add	r1, sp, #48	; 0x30
 8009486:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800948a:	e740      	b.n	800930e <__kernel_rem_pio2+0x1c2>
 800948c:	1e7a      	subs	r2, r7, #1
 800948e:	ab0c      	add	r3, sp, #48	; 0x30
 8009490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009494:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009498:	e7f4      	b.n	8009484 <__kernel_rem_pio2+0x338>
 800949a:	a90c      	add	r1, sp, #48	; 0x30
 800949c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80094a0:	3b01      	subs	r3, #1
 80094a2:	430a      	orrs	r2, r1
 80094a4:	e791      	b.n	80093ca <__kernel_rem_pio2+0x27e>
 80094a6:	3401      	adds	r4, #1
 80094a8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80094ac:	2a00      	cmp	r2, #0
 80094ae:	d0fa      	beq.n	80094a6 <__kernel_rem_pio2+0x35a>
 80094b0:	9b08      	ldr	r3, [sp, #32]
 80094b2:	1c7e      	adds	r6, r7, #1
 80094b4:	18fd      	adds	r5, r7, r3
 80094b6:	ab20      	add	r3, sp, #128	; 0x80
 80094b8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80094bc:	443c      	add	r4, r7
 80094be:	42b4      	cmp	r4, r6
 80094c0:	da04      	bge.n	80094cc <__kernel_rem_pio2+0x380>
 80094c2:	4627      	mov	r7, r4
 80094c4:	e6c0      	b.n	8009248 <__kernel_rem_pio2+0xfc>
 80094c6:	2401      	movs	r4, #1
 80094c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094ca:	e7ed      	b.n	80094a8 <__kernel_rem_pio2+0x35c>
 80094cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094ce:	462f      	mov	r7, r5
 80094d0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80094d4:	f7f6 ff96 	bl	8000404 <__aeabi_i2d>
 80094d8:	f04f 0b00 	mov.w	fp, #0
 80094dc:	f04f 0800 	mov.w	r8, #0
 80094e0:	f04f 0900 	mov.w	r9, #0
 80094e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094e6:	e8e7 0102 	strd	r0, r1, [r7], #8
 80094ea:	3b08      	subs	r3, #8
 80094ec:	9302      	str	r3, [sp, #8]
 80094ee:	9b06      	ldr	r3, [sp, #24]
 80094f0:	459b      	cmp	fp, r3
 80094f2:	dd07      	ble.n	8009504 <__kernel_rem_pio2+0x3b8>
 80094f4:	ab70      	add	r3, sp, #448	; 0x1c0
 80094f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80094fa:	463d      	mov	r5, r7
 80094fc:	e9c3 8900 	strd	r8, r9, [r3]
 8009500:	3601      	adds	r6, #1
 8009502:	e7dc      	b.n	80094be <__kernel_rem_pio2+0x372>
 8009504:	9902      	ldr	r1, [sp, #8]
 8009506:	f10b 0b01 	add.w	fp, fp, #1
 800950a:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800950e:	9102      	str	r1, [sp, #8]
 8009510:	e875 0102 	ldrd	r0, r1, [r5], #-8
 8009514:	f7f6 ffe0 	bl	80004d8 <__aeabi_dmul>
 8009518:	4602      	mov	r2, r0
 800951a:	460b      	mov	r3, r1
 800951c:	4640      	mov	r0, r8
 800951e:	4649      	mov	r1, r9
 8009520:	f7f6 fe24 	bl	800016c <__adddf3>
 8009524:	4680      	mov	r8, r0
 8009526:	4689      	mov	r9, r1
 8009528:	e7e1      	b.n	80094ee <__kernel_rem_pio2+0x3a2>
 800952a:	3c01      	subs	r4, #1
 800952c:	e752      	b.n	80093d4 <__kernel_rem_pio2+0x288>
 800952e:	f1ca 0200 	rsb	r2, sl, #0
 8009532:	4640      	mov	r0, r8
 8009534:	4649      	mov	r1, r9
 8009536:	f000 fc1b 	bl	8009d70 <scalbn>
 800953a:	2200      	movs	r2, #0
 800953c:	4ba5      	ldr	r3, [pc, #660]	; (80097d4 <__kernel_rem_pio2+0x688>)
 800953e:	4604      	mov	r4, r0
 8009540:	460d      	mov	r5, r1
 8009542:	f7f7 fa4f 	bl	80009e4 <__aeabi_dcmpge>
 8009546:	b1f8      	cbz	r0, 8009588 <__kernel_rem_pio2+0x43c>
 8009548:	2200      	movs	r2, #0
 800954a:	4ba3      	ldr	r3, [pc, #652]	; (80097d8 <__kernel_rem_pio2+0x68c>)
 800954c:	4620      	mov	r0, r4
 800954e:	4629      	mov	r1, r5
 8009550:	f7f6 ffc2 	bl	80004d8 <__aeabi_dmul>
 8009554:	f7f7 fa70 	bl	8000a38 <__aeabi_d2iz>
 8009558:	4606      	mov	r6, r0
 800955a:	f7f6 ff53 	bl	8000404 <__aeabi_i2d>
 800955e:	2200      	movs	r2, #0
 8009560:	4b9c      	ldr	r3, [pc, #624]	; (80097d4 <__kernel_rem_pio2+0x688>)
 8009562:	f7f6 ffb9 	bl	80004d8 <__aeabi_dmul>
 8009566:	460b      	mov	r3, r1
 8009568:	4602      	mov	r2, r0
 800956a:	4629      	mov	r1, r5
 800956c:	4620      	mov	r0, r4
 800956e:	f7f6 fdfb 	bl	8000168 <__aeabi_dsub>
 8009572:	f7f7 fa61 	bl	8000a38 <__aeabi_d2iz>
 8009576:	1c7c      	adds	r4, r7, #1
 8009578:	ab0c      	add	r3, sp, #48	; 0x30
 800957a:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800957e:	f10a 0a18 	add.w	sl, sl, #24
 8009582:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 8009586:	e72d      	b.n	80093e4 <__kernel_rem_pio2+0x298>
 8009588:	4620      	mov	r0, r4
 800958a:	4629      	mov	r1, r5
 800958c:	f7f7 fa54 	bl	8000a38 <__aeabi_d2iz>
 8009590:	ab0c      	add	r3, sp, #48	; 0x30
 8009592:	463c      	mov	r4, r7
 8009594:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8009598:	e724      	b.n	80093e4 <__kernel_rem_pio2+0x298>
 800959a:	ab0c      	add	r3, sp, #48	; 0x30
 800959c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80095a0:	f7f6 ff30 	bl	8000404 <__aeabi_i2d>
 80095a4:	4632      	mov	r2, r6
 80095a6:	463b      	mov	r3, r7
 80095a8:	f7f6 ff96 	bl	80004d8 <__aeabi_dmul>
 80095ac:	4642      	mov	r2, r8
 80095ae:	e86b 0102 	strd	r0, r1, [fp], #-8
 80095b2:	464b      	mov	r3, r9
 80095b4:	4630      	mov	r0, r6
 80095b6:	4639      	mov	r1, r7
 80095b8:	f7f6 ff8e 	bl	80004d8 <__aeabi_dmul>
 80095bc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80095c0:	4606      	mov	r6, r0
 80095c2:	460f      	mov	r7, r1
 80095c4:	e71f      	b.n	8009406 <__kernel_rem_pio2+0x2ba>
 80095c6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80095ca:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80095ce:	f7f6 ff83 	bl	80004d8 <__aeabi_dmul>
 80095d2:	4602      	mov	r2, r0
 80095d4:	460b      	mov	r3, r1
 80095d6:	4650      	mov	r0, sl
 80095d8:	4659      	mov	r1, fp
 80095da:	f7f6 fdc7 	bl	800016c <__adddf3>
 80095de:	4682      	mov	sl, r0
 80095e0:	468b      	mov	fp, r1
 80095e2:	3601      	adds	r6, #1
 80095e4:	9b04      	ldr	r3, [sp, #16]
 80095e6:	429e      	cmp	r6, r3
 80095e8:	dc01      	bgt.n	80095ee <__kernel_rem_pio2+0x4a2>
 80095ea:	45b0      	cmp	r8, r6
 80095ec:	daeb      	bge.n	80095c6 <__kernel_rem_pio2+0x47a>
 80095ee:	ab48      	add	r3, sp, #288	; 0x120
 80095f0:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80095f4:	e9c3 ab00 	strd	sl, fp, [r3]
 80095f8:	3f01      	subs	r7, #1
 80095fa:	f108 0801 	add.w	r8, r8, #1
 80095fe:	e709      	b.n	8009414 <__kernel_rem_pio2+0x2c8>
 8009600:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8009602:	2b02      	cmp	r3, #2
 8009604:	dc09      	bgt.n	800961a <__kernel_rem_pio2+0x4ce>
 8009606:	2b00      	cmp	r3, #0
 8009608:	dc34      	bgt.n	8009674 <__kernel_rem_pio2+0x528>
 800960a:	d05e      	beq.n	80096ca <__kernel_rem_pio2+0x57e>
 800960c:	9b07      	ldr	r3, [sp, #28]
 800960e:	f003 0007 	and.w	r0, r3, #7
 8009612:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8009616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800961a:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800961c:	2b03      	cmp	r3, #3
 800961e:	d1f5      	bne.n	800960c <__kernel_rem_pio2+0x4c0>
 8009620:	9a06      	ldr	r2, [sp, #24]
 8009622:	ab48      	add	r3, sp, #288	; 0x120
 8009624:	441a      	add	r2, r3
 8009626:	4615      	mov	r5, r2
 8009628:	4692      	mov	sl, r2
 800962a:	46a3      	mov	fp, r4
 800962c:	f1bb 0f00 	cmp.w	fp, #0
 8009630:	dc7a      	bgt.n	8009728 <__kernel_rem_pio2+0x5dc>
 8009632:	46aa      	mov	sl, r5
 8009634:	46a3      	mov	fp, r4
 8009636:	f1bb 0f01 	cmp.w	fp, #1
 800963a:	f300 8094 	bgt.w	8009766 <__kernel_rem_pio2+0x61a>
 800963e:	2700      	movs	r7, #0
 8009640:	463e      	mov	r6, r7
 8009642:	2c01      	cmp	r4, #1
 8009644:	f300 80ae 	bgt.w	80097a4 <__kernel_rem_pio2+0x658>
 8009648:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800964c:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 8009650:	9b02      	ldr	r3, [sp, #8]
 8009652:	2b00      	cmp	r3, #0
 8009654:	f040 80b0 	bne.w	80097b8 <__kernel_rem_pio2+0x66c>
 8009658:	4603      	mov	r3, r0
 800965a:	462a      	mov	r2, r5
 800965c:	9801      	ldr	r0, [sp, #4]
 800965e:	e9c0 2300 	strd	r2, r3, [r0]
 8009662:	4622      	mov	r2, r4
 8009664:	460b      	mov	r3, r1
 8009666:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800966a:	463a      	mov	r2, r7
 800966c:	4633      	mov	r3, r6
 800966e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8009672:	e7cb      	b.n	800960c <__kernel_rem_pio2+0x4c0>
 8009674:	2000      	movs	r0, #0
 8009676:	9a06      	ldr	r2, [sp, #24]
 8009678:	ab48      	add	r3, sp, #288	; 0x120
 800967a:	441a      	add	r2, r3
 800967c:	4615      	mov	r5, r2
 800967e:	46a0      	mov	r8, r4
 8009680:	4601      	mov	r1, r0
 8009682:	f1b8 0f00 	cmp.w	r8, #0
 8009686:	da3c      	bge.n	8009702 <__kernel_rem_pio2+0x5b6>
 8009688:	9b02      	ldr	r3, [sp, #8]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d040      	beq.n	8009710 <__kernel_rem_pio2+0x5c4>
 800968e:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8009692:	4602      	mov	r2, r0
 8009694:	462b      	mov	r3, r5
 8009696:	9d01      	ldr	r5, [sp, #4]
 8009698:	2601      	movs	r6, #1
 800969a:	e9c5 2300 	strd	r2, r3, [r5]
 800969e:	460b      	mov	r3, r1
 80096a0:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80096a4:	f7f6 fd60 	bl	8000168 <__aeabi_dsub>
 80096a8:	4684      	mov	ip, r0
 80096aa:	460f      	mov	r7, r1
 80096ac:	ad48      	add	r5, sp, #288	; 0x120
 80096ae:	42b4      	cmp	r4, r6
 80096b0:	f105 0508 	add.w	r5, r5, #8
 80096b4:	da2e      	bge.n	8009714 <__kernel_rem_pio2+0x5c8>
 80096b6:	9b02      	ldr	r3, [sp, #8]
 80096b8:	b10b      	cbz	r3, 80096be <__kernel_rem_pio2+0x572>
 80096ba:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80096be:	4662      	mov	r2, ip
 80096c0:	463b      	mov	r3, r7
 80096c2:	9901      	ldr	r1, [sp, #4]
 80096c4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80096c8:	e7a0      	b.n	800960c <__kernel_rem_pio2+0x4c0>
 80096ca:	9a06      	ldr	r2, [sp, #24]
 80096cc:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 80096ce:	ab48      	add	r3, sp, #288	; 0x120
 80096d0:	441a      	add	r2, r3
 80096d2:	4615      	mov	r5, r2
 80096d4:	4637      	mov	r7, r6
 80096d6:	2c00      	cmp	r4, #0
 80096d8:	da09      	bge.n	80096ee <__kernel_rem_pio2+0x5a2>
 80096da:	9b02      	ldr	r3, [sp, #8]
 80096dc:	b10b      	cbz	r3, 80096e2 <__kernel_rem_pio2+0x596>
 80096de:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80096e2:	4632      	mov	r2, r6
 80096e4:	463b      	mov	r3, r7
 80096e6:	9901      	ldr	r1, [sp, #4]
 80096e8:	e9c1 2300 	strd	r2, r3, [r1]
 80096ec:	e78e      	b.n	800960c <__kernel_rem_pio2+0x4c0>
 80096ee:	4630      	mov	r0, r6
 80096f0:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80096f4:	4639      	mov	r1, r7
 80096f6:	f7f6 fd39 	bl	800016c <__adddf3>
 80096fa:	3c01      	subs	r4, #1
 80096fc:	4606      	mov	r6, r0
 80096fe:	460f      	mov	r7, r1
 8009700:	e7e9      	b.n	80096d6 <__kernel_rem_pio2+0x58a>
 8009702:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8009706:	f7f6 fd31 	bl	800016c <__adddf3>
 800970a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800970e:	e7b8      	b.n	8009682 <__kernel_rem_pio2+0x536>
 8009710:	460d      	mov	r5, r1
 8009712:	e7be      	b.n	8009692 <__kernel_rem_pio2+0x546>
 8009714:	4660      	mov	r0, ip
 8009716:	e9d5 2300 	ldrd	r2, r3, [r5]
 800971a:	4639      	mov	r1, r7
 800971c:	f7f6 fd26 	bl	800016c <__adddf3>
 8009720:	3601      	adds	r6, #1
 8009722:	4684      	mov	ip, r0
 8009724:	460f      	mov	r7, r1
 8009726:	e7c2      	b.n	80096ae <__kernel_rem_pio2+0x562>
 8009728:	e9da 6700 	ldrd	r6, r7, [sl]
 800972c:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8009730:	4632      	mov	r2, r6
 8009732:	463b      	mov	r3, r7
 8009734:	4640      	mov	r0, r8
 8009736:	4649      	mov	r1, r9
 8009738:	f7f6 fd18 	bl	800016c <__adddf3>
 800973c:	4602      	mov	r2, r0
 800973e:	460b      	mov	r3, r1
 8009740:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009744:	4640      	mov	r0, r8
 8009746:	4649      	mov	r1, r9
 8009748:	f7f6 fd0e 	bl	8000168 <__aeabi_dsub>
 800974c:	4632      	mov	r2, r6
 800974e:	463b      	mov	r3, r7
 8009750:	f7f6 fd0c 	bl	800016c <__adddf3>
 8009754:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009758:	e86a 0102 	strd	r0, r1, [sl], #-8
 800975c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009760:	e9ca 2300 	strd	r2, r3, [sl]
 8009764:	e762      	b.n	800962c <__kernel_rem_pio2+0x4e0>
 8009766:	e9da 8900 	ldrd	r8, r9, [sl]
 800976a:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800976e:	4642      	mov	r2, r8
 8009770:	464b      	mov	r3, r9
 8009772:	4630      	mov	r0, r6
 8009774:	4639      	mov	r1, r7
 8009776:	f7f6 fcf9 	bl	800016c <__adddf3>
 800977a:	4602      	mov	r2, r0
 800977c:	460b      	mov	r3, r1
 800977e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009782:	4630      	mov	r0, r6
 8009784:	4639      	mov	r1, r7
 8009786:	f7f6 fcef 	bl	8000168 <__aeabi_dsub>
 800978a:	4642      	mov	r2, r8
 800978c:	464b      	mov	r3, r9
 800978e:	f7f6 fced 	bl	800016c <__adddf3>
 8009792:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009796:	e86a 0102 	strd	r0, r1, [sl], #-8
 800979a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800979e:	e9ca 2300 	strd	r2, r3, [sl]
 80097a2:	e748      	b.n	8009636 <__kernel_rem_pio2+0x4ea>
 80097a4:	4638      	mov	r0, r7
 80097a6:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80097aa:	4631      	mov	r1, r6
 80097ac:	f7f6 fcde 	bl	800016c <__adddf3>
 80097b0:	3c01      	subs	r4, #1
 80097b2:	4607      	mov	r7, r0
 80097b4:	460e      	mov	r6, r1
 80097b6:	e744      	b.n	8009642 <__kernel_rem_pio2+0x4f6>
 80097b8:	9b01      	ldr	r3, [sp, #4]
 80097ba:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80097be:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80097c2:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80097c6:	e9c3 0401 	strd	r0, r4, [r3, #4]
 80097ca:	e9c3 1703 	strd	r1, r7, [r3, #12]
 80097ce:	601d      	str	r5, [r3, #0]
 80097d0:	615e      	str	r6, [r3, #20]
 80097d2:	e71b      	b.n	800960c <__kernel_rem_pio2+0x4c0>
 80097d4:	41700000 	.word	0x41700000
 80097d8:	3e700000 	.word	0x3e700000
 80097dc:	00000000 	.word	0x00000000

080097e0 <__kernel_sin>:
 80097e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097e4:	b086      	sub	sp, #24
 80097e6:	e9cd 2300 	strd	r2, r3, [sp]
 80097ea:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80097ee:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80097f2:	4682      	mov	sl, r0
 80097f4:	460c      	mov	r4, r1
 80097f6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80097f8:	da03      	bge.n	8009802 <__kernel_sin+0x22>
 80097fa:	f7f7 f91d 	bl	8000a38 <__aeabi_d2iz>
 80097fe:	2800      	cmp	r0, #0
 8009800:	d050      	beq.n	80098a4 <__kernel_sin+0xc4>
 8009802:	4652      	mov	r2, sl
 8009804:	4623      	mov	r3, r4
 8009806:	4650      	mov	r0, sl
 8009808:	4621      	mov	r1, r4
 800980a:	f7f6 fe65 	bl	80004d8 <__aeabi_dmul>
 800980e:	4606      	mov	r6, r0
 8009810:	460f      	mov	r7, r1
 8009812:	4602      	mov	r2, r0
 8009814:	460b      	mov	r3, r1
 8009816:	4650      	mov	r0, sl
 8009818:	4621      	mov	r1, r4
 800981a:	f7f6 fe5d 	bl	80004d8 <__aeabi_dmul>
 800981e:	a33e      	add	r3, pc, #248	; (adr r3, 8009918 <__kernel_sin+0x138>)
 8009820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009824:	4680      	mov	r8, r0
 8009826:	4689      	mov	r9, r1
 8009828:	4630      	mov	r0, r6
 800982a:	4639      	mov	r1, r7
 800982c:	f7f6 fe54 	bl	80004d8 <__aeabi_dmul>
 8009830:	a33b      	add	r3, pc, #236	; (adr r3, 8009920 <__kernel_sin+0x140>)
 8009832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009836:	f7f6 fc97 	bl	8000168 <__aeabi_dsub>
 800983a:	4632      	mov	r2, r6
 800983c:	463b      	mov	r3, r7
 800983e:	f7f6 fe4b 	bl	80004d8 <__aeabi_dmul>
 8009842:	a339      	add	r3, pc, #228	; (adr r3, 8009928 <__kernel_sin+0x148>)
 8009844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009848:	f7f6 fc90 	bl	800016c <__adddf3>
 800984c:	4632      	mov	r2, r6
 800984e:	463b      	mov	r3, r7
 8009850:	f7f6 fe42 	bl	80004d8 <__aeabi_dmul>
 8009854:	a336      	add	r3, pc, #216	; (adr r3, 8009930 <__kernel_sin+0x150>)
 8009856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800985a:	f7f6 fc85 	bl	8000168 <__aeabi_dsub>
 800985e:	4632      	mov	r2, r6
 8009860:	463b      	mov	r3, r7
 8009862:	f7f6 fe39 	bl	80004d8 <__aeabi_dmul>
 8009866:	a334      	add	r3, pc, #208	; (adr r3, 8009938 <__kernel_sin+0x158>)
 8009868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800986c:	f7f6 fc7e 	bl	800016c <__adddf3>
 8009870:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009874:	b9dd      	cbnz	r5, 80098ae <__kernel_sin+0xce>
 8009876:	4602      	mov	r2, r0
 8009878:	460b      	mov	r3, r1
 800987a:	4630      	mov	r0, r6
 800987c:	4639      	mov	r1, r7
 800987e:	f7f6 fe2b 	bl	80004d8 <__aeabi_dmul>
 8009882:	a32f      	add	r3, pc, #188	; (adr r3, 8009940 <__kernel_sin+0x160>)
 8009884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009888:	f7f6 fc6e 	bl	8000168 <__aeabi_dsub>
 800988c:	4642      	mov	r2, r8
 800988e:	464b      	mov	r3, r9
 8009890:	f7f6 fe22 	bl	80004d8 <__aeabi_dmul>
 8009894:	4602      	mov	r2, r0
 8009896:	460b      	mov	r3, r1
 8009898:	4650      	mov	r0, sl
 800989a:	4621      	mov	r1, r4
 800989c:	f7f6 fc66 	bl	800016c <__adddf3>
 80098a0:	4682      	mov	sl, r0
 80098a2:	460c      	mov	r4, r1
 80098a4:	4650      	mov	r0, sl
 80098a6:	4621      	mov	r1, r4
 80098a8:	b006      	add	sp, #24
 80098aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098ae:	2200      	movs	r2, #0
 80098b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80098b4:	4b24      	ldr	r3, [pc, #144]	; (8009948 <__kernel_sin+0x168>)
 80098b6:	f7f6 fe0f 	bl	80004d8 <__aeabi_dmul>
 80098ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80098be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80098c2:	4640      	mov	r0, r8
 80098c4:	4649      	mov	r1, r9
 80098c6:	f7f6 fe07 	bl	80004d8 <__aeabi_dmul>
 80098ca:	4602      	mov	r2, r0
 80098cc:	460b      	mov	r3, r1
 80098ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80098d2:	f7f6 fc49 	bl	8000168 <__aeabi_dsub>
 80098d6:	4632      	mov	r2, r6
 80098d8:	463b      	mov	r3, r7
 80098da:	f7f6 fdfd 	bl	80004d8 <__aeabi_dmul>
 80098de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80098e2:	f7f6 fc41 	bl	8000168 <__aeabi_dsub>
 80098e6:	a316      	add	r3, pc, #88	; (adr r3, 8009940 <__kernel_sin+0x160>)
 80098e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ec:	4606      	mov	r6, r0
 80098ee:	460f      	mov	r7, r1
 80098f0:	4640      	mov	r0, r8
 80098f2:	4649      	mov	r1, r9
 80098f4:	f7f6 fdf0 	bl	80004d8 <__aeabi_dmul>
 80098f8:	4602      	mov	r2, r0
 80098fa:	460b      	mov	r3, r1
 80098fc:	4630      	mov	r0, r6
 80098fe:	4639      	mov	r1, r7
 8009900:	f7f6 fc34 	bl	800016c <__adddf3>
 8009904:	4602      	mov	r2, r0
 8009906:	460b      	mov	r3, r1
 8009908:	4650      	mov	r0, sl
 800990a:	4621      	mov	r1, r4
 800990c:	f7f6 fc2c 	bl	8000168 <__aeabi_dsub>
 8009910:	e7c6      	b.n	80098a0 <__kernel_sin+0xc0>
 8009912:	bf00      	nop
 8009914:	f3af 8000 	nop.w
 8009918:	5acfd57c 	.word	0x5acfd57c
 800991c:	3de5d93a 	.word	0x3de5d93a
 8009920:	8a2b9ceb 	.word	0x8a2b9ceb
 8009924:	3e5ae5e6 	.word	0x3e5ae5e6
 8009928:	57b1fe7d 	.word	0x57b1fe7d
 800992c:	3ec71de3 	.word	0x3ec71de3
 8009930:	19c161d5 	.word	0x19c161d5
 8009934:	3f2a01a0 	.word	0x3f2a01a0
 8009938:	1110f8a6 	.word	0x1110f8a6
 800993c:	3f811111 	.word	0x3f811111
 8009940:	55555549 	.word	0x55555549
 8009944:	3fc55555 	.word	0x3fc55555
 8009948:	3fe00000 	.word	0x3fe00000
 800994c:	00000000 	.word	0x00000000

08009950 <atan>:
 8009950:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009954:	4bb6      	ldr	r3, [pc, #728]	; (8009c30 <atan+0x2e0>)
 8009956:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800995a:	429e      	cmp	r6, r3
 800995c:	4604      	mov	r4, r0
 800995e:	460d      	mov	r5, r1
 8009960:	468b      	mov	fp, r1
 8009962:	dd17      	ble.n	8009994 <atan+0x44>
 8009964:	4bb3      	ldr	r3, [pc, #716]	; (8009c34 <atan+0x2e4>)
 8009966:	429e      	cmp	r6, r3
 8009968:	dc01      	bgt.n	800996e <atan+0x1e>
 800996a:	d109      	bne.n	8009980 <atan+0x30>
 800996c:	b140      	cbz	r0, 8009980 <atan+0x30>
 800996e:	4622      	mov	r2, r4
 8009970:	462b      	mov	r3, r5
 8009972:	4620      	mov	r0, r4
 8009974:	4629      	mov	r1, r5
 8009976:	f7f6 fbf9 	bl	800016c <__adddf3>
 800997a:	4604      	mov	r4, r0
 800997c:	460d      	mov	r5, r1
 800997e:	e005      	b.n	800998c <atan+0x3c>
 8009980:	f1bb 0f00 	cmp.w	fp, #0
 8009984:	4cac      	ldr	r4, [pc, #688]	; (8009c38 <atan+0x2e8>)
 8009986:	f300 8121 	bgt.w	8009bcc <atan+0x27c>
 800998a:	4dac      	ldr	r5, [pc, #688]	; (8009c3c <atan+0x2ec>)
 800998c:	4620      	mov	r0, r4
 800998e:	4629      	mov	r1, r5
 8009990:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009994:	4baa      	ldr	r3, [pc, #680]	; (8009c40 <atan+0x2f0>)
 8009996:	429e      	cmp	r6, r3
 8009998:	dc11      	bgt.n	80099be <atan+0x6e>
 800999a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800999e:	429e      	cmp	r6, r3
 80099a0:	dc0a      	bgt.n	80099b8 <atan+0x68>
 80099a2:	a38b      	add	r3, pc, #556	; (adr r3, 8009bd0 <atan+0x280>)
 80099a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a8:	f7f6 fbe0 	bl	800016c <__adddf3>
 80099ac:	2200      	movs	r2, #0
 80099ae:	4ba5      	ldr	r3, [pc, #660]	; (8009c44 <atan+0x2f4>)
 80099b0:	f7f7 f822 	bl	80009f8 <__aeabi_dcmpgt>
 80099b4:	2800      	cmp	r0, #0
 80099b6:	d1e9      	bne.n	800998c <atan+0x3c>
 80099b8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80099bc:	e027      	b.n	8009a0e <atan+0xbe>
 80099be:	f000 f951 	bl	8009c64 <fabs>
 80099c2:	4ba1      	ldr	r3, [pc, #644]	; (8009c48 <atan+0x2f8>)
 80099c4:	4604      	mov	r4, r0
 80099c6:	429e      	cmp	r6, r3
 80099c8:	460d      	mov	r5, r1
 80099ca:	f300 80b8 	bgt.w	8009b3e <atan+0x1ee>
 80099ce:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80099d2:	429e      	cmp	r6, r3
 80099d4:	f300 809c 	bgt.w	8009b10 <atan+0x1c0>
 80099d8:	4602      	mov	r2, r0
 80099da:	460b      	mov	r3, r1
 80099dc:	f7f6 fbc6 	bl	800016c <__adddf3>
 80099e0:	2200      	movs	r2, #0
 80099e2:	4b98      	ldr	r3, [pc, #608]	; (8009c44 <atan+0x2f4>)
 80099e4:	f7f6 fbc0 	bl	8000168 <__aeabi_dsub>
 80099e8:	2200      	movs	r2, #0
 80099ea:	4606      	mov	r6, r0
 80099ec:	460f      	mov	r7, r1
 80099ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80099f2:	4620      	mov	r0, r4
 80099f4:	4629      	mov	r1, r5
 80099f6:	f7f6 fbb9 	bl	800016c <__adddf3>
 80099fa:	4602      	mov	r2, r0
 80099fc:	460b      	mov	r3, r1
 80099fe:	4630      	mov	r0, r6
 8009a00:	4639      	mov	r1, r7
 8009a02:	f7f6 fe93 	bl	800072c <__aeabi_ddiv>
 8009a06:	f04f 0a00 	mov.w	sl, #0
 8009a0a:	4604      	mov	r4, r0
 8009a0c:	460d      	mov	r5, r1
 8009a0e:	4622      	mov	r2, r4
 8009a10:	462b      	mov	r3, r5
 8009a12:	4620      	mov	r0, r4
 8009a14:	4629      	mov	r1, r5
 8009a16:	f7f6 fd5f 	bl	80004d8 <__aeabi_dmul>
 8009a1a:	4602      	mov	r2, r0
 8009a1c:	460b      	mov	r3, r1
 8009a1e:	4680      	mov	r8, r0
 8009a20:	4689      	mov	r9, r1
 8009a22:	f7f6 fd59 	bl	80004d8 <__aeabi_dmul>
 8009a26:	a36c      	add	r3, pc, #432	; (adr r3, 8009bd8 <atan+0x288>)
 8009a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a2c:	4606      	mov	r6, r0
 8009a2e:	460f      	mov	r7, r1
 8009a30:	f7f6 fd52 	bl	80004d8 <__aeabi_dmul>
 8009a34:	a36a      	add	r3, pc, #424	; (adr r3, 8009be0 <atan+0x290>)
 8009a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a3a:	f7f6 fb97 	bl	800016c <__adddf3>
 8009a3e:	4632      	mov	r2, r6
 8009a40:	463b      	mov	r3, r7
 8009a42:	f7f6 fd49 	bl	80004d8 <__aeabi_dmul>
 8009a46:	a368      	add	r3, pc, #416	; (adr r3, 8009be8 <atan+0x298>)
 8009a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a4c:	f7f6 fb8e 	bl	800016c <__adddf3>
 8009a50:	4632      	mov	r2, r6
 8009a52:	463b      	mov	r3, r7
 8009a54:	f7f6 fd40 	bl	80004d8 <__aeabi_dmul>
 8009a58:	a365      	add	r3, pc, #404	; (adr r3, 8009bf0 <atan+0x2a0>)
 8009a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a5e:	f7f6 fb85 	bl	800016c <__adddf3>
 8009a62:	4632      	mov	r2, r6
 8009a64:	463b      	mov	r3, r7
 8009a66:	f7f6 fd37 	bl	80004d8 <__aeabi_dmul>
 8009a6a:	a363      	add	r3, pc, #396	; (adr r3, 8009bf8 <atan+0x2a8>)
 8009a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a70:	f7f6 fb7c 	bl	800016c <__adddf3>
 8009a74:	4632      	mov	r2, r6
 8009a76:	463b      	mov	r3, r7
 8009a78:	f7f6 fd2e 	bl	80004d8 <__aeabi_dmul>
 8009a7c:	a360      	add	r3, pc, #384	; (adr r3, 8009c00 <atan+0x2b0>)
 8009a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a82:	f7f6 fb73 	bl	800016c <__adddf3>
 8009a86:	4642      	mov	r2, r8
 8009a88:	464b      	mov	r3, r9
 8009a8a:	f7f6 fd25 	bl	80004d8 <__aeabi_dmul>
 8009a8e:	a35e      	add	r3, pc, #376	; (adr r3, 8009c08 <atan+0x2b8>)
 8009a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a94:	4680      	mov	r8, r0
 8009a96:	4689      	mov	r9, r1
 8009a98:	4630      	mov	r0, r6
 8009a9a:	4639      	mov	r1, r7
 8009a9c:	f7f6 fd1c 	bl	80004d8 <__aeabi_dmul>
 8009aa0:	a35b      	add	r3, pc, #364	; (adr r3, 8009c10 <atan+0x2c0>)
 8009aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa6:	f7f6 fb5f 	bl	8000168 <__aeabi_dsub>
 8009aaa:	4632      	mov	r2, r6
 8009aac:	463b      	mov	r3, r7
 8009aae:	f7f6 fd13 	bl	80004d8 <__aeabi_dmul>
 8009ab2:	a359      	add	r3, pc, #356	; (adr r3, 8009c18 <atan+0x2c8>)
 8009ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab8:	f7f6 fb56 	bl	8000168 <__aeabi_dsub>
 8009abc:	4632      	mov	r2, r6
 8009abe:	463b      	mov	r3, r7
 8009ac0:	f7f6 fd0a 	bl	80004d8 <__aeabi_dmul>
 8009ac4:	a356      	add	r3, pc, #344	; (adr r3, 8009c20 <atan+0x2d0>)
 8009ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aca:	f7f6 fb4d 	bl	8000168 <__aeabi_dsub>
 8009ace:	4632      	mov	r2, r6
 8009ad0:	463b      	mov	r3, r7
 8009ad2:	f7f6 fd01 	bl	80004d8 <__aeabi_dmul>
 8009ad6:	a354      	add	r3, pc, #336	; (adr r3, 8009c28 <atan+0x2d8>)
 8009ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009adc:	f7f6 fb44 	bl	8000168 <__aeabi_dsub>
 8009ae0:	4632      	mov	r2, r6
 8009ae2:	463b      	mov	r3, r7
 8009ae4:	f7f6 fcf8 	bl	80004d8 <__aeabi_dmul>
 8009ae8:	4602      	mov	r2, r0
 8009aea:	460b      	mov	r3, r1
 8009aec:	4640      	mov	r0, r8
 8009aee:	4649      	mov	r1, r9
 8009af0:	f7f6 fb3c 	bl	800016c <__adddf3>
 8009af4:	4622      	mov	r2, r4
 8009af6:	462b      	mov	r3, r5
 8009af8:	f7f6 fcee 	bl	80004d8 <__aeabi_dmul>
 8009afc:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8009b00:	4602      	mov	r2, r0
 8009b02:	460b      	mov	r3, r1
 8009b04:	d144      	bne.n	8009b90 <atan+0x240>
 8009b06:	4620      	mov	r0, r4
 8009b08:	4629      	mov	r1, r5
 8009b0a:	f7f6 fb2d 	bl	8000168 <__aeabi_dsub>
 8009b0e:	e734      	b.n	800997a <atan+0x2a>
 8009b10:	2200      	movs	r2, #0
 8009b12:	4b4c      	ldr	r3, [pc, #304]	; (8009c44 <atan+0x2f4>)
 8009b14:	f7f6 fb28 	bl	8000168 <__aeabi_dsub>
 8009b18:	2200      	movs	r2, #0
 8009b1a:	4606      	mov	r6, r0
 8009b1c:	460f      	mov	r7, r1
 8009b1e:	4620      	mov	r0, r4
 8009b20:	4629      	mov	r1, r5
 8009b22:	4b48      	ldr	r3, [pc, #288]	; (8009c44 <atan+0x2f4>)
 8009b24:	f7f6 fb22 	bl	800016c <__adddf3>
 8009b28:	4602      	mov	r2, r0
 8009b2a:	460b      	mov	r3, r1
 8009b2c:	4630      	mov	r0, r6
 8009b2e:	4639      	mov	r1, r7
 8009b30:	f7f6 fdfc 	bl	800072c <__aeabi_ddiv>
 8009b34:	f04f 0a01 	mov.w	sl, #1
 8009b38:	4604      	mov	r4, r0
 8009b3a:	460d      	mov	r5, r1
 8009b3c:	e767      	b.n	8009a0e <atan+0xbe>
 8009b3e:	4b43      	ldr	r3, [pc, #268]	; (8009c4c <atan+0x2fc>)
 8009b40:	429e      	cmp	r6, r3
 8009b42:	da1a      	bge.n	8009b7a <atan+0x22a>
 8009b44:	2200      	movs	r2, #0
 8009b46:	4b42      	ldr	r3, [pc, #264]	; (8009c50 <atan+0x300>)
 8009b48:	f7f6 fb0e 	bl	8000168 <__aeabi_dsub>
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	4606      	mov	r6, r0
 8009b50:	460f      	mov	r7, r1
 8009b52:	4620      	mov	r0, r4
 8009b54:	4629      	mov	r1, r5
 8009b56:	4b3e      	ldr	r3, [pc, #248]	; (8009c50 <atan+0x300>)
 8009b58:	f7f6 fcbe 	bl	80004d8 <__aeabi_dmul>
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	4b39      	ldr	r3, [pc, #228]	; (8009c44 <atan+0x2f4>)
 8009b60:	f7f6 fb04 	bl	800016c <__adddf3>
 8009b64:	4602      	mov	r2, r0
 8009b66:	460b      	mov	r3, r1
 8009b68:	4630      	mov	r0, r6
 8009b6a:	4639      	mov	r1, r7
 8009b6c:	f7f6 fdde 	bl	800072c <__aeabi_ddiv>
 8009b70:	f04f 0a02 	mov.w	sl, #2
 8009b74:	4604      	mov	r4, r0
 8009b76:	460d      	mov	r5, r1
 8009b78:	e749      	b.n	8009a0e <atan+0xbe>
 8009b7a:	4602      	mov	r2, r0
 8009b7c:	460b      	mov	r3, r1
 8009b7e:	2000      	movs	r0, #0
 8009b80:	4934      	ldr	r1, [pc, #208]	; (8009c54 <atan+0x304>)
 8009b82:	f7f6 fdd3 	bl	800072c <__aeabi_ddiv>
 8009b86:	f04f 0a03 	mov.w	sl, #3
 8009b8a:	4604      	mov	r4, r0
 8009b8c:	460d      	mov	r5, r1
 8009b8e:	e73e      	b.n	8009a0e <atan+0xbe>
 8009b90:	4b31      	ldr	r3, [pc, #196]	; (8009c58 <atan+0x308>)
 8009b92:	4e32      	ldr	r6, [pc, #200]	; (8009c5c <atan+0x30c>)
 8009b94:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009b98:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8009b9c:	e9da 2300 	ldrd	r2, r3, [sl]
 8009ba0:	f7f6 fae2 	bl	8000168 <__aeabi_dsub>
 8009ba4:	4622      	mov	r2, r4
 8009ba6:	462b      	mov	r3, r5
 8009ba8:	f7f6 fade 	bl	8000168 <__aeabi_dsub>
 8009bac:	4602      	mov	r2, r0
 8009bae:	460b      	mov	r3, r1
 8009bb0:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009bb4:	f7f6 fad8 	bl	8000168 <__aeabi_dsub>
 8009bb8:	f1bb 0f00 	cmp.w	fp, #0
 8009bbc:	4604      	mov	r4, r0
 8009bbe:	460d      	mov	r5, r1
 8009bc0:	f6bf aee4 	bge.w	800998c <atan+0x3c>
 8009bc4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009bc8:	461d      	mov	r5, r3
 8009bca:	e6df      	b.n	800998c <atan+0x3c>
 8009bcc:	4d24      	ldr	r5, [pc, #144]	; (8009c60 <atan+0x310>)
 8009bce:	e6dd      	b.n	800998c <atan+0x3c>
 8009bd0:	8800759c 	.word	0x8800759c
 8009bd4:	7e37e43c 	.word	0x7e37e43c
 8009bd8:	e322da11 	.word	0xe322da11
 8009bdc:	3f90ad3a 	.word	0x3f90ad3a
 8009be0:	24760deb 	.word	0x24760deb
 8009be4:	3fa97b4b 	.word	0x3fa97b4b
 8009be8:	a0d03d51 	.word	0xa0d03d51
 8009bec:	3fb10d66 	.word	0x3fb10d66
 8009bf0:	c54c206e 	.word	0xc54c206e
 8009bf4:	3fb745cd 	.word	0x3fb745cd
 8009bf8:	920083ff 	.word	0x920083ff
 8009bfc:	3fc24924 	.word	0x3fc24924
 8009c00:	5555550d 	.word	0x5555550d
 8009c04:	3fd55555 	.word	0x3fd55555
 8009c08:	2c6a6c2f 	.word	0x2c6a6c2f
 8009c0c:	bfa2b444 	.word	0xbfa2b444
 8009c10:	52defd9a 	.word	0x52defd9a
 8009c14:	3fadde2d 	.word	0x3fadde2d
 8009c18:	af749a6d 	.word	0xaf749a6d
 8009c1c:	3fb3b0f2 	.word	0x3fb3b0f2
 8009c20:	fe231671 	.word	0xfe231671
 8009c24:	3fbc71c6 	.word	0x3fbc71c6
 8009c28:	9998ebc4 	.word	0x9998ebc4
 8009c2c:	3fc99999 	.word	0x3fc99999
 8009c30:	440fffff 	.word	0x440fffff
 8009c34:	7ff00000 	.word	0x7ff00000
 8009c38:	54442d18 	.word	0x54442d18
 8009c3c:	bff921fb 	.word	0xbff921fb
 8009c40:	3fdbffff 	.word	0x3fdbffff
 8009c44:	3ff00000 	.word	0x3ff00000
 8009c48:	3ff2ffff 	.word	0x3ff2ffff
 8009c4c:	40038000 	.word	0x40038000
 8009c50:	3ff80000 	.word	0x3ff80000
 8009c54:	bff00000 	.word	0xbff00000
 8009c58:	0800bff0 	.word	0x0800bff0
 8009c5c:	0800bfd0 	.word	0x0800bfd0
 8009c60:	3ff921fb 	.word	0x3ff921fb

08009c64 <fabs>:
 8009c64:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009c68:	4770      	bx	lr
 8009c6a:	0000      	movs	r0, r0
 8009c6c:	0000      	movs	r0, r0
	...

08009c70 <floor>:
 8009c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c74:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8009c78:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8009c7c:	2e13      	cmp	r6, #19
 8009c7e:	4602      	mov	r2, r0
 8009c80:	460b      	mov	r3, r1
 8009c82:	4607      	mov	r7, r0
 8009c84:	460c      	mov	r4, r1
 8009c86:	4605      	mov	r5, r0
 8009c88:	dc34      	bgt.n	8009cf4 <floor+0x84>
 8009c8a:	2e00      	cmp	r6, #0
 8009c8c:	da15      	bge.n	8009cba <floor+0x4a>
 8009c8e:	a334      	add	r3, pc, #208	; (adr r3, 8009d60 <floor+0xf0>)
 8009c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c94:	f7f6 fa6a 	bl	800016c <__adddf3>
 8009c98:	2200      	movs	r2, #0
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	f7f6 feac 	bl	80009f8 <__aeabi_dcmpgt>
 8009ca0:	b140      	cbz	r0, 8009cb4 <floor+0x44>
 8009ca2:	2c00      	cmp	r4, #0
 8009ca4:	da59      	bge.n	8009d5a <floor+0xea>
 8009ca6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8009caa:	ea57 0503 	orrs.w	r5, r7, r3
 8009cae:	d001      	beq.n	8009cb4 <floor+0x44>
 8009cb0:	2500      	movs	r5, #0
 8009cb2:	4c2d      	ldr	r4, [pc, #180]	; (8009d68 <floor+0xf8>)
 8009cb4:	4623      	mov	r3, r4
 8009cb6:	462f      	mov	r7, r5
 8009cb8:	e025      	b.n	8009d06 <floor+0x96>
 8009cba:	4a2c      	ldr	r2, [pc, #176]	; (8009d6c <floor+0xfc>)
 8009cbc:	fa42 f806 	asr.w	r8, r2, r6
 8009cc0:	ea01 0208 	and.w	r2, r1, r8
 8009cc4:	4302      	orrs	r2, r0
 8009cc6:	d01e      	beq.n	8009d06 <floor+0x96>
 8009cc8:	a325      	add	r3, pc, #148	; (adr r3, 8009d60 <floor+0xf0>)
 8009cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cce:	f7f6 fa4d 	bl	800016c <__adddf3>
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	f7f6 fe8f 	bl	80009f8 <__aeabi_dcmpgt>
 8009cda:	2800      	cmp	r0, #0
 8009cdc:	d0ea      	beq.n	8009cb4 <floor+0x44>
 8009cde:	2c00      	cmp	r4, #0
 8009ce0:	bfbe      	ittt	lt
 8009ce2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009ce6:	fa43 f606 	asrlt.w	r6, r3, r6
 8009cea:	19a4      	addlt	r4, r4, r6
 8009cec:	2500      	movs	r5, #0
 8009cee:	ea24 0408 	bic.w	r4, r4, r8
 8009cf2:	e7df      	b.n	8009cb4 <floor+0x44>
 8009cf4:	2e33      	cmp	r6, #51	; 0x33
 8009cf6:	dd0a      	ble.n	8009d0e <floor+0x9e>
 8009cf8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009cfc:	d103      	bne.n	8009d06 <floor+0x96>
 8009cfe:	f7f6 fa35 	bl	800016c <__adddf3>
 8009d02:	4607      	mov	r7, r0
 8009d04:	460b      	mov	r3, r1
 8009d06:	4638      	mov	r0, r7
 8009d08:	4619      	mov	r1, r3
 8009d0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d12:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8009d16:	fa22 f808 	lsr.w	r8, r2, r8
 8009d1a:	ea18 0f00 	tst.w	r8, r0
 8009d1e:	d0f2      	beq.n	8009d06 <floor+0x96>
 8009d20:	a30f      	add	r3, pc, #60	; (adr r3, 8009d60 <floor+0xf0>)
 8009d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d26:	f7f6 fa21 	bl	800016c <__adddf3>
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	f7f6 fe63 	bl	80009f8 <__aeabi_dcmpgt>
 8009d32:	2800      	cmp	r0, #0
 8009d34:	d0be      	beq.n	8009cb4 <floor+0x44>
 8009d36:	2c00      	cmp	r4, #0
 8009d38:	da02      	bge.n	8009d40 <floor+0xd0>
 8009d3a:	2e14      	cmp	r6, #20
 8009d3c:	d103      	bne.n	8009d46 <floor+0xd6>
 8009d3e:	3401      	adds	r4, #1
 8009d40:	ea25 0508 	bic.w	r5, r5, r8
 8009d44:	e7b6      	b.n	8009cb4 <floor+0x44>
 8009d46:	2301      	movs	r3, #1
 8009d48:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8009d4c:	fa03 f606 	lsl.w	r6, r3, r6
 8009d50:	4435      	add	r5, r6
 8009d52:	42bd      	cmp	r5, r7
 8009d54:	bf38      	it	cc
 8009d56:	18e4      	addcc	r4, r4, r3
 8009d58:	e7f2      	b.n	8009d40 <floor+0xd0>
 8009d5a:	2500      	movs	r5, #0
 8009d5c:	462c      	mov	r4, r5
 8009d5e:	e7a9      	b.n	8009cb4 <floor+0x44>
 8009d60:	8800759c 	.word	0x8800759c
 8009d64:	7e37e43c 	.word	0x7e37e43c
 8009d68:	bff00000 	.word	0xbff00000
 8009d6c:	000fffff 	.word	0x000fffff

08009d70 <scalbn>:
 8009d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d72:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8009d76:	4604      	mov	r4, r0
 8009d78:	460d      	mov	r5, r1
 8009d7a:	4617      	mov	r7, r2
 8009d7c:	460b      	mov	r3, r1
 8009d7e:	b996      	cbnz	r6, 8009da6 <scalbn+0x36>
 8009d80:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009d84:	4303      	orrs	r3, r0
 8009d86:	d039      	beq.n	8009dfc <scalbn+0x8c>
 8009d88:	4b35      	ldr	r3, [pc, #212]	; (8009e60 <scalbn+0xf0>)
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	f7f6 fba4 	bl	80004d8 <__aeabi_dmul>
 8009d90:	4b34      	ldr	r3, [pc, #208]	; (8009e64 <scalbn+0xf4>)
 8009d92:	4604      	mov	r4, r0
 8009d94:	429f      	cmp	r7, r3
 8009d96:	460d      	mov	r5, r1
 8009d98:	da0f      	bge.n	8009dba <scalbn+0x4a>
 8009d9a:	a32d      	add	r3, pc, #180	; (adr r3, 8009e50 <scalbn+0xe0>)
 8009d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da0:	f7f6 fb9a 	bl	80004d8 <__aeabi_dmul>
 8009da4:	e006      	b.n	8009db4 <scalbn+0x44>
 8009da6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8009daa:	4296      	cmp	r6, r2
 8009dac:	d10a      	bne.n	8009dc4 <scalbn+0x54>
 8009dae:	4602      	mov	r2, r0
 8009db0:	f7f6 f9dc 	bl	800016c <__adddf3>
 8009db4:	4604      	mov	r4, r0
 8009db6:	460d      	mov	r5, r1
 8009db8:	e020      	b.n	8009dfc <scalbn+0x8c>
 8009dba:	460b      	mov	r3, r1
 8009dbc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8009dc0:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8009dc4:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8009dc8:	19b9      	adds	r1, r7, r6
 8009dca:	4291      	cmp	r1, r2
 8009dcc:	dd0e      	ble.n	8009dec <scalbn+0x7c>
 8009dce:	a322      	add	r3, pc, #136	; (adr r3, 8009e58 <scalbn+0xe8>)
 8009dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dd4:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8009dd8:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8009ddc:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8009de0:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8009de4:	4820      	ldr	r0, [pc, #128]	; (8009e68 <scalbn+0xf8>)
 8009de6:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8009dea:	e7d9      	b.n	8009da0 <scalbn+0x30>
 8009dec:	2900      	cmp	r1, #0
 8009dee:	dd08      	ble.n	8009e02 <scalbn+0x92>
 8009df0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009df4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009df8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8009dfc:	4620      	mov	r0, r4
 8009dfe:	4629      	mov	r1, r5
 8009e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e02:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8009e06:	da16      	bge.n	8009e36 <scalbn+0xc6>
 8009e08:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009e0c:	429f      	cmp	r7, r3
 8009e0e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8009e12:	dd08      	ble.n	8009e26 <scalbn+0xb6>
 8009e14:	4c15      	ldr	r4, [pc, #84]	; (8009e6c <scalbn+0xfc>)
 8009e16:	4814      	ldr	r0, [pc, #80]	; (8009e68 <scalbn+0xf8>)
 8009e18:	f363 74df 	bfi	r4, r3, #31, #1
 8009e1c:	a30e      	add	r3, pc, #56	; (adr r3, 8009e58 <scalbn+0xe8>)
 8009e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e22:	4621      	mov	r1, r4
 8009e24:	e7bc      	b.n	8009da0 <scalbn+0x30>
 8009e26:	4c12      	ldr	r4, [pc, #72]	; (8009e70 <scalbn+0x100>)
 8009e28:	4812      	ldr	r0, [pc, #72]	; (8009e74 <scalbn+0x104>)
 8009e2a:	f363 74df 	bfi	r4, r3, #31, #1
 8009e2e:	a308      	add	r3, pc, #32	; (adr r3, 8009e50 <scalbn+0xe0>)
 8009e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e34:	e7f5      	b.n	8009e22 <scalbn+0xb2>
 8009e36:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009e3a:	3136      	adds	r1, #54	; 0x36
 8009e3c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009e40:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8009e44:	4620      	mov	r0, r4
 8009e46:	4629      	mov	r1, r5
 8009e48:	2200      	movs	r2, #0
 8009e4a:	4b0b      	ldr	r3, [pc, #44]	; (8009e78 <scalbn+0x108>)
 8009e4c:	e7a8      	b.n	8009da0 <scalbn+0x30>
 8009e4e:	bf00      	nop
 8009e50:	c2f8f359 	.word	0xc2f8f359
 8009e54:	01a56e1f 	.word	0x01a56e1f
 8009e58:	8800759c 	.word	0x8800759c
 8009e5c:	7e37e43c 	.word	0x7e37e43c
 8009e60:	43500000 	.word	0x43500000
 8009e64:	ffff3cb0 	.word	0xffff3cb0
 8009e68:	8800759c 	.word	0x8800759c
 8009e6c:	7e37e43c 	.word	0x7e37e43c
 8009e70:	01a56e1f 	.word	0x01a56e1f
 8009e74:	c2f8f359 	.word	0xc2f8f359
 8009e78:	3c900000 	.word	0x3c900000

08009e7c <_init>:
 8009e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e7e:	bf00      	nop
 8009e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e82:	bc08      	pop	{r3}
 8009e84:	469e      	mov	lr, r3
 8009e86:	4770      	bx	lr

08009e88 <_fini>:
 8009e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e8a:	bf00      	nop
 8009e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e8e:	bc08      	pop	{r3}
 8009e90:	469e      	mov	lr, r3
 8009e92:	4770      	bx	lr

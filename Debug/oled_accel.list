
oled_accel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a104  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002778  0800a218  0800a218  0001a218  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c990  0800c990  0002027c  2**0
                  CONTENTS
  4 .ARM          00000000  0800c990  0800c990  0002027c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c990  0800c990  0002027c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c990  0800c990  0001c990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c994  0800c994  0001c994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000027c  20000000  0800c998  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000980  2000027c  0800cc14  0002027c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bfc  0800cc14  00020bfc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002027c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011ff3  00000000  00000000  000202a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000284d  00000000  00000000  00032298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea0  00000000  00000000  00034ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d88  00000000  00000000  00035988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001986c  00000000  00000000  00036710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010e77  00000000  00000000  0004ff7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cb06  00000000  00000000  00060df3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ed8f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005234  00000000  00000000  000ed94c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000027c 	.word	0x2000027c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a1fc 	.word	0x0800a1fc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000280 	.word	0x20000280
 800014c:	0800a1fc 	.word	0x0800a1fc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 0 */

uint8_t intButton;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	80fb      	strh	r3, [r7, #6]
	intButton = 1;
 800111a:	4b05      	ldr	r3, [pc, #20]	; (8001130 <HAL_GPIO_EXTI_Callback+0x20>)
 800111c:	2201      	movs	r2, #1
 800111e:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim2);
 8001120:	4804      	ldr	r0, [pc, #16]	; (8001134 <HAL_GPIO_EXTI_Callback+0x24>)
 8001122:	f002 feed 	bl	8003f00 <HAL_TIM_Base_Start_IT>
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000ac4 	.word	0x20000ac4
 8001134:	20000a7c 	.word	0x20000a7c

08001138 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]

//
//	HAL_TIM_Base_Stop_IT(&htim2);

	if(htim->Instance == TIM2)	//	Si la interrupcion proviene de TIM2 -> cambio de modo de display
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001148:	d161      	bne.n	800120e <HAL_TIM_PeriodElapsedCallback+0xd6>
	{

		if(intButton == 1)		//	Si se presionó el botón por más de dos segundos, cambiar de dist a ángulo o viceversa, según corresponda
 800114a:	4b3d      	ldr	r3, [pc, #244]	; (8001240 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	2b01      	cmp	r3, #1
 8001150:	d134      	bne.n	80011bc <HAL_TIM_PeriodElapsedCallback+0x84>
		{
			intButton = 0;
 8001152:	4b3b      	ldr	r3, [pc, #236]	; (8001240 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001154:	2200      	movs	r2, #0
 8001156:	701a      	strb	r2, [r3, #0]

			if(display_mode == 3)
 8001158:	4b3a      	ldr	r3, [pc, #232]	; (8001244 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b03      	cmp	r3, #3
 800115e:	d122      	bne.n	80011a6 <HAL_TIM_PeriodElapsedCallback+0x6e>
			{
				if(az_filter.out < 0.2)
 8001160:	4b39      	ldr	r3, [pc, #228]	; (8001248 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001162:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff f95e 	bl	8000428 <__aeabi_f2d>
 800116c:	a330      	add	r3, pc, #192	; (adr r3, 8001230 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800116e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001172:	f7ff fc23 	bl	80009bc <__aeabi_dcmplt>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d002      	beq.n	8001182 <HAL_TIM_PeriodElapsedCallback+0x4a>
					display_mode = 1;
 800117c:	4b31      	ldr	r3, [pc, #196]	; (8001244 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800117e:	2201      	movs	r2, #1
 8001180:	701a      	strb	r2, [r3, #0]

				if(az_filter.out > 0.8)
 8001182:	4b31      	ldr	r3, [pc, #196]	; (8001248 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001184:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff f94d 	bl	8000428 <__aeabi_f2d>
 800118e:	a32a      	add	r3, pc, #168	; (adr r3, 8001238 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001194:	f7ff fc30 	bl	80009f8 <__aeabi_dcmpgt>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d00e      	beq.n	80011bc <HAL_TIM_PeriodElapsedCallback+0x84>
					display_mode = 2;
 800119e:	4b29      	ldr	r3, [pc, #164]	; (8001244 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80011a0:	2202      	movs	r2, #2
 80011a2:	701a      	strb	r2, [r3, #0]
 80011a4:	e00a      	b.n	80011bc <HAL_TIM_PeriodElapsedCallback+0x84>
			}
			else
			{
				if(HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin))
 80011a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011aa:	4828      	ldr	r0, [pc, #160]	; (800124c <HAL_TIM_PeriodElapsedCallback+0x114>)
 80011ac:	f001 fa0a 	bl	80025c4 <HAL_GPIO_ReadPin>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d002      	beq.n	80011bc <HAL_TIM_PeriodElapsedCallback+0x84>
					display_mode = 3;
 80011b6:	4b23      	ldr	r3, [pc, #140]	; (8001244 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80011b8:	2203      	movs	r2, #3
 80011ba:	701a      	strb	r2, [r3, #0]
			}
		}

		if(display_mode != 3)
 80011bc:	4b21      	ldr	r3, [pc, #132]	; (8001244 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b03      	cmp	r3, #3
 80011c2:	d021      	beq.n	8001208 <HAL_TIM_PeriodElapsedCallback+0xd0>
		{
			if(az_filter.out < 0.2)
 80011c4:	4b20      	ldr	r3, [pc, #128]	; (8001248 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80011c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff f92c 	bl	8000428 <__aeabi_f2d>
 80011d0:	a317      	add	r3, pc, #92	; (adr r3, 8001230 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80011d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d6:	f7ff fbf1 	bl	80009bc <__aeabi_dcmplt>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d002      	beq.n	80011e6 <HAL_TIM_PeriodElapsedCallback+0xae>
				display_mode = 1;
 80011e0:	4b18      	ldr	r3, [pc, #96]	; (8001244 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80011e2:	2201      	movs	r2, #1
 80011e4:	701a      	strb	r2, [r3, #0]

			if(az_filter.out > 0.8)
 80011e6:	4b18      	ldr	r3, [pc, #96]	; (8001248 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80011e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff f91b 	bl	8000428 <__aeabi_f2d>
 80011f2:	a311      	add	r3, pc, #68	; (adr r3, 8001238 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80011f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f8:	f7ff fbfe 	bl	80009f8 <__aeabi_dcmpgt>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d002      	beq.n	8001208 <HAL_TIM_PeriodElapsedCallback+0xd0>
				display_mode = 2;
 8001202:	4b10      	ldr	r3, [pc, #64]	; (8001244 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001204:	2202      	movs	r2, #2
 8001206:	701a      	strb	r2, [r3, #0]
		}

		HAL_TIM_Base_Stop_IT(&htim2);
 8001208:	4811      	ldr	r0, [pc, #68]	; (8001250 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800120a:	f002 fecb 	bl	8003fa4 <HAL_TIM_Base_Stop_IT>
	}

	if(htim->Instance == TIM3)	//	Si la interrupcion proviene de TIM3 -> lectura de MPU6050
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a10      	ldr	r2, [pc, #64]	; (8001254 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d106      	bne.n	8001226 <HAL_TIM_PeriodElapsedCallback+0xee>
//		{
//			mpu6050_Get_Accel_Temp(&mpu6050);
//			angles_update(&mpu6050, &angles);
//		}

		mpu6050_Get_Accel_Temp(&mpu6050);
 8001218:	480f      	ldr	r0, [pc, #60]	; (8001258 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800121a:	f004 f98d 	bl	8005538 <mpu6050_Get_Accel_Temp>
		angles_update(&mpu6050, &angles);
 800121e:	490f      	ldr	r1, [pc, #60]	; (800125c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001220:	480d      	ldr	r0, [pc, #52]	; (8001258 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001222:	f003 fe19 	bl	8004e58 <angles_update>
	}

}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	9999999a 	.word	0x9999999a
 8001234:	3fc99999 	.word	0x3fc99999
 8001238:	9999999a 	.word	0x9999999a
 800123c:	3fe99999 	.word	0x3fe99999
 8001240:	20000ac4 	.word	0x20000ac4
 8001244:	20000298 	.word	0x20000298
 8001248:	20000924 	.word	0x20000924
 800124c:	40010c00 	.word	0x40010c00
 8001250:	20000a7c 	.word	0x20000a7c
 8001254:	40000400 	.word	0x40000400
 8001258:	2000029c 	.word	0x2000029c
 800125c:	200002b8 	.word	0x200002b8

08001260 <delay>:


void delay (uint16_t time)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 800126a:	4b08      	ldr	r3, [pc, #32]	; (800128c <delay+0x2c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2200      	movs	r2, #0
 8001270:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim1) < time);
 8001272:	bf00      	nop
 8001274:	4b05      	ldr	r3, [pc, #20]	; (800128c <delay+0x2c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800127a:	88fb      	ldrh	r3, [r7, #6]
 800127c:	429a      	cmp	r2, r3
 800127e:	d3f9      	bcc.n	8001274 <delay+0x14>
}
 8001280:	bf00      	nop
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	bc80      	pop	{r7}
 800128a:	4770      	bx	lr
 800128c:	200009ac 	.word	0x200009ac

08001290 <HAL_TIM_IC_CaptureCallback>:
#define TRIG_PORT CaptureTrigger_GPIO_Port

// Let's write the callback function

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	7f1b      	ldrb	r3, [r3, #28]
 800129c:	2b01      	cmp	r3, #1
 800129e:	f040 8083 	bne.w	80013a8 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (is_first_captured==0) // if the first value is not captured
 80012a2:	4b45      	ldr	r3, [pc, #276]	; (80013b8 <HAL_TIM_IC_CaptureCallback+0x128>)
 80012a4:	881b      	ldrh	r3, [r3, #0]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d11a      	bne.n	80012e0 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			captured_1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 80012aa:	2100      	movs	r1, #0
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f003 fa5d 	bl	800476c <HAL_TIM_ReadCapturedValue>
 80012b2:	4603      	mov	r3, r0
 80012b4:	4a41      	ldr	r2, [pc, #260]	; (80013bc <HAL_TIM_IC_CaptureCallback+0x12c>)
 80012b6:	6013      	str	r3, [r2, #0]
			is_first_captured = 1;  // set the first captured as true
 80012b8:	4b3f      	ldr	r3, [pc, #252]	; (80013b8 <HAL_TIM_IC_CaptureCallback+0x128>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	801a      	strh	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	6a1a      	ldr	r2, [r3, #32]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f022 020a 	bic.w	r2, r2, #10
 80012cc:	621a      	str	r2, [r3, #32]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	6a1a      	ldr	r2, [r3, #32]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f042 0202 	orr.w	r2, r2, #2
 80012dc:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 80012de:	e063      	b.n	80013a8 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (is_first_captured==1)   // if the first is already captured
 80012e0:	4b35      	ldr	r3, [pc, #212]	; (80013b8 <HAL_TIM_IC_CaptureCallback+0x128>)
 80012e2:	881b      	ldrh	r3, [r3, #0]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d15f      	bne.n	80013a8 <HAL_TIM_IC_CaptureCallback+0x118>
			captured_2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 80012e8:	2100      	movs	r1, #0
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f003 fa3e 	bl	800476c <HAL_TIM_ReadCapturedValue>
 80012f0:	4603      	mov	r3, r0
 80012f2:	4a33      	ldr	r2, [pc, #204]	; (80013c0 <HAL_TIM_IC_CaptureCallback+0x130>)
 80012f4:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2200      	movs	r2, #0
 80012fc:	625a      	str	r2, [r3, #36]	; 0x24
			if (captured_2 > captured_1)
 80012fe:	4b30      	ldr	r3, [pc, #192]	; (80013c0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	4b2e      	ldr	r3, [pc, #184]	; (80013bc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	429a      	cmp	r2, r3
 8001308:	d907      	bls.n	800131a <HAL_TIM_IC_CaptureCallback+0x8a>
				difference = captured_2-captured_1;
 800130a:	4b2d      	ldr	r3, [pc, #180]	; (80013c0 <HAL_TIM_IC_CaptureCallback+0x130>)
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	4b2b      	ldr	r3, [pc, #172]	; (80013bc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	4a2b      	ldr	r2, [pc, #172]	; (80013c4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001316:	6013      	str	r3, [r2, #0]
 8001318:	e00f      	b.n	800133a <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (captured_1 > captured_2)
 800131a:	4b28      	ldr	r3, [pc, #160]	; (80013bc <HAL_TIM_IC_CaptureCallback+0x12c>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	4b28      	ldr	r3, [pc, #160]	; (80013c0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	429a      	cmp	r2, r3
 8001324:	d909      	bls.n	800133a <HAL_TIM_IC_CaptureCallback+0xaa>
				difference = (0xffff - captured_1) + captured_2;
 8001326:	4b26      	ldr	r3, [pc, #152]	; (80013c0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	4b24      	ldr	r3, [pc, #144]	; (80013bc <HAL_TIM_IC_CaptureCallback+0x12c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001334:	33ff      	adds	r3, #255	; 0xff
 8001336:	4a23      	ldr	r2, [pc, #140]	; (80013c4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001338:	6013      	str	r3, [r2, #0]
			distance = difference * .034/2;
 800133a:	4b22      	ldr	r3, [pc, #136]	; (80013c4 <HAL_TIM_IC_CaptureCallback+0x134>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff f850 	bl	80003e4 <__aeabi_ui2d>
 8001344:	a31a      	add	r3, pc, #104	; (adr r3, 80013b0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8001346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134a:	f7ff f8c5 	bl	80004d8 <__aeabi_dmul>
 800134e:	4602      	mov	r2, r0
 8001350:	460b      	mov	r3, r1
 8001352:	4610      	mov	r0, r2
 8001354:	4619      	mov	r1, r3
 8001356:	f04f 0200 	mov.w	r2, #0
 800135a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800135e:	f7ff f9e5 	bl	800072c <__aeabi_ddiv>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	4610      	mov	r0, r2
 8001368:	4619      	mov	r1, r3
 800136a:	f7ff fb8d 	bl	8000a88 <__aeabi_d2uiz>
 800136e:	4603      	mov	r3, r0
 8001370:	b29a      	uxth	r2, r3
 8001372:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001374:	801a      	strh	r2, [r3, #0]
			is_first_captured = 0; // set it back to false
 8001376:	4b10      	ldr	r3, [pc, #64]	; (80013b8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001378:	2200      	movs	r2, #0
 800137a:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	6a1a      	ldr	r2, [r3, #32]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f022 020a 	bic.w	r2, r2, #10
 800138a:	621a      	str	r2, [r3, #32]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6a12      	ldr	r2, [r2, #32]
 8001396:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8001398:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <HAL_TIM_IC_CaptureCallback+0x13c>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	68da      	ldr	r2, [r3, #12]
 800139e:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <HAL_TIM_IC_CaptureCallback+0x13c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f022 0202 	bic.w	r2, r2, #2
 80013a6:	60da      	str	r2, [r3, #12]
}
 80013a8:	bf00      	nop
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	b020c49c 	.word	0xb020c49c
 80013b4:	3fa16872 	.word	0x3fa16872
 80013b8:	200002dc 	.word	0x200002dc
 80013bc:	200002d0 	.word	0x200002d0
 80013c0:	200002d4 	.word	0x200002d4
 80013c4:	200002d8 	.word	0x200002d8
 80013c8:	200002de 	.word	0x200002de
 80013cc:	200009ac 	.word	0x200009ac

080013d0 <HCSR04_Read>:

void HCSR04_Read (void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 80013d4:	2201      	movs	r2, #1
 80013d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013da:	480b      	ldr	r0, [pc, #44]	; (8001408 <HCSR04_Read+0x38>)
 80013dc:	f001 f909 	bl	80025f2 <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 80013e0:	200a      	movs	r0, #10
 80013e2:	f7ff ff3d 	bl	8001260 <delay>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 80013e6:	2200      	movs	r2, #0
 80013e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013ec:	4806      	ldr	r0, [pc, #24]	; (8001408 <HCSR04_Read+0x38>)
 80013ee:	f001 f900 	bl	80025f2 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 80013f2:	4b06      	ldr	r3, [pc, #24]	; (800140c <HCSR04_Read+0x3c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	68da      	ldr	r2, [r3, #12]
 80013f8:	4b04      	ldr	r3, [pc, #16]	; (800140c <HCSR04_Read+0x3c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f042 0202 	orr.w	r2, r2, #2
 8001400:	60da      	str	r2, [r3, #12]
}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40010800 	.word	0x40010800
 800140c:	200009ac 	.word	0x200009ac

08001410 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001414:	f000 fdbe 	bl	8001f94 <HAL_Init>

  /* USER CODE BEGIN Init */


  FIRFilter_Init(&az_filter);
 8001418:	4893      	ldr	r0, [pc, #588]	; (8001668 <main+0x258>)
 800141a:	f003 fca1 	bl	8004d60 <FIRFilter_Init>
  FIRFilter_Init(&angle_yx_filter);
 800141e:	4893      	ldr	r0, [pc, #588]	; (800166c <main+0x25c>)
 8001420:	f003 fc9e 	bl	8004d60 <FIRFilter_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001424:	f000 f934 	bl	8001690 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001428:	f000 fac6 	bl	80019b8 <MX_GPIO_Init>
  MX_TIM2_Init();
 800142c:	f000 fa28 	bl	8001880 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001430:	f000 f974 	bl	800171c <MX_I2C1_Init>
  MX_I2C2_Init();
 8001434:	f000 f9a0 	bl	8001778 <MX_I2C2_Init>
  MX_TIM3_Init();
 8001438:	f000 fa70 	bl	800191c <MX_TIM3_Init>
  MX_TIM1_Init();
 800143c:	f000 f9ca 	bl	80017d4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */


  mpu6050_Init(&mpu6050);
 8001440:	488b      	ldr	r0, [pc, #556]	; (8001670 <main+0x260>)
 8001442:	f004 f841 	bl	80054c8 <mpu6050_Init>
  ssd1306_Init();
 8001446:	f004 f94f 	bl	80056e8 <ssd1306_Init>
  gui_Init();
 800144a:	f003 fdc5 	bl	8004fd8 <gui_Init>

  gui_WelcomeScreen();
 800144e:	f003 fdc9 	bl	8004fe4 <gui_WelcomeScreen>
  //HAL_Delay(3000);
  HAL_Delay(200);
 8001452:	20c8      	movs	r0, #200	; 0xc8
 8001454:	f000 fe00 	bl	8002058 <HAL_Delay>

  HAL_TIM_Base_Start_IT(&htim3);
 8001458:	4886      	ldr	r0, [pc, #536]	; (8001674 <main+0x264>)
 800145a:	f002 fd51 	bl	8003f00 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 800145e:	2100      	movs	r1, #0
 8001460:	4885      	ldr	r0, [pc, #532]	; (8001678 <main+0x268>)
 8001462:	f002 fe1d 	bl	80040a0 <HAL_TIM_IC_Start_IT>
  HAL_Delay(200);
 8001466:	20c8      	movs	r0, #200	; 0xc8
 8001468:	f000 fdf6 	bl	8002058 <HAL_Delay>

  if(az_filter.out < 0.2)
 800146c:	4b7e      	ldr	r3, [pc, #504]	; (8001668 <main+0x258>)
 800146e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001472:	4618      	mov	r0, r3
 8001474:	f7fe ffd8 	bl	8000428 <__aeabi_f2d>
 8001478:	a371      	add	r3, pc, #452	; (adr r3, 8001640 <main+0x230>)
 800147a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147e:	f7ff fa9d 	bl	80009bc <__aeabi_dcmplt>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d002      	beq.n	800148e <main+0x7e>
	  display_mode = 1;
 8001488:	4b7c      	ldr	r3, [pc, #496]	; (800167c <main+0x26c>)
 800148a:	2201      	movs	r2, #1
 800148c:	701a      	strb	r2, [r3, #0]

  if(az_filter.out > 0.8)
 800148e:	4b76      	ldr	r3, [pc, #472]	; (8001668 <main+0x258>)
 8001490:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001494:	4618      	mov	r0, r3
 8001496:	f7fe ffc7 	bl	8000428 <__aeabi_f2d>
 800149a:	a36b      	add	r3, pc, #428	; (adr r3, 8001648 <main+0x238>)
 800149c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a0:	f7ff faaa 	bl	80009f8 <__aeabi_dcmpgt>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d002      	beq.n	80014b0 <main+0xa0>
	  display_mode = 2;
 80014aa:	4b74      	ldr	r3, [pc, #464]	; (800167c <main+0x26c>)
 80014ac:	2202      	movs	r2, #2
 80014ae:	701a      	strb	r2, [r3, #0]

  HAL_Delay(200);
 80014b0:	20c8      	movs	r0, #200	; 0xc8
 80014b2:	f000 fdd1 	bl	8002058 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	if( display_mode == 1 || display_mode == 2)
 80014b6:	4b71      	ldr	r3, [pc, #452]	; (800167c <main+0x26c>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d004      	beq.n	80014c8 <main+0xb8>
 80014be:	4b6f      	ldr	r3, [pc, #444]	; (800167c <main+0x26c>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	f040 80a5 	bne.w	8001612 <main+0x202>
	{
		if(display_mode == 1)
 80014c8:	4b6c      	ldr	r3, [pc, #432]	; (800167c <main+0x26c>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d12f      	bne.n	8001530 <main+0x120>
		{
			if((angles.yx > -0.3) && (angles.yx < 0.3) )
 80014d0:	4b6b      	ldr	r3, [pc, #428]	; (8001680 <main+0x270>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7fe ffa7 	bl	8000428 <__aeabi_f2d>
 80014da:	a35d      	add	r3, pc, #372	; (adr r3, 8001650 <main+0x240>)
 80014dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e0:	f7ff fa8a 	bl	80009f8 <__aeabi_dcmpgt>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d013      	beq.n	8001512 <main+0x102>
 80014ea:	4b65      	ldr	r3, [pc, #404]	; (8001680 <main+0x270>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7fe ff9a 	bl	8000428 <__aeabi_f2d>
 80014f4:	a358      	add	r3, pc, #352	; (adr r3, 8001658 <main+0x248>)
 80014f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fa:	f7ff fa5f 	bl	80009bc <__aeabi_dcmplt>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d006      	beq.n	8001512 <main+0x102>
				HAL_GPIO_WritePin(GPIOC, LED_Pin, 0);
 8001504:	2200      	movs	r2, #0
 8001506:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800150a:	485e      	ldr	r0, [pc, #376]	; (8001684 <main+0x274>)
 800150c:	f001 f871 	bl	80025f2 <HAL_GPIO_WritePin>
 8001510:	e005      	b.n	800151e <main+0x10e>
			else
				HAL_GPIO_WritePin(GPIOC, LED_Pin, 1);
 8001512:	2201      	movs	r2, #1
 8001514:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001518:	485a      	ldr	r0, [pc, #360]	; (8001684 <main+0x274>)
 800151a:	f001 f86a 	bl	80025f2 <HAL_GPIO_WritePin>

			gui_Bubble_1d(angles.yx, mpu6050.temp);
 800151e:	4b58      	ldr	r3, [pc, #352]	; (8001680 <main+0x270>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a53      	ldr	r2, [pc, #332]	; (8001670 <main+0x260>)
 8001524:	68d2      	ldr	r2, [r2, #12]
 8001526:	4611      	mov	r1, r2
 8001528:	4618      	mov	r0, r3
 800152a:	f003 fd97 	bl	800505c <gui_Bubble_1d>
 800152e:	e049      	b.n	80015c4 <main+0x1b4>
		}

		else
		{
			if((angles.yz > -0.3) && (angles.yz < 0.3) && (angles.xz > -0.3) && (angles.xz < 0.3) )
 8001530:	4b53      	ldr	r3, [pc, #332]	; (8001680 <main+0x270>)
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	4618      	mov	r0, r3
 8001536:	f7fe ff77 	bl	8000428 <__aeabi_f2d>
 800153a:	a345      	add	r3, pc, #276	; (adr r3, 8001650 <main+0x240>)
 800153c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001540:	f7ff fa5a 	bl	80009f8 <__aeabi_dcmpgt>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d02d      	beq.n	80015a6 <main+0x196>
 800154a:	4b4d      	ldr	r3, [pc, #308]	; (8001680 <main+0x270>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	4618      	mov	r0, r3
 8001550:	f7fe ff6a 	bl	8000428 <__aeabi_f2d>
 8001554:	a340      	add	r3, pc, #256	; (adr r3, 8001658 <main+0x248>)
 8001556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155a:	f7ff fa2f 	bl	80009bc <__aeabi_dcmplt>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d020      	beq.n	80015a6 <main+0x196>
 8001564:	4b46      	ldr	r3, [pc, #280]	; (8001680 <main+0x270>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	4618      	mov	r0, r3
 800156a:	f7fe ff5d 	bl	8000428 <__aeabi_f2d>
 800156e:	a338      	add	r3, pc, #224	; (adr r3, 8001650 <main+0x240>)
 8001570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001574:	f7ff fa40 	bl	80009f8 <__aeabi_dcmpgt>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d013      	beq.n	80015a6 <main+0x196>
 800157e:	4b40      	ldr	r3, [pc, #256]	; (8001680 <main+0x270>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	4618      	mov	r0, r3
 8001584:	f7fe ff50 	bl	8000428 <__aeabi_f2d>
 8001588:	a333      	add	r3, pc, #204	; (adr r3, 8001658 <main+0x248>)
 800158a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158e:	f7ff fa15 	bl	80009bc <__aeabi_dcmplt>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d006      	beq.n	80015a6 <main+0x196>
				HAL_GPIO_WritePin(GPIOC, LED_Pin, 0);
 8001598:	2200      	movs	r2, #0
 800159a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800159e:	4839      	ldr	r0, [pc, #228]	; (8001684 <main+0x274>)
 80015a0:	f001 f827 	bl	80025f2 <HAL_GPIO_WritePin>
 80015a4:	e005      	b.n	80015b2 <main+0x1a2>
			else
				HAL_GPIO_WritePin(GPIOC, LED_Pin, 1);
 80015a6:	2201      	movs	r2, #1
 80015a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015ac:	4835      	ldr	r0, [pc, #212]	; (8001684 <main+0x274>)
 80015ae:	f001 f820 	bl	80025f2 <HAL_GPIO_WritePin>

			gui_Bubble_2d(angles.yz, angles.xz, mpu6050.temp);
 80015b2:	4b33      	ldr	r3, [pc, #204]	; (8001680 <main+0x270>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	4a32      	ldr	r2, [pc, #200]	; (8001680 <main+0x270>)
 80015b8:	6851      	ldr	r1, [r2, #4]
 80015ba:	4a2d      	ldr	r2, [pc, #180]	; (8001670 <main+0x260>)
 80015bc:	68d2      	ldr	r2, [r2, #12]
 80015be:	4618      	mov	r0, r3
 80015c0:	f003 fe2e 	bl	8005220 <gui_Bubble_2d>
		}

		// Revisar como evaluar que el timer ya está corriendo, cosa de no iniciarlo más de una vez.
		if( ((az_filter.out < 0.3) && (display_mode != 1)) || ((az_filter.out > 0.7) && (display_mode != 2)) )
 80015c4:	4b28      	ldr	r3, [pc, #160]	; (8001668 <main+0x258>)
 80015c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7fe ff2c 	bl	8000428 <__aeabi_f2d>
 80015d0:	a321      	add	r3, pc, #132	; (adr r3, 8001658 <main+0x248>)
 80015d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d6:	f7ff f9f1 	bl	80009bc <__aeabi_dcmplt>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d003      	beq.n	80015e8 <main+0x1d8>
 80015e0:	4b26      	ldr	r3, [pc, #152]	; (800167c <main+0x26c>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d111      	bne.n	800160c <main+0x1fc>
 80015e8:	4b1f      	ldr	r3, [pc, #124]	; (8001668 <main+0x258>)
 80015ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7fe ff1a 	bl	8000428 <__aeabi_f2d>
 80015f4:	a31a      	add	r3, pc, #104	; (adr r3, 8001660 <main+0x250>)
 80015f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fa:	f7ff f9fd 	bl	80009f8 <__aeabi_dcmpgt>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d006      	beq.n	8001612 <main+0x202>
 8001604:	4b1d      	ldr	r3, [pc, #116]	; (800167c <main+0x26c>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b02      	cmp	r3, #2
 800160a:	d002      	beq.n	8001612 <main+0x202>
			HAL_TIM_Base_Start_IT(&htim2);
 800160c:	481e      	ldr	r0, [pc, #120]	; (8001688 <main+0x278>)
 800160e:	f002 fc77 	bl	8003f00 <HAL_TIM_Base_Start_IT>
	}

	if( display_mode == 3 )
 8001612:	4b1a      	ldr	r3, [pc, #104]	; (800167c <main+0x26c>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b03      	cmp	r3, #3
 8001618:	f47f af4d 	bne.w	80014b6 <main+0xa6>
	{
		  HCSR04_Read();
 800161c:	f7ff fed8 	bl	80013d0 <HCSR04_Read>

		  gui_Distance (distance, mpu6050.temp);
 8001620:	4b1a      	ldr	r3, [pc, #104]	; (800168c <main+0x27c>)
 8001622:	881b      	ldrh	r3, [r3, #0]
 8001624:	4a12      	ldr	r2, [pc, #72]	; (8001670 <main+0x260>)
 8001626:	68d2      	ldr	r2, [r2, #12]
 8001628:	4611      	mov	r1, r2
 800162a:	4618      	mov	r0, r3
 800162c:	f003 ff12 	bl	8005454 <gui_Distance>

		  ssd1306_UpdateScreen();
 8001630:	f004 f8e6 	bl	8005800 <ssd1306_UpdateScreen>
		  HAL_Delay(60);
 8001634:	203c      	movs	r0, #60	; 0x3c
 8001636:	f000 fd0f 	bl	8002058 <HAL_Delay>
	if( display_mode == 1 || display_mode == 2)
 800163a:	e73c      	b.n	80014b6 <main+0xa6>
 800163c:	f3af 8000 	nop.w
 8001640:	9999999a 	.word	0x9999999a
 8001644:	3fc99999 	.word	0x3fc99999
 8001648:	9999999a 	.word	0x9999999a
 800164c:	3fe99999 	.word	0x3fe99999
 8001650:	33333333 	.word	0x33333333
 8001654:	bfd33333 	.word	0xbfd33333
 8001658:	33333333 	.word	0x33333333
 800165c:	3fd33333 	.word	0x3fd33333
 8001660:	66666666 	.word	0x66666666
 8001664:	3fe66666 	.word	0x3fe66666
 8001668:	20000924 	.word	0x20000924
 800166c:	20000714 	.word	0x20000714
 8001670:	2000029c 	.word	0x2000029c
 8001674:	200008dc 	.word	0x200008dc
 8001678:	200009ac 	.word	0x200009ac
 800167c:	20000298 	.word	0x20000298
 8001680:	200002b8 	.word	0x200002b8
 8001684:	40011000 	.word	0x40011000
 8001688:	20000a7c 	.word	0x20000a7c
 800168c:	200002de 	.word	0x200002de

08001690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b090      	sub	sp, #64	; 0x40
 8001694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001696:	f107 0318 	add.w	r3, r7, #24
 800169a:	2228      	movs	r2, #40	; 0x28
 800169c:	2100      	movs	r1, #0
 800169e:	4618      	mov	r0, r3
 80016a0:	f004 fb9c 	bl	8005ddc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016a4:	1d3b      	adds	r3, r7, #4
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	605a      	str	r2, [r3, #4]
 80016ac:	609a      	str	r2, [r3, #8]
 80016ae:	60da      	str	r2, [r3, #12]
 80016b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016b2:	2301      	movs	r3, #1
 80016b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80016bc:	2300      	movs	r3, #0
 80016be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016c0:	2301      	movs	r3, #1
 80016c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016c4:	2302      	movs	r3, #2
 80016c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80016ce:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80016d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016d4:	f107 0318 	add.w	r3, r7, #24
 80016d8:	4618      	mov	r0, r3
 80016da:	f001 ffbb 	bl	8003654 <HAL_RCC_OscConfig>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80016e4:	f000 f9f0 	bl	8001ac8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016e8:	230f      	movs	r3, #15
 80016ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ec:	2302      	movs	r3, #2
 80016ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016f0:	2300      	movs	r3, #0
 80016f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016fa:	2300      	movs	r3, #0
 80016fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016fe:	1d3b      	adds	r3, r7, #4
 8001700:	2102      	movs	r1, #2
 8001702:	4618      	mov	r0, r3
 8001704:	f002 fa26 	bl	8003b54 <HAL_RCC_ClockConfig>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800170e:	f000 f9db 	bl	8001ac8 <Error_Handler>
  }
}
 8001712:	bf00      	nop
 8001714:	3740      	adds	r7, #64	; 0x40
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
	...

0800171c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001720:	4b12      	ldr	r3, [pc, #72]	; (800176c <MX_I2C1_Init+0x50>)
 8001722:	4a13      	ldr	r2, [pc, #76]	; (8001770 <MX_I2C1_Init+0x54>)
 8001724:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001726:	4b11      	ldr	r3, [pc, #68]	; (800176c <MX_I2C1_Init+0x50>)
 8001728:	4a12      	ldr	r2, [pc, #72]	; (8001774 <MX_I2C1_Init+0x58>)
 800172a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800172c:	4b0f      	ldr	r3, [pc, #60]	; (800176c <MX_I2C1_Init+0x50>)
 800172e:	2200      	movs	r2, #0
 8001730:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001732:	4b0e      	ldr	r3, [pc, #56]	; (800176c <MX_I2C1_Init+0x50>)
 8001734:	2200      	movs	r2, #0
 8001736:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001738:	4b0c      	ldr	r3, [pc, #48]	; (800176c <MX_I2C1_Init+0x50>)
 800173a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800173e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001740:	4b0a      	ldr	r3, [pc, #40]	; (800176c <MX_I2C1_Init+0x50>)
 8001742:	2200      	movs	r2, #0
 8001744:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001746:	4b09      	ldr	r3, [pc, #36]	; (800176c <MX_I2C1_Init+0x50>)
 8001748:	2200      	movs	r2, #0
 800174a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800174c:	4b07      	ldr	r3, [pc, #28]	; (800176c <MX_I2C1_Init+0x50>)
 800174e:	2200      	movs	r2, #0
 8001750:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001752:	4b06      	ldr	r3, [pc, #24]	; (800176c <MX_I2C1_Init+0x50>)
 8001754:	2200      	movs	r2, #0
 8001756:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001758:	4804      	ldr	r0, [pc, #16]	; (800176c <MX_I2C1_Init+0x50>)
 800175a:	f000 ff7b 	bl	8002654 <HAL_I2C_Init>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001764:	f000 f9b0 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}
 800176c:	2000079c 	.word	0x2000079c
 8001770:	40005400 	.word	0x40005400
 8001774:	000186a0 	.word	0x000186a0

08001778 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800177c:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <MX_I2C2_Init+0x50>)
 800177e:	4a13      	ldr	r2, [pc, #76]	; (80017cc <MX_I2C2_Init+0x54>)
 8001780:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001782:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <MX_I2C2_Init+0x50>)
 8001784:	4a12      	ldr	r2, [pc, #72]	; (80017d0 <MX_I2C2_Init+0x58>)
 8001786:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001788:	4b0f      	ldr	r3, [pc, #60]	; (80017c8 <MX_I2C2_Init+0x50>)
 800178a:	2200      	movs	r2, #0
 800178c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800178e:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <MX_I2C2_Init+0x50>)
 8001790:	2200      	movs	r2, #0
 8001792:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001794:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <MX_I2C2_Init+0x50>)
 8001796:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800179a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800179c:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <MX_I2C2_Init+0x50>)
 800179e:	2200      	movs	r2, #0
 80017a0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80017a2:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <MX_I2C2_Init+0x50>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017a8:	4b07      	ldr	r3, [pc, #28]	; (80017c8 <MX_I2C2_Init+0x50>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017ae:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <MX_I2C2_Init+0x50>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80017b4:	4804      	ldr	r0, [pc, #16]	; (80017c8 <MX_I2C2_Init+0x50>)
 80017b6:	f000 ff4d 	bl	8002654 <HAL_I2C_Init>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80017c0:	f000 f982 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80017c4:	bf00      	nop
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20000878 	.word	0x20000878
 80017cc:	40005800 	.word	0x40005800
 80017d0:	000186a0 	.word	0x000186a0

080017d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017da:	f107 0310 	add.w	r3, r7, #16
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80017e4:	463b      	mov	r3, r7
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	605a      	str	r2, [r3, #4]
 80017ec:	609a      	str	r2, [r3, #8]
 80017ee:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017f0:	4b21      	ldr	r3, [pc, #132]	; (8001878 <MX_TIM1_Init+0xa4>)
 80017f2:	4a22      	ldr	r2, [pc, #136]	; (800187c <MX_TIM1_Init+0xa8>)
 80017f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80017f6:	4b20      	ldr	r3, [pc, #128]	; (8001878 <MX_TIM1_Init+0xa4>)
 80017f8:	2247      	movs	r2, #71	; 0x47
 80017fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017fc:	4b1e      	ldr	r3, [pc, #120]	; (8001878 <MX_TIM1_Init+0xa4>)
 80017fe:	2200      	movs	r2, #0
 8001800:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xfffe;
 8001802:	4b1d      	ldr	r3, [pc, #116]	; (8001878 <MX_TIM1_Init+0xa4>)
 8001804:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001808:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800180a:	4b1b      	ldr	r3, [pc, #108]	; (8001878 <MX_TIM1_Init+0xa4>)
 800180c:	2200      	movs	r2, #0
 800180e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001810:	4b19      	ldr	r3, [pc, #100]	; (8001878 <MX_TIM1_Init+0xa4>)
 8001812:	2200      	movs	r2, #0
 8001814:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001816:	4b18      	ldr	r3, [pc, #96]	; (8001878 <MX_TIM1_Init+0xa4>)
 8001818:	2200      	movs	r2, #0
 800181a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800181c:	4816      	ldr	r0, [pc, #88]	; (8001878 <MX_TIM1_Init+0xa4>)
 800181e:	f002 fbef 	bl	8004000 <HAL_TIM_IC_Init>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001828:	f000 f94e 	bl	8001ac8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800182c:	2300      	movs	r3, #0
 800182e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001830:	2300      	movs	r3, #0
 8001832:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001834:	f107 0310 	add.w	r3, r7, #16
 8001838:	4619      	mov	r1, r3
 800183a:	480f      	ldr	r0, [pc, #60]	; (8001878 <MX_TIM1_Init+0xa4>)
 800183c:	f003 fa20 	bl	8004c80 <HAL_TIMEx_MasterConfigSynchronization>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001846:	f000 f93f 	bl	8001ac8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800184a:	2300      	movs	r3, #0
 800184c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800184e:	2301      	movs	r3, #1
 8001850:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001852:	2300      	movs	r3, #0
 8001854:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001856:	2300      	movs	r3, #0
 8001858:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800185a:	463b      	mov	r3, r7
 800185c:	2200      	movs	r2, #0
 800185e:	4619      	mov	r1, r3
 8001860:	4805      	ldr	r0, [pc, #20]	; (8001878 <MX_TIM1_Init+0xa4>)
 8001862:	f002 fe2b 	bl	80044bc <HAL_TIM_IC_ConfigChannel>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 800186c:	f000 f92c 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001870:	bf00      	nop
 8001872:	3718      	adds	r7, #24
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	200009ac 	.word	0x200009ac
 800187c:	40012c00 	.word	0x40012c00

08001880 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001886:	f107 0308 	add.w	r3, r7, #8
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	605a      	str	r2, [r3, #4]
 8001890:	609a      	str	r2, [r3, #8]
 8001892:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001894:	463b      	mov	r3, r7
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800189c:	4b1e      	ldr	r3, [pc, #120]	; (8001918 <MX_TIM2_Init+0x98>)
 800189e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000;
 80018a4:	4b1c      	ldr	r3, [pc, #112]	; (8001918 <MX_TIM2_Init+0x98>)
 80018a6:	f242 7210 	movw	r2, #10000	; 0x2710
 80018aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ac:	4b1a      	ldr	r3, [pc, #104]	; (8001918 <MX_TIM2_Init+0x98>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7200;
 80018b2:	4b19      	ldr	r3, [pc, #100]	; (8001918 <MX_TIM2_Init+0x98>)
 80018b4:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 80018b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ba:	4b17      	ldr	r3, [pc, #92]	; (8001918 <MX_TIM2_Init+0x98>)
 80018bc:	2200      	movs	r2, #0
 80018be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018c0:	4b15      	ldr	r3, [pc, #84]	; (8001918 <MX_TIM2_Init+0x98>)
 80018c2:	2280      	movs	r2, #128	; 0x80
 80018c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018c6:	4814      	ldr	r0, [pc, #80]	; (8001918 <MX_TIM2_Init+0x98>)
 80018c8:	f002 faca 	bl	8003e60 <HAL_TIM_Base_Init>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80018d2:	f000 f8f9 	bl	8001ac8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018dc:	f107 0308 	add.w	r3, r7, #8
 80018e0:	4619      	mov	r1, r3
 80018e2:	480d      	ldr	r0, [pc, #52]	; (8001918 <MX_TIM2_Init+0x98>)
 80018e4:	f002 fe7e 	bl	80045e4 <HAL_TIM_ConfigClockSource>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80018ee:	f000 f8eb 	bl	8001ac8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018f2:	2300      	movs	r3, #0
 80018f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018f6:	2300      	movs	r3, #0
 80018f8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018fa:	463b      	mov	r3, r7
 80018fc:	4619      	mov	r1, r3
 80018fe:	4806      	ldr	r0, [pc, #24]	; (8001918 <MX_TIM2_Init+0x98>)
 8001900:	f003 f9be 	bl	8004c80 <HAL_TIMEx_MasterConfigSynchronization>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800190a:	f000 f8dd 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800190e:	bf00      	nop
 8001910:	3718      	adds	r7, #24
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000a7c 	.word	0x20000a7c

0800191c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001922:	f107 0308 	add.w	r3, r7, #8
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	605a      	str	r2, [r3, #4]
 800192c:	609a      	str	r2, [r3, #8]
 800192e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001930:	463b      	mov	r3, r7
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001938:	4b1d      	ldr	r3, [pc, #116]	; (80019b0 <MX_TIM3_Init+0x94>)
 800193a:	4a1e      	ldr	r2, [pc, #120]	; (80019b4 <MX_TIM3_Init+0x98>)
 800193c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 720;
 800193e:	4b1c      	ldr	r3, [pc, #112]	; (80019b0 <MX_TIM3_Init+0x94>)
 8001940:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8001944:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001946:	4b1a      	ldr	r3, [pc, #104]	; (80019b0 <MX_TIM3_Init+0x94>)
 8001948:	2200      	movs	r2, #0
 800194a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500;
 800194c:	4b18      	ldr	r3, [pc, #96]	; (80019b0 <MX_TIM3_Init+0x94>)
 800194e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001952:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001954:	4b16      	ldr	r3, [pc, #88]	; (80019b0 <MX_TIM3_Init+0x94>)
 8001956:	2200      	movs	r2, #0
 8001958:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800195a:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <MX_TIM3_Init+0x94>)
 800195c:	2200      	movs	r2, #0
 800195e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001960:	4813      	ldr	r0, [pc, #76]	; (80019b0 <MX_TIM3_Init+0x94>)
 8001962:	f002 fa7d 	bl	8003e60 <HAL_TIM_Base_Init>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800196c:	f000 f8ac 	bl	8001ac8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001970:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001974:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001976:	f107 0308 	add.w	r3, r7, #8
 800197a:	4619      	mov	r1, r3
 800197c:	480c      	ldr	r0, [pc, #48]	; (80019b0 <MX_TIM3_Init+0x94>)
 800197e:	f002 fe31 	bl	80045e4 <HAL_TIM_ConfigClockSource>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001988:	f000 f89e 	bl	8001ac8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800198c:	2300      	movs	r3, #0
 800198e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001990:	2300      	movs	r3, #0
 8001992:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001994:	463b      	mov	r3, r7
 8001996:	4619      	mov	r1, r3
 8001998:	4805      	ldr	r0, [pc, #20]	; (80019b0 <MX_TIM3_Init+0x94>)
 800199a:	f003 f971 	bl	8004c80 <HAL_TIMEx_MasterConfigSynchronization>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80019a4:	f000 f890 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80019a8:	bf00      	nop
 80019aa:	3718      	adds	r7, #24
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	200008dc 	.word	0x200008dc
 80019b4:	40000400 	.word	0x40000400

080019b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b088      	sub	sp, #32
 80019bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019be:	f107 0310 	add.w	r3, r7, #16
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	605a      	str	r2, [r3, #4]
 80019c8:	609a      	str	r2, [r3, #8]
 80019ca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019cc:	4b39      	ldr	r3, [pc, #228]	; (8001ab4 <MX_GPIO_Init+0xfc>)
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	4a38      	ldr	r2, [pc, #224]	; (8001ab4 <MX_GPIO_Init+0xfc>)
 80019d2:	f043 0310 	orr.w	r3, r3, #16
 80019d6:	6193      	str	r3, [r2, #24]
 80019d8:	4b36      	ldr	r3, [pc, #216]	; (8001ab4 <MX_GPIO_Init+0xfc>)
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	f003 0310 	and.w	r3, r3, #16
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019e4:	4b33      	ldr	r3, [pc, #204]	; (8001ab4 <MX_GPIO_Init+0xfc>)
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	4a32      	ldr	r2, [pc, #200]	; (8001ab4 <MX_GPIO_Init+0xfc>)
 80019ea:	f043 0320 	orr.w	r3, r3, #32
 80019ee:	6193      	str	r3, [r2, #24]
 80019f0:	4b30      	ldr	r3, [pc, #192]	; (8001ab4 <MX_GPIO_Init+0xfc>)
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	f003 0320 	and.w	r3, r3, #32
 80019f8:	60bb      	str	r3, [r7, #8]
 80019fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019fc:	4b2d      	ldr	r3, [pc, #180]	; (8001ab4 <MX_GPIO_Init+0xfc>)
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	4a2c      	ldr	r2, [pc, #176]	; (8001ab4 <MX_GPIO_Init+0xfc>)
 8001a02:	f043 0308 	orr.w	r3, r3, #8
 8001a06:	6193      	str	r3, [r2, #24]
 8001a08:	4b2a      	ldr	r3, [pc, #168]	; (8001ab4 <MX_GPIO_Init+0xfc>)
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	f003 0308 	and.w	r3, r3, #8
 8001a10:	607b      	str	r3, [r7, #4]
 8001a12:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a14:	4b27      	ldr	r3, [pc, #156]	; (8001ab4 <MX_GPIO_Init+0xfc>)
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	4a26      	ldr	r2, [pc, #152]	; (8001ab4 <MX_GPIO_Init+0xfc>)
 8001a1a:	f043 0304 	orr.w	r3, r3, #4
 8001a1e:	6193      	str	r3, [r2, #24]
 8001a20:	4b24      	ldr	r3, [pc, #144]	; (8001ab4 <MX_GPIO_Init+0xfc>)
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	f003 0304 	and.w	r3, r3, #4
 8001a28:	603b      	str	r3, [r7, #0]
 8001a2a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a32:	4821      	ldr	r0, [pc, #132]	; (8001ab8 <MX_GPIO_Init+0x100>)
 8001a34:	f000 fddd 	bl	80025f2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CaptureTrigger_GPIO_Port, CaptureTrigger_Pin, GPIO_PIN_RESET);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a3e:	481f      	ldr	r0, [pc, #124]	; (8001abc <MX_GPIO_Init+0x104>)
 8001a40:	f000 fdd7 	bl	80025f2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001a44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a52:	2302      	movs	r3, #2
 8001a54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001a56:	f107 0310 	add.w	r3, r7, #16
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4816      	ldr	r0, [pc, #88]	; (8001ab8 <MX_GPIO_Init+0x100>)
 8001a5e:	f000 fc2d 	bl	80022bc <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8001a62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a68:	4b15      	ldr	r3, [pc, #84]	; (8001ac0 <MX_GPIO_Init+0x108>)
 8001a6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8001a70:	f107 0310 	add.w	r3, r7, #16
 8001a74:	4619      	mov	r1, r3
 8001a76:	4813      	ldr	r0, [pc, #76]	; (8001ac4 <MX_GPIO_Init+0x10c>)
 8001a78:	f000 fc20 	bl	80022bc <HAL_GPIO_Init>

  /*Configure GPIO pin : CaptureTrigger_Pin */
  GPIO_InitStruct.Pin = CaptureTrigger_Pin;
 8001a7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a82:	2301      	movs	r3, #1
 8001a84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CaptureTrigger_GPIO_Port, &GPIO_InitStruct);
 8001a8e:	f107 0310 	add.w	r3, r7, #16
 8001a92:	4619      	mov	r1, r3
 8001a94:	4809      	ldr	r0, [pc, #36]	; (8001abc <MX_GPIO_Init+0x104>)
 8001a96:	f000 fc11 	bl	80022bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	2028      	movs	r0, #40	; 0x28
 8001aa0:	f000 fbd5 	bl	800224e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001aa4:	2028      	movs	r0, #40	; 0x28
 8001aa6:	f000 fbee 	bl	8002286 <HAL_NVIC_EnableIRQ>

}
 8001aaa:	bf00      	nop
 8001aac:	3720      	adds	r7, #32
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	40011000 	.word	0x40011000
 8001abc:	40010800 	.word	0x40010800
 8001ac0:	10110000 	.word	0x10110000
 8001ac4:	40010c00 	.word	0x40010c00

08001ac8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001acc:	b672      	cpsid	i
}
 8001ace:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ad0:	e7fe      	b.n	8001ad0 <Error_Handler+0x8>
	...

08001ad4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ada:	4b15      	ldr	r3, [pc, #84]	; (8001b30 <HAL_MspInit+0x5c>)
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	4a14      	ldr	r2, [pc, #80]	; (8001b30 <HAL_MspInit+0x5c>)
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	6193      	str	r3, [r2, #24]
 8001ae6:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <HAL_MspInit+0x5c>)
 8001ae8:	699b      	ldr	r3, [r3, #24]
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	60bb      	str	r3, [r7, #8]
 8001af0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001af2:	4b0f      	ldr	r3, [pc, #60]	; (8001b30 <HAL_MspInit+0x5c>)
 8001af4:	69db      	ldr	r3, [r3, #28]
 8001af6:	4a0e      	ldr	r2, [pc, #56]	; (8001b30 <HAL_MspInit+0x5c>)
 8001af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001afc:	61d3      	str	r3, [r2, #28]
 8001afe:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <HAL_MspInit+0x5c>)
 8001b00:	69db      	ldr	r3, [r3, #28]
 8001b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b06:	607b      	str	r3, [r7, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b0a:	4b0a      	ldr	r3, [pc, #40]	; (8001b34 <HAL_MspInit+0x60>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	4a04      	ldr	r2, [pc, #16]	; (8001b34 <HAL_MspInit+0x60>)
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b26:	bf00      	nop
 8001b28:	3714      	adds	r7, #20
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr
 8001b30:	40021000 	.word	0x40021000
 8001b34:	40010000 	.word	0x40010000

08001b38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b08a      	sub	sp, #40	; 0x28
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b40:	f107 0318 	add.w	r3, r7, #24
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a2b      	ldr	r2, [pc, #172]	; (8001c00 <HAL_I2C_MspInit+0xc8>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d124      	bne.n	8001ba2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b58:	4b2a      	ldr	r3, [pc, #168]	; (8001c04 <HAL_I2C_MspInit+0xcc>)
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	4a29      	ldr	r2, [pc, #164]	; (8001c04 <HAL_I2C_MspInit+0xcc>)
 8001b5e:	f043 0308 	orr.w	r3, r3, #8
 8001b62:	6193      	str	r3, [r2, #24]
 8001b64:	4b27      	ldr	r3, [pc, #156]	; (8001c04 <HAL_I2C_MspInit+0xcc>)
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	f003 0308 	and.w	r3, r3, #8
 8001b6c:	617b      	str	r3, [r7, #20]
 8001b6e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b70:	23c0      	movs	r3, #192	; 0xc0
 8001b72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b74:	2312      	movs	r3, #18
 8001b76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b7c:	f107 0318 	add.w	r3, r7, #24
 8001b80:	4619      	mov	r1, r3
 8001b82:	4821      	ldr	r0, [pc, #132]	; (8001c08 <HAL_I2C_MspInit+0xd0>)
 8001b84:	f000 fb9a 	bl	80022bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b88:	4b1e      	ldr	r3, [pc, #120]	; (8001c04 <HAL_I2C_MspInit+0xcc>)
 8001b8a:	69db      	ldr	r3, [r3, #28]
 8001b8c:	4a1d      	ldr	r2, [pc, #116]	; (8001c04 <HAL_I2C_MspInit+0xcc>)
 8001b8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b92:	61d3      	str	r3, [r2, #28]
 8001b94:	4b1b      	ldr	r3, [pc, #108]	; (8001c04 <HAL_I2C_MspInit+0xcc>)
 8001b96:	69db      	ldr	r3, [r3, #28]
 8001b98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b9c:	613b      	str	r3, [r7, #16]
 8001b9e:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001ba0:	e029      	b.n	8001bf6 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a19      	ldr	r2, [pc, #100]	; (8001c0c <HAL_I2C_MspInit+0xd4>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d124      	bne.n	8001bf6 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bac:	4b15      	ldr	r3, [pc, #84]	; (8001c04 <HAL_I2C_MspInit+0xcc>)
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	4a14      	ldr	r2, [pc, #80]	; (8001c04 <HAL_I2C_MspInit+0xcc>)
 8001bb2:	f043 0308 	orr.w	r3, r3, #8
 8001bb6:	6193      	str	r3, [r2, #24]
 8001bb8:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <HAL_I2C_MspInit+0xcc>)
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	f003 0308 	and.w	r3, r3, #8
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001bc4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bca:	2312      	movs	r3, #18
 8001bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bd2:	f107 0318 	add.w	r3, r7, #24
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	480b      	ldr	r0, [pc, #44]	; (8001c08 <HAL_I2C_MspInit+0xd0>)
 8001bda:	f000 fb6f 	bl	80022bc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001bde:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <HAL_I2C_MspInit+0xcc>)
 8001be0:	69db      	ldr	r3, [r3, #28]
 8001be2:	4a08      	ldr	r2, [pc, #32]	; (8001c04 <HAL_I2C_MspInit+0xcc>)
 8001be4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001be8:	61d3      	str	r3, [r2, #28]
 8001bea:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <HAL_I2C_MspInit+0xcc>)
 8001bec:	69db      	ldr	r3, [r3, #28]
 8001bee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bf2:	60bb      	str	r3, [r7, #8]
 8001bf4:	68bb      	ldr	r3, [r7, #8]
}
 8001bf6:	bf00      	nop
 8001bf8:	3728      	adds	r7, #40	; 0x28
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40005400 	.word	0x40005400
 8001c04:	40021000 	.word	0x40021000
 8001c08:	40010c00 	.word	0x40010c00
 8001c0c:	40005800 	.word	0x40005800

08001c10 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b088      	sub	sp, #32
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c18:	f107 0310 	add.w	r3, r7, #16
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	605a      	str	r2, [r3, #4]
 8001c22:	609a      	str	r2, [r3, #8]
 8001c24:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM1)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a1a      	ldr	r2, [pc, #104]	; (8001c94 <HAL_TIM_IC_MspInit+0x84>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d12c      	bne.n	8001c8a <HAL_TIM_IC_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c30:	4b19      	ldr	r3, [pc, #100]	; (8001c98 <HAL_TIM_IC_MspInit+0x88>)
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	4a18      	ldr	r2, [pc, #96]	; (8001c98 <HAL_TIM_IC_MspInit+0x88>)
 8001c36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c3a:	6193      	str	r3, [r2, #24]
 8001c3c:	4b16      	ldr	r3, [pc, #88]	; (8001c98 <HAL_TIM_IC_MspInit+0x88>)
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c44:	60fb      	str	r3, [r7, #12]
 8001c46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c48:	4b13      	ldr	r3, [pc, #76]	; (8001c98 <HAL_TIM_IC_MspInit+0x88>)
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	4a12      	ldr	r2, [pc, #72]	; (8001c98 <HAL_TIM_IC_MspInit+0x88>)
 8001c4e:	f043 0304 	orr.w	r3, r3, #4
 8001c52:	6193      	str	r3, [r2, #24]
 8001c54:	4b10      	ldr	r3, [pc, #64]	; (8001c98 <HAL_TIM_IC_MspInit+0x88>)
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	f003 0304 	and.w	r3, r3, #4
 8001c5c:	60bb      	str	r3, [r7, #8]
 8001c5e:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c64:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c66:	2300      	movs	r3, #0
 8001c68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c6e:	f107 0310 	add.w	r3, r7, #16
 8001c72:	4619      	mov	r1, r3
 8001c74:	4809      	ldr	r0, [pc, #36]	; (8001c9c <HAL_TIM_IC_MspInit+0x8c>)
 8001c76:	f000 fb21 	bl	80022bc <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	201b      	movs	r0, #27
 8001c80:	f000 fae5 	bl	800224e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001c84:	201b      	movs	r0, #27
 8001c86:	f000 fafe 	bl	8002286 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001c8a:	bf00      	nop
 8001c8c:	3720      	adds	r7, #32
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40012c00 	.word	0x40012c00
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	40010800 	.word	0x40010800

08001ca0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cb0:	d114      	bne.n	8001cdc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cb2:	4b19      	ldr	r3, [pc, #100]	; (8001d18 <HAL_TIM_Base_MspInit+0x78>)
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	4a18      	ldr	r2, [pc, #96]	; (8001d18 <HAL_TIM_Base_MspInit+0x78>)
 8001cb8:	f043 0301 	orr.w	r3, r3, #1
 8001cbc:	61d3      	str	r3, [r2, #28]
 8001cbe:	4b16      	ldr	r3, [pc, #88]	; (8001d18 <HAL_TIM_Base_MspInit+0x78>)
 8001cc0:	69db      	ldr	r3, [r3, #28]
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001cca:	2200      	movs	r2, #0
 8001ccc:	2100      	movs	r1, #0
 8001cce:	201c      	movs	r0, #28
 8001cd0:	f000 fabd 	bl	800224e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001cd4:	201c      	movs	r0, #28
 8001cd6:	f000 fad6 	bl	8002286 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001cda:	e018      	b.n	8001d0e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a0e      	ldr	r2, [pc, #56]	; (8001d1c <HAL_TIM_Base_MspInit+0x7c>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d113      	bne.n	8001d0e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ce6:	4b0c      	ldr	r3, [pc, #48]	; (8001d18 <HAL_TIM_Base_MspInit+0x78>)
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	4a0b      	ldr	r2, [pc, #44]	; (8001d18 <HAL_TIM_Base_MspInit+0x78>)
 8001cec:	f043 0302 	orr.w	r3, r3, #2
 8001cf0:	61d3      	str	r3, [r2, #28]
 8001cf2:	4b09      	ldr	r3, [pc, #36]	; (8001d18 <HAL_TIM_Base_MspInit+0x78>)
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	60bb      	str	r3, [r7, #8]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001cfe:	2200      	movs	r2, #0
 8001d00:	2100      	movs	r1, #0
 8001d02:	201d      	movs	r0, #29
 8001d04:	f000 faa3 	bl	800224e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d08:	201d      	movs	r0, #29
 8001d0a:	f000 fabc 	bl	8002286 <HAL_NVIC_EnableIRQ>
}
 8001d0e:	bf00      	nop
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	40000400 	.word	0x40000400

08001d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d24:	e7fe      	b.n	8001d24 <NMI_Handler+0x4>

08001d26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d26:	b480      	push	{r7}
 8001d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d2a:	e7fe      	b.n	8001d2a <HardFault_Handler+0x4>

08001d2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d30:	e7fe      	b.n	8001d30 <MemManage_Handler+0x4>

08001d32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d32:	b480      	push	{r7}
 8001d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d36:	e7fe      	b.n	8001d36 <BusFault_Handler+0x4>

08001d38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d3c:	e7fe      	b.n	8001d3c <UsageFault_Handler+0x4>

08001d3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d42:	bf00      	nop
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc80      	pop	{r7}
 8001d48:	4770      	bx	lr

08001d4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bc80      	pop	{r7}
 8001d54:	4770      	bx	lr

08001d56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d56:	b480      	push	{r7}
 8001d58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bc80      	pop	{r7}
 8001d60:	4770      	bx	lr

08001d62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d66:	f000 f95b 	bl	8002020 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
	...

08001d70 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d74:	4802      	ldr	r0, [pc, #8]	; (8001d80 <TIM1_CC_IRQHandler+0x10>)
 8001d76:	f002 fa99 	bl	80042ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	200009ac 	.word	0x200009ac

08001d84 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d88:	4802      	ldr	r0, [pc, #8]	; (8001d94 <TIM2_IRQHandler+0x10>)
 8001d8a:	f002 fa8f 	bl	80042ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d8e:	bf00      	nop
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	20000a7c 	.word	0x20000a7c

08001d98 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d9c:	4802      	ldr	r0, [pc, #8]	; (8001da8 <TIM3_IRQHandler+0x10>)
 8001d9e:	f002 fa85 	bl	80042ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001da2:	bf00      	nop
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	200008dc 	.word	0x200008dc

08001dac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001db0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001db4:	f000 fc36 	bl	8002624 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001db8:	bf00      	nop
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
	return 1;
 8001dc0:	2301      	movs	r3, #1
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bc80      	pop	{r7}
 8001dc8:	4770      	bx	lr

08001dca <_kill>:

int _kill(int pid, int sig)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b082      	sub	sp, #8
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
 8001dd2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001dd4:	f003 ffca 	bl	8005d6c <__errno>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2216      	movs	r2, #22
 8001ddc:	601a      	str	r2, [r3, #0]
	return -1;
 8001dde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <_exit>:

void _exit (int status)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b082      	sub	sp, #8
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001df2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f7ff ffe7 	bl	8001dca <_kill>
	while (1) {}		/* Make sure we hang here */
 8001dfc:	e7fe      	b.n	8001dfc <_exit+0x12>

08001dfe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b086      	sub	sp, #24
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	60f8      	str	r0, [r7, #12]
 8001e06:	60b9      	str	r1, [r7, #8]
 8001e08:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	617b      	str	r3, [r7, #20]
 8001e0e:	e00a      	b.n	8001e26 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e10:	f3af 8000 	nop.w
 8001e14:	4601      	mov	r1, r0
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	1c5a      	adds	r2, r3, #1
 8001e1a:	60ba      	str	r2, [r7, #8]
 8001e1c:	b2ca      	uxtb	r2, r1
 8001e1e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	3301      	adds	r3, #1
 8001e24:	617b      	str	r3, [r7, #20]
 8001e26:	697a      	ldr	r2, [r7, #20]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	dbf0      	blt.n	8001e10 <_read+0x12>
	}

return len;
 8001e2e:	687b      	ldr	r3, [r7, #4]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3718      	adds	r7, #24
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e44:	2300      	movs	r3, #0
 8001e46:	617b      	str	r3, [r7, #20]
 8001e48:	e009      	b.n	8001e5e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	1c5a      	adds	r2, r3, #1
 8001e4e:	60ba      	str	r2, [r7, #8]
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	617b      	str	r3, [r7, #20]
 8001e5e:	697a      	ldr	r2, [r7, #20]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	dbf1      	blt.n	8001e4a <_write+0x12>
	}
	return len;
 8001e66:	687b      	ldr	r3, [r7, #4]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3718      	adds	r7, #24
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <_close>:

int _close(int file)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
	return -1;
 8001e78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bc80      	pop	{r7}
 8001e84:	4770      	bx	lr

08001e86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b083      	sub	sp, #12
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
 8001e8e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e96:	605a      	str	r2, [r3, #4]
	return 0;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bc80      	pop	{r7}
 8001ea2:	4770      	bx	lr

08001ea4 <_isatty>:

int _isatty(int file)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
	return 1;
 8001eac:	2301      	movs	r3, #1
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bc80      	pop	{r7}
 8001eb6:	4770      	bx	lr

08001eb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
	return 0;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3714      	adds	r7, #20
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bc80      	pop	{r7}
 8001ece:	4770      	bx	lr

08001ed0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ed8:	4a14      	ldr	r2, [pc, #80]	; (8001f2c <_sbrk+0x5c>)
 8001eda:	4b15      	ldr	r3, [pc, #84]	; (8001f30 <_sbrk+0x60>)
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ee4:	4b13      	ldr	r3, [pc, #76]	; (8001f34 <_sbrk+0x64>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d102      	bne.n	8001ef2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001eec:	4b11      	ldr	r3, [pc, #68]	; (8001f34 <_sbrk+0x64>)
 8001eee:	4a12      	ldr	r2, [pc, #72]	; (8001f38 <_sbrk+0x68>)
 8001ef0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ef2:	4b10      	ldr	r3, [pc, #64]	; (8001f34 <_sbrk+0x64>)
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4413      	add	r3, r2
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d207      	bcs.n	8001f10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f00:	f003 ff34 	bl	8005d6c <__errno>
 8001f04:	4603      	mov	r3, r0
 8001f06:	220c      	movs	r2, #12
 8001f08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f0e:	e009      	b.n	8001f24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f10:	4b08      	ldr	r3, [pc, #32]	; (8001f34 <_sbrk+0x64>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f16:	4b07      	ldr	r3, [pc, #28]	; (8001f34 <_sbrk+0x64>)
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	4a05      	ldr	r2, [pc, #20]	; (8001f34 <_sbrk+0x64>)
 8001f20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f22:	68fb      	ldr	r3, [r7, #12]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3718      	adds	r7, #24
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	20005000 	.word	0x20005000
 8001f30:	00000400 	.word	0x00000400
 8001f34:	200002e0 	.word	0x200002e0
 8001f38:	20000c00 	.word	0x20000c00

08001f3c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f40:	bf00      	nop
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bc80      	pop	{r7}
 8001f46:	4770      	bx	lr

08001f48 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001f48:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001f4a:	e003      	b.n	8001f54 <LoopCopyDataInit>

08001f4c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001f4c:	4b0b      	ldr	r3, [pc, #44]	; (8001f7c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001f4e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001f50:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001f52:	3104      	adds	r1, #4

08001f54 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001f54:	480a      	ldr	r0, [pc, #40]	; (8001f80 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001f56:	4b0b      	ldr	r3, [pc, #44]	; (8001f84 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001f58:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001f5a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001f5c:	d3f6      	bcc.n	8001f4c <CopyDataInit>
  ldr r2, =_sbss
 8001f5e:	4a0a      	ldr	r2, [pc, #40]	; (8001f88 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001f60:	e002      	b.n	8001f68 <LoopFillZerobss>

08001f62 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001f62:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001f64:	f842 3b04 	str.w	r3, [r2], #4

08001f68 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001f68:	4b08      	ldr	r3, [pc, #32]	; (8001f8c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001f6a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001f6c:	d3f9      	bcc.n	8001f62 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f6e:	f7ff ffe5 	bl	8001f3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f72:	f003 ff01 	bl	8005d78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f76:	f7ff fa4b 	bl	8001410 <main>
  bx lr
 8001f7a:	4770      	bx	lr
  ldr r3, =_sidata
 8001f7c:	0800c998 	.word	0x0800c998
  ldr r0, =_sdata
 8001f80:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001f84:	2000027c 	.word	0x2000027c
  ldr r2, =_sbss
 8001f88:	2000027c 	.word	0x2000027c
  ldr r3, = _ebss
 8001f8c:	20000bfc 	.word	0x20000bfc

08001f90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f90:	e7fe      	b.n	8001f90 <ADC1_2_IRQHandler>
	...

08001f94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f98:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <HAL_Init+0x28>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a07      	ldr	r2, [pc, #28]	; (8001fbc <HAL_Init+0x28>)
 8001f9e:	f043 0310 	orr.w	r3, r3, #16
 8001fa2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fa4:	2003      	movs	r0, #3
 8001fa6:	f000 f947 	bl	8002238 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001faa:	2000      	movs	r0, #0
 8001fac:	f000 f808 	bl	8001fc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fb0:	f7ff fd90 	bl	8001ad4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40022000 	.word	0x40022000

08001fc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fc8:	4b12      	ldr	r3, [pc, #72]	; (8002014 <HAL_InitTick+0x54>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	4b12      	ldr	r3, [pc, #72]	; (8002018 <HAL_InitTick+0x58>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f000 f95f 	bl	80022a2 <HAL_SYSTICK_Config>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e00e      	b.n	800200c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2b0f      	cmp	r3, #15
 8001ff2:	d80a      	bhi.n	800200a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	6879      	ldr	r1, [r7, #4]
 8001ff8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ffc:	f000 f927 	bl	800224e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002000:	4a06      	ldr	r2, [pc, #24]	; (800201c <HAL_InitTick+0x5c>)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002006:	2300      	movs	r3, #0
 8002008:	e000      	b.n	800200c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
}
 800200c:	4618      	mov	r0, r3
 800200e:	3708      	adds	r7, #8
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	20000000 	.word	0x20000000
 8002018:	20000008 	.word	0x20000008
 800201c:	20000004 	.word	0x20000004

08002020 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002024:	4b05      	ldr	r3, [pc, #20]	; (800203c <HAL_IncTick+0x1c>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	461a      	mov	r2, r3
 800202a:	4b05      	ldr	r3, [pc, #20]	; (8002040 <HAL_IncTick+0x20>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4413      	add	r3, r2
 8002030:	4a03      	ldr	r2, [pc, #12]	; (8002040 <HAL_IncTick+0x20>)
 8002032:	6013      	str	r3, [r2, #0]
}
 8002034:	bf00      	nop
 8002036:	46bd      	mov	sp, r7
 8002038:	bc80      	pop	{r7}
 800203a:	4770      	bx	lr
 800203c:	20000008 	.word	0x20000008
 8002040:	20000bd8 	.word	0x20000bd8

08002044 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  return uwTick;
 8002048:	4b02      	ldr	r3, [pc, #8]	; (8002054 <HAL_GetTick+0x10>)
 800204a:	681b      	ldr	r3, [r3, #0]
}
 800204c:	4618      	mov	r0, r3
 800204e:	46bd      	mov	sp, r7
 8002050:	bc80      	pop	{r7}
 8002052:	4770      	bx	lr
 8002054:	20000bd8 	.word	0x20000bd8

08002058 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002060:	f7ff fff0 	bl	8002044 <HAL_GetTick>
 8002064:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002070:	d005      	beq.n	800207e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002072:	4b0a      	ldr	r3, [pc, #40]	; (800209c <HAL_Delay+0x44>)
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	461a      	mov	r2, r3
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	4413      	add	r3, r2
 800207c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800207e:	bf00      	nop
 8002080:	f7ff ffe0 	bl	8002044 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	429a      	cmp	r2, r3
 800208e:	d8f7      	bhi.n	8002080 <HAL_Delay+0x28>
  {
  }
}
 8002090:	bf00      	nop
 8002092:	bf00      	nop
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	20000008 	.word	0x20000008

080020a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020b0:	4b0c      	ldr	r3, [pc, #48]	; (80020e4 <__NVIC_SetPriorityGrouping+0x44>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020b6:	68ba      	ldr	r2, [r7, #8]
 80020b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020bc:	4013      	ands	r3, r2
 80020be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020d2:	4a04      	ldr	r2, [pc, #16]	; (80020e4 <__NVIC_SetPriorityGrouping+0x44>)
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	60d3      	str	r3, [r2, #12]
}
 80020d8:	bf00      	nop
 80020da:	3714      	adds	r7, #20
 80020dc:	46bd      	mov	sp, r7
 80020de:	bc80      	pop	{r7}
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	e000ed00 	.word	0xe000ed00

080020e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020ec:	4b04      	ldr	r3, [pc, #16]	; (8002100 <__NVIC_GetPriorityGrouping+0x18>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	0a1b      	lsrs	r3, r3, #8
 80020f2:	f003 0307 	and.w	r3, r3, #7
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bc80      	pop	{r7}
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	e000ed00 	.word	0xe000ed00

08002104 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800210e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002112:	2b00      	cmp	r3, #0
 8002114:	db0b      	blt.n	800212e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002116:	79fb      	ldrb	r3, [r7, #7]
 8002118:	f003 021f 	and.w	r2, r3, #31
 800211c:	4906      	ldr	r1, [pc, #24]	; (8002138 <__NVIC_EnableIRQ+0x34>)
 800211e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002122:	095b      	lsrs	r3, r3, #5
 8002124:	2001      	movs	r0, #1
 8002126:	fa00 f202 	lsl.w	r2, r0, r2
 800212a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800212e:	bf00      	nop
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	bc80      	pop	{r7}
 8002136:	4770      	bx	lr
 8002138:	e000e100 	.word	0xe000e100

0800213c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	4603      	mov	r3, r0
 8002144:	6039      	str	r1, [r7, #0]
 8002146:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214c:	2b00      	cmp	r3, #0
 800214e:	db0a      	blt.n	8002166 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	b2da      	uxtb	r2, r3
 8002154:	490c      	ldr	r1, [pc, #48]	; (8002188 <__NVIC_SetPriority+0x4c>)
 8002156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215a:	0112      	lsls	r2, r2, #4
 800215c:	b2d2      	uxtb	r2, r2
 800215e:	440b      	add	r3, r1
 8002160:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002164:	e00a      	b.n	800217c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	b2da      	uxtb	r2, r3
 800216a:	4908      	ldr	r1, [pc, #32]	; (800218c <__NVIC_SetPriority+0x50>)
 800216c:	79fb      	ldrb	r3, [r7, #7]
 800216e:	f003 030f 	and.w	r3, r3, #15
 8002172:	3b04      	subs	r3, #4
 8002174:	0112      	lsls	r2, r2, #4
 8002176:	b2d2      	uxtb	r2, r2
 8002178:	440b      	add	r3, r1
 800217a:	761a      	strb	r2, [r3, #24]
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	bc80      	pop	{r7}
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	e000e100 	.word	0xe000e100
 800218c:	e000ed00 	.word	0xe000ed00

08002190 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002190:	b480      	push	{r7}
 8002192:	b089      	sub	sp, #36	; 0x24
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	f1c3 0307 	rsb	r3, r3, #7
 80021aa:	2b04      	cmp	r3, #4
 80021ac:	bf28      	it	cs
 80021ae:	2304      	movcs	r3, #4
 80021b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	3304      	adds	r3, #4
 80021b6:	2b06      	cmp	r3, #6
 80021b8:	d902      	bls.n	80021c0 <NVIC_EncodePriority+0x30>
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	3b03      	subs	r3, #3
 80021be:	e000      	b.n	80021c2 <NVIC_EncodePriority+0x32>
 80021c0:	2300      	movs	r3, #0
 80021c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	43da      	mvns	r2, r3
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	401a      	ands	r2, r3
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	fa01 f303 	lsl.w	r3, r1, r3
 80021e2:	43d9      	mvns	r1, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e8:	4313      	orrs	r3, r2
         );
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3724      	adds	r7, #36	; 0x24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bc80      	pop	{r7}
 80021f2:	4770      	bx	lr

080021f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3b01      	subs	r3, #1
 8002200:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002204:	d301      	bcc.n	800220a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002206:	2301      	movs	r3, #1
 8002208:	e00f      	b.n	800222a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800220a:	4a0a      	ldr	r2, [pc, #40]	; (8002234 <SysTick_Config+0x40>)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3b01      	subs	r3, #1
 8002210:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002212:	210f      	movs	r1, #15
 8002214:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002218:	f7ff ff90 	bl	800213c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800221c:	4b05      	ldr	r3, [pc, #20]	; (8002234 <SysTick_Config+0x40>)
 800221e:	2200      	movs	r2, #0
 8002220:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002222:	4b04      	ldr	r3, [pc, #16]	; (8002234 <SysTick_Config+0x40>)
 8002224:	2207      	movs	r2, #7
 8002226:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	e000e010 	.word	0xe000e010

08002238 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f7ff ff2d 	bl	80020a0 <__NVIC_SetPriorityGrouping>
}
 8002246:	bf00      	nop
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800224e:	b580      	push	{r7, lr}
 8002250:	b086      	sub	sp, #24
 8002252:	af00      	add	r7, sp, #0
 8002254:	4603      	mov	r3, r0
 8002256:	60b9      	str	r1, [r7, #8]
 8002258:	607a      	str	r2, [r7, #4]
 800225a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800225c:	2300      	movs	r3, #0
 800225e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002260:	f7ff ff42 	bl	80020e8 <__NVIC_GetPriorityGrouping>
 8002264:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	68b9      	ldr	r1, [r7, #8]
 800226a:	6978      	ldr	r0, [r7, #20]
 800226c:	f7ff ff90 	bl	8002190 <NVIC_EncodePriority>
 8002270:	4602      	mov	r2, r0
 8002272:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002276:	4611      	mov	r1, r2
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff ff5f 	bl	800213c <__NVIC_SetPriority>
}
 800227e:	bf00      	nop
 8002280:	3718      	adds	r7, #24
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b082      	sub	sp, #8
 800228a:	af00      	add	r7, sp, #0
 800228c:	4603      	mov	r3, r0
 800228e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff ff35 	bl	8002104 <__NVIC_EnableIRQ>
}
 800229a:	bf00      	nop
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b082      	sub	sp, #8
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f7ff ffa2 	bl	80021f4 <SysTick_Config>
 80022b0:	4603      	mov	r3, r0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
	...

080022bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022bc:	b480      	push	{r7}
 80022be:	b08b      	sub	sp, #44	; 0x2c
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022c6:	2300      	movs	r3, #0
 80022c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80022ca:	2300      	movs	r3, #0
 80022cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022ce:	e169      	b.n	80025a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80022d0:	2201      	movs	r2, #1
 80022d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	69fa      	ldr	r2, [r7, #28]
 80022e0:	4013      	ands	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	f040 8158 	bne.w	800259e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	4a9a      	ldr	r2, [pc, #616]	; (800255c <HAL_GPIO_Init+0x2a0>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d05e      	beq.n	80023b6 <HAL_GPIO_Init+0xfa>
 80022f8:	4a98      	ldr	r2, [pc, #608]	; (800255c <HAL_GPIO_Init+0x2a0>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d875      	bhi.n	80023ea <HAL_GPIO_Init+0x12e>
 80022fe:	4a98      	ldr	r2, [pc, #608]	; (8002560 <HAL_GPIO_Init+0x2a4>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d058      	beq.n	80023b6 <HAL_GPIO_Init+0xfa>
 8002304:	4a96      	ldr	r2, [pc, #600]	; (8002560 <HAL_GPIO_Init+0x2a4>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d86f      	bhi.n	80023ea <HAL_GPIO_Init+0x12e>
 800230a:	4a96      	ldr	r2, [pc, #600]	; (8002564 <HAL_GPIO_Init+0x2a8>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d052      	beq.n	80023b6 <HAL_GPIO_Init+0xfa>
 8002310:	4a94      	ldr	r2, [pc, #592]	; (8002564 <HAL_GPIO_Init+0x2a8>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d869      	bhi.n	80023ea <HAL_GPIO_Init+0x12e>
 8002316:	4a94      	ldr	r2, [pc, #592]	; (8002568 <HAL_GPIO_Init+0x2ac>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d04c      	beq.n	80023b6 <HAL_GPIO_Init+0xfa>
 800231c:	4a92      	ldr	r2, [pc, #584]	; (8002568 <HAL_GPIO_Init+0x2ac>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d863      	bhi.n	80023ea <HAL_GPIO_Init+0x12e>
 8002322:	4a92      	ldr	r2, [pc, #584]	; (800256c <HAL_GPIO_Init+0x2b0>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d046      	beq.n	80023b6 <HAL_GPIO_Init+0xfa>
 8002328:	4a90      	ldr	r2, [pc, #576]	; (800256c <HAL_GPIO_Init+0x2b0>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d85d      	bhi.n	80023ea <HAL_GPIO_Init+0x12e>
 800232e:	2b12      	cmp	r3, #18
 8002330:	d82a      	bhi.n	8002388 <HAL_GPIO_Init+0xcc>
 8002332:	2b12      	cmp	r3, #18
 8002334:	d859      	bhi.n	80023ea <HAL_GPIO_Init+0x12e>
 8002336:	a201      	add	r2, pc, #4	; (adr r2, 800233c <HAL_GPIO_Init+0x80>)
 8002338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800233c:	080023b7 	.word	0x080023b7
 8002340:	08002391 	.word	0x08002391
 8002344:	080023a3 	.word	0x080023a3
 8002348:	080023e5 	.word	0x080023e5
 800234c:	080023eb 	.word	0x080023eb
 8002350:	080023eb 	.word	0x080023eb
 8002354:	080023eb 	.word	0x080023eb
 8002358:	080023eb 	.word	0x080023eb
 800235c:	080023eb 	.word	0x080023eb
 8002360:	080023eb 	.word	0x080023eb
 8002364:	080023eb 	.word	0x080023eb
 8002368:	080023eb 	.word	0x080023eb
 800236c:	080023eb 	.word	0x080023eb
 8002370:	080023eb 	.word	0x080023eb
 8002374:	080023eb 	.word	0x080023eb
 8002378:	080023eb 	.word	0x080023eb
 800237c:	080023eb 	.word	0x080023eb
 8002380:	08002399 	.word	0x08002399
 8002384:	080023ad 	.word	0x080023ad
 8002388:	4a79      	ldr	r2, [pc, #484]	; (8002570 <HAL_GPIO_Init+0x2b4>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d013      	beq.n	80023b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800238e:	e02c      	b.n	80023ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	623b      	str	r3, [r7, #32]
          break;
 8002396:	e029      	b.n	80023ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	3304      	adds	r3, #4
 800239e:	623b      	str	r3, [r7, #32]
          break;
 80023a0:	e024      	b.n	80023ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	3308      	adds	r3, #8
 80023a8:	623b      	str	r3, [r7, #32]
          break;
 80023aa:	e01f      	b.n	80023ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	330c      	adds	r3, #12
 80023b2:	623b      	str	r3, [r7, #32]
          break;
 80023b4:	e01a      	b.n	80023ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d102      	bne.n	80023c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023be:	2304      	movs	r3, #4
 80023c0:	623b      	str	r3, [r7, #32]
          break;
 80023c2:	e013      	b.n	80023ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d105      	bne.n	80023d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023cc:	2308      	movs	r3, #8
 80023ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	69fa      	ldr	r2, [r7, #28]
 80023d4:	611a      	str	r2, [r3, #16]
          break;
 80023d6:	e009      	b.n	80023ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023d8:	2308      	movs	r3, #8
 80023da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	69fa      	ldr	r2, [r7, #28]
 80023e0:	615a      	str	r2, [r3, #20]
          break;
 80023e2:	e003      	b.n	80023ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80023e4:	2300      	movs	r3, #0
 80023e6:	623b      	str	r3, [r7, #32]
          break;
 80023e8:	e000      	b.n	80023ec <HAL_GPIO_Init+0x130>
          break;
 80023ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	2bff      	cmp	r3, #255	; 0xff
 80023f0:	d801      	bhi.n	80023f6 <HAL_GPIO_Init+0x13a>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	e001      	b.n	80023fa <HAL_GPIO_Init+0x13e>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	3304      	adds	r3, #4
 80023fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	2bff      	cmp	r3, #255	; 0xff
 8002400:	d802      	bhi.n	8002408 <HAL_GPIO_Init+0x14c>
 8002402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	e002      	b.n	800240e <HAL_GPIO_Init+0x152>
 8002408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240a:	3b08      	subs	r3, #8
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	210f      	movs	r1, #15
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	fa01 f303 	lsl.w	r3, r1, r3
 800241c:	43db      	mvns	r3, r3
 800241e:	401a      	ands	r2, r3
 8002420:	6a39      	ldr	r1, [r7, #32]
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	fa01 f303 	lsl.w	r3, r1, r3
 8002428:	431a      	orrs	r2, r3
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	f000 80b1 	beq.w	800259e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800243c:	4b4d      	ldr	r3, [pc, #308]	; (8002574 <HAL_GPIO_Init+0x2b8>)
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	4a4c      	ldr	r2, [pc, #304]	; (8002574 <HAL_GPIO_Init+0x2b8>)
 8002442:	f043 0301 	orr.w	r3, r3, #1
 8002446:	6193      	str	r3, [r2, #24]
 8002448:	4b4a      	ldr	r3, [pc, #296]	; (8002574 <HAL_GPIO_Init+0x2b8>)
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	60bb      	str	r3, [r7, #8]
 8002452:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002454:	4a48      	ldr	r2, [pc, #288]	; (8002578 <HAL_GPIO_Init+0x2bc>)
 8002456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002458:	089b      	lsrs	r3, r3, #2
 800245a:	3302      	adds	r3, #2
 800245c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002460:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002464:	f003 0303 	and.w	r3, r3, #3
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	220f      	movs	r2, #15
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	43db      	mvns	r3, r3
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	4013      	ands	r3, r2
 8002476:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a40      	ldr	r2, [pc, #256]	; (800257c <HAL_GPIO_Init+0x2c0>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d013      	beq.n	80024a8 <HAL_GPIO_Init+0x1ec>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a3f      	ldr	r2, [pc, #252]	; (8002580 <HAL_GPIO_Init+0x2c4>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d00d      	beq.n	80024a4 <HAL_GPIO_Init+0x1e8>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4a3e      	ldr	r2, [pc, #248]	; (8002584 <HAL_GPIO_Init+0x2c8>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d007      	beq.n	80024a0 <HAL_GPIO_Init+0x1e4>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4a3d      	ldr	r2, [pc, #244]	; (8002588 <HAL_GPIO_Init+0x2cc>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d101      	bne.n	800249c <HAL_GPIO_Init+0x1e0>
 8002498:	2303      	movs	r3, #3
 800249a:	e006      	b.n	80024aa <HAL_GPIO_Init+0x1ee>
 800249c:	2304      	movs	r3, #4
 800249e:	e004      	b.n	80024aa <HAL_GPIO_Init+0x1ee>
 80024a0:	2302      	movs	r3, #2
 80024a2:	e002      	b.n	80024aa <HAL_GPIO_Init+0x1ee>
 80024a4:	2301      	movs	r3, #1
 80024a6:	e000      	b.n	80024aa <HAL_GPIO_Init+0x1ee>
 80024a8:	2300      	movs	r3, #0
 80024aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024ac:	f002 0203 	and.w	r2, r2, #3
 80024b0:	0092      	lsls	r2, r2, #2
 80024b2:	4093      	lsls	r3, r2
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024ba:	492f      	ldr	r1, [pc, #188]	; (8002578 <HAL_GPIO_Init+0x2bc>)
 80024bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024be:	089b      	lsrs	r3, r3, #2
 80024c0:	3302      	adds	r3, #2
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d006      	beq.n	80024e2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024d4:	4b2d      	ldr	r3, [pc, #180]	; (800258c <HAL_GPIO_Init+0x2d0>)
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	492c      	ldr	r1, [pc, #176]	; (800258c <HAL_GPIO_Init+0x2d0>)
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	4313      	orrs	r3, r2
 80024de:	600b      	str	r3, [r1, #0]
 80024e0:	e006      	b.n	80024f0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024e2:	4b2a      	ldr	r3, [pc, #168]	; (800258c <HAL_GPIO_Init+0x2d0>)
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	43db      	mvns	r3, r3
 80024ea:	4928      	ldr	r1, [pc, #160]	; (800258c <HAL_GPIO_Init+0x2d0>)
 80024ec:	4013      	ands	r3, r2
 80024ee:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d006      	beq.n	800250a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80024fc:	4b23      	ldr	r3, [pc, #140]	; (800258c <HAL_GPIO_Init+0x2d0>)
 80024fe:	685a      	ldr	r2, [r3, #4]
 8002500:	4922      	ldr	r1, [pc, #136]	; (800258c <HAL_GPIO_Init+0x2d0>)
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	4313      	orrs	r3, r2
 8002506:	604b      	str	r3, [r1, #4]
 8002508:	e006      	b.n	8002518 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800250a:	4b20      	ldr	r3, [pc, #128]	; (800258c <HAL_GPIO_Init+0x2d0>)
 800250c:	685a      	ldr	r2, [r3, #4]
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	43db      	mvns	r3, r3
 8002512:	491e      	ldr	r1, [pc, #120]	; (800258c <HAL_GPIO_Init+0x2d0>)
 8002514:	4013      	ands	r3, r2
 8002516:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d006      	beq.n	8002532 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002524:	4b19      	ldr	r3, [pc, #100]	; (800258c <HAL_GPIO_Init+0x2d0>)
 8002526:	689a      	ldr	r2, [r3, #8]
 8002528:	4918      	ldr	r1, [pc, #96]	; (800258c <HAL_GPIO_Init+0x2d0>)
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	4313      	orrs	r3, r2
 800252e:	608b      	str	r3, [r1, #8]
 8002530:	e006      	b.n	8002540 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002532:	4b16      	ldr	r3, [pc, #88]	; (800258c <HAL_GPIO_Init+0x2d0>)
 8002534:	689a      	ldr	r2, [r3, #8]
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	43db      	mvns	r3, r3
 800253a:	4914      	ldr	r1, [pc, #80]	; (800258c <HAL_GPIO_Init+0x2d0>)
 800253c:	4013      	ands	r3, r2
 800253e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d021      	beq.n	8002590 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800254c:	4b0f      	ldr	r3, [pc, #60]	; (800258c <HAL_GPIO_Init+0x2d0>)
 800254e:	68da      	ldr	r2, [r3, #12]
 8002550:	490e      	ldr	r1, [pc, #56]	; (800258c <HAL_GPIO_Init+0x2d0>)
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	4313      	orrs	r3, r2
 8002556:	60cb      	str	r3, [r1, #12]
 8002558:	e021      	b.n	800259e <HAL_GPIO_Init+0x2e2>
 800255a:	bf00      	nop
 800255c:	10320000 	.word	0x10320000
 8002560:	10310000 	.word	0x10310000
 8002564:	10220000 	.word	0x10220000
 8002568:	10210000 	.word	0x10210000
 800256c:	10120000 	.word	0x10120000
 8002570:	10110000 	.word	0x10110000
 8002574:	40021000 	.word	0x40021000
 8002578:	40010000 	.word	0x40010000
 800257c:	40010800 	.word	0x40010800
 8002580:	40010c00 	.word	0x40010c00
 8002584:	40011000 	.word	0x40011000
 8002588:	40011400 	.word	0x40011400
 800258c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002590:	4b0b      	ldr	r3, [pc, #44]	; (80025c0 <HAL_GPIO_Init+0x304>)
 8002592:	68da      	ldr	r2, [r3, #12]
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	43db      	mvns	r3, r3
 8002598:	4909      	ldr	r1, [pc, #36]	; (80025c0 <HAL_GPIO_Init+0x304>)
 800259a:	4013      	ands	r3, r2
 800259c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800259e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a0:	3301      	adds	r3, #1
 80025a2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025aa:	fa22 f303 	lsr.w	r3, r2, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f47f ae8e 	bne.w	80022d0 <HAL_GPIO_Init+0x14>
  }
}
 80025b4:	bf00      	nop
 80025b6:	bf00      	nop
 80025b8:	372c      	adds	r7, #44	; 0x2c
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bc80      	pop	{r7}
 80025be:	4770      	bx	lr
 80025c0:	40010400 	.word	0x40010400

080025c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	460b      	mov	r3, r1
 80025ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689a      	ldr	r2, [r3, #8]
 80025d4:	887b      	ldrh	r3, [r7, #2]
 80025d6:	4013      	ands	r3, r2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d002      	beq.n	80025e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025dc:	2301      	movs	r3, #1
 80025de:	73fb      	strb	r3, [r7, #15]
 80025e0:	e001      	b.n	80025e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025e2:	2300      	movs	r3, #0
 80025e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3714      	adds	r7, #20
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bc80      	pop	{r7}
 80025f0:	4770      	bx	lr

080025f2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025f2:	b480      	push	{r7}
 80025f4:	b083      	sub	sp, #12
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
 80025fa:	460b      	mov	r3, r1
 80025fc:	807b      	strh	r3, [r7, #2]
 80025fe:	4613      	mov	r3, r2
 8002600:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002602:	787b      	ldrb	r3, [r7, #1]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d003      	beq.n	8002610 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002608:	887a      	ldrh	r2, [r7, #2]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800260e:	e003      	b.n	8002618 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002610:	887b      	ldrh	r3, [r7, #2]
 8002612:	041a      	lsls	r2, r3, #16
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	611a      	str	r2, [r3, #16]
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	bc80      	pop	{r7}
 8002620:	4770      	bx	lr
	...

08002624 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	4603      	mov	r3, r0
 800262c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800262e:	4b08      	ldr	r3, [pc, #32]	; (8002650 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002630:	695a      	ldr	r2, [r3, #20]
 8002632:	88fb      	ldrh	r3, [r7, #6]
 8002634:	4013      	ands	r3, r2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d006      	beq.n	8002648 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800263a:	4a05      	ldr	r2, [pc, #20]	; (8002650 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800263c:	88fb      	ldrh	r3, [r7, #6]
 800263e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002640:	88fb      	ldrh	r3, [r7, #6]
 8002642:	4618      	mov	r0, r3
 8002644:	f7fe fd64 	bl	8001110 <HAL_GPIO_EXTI_Callback>
  }
}
 8002648:	bf00      	nop
 800264a:	3708      	adds	r7, #8
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	40010400 	.word	0x40010400

08002654 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e12b      	b.n	80028be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d106      	bne.n	8002680 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f7ff fa5c 	bl	8001b38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2224      	movs	r2, #36	; 0x24
 8002684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f022 0201 	bic.w	r2, r2, #1
 8002696:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80026b8:	f001 fba0 	bl	8003dfc <HAL_RCC_GetPCLK1Freq>
 80026bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	4a81      	ldr	r2, [pc, #516]	; (80028c8 <HAL_I2C_Init+0x274>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d807      	bhi.n	80026d8 <HAL_I2C_Init+0x84>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	4a80      	ldr	r2, [pc, #512]	; (80028cc <HAL_I2C_Init+0x278>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	bf94      	ite	ls
 80026d0:	2301      	movls	r3, #1
 80026d2:	2300      	movhi	r3, #0
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	e006      	b.n	80026e6 <HAL_I2C_Init+0x92>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	4a7d      	ldr	r2, [pc, #500]	; (80028d0 <HAL_I2C_Init+0x27c>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	bf94      	ite	ls
 80026e0:	2301      	movls	r3, #1
 80026e2:	2300      	movhi	r3, #0
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e0e7      	b.n	80028be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	4a78      	ldr	r2, [pc, #480]	; (80028d4 <HAL_I2C_Init+0x280>)
 80026f2:	fba2 2303 	umull	r2, r3, r2, r3
 80026f6:	0c9b      	lsrs	r3, r3, #18
 80026f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68ba      	ldr	r2, [r7, #8]
 800270a:	430a      	orrs	r2, r1
 800270c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	4a6a      	ldr	r2, [pc, #424]	; (80028c8 <HAL_I2C_Init+0x274>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d802      	bhi.n	8002728 <HAL_I2C_Init+0xd4>
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	3301      	adds	r3, #1
 8002726:	e009      	b.n	800273c <HAL_I2C_Init+0xe8>
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800272e:	fb02 f303 	mul.w	r3, r2, r3
 8002732:	4a69      	ldr	r2, [pc, #420]	; (80028d8 <HAL_I2C_Init+0x284>)
 8002734:	fba2 2303 	umull	r2, r3, r2, r3
 8002738:	099b      	lsrs	r3, r3, #6
 800273a:	3301      	adds	r3, #1
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	6812      	ldr	r2, [r2, #0]
 8002740:	430b      	orrs	r3, r1
 8002742:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	69db      	ldr	r3, [r3, #28]
 800274a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800274e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	495c      	ldr	r1, [pc, #368]	; (80028c8 <HAL_I2C_Init+0x274>)
 8002758:	428b      	cmp	r3, r1
 800275a:	d819      	bhi.n	8002790 <HAL_I2C_Init+0x13c>
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	1e59      	subs	r1, r3, #1
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	fbb1 f3f3 	udiv	r3, r1, r3
 800276a:	1c59      	adds	r1, r3, #1
 800276c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002770:	400b      	ands	r3, r1
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00a      	beq.n	800278c <HAL_I2C_Init+0x138>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	1e59      	subs	r1, r3, #1
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	fbb1 f3f3 	udiv	r3, r1, r3
 8002784:	3301      	adds	r3, #1
 8002786:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800278a:	e051      	b.n	8002830 <HAL_I2C_Init+0x1dc>
 800278c:	2304      	movs	r3, #4
 800278e:	e04f      	b.n	8002830 <HAL_I2C_Init+0x1dc>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d111      	bne.n	80027bc <HAL_I2C_Init+0x168>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	1e58      	subs	r0, r3, #1
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6859      	ldr	r1, [r3, #4]
 80027a0:	460b      	mov	r3, r1
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	440b      	add	r3, r1
 80027a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80027aa:	3301      	adds	r3, #1
 80027ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	bf0c      	ite	eq
 80027b4:	2301      	moveq	r3, #1
 80027b6:	2300      	movne	r3, #0
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	e012      	b.n	80027e2 <HAL_I2C_Init+0x18e>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	1e58      	subs	r0, r3, #1
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6859      	ldr	r1, [r3, #4]
 80027c4:	460b      	mov	r3, r1
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	440b      	add	r3, r1
 80027ca:	0099      	lsls	r1, r3, #2
 80027cc:	440b      	add	r3, r1
 80027ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80027d2:	3301      	adds	r3, #1
 80027d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027d8:	2b00      	cmp	r3, #0
 80027da:	bf0c      	ite	eq
 80027dc:	2301      	moveq	r3, #1
 80027de:	2300      	movne	r3, #0
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <HAL_I2C_Init+0x196>
 80027e6:	2301      	movs	r3, #1
 80027e8:	e022      	b.n	8002830 <HAL_I2C_Init+0x1dc>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d10e      	bne.n	8002810 <HAL_I2C_Init+0x1bc>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	1e58      	subs	r0, r3, #1
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6859      	ldr	r1, [r3, #4]
 80027fa:	460b      	mov	r3, r1
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	440b      	add	r3, r1
 8002800:	fbb0 f3f3 	udiv	r3, r0, r3
 8002804:	3301      	adds	r3, #1
 8002806:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800280a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800280e:	e00f      	b.n	8002830 <HAL_I2C_Init+0x1dc>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	1e58      	subs	r0, r3, #1
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6859      	ldr	r1, [r3, #4]
 8002818:	460b      	mov	r3, r1
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	440b      	add	r3, r1
 800281e:	0099      	lsls	r1, r3, #2
 8002820:	440b      	add	r3, r1
 8002822:	fbb0 f3f3 	udiv	r3, r0, r3
 8002826:	3301      	adds	r3, #1
 8002828:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800282c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002830:	6879      	ldr	r1, [r7, #4]
 8002832:	6809      	ldr	r1, [r1, #0]
 8002834:	4313      	orrs	r3, r2
 8002836:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	69da      	ldr	r2, [r3, #28]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a1b      	ldr	r3, [r3, #32]
 800284a:	431a      	orrs	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	430a      	orrs	r2, r1
 8002852:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800285e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	6911      	ldr	r1, [r2, #16]
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	68d2      	ldr	r2, [r2, #12]
 800286a:	4311      	orrs	r1, r2
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	6812      	ldr	r2, [r2, #0]
 8002870:	430b      	orrs	r3, r1
 8002872:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	695a      	ldr	r2, [r3, #20]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	431a      	orrs	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	430a      	orrs	r2, r1
 800288e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f042 0201 	orr.w	r2, r2, #1
 800289e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2220      	movs	r2, #32
 80028aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	000186a0 	.word	0x000186a0
 80028cc:	001e847f 	.word	0x001e847f
 80028d0:	003d08ff 	.word	0x003d08ff
 80028d4:	431bde83 	.word	0x431bde83
 80028d8:	10624dd3 	.word	0x10624dd3

080028dc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b088      	sub	sp, #32
 80028e0:	af02      	add	r7, sp, #8
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	4608      	mov	r0, r1
 80028e6:	4611      	mov	r1, r2
 80028e8:	461a      	mov	r2, r3
 80028ea:	4603      	mov	r3, r0
 80028ec:	817b      	strh	r3, [r7, #10]
 80028ee:	460b      	mov	r3, r1
 80028f0:	813b      	strh	r3, [r7, #8]
 80028f2:	4613      	mov	r3, r2
 80028f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028f6:	f7ff fba5 	bl	8002044 <HAL_GetTick>
 80028fa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002902:	b2db      	uxtb	r3, r3
 8002904:	2b20      	cmp	r3, #32
 8002906:	f040 80d9 	bne.w	8002abc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	9300      	str	r3, [sp, #0]
 800290e:	2319      	movs	r3, #25
 8002910:	2201      	movs	r2, #1
 8002912:	496d      	ldr	r1, [pc, #436]	; (8002ac8 <HAL_I2C_Mem_Write+0x1ec>)
 8002914:	68f8      	ldr	r0, [r7, #12]
 8002916:	f000 fcc1 	bl	800329c <I2C_WaitOnFlagUntilTimeout>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002920:	2302      	movs	r3, #2
 8002922:	e0cc      	b.n	8002abe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800292a:	2b01      	cmp	r3, #1
 800292c:	d101      	bne.n	8002932 <HAL_I2C_Mem_Write+0x56>
 800292e:	2302      	movs	r3, #2
 8002930:	e0c5      	b.n	8002abe <HAL_I2C_Mem_Write+0x1e2>
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2201      	movs	r2, #1
 8002936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	2b01      	cmp	r3, #1
 8002946:	d007      	beq.n	8002958 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f042 0201 	orr.w	r2, r2, #1
 8002956:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002966:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2221      	movs	r2, #33	; 0x21
 800296c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2240      	movs	r2, #64	; 0x40
 8002974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2200      	movs	r2, #0
 800297c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6a3a      	ldr	r2, [r7, #32]
 8002982:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002988:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800298e:	b29a      	uxth	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	4a4d      	ldr	r2, [pc, #308]	; (8002acc <HAL_I2C_Mem_Write+0x1f0>)
 8002998:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800299a:	88f8      	ldrh	r0, [r7, #6]
 800299c:	893a      	ldrh	r2, [r7, #8]
 800299e:	8979      	ldrh	r1, [r7, #10]
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	9301      	str	r3, [sp, #4]
 80029a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a6:	9300      	str	r3, [sp, #0]
 80029a8:	4603      	mov	r3, r0
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f000 faf8 	bl	8002fa0 <I2C_RequestMemoryWrite>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d052      	beq.n	8002a5c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e081      	b.n	8002abe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f000 fd42 	bl	8003448 <I2C_WaitOnTXEFlagUntilTimeout>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00d      	beq.n	80029e6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	2b04      	cmp	r3, #4
 80029d0:	d107      	bne.n	80029e2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e06b      	b.n	8002abe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ea:	781a      	ldrb	r2, [r3, #0]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f6:	1c5a      	adds	r2, r3, #1
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a00:	3b01      	subs	r3, #1
 8002a02:	b29a      	uxth	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	695b      	ldr	r3, [r3, #20]
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	2b04      	cmp	r3, #4
 8002a22:	d11b      	bne.n	8002a5c <HAL_I2C_Mem_Write+0x180>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d017      	beq.n	8002a5c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a30:	781a      	ldrb	r2, [r3, #0]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3c:	1c5a      	adds	r2, r3, #1
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a46:	3b01      	subs	r3, #1
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	3b01      	subs	r3, #1
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1aa      	bne.n	80029ba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a64:	697a      	ldr	r2, [r7, #20]
 8002a66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a68:	68f8      	ldr	r0, [r7, #12]
 8002a6a:	f000 fd2e 	bl	80034ca <I2C_WaitOnBTFFlagUntilTimeout>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00d      	beq.n	8002a90 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	d107      	bne.n	8002a8c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a8a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e016      	b.n	8002abe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2220      	movs	r2, #32
 8002aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	e000      	b.n	8002abe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002abc:	2302      	movs	r3, #2
  }
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3718      	adds	r7, #24
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	00100002 	.word	0x00100002
 8002acc:	ffff0000 	.word	0xffff0000

08002ad0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b08c      	sub	sp, #48	; 0x30
 8002ad4:	af02      	add	r7, sp, #8
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	4608      	mov	r0, r1
 8002ada:	4611      	mov	r1, r2
 8002adc:	461a      	mov	r2, r3
 8002ade:	4603      	mov	r3, r0
 8002ae0:	817b      	strh	r3, [r7, #10]
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	813b      	strh	r3, [r7, #8]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002aea:	2300      	movs	r3, #0
 8002aec:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002aee:	f7ff faa9 	bl	8002044 <HAL_GetTick>
 8002af2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	2b20      	cmp	r3, #32
 8002afe:	f040 8244 	bne.w	8002f8a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b04:	9300      	str	r3, [sp, #0]
 8002b06:	2319      	movs	r3, #25
 8002b08:	2201      	movs	r2, #1
 8002b0a:	4982      	ldr	r1, [pc, #520]	; (8002d14 <HAL_I2C_Mem_Read+0x244>)
 8002b0c:	68f8      	ldr	r0, [r7, #12]
 8002b0e:	f000 fbc5 	bl	800329c <I2C_WaitOnFlagUntilTimeout>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002b18:	2302      	movs	r3, #2
 8002b1a:	e237      	b.n	8002f8c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d101      	bne.n	8002b2a <HAL_I2C_Mem_Read+0x5a>
 8002b26:	2302      	movs	r3, #2
 8002b28:	e230      	b.n	8002f8c <HAL_I2C_Mem_Read+0x4bc>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0301 	and.w	r3, r3, #1
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d007      	beq.n	8002b50 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f042 0201 	orr.w	r2, r2, #1
 8002b4e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b5e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2222      	movs	r2, #34	; 0x22
 8002b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2240      	movs	r2, #64	; 0x40
 8002b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002b80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	4a62      	ldr	r2, [pc, #392]	; (8002d18 <HAL_I2C_Mem_Read+0x248>)
 8002b90:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b92:	88f8      	ldrh	r0, [r7, #6]
 8002b94:	893a      	ldrh	r2, [r7, #8]
 8002b96:	8979      	ldrh	r1, [r7, #10]
 8002b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9a:	9301      	str	r3, [sp, #4]
 8002b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b9e:	9300      	str	r3, [sp, #0]
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	f000 fa92 	bl	80030cc <I2C_RequestMemoryRead>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e1ec      	b.n	8002f8c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d113      	bne.n	8002be2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bba:	2300      	movs	r3, #0
 8002bbc:	61fb      	str	r3, [r7, #28]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	695b      	ldr	r3, [r3, #20]
 8002bc4:	61fb      	str	r3, [r7, #28]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	61fb      	str	r3, [r7, #28]
 8002bce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bde:	601a      	str	r2, [r3, #0]
 8002be0:	e1c0      	b.n	8002f64 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d11e      	bne.n	8002c28 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bf8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002bfa:	b672      	cpsid	i
}
 8002bfc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bfe:	2300      	movs	r3, #0
 8002c00:	61bb      	str	r3, [r7, #24]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	61bb      	str	r3, [r7, #24]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	61bb      	str	r3, [r7, #24]
 8002c12:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c22:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002c24:	b662      	cpsie	i
}
 8002c26:	e035      	b.n	8002c94 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d11e      	bne.n	8002c6e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c3e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c40:	b672      	cpsid	i
}
 8002c42:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c44:	2300      	movs	r3, #0
 8002c46:	617b      	str	r3, [r7, #20]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	617b      	str	r3, [r7, #20]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	617b      	str	r3, [r7, #20]
 8002c58:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c68:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002c6a:	b662      	cpsie	i
}
 8002c6c:	e012      	b.n	8002c94 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c7c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c7e:	2300      	movs	r3, #0
 8002c80:	613b      	str	r3, [r7, #16]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	695b      	ldr	r3, [r3, #20]
 8002c88:	613b      	str	r3, [r7, #16]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	613b      	str	r3, [r7, #16]
 8002c92:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002c94:	e166      	b.n	8002f64 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c9a:	2b03      	cmp	r3, #3
 8002c9c:	f200 811f 	bhi.w	8002ede <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d123      	bne.n	8002cf0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002caa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002cac:	68f8      	ldr	r0, [r7, #12]
 8002cae:	f000 fc4d 	bl	800354c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d001      	beq.n	8002cbc <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e167      	b.n	8002f8c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	691a      	ldr	r2, [r3, #16]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc6:	b2d2      	uxtb	r2, r2
 8002cc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cce:	1c5a      	adds	r2, r3, #1
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	b29a      	uxth	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002cee:	e139      	b.n	8002f64 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d152      	bne.n	8002d9e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfa:	9300      	str	r3, [sp, #0]
 8002cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cfe:	2200      	movs	r2, #0
 8002d00:	4906      	ldr	r1, [pc, #24]	; (8002d1c <HAL_I2C_Mem_Read+0x24c>)
 8002d02:	68f8      	ldr	r0, [r7, #12]
 8002d04:	f000 faca 	bl	800329c <I2C_WaitOnFlagUntilTimeout>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d008      	beq.n	8002d20 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e13c      	b.n	8002f8c <HAL_I2C_Mem_Read+0x4bc>
 8002d12:	bf00      	nop
 8002d14:	00100002 	.word	0x00100002
 8002d18:	ffff0000 	.word	0xffff0000
 8002d1c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002d20:	b672      	cpsid	i
}
 8002d22:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	691a      	ldr	r2, [r3, #16]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3e:	b2d2      	uxtb	r2, r2
 8002d40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d46:	1c5a      	adds	r2, r3, #1
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d50:	3b01      	subs	r3, #1
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	b29a      	uxth	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002d66:	b662      	cpsie	i
}
 8002d68:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	691a      	ldr	r2, [r3, #16]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d74:	b2d2      	uxtb	r2, r2
 8002d76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7c:	1c5a      	adds	r2, r3, #1
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d86:	3b01      	subs	r3, #1
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	3b01      	subs	r3, #1
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d9c:	e0e2      	b.n	8002f64 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da0:	9300      	str	r3, [sp, #0]
 8002da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da4:	2200      	movs	r2, #0
 8002da6:	497b      	ldr	r1, [pc, #492]	; (8002f94 <HAL_I2C_Mem_Read+0x4c4>)
 8002da8:	68f8      	ldr	r0, [r7, #12]
 8002daa:	f000 fa77 	bl	800329c <I2C_WaitOnFlagUntilTimeout>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e0e9      	b.n	8002f8c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dc6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002dc8:	b672      	cpsid	i
}
 8002dca:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	691a      	ldr	r2, [r3, #16]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd6:	b2d2      	uxtb	r2, r2
 8002dd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dde:	1c5a      	adds	r2, r3, #1
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de8:	3b01      	subs	r3, #1
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	3b01      	subs	r3, #1
 8002df8:	b29a      	uxth	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002dfe:	4b66      	ldr	r3, [pc, #408]	; (8002f98 <HAL_I2C_Mem_Read+0x4c8>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	08db      	lsrs	r3, r3, #3
 8002e04:	4a65      	ldr	r2, [pc, #404]	; (8002f9c <HAL_I2C_Mem_Read+0x4cc>)
 8002e06:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0a:	0a1a      	lsrs	r2, r3, #8
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	4413      	add	r3, r2
 8002e12:	00da      	lsls	r2, r3, #3
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002e18:	6a3b      	ldr	r3, [r7, #32]
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002e1e:	6a3b      	ldr	r3, [r7, #32]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d118      	bne.n	8002e56 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2220      	movs	r2, #32
 8002e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	f043 0220 	orr.w	r2, r3, #32
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002e46:	b662      	cpsie	i
}
 8002e48:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e09a      	b.n	8002f8c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	695b      	ldr	r3, [r3, #20]
 8002e5c:	f003 0304 	and.w	r3, r3, #4
 8002e60:	2b04      	cmp	r3, #4
 8002e62:	d1d9      	bne.n	8002e18 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	691a      	ldr	r2, [r3, #16]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7e:	b2d2      	uxtb	r2, r2
 8002e80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e86:	1c5a      	adds	r2, r3, #1
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e90:	3b01      	subs	r3, #1
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002ea6:	b662      	cpsie	i
}
 8002ea8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	691a      	ldr	r2, [r3, #16]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb4:	b2d2      	uxtb	r2, r2
 8002eb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebc:	1c5a      	adds	r2, r3, #1
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002edc:	e042      	b.n	8002f64 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ee0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f000 fb32 	bl	800354c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e04c      	b.n	8002f8c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	691a      	ldr	r2, [r3, #16]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efc:	b2d2      	uxtb	r2, r2
 8002efe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f04:	1c5a      	adds	r2, r3, #1
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	f003 0304 	and.w	r3, r3, #4
 8002f2e:	2b04      	cmp	r3, #4
 8002f30:	d118      	bne.n	8002f64 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	691a      	ldr	r2, [r3, #16]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3c:	b2d2      	uxtb	r2, r2
 8002f3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f44:	1c5a      	adds	r2, r3, #1
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	b29a      	uxth	r2, r3
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	b29a      	uxth	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f47f ae94 	bne.w	8002c96 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2220      	movs	r2, #32
 8002f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f86:	2300      	movs	r3, #0
 8002f88:	e000      	b.n	8002f8c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002f8a:	2302      	movs	r3, #2
  }
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3728      	adds	r7, #40	; 0x28
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	00010004 	.word	0x00010004
 8002f98:	20000000 	.word	0x20000000
 8002f9c:	14f8b589 	.word	0x14f8b589

08002fa0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b088      	sub	sp, #32
 8002fa4:	af02      	add	r7, sp, #8
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	4608      	mov	r0, r1
 8002faa:	4611      	mov	r1, r2
 8002fac:	461a      	mov	r2, r3
 8002fae:	4603      	mov	r3, r0
 8002fb0:	817b      	strh	r3, [r7, #10]
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	813b      	strh	r3, [r7, #8]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fc8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fcc:	9300      	str	r3, [sp, #0]
 8002fce:	6a3b      	ldr	r3, [r7, #32]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f000 f960 	bl	800329c <I2C_WaitOnFlagUntilTimeout>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00d      	beq.n	8002ffe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ff0:	d103      	bne.n	8002ffa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ff8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e05f      	b.n	80030be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ffe:	897b      	ldrh	r3, [r7, #10]
 8003000:	b2db      	uxtb	r3, r3
 8003002:	461a      	mov	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800300c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800300e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003010:	6a3a      	ldr	r2, [r7, #32]
 8003012:	492d      	ldr	r1, [pc, #180]	; (80030c8 <I2C_RequestMemoryWrite+0x128>)
 8003014:	68f8      	ldr	r0, [r7, #12]
 8003016:	f000 f998 	bl	800334a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e04c      	b.n	80030be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003024:	2300      	movs	r3, #0
 8003026:	617b      	str	r3, [r7, #20]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	617b      	str	r3, [r7, #20]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	617b      	str	r3, [r7, #20]
 8003038:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800303a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800303c:	6a39      	ldr	r1, [r7, #32]
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f000 fa02 	bl	8003448 <I2C_WaitOnTXEFlagUntilTimeout>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00d      	beq.n	8003066 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	2b04      	cmp	r3, #4
 8003050:	d107      	bne.n	8003062 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003060:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e02b      	b.n	80030be <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003066:	88fb      	ldrh	r3, [r7, #6]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d105      	bne.n	8003078 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800306c:	893b      	ldrh	r3, [r7, #8]
 800306e:	b2da      	uxtb	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	611a      	str	r2, [r3, #16]
 8003076:	e021      	b.n	80030bc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003078:	893b      	ldrh	r3, [r7, #8]
 800307a:	0a1b      	lsrs	r3, r3, #8
 800307c:	b29b      	uxth	r3, r3
 800307e:	b2da      	uxtb	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003088:	6a39      	ldr	r1, [r7, #32]
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f000 f9dc 	bl	8003448 <I2C_WaitOnTXEFlagUntilTimeout>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00d      	beq.n	80030b2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309a:	2b04      	cmp	r3, #4
 800309c:	d107      	bne.n	80030ae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e005      	b.n	80030be <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030b2:	893b      	ldrh	r3, [r7, #8]
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3718      	adds	r7, #24
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	00010002 	.word	0x00010002

080030cc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b088      	sub	sp, #32
 80030d0:	af02      	add	r7, sp, #8
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	4608      	mov	r0, r1
 80030d6:	4611      	mov	r1, r2
 80030d8:	461a      	mov	r2, r3
 80030da:	4603      	mov	r3, r0
 80030dc:	817b      	strh	r3, [r7, #10]
 80030de:	460b      	mov	r3, r1
 80030e0:	813b      	strh	r3, [r7, #8]
 80030e2:	4613      	mov	r3, r2
 80030e4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80030f4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003104:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003108:	9300      	str	r3, [sp, #0]
 800310a:	6a3b      	ldr	r3, [r7, #32]
 800310c:	2200      	movs	r2, #0
 800310e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f000 f8c2 	bl	800329c <I2C_WaitOnFlagUntilTimeout>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00d      	beq.n	800313a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003128:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800312c:	d103      	bne.n	8003136 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003134:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e0aa      	b.n	8003290 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800313a:	897b      	ldrh	r3, [r7, #10]
 800313c:	b2db      	uxtb	r3, r3
 800313e:	461a      	mov	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003148:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800314a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314c:	6a3a      	ldr	r2, [r7, #32]
 800314e:	4952      	ldr	r1, [pc, #328]	; (8003298 <I2C_RequestMemoryRead+0x1cc>)
 8003150:	68f8      	ldr	r0, [r7, #12]
 8003152:	f000 f8fa 	bl	800334a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d001      	beq.n	8003160 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e097      	b.n	8003290 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003160:	2300      	movs	r3, #0
 8003162:	617b      	str	r3, [r7, #20]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	617b      	str	r3, [r7, #20]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	617b      	str	r3, [r7, #20]
 8003174:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003178:	6a39      	ldr	r1, [r7, #32]
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	f000 f964 	bl	8003448 <I2C_WaitOnTXEFlagUntilTimeout>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00d      	beq.n	80031a2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318a:	2b04      	cmp	r3, #4
 800318c:	d107      	bne.n	800319e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800319c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e076      	b.n	8003290 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80031a2:	88fb      	ldrh	r3, [r7, #6]
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d105      	bne.n	80031b4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80031a8:	893b      	ldrh	r3, [r7, #8]
 80031aa:	b2da      	uxtb	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	611a      	str	r2, [r3, #16]
 80031b2:	e021      	b.n	80031f8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80031b4:	893b      	ldrh	r3, [r7, #8]
 80031b6:	0a1b      	lsrs	r3, r3, #8
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	b2da      	uxtb	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031c4:	6a39      	ldr	r1, [r7, #32]
 80031c6:	68f8      	ldr	r0, [r7, #12]
 80031c8:	f000 f93e 	bl	8003448 <I2C_WaitOnTXEFlagUntilTimeout>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00d      	beq.n	80031ee <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	2b04      	cmp	r3, #4
 80031d8:	d107      	bne.n	80031ea <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e050      	b.n	8003290 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80031ee:	893b      	ldrh	r3, [r7, #8]
 80031f0:	b2da      	uxtb	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031fa:	6a39      	ldr	r1, [r7, #32]
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f000 f923 	bl	8003448 <I2C_WaitOnTXEFlagUntilTimeout>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00d      	beq.n	8003224 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320c:	2b04      	cmp	r3, #4
 800320e:	d107      	bne.n	8003220 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800321e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e035      	b.n	8003290 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003232:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003236:	9300      	str	r3, [sp, #0]
 8003238:	6a3b      	ldr	r3, [r7, #32]
 800323a:	2200      	movs	r2, #0
 800323c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	f000 f82b 	bl	800329c <I2C_WaitOnFlagUntilTimeout>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d00d      	beq.n	8003268 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003256:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800325a:	d103      	bne.n	8003264 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003262:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e013      	b.n	8003290 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003268:	897b      	ldrh	r3, [r7, #10]
 800326a:	b2db      	uxtb	r3, r3
 800326c:	f043 0301 	orr.w	r3, r3, #1
 8003270:	b2da      	uxtb	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327a:	6a3a      	ldr	r2, [r7, #32]
 800327c:	4906      	ldr	r1, [pc, #24]	; (8003298 <I2C_RequestMemoryRead+0x1cc>)
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	f000 f863 	bl	800334a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e000      	b.n	8003290 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800328e:	2300      	movs	r3, #0
}
 8003290:	4618      	mov	r0, r3
 8003292:	3718      	adds	r7, #24
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	00010002 	.word	0x00010002

0800329c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	603b      	str	r3, [r7, #0]
 80032a8:	4613      	mov	r3, r2
 80032aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032ac:	e025      	b.n	80032fa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032b4:	d021      	beq.n	80032fa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032b6:	f7fe fec5 	bl	8002044 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d302      	bcc.n	80032cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d116      	bne.n	80032fa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2220      	movs	r2, #32
 80032d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e6:	f043 0220 	orr.w	r2, r3, #32
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e023      	b.n	8003342 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	0c1b      	lsrs	r3, r3, #16
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2b01      	cmp	r3, #1
 8003302:	d10d      	bne.n	8003320 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	43da      	mvns	r2, r3
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	4013      	ands	r3, r2
 8003310:	b29b      	uxth	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	bf0c      	ite	eq
 8003316:	2301      	moveq	r3, #1
 8003318:	2300      	movne	r3, #0
 800331a:	b2db      	uxtb	r3, r3
 800331c:	461a      	mov	r2, r3
 800331e:	e00c      	b.n	800333a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	43da      	mvns	r2, r3
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	4013      	ands	r3, r2
 800332c:	b29b      	uxth	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	bf0c      	ite	eq
 8003332:	2301      	moveq	r3, #1
 8003334:	2300      	movne	r3, #0
 8003336:	b2db      	uxtb	r3, r3
 8003338:	461a      	mov	r2, r3
 800333a:	79fb      	ldrb	r3, [r7, #7]
 800333c:	429a      	cmp	r2, r3
 800333e:	d0b6      	beq.n	80032ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3710      	adds	r7, #16
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}

0800334a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800334a:	b580      	push	{r7, lr}
 800334c:	b084      	sub	sp, #16
 800334e:	af00      	add	r7, sp, #0
 8003350:	60f8      	str	r0, [r7, #12]
 8003352:	60b9      	str	r1, [r7, #8]
 8003354:	607a      	str	r2, [r7, #4]
 8003356:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003358:	e051      	b.n	80033fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	695b      	ldr	r3, [r3, #20]
 8003360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003364:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003368:	d123      	bne.n	80033b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003378:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003382:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2220      	movs	r2, #32
 800338e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339e:	f043 0204 	orr.w	r2, r3, #4
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e046      	b.n	8003440 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033b8:	d021      	beq.n	80033fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ba:	f7fe fe43 	bl	8002044 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d302      	bcc.n	80033d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d116      	bne.n	80033fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2220      	movs	r2, #32
 80033da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ea:	f043 0220 	orr.w	r2, r3, #32
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e020      	b.n	8003440 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	0c1b      	lsrs	r3, r3, #16
 8003402:	b2db      	uxtb	r3, r3
 8003404:	2b01      	cmp	r3, #1
 8003406:	d10c      	bne.n	8003422 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	43da      	mvns	r2, r3
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	4013      	ands	r3, r2
 8003414:	b29b      	uxth	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	bf14      	ite	ne
 800341a:	2301      	movne	r3, #1
 800341c:	2300      	moveq	r3, #0
 800341e:	b2db      	uxtb	r3, r3
 8003420:	e00b      	b.n	800343a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	43da      	mvns	r2, r3
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	4013      	ands	r3, r2
 800342e:	b29b      	uxth	r3, r3
 8003430:	2b00      	cmp	r3, #0
 8003432:	bf14      	ite	ne
 8003434:	2301      	movne	r3, #1
 8003436:	2300      	moveq	r3, #0
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d18d      	bne.n	800335a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003454:	e02d      	b.n	80034b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f000 f8ce 	bl	80035f8 <I2C_IsAcknowledgeFailed>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e02d      	b.n	80034c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800346c:	d021      	beq.n	80034b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800346e:	f7fe fde9 	bl	8002044 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	429a      	cmp	r2, r3
 800347c:	d302      	bcc.n	8003484 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d116      	bne.n	80034b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2220      	movs	r2, #32
 800348e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349e:	f043 0220 	orr.w	r2, r3, #32
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e007      	b.n	80034c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	695b      	ldr	r3, [r3, #20]
 80034b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034bc:	2b80      	cmp	r3, #128	; 0x80
 80034be:	d1ca      	bne.n	8003456 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b084      	sub	sp, #16
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	60f8      	str	r0, [r7, #12]
 80034d2:	60b9      	str	r1, [r7, #8]
 80034d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034d6:	e02d      	b.n	8003534 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034d8:	68f8      	ldr	r0, [r7, #12]
 80034da:	f000 f88d 	bl	80035f8 <I2C_IsAcknowledgeFailed>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d001      	beq.n	80034e8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e02d      	b.n	8003544 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034ee:	d021      	beq.n	8003534 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034f0:	f7fe fda8 	bl	8002044 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	68ba      	ldr	r2, [r7, #8]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d302      	bcc.n	8003506 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d116      	bne.n	8003534 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2220      	movs	r2, #32
 8003510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003520:	f043 0220 	orr.w	r2, r3, #32
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e007      	b.n	8003544 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	f003 0304 	and.w	r3, r3, #4
 800353e:	2b04      	cmp	r3, #4
 8003540:	d1ca      	bne.n	80034d8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003558:	e042      	b.n	80035e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	695b      	ldr	r3, [r3, #20]
 8003560:	f003 0310 	and.w	r3, r3, #16
 8003564:	2b10      	cmp	r3, #16
 8003566:	d119      	bne.n	800359c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f06f 0210 	mvn.w	r2, #16
 8003570:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2220      	movs	r2, #32
 800357c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e029      	b.n	80035f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800359c:	f7fe fd52 	bl	8002044 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	68ba      	ldr	r2, [r7, #8]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d302      	bcc.n	80035b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d116      	bne.n	80035e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2220      	movs	r2, #32
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035cc:	f043 0220 	orr.w	r2, r3, #32
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e007      	b.n	80035f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ea:	2b40      	cmp	r3, #64	; 0x40
 80035ec:	d1b5      	bne.n	800355a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3710      	adds	r7, #16
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800360a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800360e:	d11b      	bne.n	8003648 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003618:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2220      	movs	r2, #32
 8003624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003634:	f043 0204 	orr.w	r2, r3, #4
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e000      	b.n	800364a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	370c      	adds	r7, #12
 800364e:	46bd      	mov	sp, r7
 8003650:	bc80      	pop	{r7}
 8003652:	4770      	bx	lr

08003654 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d101      	bne.n	8003666 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e26c      	b.n	8003b40 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	2b00      	cmp	r3, #0
 8003670:	f000 8087 	beq.w	8003782 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003674:	4b92      	ldr	r3, [pc, #584]	; (80038c0 <HAL_RCC_OscConfig+0x26c>)
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f003 030c 	and.w	r3, r3, #12
 800367c:	2b04      	cmp	r3, #4
 800367e:	d00c      	beq.n	800369a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003680:	4b8f      	ldr	r3, [pc, #572]	; (80038c0 <HAL_RCC_OscConfig+0x26c>)
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f003 030c 	and.w	r3, r3, #12
 8003688:	2b08      	cmp	r3, #8
 800368a:	d112      	bne.n	80036b2 <HAL_RCC_OscConfig+0x5e>
 800368c:	4b8c      	ldr	r3, [pc, #560]	; (80038c0 <HAL_RCC_OscConfig+0x26c>)
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003694:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003698:	d10b      	bne.n	80036b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800369a:	4b89      	ldr	r3, [pc, #548]	; (80038c0 <HAL_RCC_OscConfig+0x26c>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d06c      	beq.n	8003780 <HAL_RCC_OscConfig+0x12c>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d168      	bne.n	8003780 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e246      	b.n	8003b40 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036ba:	d106      	bne.n	80036ca <HAL_RCC_OscConfig+0x76>
 80036bc:	4b80      	ldr	r3, [pc, #512]	; (80038c0 <HAL_RCC_OscConfig+0x26c>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a7f      	ldr	r2, [pc, #508]	; (80038c0 <HAL_RCC_OscConfig+0x26c>)
 80036c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036c6:	6013      	str	r3, [r2, #0]
 80036c8:	e02e      	b.n	8003728 <HAL_RCC_OscConfig+0xd4>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10c      	bne.n	80036ec <HAL_RCC_OscConfig+0x98>
 80036d2:	4b7b      	ldr	r3, [pc, #492]	; (80038c0 <HAL_RCC_OscConfig+0x26c>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a7a      	ldr	r2, [pc, #488]	; (80038c0 <HAL_RCC_OscConfig+0x26c>)
 80036d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036dc:	6013      	str	r3, [r2, #0]
 80036de:	4b78      	ldr	r3, [pc, #480]	; (80038c0 <HAL_RCC_OscConfig+0x26c>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a77      	ldr	r2, [pc, #476]	; (80038c0 <HAL_RCC_OscConfig+0x26c>)
 80036e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036e8:	6013      	str	r3, [r2, #0]
 80036ea:	e01d      	b.n	8003728 <HAL_RCC_OscConfig+0xd4>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036f4:	d10c      	bne.n	8003710 <HAL_RCC_OscConfig+0xbc>
 80036f6:	4b72      	ldr	r3, [pc, #456]	; (80038c0 <HAL_RCC_OscConfig+0x26c>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a71      	ldr	r2, [pc, #452]	; (80038c0 <HAL_RCC_OscConfig+0x26c>)
 80036fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003700:	6013      	str	r3, [r2, #0]
 8003702:	4b6f      	ldr	r3, [pc, #444]	; (80038c0 <HAL_RCC_OscConfig+0x26c>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a6e      	ldr	r2, [pc, #440]	; (80038c0 <HAL_RCC_OscConfig+0x26c>)
 8003708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800370c:	6013      	str	r3, [r2, #0]
 800370e:	e00b      	b.n	8003728 <HAL_RCC_OscConfig+0xd4>
 8003710:	4b6b      	ldr	r3, [pc, #428]	; (80038c0 <HAL_RCC_OscConfig+0x26c>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a6a      	ldr	r2, [pc, #424]	; (80038c0 <HAL_RCC_OscConfig+0x26c>)
 8003716:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800371a:	6013      	str	r3, [r2, #0]
 800371c:	4b68      	ldr	r3, [pc, #416]	; (80038c0 <HAL_RCC_OscConfig+0x26c>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a67      	ldr	r2, [pc, #412]	; (80038c0 <HAL_RCC_OscConfig+0x26c>)
 8003722:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003726:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d013      	beq.n	8003758 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003730:	f7fe fc88 	bl	8002044 <HAL_GetTick>
 8003734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003736:	e008      	b.n	800374a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003738:	f7fe fc84 	bl	8002044 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b64      	cmp	r3, #100	; 0x64
 8003744:	d901      	bls.n	800374a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e1fa      	b.n	8003b40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800374a:	4b5d      	ldr	r3, [pc, #372]	; (80038c0 <HAL_RCC_OscConfig+0x26c>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d0f0      	beq.n	8003738 <HAL_RCC_OscConfig+0xe4>
 8003756:	e014      	b.n	8003782 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003758:	f7fe fc74 	bl	8002044 <HAL_GetTick>
 800375c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800375e:	e008      	b.n	8003772 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003760:	f7fe fc70 	bl	8002044 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b64      	cmp	r3, #100	; 0x64
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e1e6      	b.n	8003b40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003772:	4b53      	ldr	r3, [pc, #332]	; (80038c0 <HAL_RCC_OscConfig+0x26c>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1f0      	bne.n	8003760 <HAL_RCC_OscConfig+0x10c>
 800377e:	e000      	b.n	8003782 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003780:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d063      	beq.n	8003856 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800378e:	4b4c      	ldr	r3, [pc, #304]	; (80038c0 <HAL_RCC_OscConfig+0x26c>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f003 030c 	and.w	r3, r3, #12
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00b      	beq.n	80037b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800379a:	4b49      	ldr	r3, [pc, #292]	; (80038c0 <HAL_RCC_OscConfig+0x26c>)
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f003 030c 	and.w	r3, r3, #12
 80037a2:	2b08      	cmp	r3, #8
 80037a4:	d11c      	bne.n	80037e0 <HAL_RCC_OscConfig+0x18c>
 80037a6:	4b46      	ldr	r3, [pc, #280]	; (80038c0 <HAL_RCC_OscConfig+0x26c>)
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d116      	bne.n	80037e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037b2:	4b43      	ldr	r3, [pc, #268]	; (80038c0 <HAL_RCC_OscConfig+0x26c>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d005      	beq.n	80037ca <HAL_RCC_OscConfig+0x176>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d001      	beq.n	80037ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e1ba      	b.n	8003b40 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ca:	4b3d      	ldr	r3, [pc, #244]	; (80038c0 <HAL_RCC_OscConfig+0x26c>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	4939      	ldr	r1, [pc, #228]	; (80038c0 <HAL_RCC_OscConfig+0x26c>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037de:	e03a      	b.n	8003856 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d020      	beq.n	800382a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037e8:	4b36      	ldr	r3, [pc, #216]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 80037ea:	2201      	movs	r2, #1
 80037ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ee:	f7fe fc29 	bl	8002044 <HAL_GetTick>
 80037f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037f4:	e008      	b.n	8003808 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037f6:	f7fe fc25 	bl	8002044 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b02      	cmp	r3, #2
 8003802:	d901      	bls.n	8003808 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e19b      	b.n	8003b40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003808:	4b2d      	ldr	r3, [pc, #180]	; (80038c0 <HAL_RCC_OscConfig+0x26c>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0302 	and.w	r3, r3, #2
 8003810:	2b00      	cmp	r3, #0
 8003812:	d0f0      	beq.n	80037f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003814:	4b2a      	ldr	r3, [pc, #168]	; (80038c0 <HAL_RCC_OscConfig+0x26c>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	695b      	ldr	r3, [r3, #20]
 8003820:	00db      	lsls	r3, r3, #3
 8003822:	4927      	ldr	r1, [pc, #156]	; (80038c0 <HAL_RCC_OscConfig+0x26c>)
 8003824:	4313      	orrs	r3, r2
 8003826:	600b      	str	r3, [r1, #0]
 8003828:	e015      	b.n	8003856 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800382a:	4b26      	ldr	r3, [pc, #152]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 800382c:	2200      	movs	r2, #0
 800382e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003830:	f7fe fc08 	bl	8002044 <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003836:	e008      	b.n	800384a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003838:	f7fe fc04 	bl	8002044 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e17a      	b.n	8003b40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800384a:	4b1d      	ldr	r3, [pc, #116]	; (80038c0 <HAL_RCC_OscConfig+0x26c>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1f0      	bne.n	8003838 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0308 	and.w	r3, r3, #8
 800385e:	2b00      	cmp	r3, #0
 8003860:	d03a      	beq.n	80038d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d019      	beq.n	800389e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800386a:	4b17      	ldr	r3, [pc, #92]	; (80038c8 <HAL_RCC_OscConfig+0x274>)
 800386c:	2201      	movs	r2, #1
 800386e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003870:	f7fe fbe8 	bl	8002044 <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003876:	e008      	b.n	800388a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003878:	f7fe fbe4 	bl	8002044 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b02      	cmp	r3, #2
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e15a      	b.n	8003b40 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800388a:	4b0d      	ldr	r3, [pc, #52]	; (80038c0 <HAL_RCC_OscConfig+0x26c>)
 800388c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d0f0      	beq.n	8003878 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003896:	2001      	movs	r0, #1
 8003898:	f000 fac4 	bl	8003e24 <RCC_Delay>
 800389c:	e01c      	b.n	80038d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800389e:	4b0a      	ldr	r3, [pc, #40]	; (80038c8 <HAL_RCC_OscConfig+0x274>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038a4:	f7fe fbce 	bl	8002044 <HAL_GetTick>
 80038a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038aa:	e00f      	b.n	80038cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038ac:	f7fe fbca 	bl	8002044 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d908      	bls.n	80038cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e140      	b.n	8003b40 <HAL_RCC_OscConfig+0x4ec>
 80038be:	bf00      	nop
 80038c0:	40021000 	.word	0x40021000
 80038c4:	42420000 	.word	0x42420000
 80038c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038cc:	4b9e      	ldr	r3, [pc, #632]	; (8003b48 <HAL_RCC_OscConfig+0x4f4>)
 80038ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1e9      	bne.n	80038ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0304 	and.w	r3, r3, #4
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f000 80a6 	beq.w	8003a32 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038e6:	2300      	movs	r3, #0
 80038e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038ea:	4b97      	ldr	r3, [pc, #604]	; (8003b48 <HAL_RCC_OscConfig+0x4f4>)
 80038ec:	69db      	ldr	r3, [r3, #28]
 80038ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d10d      	bne.n	8003912 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038f6:	4b94      	ldr	r3, [pc, #592]	; (8003b48 <HAL_RCC_OscConfig+0x4f4>)
 80038f8:	69db      	ldr	r3, [r3, #28]
 80038fa:	4a93      	ldr	r2, [pc, #588]	; (8003b48 <HAL_RCC_OscConfig+0x4f4>)
 80038fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003900:	61d3      	str	r3, [r2, #28]
 8003902:	4b91      	ldr	r3, [pc, #580]	; (8003b48 <HAL_RCC_OscConfig+0x4f4>)
 8003904:	69db      	ldr	r3, [r3, #28]
 8003906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800390a:	60bb      	str	r3, [r7, #8]
 800390c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800390e:	2301      	movs	r3, #1
 8003910:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003912:	4b8e      	ldr	r3, [pc, #568]	; (8003b4c <HAL_RCC_OscConfig+0x4f8>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800391a:	2b00      	cmp	r3, #0
 800391c:	d118      	bne.n	8003950 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800391e:	4b8b      	ldr	r3, [pc, #556]	; (8003b4c <HAL_RCC_OscConfig+0x4f8>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a8a      	ldr	r2, [pc, #552]	; (8003b4c <HAL_RCC_OscConfig+0x4f8>)
 8003924:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003928:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800392a:	f7fe fb8b 	bl	8002044 <HAL_GetTick>
 800392e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003930:	e008      	b.n	8003944 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003932:	f7fe fb87 	bl	8002044 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	2b64      	cmp	r3, #100	; 0x64
 800393e:	d901      	bls.n	8003944 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e0fd      	b.n	8003b40 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003944:	4b81      	ldr	r3, [pc, #516]	; (8003b4c <HAL_RCC_OscConfig+0x4f8>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800394c:	2b00      	cmp	r3, #0
 800394e:	d0f0      	beq.n	8003932 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d106      	bne.n	8003966 <HAL_RCC_OscConfig+0x312>
 8003958:	4b7b      	ldr	r3, [pc, #492]	; (8003b48 <HAL_RCC_OscConfig+0x4f4>)
 800395a:	6a1b      	ldr	r3, [r3, #32]
 800395c:	4a7a      	ldr	r2, [pc, #488]	; (8003b48 <HAL_RCC_OscConfig+0x4f4>)
 800395e:	f043 0301 	orr.w	r3, r3, #1
 8003962:	6213      	str	r3, [r2, #32]
 8003964:	e02d      	b.n	80039c2 <HAL_RCC_OscConfig+0x36e>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d10c      	bne.n	8003988 <HAL_RCC_OscConfig+0x334>
 800396e:	4b76      	ldr	r3, [pc, #472]	; (8003b48 <HAL_RCC_OscConfig+0x4f4>)
 8003970:	6a1b      	ldr	r3, [r3, #32]
 8003972:	4a75      	ldr	r2, [pc, #468]	; (8003b48 <HAL_RCC_OscConfig+0x4f4>)
 8003974:	f023 0301 	bic.w	r3, r3, #1
 8003978:	6213      	str	r3, [r2, #32]
 800397a:	4b73      	ldr	r3, [pc, #460]	; (8003b48 <HAL_RCC_OscConfig+0x4f4>)
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	4a72      	ldr	r2, [pc, #456]	; (8003b48 <HAL_RCC_OscConfig+0x4f4>)
 8003980:	f023 0304 	bic.w	r3, r3, #4
 8003984:	6213      	str	r3, [r2, #32]
 8003986:	e01c      	b.n	80039c2 <HAL_RCC_OscConfig+0x36e>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	2b05      	cmp	r3, #5
 800398e:	d10c      	bne.n	80039aa <HAL_RCC_OscConfig+0x356>
 8003990:	4b6d      	ldr	r3, [pc, #436]	; (8003b48 <HAL_RCC_OscConfig+0x4f4>)
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	4a6c      	ldr	r2, [pc, #432]	; (8003b48 <HAL_RCC_OscConfig+0x4f4>)
 8003996:	f043 0304 	orr.w	r3, r3, #4
 800399a:	6213      	str	r3, [r2, #32]
 800399c:	4b6a      	ldr	r3, [pc, #424]	; (8003b48 <HAL_RCC_OscConfig+0x4f4>)
 800399e:	6a1b      	ldr	r3, [r3, #32]
 80039a0:	4a69      	ldr	r2, [pc, #420]	; (8003b48 <HAL_RCC_OscConfig+0x4f4>)
 80039a2:	f043 0301 	orr.w	r3, r3, #1
 80039a6:	6213      	str	r3, [r2, #32]
 80039a8:	e00b      	b.n	80039c2 <HAL_RCC_OscConfig+0x36e>
 80039aa:	4b67      	ldr	r3, [pc, #412]	; (8003b48 <HAL_RCC_OscConfig+0x4f4>)
 80039ac:	6a1b      	ldr	r3, [r3, #32]
 80039ae:	4a66      	ldr	r2, [pc, #408]	; (8003b48 <HAL_RCC_OscConfig+0x4f4>)
 80039b0:	f023 0301 	bic.w	r3, r3, #1
 80039b4:	6213      	str	r3, [r2, #32]
 80039b6:	4b64      	ldr	r3, [pc, #400]	; (8003b48 <HAL_RCC_OscConfig+0x4f4>)
 80039b8:	6a1b      	ldr	r3, [r3, #32]
 80039ba:	4a63      	ldr	r2, [pc, #396]	; (8003b48 <HAL_RCC_OscConfig+0x4f4>)
 80039bc:	f023 0304 	bic.w	r3, r3, #4
 80039c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d015      	beq.n	80039f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ca:	f7fe fb3b 	bl	8002044 <HAL_GetTick>
 80039ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039d0:	e00a      	b.n	80039e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039d2:	f7fe fb37 	bl	8002044 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d901      	bls.n	80039e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e0ab      	b.n	8003b40 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039e8:	4b57      	ldr	r3, [pc, #348]	; (8003b48 <HAL_RCC_OscConfig+0x4f4>)
 80039ea:	6a1b      	ldr	r3, [r3, #32]
 80039ec:	f003 0302 	and.w	r3, r3, #2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d0ee      	beq.n	80039d2 <HAL_RCC_OscConfig+0x37e>
 80039f4:	e014      	b.n	8003a20 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039f6:	f7fe fb25 	bl	8002044 <HAL_GetTick>
 80039fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039fc:	e00a      	b.n	8003a14 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039fe:	f7fe fb21 	bl	8002044 <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d901      	bls.n	8003a14 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e095      	b.n	8003b40 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a14:	4b4c      	ldr	r3, [pc, #304]	; (8003b48 <HAL_RCC_OscConfig+0x4f4>)
 8003a16:	6a1b      	ldr	r3, [r3, #32]
 8003a18:	f003 0302 	and.w	r3, r3, #2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d1ee      	bne.n	80039fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a20:	7dfb      	ldrb	r3, [r7, #23]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d105      	bne.n	8003a32 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a26:	4b48      	ldr	r3, [pc, #288]	; (8003b48 <HAL_RCC_OscConfig+0x4f4>)
 8003a28:	69db      	ldr	r3, [r3, #28]
 8003a2a:	4a47      	ldr	r2, [pc, #284]	; (8003b48 <HAL_RCC_OscConfig+0x4f4>)
 8003a2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a30:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	69db      	ldr	r3, [r3, #28]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	f000 8081 	beq.w	8003b3e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a3c:	4b42      	ldr	r3, [pc, #264]	; (8003b48 <HAL_RCC_OscConfig+0x4f4>)
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f003 030c 	and.w	r3, r3, #12
 8003a44:	2b08      	cmp	r3, #8
 8003a46:	d061      	beq.n	8003b0c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	69db      	ldr	r3, [r3, #28]
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d146      	bne.n	8003ade <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a50:	4b3f      	ldr	r3, [pc, #252]	; (8003b50 <HAL_RCC_OscConfig+0x4fc>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a56:	f7fe faf5 	bl	8002044 <HAL_GetTick>
 8003a5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a5c:	e008      	b.n	8003a70 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a5e:	f7fe faf1 	bl	8002044 <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d901      	bls.n	8003a70 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e067      	b.n	8003b40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a70:	4b35      	ldr	r3, [pc, #212]	; (8003b48 <HAL_RCC_OscConfig+0x4f4>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1f0      	bne.n	8003a5e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a1b      	ldr	r3, [r3, #32]
 8003a80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a84:	d108      	bne.n	8003a98 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a86:	4b30      	ldr	r3, [pc, #192]	; (8003b48 <HAL_RCC_OscConfig+0x4f4>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	492d      	ldr	r1, [pc, #180]	; (8003b48 <HAL_RCC_OscConfig+0x4f4>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a98:	4b2b      	ldr	r3, [pc, #172]	; (8003b48 <HAL_RCC_OscConfig+0x4f4>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a19      	ldr	r1, [r3, #32]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa8:	430b      	orrs	r3, r1
 8003aaa:	4927      	ldr	r1, [pc, #156]	; (8003b48 <HAL_RCC_OscConfig+0x4f4>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ab0:	4b27      	ldr	r3, [pc, #156]	; (8003b50 <HAL_RCC_OscConfig+0x4fc>)
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab6:	f7fe fac5 	bl	8002044 <HAL_GetTick>
 8003aba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003abc:	e008      	b.n	8003ad0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003abe:	f7fe fac1 	bl	8002044 <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d901      	bls.n	8003ad0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e037      	b.n	8003b40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ad0:	4b1d      	ldr	r3, [pc, #116]	; (8003b48 <HAL_RCC_OscConfig+0x4f4>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d0f0      	beq.n	8003abe <HAL_RCC_OscConfig+0x46a>
 8003adc:	e02f      	b.n	8003b3e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ade:	4b1c      	ldr	r3, [pc, #112]	; (8003b50 <HAL_RCC_OscConfig+0x4fc>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae4:	f7fe faae 	bl	8002044 <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aec:	f7fe faaa 	bl	8002044 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e020      	b.n	8003b40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003afe:	4b12      	ldr	r3, [pc, #72]	; (8003b48 <HAL_RCC_OscConfig+0x4f4>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1f0      	bne.n	8003aec <HAL_RCC_OscConfig+0x498>
 8003b0a:	e018      	b.n	8003b3e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	69db      	ldr	r3, [r3, #28]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d101      	bne.n	8003b18 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e013      	b.n	8003b40 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b18:	4b0b      	ldr	r3, [pc, #44]	; (8003b48 <HAL_RCC_OscConfig+0x4f4>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a1b      	ldr	r3, [r3, #32]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d106      	bne.n	8003b3a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d001      	beq.n	8003b3e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e000      	b.n	8003b40 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3718      	adds	r7, #24
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	40021000 	.word	0x40021000
 8003b4c:	40007000 	.word	0x40007000
 8003b50:	42420060 	.word	0x42420060

08003b54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d101      	bne.n	8003b68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e0d0      	b.n	8003d0a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b68:	4b6a      	ldr	r3, [pc, #424]	; (8003d14 <HAL_RCC_ClockConfig+0x1c0>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0307 	and.w	r3, r3, #7
 8003b70:	683a      	ldr	r2, [r7, #0]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d910      	bls.n	8003b98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b76:	4b67      	ldr	r3, [pc, #412]	; (8003d14 <HAL_RCC_ClockConfig+0x1c0>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f023 0207 	bic.w	r2, r3, #7
 8003b7e:	4965      	ldr	r1, [pc, #404]	; (8003d14 <HAL_RCC_ClockConfig+0x1c0>)
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b86:	4b63      	ldr	r3, [pc, #396]	; (8003d14 <HAL_RCC_ClockConfig+0x1c0>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0307 	and.w	r3, r3, #7
 8003b8e:	683a      	ldr	r2, [r7, #0]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d001      	beq.n	8003b98 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e0b8      	b.n	8003d0a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0302 	and.w	r3, r3, #2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d020      	beq.n	8003be6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0304 	and.w	r3, r3, #4
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d005      	beq.n	8003bbc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bb0:	4b59      	ldr	r3, [pc, #356]	; (8003d18 <HAL_RCC_ClockConfig+0x1c4>)
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	4a58      	ldr	r2, [pc, #352]	; (8003d18 <HAL_RCC_ClockConfig+0x1c4>)
 8003bb6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003bba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0308 	and.w	r3, r3, #8
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d005      	beq.n	8003bd4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bc8:	4b53      	ldr	r3, [pc, #332]	; (8003d18 <HAL_RCC_ClockConfig+0x1c4>)
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	4a52      	ldr	r2, [pc, #328]	; (8003d18 <HAL_RCC_ClockConfig+0x1c4>)
 8003bce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003bd2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bd4:	4b50      	ldr	r3, [pc, #320]	; (8003d18 <HAL_RCC_ClockConfig+0x1c4>)
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	494d      	ldr	r1, [pc, #308]	; (8003d18 <HAL_RCC_ClockConfig+0x1c4>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d040      	beq.n	8003c74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d107      	bne.n	8003c0a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bfa:	4b47      	ldr	r3, [pc, #284]	; (8003d18 <HAL_RCC_ClockConfig+0x1c4>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d115      	bne.n	8003c32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e07f      	b.n	8003d0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d107      	bne.n	8003c22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c12:	4b41      	ldr	r3, [pc, #260]	; (8003d18 <HAL_RCC_ClockConfig+0x1c4>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d109      	bne.n	8003c32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e073      	b.n	8003d0a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c22:	4b3d      	ldr	r3, [pc, #244]	; (8003d18 <HAL_RCC_ClockConfig+0x1c4>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d101      	bne.n	8003c32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e06b      	b.n	8003d0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c32:	4b39      	ldr	r3, [pc, #228]	; (8003d18 <HAL_RCC_ClockConfig+0x1c4>)
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f023 0203 	bic.w	r2, r3, #3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	4936      	ldr	r1, [pc, #216]	; (8003d18 <HAL_RCC_ClockConfig+0x1c4>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c44:	f7fe f9fe 	bl	8002044 <HAL_GetTick>
 8003c48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c4a:	e00a      	b.n	8003c62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c4c:	f7fe f9fa 	bl	8002044 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e053      	b.n	8003d0a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c62:	4b2d      	ldr	r3, [pc, #180]	; (8003d18 <HAL_RCC_ClockConfig+0x1c4>)
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f003 020c 	and.w	r2, r3, #12
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d1eb      	bne.n	8003c4c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c74:	4b27      	ldr	r3, [pc, #156]	; (8003d14 <HAL_RCC_ClockConfig+0x1c0>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0307 	and.w	r3, r3, #7
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d210      	bcs.n	8003ca4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c82:	4b24      	ldr	r3, [pc, #144]	; (8003d14 <HAL_RCC_ClockConfig+0x1c0>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f023 0207 	bic.w	r2, r3, #7
 8003c8a:	4922      	ldr	r1, [pc, #136]	; (8003d14 <HAL_RCC_ClockConfig+0x1c0>)
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c92:	4b20      	ldr	r3, [pc, #128]	; (8003d14 <HAL_RCC_ClockConfig+0x1c0>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0307 	and.w	r3, r3, #7
 8003c9a:	683a      	ldr	r2, [r7, #0]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d001      	beq.n	8003ca4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e032      	b.n	8003d0a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d008      	beq.n	8003cc2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cb0:	4b19      	ldr	r3, [pc, #100]	; (8003d18 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	4916      	ldr	r1, [pc, #88]	; (8003d18 <HAL_RCC_ClockConfig+0x1c4>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0308 	and.w	r3, r3, #8
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d009      	beq.n	8003ce2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003cce:	4b12      	ldr	r3, [pc, #72]	; (8003d18 <HAL_RCC_ClockConfig+0x1c4>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	00db      	lsls	r3, r3, #3
 8003cdc:	490e      	ldr	r1, [pc, #56]	; (8003d18 <HAL_RCC_ClockConfig+0x1c4>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ce2:	f000 f821 	bl	8003d28 <HAL_RCC_GetSysClockFreq>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	4b0b      	ldr	r3, [pc, #44]	; (8003d18 <HAL_RCC_ClockConfig+0x1c4>)
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	091b      	lsrs	r3, r3, #4
 8003cee:	f003 030f 	and.w	r3, r3, #15
 8003cf2:	490a      	ldr	r1, [pc, #40]	; (8003d1c <HAL_RCC_ClockConfig+0x1c8>)
 8003cf4:	5ccb      	ldrb	r3, [r1, r3]
 8003cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8003cfa:	4a09      	ldr	r2, [pc, #36]	; (8003d20 <HAL_RCC_ClockConfig+0x1cc>)
 8003cfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003cfe:	4b09      	ldr	r3, [pc, #36]	; (8003d24 <HAL_RCC_ClockConfig+0x1d0>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7fe f95c 	bl	8001fc0 <HAL_InitTick>

  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3710      	adds	r7, #16
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	40022000 	.word	0x40022000
 8003d18:	40021000 	.word	0x40021000
 8003d1c:	0800a2a0 	.word	0x0800a2a0
 8003d20:	20000000 	.word	0x20000000
 8003d24:	20000004 	.word	0x20000004

08003d28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d28:	b490      	push	{r4, r7}
 8003d2a:	b08a      	sub	sp, #40	; 0x28
 8003d2c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003d2e:	4b2a      	ldr	r3, [pc, #168]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003d30:	1d3c      	adds	r4, r7, #4
 8003d32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003d38:	f240 2301 	movw	r3, #513	; 0x201
 8003d3c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	61fb      	str	r3, [r7, #28]
 8003d42:	2300      	movs	r3, #0
 8003d44:	61bb      	str	r3, [r7, #24]
 8003d46:	2300      	movs	r3, #0
 8003d48:	627b      	str	r3, [r7, #36]	; 0x24
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003d52:	4b22      	ldr	r3, [pc, #136]	; (8003ddc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	f003 030c 	and.w	r3, r3, #12
 8003d5e:	2b04      	cmp	r3, #4
 8003d60:	d002      	beq.n	8003d68 <HAL_RCC_GetSysClockFreq+0x40>
 8003d62:	2b08      	cmp	r3, #8
 8003d64:	d003      	beq.n	8003d6e <HAL_RCC_GetSysClockFreq+0x46>
 8003d66:	e02d      	b.n	8003dc4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d68:	4b1d      	ldr	r3, [pc, #116]	; (8003de0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d6a:	623b      	str	r3, [r7, #32]
      break;
 8003d6c:	e02d      	b.n	8003dca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	0c9b      	lsrs	r3, r3, #18
 8003d72:	f003 030f 	and.w	r3, r3, #15
 8003d76:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003d7a:	4413      	add	r3, r2
 8003d7c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003d80:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d013      	beq.n	8003db4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d8c:	4b13      	ldr	r3, [pc, #76]	; (8003ddc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	0c5b      	lsrs	r3, r3, #17
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003d9a:	4413      	add	r3, r2
 8003d9c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003da0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	4a0e      	ldr	r2, [pc, #56]	; (8003de0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003da6:	fb02 f203 	mul.w	r2, r2, r3
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db0:	627b      	str	r3, [r7, #36]	; 0x24
 8003db2:	e004      	b.n	8003dbe <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	4a0b      	ldr	r2, [pc, #44]	; (8003de4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003db8:	fb02 f303 	mul.w	r3, r2, r3
 8003dbc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc0:	623b      	str	r3, [r7, #32]
      break;
 8003dc2:	e002      	b.n	8003dca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003dc4:	4b06      	ldr	r3, [pc, #24]	; (8003de0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dc6:	623b      	str	r3, [r7, #32]
      break;
 8003dc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dca:	6a3b      	ldr	r3, [r7, #32]
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3728      	adds	r7, #40	; 0x28
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bc90      	pop	{r4, r7}
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	0800a218 	.word	0x0800a218
 8003ddc:	40021000 	.word	0x40021000
 8003de0:	007a1200 	.word	0x007a1200
 8003de4:	003d0900 	.word	0x003d0900

08003de8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dec:	4b02      	ldr	r3, [pc, #8]	; (8003df8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003dee:	681b      	ldr	r3, [r3, #0]
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bc80      	pop	{r7}
 8003df6:	4770      	bx	lr
 8003df8:	20000000 	.word	0x20000000

08003dfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e00:	f7ff fff2 	bl	8003de8 <HAL_RCC_GetHCLKFreq>
 8003e04:	4602      	mov	r2, r0
 8003e06:	4b05      	ldr	r3, [pc, #20]	; (8003e1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	0a1b      	lsrs	r3, r3, #8
 8003e0c:	f003 0307 	and.w	r3, r3, #7
 8003e10:	4903      	ldr	r1, [pc, #12]	; (8003e20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e12:	5ccb      	ldrb	r3, [r1, r3]
 8003e14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	40021000 	.word	0x40021000
 8003e20:	0800a2b0 	.word	0x0800a2b0

08003e24 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b085      	sub	sp, #20
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003e2c:	4b0a      	ldr	r3, [pc, #40]	; (8003e58 <RCC_Delay+0x34>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a0a      	ldr	r2, [pc, #40]	; (8003e5c <RCC_Delay+0x38>)
 8003e32:	fba2 2303 	umull	r2, r3, r2, r3
 8003e36:	0a5b      	lsrs	r3, r3, #9
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	fb02 f303 	mul.w	r3, r2, r3
 8003e3e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003e40:	bf00      	nop
  }
  while (Delay --);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	1e5a      	subs	r2, r3, #1
 8003e46:	60fa      	str	r2, [r7, #12]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1f9      	bne.n	8003e40 <RCC_Delay+0x1c>
}
 8003e4c:	bf00      	nop
 8003e4e:	bf00      	nop
 8003e50:	3714      	adds	r7, #20
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bc80      	pop	{r7}
 8003e56:	4770      	bx	lr
 8003e58:	20000000 	.word	0x20000000
 8003e5c:	10624dd3 	.word	0x10624dd3

08003e60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e041      	b.n	8003ef6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d106      	bne.n	8003e8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f7fd ff0a 	bl	8001ca0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2202      	movs	r2, #2
 8003e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	3304      	adds	r3, #4
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	4610      	mov	r0, r2
 8003ea0:	f000 fcc4 	bl	800482c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3708      	adds	r7, #8
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
	...

08003f00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d001      	beq.n	8003f18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e03a      	b.n	8003f8e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2202      	movs	r2, #2
 8003f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68da      	ldr	r2, [r3, #12]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f042 0201 	orr.w	r2, r2, #1
 8003f2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a18      	ldr	r2, [pc, #96]	; (8003f98 <HAL_TIM_Base_Start_IT+0x98>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d00e      	beq.n	8003f58 <HAL_TIM_Base_Start_IT+0x58>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f42:	d009      	beq.n	8003f58 <HAL_TIM_Base_Start_IT+0x58>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a14      	ldr	r2, [pc, #80]	; (8003f9c <HAL_TIM_Base_Start_IT+0x9c>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d004      	beq.n	8003f58 <HAL_TIM_Base_Start_IT+0x58>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a13      	ldr	r2, [pc, #76]	; (8003fa0 <HAL_TIM_Base_Start_IT+0xa0>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d111      	bne.n	8003f7c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f003 0307 	and.w	r3, r3, #7
 8003f62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2b06      	cmp	r3, #6
 8003f68:	d010      	beq.n	8003f8c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f042 0201 	orr.w	r2, r2, #1
 8003f78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f7a:	e007      	b.n	8003f8c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f042 0201 	orr.w	r2, r2, #1
 8003f8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3714      	adds	r7, #20
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bc80      	pop	{r7}
 8003f96:	4770      	bx	lr
 8003f98:	40012c00 	.word	0x40012c00
 8003f9c:	40000400 	.word	0x40000400
 8003fa0:	40000800 	.word	0x40000800

08003fa4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68da      	ldr	r2, [r3, #12]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f022 0201 	bic.w	r2, r2, #1
 8003fba:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	6a1a      	ldr	r2, [r3, #32]
 8003fc2:	f241 1311 	movw	r3, #4369	; 0x1111
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d10f      	bne.n	8003fec <HAL_TIM_Base_Stop_IT+0x48>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	6a1a      	ldr	r2, [r3, #32]
 8003fd2:	f240 4344 	movw	r3, #1092	; 0x444
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d107      	bne.n	8003fec <HAL_TIM_Base_Stop_IT+0x48>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f022 0201 	bic.w	r2, r2, #1
 8003fea:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bc80      	pop	{r7}
 8003ffe:	4770      	bx	lr

08004000 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e041      	b.n	8004096 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d106      	bne.n	800402c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f7fd fdf2 	bl	8001c10 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2202      	movs	r2, #2
 8004030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	3304      	adds	r3, #4
 800403c:	4619      	mov	r1, r3
 800403e:	4610      	mov	r0, r2
 8004040:	f000 fbf4 	bl	800482c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3708      	adds	r7, #8
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
	...

080040a0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d104      	bne.n	80040ba <HAL_TIM_IC_Start_IT+0x1a>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	e013      	b.n	80040e2 <HAL_TIM_IC_Start_IT+0x42>
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	2b04      	cmp	r3, #4
 80040be:	d104      	bne.n	80040ca <HAL_TIM_IC_Start_IT+0x2a>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	e00b      	b.n	80040e2 <HAL_TIM_IC_Start_IT+0x42>
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	2b08      	cmp	r3, #8
 80040ce:	d104      	bne.n	80040da <HAL_TIM_IC_Start_IT+0x3a>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	e003      	b.n	80040e2 <HAL_TIM_IC_Start_IT+0x42>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d104      	bne.n	80040f4 <HAL_TIM_IC_Start_IT+0x54>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	e013      	b.n	800411c <HAL_TIM_IC_Start_IT+0x7c>
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	2b04      	cmp	r3, #4
 80040f8:	d104      	bne.n	8004104 <HAL_TIM_IC_Start_IT+0x64>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004100:	b2db      	uxtb	r3, r3
 8004102:	e00b      	b.n	800411c <HAL_TIM_IC_Start_IT+0x7c>
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	2b08      	cmp	r3, #8
 8004108:	d104      	bne.n	8004114 <HAL_TIM_IC_Start_IT+0x74>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004110:	b2db      	uxtb	r3, r3
 8004112:	e003      	b.n	800411c <HAL_TIM_IC_Start_IT+0x7c>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800411a:	b2db      	uxtb	r3, r3
 800411c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800411e:	7bfb      	ldrb	r3, [r7, #15]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d102      	bne.n	800412a <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004124:	7bbb      	ldrb	r3, [r7, #14]
 8004126:	2b01      	cmp	r3, #1
 8004128:	d001      	beq.n	800412e <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e0b3      	b.n	8004296 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d104      	bne.n	800413e <HAL_TIM_IC_Start_IT+0x9e>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2202      	movs	r2, #2
 8004138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800413c:	e013      	b.n	8004166 <HAL_TIM_IC_Start_IT+0xc6>
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	2b04      	cmp	r3, #4
 8004142:	d104      	bne.n	800414e <HAL_TIM_IC_Start_IT+0xae>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2202      	movs	r2, #2
 8004148:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800414c:	e00b      	b.n	8004166 <HAL_TIM_IC_Start_IT+0xc6>
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	2b08      	cmp	r3, #8
 8004152:	d104      	bne.n	800415e <HAL_TIM_IC_Start_IT+0xbe>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2202      	movs	r2, #2
 8004158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800415c:	e003      	b.n	8004166 <HAL_TIM_IC_Start_IT+0xc6>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2202      	movs	r2, #2
 8004162:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d104      	bne.n	8004176 <HAL_TIM_IC_Start_IT+0xd6>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2202      	movs	r2, #2
 8004170:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004174:	e013      	b.n	800419e <HAL_TIM_IC_Start_IT+0xfe>
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	2b04      	cmp	r3, #4
 800417a:	d104      	bne.n	8004186 <HAL_TIM_IC_Start_IT+0xe6>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2202      	movs	r2, #2
 8004180:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004184:	e00b      	b.n	800419e <HAL_TIM_IC_Start_IT+0xfe>
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	2b08      	cmp	r3, #8
 800418a:	d104      	bne.n	8004196 <HAL_TIM_IC_Start_IT+0xf6>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2202      	movs	r2, #2
 8004190:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004194:	e003      	b.n	800419e <HAL_TIM_IC_Start_IT+0xfe>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2202      	movs	r2, #2
 800419a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	2b0c      	cmp	r3, #12
 80041a2:	d841      	bhi.n	8004228 <HAL_TIM_IC_Start_IT+0x188>
 80041a4:	a201      	add	r2, pc, #4	; (adr r2, 80041ac <HAL_TIM_IC_Start_IT+0x10c>)
 80041a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041aa:	bf00      	nop
 80041ac:	080041e1 	.word	0x080041e1
 80041b0:	08004229 	.word	0x08004229
 80041b4:	08004229 	.word	0x08004229
 80041b8:	08004229 	.word	0x08004229
 80041bc:	080041f3 	.word	0x080041f3
 80041c0:	08004229 	.word	0x08004229
 80041c4:	08004229 	.word	0x08004229
 80041c8:	08004229 	.word	0x08004229
 80041cc:	08004205 	.word	0x08004205
 80041d0:	08004229 	.word	0x08004229
 80041d4:	08004229 	.word	0x08004229
 80041d8:	08004229 	.word	0x08004229
 80041dc:	08004217 	.word	0x08004217
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68da      	ldr	r2, [r3, #12]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f042 0202 	orr.w	r2, r2, #2
 80041ee:	60da      	str	r2, [r3, #12]
      break;
 80041f0:	e01b      	b.n	800422a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68da      	ldr	r2, [r3, #12]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f042 0204 	orr.w	r2, r2, #4
 8004200:	60da      	str	r2, [r3, #12]
      break;
 8004202:	e012      	b.n	800422a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68da      	ldr	r2, [r3, #12]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f042 0208 	orr.w	r2, r2, #8
 8004212:	60da      	str	r2, [r3, #12]
      break;
 8004214:	e009      	b.n	800422a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68da      	ldr	r2, [r3, #12]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f042 0210 	orr.w	r2, r2, #16
 8004224:	60da      	str	r2, [r3, #12]
      break;
 8004226:	e000      	b.n	800422a <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8004228:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2201      	movs	r2, #1
 8004230:	6839      	ldr	r1, [r7, #0]
 8004232:	4618      	mov	r0, r3
 8004234:	f000 fcff 	bl	8004c36 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a18      	ldr	r2, [pc, #96]	; (80042a0 <HAL_TIM_IC_Start_IT+0x200>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d00e      	beq.n	8004260 <HAL_TIM_IC_Start_IT+0x1c0>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800424a:	d009      	beq.n	8004260 <HAL_TIM_IC_Start_IT+0x1c0>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a14      	ldr	r2, [pc, #80]	; (80042a4 <HAL_TIM_IC_Start_IT+0x204>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d004      	beq.n	8004260 <HAL_TIM_IC_Start_IT+0x1c0>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a13      	ldr	r2, [pc, #76]	; (80042a8 <HAL_TIM_IC_Start_IT+0x208>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d111      	bne.n	8004284 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f003 0307 	and.w	r3, r3, #7
 800426a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	2b06      	cmp	r3, #6
 8004270:	d010      	beq.n	8004294 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f042 0201 	orr.w	r2, r2, #1
 8004280:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004282:	e007      	b.n	8004294 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f042 0201 	orr.w	r2, r2, #1
 8004292:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	40012c00 	.word	0x40012c00
 80042a4:	40000400 	.word	0x40000400
 80042a8:	40000800 	.word	0x40000800

080042ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d122      	bne.n	8004308 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	f003 0302 	and.w	r3, r3, #2
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d11b      	bne.n	8004308 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f06f 0202 	mvn.w	r2, #2
 80042d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	f003 0303 	and.w	r3, r3, #3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d003      	beq.n	80042f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f7fc ffce 	bl	8001290 <HAL_TIM_IC_CaptureCallback>
 80042f4:	e005      	b.n	8004302 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 fa7c 	bl	80047f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f000 fa82 	bl	8004806 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	f003 0304 	and.w	r3, r3, #4
 8004312:	2b04      	cmp	r3, #4
 8004314:	d122      	bne.n	800435c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	f003 0304 	and.w	r3, r3, #4
 8004320:	2b04      	cmp	r3, #4
 8004322:	d11b      	bne.n	800435c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f06f 0204 	mvn.w	r2, #4
 800432c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2202      	movs	r2, #2
 8004332:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800433e:	2b00      	cmp	r3, #0
 8004340:	d003      	beq.n	800434a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f7fc ffa4 	bl	8001290 <HAL_TIM_IC_CaptureCallback>
 8004348:	e005      	b.n	8004356 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 fa52 	bl	80047f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f000 fa58 	bl	8004806 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	f003 0308 	and.w	r3, r3, #8
 8004366:	2b08      	cmp	r3, #8
 8004368:	d122      	bne.n	80043b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	f003 0308 	and.w	r3, r3, #8
 8004374:	2b08      	cmp	r3, #8
 8004376:	d11b      	bne.n	80043b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f06f 0208 	mvn.w	r2, #8
 8004380:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2204      	movs	r2, #4
 8004386:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	69db      	ldr	r3, [r3, #28]
 800438e:	f003 0303 	and.w	r3, r3, #3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d003      	beq.n	800439e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f7fc ff7a 	bl	8001290 <HAL_TIM_IC_CaptureCallback>
 800439c:	e005      	b.n	80043aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 fa28 	bl	80047f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 fa2e 	bl	8004806 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	f003 0310 	and.w	r3, r3, #16
 80043ba:	2b10      	cmp	r3, #16
 80043bc:	d122      	bne.n	8004404 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	f003 0310 	and.w	r3, r3, #16
 80043c8:	2b10      	cmp	r3, #16
 80043ca:	d11b      	bne.n	8004404 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f06f 0210 	mvn.w	r2, #16
 80043d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2208      	movs	r2, #8
 80043da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	69db      	ldr	r3, [r3, #28]
 80043e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d003      	beq.n	80043f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f7fc ff50 	bl	8001290 <HAL_TIM_IC_CaptureCallback>
 80043f0:	e005      	b.n	80043fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 f9fe 	bl	80047f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 fa04 	bl	8004806 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	f003 0301 	and.w	r3, r3, #1
 800440e:	2b01      	cmp	r3, #1
 8004410:	d10e      	bne.n	8004430 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	f003 0301 	and.w	r3, r3, #1
 800441c:	2b01      	cmp	r3, #1
 800441e:	d107      	bne.n	8004430 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f06f 0201 	mvn.w	r2, #1
 8004428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f7fc fe84 	bl	8001138 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800443a:	2b80      	cmp	r3, #128	; 0x80
 800443c:	d10e      	bne.n	800445c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004448:	2b80      	cmp	r3, #128	; 0x80
 800444a:	d107      	bne.n	800445c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 fc79 	bl	8004d4e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004466:	2b40      	cmp	r3, #64	; 0x40
 8004468:	d10e      	bne.n	8004488 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004474:	2b40      	cmp	r3, #64	; 0x40
 8004476:	d107      	bne.n	8004488 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f9c8 	bl	8004818 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	f003 0320 	and.w	r3, r3, #32
 8004492:	2b20      	cmp	r3, #32
 8004494:	d10e      	bne.n	80044b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	f003 0320 	and.w	r3, r3, #32
 80044a0:	2b20      	cmp	r3, #32
 80044a2:	d107      	bne.n	80044b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f06f 0220 	mvn.w	r2, #32
 80044ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 fc44 	bl	8004d3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044b4:	bf00      	nop
 80044b6:	3708      	adds	r7, #8
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d101      	bne.n	80044d6 <HAL_TIM_IC_ConfigChannel+0x1a>
 80044d2:	2302      	movs	r3, #2
 80044d4:	e082      	b.n	80045dc <HAL_TIM_IC_ConfigChannel+0x120>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2201      	movs	r2, #1
 80044da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d11b      	bne.n	800451c <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6818      	ldr	r0, [r3, #0]
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	6819      	ldr	r1, [r3, #0]
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	685a      	ldr	r2, [r3, #4]
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	f000 f9fc 	bl	80048f0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	699a      	ldr	r2, [r3, #24]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f022 020c 	bic.w	r2, r2, #12
 8004506:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	6999      	ldr	r1, [r3, #24]
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	689a      	ldr	r2, [r3, #8]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	430a      	orrs	r2, r1
 8004518:	619a      	str	r2, [r3, #24]
 800451a:	e05a      	b.n	80045d2 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2b04      	cmp	r3, #4
 8004520:	d11c      	bne.n	800455c <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6818      	ldr	r0, [r3, #0]
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	6819      	ldr	r1, [r3, #0]
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	685a      	ldr	r2, [r3, #4]
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	f000 fa65 	bl	8004a00 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	699a      	ldr	r2, [r3, #24]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004544:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	6999      	ldr	r1, [r3, #24]
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	021a      	lsls	r2, r3, #8
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	430a      	orrs	r2, r1
 8004558:	619a      	str	r2, [r3, #24]
 800455a:	e03a      	b.n	80045d2 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2b08      	cmp	r3, #8
 8004560:	d11b      	bne.n	800459a <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6818      	ldr	r0, [r3, #0]
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	6819      	ldr	r1, [r3, #0]
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	685a      	ldr	r2, [r3, #4]
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	f000 fab0 	bl	8004ad6 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	69da      	ldr	r2, [r3, #28]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f022 020c 	bic.w	r2, r2, #12
 8004584:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	69d9      	ldr	r1, [r3, #28]
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	689a      	ldr	r2, [r3, #8]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	430a      	orrs	r2, r1
 8004596:	61da      	str	r2, [r3, #28]
 8004598:	e01b      	b.n	80045d2 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6818      	ldr	r0, [r3, #0]
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	6819      	ldr	r1, [r3, #0]
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	685a      	ldr	r2, [r3, #4]
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	f000 facf 	bl	8004b4c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	69da      	ldr	r2, [r3, #28]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80045bc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	69d9      	ldr	r1, [r3, #28]
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	021a      	lsls	r2, r3, #8
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	430a      	orrs	r2, r1
 80045d0:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045da:	2300      	movs	r3, #0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3710      	adds	r7, #16
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d101      	bne.n	80045fc <HAL_TIM_ConfigClockSource+0x18>
 80045f8:	2302      	movs	r3, #2
 80045fa:	e0b3      	b.n	8004764 <HAL_TIM_ConfigClockSource+0x180>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2202      	movs	r2, #2
 8004608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800461a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004622:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004634:	d03e      	beq.n	80046b4 <HAL_TIM_ConfigClockSource+0xd0>
 8004636:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800463a:	f200 8087 	bhi.w	800474c <HAL_TIM_ConfigClockSource+0x168>
 800463e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004642:	f000 8085 	beq.w	8004750 <HAL_TIM_ConfigClockSource+0x16c>
 8004646:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800464a:	d87f      	bhi.n	800474c <HAL_TIM_ConfigClockSource+0x168>
 800464c:	2b70      	cmp	r3, #112	; 0x70
 800464e:	d01a      	beq.n	8004686 <HAL_TIM_ConfigClockSource+0xa2>
 8004650:	2b70      	cmp	r3, #112	; 0x70
 8004652:	d87b      	bhi.n	800474c <HAL_TIM_ConfigClockSource+0x168>
 8004654:	2b60      	cmp	r3, #96	; 0x60
 8004656:	d050      	beq.n	80046fa <HAL_TIM_ConfigClockSource+0x116>
 8004658:	2b60      	cmp	r3, #96	; 0x60
 800465a:	d877      	bhi.n	800474c <HAL_TIM_ConfigClockSource+0x168>
 800465c:	2b50      	cmp	r3, #80	; 0x50
 800465e:	d03c      	beq.n	80046da <HAL_TIM_ConfigClockSource+0xf6>
 8004660:	2b50      	cmp	r3, #80	; 0x50
 8004662:	d873      	bhi.n	800474c <HAL_TIM_ConfigClockSource+0x168>
 8004664:	2b40      	cmp	r3, #64	; 0x40
 8004666:	d058      	beq.n	800471a <HAL_TIM_ConfigClockSource+0x136>
 8004668:	2b40      	cmp	r3, #64	; 0x40
 800466a:	d86f      	bhi.n	800474c <HAL_TIM_ConfigClockSource+0x168>
 800466c:	2b30      	cmp	r3, #48	; 0x30
 800466e:	d064      	beq.n	800473a <HAL_TIM_ConfigClockSource+0x156>
 8004670:	2b30      	cmp	r3, #48	; 0x30
 8004672:	d86b      	bhi.n	800474c <HAL_TIM_ConfigClockSource+0x168>
 8004674:	2b20      	cmp	r3, #32
 8004676:	d060      	beq.n	800473a <HAL_TIM_ConfigClockSource+0x156>
 8004678:	2b20      	cmp	r3, #32
 800467a:	d867      	bhi.n	800474c <HAL_TIM_ConfigClockSource+0x168>
 800467c:	2b00      	cmp	r3, #0
 800467e:	d05c      	beq.n	800473a <HAL_TIM_ConfigClockSource+0x156>
 8004680:	2b10      	cmp	r3, #16
 8004682:	d05a      	beq.n	800473a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004684:	e062      	b.n	800474c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6818      	ldr	r0, [r3, #0]
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	6899      	ldr	r1, [r3, #8]
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	685a      	ldr	r2, [r3, #4]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	f000 faaf 	bl	8004bf8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80046a8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	609a      	str	r2, [r3, #8]
      break;
 80046b2:	e04e      	b.n	8004752 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6818      	ldr	r0, [r3, #0]
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	6899      	ldr	r1, [r3, #8]
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	685a      	ldr	r2, [r3, #4]
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	f000 fa98 	bl	8004bf8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	689a      	ldr	r2, [r3, #8]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046d6:	609a      	str	r2, [r3, #8]
      break;
 80046d8:	e03b      	b.n	8004752 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6818      	ldr	r0, [r3, #0]
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	6859      	ldr	r1, [r3, #4]
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	461a      	mov	r2, r3
 80046e8:	f000 f95c 	bl	80049a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2150      	movs	r1, #80	; 0x50
 80046f2:	4618      	mov	r0, r3
 80046f4:	f000 fa66 	bl	8004bc4 <TIM_ITRx_SetConfig>
      break;
 80046f8:	e02b      	b.n	8004752 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6818      	ldr	r0, [r3, #0]
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	6859      	ldr	r1, [r3, #4]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	461a      	mov	r2, r3
 8004708:	f000 f9b6 	bl	8004a78 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2160      	movs	r1, #96	; 0x60
 8004712:	4618      	mov	r0, r3
 8004714:	f000 fa56 	bl	8004bc4 <TIM_ITRx_SetConfig>
      break;
 8004718:	e01b      	b.n	8004752 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6818      	ldr	r0, [r3, #0]
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	6859      	ldr	r1, [r3, #4]
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	461a      	mov	r2, r3
 8004728:	f000 f93c 	bl	80049a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2140      	movs	r1, #64	; 0x40
 8004732:	4618      	mov	r0, r3
 8004734:	f000 fa46 	bl	8004bc4 <TIM_ITRx_SetConfig>
      break;
 8004738:	e00b      	b.n	8004752 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4619      	mov	r1, r3
 8004744:	4610      	mov	r0, r2
 8004746:	f000 fa3d 	bl	8004bc4 <TIM_ITRx_SetConfig>
        break;
 800474a:	e002      	b.n	8004752 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800474c:	bf00      	nop
 800474e:	e000      	b.n	8004752 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004750:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2201      	movs	r2, #1
 8004756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004776:	2300      	movs	r3, #0
 8004778:	60fb      	str	r3, [r7, #12]
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	2b0c      	cmp	r3, #12
 800477e:	d831      	bhi.n	80047e4 <HAL_TIM_ReadCapturedValue+0x78>
 8004780:	a201      	add	r2, pc, #4	; (adr r2, 8004788 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004786:	bf00      	nop
 8004788:	080047bd 	.word	0x080047bd
 800478c:	080047e5 	.word	0x080047e5
 8004790:	080047e5 	.word	0x080047e5
 8004794:	080047e5 	.word	0x080047e5
 8004798:	080047c7 	.word	0x080047c7
 800479c:	080047e5 	.word	0x080047e5
 80047a0:	080047e5 	.word	0x080047e5
 80047a4:	080047e5 	.word	0x080047e5
 80047a8:	080047d1 	.word	0x080047d1
 80047ac:	080047e5 	.word	0x080047e5
 80047b0:	080047e5 	.word	0x080047e5
 80047b4:	080047e5 	.word	0x080047e5
 80047b8:	080047db 	.word	0x080047db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047c2:	60fb      	str	r3, [r7, #12]

      break;
 80047c4:	e00f      	b.n	80047e6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047cc:	60fb      	str	r3, [r7, #12]

      break;
 80047ce:	e00a      	b.n	80047e6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047d6:	60fb      	str	r3, [r7, #12]

      break;
 80047d8:	e005      	b.n	80047e6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e0:	60fb      	str	r3, [r7, #12]

      break;
 80047e2:	e000      	b.n	80047e6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80047e4:	bf00      	nop
  }

  return tmpreg;
 80047e6:	68fb      	ldr	r3, [r7, #12]
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3714      	adds	r7, #20
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bc80      	pop	{r7}
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop

080047f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047fc:	bf00      	nop
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	bc80      	pop	{r7}
 8004804:	4770      	bx	lr

08004806 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004806:	b480      	push	{r7}
 8004808:	b083      	sub	sp, #12
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800480e:	bf00      	nop
 8004810:	370c      	adds	r7, #12
 8004812:	46bd      	mov	sp, r7
 8004814:	bc80      	pop	{r7}
 8004816:	4770      	bx	lr

08004818 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	bc80      	pop	{r7}
 8004828:	4770      	bx	lr
	...

0800482c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800482c:	b480      	push	{r7}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a29      	ldr	r2, [pc, #164]	; (80048e4 <TIM_Base_SetConfig+0xb8>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d00b      	beq.n	800485c <TIM_Base_SetConfig+0x30>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800484a:	d007      	beq.n	800485c <TIM_Base_SetConfig+0x30>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4a26      	ldr	r2, [pc, #152]	; (80048e8 <TIM_Base_SetConfig+0xbc>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d003      	beq.n	800485c <TIM_Base_SetConfig+0x30>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a25      	ldr	r2, [pc, #148]	; (80048ec <TIM_Base_SetConfig+0xc0>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d108      	bne.n	800486e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004862:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	68fa      	ldr	r2, [r7, #12]
 800486a:	4313      	orrs	r3, r2
 800486c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a1c      	ldr	r2, [pc, #112]	; (80048e4 <TIM_Base_SetConfig+0xb8>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d00b      	beq.n	800488e <TIM_Base_SetConfig+0x62>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800487c:	d007      	beq.n	800488e <TIM_Base_SetConfig+0x62>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a19      	ldr	r2, [pc, #100]	; (80048e8 <TIM_Base_SetConfig+0xbc>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d003      	beq.n	800488e <TIM_Base_SetConfig+0x62>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a18      	ldr	r2, [pc, #96]	; (80048ec <TIM_Base_SetConfig+0xc0>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d108      	bne.n	80048a0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004894:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	4313      	orrs	r3, r2
 800489e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	689a      	ldr	r2, [r3, #8]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a07      	ldr	r2, [pc, #28]	; (80048e4 <TIM_Base_SetConfig+0xb8>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d103      	bne.n	80048d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	691a      	ldr	r2, [r3, #16]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	615a      	str	r2, [r3, #20]
}
 80048da:	bf00      	nop
 80048dc:	3714      	adds	r7, #20
 80048de:	46bd      	mov	sp, r7
 80048e0:	bc80      	pop	{r7}
 80048e2:	4770      	bx	lr
 80048e4:	40012c00 	.word	0x40012c00
 80048e8:	40000400 	.word	0x40000400
 80048ec:	40000800 	.word	0x40000800

080048f0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b087      	sub	sp, #28
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
 80048fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6a1b      	ldr	r3, [r3, #32]
 8004902:	f023 0201 	bic.w	r2, r3, #1
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6a1b      	ldr	r3, [r3, #32]
 8004914:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	4a1f      	ldr	r2, [pc, #124]	; (8004998 <TIM_TI1_SetConfig+0xa8>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d00b      	beq.n	8004936 <TIM_TI1_SetConfig+0x46>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004924:	d007      	beq.n	8004936 <TIM_TI1_SetConfig+0x46>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	4a1c      	ldr	r2, [pc, #112]	; (800499c <TIM_TI1_SetConfig+0xac>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d003      	beq.n	8004936 <TIM_TI1_SetConfig+0x46>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	4a1b      	ldr	r2, [pc, #108]	; (80049a0 <TIM_TI1_SetConfig+0xb0>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d101      	bne.n	800493a <TIM_TI1_SetConfig+0x4a>
 8004936:	2301      	movs	r3, #1
 8004938:	e000      	b.n	800493c <TIM_TI1_SetConfig+0x4c>
 800493a:	2300      	movs	r3, #0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d008      	beq.n	8004952 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	f023 0303 	bic.w	r3, r3, #3
 8004946:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4313      	orrs	r3, r2
 800494e:	617b      	str	r3, [r7, #20]
 8004950:	e003      	b.n	800495a <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	f043 0301 	orr.w	r3, r3, #1
 8004958:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004960:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	011b      	lsls	r3, r3, #4
 8004966:	b2db      	uxtb	r3, r3
 8004968:	697a      	ldr	r2, [r7, #20]
 800496a:	4313      	orrs	r3, r2
 800496c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	f023 030a 	bic.w	r3, r3, #10
 8004974:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	f003 030a 	and.w	r3, r3, #10
 800497c:	693a      	ldr	r2, [r7, #16]
 800497e:	4313      	orrs	r3, r2
 8004980:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	697a      	ldr	r2, [r7, #20]
 8004986:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	693a      	ldr	r2, [r7, #16]
 800498c:	621a      	str	r2, [r3, #32]
}
 800498e:	bf00      	nop
 8004990:	371c      	adds	r7, #28
 8004992:	46bd      	mov	sp, r7
 8004994:	bc80      	pop	{r7}
 8004996:	4770      	bx	lr
 8004998:	40012c00 	.word	0x40012c00
 800499c:	40000400 	.word	0x40000400
 80049a0:	40000800 	.word	0x40000800

080049a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b087      	sub	sp, #28
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6a1b      	ldr	r3, [r3, #32]
 80049b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6a1b      	ldr	r3, [r3, #32]
 80049ba:	f023 0201 	bic.w	r2, r3, #1
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	011b      	lsls	r3, r3, #4
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	f023 030a 	bic.w	r3, r3, #10
 80049e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049e2:	697a      	ldr	r2, [r7, #20]
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	693a      	ldr	r2, [r7, #16]
 80049ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	697a      	ldr	r2, [r7, #20]
 80049f4:	621a      	str	r2, [r3, #32]
}
 80049f6:	bf00      	nop
 80049f8:	371c      	adds	r7, #28
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bc80      	pop	{r7}
 80049fe:	4770      	bx	lr

08004a00 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b087      	sub	sp, #28
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	607a      	str	r2, [r7, #4]
 8004a0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6a1b      	ldr	r3, [r3, #32]
 8004a12:	f023 0210 	bic.w	r2, r3, #16
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6a1b      	ldr	r3, [r3, #32]
 8004a24:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	021b      	lsls	r3, r3, #8
 8004a32:	697a      	ldr	r2, [r7, #20]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a3e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	031b      	lsls	r3, r3, #12
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a52:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	011b      	lsls	r3, r3, #4
 8004a58:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004a5c:	693a      	ldr	r2, [r7, #16]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	697a      	ldr	r2, [r7, #20]
 8004a66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	693a      	ldr	r2, [r7, #16]
 8004a6c:	621a      	str	r2, [r3, #32]
}
 8004a6e:	bf00      	nop
 8004a70:	371c      	adds	r7, #28
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bc80      	pop	{r7}
 8004a76:	4770      	bx	lr

08004a78 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b087      	sub	sp, #28
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6a1b      	ldr	r3, [r3, #32]
 8004a88:	f023 0210 	bic.w	r2, r3, #16
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	699b      	ldr	r3, [r3, #24]
 8004a94:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6a1b      	ldr	r3, [r3, #32]
 8004a9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004aa2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	031b      	lsls	r3, r3, #12
 8004aa8:	697a      	ldr	r2, [r7, #20]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ab4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	011b      	lsls	r3, r3, #4
 8004aba:	693a      	ldr	r2, [r7, #16]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	697a      	ldr	r2, [r7, #20]
 8004ac4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	693a      	ldr	r2, [r7, #16]
 8004aca:	621a      	str	r2, [r3, #32]
}
 8004acc:	bf00      	nop
 8004ace:	371c      	adds	r7, #28
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bc80      	pop	{r7}
 8004ad4:	4770      	bx	lr

08004ad6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004ad6:	b480      	push	{r7}
 8004ad8:	b087      	sub	sp, #28
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	60f8      	str	r0, [r7, #12]
 8004ade:	60b9      	str	r1, [r7, #8]
 8004ae0:	607a      	str	r2, [r7, #4]
 8004ae2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6a1b      	ldr	r3, [r3, #32]
 8004ae8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	69db      	ldr	r3, [r3, #28]
 8004af4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6a1b      	ldr	r3, [r3, #32]
 8004afa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	f023 0303 	bic.w	r3, r3, #3
 8004b02:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004b04:	697a      	ldr	r2, [r7, #20]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b12:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	011b      	lsls	r3, r3, #4
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b26:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	021b      	lsls	r3, r3, #8
 8004b2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b30:	693a      	ldr	r2, [r7, #16]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	697a      	ldr	r2, [r7, #20]
 8004b3a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	621a      	str	r2, [r3, #32]
}
 8004b42:	bf00      	nop
 8004b44:	371c      	adds	r7, #28
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bc80      	pop	{r7}
 8004b4a:	4770      	bx	lr

08004b4c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b087      	sub	sp, #28
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	607a      	str	r2, [r7, #4]
 8004b58:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6a1b      	ldr	r3, [r3, #32]
 8004b5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	69db      	ldr	r3, [r3, #28]
 8004b6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6a1b      	ldr	r3, [r3, #32]
 8004b70:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b78:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	021b      	lsls	r3, r3, #8
 8004b7e:	697a      	ldr	r2, [r7, #20]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b8a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	031b      	lsls	r3, r3, #12
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b9e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	031b      	lsls	r3, r3, #12
 8004ba4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ba8:	693a      	ldr	r2, [r7, #16]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	693a      	ldr	r2, [r7, #16]
 8004bb8:	621a      	str	r2, [r3, #32]
}
 8004bba:	bf00      	nop
 8004bbc:	371c      	adds	r7, #28
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bc80      	pop	{r7}
 8004bc2:	4770      	bx	lr

08004bc4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bda:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bdc:	683a      	ldr	r2, [r7, #0]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	f043 0307 	orr.w	r3, r3, #7
 8004be6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	609a      	str	r2, [r3, #8]
}
 8004bee:	bf00      	nop
 8004bf0:	3714      	adds	r7, #20
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bc80      	pop	{r7}
 8004bf6:	4770      	bx	lr

08004bf8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b087      	sub	sp, #28
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	607a      	str	r2, [r7, #4]
 8004c04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	021a      	lsls	r2, r3, #8
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	431a      	orrs	r2, r3
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	697a      	ldr	r2, [r7, #20]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	697a      	ldr	r2, [r7, #20]
 8004c2a:	609a      	str	r2, [r3, #8]
}
 8004c2c:	bf00      	nop
 8004c2e:	371c      	adds	r7, #28
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bc80      	pop	{r7}
 8004c34:	4770      	bx	lr

08004c36 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c36:	b480      	push	{r7}
 8004c38:	b087      	sub	sp, #28
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	60f8      	str	r0, [r7, #12]
 8004c3e:	60b9      	str	r1, [r7, #8]
 8004c40:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	f003 031f 	and.w	r3, r3, #31
 8004c48:	2201      	movs	r2, #1
 8004c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6a1a      	ldr	r2, [r3, #32]
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	43db      	mvns	r3, r3
 8004c58:	401a      	ands	r2, r3
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6a1a      	ldr	r2, [r3, #32]
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	f003 031f 	and.w	r3, r3, #31
 8004c68:	6879      	ldr	r1, [r7, #4]
 8004c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c6e:	431a      	orrs	r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	621a      	str	r2, [r3, #32]
}
 8004c74:	bf00      	nop
 8004c76:	371c      	adds	r7, #28
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bc80      	pop	{r7}
 8004c7c:	4770      	bx	lr
	...

08004c80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d101      	bne.n	8004c98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c94:	2302      	movs	r3, #2
 8004c96:	e046      	b.n	8004d26 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2202      	movs	r2, #2
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a16      	ldr	r2, [pc, #88]	; (8004d30 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d00e      	beq.n	8004cfa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ce4:	d009      	beq.n	8004cfa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a12      	ldr	r2, [pc, #72]	; (8004d34 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d004      	beq.n	8004cfa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a10      	ldr	r2, [pc, #64]	; (8004d38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d10c      	bne.n	8004d14 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	68ba      	ldr	r2, [r7, #8]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68ba      	ldr	r2, [r7, #8]
 8004d12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3714      	adds	r7, #20
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bc80      	pop	{r7}
 8004d2e:	4770      	bx	lr
 8004d30:	40012c00 	.word	0x40012c00
 8004d34:	40000400 	.word	0x40000400
 8004d38:	40000800 	.word	0x40000800

08004d3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bc80      	pop	{r7}
 8004d4c:	4770      	bx	lr

08004d4e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d4e:	b480      	push	{r7}
 8004d50:	b083      	sub	sp, #12
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d56:	bf00      	nop
 8004d58:	370c      	adds	r7, #12
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bc80      	pop	{r7}
 8004d5e:	4770      	bx	lr

08004d60 <FIRFilter_Init>:
};




void FIRFilter_Init(FIRFilter *fir) {
 8004d60:	b480      	push	{r7}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]

	/* Clear filter buffer */
	for (uint8_t n = 0; n < FIR_FILTER_LENGTH; n++) {
 8004d68:	2300      	movs	r3, #0
 8004d6a:	73fb      	strb	r3, [r7, #15]
 8004d6c:	e008      	b.n	8004d80 <FIRFilter_Init+0x20>

		fir->buf[n] = 0.0f;
 8004d6e:	7bfa      	ldrb	r2, [r7, #15]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f04f 0100 	mov.w	r1, #0
 8004d76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (uint8_t n = 0; n < FIR_FILTER_LENGTH; n++) {
 8004d7a:	7bfb      	ldrb	r3, [r7, #15]
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	73fb      	strb	r3, [r7, #15]
 8004d80:	7bfb      	ldrb	r3, [r7, #15]
 8004d82:	2b1f      	cmp	r3, #31
 8004d84:	d9f3      	bls.n	8004d6e <FIRFilter_Init+0xe>

	}

	/* Reset buffer index */
	fir->bufIndex = 0;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	/* Clear filter output */
	fir->out = 0.0f;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f04f 0200 	mov.w	r2, #0
 8004d94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

}
 8004d98:	bf00      	nop
 8004d9a:	3714      	adds	r7, #20
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bc80      	pop	{r7}
 8004da0:	4770      	bx	lr
	...

08004da4 <FIRFilter_Update>:

float FIRFilter_Update(FIRFilter *fir, float inp) {
 8004da4:	b590      	push	{r4, r7, lr}
 8004da6:	b085      	sub	sp, #20
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]

	/* Store latest sample in buffer */
	fir->buf[fir->bufIndex] = inp;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004db4:	4619      	mov	r1, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	683a      	ldr	r2, [r7, #0]
 8004dba:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	/* Increment buffer index and wrap around if necessary */
	fir->bufIndex++;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	b2da      	uxtb	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	if (fir->bufIndex == FIR_FILTER_LENGTH) {
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004dd4:	2b20      	cmp	r3, #32
 8004dd6:	d103      	bne.n	8004de0 <FIRFilter_Update+0x3c>

		fir->bufIndex = 0;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	}

	/* Compute new output sample (via convolution) */
	fir->out = 0.0f;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f04f 0200 	mov.w	r2, #0
 8004de6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

	uint8_t sumIndex = fir->bufIndex;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004df0:	73fb      	strb	r3, [r7, #15]

	for (uint8_t n = 0; n < FIR_FILTER_LENGTH; n++) {
 8004df2:	2300      	movs	r3, #0
 8004df4:	73bb      	strb	r3, [r7, #14]
 8004df6:	e023      	b.n	8004e40 <FIRFilter_Update+0x9c>

		/* Decrement index and wrap if necessary */
		if (sumIndex > 0) {
 8004df8:	7bfb      	ldrb	r3, [r7, #15]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d003      	beq.n	8004e06 <FIRFilter_Update+0x62>

			sumIndex--;
 8004dfe:	7bfb      	ldrb	r3, [r7, #15]
 8004e00:	3b01      	subs	r3, #1
 8004e02:	73fb      	strb	r3, [r7, #15]
 8004e04:	e001      	b.n	8004e0a <FIRFilter_Update+0x66>

		} else {

			sumIndex = FIR_FILTER_LENGTH - 1;
 8004e06:	231f      	movs	r3, #31
 8004e08:	73fb      	strb	r3, [r7, #15]

		}

		/* Multiply impulse response with shifted input sample and add to output */
		fir->out += FIR_IMPULSE_RESPONSE[n] * fir->buf[sumIndex];
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8004e10:	7bbb      	ldrb	r3, [r7, #14]
 8004e12:	4a10      	ldr	r2, [pc, #64]	; (8004e54 <FIRFilter_Update+0xb0>)
 8004e14:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004e18:	7bfa      	ldrb	r2, [r7, #15]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e20:	4619      	mov	r1, r3
 8004e22:	f7fb ffaf 	bl	8000d84 <__aeabi_fmul>
 8004e26:	4603      	mov	r3, r0
 8004e28:	4619      	mov	r1, r3
 8004e2a:	4620      	mov	r0, r4
 8004e2c:	f7fb fea2 	bl	8000b74 <__addsf3>
 8004e30:	4603      	mov	r3, r0
 8004e32:	461a      	mov	r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	for (uint8_t n = 0; n < FIR_FILTER_LENGTH; n++) {
 8004e3a:	7bbb      	ldrb	r3, [r7, #14]
 8004e3c:	3301      	adds	r3, #1
 8004e3e:	73bb      	strb	r3, [r7, #14]
 8004e40:	7bbb      	ldrb	r3, [r7, #14]
 8004e42:	2b1f      	cmp	r3, #31
 8004e44:	d9d8      	bls.n	8004df8 <FIRFilter_Update+0x54>

	}

	/* Return filtered output */
	return fir->out;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84

}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3714      	adds	r7, #20
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd90      	pop	{r4, r7, pc}
 8004e54:	2000000c 	.word	0x2000000c

08004e58 <angles_update>:

#include "angles.h"


void angles_update(MPU6050 *mpu6050, ANGLES *angle)
{
 8004e58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e5c:	b082      	sub	sp, #8
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
 8004e62:	6039      	str	r1, [r7, #0]
	angle->accel_x = mpu6050->accel_x;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	60da      	str	r2, [r3, #12]
	angle->accel_y = mpu6050->accel_y;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685a      	ldr	r2, [r3, #4]
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	611a      	str	r2, [r3, #16]
	angle->accel_z = mpu6050->accel_z;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	689a      	ldr	r2, [r3, #8]
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	615a      	str	r2, [r3, #20]

	angle->accel_x = FIRFilter_Update(&ax_filter, angle->accel_x);
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	4619      	mov	r1, r3
 8004e82:	4851      	ldr	r0, [pc, #324]	; (8004fc8 <angles_update+0x170>)
 8004e84:	f7ff ff8e 	bl	8004da4 <FIRFilter_Update>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	60da      	str	r2, [r3, #12]
	angle->accel_y = FIRFilter_Update(&ay_filter, angle->accel_y);
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	4619      	mov	r1, r3
 8004e94:	484d      	ldr	r0, [pc, #308]	; (8004fcc <angles_update+0x174>)
 8004e96:	f7ff ff85 	bl	8004da4 <FIRFilter_Update>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	611a      	str	r2, [r3, #16]
	angle->accel_z = FIRFilter_Update(&az_filter, angle->accel_z);
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	695b      	ldr	r3, [r3, #20]
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	484a      	ldr	r0, [pc, #296]	; (8004fd0 <angles_update+0x178>)
 8004ea8:	f7ff ff7c 	bl	8004da4 <FIRFilter_Update>
 8004eac:	4602      	mov	r2, r0
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	615a      	str	r2, [r3, #20]

	angle->yx = -1*(atan2(angle->accel_y,angle->accel_x)*180)/PI;
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f7fb fab6 	bl	8000428 <__aeabi_f2d>
 8004ebc:	4682      	mov	sl, r0
 8004ebe:	468b      	mov	fp, r1
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f7fb faaf 	bl	8000428 <__aeabi_f2d>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	460b      	mov	r3, r1
 8004ece:	4650      	mov	r0, sl
 8004ed0:	4659      	mov	r1, fp
 8004ed2:	f003 fe9d 	bl	8008c10 <atan2>
 8004ed6:	f04f 0200 	mov.w	r2, #0
 8004eda:	4b3e      	ldr	r3, [pc, #248]	; (8004fd4 <angles_update+0x17c>)
 8004edc:	f7fb fafc 	bl	80004d8 <__aeabi_dmul>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	4690      	mov	r8, r2
 8004ee6:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8004eea:	a335      	add	r3, pc, #212	; (adr r3, 8004fc0 <angles_update+0x168>)
 8004eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef0:	4640      	mov	r0, r8
 8004ef2:	4649      	mov	r1, r9
 8004ef4:	f7fb fc1a 	bl	800072c <__aeabi_ddiv>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	460b      	mov	r3, r1
 8004efc:	4610      	mov	r0, r2
 8004efe:	4619      	mov	r1, r3
 8004f00:	f7fb fde2 	bl	8000ac8 <__aeabi_d2f>
 8004f04:	4602      	mov	r2, r0
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	601a      	str	r2, [r3, #0]
	angle->xz = (atan2(angle->accel_x,angle->accel_z)*180)/PI;
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f7fb fa8a 	bl	8000428 <__aeabi_f2d>
 8004f14:	4680      	mov	r8, r0
 8004f16:	4689      	mov	r9, r1
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	695b      	ldr	r3, [r3, #20]
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f7fb fa83 	bl	8000428 <__aeabi_f2d>
 8004f22:	4602      	mov	r2, r0
 8004f24:	460b      	mov	r3, r1
 8004f26:	4640      	mov	r0, r8
 8004f28:	4649      	mov	r1, r9
 8004f2a:	f003 fe71 	bl	8008c10 <atan2>
 8004f2e:	f04f 0200 	mov.w	r2, #0
 8004f32:	4b28      	ldr	r3, [pc, #160]	; (8004fd4 <angles_update+0x17c>)
 8004f34:	f7fb fad0 	bl	80004d8 <__aeabi_dmul>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	4610      	mov	r0, r2
 8004f3e:	4619      	mov	r1, r3
 8004f40:	a31f      	add	r3, pc, #124	; (adr r3, 8004fc0 <angles_update+0x168>)
 8004f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f46:	f7fb fbf1 	bl	800072c <__aeabi_ddiv>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	4610      	mov	r0, r2
 8004f50:	4619      	mov	r1, r3
 8004f52:	f7fb fdb9 	bl	8000ac8 <__aeabi_d2f>
 8004f56:	4602      	mov	r2, r0
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	605a      	str	r2, [r3, #4]
	angle->yz = -1*(atan2(angle->accel_y,angle->accel_z)*180)/PI;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	691b      	ldr	r3, [r3, #16]
 8004f60:	4618      	mov	r0, r3
 8004f62:	f7fb fa61 	bl	8000428 <__aeabi_f2d>
 8004f66:	4680      	mov	r8, r0
 8004f68:	4689      	mov	r9, r1
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	695b      	ldr	r3, [r3, #20]
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7fb fa5a 	bl	8000428 <__aeabi_f2d>
 8004f74:	4602      	mov	r2, r0
 8004f76:	460b      	mov	r3, r1
 8004f78:	4640      	mov	r0, r8
 8004f7a:	4649      	mov	r1, r9
 8004f7c:	f003 fe48 	bl	8008c10 <atan2>
 8004f80:	f04f 0200 	mov.w	r2, #0
 8004f84:	4b13      	ldr	r3, [pc, #76]	; (8004fd4 <angles_update+0x17c>)
 8004f86:	f7fb faa7 	bl	80004d8 <__aeabi_dmul>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	4614      	mov	r4, r2
 8004f90:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8004f94:	a30a      	add	r3, pc, #40	; (adr r3, 8004fc0 <angles_update+0x168>)
 8004f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f9a:	4620      	mov	r0, r4
 8004f9c:	4629      	mov	r1, r5
 8004f9e:	f7fb fbc5 	bl	800072c <__aeabi_ddiv>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	4610      	mov	r0, r2
 8004fa8:	4619      	mov	r1, r3
 8004faa:	f7fb fd8d 	bl	8000ac8 <__aeabi_d2f>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	609a      	str	r2, [r3, #8]

	return;
 8004fb4:	bf00      	nop
}
 8004fb6:	3708      	adds	r7, #8
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fbe:	bf00      	nop
 8004fc0:	5443d6f4 	.word	0x5443d6f4
 8004fc4:	400921fb 	.word	0x400921fb
 8004fc8:	200009f4 	.word	0x200009f4
 8004fcc:	20000ac8 	.word	0x20000ac8
 8004fd0:	20000924 	.word	0x20000924
 8004fd4:	40668000 	.word	0x40668000

08004fd8 <gui_Init>:
 */

#include "gui_multitool.h"

void gui_Init(void)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	af00      	add	r7, sp, #0

}
 8004fdc:	bf00      	nop
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bc80      	pop	{r7}
 8004fe2:	4770      	bx	lr

08004fe4 <gui_WelcomeScreen>:

void gui_WelcomeScreen(void)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	af00      	add	r7, sp, #0

	ssd1306_Fill(Black);
 8004fe8:	2000      	movs	r0, #0
 8004fea:	f000 fbe7 	bl	80057bc <ssd1306_Fill>
	ssd1306_SetCursor(1, 3);
 8004fee:	2103      	movs	r1, #3
 8004ff0:	2001      	movs	r0, #1
 8004ff2:	f000 fd49 	bl	8005a88 <ssd1306_SetCursor>
	ssd1306_WriteString("Sistemas Embebidos", Font_7x10, White);
 8004ff6:	4a14      	ldr	r2, [pc, #80]	; (8005048 <gui_WelcomeScreen+0x64>)
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	ca06      	ldmia	r2, {r1, r2}
 8004ffc:	4813      	ldr	r0, [pc, #76]	; (800504c <gui_WelcomeScreen+0x68>)
 8004ffe:	f000 fd1d 	bl	8005a3c <ssd1306_WriteString>
	ssd1306_SetCursor(1, 19);
 8005002:	2113      	movs	r1, #19
 8005004:	2001      	movs	r0, #1
 8005006:	f000 fd3f 	bl	8005a88 <ssd1306_SetCursor>
	ssd1306_WriteString("Proyecto final:", Font_7x10, White);
 800500a:	4a0f      	ldr	r2, [pc, #60]	; (8005048 <gui_WelcomeScreen+0x64>)
 800500c:	2301      	movs	r3, #1
 800500e:	ca06      	ldmia	r2, {r1, r2}
 8005010:	480f      	ldr	r0, [pc, #60]	; (8005050 <gui_WelcomeScreen+0x6c>)
 8005012:	f000 fd13 	bl	8005a3c <ssd1306_WriteString>
	ssd1306_SetCursor(1, 35);
 8005016:	2123      	movs	r1, #35	; 0x23
 8005018:	2001      	movs	r0, #1
 800501a:	f000 fd35 	bl	8005a88 <ssd1306_SetCursor>
	ssd1306_WriteString("NIVEL DE BURBUJA", Font_7x10, White);
 800501e:	4a0a      	ldr	r2, [pc, #40]	; (8005048 <gui_WelcomeScreen+0x64>)
 8005020:	2301      	movs	r3, #1
 8005022:	ca06      	ldmia	r2, {r1, r2}
 8005024:	480b      	ldr	r0, [pc, #44]	; (8005054 <gui_WelcomeScreen+0x70>)
 8005026:	f000 fd09 	bl	8005a3c <ssd1306_WriteString>
	ssd1306_SetCursor(1, 51);
 800502a:	2133      	movs	r1, #51	; 0x33
 800502c:	2001      	movs	r0, #1
 800502e:	f000 fd2b 	bl	8005a88 <ssd1306_SetCursor>
	ssd1306_WriteString("Tomas Cornaglia", Font_7x10, White);
 8005032:	4a05      	ldr	r2, [pc, #20]	; (8005048 <gui_WelcomeScreen+0x64>)
 8005034:	2301      	movs	r3, #1
 8005036:	ca06      	ldmia	r2, {r1, r2}
 8005038:	4807      	ldr	r0, [pc, #28]	; (8005058 <gui_WelcomeScreen+0x74>)
 800503a:	f000 fcff 	bl	8005a3c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800503e:	f000 fbdf 	bl	8005800 <ssd1306_UpdateScreen>

	return;
 8005042:	bf00      	nop

}
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	20000098 	.word	0x20000098
 800504c:	0800a228 	.word	0x0800a228
 8005050:	0800a23c 	.word	0x0800a23c
 8005054:	0800a24c 	.word	0x0800a24c
 8005058:	0800a260 	.word	0x0800a260

0800505c <gui_Bubble_1d>:

void gui_Bubble_1d(float angle, float temp)
{
 800505c:	b5b0      	push	{r4, r5, r7, lr}
 800505e:	b086      	sub	sp, #24
 8005060:	af02      	add	r7, sp, #8
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
	static uint8_t radius = 7;
	static int16_t x0;
	const uint8_t y0 = 52;
 8005066:	2334      	movs	r3, #52	; 0x34
 8005068:	73fb      	strb	r3, [r7, #15]
	const uint8_t x1 = 10;
 800506a:	230a      	movs	r3, #10
 800506c:	73bb      	strb	r3, [r7, #14]
	const uint8_t x2 = 120;
 800506e:	2378      	movs	r3, #120	; 0x78
 8005070:	737b      	strb	r3, [r7, #13]

	x0 = (angle / 60.0) * (x2 - (radius + 1) - (x2 + x1) / 2) + (x2 + x1) / 2;
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f7fb f9d8 	bl	8000428 <__aeabi_f2d>
 8005078:	f04f 0200 	mov.w	r2, #0
 800507c:	4b60      	ldr	r3, [pc, #384]	; (8005200 <gui_Bubble_1d+0x1a4>)
 800507e:	f7fb fb55 	bl	800072c <__aeabi_ddiv>
 8005082:	4602      	mov	r2, r0
 8005084:	460b      	mov	r3, r1
 8005086:	4614      	mov	r4, r2
 8005088:	461d      	mov	r5, r3
 800508a:	7b7a      	ldrb	r2, [r7, #13]
 800508c:	4b5d      	ldr	r3, [pc, #372]	; (8005204 <gui_Bubble_1d+0x1a8>)
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	3301      	adds	r3, #1
 8005092:	1ad2      	subs	r2, r2, r3
 8005094:	7b79      	ldrb	r1, [r7, #13]
 8005096:	7bbb      	ldrb	r3, [r7, #14]
 8005098:	440b      	add	r3, r1
 800509a:	0fd9      	lsrs	r1, r3, #31
 800509c:	440b      	add	r3, r1
 800509e:	105b      	asrs	r3, r3, #1
 80050a0:	425b      	negs	r3, r3
 80050a2:	4413      	add	r3, r2
 80050a4:	4618      	mov	r0, r3
 80050a6:	f7fb f9ad 	bl	8000404 <__aeabi_i2d>
 80050aa:	4602      	mov	r2, r0
 80050ac:	460b      	mov	r3, r1
 80050ae:	4620      	mov	r0, r4
 80050b0:	4629      	mov	r1, r5
 80050b2:	f7fb fa11 	bl	80004d8 <__aeabi_dmul>
 80050b6:	4602      	mov	r2, r0
 80050b8:	460b      	mov	r3, r1
 80050ba:	4614      	mov	r4, r2
 80050bc:	461d      	mov	r5, r3
 80050be:	7b7a      	ldrb	r2, [r7, #13]
 80050c0:	7bbb      	ldrb	r3, [r7, #14]
 80050c2:	4413      	add	r3, r2
 80050c4:	0fda      	lsrs	r2, r3, #31
 80050c6:	4413      	add	r3, r2
 80050c8:	105b      	asrs	r3, r3, #1
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7fb f99a 	bl	8000404 <__aeabi_i2d>
 80050d0:	4602      	mov	r2, r0
 80050d2:	460b      	mov	r3, r1
 80050d4:	4620      	mov	r0, r4
 80050d6:	4629      	mov	r1, r5
 80050d8:	f7fb f848 	bl	800016c <__adddf3>
 80050dc:	4602      	mov	r2, r0
 80050de:	460b      	mov	r3, r1
 80050e0:	4610      	mov	r0, r2
 80050e2:	4619      	mov	r1, r3
 80050e4:	f7fb fca8 	bl	8000a38 <__aeabi_d2iz>
 80050e8:	4603      	mov	r3, r0
 80050ea:	b21a      	sxth	r2, r3
 80050ec:	4b46      	ldr	r3, [pc, #280]	; (8005208 <gui_Bubble_1d+0x1ac>)
 80050ee:	801a      	strh	r2, [r3, #0]

	if ((x0 - (radius + 1)) <= x1)
 80050f0:	4b45      	ldr	r3, [pc, #276]	; (8005208 <gui_Bubble_1d+0x1ac>)
 80050f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80050f6:	461a      	mov	r2, r3
 80050f8:	4b42      	ldr	r3, [pc, #264]	; (8005204 <gui_Bubble_1d+0x1a8>)
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	3301      	adds	r3, #1
 80050fe:	1ad2      	subs	r2, r2, r3
 8005100:	7bbb      	ldrb	r3, [r7, #14]
 8005102:	429a      	cmp	r2, r3
 8005104:	dc0b      	bgt.n	800511e <gui_Bubble_1d+0xc2>
		x0 = x1 + (radius + 1);
 8005106:	7bbb      	ldrb	r3, [r7, #14]
 8005108:	b29a      	uxth	r2, r3
 800510a:	4b3e      	ldr	r3, [pc, #248]	; (8005204 <gui_Bubble_1d+0x1a8>)
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	b29b      	uxth	r3, r3
 8005110:	4413      	add	r3, r2
 8005112:	b29b      	uxth	r3, r3
 8005114:	3301      	adds	r3, #1
 8005116:	b29b      	uxth	r3, r3
 8005118:	b21a      	sxth	r2, r3
 800511a:	4b3b      	ldr	r3, [pc, #236]	; (8005208 <gui_Bubble_1d+0x1ac>)
 800511c:	801a      	strh	r2, [r3, #0]

	if ((x0 + (radius + 1)) >= x2)
 800511e:	4b3a      	ldr	r3, [pc, #232]	; (8005208 <gui_Bubble_1d+0x1ac>)
 8005120:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005124:	461a      	mov	r2, r3
 8005126:	4b37      	ldr	r3, [pc, #220]	; (8005204 <gui_Bubble_1d+0x1a8>)
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	3301      	adds	r3, #1
 800512c:	441a      	add	r2, r3
 800512e:	7b7b      	ldrb	r3, [r7, #13]
 8005130:	429a      	cmp	r2, r3
 8005132:	db0b      	blt.n	800514c <gui_Bubble_1d+0xf0>
		x0 = x2 - (radius + 1);
 8005134:	7b7b      	ldrb	r3, [r7, #13]
 8005136:	b29a      	uxth	r2, r3
 8005138:	4b32      	ldr	r3, [pc, #200]	; (8005204 <gui_Bubble_1d+0x1a8>)
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	b29b      	uxth	r3, r3
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	b29b      	uxth	r3, r3
 8005142:	3b01      	subs	r3, #1
 8005144:	b29b      	uxth	r3, r3
 8005146:	b21a      	sxth	r2, r3
 8005148:	4b2f      	ldr	r3, [pc, #188]	; (8005208 <gui_Bubble_1d+0x1ac>)
 800514a:	801a      	strh	r2, [r3, #0]

	ssd1306_Fill(Black);
 800514c:	2000      	movs	r0, #0
 800514e:	f000 fb35 	bl	80057bc <ssd1306_Fill>
	ssd1306_DrawRectangle(x1, y0 - (radius + 1), x2, y0 + (radius + 1), White);
 8005152:	4b2c      	ldr	r3, [pc, #176]	; (8005204 <gui_Bubble_1d+0x1a8>)
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	7bfa      	ldrb	r2, [r7, #15]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	b2db      	uxtb	r3, r3
 800515c:	3b01      	subs	r3, #1
 800515e:	b2d9      	uxtb	r1, r3
 8005160:	4b28      	ldr	r3, [pc, #160]	; (8005204 <gui_Bubble_1d+0x1a8>)
 8005162:	781a      	ldrb	r2, [r3, #0]
 8005164:	7bfb      	ldrb	r3, [r7, #15]
 8005166:	4413      	add	r3, r2
 8005168:	b2db      	uxtb	r3, r3
 800516a:	3301      	adds	r3, #1
 800516c:	b2db      	uxtb	r3, r3
 800516e:	7b7a      	ldrb	r2, [r7, #13]
 8005170:	7bb8      	ldrb	r0, [r7, #14]
 8005172:	2401      	movs	r4, #1
 8005174:	9400      	str	r4, [sp, #0]
 8005176:	f000 fd91 	bl	8005c9c <ssd1306_DrawRectangle>
	ssd1306_DrawCircle(x0, y0, radius, White);
 800517a:	4b23      	ldr	r3, [pc, #140]	; (8005208 <gui_Bubble_1d+0x1ac>)
 800517c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005180:	b2d8      	uxtb	r0, r3
 8005182:	4b20      	ldr	r3, [pc, #128]	; (8005204 <gui_Bubble_1d+0x1a8>)
 8005184:	781a      	ldrb	r2, [r3, #0]
 8005186:	7bf9      	ldrb	r1, [r7, #15]
 8005188:	2301      	movs	r3, #1
 800518a:	f000 fd01 	bl	8005b90 <ssd1306_DrawCircle>
	ssd1306_DrawCircle(x0 + 3, y0 - 3, 2, White);
 800518e:	4b1e      	ldr	r3, [pc, #120]	; (8005208 <gui_Bubble_1d+0x1ac>)
 8005190:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005194:	b2db      	uxtb	r3, r3
 8005196:	3303      	adds	r3, #3
 8005198:	b2d8      	uxtb	r0, r3
 800519a:	7bfb      	ldrb	r3, [r7, #15]
 800519c:	3b03      	subs	r3, #3
 800519e:	b2d9      	uxtb	r1, r3
 80051a0:	2301      	movs	r3, #1
 80051a2:	2202      	movs	r2, #2
 80051a4:	f000 fcf4 	bl	8005b90 <ssd1306_DrawCircle>

	sprintf(MSG0, "%+.1f", angle);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f7fb f93d 	bl	8000428 <__aeabi_f2d>
 80051ae:	4602      	mov	r2, r0
 80051b0:	460b      	mov	r3, r1
 80051b2:	4916      	ldr	r1, [pc, #88]	; (800520c <gui_Bubble_1d+0x1b0>)
 80051b4:	4816      	ldr	r0, [pc, #88]	; (8005210 <gui_Bubble_1d+0x1b4>)
 80051b6:	f001 fa79 	bl	80066ac <siprintf>
	ssd1306_SetCursor(26, 15);
 80051ba:	210f      	movs	r1, #15
 80051bc:	201a      	movs	r0, #26
 80051be:	f000 fc63 	bl	8005a88 <ssd1306_SetCursor>
	ssd1306_WriteString(MSG0, Font_16x26, White);
 80051c2:	4a14      	ldr	r2, [pc, #80]	; (8005214 <gui_Bubble_1d+0x1b8>)
 80051c4:	2301      	movs	r3, #1
 80051c6:	ca06      	ldmia	r2, {r1, r2}
 80051c8:	4811      	ldr	r0, [pc, #68]	; (8005210 <gui_Bubble_1d+0x1b4>)
 80051ca:	f000 fc37 	bl	8005a3c <ssd1306_WriteString>

	sprintf(MSG0, "%+.1fC", temp);
 80051ce:	6838      	ldr	r0, [r7, #0]
 80051d0:	f7fb f92a 	bl	8000428 <__aeabi_f2d>
 80051d4:	4602      	mov	r2, r0
 80051d6:	460b      	mov	r3, r1
 80051d8:	490f      	ldr	r1, [pc, #60]	; (8005218 <gui_Bubble_1d+0x1bc>)
 80051da:	480d      	ldr	r0, [pc, #52]	; (8005210 <gui_Bubble_1d+0x1b4>)
 80051dc:	f001 fa66 	bl	80066ac <siprintf>
	ssd1306_SetCursor(1, 1);
 80051e0:	2101      	movs	r1, #1
 80051e2:	2001      	movs	r0, #1
 80051e4:	f000 fc50 	bl	8005a88 <ssd1306_SetCursor>
	ssd1306_WriteString(MSG0, Font_6x8, White);
 80051e8:	4a0c      	ldr	r2, [pc, #48]	; (800521c <gui_Bubble_1d+0x1c0>)
 80051ea:	2301      	movs	r3, #1
 80051ec:	ca06      	ldmia	r2, {r1, r2}
 80051ee:	4808      	ldr	r0, [pc, #32]	; (8005210 <gui_Bubble_1d+0x1b4>)
 80051f0:	f000 fc24 	bl	8005a3c <ssd1306_WriteString>

	ssd1306_UpdateScreen();
 80051f4:	f000 fb04 	bl	8005800 <ssd1306_UpdateScreen>

	return;
 80051f8:	bf00      	nop
}
 80051fa:	3710      	adds	r7, #16
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bdb0      	pop	{r4, r5, r7, pc}
 8005200:	404e0000 	.word	0x404e0000
 8005204:	2000008c 	.word	0x2000008c
 8005208:	200002e4 	.word	0x200002e4
 800520c:	0800a270 	.word	0x0800a270
 8005210:	20000708 	.word	0x20000708
 8005214:	200000a0 	.word	0x200000a0
 8005218:	0800a278 	.word	0x0800a278
 800521c:	20000090 	.word	0x20000090

08005220 <gui_Bubble_2d>:

void gui_Bubble_2d(float angle_xz, float angle_yz, float temp)
{
 8005220:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005224:	b08a      	sub	sp, #40	; 0x28
 8005226:	af02      	add	r7, sp, #8
 8005228:	60f8      	str	r0, [r7, #12]
 800522a:	60b9      	str	r1, [r7, #8]
 800522c:	607a      	str	r2, [r7, #4]
	uint8_t x0 = 95;
 800522e:	235f      	movs	r3, #95	; 0x5f
 8005230:	76fb      	strb	r3, [r7, #27]
	uint8_t y0 = 32;
 8005232:	2320      	movs	r3, #32
 8005234:	76bb      	strb	r3, [r7, #26]
	//	CONVERSION A COORDENADAS POLARES

	float radius;
	float theta;

	radius = sqrt(angle_yz*angle_yz + angle_xz*angle_xz);
 8005236:	68b9      	ldr	r1, [r7, #8]
 8005238:	68b8      	ldr	r0, [r7, #8]
 800523a:	f7fb fda3 	bl	8000d84 <__aeabi_fmul>
 800523e:	4603      	mov	r3, r0
 8005240:	461c      	mov	r4, r3
 8005242:	68f9      	ldr	r1, [r7, #12]
 8005244:	68f8      	ldr	r0, [r7, #12]
 8005246:	f7fb fd9d 	bl	8000d84 <__aeabi_fmul>
 800524a:	4603      	mov	r3, r0
 800524c:	4619      	mov	r1, r3
 800524e:	4620      	mov	r0, r4
 8005250:	f7fb fc90 	bl	8000b74 <__addsf3>
 8005254:	4603      	mov	r3, r0
 8005256:	4618      	mov	r0, r3
 8005258:	f7fb f8e6 	bl	8000428 <__aeabi_f2d>
 800525c:	4602      	mov	r2, r0
 800525e:	460b      	mov	r3, r1
 8005260:	4610      	mov	r0, r2
 8005262:	4619      	mov	r1, r3
 8005264:	f003 fcd6 	bl	8008c14 <sqrt>
 8005268:	4602      	mov	r2, r0
 800526a:	460b      	mov	r3, r1
 800526c:	4610      	mov	r0, r2
 800526e:	4619      	mov	r1, r3
 8005270:	f7fb fc2a 	bl	8000ac8 <__aeabi_d2f>
 8005274:	4603      	mov	r3, r0
 8005276:	61fb      	str	r3, [r7, #28]

	if(radius > 26)
 8005278:	496f      	ldr	r1, [pc, #444]	; (8005438 <gui_Bubble_2d+0x218>)
 800527a:	69f8      	ldr	r0, [r7, #28]
 800527c:	f7fb ff3e 	bl	80010fc <__aeabi_fcmpgt>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d001      	beq.n	800528a <gui_Bubble_2d+0x6a>
		radius = 26;
 8005286:	4b6c      	ldr	r3, [pc, #432]	; (8005438 <gui_Bubble_2d+0x218>)
 8005288:	61fb      	str	r3, [r7, #28]

	theta = atan2(angle_xz, angle_yz);
 800528a:	68f8      	ldr	r0, [r7, #12]
 800528c:	f7fb f8cc 	bl	8000428 <__aeabi_f2d>
 8005290:	4604      	mov	r4, r0
 8005292:	460d      	mov	r5, r1
 8005294:	68b8      	ldr	r0, [r7, #8]
 8005296:	f7fb f8c7 	bl	8000428 <__aeabi_f2d>
 800529a:	4602      	mov	r2, r0
 800529c:	460b      	mov	r3, r1
 800529e:	4620      	mov	r0, r4
 80052a0:	4629      	mov	r1, r5
 80052a2:	f003 fcb5 	bl	8008c10 <atan2>
 80052a6:	4602      	mov	r2, r0
 80052a8:	460b      	mov	r3, r1
 80052aa:	4610      	mov	r0, r2
 80052ac:	4619      	mov	r1, r3
 80052ae:	f7fb fc0b 	bl	8000ac8 <__aeabi_d2f>
 80052b2:	4603      	mov	r3, r0
 80052b4:	617b      	str	r3, [r7, #20]

	x0 += radius * sin(theta);
 80052b6:	7efb      	ldrb	r3, [r7, #27]
 80052b8:	4618      	mov	r0, r3
 80052ba:	f7fb f8a3 	bl	8000404 <__aeabi_i2d>
 80052be:	4604      	mov	r4, r0
 80052c0:	460d      	mov	r5, r1
 80052c2:	69f8      	ldr	r0, [r7, #28]
 80052c4:	f7fb f8b0 	bl	8000428 <__aeabi_f2d>
 80052c8:	4680      	mov	r8, r0
 80052ca:	4689      	mov	r9, r1
 80052cc:	6978      	ldr	r0, [r7, #20]
 80052ce:	f7fb f8ab 	bl	8000428 <__aeabi_f2d>
 80052d2:	4602      	mov	r2, r0
 80052d4:	460b      	mov	r3, r1
 80052d6:	4610      	mov	r0, r2
 80052d8:	4619      	mov	r1, r3
 80052da:	f003 fc53 	bl	8008b84 <sin>
 80052de:	4602      	mov	r2, r0
 80052e0:	460b      	mov	r3, r1
 80052e2:	4640      	mov	r0, r8
 80052e4:	4649      	mov	r1, r9
 80052e6:	f7fb f8f7 	bl	80004d8 <__aeabi_dmul>
 80052ea:	4602      	mov	r2, r0
 80052ec:	460b      	mov	r3, r1
 80052ee:	4620      	mov	r0, r4
 80052f0:	4629      	mov	r1, r5
 80052f2:	f7fa ff3b 	bl	800016c <__adddf3>
 80052f6:	4602      	mov	r2, r0
 80052f8:	460b      	mov	r3, r1
 80052fa:	4610      	mov	r0, r2
 80052fc:	4619      	mov	r1, r3
 80052fe:	f7fb fbc3 	bl	8000a88 <__aeabi_d2uiz>
 8005302:	4603      	mov	r3, r0
 8005304:	76fb      	strb	r3, [r7, #27]
	y0 -= radius * cos(theta);
 8005306:	7ebb      	ldrb	r3, [r7, #26]
 8005308:	4618      	mov	r0, r3
 800530a:	f7fb f87b 	bl	8000404 <__aeabi_i2d>
 800530e:	4604      	mov	r4, r0
 8005310:	460d      	mov	r5, r1
 8005312:	69f8      	ldr	r0, [r7, #28]
 8005314:	f7fb f888 	bl	8000428 <__aeabi_f2d>
 8005318:	4680      	mov	r8, r0
 800531a:	4689      	mov	r9, r1
 800531c:	6978      	ldr	r0, [r7, #20]
 800531e:	f7fb f883 	bl	8000428 <__aeabi_f2d>
 8005322:	4602      	mov	r2, r0
 8005324:	460b      	mov	r3, r1
 8005326:	4610      	mov	r0, r2
 8005328:	4619      	mov	r1, r3
 800532a:	f003 fbe9 	bl	8008b00 <cos>
 800532e:	4602      	mov	r2, r0
 8005330:	460b      	mov	r3, r1
 8005332:	4640      	mov	r0, r8
 8005334:	4649      	mov	r1, r9
 8005336:	f7fb f8cf 	bl	80004d8 <__aeabi_dmul>
 800533a:	4602      	mov	r2, r0
 800533c:	460b      	mov	r3, r1
 800533e:	4620      	mov	r0, r4
 8005340:	4629      	mov	r1, r5
 8005342:	f7fa ff11 	bl	8000168 <__aeabi_dsub>
 8005346:	4602      	mov	r2, r0
 8005348:	460b      	mov	r3, r1
 800534a:	4610      	mov	r0, r2
 800534c:	4619      	mov	r1, r3
 800534e:	f7fb fb9b 	bl	8000a88 <__aeabi_d2uiz>
 8005352:	4603      	mov	r3, r0
 8005354:	76bb      	strb	r3, [r7, #26]

	//	FIN CONVERSION A COORDENADAS POLARES

	ssd1306_Fill(Black);
 8005356:	2000      	movs	r0, #0
 8005358:	f000 fa30 	bl	80057bc <ssd1306_Fill>
	ssd1306_DrawCircle(95, 32, 31, White);
 800535c:	2301      	movs	r3, #1
 800535e:	221f      	movs	r2, #31
 8005360:	2120      	movs	r1, #32
 8005362:	205f      	movs	r0, #95	; 0x5f
 8005364:	f000 fc14 	bl	8005b90 <ssd1306_DrawCircle>
	//ssd1306_DrawRectangle(63, 1, 126, 63, COLOR);	//	Descomentar en caso de no usar coordenadas polares
	ssd1306_Line(64, 32, 126, 32, White);
 8005368:	2301      	movs	r3, #1
 800536a:	9300      	str	r3, [sp, #0]
 800536c:	2320      	movs	r3, #32
 800536e:	227e      	movs	r2, #126	; 0x7e
 8005370:	2120      	movs	r1, #32
 8005372:	2040      	movs	r0, #64	; 0x40
 8005374:	f000 fba0 	bl	8005ab8 <ssd1306_Line>
	ssd1306_Line(95, 1, 95, 63, White);
 8005378:	2301      	movs	r3, #1
 800537a:	9300      	str	r3, [sp, #0]
 800537c:	233f      	movs	r3, #63	; 0x3f
 800537e:	225f      	movs	r2, #95	; 0x5f
 8005380:	2101      	movs	r1, #1
 8005382:	205f      	movs	r0, #95	; 0x5f
 8005384:	f000 fb98 	bl	8005ab8 <ssd1306_Line>
	ssd1306_DrawRectangle(89, 26, 101, 38, White);
 8005388:	2301      	movs	r3, #1
 800538a:	9300      	str	r3, [sp, #0]
 800538c:	2326      	movs	r3, #38	; 0x26
 800538e:	2265      	movs	r2, #101	; 0x65
 8005390:	211a      	movs	r1, #26
 8005392:	2059      	movs	r0, #89	; 0x59
 8005394:	f000 fc82 	bl	8005c9c <ssd1306_DrawRectangle>
	ssd1306_DrawCircle(x0, y0, 5, White);
 8005398:	7eb9      	ldrb	r1, [r7, #26]
 800539a:	7ef8      	ldrb	r0, [r7, #27]
 800539c:	2301      	movs	r3, #1
 800539e:	2205      	movs	r2, #5
 80053a0:	f000 fbf6 	bl	8005b90 <ssd1306_DrawCircle>
	ssd1306_DrawCircle(x0+2, y0-2, 1, White);
 80053a4:	7efb      	ldrb	r3, [r7, #27]
 80053a6:	3302      	adds	r3, #2
 80053a8:	b2d8      	uxtb	r0, r3
 80053aa:	7ebb      	ldrb	r3, [r7, #26]
 80053ac:	3b02      	subs	r3, #2
 80053ae:	b2d9      	uxtb	r1, r3
 80053b0:	2301      	movs	r3, #1
 80053b2:	2201      	movs	r2, #1
 80053b4:	f000 fbec 	bl	8005b90 <ssd1306_DrawCircle>

	sprintf(MSG0, "X: %+.1f", angle_xz);
 80053b8:	68f8      	ldr	r0, [r7, #12]
 80053ba:	f7fb f835 	bl	8000428 <__aeabi_f2d>
 80053be:	4602      	mov	r2, r0
 80053c0:	460b      	mov	r3, r1
 80053c2:	491e      	ldr	r1, [pc, #120]	; (800543c <gui_Bubble_2d+0x21c>)
 80053c4:	481e      	ldr	r0, [pc, #120]	; (8005440 <gui_Bubble_2d+0x220>)
 80053c6:	f001 f971 	bl	80066ac <siprintf>
	ssd1306_SetCursor(1, 28);
 80053ca:	211c      	movs	r1, #28
 80053cc:	2001      	movs	r0, #1
 80053ce:	f000 fb5b 	bl	8005a88 <ssd1306_SetCursor>
	ssd1306_WriteString(MSG0, Font_7x10, White);
 80053d2:	4a1c      	ldr	r2, [pc, #112]	; (8005444 <gui_Bubble_2d+0x224>)
 80053d4:	2301      	movs	r3, #1
 80053d6:	ca06      	ldmia	r2, {r1, r2}
 80053d8:	4819      	ldr	r0, [pc, #100]	; (8005440 <gui_Bubble_2d+0x220>)
 80053da:	f000 fb2f 	bl	8005a3c <ssd1306_WriteString>

	sprintf(MSG0, "Y: %+.1f", angle_yz);
 80053de:	68b8      	ldr	r0, [r7, #8]
 80053e0:	f7fb f822 	bl	8000428 <__aeabi_f2d>
 80053e4:	4602      	mov	r2, r0
 80053e6:	460b      	mov	r3, r1
 80053e8:	4917      	ldr	r1, [pc, #92]	; (8005448 <gui_Bubble_2d+0x228>)
 80053ea:	4815      	ldr	r0, [pc, #84]	; (8005440 <gui_Bubble_2d+0x220>)
 80053ec:	f001 f95e 	bl	80066ac <siprintf>
	ssd1306_SetCursor(1, 48);
 80053f0:	2130      	movs	r1, #48	; 0x30
 80053f2:	2001      	movs	r0, #1
 80053f4:	f000 fb48 	bl	8005a88 <ssd1306_SetCursor>
	ssd1306_WriteString(MSG0, Font_7x10, White);
 80053f8:	4a12      	ldr	r2, [pc, #72]	; (8005444 <gui_Bubble_2d+0x224>)
 80053fa:	2301      	movs	r3, #1
 80053fc:	ca06      	ldmia	r2, {r1, r2}
 80053fe:	4810      	ldr	r0, [pc, #64]	; (8005440 <gui_Bubble_2d+0x220>)
 8005400:	f000 fb1c 	bl	8005a3c <ssd1306_WriteString>

	sprintf(MSG0, "%+.1fC", temp);
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f7fb f80f 	bl	8000428 <__aeabi_f2d>
 800540a:	4602      	mov	r2, r0
 800540c:	460b      	mov	r3, r1
 800540e:	490f      	ldr	r1, [pc, #60]	; (800544c <gui_Bubble_2d+0x22c>)
 8005410:	480b      	ldr	r0, [pc, #44]	; (8005440 <gui_Bubble_2d+0x220>)
 8005412:	f001 f94b 	bl	80066ac <siprintf>
	ssd1306_SetCursor(1, 1);
 8005416:	2101      	movs	r1, #1
 8005418:	2001      	movs	r0, #1
 800541a:	f000 fb35 	bl	8005a88 <ssd1306_SetCursor>
	ssd1306_WriteString(MSG0, Font_6x8, White);
 800541e:	4a0c      	ldr	r2, [pc, #48]	; (8005450 <gui_Bubble_2d+0x230>)
 8005420:	2301      	movs	r3, #1
 8005422:	ca06      	ldmia	r2, {r1, r2}
 8005424:	4806      	ldr	r0, [pc, #24]	; (8005440 <gui_Bubble_2d+0x220>)
 8005426:	f000 fb09 	bl	8005a3c <ssd1306_WriteString>

	ssd1306_UpdateScreen();
 800542a:	f000 f9e9 	bl	8005800 <ssd1306_UpdateScreen>

	return;
 800542e:	bf00      	nop
}
 8005430:	3720      	adds	r7, #32
 8005432:	46bd      	mov	sp, r7
 8005434:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005438:	41d00000 	.word	0x41d00000
 800543c:	0800a280 	.word	0x0800a280
 8005440:	20000708 	.word	0x20000708
 8005444:	20000098 	.word	0x20000098
 8005448:	0800a28c 	.word	0x0800a28c
 800544c:	0800a278 	.word	0x0800a278
 8005450:	20000090 	.word	0x20000090

08005454 <gui_Distance>:

void gui_Distance (uint16_t distance, float temp)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b082      	sub	sp, #8
 8005458:	af00      	add	r7, sp, #0
 800545a:	4603      	mov	r3, r0
 800545c:	6039      	str	r1, [r7, #0]
 800545e:	80fb      	strh	r3, [r7, #6]
	ssd1306_Fill(Black);
 8005460:	2000      	movs	r0, #0
 8005462:	f000 f9ab 	bl	80057bc <ssd1306_Fill>
	sprintf(MSG0, "%d cm", distance);
 8005466:	88fb      	ldrh	r3, [r7, #6]
 8005468:	461a      	mov	r2, r3
 800546a:	4912      	ldr	r1, [pc, #72]	; (80054b4 <gui_Distance+0x60>)
 800546c:	4812      	ldr	r0, [pc, #72]	; (80054b8 <gui_Distance+0x64>)
 800546e:	f001 f91d 	bl	80066ac <siprintf>
	ssd1306_SetCursor(20, 23);
 8005472:	2117      	movs	r1, #23
 8005474:	2014      	movs	r0, #20
 8005476:	f000 fb07 	bl	8005a88 <ssd1306_SetCursor>
	ssd1306_WriteString(MSG0, Font_16x26, White);
 800547a:	4a10      	ldr	r2, [pc, #64]	; (80054bc <gui_Distance+0x68>)
 800547c:	2301      	movs	r3, #1
 800547e:	ca06      	ldmia	r2, {r1, r2}
 8005480:	480d      	ldr	r0, [pc, #52]	; (80054b8 <gui_Distance+0x64>)
 8005482:	f000 fadb 	bl	8005a3c <ssd1306_WriteString>

	sprintf(MSG0, "%+.1fC", temp);
 8005486:	6838      	ldr	r0, [r7, #0]
 8005488:	f7fa ffce 	bl	8000428 <__aeabi_f2d>
 800548c:	4602      	mov	r2, r0
 800548e:	460b      	mov	r3, r1
 8005490:	490b      	ldr	r1, [pc, #44]	; (80054c0 <gui_Distance+0x6c>)
 8005492:	4809      	ldr	r0, [pc, #36]	; (80054b8 <gui_Distance+0x64>)
 8005494:	f001 f90a 	bl	80066ac <siprintf>
	ssd1306_SetCursor(1, 1);
 8005498:	2101      	movs	r1, #1
 800549a:	2001      	movs	r0, #1
 800549c:	f000 faf4 	bl	8005a88 <ssd1306_SetCursor>
	ssd1306_WriteString(MSG0, Font_6x8, White);
 80054a0:	4a08      	ldr	r2, [pc, #32]	; (80054c4 <gui_Distance+0x70>)
 80054a2:	2301      	movs	r3, #1
 80054a4:	ca06      	ldmia	r2, {r1, r2}
 80054a6:	4804      	ldr	r0, [pc, #16]	; (80054b8 <gui_Distance+0x64>)
 80054a8:	f000 fac8 	bl	8005a3c <ssd1306_WriteString>
}
 80054ac:	bf00      	nop
 80054ae:	3708      	adds	r7, #8
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	0800a298 	.word	0x0800a298
 80054b8:	20000708 	.word	0x20000708
 80054bc:	200000a0 	.word	0x200000a0
 80054c0:	0800a278 	.word	0x0800a278
 80054c4:	20000090 	.word	0x20000090

080054c8 <mpu6050_Init>:
#include "mpu6050.h"

RAW_DATA raw;

void mpu6050_Init (MPU6050 *mpu6050)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b086      	sub	sp, #24
 80054cc:	af04      	add	r7, sp, #16
 80054ce:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 80054d0:	2064      	movs	r0, #100	; 0x64
 80054d2:	f7fc fdc1 	bl	8002058 <HAL_Delay>

	mpu6050->accel_x = 0;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f04f 0200 	mov.w	r2, #0
 80054dc:	601a      	str	r2, [r3, #0]
	mpu6050->accel_y = 0;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f04f 0200 	mov.w	r2, #0
 80054e4:	605a      	str	r2, [r3, #4]
	mpu6050->accel_z = 0;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f04f 0200 	mov.w	r2, #0
 80054ec:	609a      	str	r2, [r3, #8]

	mpu6050->temp = 0;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f04f 0200 	mov.w	r2, #0
 80054f4:	60da      	str	r2, [r3, #12]

	mpu6050->gyro_x = 0;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f04f 0200 	mov.w	r2, #0
 80054fc:	611a      	str	r2, [r3, #16]
	mpu6050->gyro_y = 0;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f04f 0200 	mov.w	r2, #0
 8005504:	615a      	str	r2, [r3, #20]
	mpu6050->gyro_z = 0;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f04f 0200 	mov.w	r2, #0
 800550c:	619a      	str	r2, [r3, #24]

	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDRESS | 0, PWRMNGT1_REG, 1, 0x00, 1, 100);
 800550e:	2364      	movs	r3, #100	; 0x64
 8005510:	9302      	str	r3, [sp, #8]
 8005512:	2301      	movs	r3, #1
 8005514:	9301      	str	r3, [sp, #4]
 8005516:	2300      	movs	r3, #0
 8005518:	9300      	str	r3, [sp, #0]
 800551a:	2301      	movs	r3, #1
 800551c:	226b      	movs	r2, #107	; 0x6b
 800551e:	21d0      	movs	r1, #208	; 0xd0
 8005520:	4804      	ldr	r0, [pc, #16]	; (8005534 <mpu6050_Init+0x6c>)
 8005522:	f7fd f9db 	bl	80028dc <HAL_I2C_Mem_Write>

	HAL_Delay(100);
 8005526:	2064      	movs	r0, #100	; 0x64
 8005528:	f7fc fd96 	bl	8002058 <HAL_Delay>

	return;
 800552c:	bf00      	nop
}
 800552e:	3708      	adds	r7, #8
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	2000079c 	.word	0x2000079c

08005538 <mpu6050_Get_Accel_Temp>:

	return;
}

void mpu6050_Get_Accel_Temp(MPU6050 *mpu6050)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b086      	sub	sp, #24
 800553c:	af04      	add	r7, sp, #16
 800553e:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(&MPU6050_I2C_PORT, MPU6050_ADDRESS | 0, ACCEL_XOUT_H_REG, 1, Rec_Data, 8, 1000);
 8005540:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005544:	9302      	str	r3, [sp, #8]
 8005546:	2308      	movs	r3, #8
 8005548:	9301      	str	r3, [sp, #4]
 800554a:	4b47      	ldr	r3, [pc, #284]	; (8005668 <mpu6050_Get_Accel_Temp+0x130>)
 800554c:	9300      	str	r3, [sp, #0]
 800554e:	2301      	movs	r3, #1
 8005550:	223b      	movs	r2, #59	; 0x3b
 8005552:	21d0      	movs	r1, #208	; 0xd0
 8005554:	4845      	ldr	r0, [pc, #276]	; (800566c <mpu6050_Get_Accel_Temp+0x134>)
 8005556:	f7fd fabb 	bl	8002ad0 <HAL_I2C_Mem_Read>


	raw.accel_x = (Rec_Data[0] << 8 | Rec_Data [1]);
 800555a:	4b43      	ldr	r3, [pc, #268]	; (8005668 <mpu6050_Get_Accel_Temp+0x130>)
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	021b      	lsls	r3, r3, #8
 8005560:	b21a      	sxth	r2, r3
 8005562:	4b41      	ldr	r3, [pc, #260]	; (8005668 <mpu6050_Get_Accel_Temp+0x130>)
 8005564:	785b      	ldrb	r3, [r3, #1]
 8005566:	b21b      	sxth	r3, r3
 8005568:	4313      	orrs	r3, r2
 800556a:	b21a      	sxth	r2, r3
 800556c:	4b40      	ldr	r3, [pc, #256]	; (8005670 <mpu6050_Get_Accel_Temp+0x138>)
 800556e:	801a      	strh	r2, [r3, #0]
	raw.accel_y = (Rec_Data[2] << 8 | Rec_Data [3]);
 8005570:	4b3d      	ldr	r3, [pc, #244]	; (8005668 <mpu6050_Get_Accel_Temp+0x130>)
 8005572:	789b      	ldrb	r3, [r3, #2]
 8005574:	021b      	lsls	r3, r3, #8
 8005576:	b21a      	sxth	r2, r3
 8005578:	4b3b      	ldr	r3, [pc, #236]	; (8005668 <mpu6050_Get_Accel_Temp+0x130>)
 800557a:	78db      	ldrb	r3, [r3, #3]
 800557c:	b21b      	sxth	r3, r3
 800557e:	4313      	orrs	r3, r2
 8005580:	b21a      	sxth	r2, r3
 8005582:	4b3b      	ldr	r3, [pc, #236]	; (8005670 <mpu6050_Get_Accel_Temp+0x138>)
 8005584:	805a      	strh	r2, [r3, #2]
	raw.accel_z = (Rec_Data[4] << 8 | Rec_Data [5]);
 8005586:	4b38      	ldr	r3, [pc, #224]	; (8005668 <mpu6050_Get_Accel_Temp+0x130>)
 8005588:	791b      	ldrb	r3, [r3, #4]
 800558a:	021b      	lsls	r3, r3, #8
 800558c:	b21a      	sxth	r2, r3
 800558e:	4b36      	ldr	r3, [pc, #216]	; (8005668 <mpu6050_Get_Accel_Temp+0x130>)
 8005590:	795b      	ldrb	r3, [r3, #5]
 8005592:	b21b      	sxth	r3, r3
 8005594:	4313      	orrs	r3, r2
 8005596:	b21a      	sxth	r2, r3
 8005598:	4b35      	ldr	r3, [pc, #212]	; (8005670 <mpu6050_Get_Accel_Temp+0x138>)
 800559a:	809a      	strh	r2, [r3, #4]

	raw.temp 	= (Rec_Data[6] << 8 | Rec_Data [7]);
 800559c:	4b32      	ldr	r3, [pc, #200]	; (8005668 <mpu6050_Get_Accel_Temp+0x130>)
 800559e:	799b      	ldrb	r3, [r3, #6]
 80055a0:	021b      	lsls	r3, r3, #8
 80055a2:	b21a      	sxth	r2, r3
 80055a4:	4b30      	ldr	r3, [pc, #192]	; (8005668 <mpu6050_Get_Accel_Temp+0x130>)
 80055a6:	79db      	ldrb	r3, [r3, #7]
 80055a8:	b21b      	sxth	r3, r3
 80055aa:	4313      	orrs	r3, r2
 80055ac:	b21a      	sxth	r2, r3
 80055ae:	4b30      	ldr	r3, [pc, #192]	; (8005670 <mpu6050_Get_Accel_Temp+0x138>)
 80055b0:	80da      	strh	r2, [r3, #6]

	mpu6050->accel_x = (float)raw.accel_x / 16384.0;
 80055b2:	4b2f      	ldr	r3, [pc, #188]	; (8005670 <mpu6050_Get_Accel_Temp+0x138>)
 80055b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80055b8:	4618      	mov	r0, r3
 80055ba:	f7fb fb8f 	bl	8000cdc <__aeabi_i2f>
 80055be:	4603      	mov	r3, r0
 80055c0:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80055c4:	4618      	mov	r0, r3
 80055c6:	f7fb fc91 	bl	8000eec <__aeabi_fdiv>
 80055ca:	4603      	mov	r3, r0
 80055cc:	461a      	mov	r2, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	601a      	str	r2, [r3, #0]
	mpu6050->accel_y = (float)raw.accel_y / 16384.0;
 80055d2:	4b27      	ldr	r3, [pc, #156]	; (8005670 <mpu6050_Get_Accel_Temp+0x138>)
 80055d4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80055d8:	4618      	mov	r0, r3
 80055da:	f7fb fb7f 	bl	8000cdc <__aeabi_i2f>
 80055de:	4603      	mov	r3, r0
 80055e0:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80055e4:	4618      	mov	r0, r3
 80055e6:	f7fb fc81 	bl	8000eec <__aeabi_fdiv>
 80055ea:	4603      	mov	r3, r0
 80055ec:	461a      	mov	r2, r3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	605a      	str	r2, [r3, #4]
	mpu6050->accel_z = (float)raw.accel_z / 16384.0;
 80055f2:	4b1f      	ldr	r3, [pc, #124]	; (8005670 <mpu6050_Get_Accel_Temp+0x138>)
 80055f4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80055f8:	4618      	mov	r0, r3
 80055fa:	f7fb fb6f 	bl	8000cdc <__aeabi_i2f>
 80055fe:	4603      	mov	r3, r0
 8005600:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8005604:	4618      	mov	r0, r3
 8005606:	f7fb fc71 	bl	8000eec <__aeabi_fdiv>
 800560a:	4603      	mov	r3, r0
 800560c:	461a      	mov	r2, r3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	609a      	str	r2, [r3, #8]

	mpu6050->temp 	 = (float)raw.temp    / 340.0 + 36.53;
 8005612:	4b17      	ldr	r3, [pc, #92]	; (8005670 <mpu6050_Get_Accel_Temp+0x138>)
 8005614:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8005618:	4618      	mov	r0, r3
 800561a:	f7fb fb5f 	bl	8000cdc <__aeabi_i2f>
 800561e:	4603      	mov	r3, r0
 8005620:	4618      	mov	r0, r3
 8005622:	f7fa ff01 	bl	8000428 <__aeabi_f2d>
 8005626:	f04f 0200 	mov.w	r2, #0
 800562a:	4b12      	ldr	r3, [pc, #72]	; (8005674 <mpu6050_Get_Accel_Temp+0x13c>)
 800562c:	f7fb f87e 	bl	800072c <__aeabi_ddiv>
 8005630:	4602      	mov	r2, r0
 8005632:	460b      	mov	r3, r1
 8005634:	4610      	mov	r0, r2
 8005636:	4619      	mov	r1, r3
 8005638:	a309      	add	r3, pc, #36	; (adr r3, 8005660 <mpu6050_Get_Accel_Temp+0x128>)
 800563a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563e:	f7fa fd95 	bl	800016c <__adddf3>
 8005642:	4602      	mov	r2, r0
 8005644:	460b      	mov	r3, r1
 8005646:	4610      	mov	r0, r2
 8005648:	4619      	mov	r1, r3
 800564a:	f7fb fa3d 	bl	8000ac8 <__aeabi_d2f>
 800564e:	4602      	mov	r2, r0
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	60da      	str	r2, [r3, #12]

	return;
 8005654:	bf00      	nop
}
 8005656:	3708      	adds	r7, #8
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}
 800565c:	f3af 8000 	nop.w
 8005660:	0a3d70a4 	.word	0x0a3d70a4
 8005664:	404243d7 	.word	0x404243d7
 8005668:	200008cc 	.word	0x200008cc
 800566c:	2000079c 	.word	0x2000079c
 8005670:	20000bdc 	.word	0x20000bdc
 8005674:	40754000 	.word	0x40754000

08005678 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8005678:	b480      	push	{r7}
 800567a:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800567c:	bf00      	nop
 800567e:	46bd      	mov	sp, r7
 8005680:	bc80      	pop	{r7}
 8005682:	4770      	bx	lr

08005684 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8005684:	b580      	push	{r7, lr}
 8005686:	b086      	sub	sp, #24
 8005688:	af04      	add	r7, sp, #16
 800568a:	4603      	mov	r3, r0
 800568c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800568e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005692:	9302      	str	r3, [sp, #8]
 8005694:	2301      	movs	r3, #1
 8005696:	9301      	str	r3, [sp, #4]
 8005698:	1dfb      	adds	r3, r7, #7
 800569a:	9300      	str	r3, [sp, #0]
 800569c:	2301      	movs	r3, #1
 800569e:	2200      	movs	r2, #0
 80056a0:	2178      	movs	r1, #120	; 0x78
 80056a2:	4803      	ldr	r0, [pc, #12]	; (80056b0 <ssd1306_WriteCommand+0x2c>)
 80056a4:	f7fd f91a 	bl	80028dc <HAL_I2C_Mem_Write>
}
 80056a8:	bf00      	nop
 80056aa:	3708      	adds	r7, #8
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	20000878 	.word	0x20000878

080056b4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b086      	sub	sp, #24
 80056b8:	af04      	add	r7, sp, #16
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80056c6:	9202      	str	r2, [sp, #8]
 80056c8:	9301      	str	r3, [sp, #4]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	9300      	str	r3, [sp, #0]
 80056ce:	2301      	movs	r3, #1
 80056d0:	2240      	movs	r2, #64	; 0x40
 80056d2:	2178      	movs	r1, #120	; 0x78
 80056d4:	4803      	ldr	r0, [pc, #12]	; (80056e4 <ssd1306_WriteData+0x30>)
 80056d6:	f7fd f901 	bl	80028dc <HAL_I2C_Mem_Write>
}
 80056da:	bf00      	nop
 80056dc:	3708      	adds	r7, #8
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	20000878 	.word	0x20000878

080056e8 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 80056e8:	b580      	push	{r7, lr}
 80056ea:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80056ec:	f7ff ffc4 	bl	8005678 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80056f0:	2064      	movs	r0, #100	; 0x64
 80056f2:	f7fc fcb1 	bl	8002058 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80056f6:	2000      	movs	r0, #0
 80056f8:	f000 fb1a 	bl	8005d30 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80056fc:	2020      	movs	r0, #32
 80056fe:	f7ff ffc1 	bl	8005684 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8005702:	2000      	movs	r0, #0
 8005704:	f7ff ffbe 	bl	8005684 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8005708:	20b0      	movs	r0, #176	; 0xb0
 800570a:	f7ff ffbb 	bl	8005684 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800570e:	20c8      	movs	r0, #200	; 0xc8
 8005710:	f7ff ffb8 	bl	8005684 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8005714:	2000      	movs	r0, #0
 8005716:	f7ff ffb5 	bl	8005684 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800571a:	2010      	movs	r0, #16
 800571c:	f7ff ffb2 	bl	8005684 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8005720:	2040      	movs	r0, #64	; 0x40
 8005722:	f7ff ffaf 	bl	8005684 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8005726:	20ff      	movs	r0, #255	; 0xff
 8005728:	f000 faef 	bl	8005d0a <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800572c:	20a1      	movs	r0, #161	; 0xa1
 800572e:	f7ff ffa9 	bl	8005684 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8005732:	20a6      	movs	r0, #166	; 0xa6
 8005734:	f7ff ffa6 	bl	8005684 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8005738:	20a8      	movs	r0, #168	; 0xa8
 800573a:	f7ff ffa3 	bl	8005684 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800573e:	203f      	movs	r0, #63	; 0x3f
 8005740:	f7ff ffa0 	bl	8005684 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8005744:	20a4      	movs	r0, #164	; 0xa4
 8005746:	f7ff ff9d 	bl	8005684 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800574a:	20d3      	movs	r0, #211	; 0xd3
 800574c:	f7ff ff9a 	bl	8005684 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8005750:	2000      	movs	r0, #0
 8005752:	f7ff ff97 	bl	8005684 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8005756:	20d5      	movs	r0, #213	; 0xd5
 8005758:	f7ff ff94 	bl	8005684 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800575c:	20f0      	movs	r0, #240	; 0xf0
 800575e:	f7ff ff91 	bl	8005684 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8005762:	20d9      	movs	r0, #217	; 0xd9
 8005764:	f7ff ff8e 	bl	8005684 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8005768:	2022      	movs	r0, #34	; 0x22
 800576a:	f7ff ff8b 	bl	8005684 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800576e:	20da      	movs	r0, #218	; 0xda
 8005770:	f7ff ff88 	bl	8005684 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8005774:	2012      	movs	r0, #18
 8005776:	f7ff ff85 	bl	8005684 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800577a:	20db      	movs	r0, #219	; 0xdb
 800577c:	f7ff ff82 	bl	8005684 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8005780:	2020      	movs	r0, #32
 8005782:	f7ff ff7f 	bl	8005684 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8005786:	208d      	movs	r0, #141	; 0x8d
 8005788:	f7ff ff7c 	bl	8005684 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800578c:	2014      	movs	r0, #20
 800578e:	f7ff ff79 	bl	8005684 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8005792:	2001      	movs	r0, #1
 8005794:	f000 facc 	bl	8005d30 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8005798:	2000      	movs	r0, #0
 800579a:	f000 f80f 	bl	80057bc <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800579e:	f000 f82f 	bl	8005800 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80057a2:	4b05      	ldr	r3, [pc, #20]	; (80057b8 <ssd1306_Init+0xd0>)
 80057a4:	2200      	movs	r2, #0
 80057a6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80057a8:	4b03      	ldr	r3, [pc, #12]	; (80057b8 <ssd1306_Init+0xd0>)
 80057aa:	2200      	movs	r2, #0
 80057ac:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80057ae:	4b02      	ldr	r3, [pc, #8]	; (80057b8 <ssd1306_Init+0xd0>)
 80057b0:	2201      	movs	r2, #1
 80057b2:	715a      	strb	r2, [r3, #5]
}
 80057b4:	bf00      	nop
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	200006f8 	.word	0x200006f8

080057bc <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 80057bc:	b480      	push	{r7}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	4603      	mov	r3, r0
 80057c4:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80057c6:	2300      	movs	r3, #0
 80057c8:	60fb      	str	r3, [r7, #12]
 80057ca:	e00d      	b.n	80057e8 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80057cc:	79fb      	ldrb	r3, [r7, #7]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d101      	bne.n	80057d6 <ssd1306_Fill+0x1a>
 80057d2:	2100      	movs	r1, #0
 80057d4:	e000      	b.n	80057d8 <ssd1306_Fill+0x1c>
 80057d6:	21ff      	movs	r1, #255	; 0xff
 80057d8:	4a08      	ldr	r2, [pc, #32]	; (80057fc <ssd1306_Fill+0x40>)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	4413      	add	r3, r2
 80057de:	460a      	mov	r2, r1
 80057e0:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	3301      	adds	r3, #1
 80057e6:	60fb      	str	r3, [r7, #12]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 80057ee:	d3ed      	bcc.n	80057cc <ssd1306_Fill+0x10>
    }
}
 80057f0:	bf00      	nop
 80057f2:	bf00      	nop
 80057f4:	3714      	adds	r7, #20
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bc80      	pop	{r7}
 80057fa:	4770      	bx	lr
 80057fc:	200002e8 	.word	0x200002e8

08005800 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8005800:	b580      	push	{r7, lr}
 8005802:	b082      	sub	sp, #8
 8005804:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8005806:	2300      	movs	r3, #0
 8005808:	71fb      	strb	r3, [r7, #7]
 800580a:	e01a      	b.n	8005842 <ssd1306_UpdateScreen+0x42>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800580c:	79fb      	ldrb	r3, [r7, #7]
 800580e:	3b50      	subs	r3, #80	; 0x50
 8005810:	b2db      	uxtb	r3, r3
 8005812:	4618      	mov	r0, r3
 8005814:	f7ff ff36 	bl	8005684 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8005818:	2000      	movs	r0, #0
 800581a:	f7ff ff33 	bl	8005684 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 800581e:	2010      	movs	r0, #16
 8005820:	f7ff ff30 	bl	8005684 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8005824:	79fa      	ldrb	r2, [r7, #7]
 8005826:	4613      	mov	r3, r2
 8005828:	019b      	lsls	r3, r3, #6
 800582a:	4413      	add	r3, r2
 800582c:	005b      	lsls	r3, r3, #1
 800582e:	461a      	mov	r2, r3
 8005830:	4b08      	ldr	r3, [pc, #32]	; (8005854 <ssd1306_UpdateScreen+0x54>)
 8005832:	4413      	add	r3, r2
 8005834:	2182      	movs	r1, #130	; 0x82
 8005836:	4618      	mov	r0, r3
 8005838:	f7ff ff3c 	bl	80056b4 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800583c:	79fb      	ldrb	r3, [r7, #7]
 800583e:	3301      	adds	r3, #1
 8005840:	71fb      	strb	r3, [r7, #7]
 8005842:	79fb      	ldrb	r3, [r7, #7]
 8005844:	2b07      	cmp	r3, #7
 8005846:	d9e1      	bls.n	800580c <ssd1306_UpdateScreen+0xc>
    }
}
 8005848:	bf00      	nop
 800584a:	bf00      	nop
 800584c:	3708      	adds	r7, #8
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	200002e8 	.word	0x200002e8

08005858 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8005858:	b490      	push	{r4, r7}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
 800585e:	4603      	mov	r3, r0
 8005860:	71fb      	strb	r3, [r7, #7]
 8005862:	460b      	mov	r3, r1
 8005864:	71bb      	strb	r3, [r7, #6]
 8005866:	4613      	mov	r3, r2
 8005868:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800586a:	79fb      	ldrb	r3, [r7, #7]
 800586c:	2b81      	cmp	r3, #129	; 0x81
 800586e:	d854      	bhi.n	800591a <ssd1306_DrawPixel+0xc2>
 8005870:	79bb      	ldrb	r3, [r7, #6]
 8005872:	2b3f      	cmp	r3, #63	; 0x3f
 8005874:	d851      	bhi.n	800591a <ssd1306_DrawPixel+0xc2>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8005876:	4b2b      	ldr	r3, [pc, #172]	; (8005924 <ssd1306_DrawPixel+0xcc>)
 8005878:	791b      	ldrb	r3, [r3, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d006      	beq.n	800588c <ssd1306_DrawPixel+0x34>
        color = (SSD1306_COLOR)!color;
 800587e:	797b      	ldrb	r3, [r7, #5]
 8005880:	2b00      	cmp	r3, #0
 8005882:	bf0c      	ite	eq
 8005884:	2301      	moveq	r3, #1
 8005886:	2300      	movne	r3, #0
 8005888:	b2db      	uxtb	r3, r3
 800588a:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 800588c:	797b      	ldrb	r3, [r7, #5]
 800588e:	2b01      	cmp	r3, #1
 8005890:	d120      	bne.n	80058d4 <ssd1306_DrawPixel+0x7c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8005892:	79fa      	ldrb	r2, [r7, #7]
 8005894:	79bb      	ldrb	r3, [r7, #6]
 8005896:	08db      	lsrs	r3, r3, #3
 8005898:	b2d8      	uxtb	r0, r3
 800589a:	4601      	mov	r1, r0
 800589c:	460b      	mov	r3, r1
 800589e:	019b      	lsls	r3, r3, #6
 80058a0:	440b      	add	r3, r1
 80058a2:	005b      	lsls	r3, r3, #1
 80058a4:	4413      	add	r3, r2
 80058a6:	4a20      	ldr	r2, [pc, #128]	; (8005928 <ssd1306_DrawPixel+0xd0>)
 80058a8:	5cd3      	ldrb	r3, [r2, r3]
 80058aa:	b25a      	sxtb	r2, r3
 80058ac:	79bb      	ldrb	r3, [r7, #6]
 80058ae:	f003 0307 	and.w	r3, r3, #7
 80058b2:	2101      	movs	r1, #1
 80058b4:	fa01 f303 	lsl.w	r3, r1, r3
 80058b8:	b25b      	sxtb	r3, r3
 80058ba:	4313      	orrs	r3, r2
 80058bc:	b25c      	sxtb	r4, r3
 80058be:	79fa      	ldrb	r2, [r7, #7]
 80058c0:	4601      	mov	r1, r0
 80058c2:	460b      	mov	r3, r1
 80058c4:	019b      	lsls	r3, r3, #6
 80058c6:	440b      	add	r3, r1
 80058c8:	005b      	lsls	r3, r3, #1
 80058ca:	4413      	add	r3, r2
 80058cc:	b2e1      	uxtb	r1, r4
 80058ce:	4a16      	ldr	r2, [pc, #88]	; (8005928 <ssd1306_DrawPixel+0xd0>)
 80058d0:	54d1      	strb	r1, [r2, r3]
 80058d2:	e023      	b.n	800591c <ssd1306_DrawPixel+0xc4>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80058d4:	79fa      	ldrb	r2, [r7, #7]
 80058d6:	79bb      	ldrb	r3, [r7, #6]
 80058d8:	08db      	lsrs	r3, r3, #3
 80058da:	b2d8      	uxtb	r0, r3
 80058dc:	4601      	mov	r1, r0
 80058de:	460b      	mov	r3, r1
 80058e0:	019b      	lsls	r3, r3, #6
 80058e2:	440b      	add	r3, r1
 80058e4:	005b      	lsls	r3, r3, #1
 80058e6:	4413      	add	r3, r2
 80058e8:	4a0f      	ldr	r2, [pc, #60]	; (8005928 <ssd1306_DrawPixel+0xd0>)
 80058ea:	5cd3      	ldrb	r3, [r2, r3]
 80058ec:	b25a      	sxtb	r2, r3
 80058ee:	79bb      	ldrb	r3, [r7, #6]
 80058f0:	f003 0307 	and.w	r3, r3, #7
 80058f4:	2101      	movs	r1, #1
 80058f6:	fa01 f303 	lsl.w	r3, r1, r3
 80058fa:	b25b      	sxtb	r3, r3
 80058fc:	43db      	mvns	r3, r3
 80058fe:	b25b      	sxtb	r3, r3
 8005900:	4013      	ands	r3, r2
 8005902:	b25c      	sxtb	r4, r3
 8005904:	79fa      	ldrb	r2, [r7, #7]
 8005906:	4601      	mov	r1, r0
 8005908:	460b      	mov	r3, r1
 800590a:	019b      	lsls	r3, r3, #6
 800590c:	440b      	add	r3, r1
 800590e:	005b      	lsls	r3, r3, #1
 8005910:	4413      	add	r3, r2
 8005912:	b2e1      	uxtb	r1, r4
 8005914:	4a04      	ldr	r2, [pc, #16]	; (8005928 <ssd1306_DrawPixel+0xd0>)
 8005916:	54d1      	strb	r1, [r2, r3]
 8005918:	e000      	b.n	800591c <ssd1306_DrawPixel+0xc4>
        return;
 800591a:	bf00      	nop
    }
}
 800591c:	3708      	adds	r7, #8
 800591e:	46bd      	mov	sp, r7
 8005920:	bc90      	pop	{r4, r7}
 8005922:	4770      	bx	lr
 8005924:	200006f8 	.word	0x200006f8
 8005928:	200002e8 	.word	0x200002e8

0800592c <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800592c:	b590      	push	{r4, r7, lr}
 800592e:	b089      	sub	sp, #36	; 0x24
 8005930:	af00      	add	r7, sp, #0
 8005932:	4604      	mov	r4, r0
 8005934:	1d38      	adds	r0, r7, #4
 8005936:	e880 0006 	stmia.w	r0, {r1, r2}
 800593a:	461a      	mov	r2, r3
 800593c:	4623      	mov	r3, r4
 800593e:	73fb      	strb	r3, [r7, #15]
 8005940:	4613      	mov	r3, r2
 8005942:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8005944:	7bfb      	ldrb	r3, [r7, #15]
 8005946:	2b1f      	cmp	r3, #31
 8005948:	d902      	bls.n	8005950 <ssd1306_WriteChar+0x24>
 800594a:	7bfb      	ldrb	r3, [r7, #15]
 800594c:	2b7e      	cmp	r3, #126	; 0x7e
 800594e:	d901      	bls.n	8005954 <ssd1306_WriteChar+0x28>
        return 0;
 8005950:	2300      	movs	r3, #0
 8005952:	e06d      	b.n	8005a30 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8005954:	4b38      	ldr	r3, [pc, #224]	; (8005a38 <ssd1306_WriteChar+0x10c>)
 8005956:	881b      	ldrh	r3, [r3, #0]
 8005958:	461a      	mov	r2, r3
 800595a:	793b      	ldrb	r3, [r7, #4]
 800595c:	4413      	add	r3, r2
 800595e:	2b82      	cmp	r3, #130	; 0x82
 8005960:	dc06      	bgt.n	8005970 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8005962:	4b35      	ldr	r3, [pc, #212]	; (8005a38 <ssd1306_WriteChar+0x10c>)
 8005964:	885b      	ldrh	r3, [r3, #2]
 8005966:	461a      	mov	r2, r3
 8005968:	797b      	ldrb	r3, [r7, #5]
 800596a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800596c:	2b40      	cmp	r3, #64	; 0x40
 800596e:	dd01      	ble.n	8005974 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8005970:	2300      	movs	r3, #0
 8005972:	e05d      	b.n	8005a30 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8005974:	2300      	movs	r3, #0
 8005976:	61fb      	str	r3, [r7, #28]
 8005978:	e04c      	b.n	8005a14 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800597a:	68ba      	ldr	r2, [r7, #8]
 800597c:	7bfb      	ldrb	r3, [r7, #15]
 800597e:	3b20      	subs	r3, #32
 8005980:	7979      	ldrb	r1, [r7, #5]
 8005982:	fb01 f303 	mul.w	r3, r1, r3
 8005986:	4619      	mov	r1, r3
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	440b      	add	r3, r1
 800598c:	005b      	lsls	r3, r3, #1
 800598e:	4413      	add	r3, r2
 8005990:	881b      	ldrh	r3, [r3, #0]
 8005992:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8005994:	2300      	movs	r3, #0
 8005996:	61bb      	str	r3, [r7, #24]
 8005998:	e034      	b.n	8005a04 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800599a:	697a      	ldr	r2, [r7, #20]
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	fa02 f303 	lsl.w	r3, r2, r3
 80059a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d012      	beq.n	80059d0 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80059aa:	4b23      	ldr	r3, [pc, #140]	; (8005a38 <ssd1306_WriteChar+0x10c>)
 80059ac:	881b      	ldrh	r3, [r3, #0]
 80059ae:	b2da      	uxtb	r2, r3
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	4413      	add	r3, r2
 80059b6:	b2d8      	uxtb	r0, r3
 80059b8:	4b1f      	ldr	r3, [pc, #124]	; (8005a38 <ssd1306_WriteChar+0x10c>)
 80059ba:	885b      	ldrh	r3, [r3, #2]
 80059bc:	b2da      	uxtb	r2, r3
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	4413      	add	r3, r2
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	7bba      	ldrb	r2, [r7, #14]
 80059c8:	4619      	mov	r1, r3
 80059ca:	f7ff ff45 	bl	8005858 <ssd1306_DrawPixel>
 80059ce:	e016      	b.n	80059fe <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80059d0:	4b19      	ldr	r3, [pc, #100]	; (8005a38 <ssd1306_WriteChar+0x10c>)
 80059d2:	881b      	ldrh	r3, [r3, #0]
 80059d4:	b2da      	uxtb	r2, r3
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	4413      	add	r3, r2
 80059dc:	b2d8      	uxtb	r0, r3
 80059de:	4b16      	ldr	r3, [pc, #88]	; (8005a38 <ssd1306_WriteChar+0x10c>)
 80059e0:	885b      	ldrh	r3, [r3, #2]
 80059e2:	b2da      	uxtb	r2, r3
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	4413      	add	r3, r2
 80059ea:	b2d9      	uxtb	r1, r3
 80059ec:	7bbb      	ldrb	r3, [r7, #14]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	bf0c      	ite	eq
 80059f2:	2301      	moveq	r3, #1
 80059f4:	2300      	movne	r3, #0
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	461a      	mov	r2, r3
 80059fa:	f7ff ff2d 	bl	8005858 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80059fe:	69bb      	ldr	r3, [r7, #24]
 8005a00:	3301      	adds	r3, #1
 8005a02:	61bb      	str	r3, [r7, #24]
 8005a04:	793b      	ldrb	r3, [r7, #4]
 8005a06:	461a      	mov	r2, r3
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d3c5      	bcc.n	800599a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	3301      	adds	r3, #1
 8005a12:	61fb      	str	r3, [r7, #28]
 8005a14:	797b      	ldrb	r3, [r7, #5]
 8005a16:	461a      	mov	r2, r3
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d3ad      	bcc.n	800597a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8005a1e:	4b06      	ldr	r3, [pc, #24]	; (8005a38 <ssd1306_WriteChar+0x10c>)
 8005a20:	881a      	ldrh	r2, [r3, #0]
 8005a22:	793b      	ldrb	r3, [r7, #4]
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	4413      	add	r3, r2
 8005a28:	b29a      	uxth	r2, r3
 8005a2a:	4b03      	ldr	r3, [pc, #12]	; (8005a38 <ssd1306_WriteChar+0x10c>)
 8005a2c:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8005a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3724      	adds	r7, #36	; 0x24
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd90      	pop	{r4, r7, pc}
 8005a38:	200006f8 	.word	0x200006f8

08005a3c <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	1d38      	adds	r0, r7, #4
 8005a46:	e880 0006 	stmia.w	r0, {r1, r2}
 8005a4a:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8005a4c:	e012      	b.n	8005a74 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	7818      	ldrb	r0, [r3, #0]
 8005a52:	78fb      	ldrb	r3, [r7, #3]
 8005a54:	1d3a      	adds	r2, r7, #4
 8005a56:	ca06      	ldmia	r2, {r1, r2}
 8005a58:	f7ff ff68 	bl	800592c <ssd1306_WriteChar>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	461a      	mov	r2, r3
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d002      	beq.n	8005a6e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	e008      	b.n	8005a80 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	3301      	adds	r3, #1
 8005a72:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d1e8      	bne.n	8005a4e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	781b      	ldrb	r3, [r3, #0]
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3710      	adds	r7, #16
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	4603      	mov	r3, r0
 8005a90:	460a      	mov	r2, r1
 8005a92:	71fb      	strb	r3, [r7, #7]
 8005a94:	4613      	mov	r3, r2
 8005a96:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8005a98:	79fb      	ldrb	r3, [r7, #7]
 8005a9a:	b29a      	uxth	r2, r3
 8005a9c:	4b05      	ldr	r3, [pc, #20]	; (8005ab4 <ssd1306_SetCursor+0x2c>)
 8005a9e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8005aa0:	79bb      	ldrb	r3, [r7, #6]
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	4b03      	ldr	r3, [pc, #12]	; (8005ab4 <ssd1306_SetCursor+0x2c>)
 8005aa6:	805a      	strh	r2, [r3, #2]
}
 8005aa8:	bf00      	nop
 8005aaa:	370c      	adds	r7, #12
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bc80      	pop	{r7}
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	200006f8 	.word	0x200006f8

08005ab8 <ssd1306_Line>:

// Draw line by Bresenhem's algorithm
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8005ab8:	b590      	push	{r4, r7, lr}
 8005aba:	b089      	sub	sp, #36	; 0x24
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	4604      	mov	r4, r0
 8005ac0:	4608      	mov	r0, r1
 8005ac2:	4611      	mov	r1, r2
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	4623      	mov	r3, r4
 8005ac8:	71fb      	strb	r3, [r7, #7]
 8005aca:	4603      	mov	r3, r0
 8005acc:	71bb      	strb	r3, [r7, #6]
 8005ace:	460b      	mov	r3, r1
 8005ad0:	717b      	strb	r3, [r7, #5]
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	713b      	strb	r3, [r7, #4]
  int32_t deltaX = abs(x2 - x1);
 8005ad6:	797a      	ldrb	r2, [r7, #5]
 8005ad8:	79fb      	ldrb	r3, [r7, #7]
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	bfb8      	it	lt
 8005ae0:	425b      	neglt	r3, r3
 8005ae2:	61bb      	str	r3, [r7, #24]
  int32_t deltaY = abs(y2 - y1);
 8005ae4:	793a      	ldrb	r2, [r7, #4]
 8005ae6:	79bb      	ldrb	r3, [r7, #6]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	bfb8      	it	lt
 8005aee:	425b      	neglt	r3, r3
 8005af0:	617b      	str	r3, [r7, #20]
  int32_t signX = ((x1 < x2) ? 1 : -1);
 8005af2:	79fa      	ldrb	r2, [r7, #7]
 8005af4:	797b      	ldrb	r3, [r7, #5]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d201      	bcs.n	8005afe <ssd1306_Line+0x46>
 8005afa:	2301      	movs	r3, #1
 8005afc:	e001      	b.n	8005b02 <ssd1306_Line+0x4a>
 8005afe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b02:	613b      	str	r3, [r7, #16]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 8005b04:	79ba      	ldrb	r2, [r7, #6]
 8005b06:	793b      	ldrb	r3, [r7, #4]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d201      	bcs.n	8005b10 <ssd1306_Line+0x58>
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e001      	b.n	8005b14 <ssd1306_Line+0x5c>
 8005b10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b14:	60fb      	str	r3, [r7, #12]
  int32_t error = deltaX - deltaY;
 8005b16:	69ba      	ldr	r2, [r7, #24]
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	61fb      	str	r3, [r7, #28]
  int32_t error2;
    
  ssd1306_DrawPixel(x2, y2, color);
 8005b1e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8005b22:	7939      	ldrb	r1, [r7, #4]
 8005b24:	797b      	ldrb	r3, [r7, #5]
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7ff fe96 	bl	8005858 <ssd1306_DrawPixel>
    while((x1 != x2) || (y1 != y2))
 8005b2c:	e024      	b.n	8005b78 <ssd1306_Line+0xc0>
    {
    ssd1306_DrawPixel(x1, y1, color);
 8005b2e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8005b32:	79b9      	ldrb	r1, [r7, #6]
 8005b34:	79fb      	ldrb	r3, [r7, #7]
 8005b36:	4618      	mov	r0, r3
 8005b38:	f7ff fe8e 	bl	8005858 <ssd1306_DrawPixel>
    error2 = error * 2;
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	005b      	lsls	r3, r3, #1
 8005b40:	60bb      	str	r3, [r7, #8]
    if(error2 > -deltaY)
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	425b      	negs	r3, r3
 8005b46:	68ba      	ldr	r2, [r7, #8]
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	dd08      	ble.n	8005b5e <ssd1306_Line+0xa6>
    {
      error -= deltaY;
 8005b4c:	69fa      	ldr	r2, [r7, #28]
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	1ad3      	subs	r3, r2, r3
 8005b52:	61fb      	str	r3, [r7, #28]
      x1 += signX;
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	b2da      	uxtb	r2, r3
 8005b58:	79fb      	ldrb	r3, [r7, #7]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	71fb      	strb	r3, [r7, #7]
    else
    {
    /*nothing to do*/
    }
        
    if(error2 < deltaX)
 8005b5e:	68ba      	ldr	r2, [r7, #8]
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	da08      	bge.n	8005b78 <ssd1306_Line+0xc0>
    {
      error += deltaX;
 8005b66:	69fa      	ldr	r2, [r7, #28]
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	61fb      	str	r3, [r7, #28]
      y1 += signY;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	b2da      	uxtb	r2, r3
 8005b72:	79bb      	ldrb	r3, [r7, #6]
 8005b74:	4413      	add	r3, r2
 8005b76:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2))
 8005b78:	79fa      	ldrb	r2, [r7, #7]
 8005b7a:	797b      	ldrb	r3, [r7, #5]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d1d6      	bne.n	8005b2e <ssd1306_Line+0x76>
 8005b80:	79ba      	ldrb	r2, [r7, #6]
 8005b82:	793b      	ldrb	r3, [r7, #4]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d1d2      	bne.n	8005b2e <ssd1306_Line+0x76>
    else
    {
    /*nothing to do*/
    }
  }
  return;
 8005b88:	bf00      	nop
}
 8005b8a:	3724      	adds	r7, #36	; 0x24
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd90      	pop	{r4, r7, pc}

08005b90 <ssd1306_DrawCircle>:
    }
    
    return;
}
//Draw circle by Bresenhem's algorithm
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8005b90:	b590      	push	{r4, r7, lr}
 8005b92:	b087      	sub	sp, #28
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	4604      	mov	r4, r0
 8005b98:	4608      	mov	r0, r1
 8005b9a:	4611      	mov	r1, r2
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	4623      	mov	r3, r4
 8005ba0:	71fb      	strb	r3, [r7, #7]
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	71bb      	strb	r3, [r7, #6]
 8005ba6:	460b      	mov	r3, r1
 8005ba8:	717b      	strb	r3, [r7, #5]
 8005baa:	4613      	mov	r3, r2
 8005bac:	713b      	strb	r3, [r7, #4]
  int32_t x = -par_r;
 8005bae:	797b      	ldrb	r3, [r7, #5]
 8005bb0:	425b      	negs	r3, r3
 8005bb2:	617b      	str	r3, [r7, #20]
  int32_t y = 0;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	613b      	str	r3, [r7, #16]
  int32_t err = 2 - 2 * par_r;
 8005bb8:	797b      	ldrb	r3, [r7, #5]
 8005bba:	f1c3 0301 	rsb	r3, r3, #1
 8005bbe:	005b      	lsls	r3, r3, #1
 8005bc0:	60fb      	str	r3, [r7, #12]
  int32_t e2;

  if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 8005bc2:	79fb      	ldrb	r3, [r7, #7]
 8005bc4:	2b81      	cmp	r3, #129	; 0x81
 8005bc6:	d865      	bhi.n	8005c94 <ssd1306_DrawCircle+0x104>
 8005bc8:	79bb      	ldrb	r3, [r7, #6]
 8005bca:	2b3f      	cmp	r3, #63	; 0x3f
 8005bcc:	d862      	bhi.n	8005c94 <ssd1306_DrawCircle+0x104>
    return;
  }

    do {
      ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	79fa      	ldrb	r2, [r7, #7]
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	b2d8      	uxtb	r0, r3
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	b2da      	uxtb	r2, r3
 8005bdc:	79bb      	ldrb	r3, [r7, #6]
 8005bde:	4413      	add	r3, r2
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	793a      	ldrb	r2, [r7, #4]
 8005be4:	4619      	mov	r1, r3
 8005be6:	f7ff fe37 	bl	8005858 <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	b2da      	uxtb	r2, r3
 8005bee:	79fb      	ldrb	r3, [r7, #7]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	b2d8      	uxtb	r0, r3
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	b2da      	uxtb	r2, r3
 8005bf8:	79bb      	ldrb	r3, [r7, #6]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	793a      	ldrb	r2, [r7, #4]
 8005c00:	4619      	mov	r1, r3
 8005c02:	f7ff fe29 	bl	8005858 <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	b2da      	uxtb	r2, r3
 8005c0a:	79fb      	ldrb	r3, [r7, #7]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	b2d8      	uxtb	r0, r3
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	79ba      	ldrb	r2, [r7, #6]
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	793a      	ldrb	r2, [r7, #4]
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	f7ff fe1b 	bl	8005858 <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	79fa      	ldrb	r2, [r7, #7]
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	b2d8      	uxtb	r0, r3
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	79ba      	ldrb	r2, [r7, #6]
 8005c32:	1ad3      	subs	r3, r2, r3
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	793a      	ldrb	r2, [r7, #4]
 8005c38:	4619      	mov	r1, r3
 8005c3a:	f7ff fe0d 	bl	8005858 <ssd1306_DrawPixel>
        e2 = err;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	60bb      	str	r3, [r7, #8]
        if (e2 <= y) {
 8005c42:	68ba      	ldr	r2, [r7, #8]
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	dc13      	bgt.n	8005c72 <ssd1306_DrawCircle+0xe2>
            y++;
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	005b      	lsls	r3, r3, #1
 8005c54:	3301      	adds	r3, #1
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	4413      	add	r3, r2
 8005c5a:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	425b      	negs	r3, r3
 8005c60:	693a      	ldr	r2, [r7, #16]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d105      	bne.n	8005c72 <ssd1306_DrawCircle+0xe2>
 8005c66:	68ba      	ldr	r2, [r7, #8]
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	dc01      	bgt.n	8005c72 <ssd1306_DrawCircle+0xe2>
              e2 = 0;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          /*nothing to do*/
        }
        if(e2 > x) {
 8005c72:	68ba      	ldr	r2, [r7, #8]
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	dd08      	ble.n	8005c8c <ssd1306_DrawCircle+0xfc>
          x++;
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	617b      	str	r3, [r7, #20]
          err = err + (x * 2 + 1);
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	005b      	lsls	r3, r3, #1
 8005c84:	3301      	adds	r3, #1
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	4413      	add	r3, r2
 8005c8a:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          /*nothing to do*/
        }
    } while(x <= 0);
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	dd9d      	ble.n	8005bce <ssd1306_DrawCircle+0x3e>

    return;
 8005c92:	e000      	b.n	8005c96 <ssd1306_DrawCircle+0x106>
    return;
 8005c94:	bf00      	nop
}
 8005c96:	371c      	adds	r7, #28
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd90      	pop	{r4, r7, pc}

08005c9c <ssd1306_DrawRectangle>:

//Draw rectangle
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8005c9c:	b590      	push	{r4, r7, lr}
 8005c9e:	b085      	sub	sp, #20
 8005ca0:	af02      	add	r7, sp, #8
 8005ca2:	4604      	mov	r4, r0
 8005ca4:	4608      	mov	r0, r1
 8005ca6:	4611      	mov	r1, r2
 8005ca8:	461a      	mov	r2, r3
 8005caa:	4623      	mov	r3, r4
 8005cac:	71fb      	strb	r3, [r7, #7]
 8005cae:	4603      	mov	r3, r0
 8005cb0:	71bb      	strb	r3, [r7, #6]
 8005cb2:	460b      	mov	r3, r1
 8005cb4:	717b      	strb	r3, [r7, #5]
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	713b      	strb	r3, [r7, #4]
  ssd1306_Line(x1,y1,x2,y1,color);
 8005cba:	79bc      	ldrb	r4, [r7, #6]
 8005cbc:	797a      	ldrb	r2, [r7, #5]
 8005cbe:	79b9      	ldrb	r1, [r7, #6]
 8005cc0:	79f8      	ldrb	r0, [r7, #7]
 8005cc2:	7e3b      	ldrb	r3, [r7, #24]
 8005cc4:	9300      	str	r3, [sp, #0]
 8005cc6:	4623      	mov	r3, r4
 8005cc8:	f7ff fef6 	bl	8005ab8 <ssd1306_Line>
  ssd1306_Line(x2,y1,x2,y2,color);
 8005ccc:	793c      	ldrb	r4, [r7, #4]
 8005cce:	797a      	ldrb	r2, [r7, #5]
 8005cd0:	79b9      	ldrb	r1, [r7, #6]
 8005cd2:	7978      	ldrb	r0, [r7, #5]
 8005cd4:	7e3b      	ldrb	r3, [r7, #24]
 8005cd6:	9300      	str	r3, [sp, #0]
 8005cd8:	4623      	mov	r3, r4
 8005cda:	f7ff feed 	bl	8005ab8 <ssd1306_Line>
  ssd1306_Line(x2,y2,x1,y2,color);
 8005cde:	793c      	ldrb	r4, [r7, #4]
 8005ce0:	79fa      	ldrb	r2, [r7, #7]
 8005ce2:	7939      	ldrb	r1, [r7, #4]
 8005ce4:	7978      	ldrb	r0, [r7, #5]
 8005ce6:	7e3b      	ldrb	r3, [r7, #24]
 8005ce8:	9300      	str	r3, [sp, #0]
 8005cea:	4623      	mov	r3, r4
 8005cec:	f7ff fee4 	bl	8005ab8 <ssd1306_Line>
  ssd1306_Line(x1,y2,x1,y1,color);
 8005cf0:	79bc      	ldrb	r4, [r7, #6]
 8005cf2:	79fa      	ldrb	r2, [r7, #7]
 8005cf4:	7939      	ldrb	r1, [r7, #4]
 8005cf6:	79f8      	ldrb	r0, [r7, #7]
 8005cf8:	7e3b      	ldrb	r3, [r7, #24]
 8005cfa:	9300      	str	r3, [sp, #0]
 8005cfc:	4623      	mov	r3, r4
 8005cfe:	f7ff fedb 	bl	8005ab8 <ssd1306_Line>

  return;
 8005d02:	bf00      	nop
}
 8005d04:	370c      	adds	r7, #12
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd90      	pop	{r4, r7, pc}

08005d0a <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8005d0a:	b580      	push	{r7, lr}
 8005d0c:	b084      	sub	sp, #16
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	4603      	mov	r3, r0
 8005d12:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8005d14:	2381      	movs	r3, #129	; 0x81
 8005d16:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8005d18:	7bfb      	ldrb	r3, [r7, #15]
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f7ff fcb2 	bl	8005684 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8005d20:	79fb      	ldrb	r3, [r7, #7]
 8005d22:	4618      	mov	r0, r3
 8005d24:	f7ff fcae 	bl	8005684 <ssd1306_WriteCommand>
}
 8005d28:	bf00      	nop
 8005d2a:	3710      	adds	r7, #16
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	4603      	mov	r3, r0
 8005d38:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8005d3a:	79fb      	ldrb	r3, [r7, #7]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d005      	beq.n	8005d4c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8005d40:	23af      	movs	r3, #175	; 0xaf
 8005d42:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8005d44:	4b08      	ldr	r3, [pc, #32]	; (8005d68 <ssd1306_SetDisplayOn+0x38>)
 8005d46:	2201      	movs	r2, #1
 8005d48:	719a      	strb	r2, [r3, #6]
 8005d4a:	e004      	b.n	8005d56 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8005d4c:	23ae      	movs	r3, #174	; 0xae
 8005d4e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8005d50:	4b05      	ldr	r3, [pc, #20]	; (8005d68 <ssd1306_SetDisplayOn+0x38>)
 8005d52:	2200      	movs	r2, #0
 8005d54:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 8005d56:	7bfb      	ldrb	r3, [r7, #15]
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f7ff fc93 	bl	8005684 <ssd1306_WriteCommand>
}
 8005d5e:	bf00      	nop
 8005d60:	3710      	adds	r7, #16
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	200006f8 	.word	0x200006f8

08005d6c <__errno>:
 8005d6c:	4b01      	ldr	r3, [pc, #4]	; (8005d74 <__errno+0x8>)
 8005d6e:	6818      	ldr	r0, [r3, #0]
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	200000a8 	.word	0x200000a8

08005d78 <__libc_init_array>:
 8005d78:	b570      	push	{r4, r5, r6, lr}
 8005d7a:	2600      	movs	r6, #0
 8005d7c:	4d0c      	ldr	r5, [pc, #48]	; (8005db0 <__libc_init_array+0x38>)
 8005d7e:	4c0d      	ldr	r4, [pc, #52]	; (8005db4 <__libc_init_array+0x3c>)
 8005d80:	1b64      	subs	r4, r4, r5
 8005d82:	10a4      	asrs	r4, r4, #2
 8005d84:	42a6      	cmp	r6, r4
 8005d86:	d109      	bne.n	8005d9c <__libc_init_array+0x24>
 8005d88:	f004 fa38 	bl	800a1fc <_init>
 8005d8c:	2600      	movs	r6, #0
 8005d8e:	4d0a      	ldr	r5, [pc, #40]	; (8005db8 <__libc_init_array+0x40>)
 8005d90:	4c0a      	ldr	r4, [pc, #40]	; (8005dbc <__libc_init_array+0x44>)
 8005d92:	1b64      	subs	r4, r4, r5
 8005d94:	10a4      	asrs	r4, r4, #2
 8005d96:	42a6      	cmp	r6, r4
 8005d98:	d105      	bne.n	8005da6 <__libc_init_array+0x2e>
 8005d9a:	bd70      	pop	{r4, r5, r6, pc}
 8005d9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005da0:	4798      	blx	r3
 8005da2:	3601      	adds	r6, #1
 8005da4:	e7ee      	b.n	8005d84 <__libc_init_array+0xc>
 8005da6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005daa:	4798      	blx	r3
 8005dac:	3601      	adds	r6, #1
 8005dae:	e7f2      	b.n	8005d96 <__libc_init_array+0x1e>
 8005db0:	0800c990 	.word	0x0800c990
 8005db4:	0800c990 	.word	0x0800c990
 8005db8:	0800c990 	.word	0x0800c990
 8005dbc:	0800c994 	.word	0x0800c994

08005dc0 <memcpy>:
 8005dc0:	440a      	add	r2, r1
 8005dc2:	4291      	cmp	r1, r2
 8005dc4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005dc8:	d100      	bne.n	8005dcc <memcpy+0xc>
 8005dca:	4770      	bx	lr
 8005dcc:	b510      	push	{r4, lr}
 8005dce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005dd2:	4291      	cmp	r1, r2
 8005dd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005dd8:	d1f9      	bne.n	8005dce <memcpy+0xe>
 8005dda:	bd10      	pop	{r4, pc}

08005ddc <memset>:
 8005ddc:	4603      	mov	r3, r0
 8005dde:	4402      	add	r2, r0
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d100      	bne.n	8005de6 <memset+0xa>
 8005de4:	4770      	bx	lr
 8005de6:	f803 1b01 	strb.w	r1, [r3], #1
 8005dea:	e7f9      	b.n	8005de0 <memset+0x4>

08005dec <__cvt>:
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005df2:	461f      	mov	r7, r3
 8005df4:	bfbb      	ittet	lt
 8005df6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005dfa:	461f      	movlt	r7, r3
 8005dfc:	2300      	movge	r3, #0
 8005dfe:	232d      	movlt	r3, #45	; 0x2d
 8005e00:	b088      	sub	sp, #32
 8005e02:	4614      	mov	r4, r2
 8005e04:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005e06:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005e08:	7013      	strb	r3, [r2, #0]
 8005e0a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005e0c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005e10:	f023 0820 	bic.w	r8, r3, #32
 8005e14:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005e18:	d005      	beq.n	8005e26 <__cvt+0x3a>
 8005e1a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005e1e:	d100      	bne.n	8005e22 <__cvt+0x36>
 8005e20:	3501      	adds	r5, #1
 8005e22:	2302      	movs	r3, #2
 8005e24:	e000      	b.n	8005e28 <__cvt+0x3c>
 8005e26:	2303      	movs	r3, #3
 8005e28:	aa07      	add	r2, sp, #28
 8005e2a:	9204      	str	r2, [sp, #16]
 8005e2c:	aa06      	add	r2, sp, #24
 8005e2e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005e32:	e9cd 3500 	strd	r3, r5, [sp]
 8005e36:	4622      	mov	r2, r4
 8005e38:	463b      	mov	r3, r7
 8005e3a:	f000 fce5 	bl	8006808 <_dtoa_r>
 8005e3e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005e42:	4606      	mov	r6, r0
 8005e44:	d102      	bne.n	8005e4c <__cvt+0x60>
 8005e46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005e48:	07db      	lsls	r3, r3, #31
 8005e4a:	d522      	bpl.n	8005e92 <__cvt+0xa6>
 8005e4c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005e50:	eb06 0905 	add.w	r9, r6, r5
 8005e54:	d110      	bne.n	8005e78 <__cvt+0x8c>
 8005e56:	7833      	ldrb	r3, [r6, #0]
 8005e58:	2b30      	cmp	r3, #48	; 0x30
 8005e5a:	d10a      	bne.n	8005e72 <__cvt+0x86>
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	2300      	movs	r3, #0
 8005e60:	4620      	mov	r0, r4
 8005e62:	4639      	mov	r1, r7
 8005e64:	f7fa fda0 	bl	80009a8 <__aeabi_dcmpeq>
 8005e68:	b918      	cbnz	r0, 8005e72 <__cvt+0x86>
 8005e6a:	f1c5 0501 	rsb	r5, r5, #1
 8005e6e:	f8ca 5000 	str.w	r5, [sl]
 8005e72:	f8da 3000 	ldr.w	r3, [sl]
 8005e76:	4499      	add	r9, r3
 8005e78:	2200      	movs	r2, #0
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	4620      	mov	r0, r4
 8005e7e:	4639      	mov	r1, r7
 8005e80:	f7fa fd92 	bl	80009a8 <__aeabi_dcmpeq>
 8005e84:	b108      	cbz	r0, 8005e8a <__cvt+0x9e>
 8005e86:	f8cd 901c 	str.w	r9, [sp, #28]
 8005e8a:	2230      	movs	r2, #48	; 0x30
 8005e8c:	9b07      	ldr	r3, [sp, #28]
 8005e8e:	454b      	cmp	r3, r9
 8005e90:	d307      	bcc.n	8005ea2 <__cvt+0xb6>
 8005e92:	4630      	mov	r0, r6
 8005e94:	9b07      	ldr	r3, [sp, #28]
 8005e96:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005e98:	1b9b      	subs	r3, r3, r6
 8005e9a:	6013      	str	r3, [r2, #0]
 8005e9c:	b008      	add	sp, #32
 8005e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ea2:	1c59      	adds	r1, r3, #1
 8005ea4:	9107      	str	r1, [sp, #28]
 8005ea6:	701a      	strb	r2, [r3, #0]
 8005ea8:	e7f0      	b.n	8005e8c <__cvt+0xa0>

08005eaa <__exponent>:
 8005eaa:	4603      	mov	r3, r0
 8005eac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005eae:	2900      	cmp	r1, #0
 8005eb0:	f803 2b02 	strb.w	r2, [r3], #2
 8005eb4:	bfb6      	itet	lt
 8005eb6:	222d      	movlt	r2, #45	; 0x2d
 8005eb8:	222b      	movge	r2, #43	; 0x2b
 8005eba:	4249      	neglt	r1, r1
 8005ebc:	2909      	cmp	r1, #9
 8005ebe:	7042      	strb	r2, [r0, #1]
 8005ec0:	dd2b      	ble.n	8005f1a <__exponent+0x70>
 8005ec2:	f10d 0407 	add.w	r4, sp, #7
 8005ec6:	46a4      	mov	ip, r4
 8005ec8:	270a      	movs	r7, #10
 8005eca:	fb91 f6f7 	sdiv	r6, r1, r7
 8005ece:	460a      	mov	r2, r1
 8005ed0:	46a6      	mov	lr, r4
 8005ed2:	fb07 1516 	mls	r5, r7, r6, r1
 8005ed6:	2a63      	cmp	r2, #99	; 0x63
 8005ed8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005edc:	4631      	mov	r1, r6
 8005ede:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8005ee2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005ee6:	dcf0      	bgt.n	8005eca <__exponent+0x20>
 8005ee8:	3130      	adds	r1, #48	; 0x30
 8005eea:	f1ae 0502 	sub.w	r5, lr, #2
 8005eee:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005ef2:	4629      	mov	r1, r5
 8005ef4:	1c44      	adds	r4, r0, #1
 8005ef6:	4561      	cmp	r1, ip
 8005ef8:	d30a      	bcc.n	8005f10 <__exponent+0x66>
 8005efa:	f10d 0209 	add.w	r2, sp, #9
 8005efe:	eba2 020e 	sub.w	r2, r2, lr
 8005f02:	4565      	cmp	r5, ip
 8005f04:	bf88      	it	hi
 8005f06:	2200      	movhi	r2, #0
 8005f08:	4413      	add	r3, r2
 8005f0a:	1a18      	subs	r0, r3, r0
 8005f0c:	b003      	add	sp, #12
 8005f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f10:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f14:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005f18:	e7ed      	b.n	8005ef6 <__exponent+0x4c>
 8005f1a:	2330      	movs	r3, #48	; 0x30
 8005f1c:	3130      	adds	r1, #48	; 0x30
 8005f1e:	7083      	strb	r3, [r0, #2]
 8005f20:	70c1      	strb	r1, [r0, #3]
 8005f22:	1d03      	adds	r3, r0, #4
 8005f24:	e7f1      	b.n	8005f0a <__exponent+0x60>
	...

08005f28 <_printf_float>:
 8005f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f2c:	b091      	sub	sp, #68	; 0x44
 8005f2e:	460c      	mov	r4, r1
 8005f30:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005f34:	4616      	mov	r6, r2
 8005f36:	461f      	mov	r7, r3
 8005f38:	4605      	mov	r5, r0
 8005f3a:	f001 fa53 	bl	80073e4 <_localeconv_r>
 8005f3e:	6803      	ldr	r3, [r0, #0]
 8005f40:	4618      	mov	r0, r3
 8005f42:	9309      	str	r3, [sp, #36]	; 0x24
 8005f44:	f7fa f904 	bl	8000150 <strlen>
 8005f48:	2300      	movs	r3, #0
 8005f4a:	930e      	str	r3, [sp, #56]	; 0x38
 8005f4c:	f8d8 3000 	ldr.w	r3, [r8]
 8005f50:	900a      	str	r0, [sp, #40]	; 0x28
 8005f52:	3307      	adds	r3, #7
 8005f54:	f023 0307 	bic.w	r3, r3, #7
 8005f58:	f103 0208 	add.w	r2, r3, #8
 8005f5c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005f60:	f8d4 b000 	ldr.w	fp, [r4]
 8005f64:	f8c8 2000 	str.w	r2, [r8]
 8005f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f6c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005f70:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005f74:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005f78:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f7e:	4640      	mov	r0, r8
 8005f80:	4b9c      	ldr	r3, [pc, #624]	; (80061f4 <_printf_float+0x2cc>)
 8005f82:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005f84:	f7fa fd42 	bl	8000a0c <__aeabi_dcmpun>
 8005f88:	bb70      	cbnz	r0, 8005fe8 <_printf_float+0xc0>
 8005f8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f8e:	4640      	mov	r0, r8
 8005f90:	4b98      	ldr	r3, [pc, #608]	; (80061f4 <_printf_float+0x2cc>)
 8005f92:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005f94:	f7fa fd1c 	bl	80009d0 <__aeabi_dcmple>
 8005f98:	bb30      	cbnz	r0, 8005fe8 <_printf_float+0xc0>
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	4640      	mov	r0, r8
 8005fa0:	4651      	mov	r1, sl
 8005fa2:	f7fa fd0b 	bl	80009bc <__aeabi_dcmplt>
 8005fa6:	b110      	cbz	r0, 8005fae <_printf_float+0x86>
 8005fa8:	232d      	movs	r3, #45	; 0x2d
 8005faa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fae:	4b92      	ldr	r3, [pc, #584]	; (80061f8 <_printf_float+0x2d0>)
 8005fb0:	4892      	ldr	r0, [pc, #584]	; (80061fc <_printf_float+0x2d4>)
 8005fb2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005fb6:	bf94      	ite	ls
 8005fb8:	4698      	movls	r8, r3
 8005fba:	4680      	movhi	r8, r0
 8005fbc:	2303      	movs	r3, #3
 8005fbe:	f04f 0a00 	mov.w	sl, #0
 8005fc2:	6123      	str	r3, [r4, #16]
 8005fc4:	f02b 0304 	bic.w	r3, fp, #4
 8005fc8:	6023      	str	r3, [r4, #0]
 8005fca:	4633      	mov	r3, r6
 8005fcc:	4621      	mov	r1, r4
 8005fce:	4628      	mov	r0, r5
 8005fd0:	9700      	str	r7, [sp, #0]
 8005fd2:	aa0f      	add	r2, sp, #60	; 0x3c
 8005fd4:	f000 f9d4 	bl	8006380 <_printf_common>
 8005fd8:	3001      	adds	r0, #1
 8005fda:	f040 8090 	bne.w	80060fe <_printf_float+0x1d6>
 8005fde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005fe2:	b011      	add	sp, #68	; 0x44
 8005fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fe8:	4642      	mov	r2, r8
 8005fea:	4653      	mov	r3, sl
 8005fec:	4640      	mov	r0, r8
 8005fee:	4651      	mov	r1, sl
 8005ff0:	f7fa fd0c 	bl	8000a0c <__aeabi_dcmpun>
 8005ff4:	b148      	cbz	r0, 800600a <_printf_float+0xe2>
 8005ff6:	f1ba 0f00 	cmp.w	sl, #0
 8005ffa:	bfb8      	it	lt
 8005ffc:	232d      	movlt	r3, #45	; 0x2d
 8005ffe:	4880      	ldr	r0, [pc, #512]	; (8006200 <_printf_float+0x2d8>)
 8006000:	bfb8      	it	lt
 8006002:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006006:	4b7f      	ldr	r3, [pc, #508]	; (8006204 <_printf_float+0x2dc>)
 8006008:	e7d3      	b.n	8005fb2 <_printf_float+0x8a>
 800600a:	6863      	ldr	r3, [r4, #4]
 800600c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006010:	1c5a      	adds	r2, r3, #1
 8006012:	d142      	bne.n	800609a <_printf_float+0x172>
 8006014:	2306      	movs	r3, #6
 8006016:	6063      	str	r3, [r4, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	9206      	str	r2, [sp, #24]
 800601c:	aa0e      	add	r2, sp, #56	; 0x38
 800601e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006022:	aa0d      	add	r2, sp, #52	; 0x34
 8006024:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006028:	9203      	str	r2, [sp, #12]
 800602a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800602e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006032:	6023      	str	r3, [r4, #0]
 8006034:	6863      	ldr	r3, [r4, #4]
 8006036:	4642      	mov	r2, r8
 8006038:	9300      	str	r3, [sp, #0]
 800603a:	4628      	mov	r0, r5
 800603c:	4653      	mov	r3, sl
 800603e:	910b      	str	r1, [sp, #44]	; 0x2c
 8006040:	f7ff fed4 	bl	8005dec <__cvt>
 8006044:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006046:	4680      	mov	r8, r0
 8006048:	2947      	cmp	r1, #71	; 0x47
 800604a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800604c:	d108      	bne.n	8006060 <_printf_float+0x138>
 800604e:	1cc8      	adds	r0, r1, #3
 8006050:	db02      	blt.n	8006058 <_printf_float+0x130>
 8006052:	6863      	ldr	r3, [r4, #4]
 8006054:	4299      	cmp	r1, r3
 8006056:	dd40      	ble.n	80060da <_printf_float+0x1b2>
 8006058:	f1a9 0902 	sub.w	r9, r9, #2
 800605c:	fa5f f989 	uxtb.w	r9, r9
 8006060:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006064:	d81f      	bhi.n	80060a6 <_printf_float+0x17e>
 8006066:	464a      	mov	r2, r9
 8006068:	3901      	subs	r1, #1
 800606a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800606e:	910d      	str	r1, [sp, #52]	; 0x34
 8006070:	f7ff ff1b 	bl	8005eaa <__exponent>
 8006074:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006076:	4682      	mov	sl, r0
 8006078:	1813      	adds	r3, r2, r0
 800607a:	2a01      	cmp	r2, #1
 800607c:	6123      	str	r3, [r4, #16]
 800607e:	dc02      	bgt.n	8006086 <_printf_float+0x15e>
 8006080:	6822      	ldr	r2, [r4, #0]
 8006082:	07d2      	lsls	r2, r2, #31
 8006084:	d501      	bpl.n	800608a <_printf_float+0x162>
 8006086:	3301      	adds	r3, #1
 8006088:	6123      	str	r3, [r4, #16]
 800608a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800608e:	2b00      	cmp	r3, #0
 8006090:	d09b      	beq.n	8005fca <_printf_float+0xa2>
 8006092:	232d      	movs	r3, #45	; 0x2d
 8006094:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006098:	e797      	b.n	8005fca <_printf_float+0xa2>
 800609a:	2947      	cmp	r1, #71	; 0x47
 800609c:	d1bc      	bne.n	8006018 <_printf_float+0xf0>
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d1ba      	bne.n	8006018 <_printf_float+0xf0>
 80060a2:	2301      	movs	r3, #1
 80060a4:	e7b7      	b.n	8006016 <_printf_float+0xee>
 80060a6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80060aa:	d118      	bne.n	80060de <_printf_float+0x1b6>
 80060ac:	2900      	cmp	r1, #0
 80060ae:	6863      	ldr	r3, [r4, #4]
 80060b0:	dd0b      	ble.n	80060ca <_printf_float+0x1a2>
 80060b2:	6121      	str	r1, [r4, #16]
 80060b4:	b913      	cbnz	r3, 80060bc <_printf_float+0x194>
 80060b6:	6822      	ldr	r2, [r4, #0]
 80060b8:	07d0      	lsls	r0, r2, #31
 80060ba:	d502      	bpl.n	80060c2 <_printf_float+0x19a>
 80060bc:	3301      	adds	r3, #1
 80060be:	440b      	add	r3, r1
 80060c0:	6123      	str	r3, [r4, #16]
 80060c2:	f04f 0a00 	mov.w	sl, #0
 80060c6:	65a1      	str	r1, [r4, #88]	; 0x58
 80060c8:	e7df      	b.n	800608a <_printf_float+0x162>
 80060ca:	b913      	cbnz	r3, 80060d2 <_printf_float+0x1aa>
 80060cc:	6822      	ldr	r2, [r4, #0]
 80060ce:	07d2      	lsls	r2, r2, #31
 80060d0:	d501      	bpl.n	80060d6 <_printf_float+0x1ae>
 80060d2:	3302      	adds	r3, #2
 80060d4:	e7f4      	b.n	80060c0 <_printf_float+0x198>
 80060d6:	2301      	movs	r3, #1
 80060d8:	e7f2      	b.n	80060c0 <_printf_float+0x198>
 80060da:	f04f 0967 	mov.w	r9, #103	; 0x67
 80060de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060e0:	4299      	cmp	r1, r3
 80060e2:	db05      	blt.n	80060f0 <_printf_float+0x1c8>
 80060e4:	6823      	ldr	r3, [r4, #0]
 80060e6:	6121      	str	r1, [r4, #16]
 80060e8:	07d8      	lsls	r0, r3, #31
 80060ea:	d5ea      	bpl.n	80060c2 <_printf_float+0x19a>
 80060ec:	1c4b      	adds	r3, r1, #1
 80060ee:	e7e7      	b.n	80060c0 <_printf_float+0x198>
 80060f0:	2900      	cmp	r1, #0
 80060f2:	bfcc      	ite	gt
 80060f4:	2201      	movgt	r2, #1
 80060f6:	f1c1 0202 	rsble	r2, r1, #2
 80060fa:	4413      	add	r3, r2
 80060fc:	e7e0      	b.n	80060c0 <_printf_float+0x198>
 80060fe:	6823      	ldr	r3, [r4, #0]
 8006100:	055a      	lsls	r2, r3, #21
 8006102:	d407      	bmi.n	8006114 <_printf_float+0x1ec>
 8006104:	6923      	ldr	r3, [r4, #16]
 8006106:	4642      	mov	r2, r8
 8006108:	4631      	mov	r1, r6
 800610a:	4628      	mov	r0, r5
 800610c:	47b8      	blx	r7
 800610e:	3001      	adds	r0, #1
 8006110:	d12b      	bne.n	800616a <_printf_float+0x242>
 8006112:	e764      	b.n	8005fde <_printf_float+0xb6>
 8006114:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006118:	f240 80dd 	bls.w	80062d6 <_printf_float+0x3ae>
 800611c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006120:	2200      	movs	r2, #0
 8006122:	2300      	movs	r3, #0
 8006124:	f7fa fc40 	bl	80009a8 <__aeabi_dcmpeq>
 8006128:	2800      	cmp	r0, #0
 800612a:	d033      	beq.n	8006194 <_printf_float+0x26c>
 800612c:	2301      	movs	r3, #1
 800612e:	4631      	mov	r1, r6
 8006130:	4628      	mov	r0, r5
 8006132:	4a35      	ldr	r2, [pc, #212]	; (8006208 <_printf_float+0x2e0>)
 8006134:	47b8      	blx	r7
 8006136:	3001      	adds	r0, #1
 8006138:	f43f af51 	beq.w	8005fde <_printf_float+0xb6>
 800613c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006140:	429a      	cmp	r2, r3
 8006142:	db02      	blt.n	800614a <_printf_float+0x222>
 8006144:	6823      	ldr	r3, [r4, #0]
 8006146:	07d8      	lsls	r0, r3, #31
 8006148:	d50f      	bpl.n	800616a <_printf_float+0x242>
 800614a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800614e:	4631      	mov	r1, r6
 8006150:	4628      	mov	r0, r5
 8006152:	47b8      	blx	r7
 8006154:	3001      	adds	r0, #1
 8006156:	f43f af42 	beq.w	8005fde <_printf_float+0xb6>
 800615a:	f04f 0800 	mov.w	r8, #0
 800615e:	f104 091a 	add.w	r9, r4, #26
 8006162:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006164:	3b01      	subs	r3, #1
 8006166:	4543      	cmp	r3, r8
 8006168:	dc09      	bgt.n	800617e <_printf_float+0x256>
 800616a:	6823      	ldr	r3, [r4, #0]
 800616c:	079b      	lsls	r3, r3, #30
 800616e:	f100 8102 	bmi.w	8006376 <_printf_float+0x44e>
 8006172:	68e0      	ldr	r0, [r4, #12]
 8006174:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006176:	4298      	cmp	r0, r3
 8006178:	bfb8      	it	lt
 800617a:	4618      	movlt	r0, r3
 800617c:	e731      	b.n	8005fe2 <_printf_float+0xba>
 800617e:	2301      	movs	r3, #1
 8006180:	464a      	mov	r2, r9
 8006182:	4631      	mov	r1, r6
 8006184:	4628      	mov	r0, r5
 8006186:	47b8      	blx	r7
 8006188:	3001      	adds	r0, #1
 800618a:	f43f af28 	beq.w	8005fde <_printf_float+0xb6>
 800618e:	f108 0801 	add.w	r8, r8, #1
 8006192:	e7e6      	b.n	8006162 <_printf_float+0x23a>
 8006194:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006196:	2b00      	cmp	r3, #0
 8006198:	dc38      	bgt.n	800620c <_printf_float+0x2e4>
 800619a:	2301      	movs	r3, #1
 800619c:	4631      	mov	r1, r6
 800619e:	4628      	mov	r0, r5
 80061a0:	4a19      	ldr	r2, [pc, #100]	; (8006208 <_printf_float+0x2e0>)
 80061a2:	47b8      	blx	r7
 80061a4:	3001      	adds	r0, #1
 80061a6:	f43f af1a 	beq.w	8005fde <_printf_float+0xb6>
 80061aa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80061ae:	4313      	orrs	r3, r2
 80061b0:	d102      	bne.n	80061b8 <_printf_float+0x290>
 80061b2:	6823      	ldr	r3, [r4, #0]
 80061b4:	07d9      	lsls	r1, r3, #31
 80061b6:	d5d8      	bpl.n	800616a <_printf_float+0x242>
 80061b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061bc:	4631      	mov	r1, r6
 80061be:	4628      	mov	r0, r5
 80061c0:	47b8      	blx	r7
 80061c2:	3001      	adds	r0, #1
 80061c4:	f43f af0b 	beq.w	8005fde <_printf_float+0xb6>
 80061c8:	f04f 0900 	mov.w	r9, #0
 80061cc:	f104 0a1a 	add.w	sl, r4, #26
 80061d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061d2:	425b      	negs	r3, r3
 80061d4:	454b      	cmp	r3, r9
 80061d6:	dc01      	bgt.n	80061dc <_printf_float+0x2b4>
 80061d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061da:	e794      	b.n	8006106 <_printf_float+0x1de>
 80061dc:	2301      	movs	r3, #1
 80061de:	4652      	mov	r2, sl
 80061e0:	4631      	mov	r1, r6
 80061e2:	4628      	mov	r0, r5
 80061e4:	47b8      	blx	r7
 80061e6:	3001      	adds	r0, #1
 80061e8:	f43f aef9 	beq.w	8005fde <_printf_float+0xb6>
 80061ec:	f109 0901 	add.w	r9, r9, #1
 80061f0:	e7ee      	b.n	80061d0 <_printf_float+0x2a8>
 80061f2:	bf00      	nop
 80061f4:	7fefffff 	.word	0x7fefffff
 80061f8:	0800c364 	.word	0x0800c364
 80061fc:	0800c368 	.word	0x0800c368
 8006200:	0800c370 	.word	0x0800c370
 8006204:	0800c36c 	.word	0x0800c36c
 8006208:	0800c374 	.word	0x0800c374
 800620c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800620e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006210:	429a      	cmp	r2, r3
 8006212:	bfa8      	it	ge
 8006214:	461a      	movge	r2, r3
 8006216:	2a00      	cmp	r2, #0
 8006218:	4691      	mov	r9, r2
 800621a:	dc37      	bgt.n	800628c <_printf_float+0x364>
 800621c:	f04f 0b00 	mov.w	fp, #0
 8006220:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006224:	f104 021a 	add.w	r2, r4, #26
 8006228:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800622c:	ebaa 0309 	sub.w	r3, sl, r9
 8006230:	455b      	cmp	r3, fp
 8006232:	dc33      	bgt.n	800629c <_printf_float+0x374>
 8006234:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006238:	429a      	cmp	r2, r3
 800623a:	db3b      	blt.n	80062b4 <_printf_float+0x38c>
 800623c:	6823      	ldr	r3, [r4, #0]
 800623e:	07da      	lsls	r2, r3, #31
 8006240:	d438      	bmi.n	80062b4 <_printf_float+0x38c>
 8006242:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006244:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006246:	eba2 030a 	sub.w	r3, r2, sl
 800624a:	eba2 0901 	sub.w	r9, r2, r1
 800624e:	4599      	cmp	r9, r3
 8006250:	bfa8      	it	ge
 8006252:	4699      	movge	r9, r3
 8006254:	f1b9 0f00 	cmp.w	r9, #0
 8006258:	dc34      	bgt.n	80062c4 <_printf_float+0x39c>
 800625a:	f04f 0800 	mov.w	r8, #0
 800625e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006262:	f104 0a1a 	add.w	sl, r4, #26
 8006266:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800626a:	1a9b      	subs	r3, r3, r2
 800626c:	eba3 0309 	sub.w	r3, r3, r9
 8006270:	4543      	cmp	r3, r8
 8006272:	f77f af7a 	ble.w	800616a <_printf_float+0x242>
 8006276:	2301      	movs	r3, #1
 8006278:	4652      	mov	r2, sl
 800627a:	4631      	mov	r1, r6
 800627c:	4628      	mov	r0, r5
 800627e:	47b8      	blx	r7
 8006280:	3001      	adds	r0, #1
 8006282:	f43f aeac 	beq.w	8005fde <_printf_float+0xb6>
 8006286:	f108 0801 	add.w	r8, r8, #1
 800628a:	e7ec      	b.n	8006266 <_printf_float+0x33e>
 800628c:	4613      	mov	r3, r2
 800628e:	4631      	mov	r1, r6
 8006290:	4642      	mov	r2, r8
 8006292:	4628      	mov	r0, r5
 8006294:	47b8      	blx	r7
 8006296:	3001      	adds	r0, #1
 8006298:	d1c0      	bne.n	800621c <_printf_float+0x2f4>
 800629a:	e6a0      	b.n	8005fde <_printf_float+0xb6>
 800629c:	2301      	movs	r3, #1
 800629e:	4631      	mov	r1, r6
 80062a0:	4628      	mov	r0, r5
 80062a2:	920b      	str	r2, [sp, #44]	; 0x2c
 80062a4:	47b8      	blx	r7
 80062a6:	3001      	adds	r0, #1
 80062a8:	f43f ae99 	beq.w	8005fde <_printf_float+0xb6>
 80062ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80062ae:	f10b 0b01 	add.w	fp, fp, #1
 80062b2:	e7b9      	b.n	8006228 <_printf_float+0x300>
 80062b4:	4631      	mov	r1, r6
 80062b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80062ba:	4628      	mov	r0, r5
 80062bc:	47b8      	blx	r7
 80062be:	3001      	adds	r0, #1
 80062c0:	d1bf      	bne.n	8006242 <_printf_float+0x31a>
 80062c2:	e68c      	b.n	8005fde <_printf_float+0xb6>
 80062c4:	464b      	mov	r3, r9
 80062c6:	4631      	mov	r1, r6
 80062c8:	4628      	mov	r0, r5
 80062ca:	eb08 020a 	add.w	r2, r8, sl
 80062ce:	47b8      	blx	r7
 80062d0:	3001      	adds	r0, #1
 80062d2:	d1c2      	bne.n	800625a <_printf_float+0x332>
 80062d4:	e683      	b.n	8005fde <_printf_float+0xb6>
 80062d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80062d8:	2a01      	cmp	r2, #1
 80062da:	dc01      	bgt.n	80062e0 <_printf_float+0x3b8>
 80062dc:	07db      	lsls	r3, r3, #31
 80062de:	d537      	bpl.n	8006350 <_printf_float+0x428>
 80062e0:	2301      	movs	r3, #1
 80062e2:	4642      	mov	r2, r8
 80062e4:	4631      	mov	r1, r6
 80062e6:	4628      	mov	r0, r5
 80062e8:	47b8      	blx	r7
 80062ea:	3001      	adds	r0, #1
 80062ec:	f43f ae77 	beq.w	8005fde <_printf_float+0xb6>
 80062f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80062f4:	4631      	mov	r1, r6
 80062f6:	4628      	mov	r0, r5
 80062f8:	47b8      	blx	r7
 80062fa:	3001      	adds	r0, #1
 80062fc:	f43f ae6f 	beq.w	8005fde <_printf_float+0xb6>
 8006300:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006304:	2200      	movs	r2, #0
 8006306:	2300      	movs	r3, #0
 8006308:	f7fa fb4e 	bl	80009a8 <__aeabi_dcmpeq>
 800630c:	b9d8      	cbnz	r0, 8006346 <_printf_float+0x41e>
 800630e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006310:	f108 0201 	add.w	r2, r8, #1
 8006314:	3b01      	subs	r3, #1
 8006316:	4631      	mov	r1, r6
 8006318:	4628      	mov	r0, r5
 800631a:	47b8      	blx	r7
 800631c:	3001      	adds	r0, #1
 800631e:	d10e      	bne.n	800633e <_printf_float+0x416>
 8006320:	e65d      	b.n	8005fde <_printf_float+0xb6>
 8006322:	2301      	movs	r3, #1
 8006324:	464a      	mov	r2, r9
 8006326:	4631      	mov	r1, r6
 8006328:	4628      	mov	r0, r5
 800632a:	47b8      	blx	r7
 800632c:	3001      	adds	r0, #1
 800632e:	f43f ae56 	beq.w	8005fde <_printf_float+0xb6>
 8006332:	f108 0801 	add.w	r8, r8, #1
 8006336:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006338:	3b01      	subs	r3, #1
 800633a:	4543      	cmp	r3, r8
 800633c:	dcf1      	bgt.n	8006322 <_printf_float+0x3fa>
 800633e:	4653      	mov	r3, sl
 8006340:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006344:	e6e0      	b.n	8006108 <_printf_float+0x1e0>
 8006346:	f04f 0800 	mov.w	r8, #0
 800634a:	f104 091a 	add.w	r9, r4, #26
 800634e:	e7f2      	b.n	8006336 <_printf_float+0x40e>
 8006350:	2301      	movs	r3, #1
 8006352:	4642      	mov	r2, r8
 8006354:	e7df      	b.n	8006316 <_printf_float+0x3ee>
 8006356:	2301      	movs	r3, #1
 8006358:	464a      	mov	r2, r9
 800635a:	4631      	mov	r1, r6
 800635c:	4628      	mov	r0, r5
 800635e:	47b8      	blx	r7
 8006360:	3001      	adds	r0, #1
 8006362:	f43f ae3c 	beq.w	8005fde <_printf_float+0xb6>
 8006366:	f108 0801 	add.w	r8, r8, #1
 800636a:	68e3      	ldr	r3, [r4, #12]
 800636c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800636e:	1a5b      	subs	r3, r3, r1
 8006370:	4543      	cmp	r3, r8
 8006372:	dcf0      	bgt.n	8006356 <_printf_float+0x42e>
 8006374:	e6fd      	b.n	8006172 <_printf_float+0x24a>
 8006376:	f04f 0800 	mov.w	r8, #0
 800637a:	f104 0919 	add.w	r9, r4, #25
 800637e:	e7f4      	b.n	800636a <_printf_float+0x442>

08006380 <_printf_common>:
 8006380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006384:	4616      	mov	r6, r2
 8006386:	4699      	mov	r9, r3
 8006388:	688a      	ldr	r2, [r1, #8]
 800638a:	690b      	ldr	r3, [r1, #16]
 800638c:	4607      	mov	r7, r0
 800638e:	4293      	cmp	r3, r2
 8006390:	bfb8      	it	lt
 8006392:	4613      	movlt	r3, r2
 8006394:	6033      	str	r3, [r6, #0]
 8006396:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800639a:	460c      	mov	r4, r1
 800639c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80063a0:	b10a      	cbz	r2, 80063a6 <_printf_common+0x26>
 80063a2:	3301      	adds	r3, #1
 80063a4:	6033      	str	r3, [r6, #0]
 80063a6:	6823      	ldr	r3, [r4, #0]
 80063a8:	0699      	lsls	r1, r3, #26
 80063aa:	bf42      	ittt	mi
 80063ac:	6833      	ldrmi	r3, [r6, #0]
 80063ae:	3302      	addmi	r3, #2
 80063b0:	6033      	strmi	r3, [r6, #0]
 80063b2:	6825      	ldr	r5, [r4, #0]
 80063b4:	f015 0506 	ands.w	r5, r5, #6
 80063b8:	d106      	bne.n	80063c8 <_printf_common+0x48>
 80063ba:	f104 0a19 	add.w	sl, r4, #25
 80063be:	68e3      	ldr	r3, [r4, #12]
 80063c0:	6832      	ldr	r2, [r6, #0]
 80063c2:	1a9b      	subs	r3, r3, r2
 80063c4:	42ab      	cmp	r3, r5
 80063c6:	dc28      	bgt.n	800641a <_printf_common+0x9a>
 80063c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80063cc:	1e13      	subs	r3, r2, #0
 80063ce:	6822      	ldr	r2, [r4, #0]
 80063d0:	bf18      	it	ne
 80063d2:	2301      	movne	r3, #1
 80063d4:	0692      	lsls	r2, r2, #26
 80063d6:	d42d      	bmi.n	8006434 <_printf_common+0xb4>
 80063d8:	4649      	mov	r1, r9
 80063da:	4638      	mov	r0, r7
 80063dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063e0:	47c0      	blx	r8
 80063e2:	3001      	adds	r0, #1
 80063e4:	d020      	beq.n	8006428 <_printf_common+0xa8>
 80063e6:	6823      	ldr	r3, [r4, #0]
 80063e8:	68e5      	ldr	r5, [r4, #12]
 80063ea:	f003 0306 	and.w	r3, r3, #6
 80063ee:	2b04      	cmp	r3, #4
 80063f0:	bf18      	it	ne
 80063f2:	2500      	movne	r5, #0
 80063f4:	6832      	ldr	r2, [r6, #0]
 80063f6:	f04f 0600 	mov.w	r6, #0
 80063fa:	68a3      	ldr	r3, [r4, #8]
 80063fc:	bf08      	it	eq
 80063fe:	1aad      	subeq	r5, r5, r2
 8006400:	6922      	ldr	r2, [r4, #16]
 8006402:	bf08      	it	eq
 8006404:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006408:	4293      	cmp	r3, r2
 800640a:	bfc4      	itt	gt
 800640c:	1a9b      	subgt	r3, r3, r2
 800640e:	18ed      	addgt	r5, r5, r3
 8006410:	341a      	adds	r4, #26
 8006412:	42b5      	cmp	r5, r6
 8006414:	d11a      	bne.n	800644c <_printf_common+0xcc>
 8006416:	2000      	movs	r0, #0
 8006418:	e008      	b.n	800642c <_printf_common+0xac>
 800641a:	2301      	movs	r3, #1
 800641c:	4652      	mov	r2, sl
 800641e:	4649      	mov	r1, r9
 8006420:	4638      	mov	r0, r7
 8006422:	47c0      	blx	r8
 8006424:	3001      	adds	r0, #1
 8006426:	d103      	bne.n	8006430 <_printf_common+0xb0>
 8006428:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800642c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006430:	3501      	adds	r5, #1
 8006432:	e7c4      	b.n	80063be <_printf_common+0x3e>
 8006434:	2030      	movs	r0, #48	; 0x30
 8006436:	18e1      	adds	r1, r4, r3
 8006438:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800643c:	1c5a      	adds	r2, r3, #1
 800643e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006442:	4422      	add	r2, r4
 8006444:	3302      	adds	r3, #2
 8006446:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800644a:	e7c5      	b.n	80063d8 <_printf_common+0x58>
 800644c:	2301      	movs	r3, #1
 800644e:	4622      	mov	r2, r4
 8006450:	4649      	mov	r1, r9
 8006452:	4638      	mov	r0, r7
 8006454:	47c0      	blx	r8
 8006456:	3001      	adds	r0, #1
 8006458:	d0e6      	beq.n	8006428 <_printf_common+0xa8>
 800645a:	3601      	adds	r6, #1
 800645c:	e7d9      	b.n	8006412 <_printf_common+0x92>
	...

08006460 <_printf_i>:
 8006460:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006464:	460c      	mov	r4, r1
 8006466:	7e27      	ldrb	r7, [r4, #24]
 8006468:	4691      	mov	r9, r2
 800646a:	2f78      	cmp	r7, #120	; 0x78
 800646c:	4680      	mov	r8, r0
 800646e:	469a      	mov	sl, r3
 8006470:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006472:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006476:	d807      	bhi.n	8006488 <_printf_i+0x28>
 8006478:	2f62      	cmp	r7, #98	; 0x62
 800647a:	d80a      	bhi.n	8006492 <_printf_i+0x32>
 800647c:	2f00      	cmp	r7, #0
 800647e:	f000 80d9 	beq.w	8006634 <_printf_i+0x1d4>
 8006482:	2f58      	cmp	r7, #88	; 0x58
 8006484:	f000 80a4 	beq.w	80065d0 <_printf_i+0x170>
 8006488:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800648c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006490:	e03a      	b.n	8006508 <_printf_i+0xa8>
 8006492:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006496:	2b15      	cmp	r3, #21
 8006498:	d8f6      	bhi.n	8006488 <_printf_i+0x28>
 800649a:	a001      	add	r0, pc, #4	; (adr r0, 80064a0 <_printf_i+0x40>)
 800649c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80064a0:	080064f9 	.word	0x080064f9
 80064a4:	0800650d 	.word	0x0800650d
 80064a8:	08006489 	.word	0x08006489
 80064ac:	08006489 	.word	0x08006489
 80064b0:	08006489 	.word	0x08006489
 80064b4:	08006489 	.word	0x08006489
 80064b8:	0800650d 	.word	0x0800650d
 80064bc:	08006489 	.word	0x08006489
 80064c0:	08006489 	.word	0x08006489
 80064c4:	08006489 	.word	0x08006489
 80064c8:	08006489 	.word	0x08006489
 80064cc:	0800661b 	.word	0x0800661b
 80064d0:	0800653d 	.word	0x0800653d
 80064d4:	080065fd 	.word	0x080065fd
 80064d8:	08006489 	.word	0x08006489
 80064dc:	08006489 	.word	0x08006489
 80064e0:	0800663d 	.word	0x0800663d
 80064e4:	08006489 	.word	0x08006489
 80064e8:	0800653d 	.word	0x0800653d
 80064ec:	08006489 	.word	0x08006489
 80064f0:	08006489 	.word	0x08006489
 80064f4:	08006605 	.word	0x08006605
 80064f8:	680b      	ldr	r3, [r1, #0]
 80064fa:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80064fe:	1d1a      	adds	r2, r3, #4
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	600a      	str	r2, [r1, #0]
 8006504:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006508:	2301      	movs	r3, #1
 800650a:	e0a4      	b.n	8006656 <_printf_i+0x1f6>
 800650c:	6825      	ldr	r5, [r4, #0]
 800650e:	6808      	ldr	r0, [r1, #0]
 8006510:	062e      	lsls	r6, r5, #24
 8006512:	f100 0304 	add.w	r3, r0, #4
 8006516:	d50a      	bpl.n	800652e <_printf_i+0xce>
 8006518:	6805      	ldr	r5, [r0, #0]
 800651a:	600b      	str	r3, [r1, #0]
 800651c:	2d00      	cmp	r5, #0
 800651e:	da03      	bge.n	8006528 <_printf_i+0xc8>
 8006520:	232d      	movs	r3, #45	; 0x2d
 8006522:	426d      	negs	r5, r5
 8006524:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006528:	230a      	movs	r3, #10
 800652a:	485e      	ldr	r0, [pc, #376]	; (80066a4 <_printf_i+0x244>)
 800652c:	e019      	b.n	8006562 <_printf_i+0x102>
 800652e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006532:	6805      	ldr	r5, [r0, #0]
 8006534:	600b      	str	r3, [r1, #0]
 8006536:	bf18      	it	ne
 8006538:	b22d      	sxthne	r5, r5
 800653a:	e7ef      	b.n	800651c <_printf_i+0xbc>
 800653c:	680b      	ldr	r3, [r1, #0]
 800653e:	6825      	ldr	r5, [r4, #0]
 8006540:	1d18      	adds	r0, r3, #4
 8006542:	6008      	str	r0, [r1, #0]
 8006544:	0628      	lsls	r0, r5, #24
 8006546:	d501      	bpl.n	800654c <_printf_i+0xec>
 8006548:	681d      	ldr	r5, [r3, #0]
 800654a:	e002      	b.n	8006552 <_printf_i+0xf2>
 800654c:	0669      	lsls	r1, r5, #25
 800654e:	d5fb      	bpl.n	8006548 <_printf_i+0xe8>
 8006550:	881d      	ldrh	r5, [r3, #0]
 8006552:	2f6f      	cmp	r7, #111	; 0x6f
 8006554:	bf0c      	ite	eq
 8006556:	2308      	moveq	r3, #8
 8006558:	230a      	movne	r3, #10
 800655a:	4852      	ldr	r0, [pc, #328]	; (80066a4 <_printf_i+0x244>)
 800655c:	2100      	movs	r1, #0
 800655e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006562:	6866      	ldr	r6, [r4, #4]
 8006564:	2e00      	cmp	r6, #0
 8006566:	bfa8      	it	ge
 8006568:	6821      	ldrge	r1, [r4, #0]
 800656a:	60a6      	str	r6, [r4, #8]
 800656c:	bfa4      	itt	ge
 800656e:	f021 0104 	bicge.w	r1, r1, #4
 8006572:	6021      	strge	r1, [r4, #0]
 8006574:	b90d      	cbnz	r5, 800657a <_printf_i+0x11a>
 8006576:	2e00      	cmp	r6, #0
 8006578:	d04d      	beq.n	8006616 <_printf_i+0x1b6>
 800657a:	4616      	mov	r6, r2
 800657c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006580:	fb03 5711 	mls	r7, r3, r1, r5
 8006584:	5dc7      	ldrb	r7, [r0, r7]
 8006586:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800658a:	462f      	mov	r7, r5
 800658c:	42bb      	cmp	r3, r7
 800658e:	460d      	mov	r5, r1
 8006590:	d9f4      	bls.n	800657c <_printf_i+0x11c>
 8006592:	2b08      	cmp	r3, #8
 8006594:	d10b      	bne.n	80065ae <_printf_i+0x14e>
 8006596:	6823      	ldr	r3, [r4, #0]
 8006598:	07df      	lsls	r7, r3, #31
 800659a:	d508      	bpl.n	80065ae <_printf_i+0x14e>
 800659c:	6923      	ldr	r3, [r4, #16]
 800659e:	6861      	ldr	r1, [r4, #4]
 80065a0:	4299      	cmp	r1, r3
 80065a2:	bfde      	ittt	le
 80065a4:	2330      	movle	r3, #48	; 0x30
 80065a6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80065aa:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80065ae:	1b92      	subs	r2, r2, r6
 80065b0:	6122      	str	r2, [r4, #16]
 80065b2:	464b      	mov	r3, r9
 80065b4:	4621      	mov	r1, r4
 80065b6:	4640      	mov	r0, r8
 80065b8:	f8cd a000 	str.w	sl, [sp]
 80065bc:	aa03      	add	r2, sp, #12
 80065be:	f7ff fedf 	bl	8006380 <_printf_common>
 80065c2:	3001      	adds	r0, #1
 80065c4:	d14c      	bne.n	8006660 <_printf_i+0x200>
 80065c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80065ca:	b004      	add	sp, #16
 80065cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065d0:	4834      	ldr	r0, [pc, #208]	; (80066a4 <_printf_i+0x244>)
 80065d2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80065d6:	680e      	ldr	r6, [r1, #0]
 80065d8:	6823      	ldr	r3, [r4, #0]
 80065da:	f856 5b04 	ldr.w	r5, [r6], #4
 80065de:	061f      	lsls	r7, r3, #24
 80065e0:	600e      	str	r6, [r1, #0]
 80065e2:	d514      	bpl.n	800660e <_printf_i+0x1ae>
 80065e4:	07d9      	lsls	r1, r3, #31
 80065e6:	bf44      	itt	mi
 80065e8:	f043 0320 	orrmi.w	r3, r3, #32
 80065ec:	6023      	strmi	r3, [r4, #0]
 80065ee:	b91d      	cbnz	r5, 80065f8 <_printf_i+0x198>
 80065f0:	6823      	ldr	r3, [r4, #0]
 80065f2:	f023 0320 	bic.w	r3, r3, #32
 80065f6:	6023      	str	r3, [r4, #0]
 80065f8:	2310      	movs	r3, #16
 80065fa:	e7af      	b.n	800655c <_printf_i+0xfc>
 80065fc:	6823      	ldr	r3, [r4, #0]
 80065fe:	f043 0320 	orr.w	r3, r3, #32
 8006602:	6023      	str	r3, [r4, #0]
 8006604:	2378      	movs	r3, #120	; 0x78
 8006606:	4828      	ldr	r0, [pc, #160]	; (80066a8 <_printf_i+0x248>)
 8006608:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800660c:	e7e3      	b.n	80065d6 <_printf_i+0x176>
 800660e:	065e      	lsls	r6, r3, #25
 8006610:	bf48      	it	mi
 8006612:	b2ad      	uxthmi	r5, r5
 8006614:	e7e6      	b.n	80065e4 <_printf_i+0x184>
 8006616:	4616      	mov	r6, r2
 8006618:	e7bb      	b.n	8006592 <_printf_i+0x132>
 800661a:	680b      	ldr	r3, [r1, #0]
 800661c:	6826      	ldr	r6, [r4, #0]
 800661e:	1d1d      	adds	r5, r3, #4
 8006620:	6960      	ldr	r0, [r4, #20]
 8006622:	600d      	str	r5, [r1, #0]
 8006624:	0635      	lsls	r5, r6, #24
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	d501      	bpl.n	800662e <_printf_i+0x1ce>
 800662a:	6018      	str	r0, [r3, #0]
 800662c:	e002      	b.n	8006634 <_printf_i+0x1d4>
 800662e:	0671      	lsls	r1, r6, #25
 8006630:	d5fb      	bpl.n	800662a <_printf_i+0x1ca>
 8006632:	8018      	strh	r0, [r3, #0]
 8006634:	2300      	movs	r3, #0
 8006636:	4616      	mov	r6, r2
 8006638:	6123      	str	r3, [r4, #16]
 800663a:	e7ba      	b.n	80065b2 <_printf_i+0x152>
 800663c:	680b      	ldr	r3, [r1, #0]
 800663e:	1d1a      	adds	r2, r3, #4
 8006640:	600a      	str	r2, [r1, #0]
 8006642:	681e      	ldr	r6, [r3, #0]
 8006644:	2100      	movs	r1, #0
 8006646:	4630      	mov	r0, r6
 8006648:	6862      	ldr	r2, [r4, #4]
 800664a:	f000 fed7 	bl	80073fc <memchr>
 800664e:	b108      	cbz	r0, 8006654 <_printf_i+0x1f4>
 8006650:	1b80      	subs	r0, r0, r6
 8006652:	6060      	str	r0, [r4, #4]
 8006654:	6863      	ldr	r3, [r4, #4]
 8006656:	6123      	str	r3, [r4, #16]
 8006658:	2300      	movs	r3, #0
 800665a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800665e:	e7a8      	b.n	80065b2 <_printf_i+0x152>
 8006660:	4632      	mov	r2, r6
 8006662:	4649      	mov	r1, r9
 8006664:	4640      	mov	r0, r8
 8006666:	6923      	ldr	r3, [r4, #16]
 8006668:	47d0      	blx	sl
 800666a:	3001      	adds	r0, #1
 800666c:	d0ab      	beq.n	80065c6 <_printf_i+0x166>
 800666e:	6823      	ldr	r3, [r4, #0]
 8006670:	079b      	lsls	r3, r3, #30
 8006672:	d413      	bmi.n	800669c <_printf_i+0x23c>
 8006674:	68e0      	ldr	r0, [r4, #12]
 8006676:	9b03      	ldr	r3, [sp, #12]
 8006678:	4298      	cmp	r0, r3
 800667a:	bfb8      	it	lt
 800667c:	4618      	movlt	r0, r3
 800667e:	e7a4      	b.n	80065ca <_printf_i+0x16a>
 8006680:	2301      	movs	r3, #1
 8006682:	4632      	mov	r2, r6
 8006684:	4649      	mov	r1, r9
 8006686:	4640      	mov	r0, r8
 8006688:	47d0      	blx	sl
 800668a:	3001      	adds	r0, #1
 800668c:	d09b      	beq.n	80065c6 <_printf_i+0x166>
 800668e:	3501      	adds	r5, #1
 8006690:	68e3      	ldr	r3, [r4, #12]
 8006692:	9903      	ldr	r1, [sp, #12]
 8006694:	1a5b      	subs	r3, r3, r1
 8006696:	42ab      	cmp	r3, r5
 8006698:	dcf2      	bgt.n	8006680 <_printf_i+0x220>
 800669a:	e7eb      	b.n	8006674 <_printf_i+0x214>
 800669c:	2500      	movs	r5, #0
 800669e:	f104 0619 	add.w	r6, r4, #25
 80066a2:	e7f5      	b.n	8006690 <_printf_i+0x230>
 80066a4:	0800c376 	.word	0x0800c376
 80066a8:	0800c387 	.word	0x0800c387

080066ac <siprintf>:
 80066ac:	b40e      	push	{r1, r2, r3}
 80066ae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80066b2:	b500      	push	{lr}
 80066b4:	b09c      	sub	sp, #112	; 0x70
 80066b6:	ab1d      	add	r3, sp, #116	; 0x74
 80066b8:	9002      	str	r0, [sp, #8]
 80066ba:	9006      	str	r0, [sp, #24]
 80066bc:	9107      	str	r1, [sp, #28]
 80066be:	9104      	str	r1, [sp, #16]
 80066c0:	4808      	ldr	r0, [pc, #32]	; (80066e4 <siprintf+0x38>)
 80066c2:	4909      	ldr	r1, [pc, #36]	; (80066e8 <siprintf+0x3c>)
 80066c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80066c8:	9105      	str	r1, [sp, #20]
 80066ca:	6800      	ldr	r0, [r0, #0]
 80066cc:	a902      	add	r1, sp, #8
 80066ce:	9301      	str	r3, [sp, #4]
 80066d0:	f001 fb34 	bl	8007d3c <_svfiprintf_r>
 80066d4:	2200      	movs	r2, #0
 80066d6:	9b02      	ldr	r3, [sp, #8]
 80066d8:	701a      	strb	r2, [r3, #0]
 80066da:	b01c      	add	sp, #112	; 0x70
 80066dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80066e0:	b003      	add	sp, #12
 80066e2:	4770      	bx	lr
 80066e4:	200000a8 	.word	0x200000a8
 80066e8:	ffff0208 	.word	0xffff0208

080066ec <quorem>:
 80066ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066f0:	6903      	ldr	r3, [r0, #16]
 80066f2:	690c      	ldr	r4, [r1, #16]
 80066f4:	4607      	mov	r7, r0
 80066f6:	42a3      	cmp	r3, r4
 80066f8:	f2c0 8083 	blt.w	8006802 <quorem+0x116>
 80066fc:	3c01      	subs	r4, #1
 80066fe:	f100 0514 	add.w	r5, r0, #20
 8006702:	f101 0814 	add.w	r8, r1, #20
 8006706:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800670a:	9301      	str	r3, [sp, #4]
 800670c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006710:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006714:	3301      	adds	r3, #1
 8006716:	429a      	cmp	r2, r3
 8006718:	fbb2 f6f3 	udiv	r6, r2, r3
 800671c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006720:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006724:	d332      	bcc.n	800678c <quorem+0xa0>
 8006726:	f04f 0e00 	mov.w	lr, #0
 800672a:	4640      	mov	r0, r8
 800672c:	46ac      	mov	ip, r5
 800672e:	46f2      	mov	sl, lr
 8006730:	f850 2b04 	ldr.w	r2, [r0], #4
 8006734:	b293      	uxth	r3, r2
 8006736:	fb06 e303 	mla	r3, r6, r3, lr
 800673a:	0c12      	lsrs	r2, r2, #16
 800673c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006740:	fb06 e202 	mla	r2, r6, r2, lr
 8006744:	b29b      	uxth	r3, r3
 8006746:	ebaa 0303 	sub.w	r3, sl, r3
 800674a:	f8dc a000 	ldr.w	sl, [ip]
 800674e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006752:	fa1f fa8a 	uxth.w	sl, sl
 8006756:	4453      	add	r3, sl
 8006758:	fa1f fa82 	uxth.w	sl, r2
 800675c:	f8dc 2000 	ldr.w	r2, [ip]
 8006760:	4581      	cmp	r9, r0
 8006762:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006766:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800676a:	b29b      	uxth	r3, r3
 800676c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006770:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006774:	f84c 3b04 	str.w	r3, [ip], #4
 8006778:	d2da      	bcs.n	8006730 <quorem+0x44>
 800677a:	f855 300b 	ldr.w	r3, [r5, fp]
 800677e:	b92b      	cbnz	r3, 800678c <quorem+0xa0>
 8006780:	9b01      	ldr	r3, [sp, #4]
 8006782:	3b04      	subs	r3, #4
 8006784:	429d      	cmp	r5, r3
 8006786:	461a      	mov	r2, r3
 8006788:	d32f      	bcc.n	80067ea <quorem+0xfe>
 800678a:	613c      	str	r4, [r7, #16]
 800678c:	4638      	mov	r0, r7
 800678e:	f001 f8bd 	bl	800790c <__mcmp>
 8006792:	2800      	cmp	r0, #0
 8006794:	db25      	blt.n	80067e2 <quorem+0xf6>
 8006796:	4628      	mov	r0, r5
 8006798:	f04f 0c00 	mov.w	ip, #0
 800679c:	3601      	adds	r6, #1
 800679e:	f858 1b04 	ldr.w	r1, [r8], #4
 80067a2:	f8d0 e000 	ldr.w	lr, [r0]
 80067a6:	b28b      	uxth	r3, r1
 80067a8:	ebac 0303 	sub.w	r3, ip, r3
 80067ac:	fa1f f28e 	uxth.w	r2, lr
 80067b0:	4413      	add	r3, r2
 80067b2:	0c0a      	lsrs	r2, r1, #16
 80067b4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80067b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80067bc:	b29b      	uxth	r3, r3
 80067be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80067c2:	45c1      	cmp	r9, r8
 80067c4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80067c8:	f840 3b04 	str.w	r3, [r0], #4
 80067cc:	d2e7      	bcs.n	800679e <quorem+0xb2>
 80067ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80067d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80067d6:	b922      	cbnz	r2, 80067e2 <quorem+0xf6>
 80067d8:	3b04      	subs	r3, #4
 80067da:	429d      	cmp	r5, r3
 80067dc:	461a      	mov	r2, r3
 80067de:	d30a      	bcc.n	80067f6 <quorem+0x10a>
 80067e0:	613c      	str	r4, [r7, #16]
 80067e2:	4630      	mov	r0, r6
 80067e4:	b003      	add	sp, #12
 80067e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067ea:	6812      	ldr	r2, [r2, #0]
 80067ec:	3b04      	subs	r3, #4
 80067ee:	2a00      	cmp	r2, #0
 80067f0:	d1cb      	bne.n	800678a <quorem+0x9e>
 80067f2:	3c01      	subs	r4, #1
 80067f4:	e7c6      	b.n	8006784 <quorem+0x98>
 80067f6:	6812      	ldr	r2, [r2, #0]
 80067f8:	3b04      	subs	r3, #4
 80067fa:	2a00      	cmp	r2, #0
 80067fc:	d1f0      	bne.n	80067e0 <quorem+0xf4>
 80067fe:	3c01      	subs	r4, #1
 8006800:	e7eb      	b.n	80067da <quorem+0xee>
 8006802:	2000      	movs	r0, #0
 8006804:	e7ee      	b.n	80067e4 <quorem+0xf8>
	...

08006808 <_dtoa_r>:
 8006808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800680c:	4616      	mov	r6, r2
 800680e:	461f      	mov	r7, r3
 8006810:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006812:	b099      	sub	sp, #100	; 0x64
 8006814:	4605      	mov	r5, r0
 8006816:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800681a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800681e:	b974      	cbnz	r4, 800683e <_dtoa_r+0x36>
 8006820:	2010      	movs	r0, #16
 8006822:	f000 fde3 	bl	80073ec <malloc>
 8006826:	4602      	mov	r2, r0
 8006828:	6268      	str	r0, [r5, #36]	; 0x24
 800682a:	b920      	cbnz	r0, 8006836 <_dtoa_r+0x2e>
 800682c:	21ea      	movs	r1, #234	; 0xea
 800682e:	4bae      	ldr	r3, [pc, #696]	; (8006ae8 <_dtoa_r+0x2e0>)
 8006830:	48ae      	ldr	r0, [pc, #696]	; (8006aec <_dtoa_r+0x2e4>)
 8006832:	f001 fb93 	bl	8007f5c <__assert_func>
 8006836:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800683a:	6004      	str	r4, [r0, #0]
 800683c:	60c4      	str	r4, [r0, #12]
 800683e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006840:	6819      	ldr	r1, [r3, #0]
 8006842:	b151      	cbz	r1, 800685a <_dtoa_r+0x52>
 8006844:	685a      	ldr	r2, [r3, #4]
 8006846:	2301      	movs	r3, #1
 8006848:	4093      	lsls	r3, r2
 800684a:	604a      	str	r2, [r1, #4]
 800684c:	608b      	str	r3, [r1, #8]
 800684e:	4628      	mov	r0, r5
 8006850:	f000 fe22 	bl	8007498 <_Bfree>
 8006854:	2200      	movs	r2, #0
 8006856:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006858:	601a      	str	r2, [r3, #0]
 800685a:	1e3b      	subs	r3, r7, #0
 800685c:	bfaf      	iteee	ge
 800685e:	2300      	movge	r3, #0
 8006860:	2201      	movlt	r2, #1
 8006862:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006866:	9305      	strlt	r3, [sp, #20]
 8006868:	bfa8      	it	ge
 800686a:	f8c8 3000 	strge.w	r3, [r8]
 800686e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006872:	4b9f      	ldr	r3, [pc, #636]	; (8006af0 <_dtoa_r+0x2e8>)
 8006874:	bfb8      	it	lt
 8006876:	f8c8 2000 	strlt.w	r2, [r8]
 800687a:	ea33 0309 	bics.w	r3, r3, r9
 800687e:	d119      	bne.n	80068b4 <_dtoa_r+0xac>
 8006880:	f242 730f 	movw	r3, #9999	; 0x270f
 8006884:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006886:	6013      	str	r3, [r2, #0]
 8006888:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800688c:	4333      	orrs	r3, r6
 800688e:	f000 8580 	beq.w	8007392 <_dtoa_r+0xb8a>
 8006892:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006894:	b953      	cbnz	r3, 80068ac <_dtoa_r+0xa4>
 8006896:	4b97      	ldr	r3, [pc, #604]	; (8006af4 <_dtoa_r+0x2ec>)
 8006898:	e022      	b.n	80068e0 <_dtoa_r+0xd8>
 800689a:	4b97      	ldr	r3, [pc, #604]	; (8006af8 <_dtoa_r+0x2f0>)
 800689c:	9308      	str	r3, [sp, #32]
 800689e:	3308      	adds	r3, #8
 80068a0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80068a2:	6013      	str	r3, [r2, #0]
 80068a4:	9808      	ldr	r0, [sp, #32]
 80068a6:	b019      	add	sp, #100	; 0x64
 80068a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068ac:	4b91      	ldr	r3, [pc, #580]	; (8006af4 <_dtoa_r+0x2ec>)
 80068ae:	9308      	str	r3, [sp, #32]
 80068b0:	3303      	adds	r3, #3
 80068b2:	e7f5      	b.n	80068a0 <_dtoa_r+0x98>
 80068b4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80068b8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80068bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80068c0:	2200      	movs	r2, #0
 80068c2:	2300      	movs	r3, #0
 80068c4:	f7fa f870 	bl	80009a8 <__aeabi_dcmpeq>
 80068c8:	4680      	mov	r8, r0
 80068ca:	b158      	cbz	r0, 80068e4 <_dtoa_r+0xdc>
 80068cc:	2301      	movs	r3, #1
 80068ce:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80068d0:	6013      	str	r3, [r2, #0]
 80068d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	f000 8559 	beq.w	800738c <_dtoa_r+0xb84>
 80068da:	4888      	ldr	r0, [pc, #544]	; (8006afc <_dtoa_r+0x2f4>)
 80068dc:	6018      	str	r0, [r3, #0]
 80068de:	1e43      	subs	r3, r0, #1
 80068e0:	9308      	str	r3, [sp, #32]
 80068e2:	e7df      	b.n	80068a4 <_dtoa_r+0x9c>
 80068e4:	ab16      	add	r3, sp, #88	; 0x58
 80068e6:	9301      	str	r3, [sp, #4]
 80068e8:	ab17      	add	r3, sp, #92	; 0x5c
 80068ea:	9300      	str	r3, [sp, #0]
 80068ec:	4628      	mov	r0, r5
 80068ee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80068f2:	f001 f8b7 	bl	8007a64 <__d2b>
 80068f6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80068fa:	4682      	mov	sl, r0
 80068fc:	2c00      	cmp	r4, #0
 80068fe:	d07e      	beq.n	80069fe <_dtoa_r+0x1f6>
 8006900:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006904:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006906:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800690a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800690e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006912:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006916:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800691a:	2200      	movs	r2, #0
 800691c:	4b78      	ldr	r3, [pc, #480]	; (8006b00 <_dtoa_r+0x2f8>)
 800691e:	f7f9 fc23 	bl	8000168 <__aeabi_dsub>
 8006922:	a36b      	add	r3, pc, #428	; (adr r3, 8006ad0 <_dtoa_r+0x2c8>)
 8006924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006928:	f7f9 fdd6 	bl	80004d8 <__aeabi_dmul>
 800692c:	a36a      	add	r3, pc, #424	; (adr r3, 8006ad8 <_dtoa_r+0x2d0>)
 800692e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006932:	f7f9 fc1b 	bl	800016c <__adddf3>
 8006936:	4606      	mov	r6, r0
 8006938:	4620      	mov	r0, r4
 800693a:	460f      	mov	r7, r1
 800693c:	f7f9 fd62 	bl	8000404 <__aeabi_i2d>
 8006940:	a367      	add	r3, pc, #412	; (adr r3, 8006ae0 <_dtoa_r+0x2d8>)
 8006942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006946:	f7f9 fdc7 	bl	80004d8 <__aeabi_dmul>
 800694a:	4602      	mov	r2, r0
 800694c:	460b      	mov	r3, r1
 800694e:	4630      	mov	r0, r6
 8006950:	4639      	mov	r1, r7
 8006952:	f7f9 fc0b 	bl	800016c <__adddf3>
 8006956:	4606      	mov	r6, r0
 8006958:	460f      	mov	r7, r1
 800695a:	f7fa f86d 	bl	8000a38 <__aeabi_d2iz>
 800695e:	2200      	movs	r2, #0
 8006960:	4681      	mov	r9, r0
 8006962:	2300      	movs	r3, #0
 8006964:	4630      	mov	r0, r6
 8006966:	4639      	mov	r1, r7
 8006968:	f7fa f828 	bl	80009bc <__aeabi_dcmplt>
 800696c:	b148      	cbz	r0, 8006982 <_dtoa_r+0x17a>
 800696e:	4648      	mov	r0, r9
 8006970:	f7f9 fd48 	bl	8000404 <__aeabi_i2d>
 8006974:	4632      	mov	r2, r6
 8006976:	463b      	mov	r3, r7
 8006978:	f7fa f816 	bl	80009a8 <__aeabi_dcmpeq>
 800697c:	b908      	cbnz	r0, 8006982 <_dtoa_r+0x17a>
 800697e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8006982:	f1b9 0f16 	cmp.w	r9, #22
 8006986:	d857      	bhi.n	8006a38 <_dtoa_r+0x230>
 8006988:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800698c:	4b5d      	ldr	r3, [pc, #372]	; (8006b04 <_dtoa_r+0x2fc>)
 800698e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006996:	f7fa f811 	bl	80009bc <__aeabi_dcmplt>
 800699a:	2800      	cmp	r0, #0
 800699c:	d04e      	beq.n	8006a3c <_dtoa_r+0x234>
 800699e:	2300      	movs	r3, #0
 80069a0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80069a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80069a6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80069a8:	1b1c      	subs	r4, r3, r4
 80069aa:	1e63      	subs	r3, r4, #1
 80069ac:	9309      	str	r3, [sp, #36]	; 0x24
 80069ae:	bf49      	itett	mi
 80069b0:	f1c4 0301 	rsbmi	r3, r4, #1
 80069b4:	2300      	movpl	r3, #0
 80069b6:	9306      	strmi	r3, [sp, #24]
 80069b8:	2300      	movmi	r3, #0
 80069ba:	bf54      	ite	pl
 80069bc:	9306      	strpl	r3, [sp, #24]
 80069be:	9309      	strmi	r3, [sp, #36]	; 0x24
 80069c0:	f1b9 0f00 	cmp.w	r9, #0
 80069c4:	db3c      	blt.n	8006a40 <_dtoa_r+0x238>
 80069c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069c8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80069cc:	444b      	add	r3, r9
 80069ce:	9309      	str	r3, [sp, #36]	; 0x24
 80069d0:	2300      	movs	r3, #0
 80069d2:	930a      	str	r3, [sp, #40]	; 0x28
 80069d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80069d6:	2b09      	cmp	r3, #9
 80069d8:	d86c      	bhi.n	8006ab4 <_dtoa_r+0x2ac>
 80069da:	2b05      	cmp	r3, #5
 80069dc:	bfc4      	itt	gt
 80069de:	3b04      	subgt	r3, #4
 80069e0:	9322      	strgt	r3, [sp, #136]	; 0x88
 80069e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80069e4:	bfc8      	it	gt
 80069e6:	2400      	movgt	r4, #0
 80069e8:	f1a3 0302 	sub.w	r3, r3, #2
 80069ec:	bfd8      	it	le
 80069ee:	2401      	movle	r4, #1
 80069f0:	2b03      	cmp	r3, #3
 80069f2:	f200 808b 	bhi.w	8006b0c <_dtoa_r+0x304>
 80069f6:	e8df f003 	tbb	[pc, r3]
 80069fa:	4f2d      	.short	0x4f2d
 80069fc:	5b4d      	.short	0x5b4d
 80069fe:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006a02:	441c      	add	r4, r3
 8006a04:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006a08:	2b20      	cmp	r3, #32
 8006a0a:	bfc3      	ittte	gt
 8006a0c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006a10:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8006a14:	fa09 f303 	lslgt.w	r3, r9, r3
 8006a18:	f1c3 0320 	rsble	r3, r3, #32
 8006a1c:	bfc6      	itte	gt
 8006a1e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006a22:	4318      	orrgt	r0, r3
 8006a24:	fa06 f003 	lslle.w	r0, r6, r3
 8006a28:	f7f9 fcdc 	bl	80003e4 <__aeabi_ui2d>
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006a32:	3c01      	subs	r4, #1
 8006a34:	9313      	str	r3, [sp, #76]	; 0x4c
 8006a36:	e770      	b.n	800691a <_dtoa_r+0x112>
 8006a38:	2301      	movs	r3, #1
 8006a3a:	e7b3      	b.n	80069a4 <_dtoa_r+0x19c>
 8006a3c:	900f      	str	r0, [sp, #60]	; 0x3c
 8006a3e:	e7b2      	b.n	80069a6 <_dtoa_r+0x19e>
 8006a40:	9b06      	ldr	r3, [sp, #24]
 8006a42:	eba3 0309 	sub.w	r3, r3, r9
 8006a46:	9306      	str	r3, [sp, #24]
 8006a48:	f1c9 0300 	rsb	r3, r9, #0
 8006a4c:	930a      	str	r3, [sp, #40]	; 0x28
 8006a4e:	2300      	movs	r3, #0
 8006a50:	930e      	str	r3, [sp, #56]	; 0x38
 8006a52:	e7bf      	b.n	80069d4 <_dtoa_r+0x1cc>
 8006a54:	2300      	movs	r3, #0
 8006a56:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a58:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	dc59      	bgt.n	8006b12 <_dtoa_r+0x30a>
 8006a5e:	f04f 0b01 	mov.w	fp, #1
 8006a62:	465b      	mov	r3, fp
 8006a64:	f8cd b008 	str.w	fp, [sp, #8]
 8006a68:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006a70:	6042      	str	r2, [r0, #4]
 8006a72:	2204      	movs	r2, #4
 8006a74:	f102 0614 	add.w	r6, r2, #20
 8006a78:	429e      	cmp	r6, r3
 8006a7a:	6841      	ldr	r1, [r0, #4]
 8006a7c:	d94f      	bls.n	8006b1e <_dtoa_r+0x316>
 8006a7e:	4628      	mov	r0, r5
 8006a80:	f000 fcca 	bl	8007418 <_Balloc>
 8006a84:	9008      	str	r0, [sp, #32]
 8006a86:	2800      	cmp	r0, #0
 8006a88:	d14d      	bne.n	8006b26 <_dtoa_r+0x31e>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006a90:	4b1d      	ldr	r3, [pc, #116]	; (8006b08 <_dtoa_r+0x300>)
 8006a92:	e6cd      	b.n	8006830 <_dtoa_r+0x28>
 8006a94:	2301      	movs	r3, #1
 8006a96:	e7de      	b.n	8006a56 <_dtoa_r+0x24e>
 8006a98:	2300      	movs	r3, #0
 8006a9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a9c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006a9e:	eb09 0b03 	add.w	fp, r9, r3
 8006aa2:	f10b 0301 	add.w	r3, fp, #1
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	9302      	str	r3, [sp, #8]
 8006aaa:	bfb8      	it	lt
 8006aac:	2301      	movlt	r3, #1
 8006aae:	e7dd      	b.n	8006a6c <_dtoa_r+0x264>
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e7f2      	b.n	8006a9a <_dtoa_r+0x292>
 8006ab4:	2401      	movs	r4, #1
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	940b      	str	r4, [sp, #44]	; 0x2c
 8006aba:	9322      	str	r3, [sp, #136]	; 0x88
 8006abc:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	2312      	movs	r3, #18
 8006ac4:	f8cd b008 	str.w	fp, [sp, #8]
 8006ac8:	9223      	str	r2, [sp, #140]	; 0x8c
 8006aca:	e7cf      	b.n	8006a6c <_dtoa_r+0x264>
 8006acc:	f3af 8000 	nop.w
 8006ad0:	636f4361 	.word	0x636f4361
 8006ad4:	3fd287a7 	.word	0x3fd287a7
 8006ad8:	8b60c8b3 	.word	0x8b60c8b3
 8006adc:	3fc68a28 	.word	0x3fc68a28
 8006ae0:	509f79fb 	.word	0x509f79fb
 8006ae4:	3fd34413 	.word	0x3fd34413
 8006ae8:	0800c3a5 	.word	0x0800c3a5
 8006aec:	0800c3bc 	.word	0x0800c3bc
 8006af0:	7ff00000 	.word	0x7ff00000
 8006af4:	0800c3a1 	.word	0x0800c3a1
 8006af8:	0800c398 	.word	0x0800c398
 8006afc:	0800c375 	.word	0x0800c375
 8006b00:	3ff80000 	.word	0x3ff80000
 8006b04:	0800c4b8 	.word	0x0800c4b8
 8006b08:	0800c41b 	.word	0x0800c41b
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b10:	e7d4      	b.n	8006abc <_dtoa_r+0x2b4>
 8006b12:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8006b16:	465b      	mov	r3, fp
 8006b18:	f8cd b008 	str.w	fp, [sp, #8]
 8006b1c:	e7a6      	b.n	8006a6c <_dtoa_r+0x264>
 8006b1e:	3101      	adds	r1, #1
 8006b20:	6041      	str	r1, [r0, #4]
 8006b22:	0052      	lsls	r2, r2, #1
 8006b24:	e7a6      	b.n	8006a74 <_dtoa_r+0x26c>
 8006b26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006b28:	9a08      	ldr	r2, [sp, #32]
 8006b2a:	601a      	str	r2, [r3, #0]
 8006b2c:	9b02      	ldr	r3, [sp, #8]
 8006b2e:	2b0e      	cmp	r3, #14
 8006b30:	f200 80a8 	bhi.w	8006c84 <_dtoa_r+0x47c>
 8006b34:	2c00      	cmp	r4, #0
 8006b36:	f000 80a5 	beq.w	8006c84 <_dtoa_r+0x47c>
 8006b3a:	f1b9 0f00 	cmp.w	r9, #0
 8006b3e:	dd34      	ble.n	8006baa <_dtoa_r+0x3a2>
 8006b40:	4a9a      	ldr	r2, [pc, #616]	; (8006dac <_dtoa_r+0x5a4>)
 8006b42:	f009 030f 	and.w	r3, r9, #15
 8006b46:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006b4a:	f419 7f80 	tst.w	r9, #256	; 0x100
 8006b4e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006b52:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006b56:	ea4f 1429 	mov.w	r4, r9, asr #4
 8006b5a:	d016      	beq.n	8006b8a <_dtoa_r+0x382>
 8006b5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006b60:	4b93      	ldr	r3, [pc, #588]	; (8006db0 <_dtoa_r+0x5a8>)
 8006b62:	2703      	movs	r7, #3
 8006b64:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006b68:	f7f9 fde0 	bl	800072c <__aeabi_ddiv>
 8006b6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b70:	f004 040f 	and.w	r4, r4, #15
 8006b74:	4e8e      	ldr	r6, [pc, #568]	; (8006db0 <_dtoa_r+0x5a8>)
 8006b76:	b954      	cbnz	r4, 8006b8e <_dtoa_r+0x386>
 8006b78:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006b7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b80:	f7f9 fdd4 	bl	800072c <__aeabi_ddiv>
 8006b84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b88:	e029      	b.n	8006bde <_dtoa_r+0x3d6>
 8006b8a:	2702      	movs	r7, #2
 8006b8c:	e7f2      	b.n	8006b74 <_dtoa_r+0x36c>
 8006b8e:	07e1      	lsls	r1, r4, #31
 8006b90:	d508      	bpl.n	8006ba4 <_dtoa_r+0x39c>
 8006b92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006b96:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006b9a:	f7f9 fc9d 	bl	80004d8 <__aeabi_dmul>
 8006b9e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006ba2:	3701      	adds	r7, #1
 8006ba4:	1064      	asrs	r4, r4, #1
 8006ba6:	3608      	adds	r6, #8
 8006ba8:	e7e5      	b.n	8006b76 <_dtoa_r+0x36e>
 8006baa:	f000 80a5 	beq.w	8006cf8 <_dtoa_r+0x4f0>
 8006bae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006bb2:	f1c9 0400 	rsb	r4, r9, #0
 8006bb6:	4b7d      	ldr	r3, [pc, #500]	; (8006dac <_dtoa_r+0x5a4>)
 8006bb8:	f004 020f 	and.w	r2, r4, #15
 8006bbc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc4:	f7f9 fc88 	bl	80004d8 <__aeabi_dmul>
 8006bc8:	2702      	movs	r7, #2
 8006bca:	2300      	movs	r3, #0
 8006bcc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006bd0:	4e77      	ldr	r6, [pc, #476]	; (8006db0 <_dtoa_r+0x5a8>)
 8006bd2:	1124      	asrs	r4, r4, #4
 8006bd4:	2c00      	cmp	r4, #0
 8006bd6:	f040 8084 	bne.w	8006ce2 <_dtoa_r+0x4da>
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d1d2      	bne.n	8006b84 <_dtoa_r+0x37c>
 8006bde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	f000 808b 	beq.w	8006cfc <_dtoa_r+0x4f4>
 8006be6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006bea:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006bee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	4b6f      	ldr	r3, [pc, #444]	; (8006db4 <_dtoa_r+0x5ac>)
 8006bf6:	f7f9 fee1 	bl	80009bc <__aeabi_dcmplt>
 8006bfa:	2800      	cmp	r0, #0
 8006bfc:	d07e      	beq.n	8006cfc <_dtoa_r+0x4f4>
 8006bfe:	9b02      	ldr	r3, [sp, #8]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d07b      	beq.n	8006cfc <_dtoa_r+0x4f4>
 8006c04:	f1bb 0f00 	cmp.w	fp, #0
 8006c08:	dd38      	ble.n	8006c7c <_dtoa_r+0x474>
 8006c0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006c0e:	2200      	movs	r2, #0
 8006c10:	4b69      	ldr	r3, [pc, #420]	; (8006db8 <_dtoa_r+0x5b0>)
 8006c12:	f7f9 fc61 	bl	80004d8 <__aeabi_dmul>
 8006c16:	465c      	mov	r4, fp
 8006c18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c1c:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
 8006c20:	3701      	adds	r7, #1
 8006c22:	4638      	mov	r0, r7
 8006c24:	f7f9 fbee 	bl	8000404 <__aeabi_i2d>
 8006c28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c2c:	f7f9 fc54 	bl	80004d8 <__aeabi_dmul>
 8006c30:	2200      	movs	r2, #0
 8006c32:	4b62      	ldr	r3, [pc, #392]	; (8006dbc <_dtoa_r+0x5b4>)
 8006c34:	f7f9 fa9a 	bl	800016c <__adddf3>
 8006c38:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006c3c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006c40:	9611      	str	r6, [sp, #68]	; 0x44
 8006c42:	2c00      	cmp	r4, #0
 8006c44:	d15d      	bne.n	8006d02 <_dtoa_r+0x4fa>
 8006c46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	4b5c      	ldr	r3, [pc, #368]	; (8006dc0 <_dtoa_r+0x5b8>)
 8006c4e:	f7f9 fa8b 	bl	8000168 <__aeabi_dsub>
 8006c52:	4602      	mov	r2, r0
 8006c54:	460b      	mov	r3, r1
 8006c56:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006c5a:	4633      	mov	r3, r6
 8006c5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006c5e:	f7f9 fecb 	bl	80009f8 <__aeabi_dcmpgt>
 8006c62:	2800      	cmp	r0, #0
 8006c64:	f040 829e 	bne.w	80071a4 <_dtoa_r+0x99c>
 8006c68:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006c6e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006c72:	f7f9 fea3 	bl	80009bc <__aeabi_dcmplt>
 8006c76:	2800      	cmp	r0, #0
 8006c78:	f040 8292 	bne.w	80071a0 <_dtoa_r+0x998>
 8006c7c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006c80:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006c84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	f2c0 8153 	blt.w	8006f32 <_dtoa_r+0x72a>
 8006c8c:	f1b9 0f0e 	cmp.w	r9, #14
 8006c90:	f300 814f 	bgt.w	8006f32 <_dtoa_r+0x72a>
 8006c94:	4b45      	ldr	r3, [pc, #276]	; (8006dac <_dtoa_r+0x5a4>)
 8006c96:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006c9a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006c9e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006ca2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	f280 80db 	bge.w	8006e60 <_dtoa_r+0x658>
 8006caa:	9b02      	ldr	r3, [sp, #8]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	f300 80d7 	bgt.w	8006e60 <_dtoa_r+0x658>
 8006cb2:	f040 8274 	bne.w	800719e <_dtoa_r+0x996>
 8006cb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	4b40      	ldr	r3, [pc, #256]	; (8006dc0 <_dtoa_r+0x5b8>)
 8006cbe:	f7f9 fc0b 	bl	80004d8 <__aeabi_dmul>
 8006cc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006cc6:	f7f9 fe8d 	bl	80009e4 <__aeabi_dcmpge>
 8006cca:	9c02      	ldr	r4, [sp, #8]
 8006ccc:	4626      	mov	r6, r4
 8006cce:	2800      	cmp	r0, #0
 8006cd0:	f040 824a 	bne.w	8007168 <_dtoa_r+0x960>
 8006cd4:	2331      	movs	r3, #49	; 0x31
 8006cd6:	9f08      	ldr	r7, [sp, #32]
 8006cd8:	f109 0901 	add.w	r9, r9, #1
 8006cdc:	f807 3b01 	strb.w	r3, [r7], #1
 8006ce0:	e246      	b.n	8007170 <_dtoa_r+0x968>
 8006ce2:	07e2      	lsls	r2, r4, #31
 8006ce4:	d505      	bpl.n	8006cf2 <_dtoa_r+0x4ea>
 8006ce6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006cea:	f7f9 fbf5 	bl	80004d8 <__aeabi_dmul>
 8006cee:	2301      	movs	r3, #1
 8006cf0:	3701      	adds	r7, #1
 8006cf2:	1064      	asrs	r4, r4, #1
 8006cf4:	3608      	adds	r6, #8
 8006cf6:	e76d      	b.n	8006bd4 <_dtoa_r+0x3cc>
 8006cf8:	2702      	movs	r7, #2
 8006cfa:	e770      	b.n	8006bde <_dtoa_r+0x3d6>
 8006cfc:	46c8      	mov	r8, r9
 8006cfe:	9c02      	ldr	r4, [sp, #8]
 8006d00:	e78f      	b.n	8006c22 <_dtoa_r+0x41a>
 8006d02:	9908      	ldr	r1, [sp, #32]
 8006d04:	4b29      	ldr	r3, [pc, #164]	; (8006dac <_dtoa_r+0x5a4>)
 8006d06:	4421      	add	r1, r4
 8006d08:	9112      	str	r1, [sp, #72]	; 0x48
 8006d0a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006d0c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006d10:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006d14:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006d18:	2900      	cmp	r1, #0
 8006d1a:	d055      	beq.n	8006dc8 <_dtoa_r+0x5c0>
 8006d1c:	2000      	movs	r0, #0
 8006d1e:	4929      	ldr	r1, [pc, #164]	; (8006dc4 <_dtoa_r+0x5bc>)
 8006d20:	f7f9 fd04 	bl	800072c <__aeabi_ddiv>
 8006d24:	463b      	mov	r3, r7
 8006d26:	4632      	mov	r2, r6
 8006d28:	f7f9 fa1e 	bl	8000168 <__aeabi_dsub>
 8006d2c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006d30:	9f08      	ldr	r7, [sp, #32]
 8006d32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d36:	f7f9 fe7f 	bl	8000a38 <__aeabi_d2iz>
 8006d3a:	4604      	mov	r4, r0
 8006d3c:	f7f9 fb62 	bl	8000404 <__aeabi_i2d>
 8006d40:	4602      	mov	r2, r0
 8006d42:	460b      	mov	r3, r1
 8006d44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d48:	f7f9 fa0e 	bl	8000168 <__aeabi_dsub>
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	460b      	mov	r3, r1
 8006d50:	3430      	adds	r4, #48	; 0x30
 8006d52:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006d56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006d5a:	f807 4b01 	strb.w	r4, [r7], #1
 8006d5e:	f7f9 fe2d 	bl	80009bc <__aeabi_dcmplt>
 8006d62:	2800      	cmp	r0, #0
 8006d64:	d174      	bne.n	8006e50 <_dtoa_r+0x648>
 8006d66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d6a:	2000      	movs	r0, #0
 8006d6c:	4911      	ldr	r1, [pc, #68]	; (8006db4 <_dtoa_r+0x5ac>)
 8006d6e:	f7f9 f9fb 	bl	8000168 <__aeabi_dsub>
 8006d72:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006d76:	f7f9 fe21 	bl	80009bc <__aeabi_dcmplt>
 8006d7a:	2800      	cmp	r0, #0
 8006d7c:	f040 80b6 	bne.w	8006eec <_dtoa_r+0x6e4>
 8006d80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006d82:	429f      	cmp	r7, r3
 8006d84:	f43f af7a 	beq.w	8006c7c <_dtoa_r+0x474>
 8006d88:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	4b0a      	ldr	r3, [pc, #40]	; (8006db8 <_dtoa_r+0x5b0>)
 8006d90:	f7f9 fba2 	bl	80004d8 <__aeabi_dmul>
 8006d94:	2200      	movs	r2, #0
 8006d96:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006d9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d9e:	4b06      	ldr	r3, [pc, #24]	; (8006db8 <_dtoa_r+0x5b0>)
 8006da0:	f7f9 fb9a 	bl	80004d8 <__aeabi_dmul>
 8006da4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006da8:	e7c3      	b.n	8006d32 <_dtoa_r+0x52a>
 8006daa:	bf00      	nop
 8006dac:	0800c4b8 	.word	0x0800c4b8
 8006db0:	0800c490 	.word	0x0800c490
 8006db4:	3ff00000 	.word	0x3ff00000
 8006db8:	40240000 	.word	0x40240000
 8006dbc:	401c0000 	.word	0x401c0000
 8006dc0:	40140000 	.word	0x40140000
 8006dc4:	3fe00000 	.word	0x3fe00000
 8006dc8:	4630      	mov	r0, r6
 8006dca:	4639      	mov	r1, r7
 8006dcc:	f7f9 fb84 	bl	80004d8 <__aeabi_dmul>
 8006dd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006dd2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006dd6:	9c08      	ldr	r4, [sp, #32]
 8006dd8:	9314      	str	r3, [sp, #80]	; 0x50
 8006dda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006dde:	f7f9 fe2b 	bl	8000a38 <__aeabi_d2iz>
 8006de2:	9015      	str	r0, [sp, #84]	; 0x54
 8006de4:	f7f9 fb0e 	bl	8000404 <__aeabi_i2d>
 8006de8:	4602      	mov	r2, r0
 8006dea:	460b      	mov	r3, r1
 8006dec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006df0:	f7f9 f9ba 	bl	8000168 <__aeabi_dsub>
 8006df4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006df6:	4606      	mov	r6, r0
 8006df8:	3330      	adds	r3, #48	; 0x30
 8006dfa:	f804 3b01 	strb.w	r3, [r4], #1
 8006dfe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e00:	460f      	mov	r7, r1
 8006e02:	429c      	cmp	r4, r3
 8006e04:	f04f 0200 	mov.w	r2, #0
 8006e08:	d124      	bne.n	8006e54 <_dtoa_r+0x64c>
 8006e0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006e0e:	4bb3      	ldr	r3, [pc, #716]	; (80070dc <_dtoa_r+0x8d4>)
 8006e10:	f7f9 f9ac 	bl	800016c <__adddf3>
 8006e14:	4602      	mov	r2, r0
 8006e16:	460b      	mov	r3, r1
 8006e18:	4630      	mov	r0, r6
 8006e1a:	4639      	mov	r1, r7
 8006e1c:	f7f9 fdec 	bl	80009f8 <__aeabi_dcmpgt>
 8006e20:	2800      	cmp	r0, #0
 8006e22:	d162      	bne.n	8006eea <_dtoa_r+0x6e2>
 8006e24:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006e28:	2000      	movs	r0, #0
 8006e2a:	49ac      	ldr	r1, [pc, #688]	; (80070dc <_dtoa_r+0x8d4>)
 8006e2c:	f7f9 f99c 	bl	8000168 <__aeabi_dsub>
 8006e30:	4602      	mov	r2, r0
 8006e32:	460b      	mov	r3, r1
 8006e34:	4630      	mov	r0, r6
 8006e36:	4639      	mov	r1, r7
 8006e38:	f7f9 fdc0 	bl	80009bc <__aeabi_dcmplt>
 8006e3c:	2800      	cmp	r0, #0
 8006e3e:	f43f af1d 	beq.w	8006c7c <_dtoa_r+0x474>
 8006e42:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006e44:	1e7b      	subs	r3, r7, #1
 8006e46:	9314      	str	r3, [sp, #80]	; 0x50
 8006e48:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006e4c:	2b30      	cmp	r3, #48	; 0x30
 8006e4e:	d0f8      	beq.n	8006e42 <_dtoa_r+0x63a>
 8006e50:	46c1      	mov	r9, r8
 8006e52:	e03a      	b.n	8006eca <_dtoa_r+0x6c2>
 8006e54:	4ba2      	ldr	r3, [pc, #648]	; (80070e0 <_dtoa_r+0x8d8>)
 8006e56:	f7f9 fb3f 	bl	80004d8 <__aeabi_dmul>
 8006e5a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e5e:	e7bc      	b.n	8006dda <_dtoa_r+0x5d2>
 8006e60:	9f08      	ldr	r7, [sp, #32]
 8006e62:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006e66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e6a:	f7f9 fc5f 	bl	800072c <__aeabi_ddiv>
 8006e6e:	f7f9 fde3 	bl	8000a38 <__aeabi_d2iz>
 8006e72:	4604      	mov	r4, r0
 8006e74:	f7f9 fac6 	bl	8000404 <__aeabi_i2d>
 8006e78:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006e7c:	f7f9 fb2c 	bl	80004d8 <__aeabi_dmul>
 8006e80:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006e84:	460b      	mov	r3, r1
 8006e86:	4602      	mov	r2, r0
 8006e88:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e8c:	f7f9 f96c 	bl	8000168 <__aeabi_dsub>
 8006e90:	f807 6b01 	strb.w	r6, [r7], #1
 8006e94:	9e08      	ldr	r6, [sp, #32]
 8006e96:	9b02      	ldr	r3, [sp, #8]
 8006e98:	1bbe      	subs	r6, r7, r6
 8006e9a:	42b3      	cmp	r3, r6
 8006e9c:	d13a      	bne.n	8006f14 <_dtoa_r+0x70c>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	460b      	mov	r3, r1
 8006ea2:	f7f9 f963 	bl	800016c <__adddf3>
 8006ea6:	4602      	mov	r2, r0
 8006ea8:	460b      	mov	r3, r1
 8006eaa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006eae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006eb2:	f7f9 fda1 	bl	80009f8 <__aeabi_dcmpgt>
 8006eb6:	bb58      	cbnz	r0, 8006f10 <_dtoa_r+0x708>
 8006eb8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006ebc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ec0:	f7f9 fd72 	bl	80009a8 <__aeabi_dcmpeq>
 8006ec4:	b108      	cbz	r0, 8006eca <_dtoa_r+0x6c2>
 8006ec6:	07e1      	lsls	r1, r4, #31
 8006ec8:	d422      	bmi.n	8006f10 <_dtoa_r+0x708>
 8006eca:	4628      	mov	r0, r5
 8006ecc:	4651      	mov	r1, sl
 8006ece:	f000 fae3 	bl	8007498 <_Bfree>
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	703b      	strb	r3, [r7, #0]
 8006ed6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006ed8:	f109 0001 	add.w	r0, r9, #1
 8006edc:	6018      	str	r0, [r3, #0]
 8006ede:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	f43f acdf 	beq.w	80068a4 <_dtoa_r+0x9c>
 8006ee6:	601f      	str	r7, [r3, #0]
 8006ee8:	e4dc      	b.n	80068a4 <_dtoa_r+0x9c>
 8006eea:	4627      	mov	r7, r4
 8006eec:	463b      	mov	r3, r7
 8006eee:	461f      	mov	r7, r3
 8006ef0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ef4:	2a39      	cmp	r2, #57	; 0x39
 8006ef6:	d107      	bne.n	8006f08 <_dtoa_r+0x700>
 8006ef8:	9a08      	ldr	r2, [sp, #32]
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d1f7      	bne.n	8006eee <_dtoa_r+0x6e6>
 8006efe:	2230      	movs	r2, #48	; 0x30
 8006f00:	9908      	ldr	r1, [sp, #32]
 8006f02:	f108 0801 	add.w	r8, r8, #1
 8006f06:	700a      	strb	r2, [r1, #0]
 8006f08:	781a      	ldrb	r2, [r3, #0]
 8006f0a:	3201      	adds	r2, #1
 8006f0c:	701a      	strb	r2, [r3, #0]
 8006f0e:	e79f      	b.n	8006e50 <_dtoa_r+0x648>
 8006f10:	46c8      	mov	r8, r9
 8006f12:	e7eb      	b.n	8006eec <_dtoa_r+0x6e4>
 8006f14:	2200      	movs	r2, #0
 8006f16:	4b72      	ldr	r3, [pc, #456]	; (80070e0 <_dtoa_r+0x8d8>)
 8006f18:	f7f9 fade 	bl	80004d8 <__aeabi_dmul>
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	460b      	mov	r3, r1
 8006f20:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006f24:	2200      	movs	r2, #0
 8006f26:	2300      	movs	r3, #0
 8006f28:	f7f9 fd3e 	bl	80009a8 <__aeabi_dcmpeq>
 8006f2c:	2800      	cmp	r0, #0
 8006f2e:	d098      	beq.n	8006e62 <_dtoa_r+0x65a>
 8006f30:	e7cb      	b.n	8006eca <_dtoa_r+0x6c2>
 8006f32:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006f34:	2a00      	cmp	r2, #0
 8006f36:	f000 80cd 	beq.w	80070d4 <_dtoa_r+0x8cc>
 8006f3a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006f3c:	2a01      	cmp	r2, #1
 8006f3e:	f300 80af 	bgt.w	80070a0 <_dtoa_r+0x898>
 8006f42:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006f44:	2a00      	cmp	r2, #0
 8006f46:	f000 80a7 	beq.w	8007098 <_dtoa_r+0x890>
 8006f4a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006f4e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006f50:	9f06      	ldr	r7, [sp, #24]
 8006f52:	9a06      	ldr	r2, [sp, #24]
 8006f54:	2101      	movs	r1, #1
 8006f56:	441a      	add	r2, r3
 8006f58:	9206      	str	r2, [sp, #24]
 8006f5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f5c:	4628      	mov	r0, r5
 8006f5e:	441a      	add	r2, r3
 8006f60:	9209      	str	r2, [sp, #36]	; 0x24
 8006f62:	f000 fb53 	bl	800760c <__i2b>
 8006f66:	4606      	mov	r6, r0
 8006f68:	2f00      	cmp	r7, #0
 8006f6a:	dd0c      	ble.n	8006f86 <_dtoa_r+0x77e>
 8006f6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	dd09      	ble.n	8006f86 <_dtoa_r+0x77e>
 8006f72:	42bb      	cmp	r3, r7
 8006f74:	bfa8      	it	ge
 8006f76:	463b      	movge	r3, r7
 8006f78:	9a06      	ldr	r2, [sp, #24]
 8006f7a:	1aff      	subs	r7, r7, r3
 8006f7c:	1ad2      	subs	r2, r2, r3
 8006f7e:	9206      	str	r2, [sp, #24]
 8006f80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f82:	1ad3      	subs	r3, r2, r3
 8006f84:	9309      	str	r3, [sp, #36]	; 0x24
 8006f86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f88:	b1f3      	cbz	r3, 8006fc8 <_dtoa_r+0x7c0>
 8006f8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	f000 80a9 	beq.w	80070e4 <_dtoa_r+0x8dc>
 8006f92:	2c00      	cmp	r4, #0
 8006f94:	dd10      	ble.n	8006fb8 <_dtoa_r+0x7b0>
 8006f96:	4631      	mov	r1, r6
 8006f98:	4622      	mov	r2, r4
 8006f9a:	4628      	mov	r0, r5
 8006f9c:	f000 fbf0 	bl	8007780 <__pow5mult>
 8006fa0:	4652      	mov	r2, sl
 8006fa2:	4601      	mov	r1, r0
 8006fa4:	4606      	mov	r6, r0
 8006fa6:	4628      	mov	r0, r5
 8006fa8:	f000 fb46 	bl	8007638 <__multiply>
 8006fac:	4680      	mov	r8, r0
 8006fae:	4651      	mov	r1, sl
 8006fb0:	4628      	mov	r0, r5
 8006fb2:	f000 fa71 	bl	8007498 <_Bfree>
 8006fb6:	46c2      	mov	sl, r8
 8006fb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fba:	1b1a      	subs	r2, r3, r4
 8006fbc:	d004      	beq.n	8006fc8 <_dtoa_r+0x7c0>
 8006fbe:	4651      	mov	r1, sl
 8006fc0:	4628      	mov	r0, r5
 8006fc2:	f000 fbdd 	bl	8007780 <__pow5mult>
 8006fc6:	4682      	mov	sl, r0
 8006fc8:	2101      	movs	r1, #1
 8006fca:	4628      	mov	r0, r5
 8006fcc:	f000 fb1e 	bl	800760c <__i2b>
 8006fd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006fd2:	4604      	mov	r4, r0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	f340 8087 	ble.w	80070e8 <_dtoa_r+0x8e0>
 8006fda:	461a      	mov	r2, r3
 8006fdc:	4601      	mov	r1, r0
 8006fde:	4628      	mov	r0, r5
 8006fe0:	f000 fbce 	bl	8007780 <__pow5mult>
 8006fe4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006fe6:	4604      	mov	r4, r0
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	f340 8080 	ble.w	80070ee <_dtoa_r+0x8e6>
 8006fee:	f04f 0800 	mov.w	r8, #0
 8006ff2:	6923      	ldr	r3, [r4, #16]
 8006ff4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006ff8:	6918      	ldr	r0, [r3, #16]
 8006ffa:	f000 fab9 	bl	8007570 <__hi0bits>
 8006ffe:	f1c0 0020 	rsb	r0, r0, #32
 8007002:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007004:	4418      	add	r0, r3
 8007006:	f010 001f 	ands.w	r0, r0, #31
 800700a:	f000 8092 	beq.w	8007132 <_dtoa_r+0x92a>
 800700e:	f1c0 0320 	rsb	r3, r0, #32
 8007012:	2b04      	cmp	r3, #4
 8007014:	f340 808a 	ble.w	800712c <_dtoa_r+0x924>
 8007018:	f1c0 001c 	rsb	r0, r0, #28
 800701c:	9b06      	ldr	r3, [sp, #24]
 800701e:	4407      	add	r7, r0
 8007020:	4403      	add	r3, r0
 8007022:	9306      	str	r3, [sp, #24]
 8007024:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007026:	4403      	add	r3, r0
 8007028:	9309      	str	r3, [sp, #36]	; 0x24
 800702a:	9b06      	ldr	r3, [sp, #24]
 800702c:	2b00      	cmp	r3, #0
 800702e:	dd05      	ble.n	800703c <_dtoa_r+0x834>
 8007030:	4651      	mov	r1, sl
 8007032:	461a      	mov	r2, r3
 8007034:	4628      	mov	r0, r5
 8007036:	f000 fbfd 	bl	8007834 <__lshift>
 800703a:	4682      	mov	sl, r0
 800703c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800703e:	2b00      	cmp	r3, #0
 8007040:	dd05      	ble.n	800704e <_dtoa_r+0x846>
 8007042:	4621      	mov	r1, r4
 8007044:	461a      	mov	r2, r3
 8007046:	4628      	mov	r0, r5
 8007048:	f000 fbf4 	bl	8007834 <__lshift>
 800704c:	4604      	mov	r4, r0
 800704e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007050:	2b00      	cmp	r3, #0
 8007052:	d070      	beq.n	8007136 <_dtoa_r+0x92e>
 8007054:	4621      	mov	r1, r4
 8007056:	4650      	mov	r0, sl
 8007058:	f000 fc58 	bl	800790c <__mcmp>
 800705c:	2800      	cmp	r0, #0
 800705e:	da6a      	bge.n	8007136 <_dtoa_r+0x92e>
 8007060:	2300      	movs	r3, #0
 8007062:	4651      	mov	r1, sl
 8007064:	220a      	movs	r2, #10
 8007066:	4628      	mov	r0, r5
 8007068:	f000 fa38 	bl	80074dc <__multadd>
 800706c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800706e:	4682      	mov	sl, r0
 8007070:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8007074:	2b00      	cmp	r3, #0
 8007076:	f000 8193 	beq.w	80073a0 <_dtoa_r+0xb98>
 800707a:	4631      	mov	r1, r6
 800707c:	2300      	movs	r3, #0
 800707e:	220a      	movs	r2, #10
 8007080:	4628      	mov	r0, r5
 8007082:	f000 fa2b 	bl	80074dc <__multadd>
 8007086:	f1bb 0f00 	cmp.w	fp, #0
 800708a:	4606      	mov	r6, r0
 800708c:	f300 8093 	bgt.w	80071b6 <_dtoa_r+0x9ae>
 8007090:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007092:	2b02      	cmp	r3, #2
 8007094:	dc57      	bgt.n	8007146 <_dtoa_r+0x93e>
 8007096:	e08e      	b.n	80071b6 <_dtoa_r+0x9ae>
 8007098:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800709a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800709e:	e756      	b.n	8006f4e <_dtoa_r+0x746>
 80070a0:	9b02      	ldr	r3, [sp, #8]
 80070a2:	1e5c      	subs	r4, r3, #1
 80070a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070a6:	42a3      	cmp	r3, r4
 80070a8:	bfb7      	itett	lt
 80070aa:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80070ac:	1b1c      	subge	r4, r3, r4
 80070ae:	1ae2      	sublt	r2, r4, r3
 80070b0:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80070b2:	bfbe      	ittt	lt
 80070b4:	940a      	strlt	r4, [sp, #40]	; 0x28
 80070b6:	189b      	addlt	r3, r3, r2
 80070b8:	930e      	strlt	r3, [sp, #56]	; 0x38
 80070ba:	9b02      	ldr	r3, [sp, #8]
 80070bc:	bfb8      	it	lt
 80070be:	2400      	movlt	r4, #0
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	bfbb      	ittet	lt
 80070c4:	9b06      	ldrlt	r3, [sp, #24]
 80070c6:	9a02      	ldrlt	r2, [sp, #8]
 80070c8:	9f06      	ldrge	r7, [sp, #24]
 80070ca:	1a9f      	sublt	r7, r3, r2
 80070cc:	bfac      	ite	ge
 80070ce:	9b02      	ldrge	r3, [sp, #8]
 80070d0:	2300      	movlt	r3, #0
 80070d2:	e73e      	b.n	8006f52 <_dtoa_r+0x74a>
 80070d4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80070d6:	9f06      	ldr	r7, [sp, #24]
 80070d8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80070da:	e745      	b.n	8006f68 <_dtoa_r+0x760>
 80070dc:	3fe00000 	.word	0x3fe00000
 80070e0:	40240000 	.word	0x40240000
 80070e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070e6:	e76a      	b.n	8006fbe <_dtoa_r+0x7b6>
 80070e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	dc19      	bgt.n	8007122 <_dtoa_r+0x91a>
 80070ee:	9b04      	ldr	r3, [sp, #16]
 80070f0:	b9bb      	cbnz	r3, 8007122 <_dtoa_r+0x91a>
 80070f2:	9b05      	ldr	r3, [sp, #20]
 80070f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070f8:	b99b      	cbnz	r3, 8007122 <_dtoa_r+0x91a>
 80070fa:	9b05      	ldr	r3, [sp, #20]
 80070fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007100:	0d1b      	lsrs	r3, r3, #20
 8007102:	051b      	lsls	r3, r3, #20
 8007104:	b183      	cbz	r3, 8007128 <_dtoa_r+0x920>
 8007106:	f04f 0801 	mov.w	r8, #1
 800710a:	9b06      	ldr	r3, [sp, #24]
 800710c:	3301      	adds	r3, #1
 800710e:	9306      	str	r3, [sp, #24]
 8007110:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007112:	3301      	adds	r3, #1
 8007114:	9309      	str	r3, [sp, #36]	; 0x24
 8007116:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007118:	2b00      	cmp	r3, #0
 800711a:	f47f af6a 	bne.w	8006ff2 <_dtoa_r+0x7ea>
 800711e:	2001      	movs	r0, #1
 8007120:	e76f      	b.n	8007002 <_dtoa_r+0x7fa>
 8007122:	f04f 0800 	mov.w	r8, #0
 8007126:	e7f6      	b.n	8007116 <_dtoa_r+0x90e>
 8007128:	4698      	mov	r8, r3
 800712a:	e7f4      	b.n	8007116 <_dtoa_r+0x90e>
 800712c:	f43f af7d 	beq.w	800702a <_dtoa_r+0x822>
 8007130:	4618      	mov	r0, r3
 8007132:	301c      	adds	r0, #28
 8007134:	e772      	b.n	800701c <_dtoa_r+0x814>
 8007136:	9b02      	ldr	r3, [sp, #8]
 8007138:	2b00      	cmp	r3, #0
 800713a:	dc36      	bgt.n	80071aa <_dtoa_r+0x9a2>
 800713c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800713e:	2b02      	cmp	r3, #2
 8007140:	dd33      	ble.n	80071aa <_dtoa_r+0x9a2>
 8007142:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007146:	f1bb 0f00 	cmp.w	fp, #0
 800714a:	d10d      	bne.n	8007168 <_dtoa_r+0x960>
 800714c:	4621      	mov	r1, r4
 800714e:	465b      	mov	r3, fp
 8007150:	2205      	movs	r2, #5
 8007152:	4628      	mov	r0, r5
 8007154:	f000 f9c2 	bl	80074dc <__multadd>
 8007158:	4601      	mov	r1, r0
 800715a:	4604      	mov	r4, r0
 800715c:	4650      	mov	r0, sl
 800715e:	f000 fbd5 	bl	800790c <__mcmp>
 8007162:	2800      	cmp	r0, #0
 8007164:	f73f adb6 	bgt.w	8006cd4 <_dtoa_r+0x4cc>
 8007168:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800716a:	9f08      	ldr	r7, [sp, #32]
 800716c:	ea6f 0903 	mvn.w	r9, r3
 8007170:	f04f 0800 	mov.w	r8, #0
 8007174:	4621      	mov	r1, r4
 8007176:	4628      	mov	r0, r5
 8007178:	f000 f98e 	bl	8007498 <_Bfree>
 800717c:	2e00      	cmp	r6, #0
 800717e:	f43f aea4 	beq.w	8006eca <_dtoa_r+0x6c2>
 8007182:	f1b8 0f00 	cmp.w	r8, #0
 8007186:	d005      	beq.n	8007194 <_dtoa_r+0x98c>
 8007188:	45b0      	cmp	r8, r6
 800718a:	d003      	beq.n	8007194 <_dtoa_r+0x98c>
 800718c:	4641      	mov	r1, r8
 800718e:	4628      	mov	r0, r5
 8007190:	f000 f982 	bl	8007498 <_Bfree>
 8007194:	4631      	mov	r1, r6
 8007196:	4628      	mov	r0, r5
 8007198:	f000 f97e 	bl	8007498 <_Bfree>
 800719c:	e695      	b.n	8006eca <_dtoa_r+0x6c2>
 800719e:	2400      	movs	r4, #0
 80071a0:	4626      	mov	r6, r4
 80071a2:	e7e1      	b.n	8007168 <_dtoa_r+0x960>
 80071a4:	46c1      	mov	r9, r8
 80071a6:	4626      	mov	r6, r4
 80071a8:	e594      	b.n	8006cd4 <_dtoa_r+0x4cc>
 80071aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071ac:	f8dd b008 	ldr.w	fp, [sp, #8]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	f000 80fc 	beq.w	80073ae <_dtoa_r+0xba6>
 80071b6:	2f00      	cmp	r7, #0
 80071b8:	dd05      	ble.n	80071c6 <_dtoa_r+0x9be>
 80071ba:	4631      	mov	r1, r6
 80071bc:	463a      	mov	r2, r7
 80071be:	4628      	mov	r0, r5
 80071c0:	f000 fb38 	bl	8007834 <__lshift>
 80071c4:	4606      	mov	r6, r0
 80071c6:	f1b8 0f00 	cmp.w	r8, #0
 80071ca:	d05c      	beq.n	8007286 <_dtoa_r+0xa7e>
 80071cc:	4628      	mov	r0, r5
 80071ce:	6871      	ldr	r1, [r6, #4]
 80071d0:	f000 f922 	bl	8007418 <_Balloc>
 80071d4:	4607      	mov	r7, r0
 80071d6:	b928      	cbnz	r0, 80071e4 <_dtoa_r+0x9dc>
 80071d8:	4602      	mov	r2, r0
 80071da:	f240 21ea 	movw	r1, #746	; 0x2ea
 80071de:	4b7e      	ldr	r3, [pc, #504]	; (80073d8 <_dtoa_r+0xbd0>)
 80071e0:	f7ff bb26 	b.w	8006830 <_dtoa_r+0x28>
 80071e4:	6932      	ldr	r2, [r6, #16]
 80071e6:	f106 010c 	add.w	r1, r6, #12
 80071ea:	3202      	adds	r2, #2
 80071ec:	0092      	lsls	r2, r2, #2
 80071ee:	300c      	adds	r0, #12
 80071f0:	f7fe fde6 	bl	8005dc0 <memcpy>
 80071f4:	2201      	movs	r2, #1
 80071f6:	4639      	mov	r1, r7
 80071f8:	4628      	mov	r0, r5
 80071fa:	f000 fb1b 	bl	8007834 <__lshift>
 80071fe:	46b0      	mov	r8, r6
 8007200:	4606      	mov	r6, r0
 8007202:	9b08      	ldr	r3, [sp, #32]
 8007204:	3301      	adds	r3, #1
 8007206:	9302      	str	r3, [sp, #8]
 8007208:	9b08      	ldr	r3, [sp, #32]
 800720a:	445b      	add	r3, fp
 800720c:	930a      	str	r3, [sp, #40]	; 0x28
 800720e:	9b04      	ldr	r3, [sp, #16]
 8007210:	f003 0301 	and.w	r3, r3, #1
 8007214:	9309      	str	r3, [sp, #36]	; 0x24
 8007216:	9b02      	ldr	r3, [sp, #8]
 8007218:	4621      	mov	r1, r4
 800721a:	4650      	mov	r0, sl
 800721c:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8007220:	f7ff fa64 	bl	80066ec <quorem>
 8007224:	4603      	mov	r3, r0
 8007226:	4641      	mov	r1, r8
 8007228:	3330      	adds	r3, #48	; 0x30
 800722a:	9004      	str	r0, [sp, #16]
 800722c:	4650      	mov	r0, sl
 800722e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007230:	f000 fb6c 	bl	800790c <__mcmp>
 8007234:	4632      	mov	r2, r6
 8007236:	9006      	str	r0, [sp, #24]
 8007238:	4621      	mov	r1, r4
 800723a:	4628      	mov	r0, r5
 800723c:	f000 fb82 	bl	8007944 <__mdiff>
 8007240:	68c2      	ldr	r2, [r0, #12]
 8007242:	4607      	mov	r7, r0
 8007244:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007246:	bb02      	cbnz	r2, 800728a <_dtoa_r+0xa82>
 8007248:	4601      	mov	r1, r0
 800724a:	4650      	mov	r0, sl
 800724c:	f000 fb5e 	bl	800790c <__mcmp>
 8007250:	4602      	mov	r2, r0
 8007252:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007254:	4639      	mov	r1, r7
 8007256:	4628      	mov	r0, r5
 8007258:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800725c:	f000 f91c 	bl	8007498 <_Bfree>
 8007260:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007262:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007264:	9f02      	ldr	r7, [sp, #8]
 8007266:	ea43 0102 	orr.w	r1, r3, r2
 800726a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800726c:	430b      	orrs	r3, r1
 800726e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007270:	d10d      	bne.n	800728e <_dtoa_r+0xa86>
 8007272:	2b39      	cmp	r3, #57	; 0x39
 8007274:	d027      	beq.n	80072c6 <_dtoa_r+0xabe>
 8007276:	9a06      	ldr	r2, [sp, #24]
 8007278:	2a00      	cmp	r2, #0
 800727a:	dd01      	ble.n	8007280 <_dtoa_r+0xa78>
 800727c:	9b04      	ldr	r3, [sp, #16]
 800727e:	3331      	adds	r3, #49	; 0x31
 8007280:	f88b 3000 	strb.w	r3, [fp]
 8007284:	e776      	b.n	8007174 <_dtoa_r+0x96c>
 8007286:	4630      	mov	r0, r6
 8007288:	e7b9      	b.n	80071fe <_dtoa_r+0x9f6>
 800728a:	2201      	movs	r2, #1
 800728c:	e7e2      	b.n	8007254 <_dtoa_r+0xa4c>
 800728e:	9906      	ldr	r1, [sp, #24]
 8007290:	2900      	cmp	r1, #0
 8007292:	db04      	blt.n	800729e <_dtoa_r+0xa96>
 8007294:	9822      	ldr	r0, [sp, #136]	; 0x88
 8007296:	4301      	orrs	r1, r0
 8007298:	9809      	ldr	r0, [sp, #36]	; 0x24
 800729a:	4301      	orrs	r1, r0
 800729c:	d120      	bne.n	80072e0 <_dtoa_r+0xad8>
 800729e:	2a00      	cmp	r2, #0
 80072a0:	ddee      	ble.n	8007280 <_dtoa_r+0xa78>
 80072a2:	4651      	mov	r1, sl
 80072a4:	2201      	movs	r2, #1
 80072a6:	4628      	mov	r0, r5
 80072a8:	9302      	str	r3, [sp, #8]
 80072aa:	f000 fac3 	bl	8007834 <__lshift>
 80072ae:	4621      	mov	r1, r4
 80072b0:	4682      	mov	sl, r0
 80072b2:	f000 fb2b 	bl	800790c <__mcmp>
 80072b6:	2800      	cmp	r0, #0
 80072b8:	9b02      	ldr	r3, [sp, #8]
 80072ba:	dc02      	bgt.n	80072c2 <_dtoa_r+0xaba>
 80072bc:	d1e0      	bne.n	8007280 <_dtoa_r+0xa78>
 80072be:	07da      	lsls	r2, r3, #31
 80072c0:	d5de      	bpl.n	8007280 <_dtoa_r+0xa78>
 80072c2:	2b39      	cmp	r3, #57	; 0x39
 80072c4:	d1da      	bne.n	800727c <_dtoa_r+0xa74>
 80072c6:	2339      	movs	r3, #57	; 0x39
 80072c8:	f88b 3000 	strb.w	r3, [fp]
 80072cc:	463b      	mov	r3, r7
 80072ce:	461f      	mov	r7, r3
 80072d0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80072d4:	3b01      	subs	r3, #1
 80072d6:	2a39      	cmp	r2, #57	; 0x39
 80072d8:	d050      	beq.n	800737c <_dtoa_r+0xb74>
 80072da:	3201      	adds	r2, #1
 80072dc:	701a      	strb	r2, [r3, #0]
 80072de:	e749      	b.n	8007174 <_dtoa_r+0x96c>
 80072e0:	2a00      	cmp	r2, #0
 80072e2:	dd03      	ble.n	80072ec <_dtoa_r+0xae4>
 80072e4:	2b39      	cmp	r3, #57	; 0x39
 80072e6:	d0ee      	beq.n	80072c6 <_dtoa_r+0xabe>
 80072e8:	3301      	adds	r3, #1
 80072ea:	e7c9      	b.n	8007280 <_dtoa_r+0xa78>
 80072ec:	9a02      	ldr	r2, [sp, #8]
 80072ee:	990a      	ldr	r1, [sp, #40]	; 0x28
 80072f0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80072f4:	428a      	cmp	r2, r1
 80072f6:	d02a      	beq.n	800734e <_dtoa_r+0xb46>
 80072f8:	4651      	mov	r1, sl
 80072fa:	2300      	movs	r3, #0
 80072fc:	220a      	movs	r2, #10
 80072fe:	4628      	mov	r0, r5
 8007300:	f000 f8ec 	bl	80074dc <__multadd>
 8007304:	45b0      	cmp	r8, r6
 8007306:	4682      	mov	sl, r0
 8007308:	f04f 0300 	mov.w	r3, #0
 800730c:	f04f 020a 	mov.w	r2, #10
 8007310:	4641      	mov	r1, r8
 8007312:	4628      	mov	r0, r5
 8007314:	d107      	bne.n	8007326 <_dtoa_r+0xb1e>
 8007316:	f000 f8e1 	bl	80074dc <__multadd>
 800731a:	4680      	mov	r8, r0
 800731c:	4606      	mov	r6, r0
 800731e:	9b02      	ldr	r3, [sp, #8]
 8007320:	3301      	adds	r3, #1
 8007322:	9302      	str	r3, [sp, #8]
 8007324:	e777      	b.n	8007216 <_dtoa_r+0xa0e>
 8007326:	f000 f8d9 	bl	80074dc <__multadd>
 800732a:	4631      	mov	r1, r6
 800732c:	4680      	mov	r8, r0
 800732e:	2300      	movs	r3, #0
 8007330:	220a      	movs	r2, #10
 8007332:	4628      	mov	r0, r5
 8007334:	f000 f8d2 	bl	80074dc <__multadd>
 8007338:	4606      	mov	r6, r0
 800733a:	e7f0      	b.n	800731e <_dtoa_r+0xb16>
 800733c:	f1bb 0f00 	cmp.w	fp, #0
 8007340:	bfcc      	ite	gt
 8007342:	465f      	movgt	r7, fp
 8007344:	2701      	movle	r7, #1
 8007346:	f04f 0800 	mov.w	r8, #0
 800734a:	9a08      	ldr	r2, [sp, #32]
 800734c:	4417      	add	r7, r2
 800734e:	4651      	mov	r1, sl
 8007350:	2201      	movs	r2, #1
 8007352:	4628      	mov	r0, r5
 8007354:	9302      	str	r3, [sp, #8]
 8007356:	f000 fa6d 	bl	8007834 <__lshift>
 800735a:	4621      	mov	r1, r4
 800735c:	4682      	mov	sl, r0
 800735e:	f000 fad5 	bl	800790c <__mcmp>
 8007362:	2800      	cmp	r0, #0
 8007364:	dcb2      	bgt.n	80072cc <_dtoa_r+0xac4>
 8007366:	d102      	bne.n	800736e <_dtoa_r+0xb66>
 8007368:	9b02      	ldr	r3, [sp, #8]
 800736a:	07db      	lsls	r3, r3, #31
 800736c:	d4ae      	bmi.n	80072cc <_dtoa_r+0xac4>
 800736e:	463b      	mov	r3, r7
 8007370:	461f      	mov	r7, r3
 8007372:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007376:	2a30      	cmp	r2, #48	; 0x30
 8007378:	d0fa      	beq.n	8007370 <_dtoa_r+0xb68>
 800737a:	e6fb      	b.n	8007174 <_dtoa_r+0x96c>
 800737c:	9a08      	ldr	r2, [sp, #32]
 800737e:	429a      	cmp	r2, r3
 8007380:	d1a5      	bne.n	80072ce <_dtoa_r+0xac6>
 8007382:	2331      	movs	r3, #49	; 0x31
 8007384:	f109 0901 	add.w	r9, r9, #1
 8007388:	7013      	strb	r3, [r2, #0]
 800738a:	e6f3      	b.n	8007174 <_dtoa_r+0x96c>
 800738c:	4b13      	ldr	r3, [pc, #76]	; (80073dc <_dtoa_r+0xbd4>)
 800738e:	f7ff baa7 	b.w	80068e0 <_dtoa_r+0xd8>
 8007392:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007394:	2b00      	cmp	r3, #0
 8007396:	f47f aa80 	bne.w	800689a <_dtoa_r+0x92>
 800739a:	4b11      	ldr	r3, [pc, #68]	; (80073e0 <_dtoa_r+0xbd8>)
 800739c:	f7ff baa0 	b.w	80068e0 <_dtoa_r+0xd8>
 80073a0:	f1bb 0f00 	cmp.w	fp, #0
 80073a4:	dc03      	bgt.n	80073ae <_dtoa_r+0xba6>
 80073a6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80073a8:	2b02      	cmp	r3, #2
 80073aa:	f73f aecc 	bgt.w	8007146 <_dtoa_r+0x93e>
 80073ae:	9f08      	ldr	r7, [sp, #32]
 80073b0:	4621      	mov	r1, r4
 80073b2:	4650      	mov	r0, sl
 80073b4:	f7ff f99a 	bl	80066ec <quorem>
 80073b8:	9a08      	ldr	r2, [sp, #32]
 80073ba:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80073be:	f807 3b01 	strb.w	r3, [r7], #1
 80073c2:	1aba      	subs	r2, r7, r2
 80073c4:	4593      	cmp	fp, r2
 80073c6:	ddb9      	ble.n	800733c <_dtoa_r+0xb34>
 80073c8:	4651      	mov	r1, sl
 80073ca:	2300      	movs	r3, #0
 80073cc:	220a      	movs	r2, #10
 80073ce:	4628      	mov	r0, r5
 80073d0:	f000 f884 	bl	80074dc <__multadd>
 80073d4:	4682      	mov	sl, r0
 80073d6:	e7eb      	b.n	80073b0 <_dtoa_r+0xba8>
 80073d8:	0800c41b 	.word	0x0800c41b
 80073dc:	0800c374 	.word	0x0800c374
 80073e0:	0800c398 	.word	0x0800c398

080073e4 <_localeconv_r>:
 80073e4:	4800      	ldr	r0, [pc, #0]	; (80073e8 <_localeconv_r+0x4>)
 80073e6:	4770      	bx	lr
 80073e8:	200001fc 	.word	0x200001fc

080073ec <malloc>:
 80073ec:	4b02      	ldr	r3, [pc, #8]	; (80073f8 <malloc+0xc>)
 80073ee:	4601      	mov	r1, r0
 80073f0:	6818      	ldr	r0, [r3, #0]
 80073f2:	f000 bbed 	b.w	8007bd0 <_malloc_r>
 80073f6:	bf00      	nop
 80073f8:	200000a8 	.word	0x200000a8

080073fc <memchr>:
 80073fc:	4603      	mov	r3, r0
 80073fe:	b510      	push	{r4, lr}
 8007400:	b2c9      	uxtb	r1, r1
 8007402:	4402      	add	r2, r0
 8007404:	4293      	cmp	r3, r2
 8007406:	4618      	mov	r0, r3
 8007408:	d101      	bne.n	800740e <memchr+0x12>
 800740a:	2000      	movs	r0, #0
 800740c:	e003      	b.n	8007416 <memchr+0x1a>
 800740e:	7804      	ldrb	r4, [r0, #0]
 8007410:	3301      	adds	r3, #1
 8007412:	428c      	cmp	r4, r1
 8007414:	d1f6      	bne.n	8007404 <memchr+0x8>
 8007416:	bd10      	pop	{r4, pc}

08007418 <_Balloc>:
 8007418:	b570      	push	{r4, r5, r6, lr}
 800741a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800741c:	4604      	mov	r4, r0
 800741e:	460d      	mov	r5, r1
 8007420:	b976      	cbnz	r6, 8007440 <_Balloc+0x28>
 8007422:	2010      	movs	r0, #16
 8007424:	f7ff ffe2 	bl	80073ec <malloc>
 8007428:	4602      	mov	r2, r0
 800742a:	6260      	str	r0, [r4, #36]	; 0x24
 800742c:	b920      	cbnz	r0, 8007438 <_Balloc+0x20>
 800742e:	2166      	movs	r1, #102	; 0x66
 8007430:	4b17      	ldr	r3, [pc, #92]	; (8007490 <_Balloc+0x78>)
 8007432:	4818      	ldr	r0, [pc, #96]	; (8007494 <_Balloc+0x7c>)
 8007434:	f000 fd92 	bl	8007f5c <__assert_func>
 8007438:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800743c:	6006      	str	r6, [r0, #0]
 800743e:	60c6      	str	r6, [r0, #12]
 8007440:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007442:	68f3      	ldr	r3, [r6, #12]
 8007444:	b183      	cbz	r3, 8007468 <_Balloc+0x50>
 8007446:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800744e:	b9b8      	cbnz	r0, 8007480 <_Balloc+0x68>
 8007450:	2101      	movs	r1, #1
 8007452:	fa01 f605 	lsl.w	r6, r1, r5
 8007456:	1d72      	adds	r2, r6, #5
 8007458:	4620      	mov	r0, r4
 800745a:	0092      	lsls	r2, r2, #2
 800745c:	f000 fb5e 	bl	8007b1c <_calloc_r>
 8007460:	b160      	cbz	r0, 800747c <_Balloc+0x64>
 8007462:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007466:	e00e      	b.n	8007486 <_Balloc+0x6e>
 8007468:	2221      	movs	r2, #33	; 0x21
 800746a:	2104      	movs	r1, #4
 800746c:	4620      	mov	r0, r4
 800746e:	f000 fb55 	bl	8007b1c <_calloc_r>
 8007472:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007474:	60f0      	str	r0, [r6, #12]
 8007476:	68db      	ldr	r3, [r3, #12]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d1e4      	bne.n	8007446 <_Balloc+0x2e>
 800747c:	2000      	movs	r0, #0
 800747e:	bd70      	pop	{r4, r5, r6, pc}
 8007480:	6802      	ldr	r2, [r0, #0]
 8007482:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007486:	2300      	movs	r3, #0
 8007488:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800748c:	e7f7      	b.n	800747e <_Balloc+0x66>
 800748e:	bf00      	nop
 8007490:	0800c3a5 	.word	0x0800c3a5
 8007494:	0800c42c 	.word	0x0800c42c

08007498 <_Bfree>:
 8007498:	b570      	push	{r4, r5, r6, lr}
 800749a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800749c:	4605      	mov	r5, r0
 800749e:	460c      	mov	r4, r1
 80074a0:	b976      	cbnz	r6, 80074c0 <_Bfree+0x28>
 80074a2:	2010      	movs	r0, #16
 80074a4:	f7ff ffa2 	bl	80073ec <malloc>
 80074a8:	4602      	mov	r2, r0
 80074aa:	6268      	str	r0, [r5, #36]	; 0x24
 80074ac:	b920      	cbnz	r0, 80074b8 <_Bfree+0x20>
 80074ae:	218a      	movs	r1, #138	; 0x8a
 80074b0:	4b08      	ldr	r3, [pc, #32]	; (80074d4 <_Bfree+0x3c>)
 80074b2:	4809      	ldr	r0, [pc, #36]	; (80074d8 <_Bfree+0x40>)
 80074b4:	f000 fd52 	bl	8007f5c <__assert_func>
 80074b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80074bc:	6006      	str	r6, [r0, #0]
 80074be:	60c6      	str	r6, [r0, #12]
 80074c0:	b13c      	cbz	r4, 80074d2 <_Bfree+0x3a>
 80074c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80074c4:	6862      	ldr	r2, [r4, #4]
 80074c6:	68db      	ldr	r3, [r3, #12]
 80074c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80074cc:	6021      	str	r1, [r4, #0]
 80074ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80074d2:	bd70      	pop	{r4, r5, r6, pc}
 80074d4:	0800c3a5 	.word	0x0800c3a5
 80074d8:	0800c42c 	.word	0x0800c42c

080074dc <__multadd>:
 80074dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074e0:	4698      	mov	r8, r3
 80074e2:	460c      	mov	r4, r1
 80074e4:	2300      	movs	r3, #0
 80074e6:	690e      	ldr	r6, [r1, #16]
 80074e8:	4607      	mov	r7, r0
 80074ea:	f101 0014 	add.w	r0, r1, #20
 80074ee:	6805      	ldr	r5, [r0, #0]
 80074f0:	3301      	adds	r3, #1
 80074f2:	b2a9      	uxth	r1, r5
 80074f4:	fb02 8101 	mla	r1, r2, r1, r8
 80074f8:	0c2d      	lsrs	r5, r5, #16
 80074fa:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80074fe:	fb02 c505 	mla	r5, r2, r5, ip
 8007502:	b289      	uxth	r1, r1
 8007504:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007508:	429e      	cmp	r6, r3
 800750a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800750e:	f840 1b04 	str.w	r1, [r0], #4
 8007512:	dcec      	bgt.n	80074ee <__multadd+0x12>
 8007514:	f1b8 0f00 	cmp.w	r8, #0
 8007518:	d022      	beq.n	8007560 <__multadd+0x84>
 800751a:	68a3      	ldr	r3, [r4, #8]
 800751c:	42b3      	cmp	r3, r6
 800751e:	dc19      	bgt.n	8007554 <__multadd+0x78>
 8007520:	6861      	ldr	r1, [r4, #4]
 8007522:	4638      	mov	r0, r7
 8007524:	3101      	adds	r1, #1
 8007526:	f7ff ff77 	bl	8007418 <_Balloc>
 800752a:	4605      	mov	r5, r0
 800752c:	b928      	cbnz	r0, 800753a <__multadd+0x5e>
 800752e:	4602      	mov	r2, r0
 8007530:	21b5      	movs	r1, #181	; 0xb5
 8007532:	4b0d      	ldr	r3, [pc, #52]	; (8007568 <__multadd+0x8c>)
 8007534:	480d      	ldr	r0, [pc, #52]	; (800756c <__multadd+0x90>)
 8007536:	f000 fd11 	bl	8007f5c <__assert_func>
 800753a:	6922      	ldr	r2, [r4, #16]
 800753c:	f104 010c 	add.w	r1, r4, #12
 8007540:	3202      	adds	r2, #2
 8007542:	0092      	lsls	r2, r2, #2
 8007544:	300c      	adds	r0, #12
 8007546:	f7fe fc3b 	bl	8005dc0 <memcpy>
 800754a:	4621      	mov	r1, r4
 800754c:	4638      	mov	r0, r7
 800754e:	f7ff ffa3 	bl	8007498 <_Bfree>
 8007552:	462c      	mov	r4, r5
 8007554:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007558:	3601      	adds	r6, #1
 800755a:	f8c3 8014 	str.w	r8, [r3, #20]
 800755e:	6126      	str	r6, [r4, #16]
 8007560:	4620      	mov	r0, r4
 8007562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007566:	bf00      	nop
 8007568:	0800c41b 	.word	0x0800c41b
 800756c:	0800c42c 	.word	0x0800c42c

08007570 <__hi0bits>:
 8007570:	0c02      	lsrs	r2, r0, #16
 8007572:	0412      	lsls	r2, r2, #16
 8007574:	4603      	mov	r3, r0
 8007576:	b9ca      	cbnz	r2, 80075ac <__hi0bits+0x3c>
 8007578:	0403      	lsls	r3, r0, #16
 800757a:	2010      	movs	r0, #16
 800757c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007580:	bf04      	itt	eq
 8007582:	021b      	lsleq	r3, r3, #8
 8007584:	3008      	addeq	r0, #8
 8007586:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800758a:	bf04      	itt	eq
 800758c:	011b      	lsleq	r3, r3, #4
 800758e:	3004      	addeq	r0, #4
 8007590:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007594:	bf04      	itt	eq
 8007596:	009b      	lsleq	r3, r3, #2
 8007598:	3002      	addeq	r0, #2
 800759a:	2b00      	cmp	r3, #0
 800759c:	db05      	blt.n	80075aa <__hi0bits+0x3a>
 800759e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80075a2:	f100 0001 	add.w	r0, r0, #1
 80075a6:	bf08      	it	eq
 80075a8:	2020      	moveq	r0, #32
 80075aa:	4770      	bx	lr
 80075ac:	2000      	movs	r0, #0
 80075ae:	e7e5      	b.n	800757c <__hi0bits+0xc>

080075b0 <__lo0bits>:
 80075b0:	6803      	ldr	r3, [r0, #0]
 80075b2:	4602      	mov	r2, r0
 80075b4:	f013 0007 	ands.w	r0, r3, #7
 80075b8:	d00b      	beq.n	80075d2 <__lo0bits+0x22>
 80075ba:	07d9      	lsls	r1, r3, #31
 80075bc:	d422      	bmi.n	8007604 <__lo0bits+0x54>
 80075be:	0798      	lsls	r0, r3, #30
 80075c0:	bf49      	itett	mi
 80075c2:	085b      	lsrmi	r3, r3, #1
 80075c4:	089b      	lsrpl	r3, r3, #2
 80075c6:	2001      	movmi	r0, #1
 80075c8:	6013      	strmi	r3, [r2, #0]
 80075ca:	bf5c      	itt	pl
 80075cc:	2002      	movpl	r0, #2
 80075ce:	6013      	strpl	r3, [r2, #0]
 80075d0:	4770      	bx	lr
 80075d2:	b299      	uxth	r1, r3
 80075d4:	b909      	cbnz	r1, 80075da <__lo0bits+0x2a>
 80075d6:	2010      	movs	r0, #16
 80075d8:	0c1b      	lsrs	r3, r3, #16
 80075da:	f013 0fff 	tst.w	r3, #255	; 0xff
 80075de:	bf04      	itt	eq
 80075e0:	0a1b      	lsreq	r3, r3, #8
 80075e2:	3008      	addeq	r0, #8
 80075e4:	0719      	lsls	r1, r3, #28
 80075e6:	bf04      	itt	eq
 80075e8:	091b      	lsreq	r3, r3, #4
 80075ea:	3004      	addeq	r0, #4
 80075ec:	0799      	lsls	r1, r3, #30
 80075ee:	bf04      	itt	eq
 80075f0:	089b      	lsreq	r3, r3, #2
 80075f2:	3002      	addeq	r0, #2
 80075f4:	07d9      	lsls	r1, r3, #31
 80075f6:	d403      	bmi.n	8007600 <__lo0bits+0x50>
 80075f8:	085b      	lsrs	r3, r3, #1
 80075fa:	f100 0001 	add.w	r0, r0, #1
 80075fe:	d003      	beq.n	8007608 <__lo0bits+0x58>
 8007600:	6013      	str	r3, [r2, #0]
 8007602:	4770      	bx	lr
 8007604:	2000      	movs	r0, #0
 8007606:	4770      	bx	lr
 8007608:	2020      	movs	r0, #32
 800760a:	4770      	bx	lr

0800760c <__i2b>:
 800760c:	b510      	push	{r4, lr}
 800760e:	460c      	mov	r4, r1
 8007610:	2101      	movs	r1, #1
 8007612:	f7ff ff01 	bl	8007418 <_Balloc>
 8007616:	4602      	mov	r2, r0
 8007618:	b928      	cbnz	r0, 8007626 <__i2b+0x1a>
 800761a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800761e:	4b04      	ldr	r3, [pc, #16]	; (8007630 <__i2b+0x24>)
 8007620:	4804      	ldr	r0, [pc, #16]	; (8007634 <__i2b+0x28>)
 8007622:	f000 fc9b 	bl	8007f5c <__assert_func>
 8007626:	2301      	movs	r3, #1
 8007628:	6144      	str	r4, [r0, #20]
 800762a:	6103      	str	r3, [r0, #16]
 800762c:	bd10      	pop	{r4, pc}
 800762e:	bf00      	nop
 8007630:	0800c41b 	.word	0x0800c41b
 8007634:	0800c42c 	.word	0x0800c42c

08007638 <__multiply>:
 8007638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800763c:	4614      	mov	r4, r2
 800763e:	690a      	ldr	r2, [r1, #16]
 8007640:	6923      	ldr	r3, [r4, #16]
 8007642:	460d      	mov	r5, r1
 8007644:	429a      	cmp	r2, r3
 8007646:	bfbe      	ittt	lt
 8007648:	460b      	movlt	r3, r1
 800764a:	4625      	movlt	r5, r4
 800764c:	461c      	movlt	r4, r3
 800764e:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007652:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007656:	68ab      	ldr	r3, [r5, #8]
 8007658:	6869      	ldr	r1, [r5, #4]
 800765a:	eb0a 0709 	add.w	r7, sl, r9
 800765e:	42bb      	cmp	r3, r7
 8007660:	b085      	sub	sp, #20
 8007662:	bfb8      	it	lt
 8007664:	3101      	addlt	r1, #1
 8007666:	f7ff fed7 	bl	8007418 <_Balloc>
 800766a:	b930      	cbnz	r0, 800767a <__multiply+0x42>
 800766c:	4602      	mov	r2, r0
 800766e:	f240 115d 	movw	r1, #349	; 0x15d
 8007672:	4b41      	ldr	r3, [pc, #260]	; (8007778 <__multiply+0x140>)
 8007674:	4841      	ldr	r0, [pc, #260]	; (800777c <__multiply+0x144>)
 8007676:	f000 fc71 	bl	8007f5c <__assert_func>
 800767a:	f100 0614 	add.w	r6, r0, #20
 800767e:	4633      	mov	r3, r6
 8007680:	2200      	movs	r2, #0
 8007682:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007686:	4543      	cmp	r3, r8
 8007688:	d31e      	bcc.n	80076c8 <__multiply+0x90>
 800768a:	f105 0c14 	add.w	ip, r5, #20
 800768e:	f104 0314 	add.w	r3, r4, #20
 8007692:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007696:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800769a:	9202      	str	r2, [sp, #8]
 800769c:	ebac 0205 	sub.w	r2, ip, r5
 80076a0:	3a15      	subs	r2, #21
 80076a2:	f022 0203 	bic.w	r2, r2, #3
 80076a6:	3204      	adds	r2, #4
 80076a8:	f105 0115 	add.w	r1, r5, #21
 80076ac:	458c      	cmp	ip, r1
 80076ae:	bf38      	it	cc
 80076b0:	2204      	movcc	r2, #4
 80076b2:	9201      	str	r2, [sp, #4]
 80076b4:	9a02      	ldr	r2, [sp, #8]
 80076b6:	9303      	str	r3, [sp, #12]
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d808      	bhi.n	80076ce <__multiply+0x96>
 80076bc:	2f00      	cmp	r7, #0
 80076be:	dc55      	bgt.n	800776c <__multiply+0x134>
 80076c0:	6107      	str	r7, [r0, #16]
 80076c2:	b005      	add	sp, #20
 80076c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076c8:	f843 2b04 	str.w	r2, [r3], #4
 80076cc:	e7db      	b.n	8007686 <__multiply+0x4e>
 80076ce:	f8b3 a000 	ldrh.w	sl, [r3]
 80076d2:	f1ba 0f00 	cmp.w	sl, #0
 80076d6:	d020      	beq.n	800771a <__multiply+0xe2>
 80076d8:	46b1      	mov	r9, r6
 80076da:	2200      	movs	r2, #0
 80076dc:	f105 0e14 	add.w	lr, r5, #20
 80076e0:	f85e 4b04 	ldr.w	r4, [lr], #4
 80076e4:	f8d9 b000 	ldr.w	fp, [r9]
 80076e8:	b2a1      	uxth	r1, r4
 80076ea:	fa1f fb8b 	uxth.w	fp, fp
 80076ee:	fb0a b101 	mla	r1, sl, r1, fp
 80076f2:	4411      	add	r1, r2
 80076f4:	f8d9 2000 	ldr.w	r2, [r9]
 80076f8:	0c24      	lsrs	r4, r4, #16
 80076fa:	0c12      	lsrs	r2, r2, #16
 80076fc:	fb0a 2404 	mla	r4, sl, r4, r2
 8007700:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007704:	b289      	uxth	r1, r1
 8007706:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800770a:	45f4      	cmp	ip, lr
 800770c:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007710:	f849 1b04 	str.w	r1, [r9], #4
 8007714:	d8e4      	bhi.n	80076e0 <__multiply+0xa8>
 8007716:	9901      	ldr	r1, [sp, #4]
 8007718:	5072      	str	r2, [r6, r1]
 800771a:	9a03      	ldr	r2, [sp, #12]
 800771c:	3304      	adds	r3, #4
 800771e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007722:	f1b9 0f00 	cmp.w	r9, #0
 8007726:	d01f      	beq.n	8007768 <__multiply+0x130>
 8007728:	46b6      	mov	lr, r6
 800772a:	f04f 0a00 	mov.w	sl, #0
 800772e:	6834      	ldr	r4, [r6, #0]
 8007730:	f105 0114 	add.w	r1, r5, #20
 8007734:	880a      	ldrh	r2, [r1, #0]
 8007736:	f8be b002 	ldrh.w	fp, [lr, #2]
 800773a:	b2a4      	uxth	r4, r4
 800773c:	fb09 b202 	mla	r2, r9, r2, fp
 8007740:	4492      	add	sl, r2
 8007742:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007746:	f84e 4b04 	str.w	r4, [lr], #4
 800774a:	f851 4b04 	ldr.w	r4, [r1], #4
 800774e:	f8be 2000 	ldrh.w	r2, [lr]
 8007752:	0c24      	lsrs	r4, r4, #16
 8007754:	fb09 2404 	mla	r4, r9, r4, r2
 8007758:	458c      	cmp	ip, r1
 800775a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800775e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007762:	d8e7      	bhi.n	8007734 <__multiply+0xfc>
 8007764:	9a01      	ldr	r2, [sp, #4]
 8007766:	50b4      	str	r4, [r6, r2]
 8007768:	3604      	adds	r6, #4
 800776a:	e7a3      	b.n	80076b4 <__multiply+0x7c>
 800776c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007770:	2b00      	cmp	r3, #0
 8007772:	d1a5      	bne.n	80076c0 <__multiply+0x88>
 8007774:	3f01      	subs	r7, #1
 8007776:	e7a1      	b.n	80076bc <__multiply+0x84>
 8007778:	0800c41b 	.word	0x0800c41b
 800777c:	0800c42c 	.word	0x0800c42c

08007780 <__pow5mult>:
 8007780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007784:	4615      	mov	r5, r2
 8007786:	f012 0203 	ands.w	r2, r2, #3
 800778a:	4606      	mov	r6, r0
 800778c:	460f      	mov	r7, r1
 800778e:	d007      	beq.n	80077a0 <__pow5mult+0x20>
 8007790:	4c25      	ldr	r4, [pc, #148]	; (8007828 <__pow5mult+0xa8>)
 8007792:	3a01      	subs	r2, #1
 8007794:	2300      	movs	r3, #0
 8007796:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800779a:	f7ff fe9f 	bl	80074dc <__multadd>
 800779e:	4607      	mov	r7, r0
 80077a0:	10ad      	asrs	r5, r5, #2
 80077a2:	d03d      	beq.n	8007820 <__pow5mult+0xa0>
 80077a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80077a6:	b97c      	cbnz	r4, 80077c8 <__pow5mult+0x48>
 80077a8:	2010      	movs	r0, #16
 80077aa:	f7ff fe1f 	bl	80073ec <malloc>
 80077ae:	4602      	mov	r2, r0
 80077b0:	6270      	str	r0, [r6, #36]	; 0x24
 80077b2:	b928      	cbnz	r0, 80077c0 <__pow5mult+0x40>
 80077b4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80077b8:	4b1c      	ldr	r3, [pc, #112]	; (800782c <__pow5mult+0xac>)
 80077ba:	481d      	ldr	r0, [pc, #116]	; (8007830 <__pow5mult+0xb0>)
 80077bc:	f000 fbce 	bl	8007f5c <__assert_func>
 80077c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80077c4:	6004      	str	r4, [r0, #0]
 80077c6:	60c4      	str	r4, [r0, #12]
 80077c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80077cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80077d0:	b94c      	cbnz	r4, 80077e6 <__pow5mult+0x66>
 80077d2:	f240 2171 	movw	r1, #625	; 0x271
 80077d6:	4630      	mov	r0, r6
 80077d8:	f7ff ff18 	bl	800760c <__i2b>
 80077dc:	2300      	movs	r3, #0
 80077de:	4604      	mov	r4, r0
 80077e0:	f8c8 0008 	str.w	r0, [r8, #8]
 80077e4:	6003      	str	r3, [r0, #0]
 80077e6:	f04f 0900 	mov.w	r9, #0
 80077ea:	07eb      	lsls	r3, r5, #31
 80077ec:	d50a      	bpl.n	8007804 <__pow5mult+0x84>
 80077ee:	4639      	mov	r1, r7
 80077f0:	4622      	mov	r2, r4
 80077f2:	4630      	mov	r0, r6
 80077f4:	f7ff ff20 	bl	8007638 <__multiply>
 80077f8:	4680      	mov	r8, r0
 80077fa:	4639      	mov	r1, r7
 80077fc:	4630      	mov	r0, r6
 80077fe:	f7ff fe4b 	bl	8007498 <_Bfree>
 8007802:	4647      	mov	r7, r8
 8007804:	106d      	asrs	r5, r5, #1
 8007806:	d00b      	beq.n	8007820 <__pow5mult+0xa0>
 8007808:	6820      	ldr	r0, [r4, #0]
 800780a:	b938      	cbnz	r0, 800781c <__pow5mult+0x9c>
 800780c:	4622      	mov	r2, r4
 800780e:	4621      	mov	r1, r4
 8007810:	4630      	mov	r0, r6
 8007812:	f7ff ff11 	bl	8007638 <__multiply>
 8007816:	6020      	str	r0, [r4, #0]
 8007818:	f8c0 9000 	str.w	r9, [r0]
 800781c:	4604      	mov	r4, r0
 800781e:	e7e4      	b.n	80077ea <__pow5mult+0x6a>
 8007820:	4638      	mov	r0, r7
 8007822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007826:	bf00      	nop
 8007828:	0800c580 	.word	0x0800c580
 800782c:	0800c3a5 	.word	0x0800c3a5
 8007830:	0800c42c 	.word	0x0800c42c

08007834 <__lshift>:
 8007834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007838:	460c      	mov	r4, r1
 800783a:	4607      	mov	r7, r0
 800783c:	4691      	mov	r9, r2
 800783e:	6923      	ldr	r3, [r4, #16]
 8007840:	6849      	ldr	r1, [r1, #4]
 8007842:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007846:	68a3      	ldr	r3, [r4, #8]
 8007848:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800784c:	f108 0601 	add.w	r6, r8, #1
 8007850:	42b3      	cmp	r3, r6
 8007852:	db0b      	blt.n	800786c <__lshift+0x38>
 8007854:	4638      	mov	r0, r7
 8007856:	f7ff fddf 	bl	8007418 <_Balloc>
 800785a:	4605      	mov	r5, r0
 800785c:	b948      	cbnz	r0, 8007872 <__lshift+0x3e>
 800785e:	4602      	mov	r2, r0
 8007860:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007864:	4b27      	ldr	r3, [pc, #156]	; (8007904 <__lshift+0xd0>)
 8007866:	4828      	ldr	r0, [pc, #160]	; (8007908 <__lshift+0xd4>)
 8007868:	f000 fb78 	bl	8007f5c <__assert_func>
 800786c:	3101      	adds	r1, #1
 800786e:	005b      	lsls	r3, r3, #1
 8007870:	e7ee      	b.n	8007850 <__lshift+0x1c>
 8007872:	2300      	movs	r3, #0
 8007874:	f100 0114 	add.w	r1, r0, #20
 8007878:	f100 0210 	add.w	r2, r0, #16
 800787c:	4618      	mov	r0, r3
 800787e:	4553      	cmp	r3, sl
 8007880:	db33      	blt.n	80078ea <__lshift+0xb6>
 8007882:	6920      	ldr	r0, [r4, #16]
 8007884:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007888:	f104 0314 	add.w	r3, r4, #20
 800788c:	f019 091f 	ands.w	r9, r9, #31
 8007890:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007894:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007898:	d02b      	beq.n	80078f2 <__lshift+0xbe>
 800789a:	468a      	mov	sl, r1
 800789c:	2200      	movs	r2, #0
 800789e:	f1c9 0e20 	rsb	lr, r9, #32
 80078a2:	6818      	ldr	r0, [r3, #0]
 80078a4:	fa00 f009 	lsl.w	r0, r0, r9
 80078a8:	4302      	orrs	r2, r0
 80078aa:	f84a 2b04 	str.w	r2, [sl], #4
 80078ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80078b2:	459c      	cmp	ip, r3
 80078b4:	fa22 f20e 	lsr.w	r2, r2, lr
 80078b8:	d8f3      	bhi.n	80078a2 <__lshift+0x6e>
 80078ba:	ebac 0304 	sub.w	r3, ip, r4
 80078be:	3b15      	subs	r3, #21
 80078c0:	f023 0303 	bic.w	r3, r3, #3
 80078c4:	3304      	adds	r3, #4
 80078c6:	f104 0015 	add.w	r0, r4, #21
 80078ca:	4584      	cmp	ip, r0
 80078cc:	bf38      	it	cc
 80078ce:	2304      	movcc	r3, #4
 80078d0:	50ca      	str	r2, [r1, r3]
 80078d2:	b10a      	cbz	r2, 80078d8 <__lshift+0xa4>
 80078d4:	f108 0602 	add.w	r6, r8, #2
 80078d8:	3e01      	subs	r6, #1
 80078da:	4638      	mov	r0, r7
 80078dc:	4621      	mov	r1, r4
 80078de:	612e      	str	r6, [r5, #16]
 80078e0:	f7ff fdda 	bl	8007498 <_Bfree>
 80078e4:	4628      	mov	r0, r5
 80078e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80078ee:	3301      	adds	r3, #1
 80078f0:	e7c5      	b.n	800787e <__lshift+0x4a>
 80078f2:	3904      	subs	r1, #4
 80078f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80078f8:	459c      	cmp	ip, r3
 80078fa:	f841 2f04 	str.w	r2, [r1, #4]!
 80078fe:	d8f9      	bhi.n	80078f4 <__lshift+0xc0>
 8007900:	e7ea      	b.n	80078d8 <__lshift+0xa4>
 8007902:	bf00      	nop
 8007904:	0800c41b 	.word	0x0800c41b
 8007908:	0800c42c 	.word	0x0800c42c

0800790c <__mcmp>:
 800790c:	4603      	mov	r3, r0
 800790e:	690a      	ldr	r2, [r1, #16]
 8007910:	6900      	ldr	r0, [r0, #16]
 8007912:	b530      	push	{r4, r5, lr}
 8007914:	1a80      	subs	r0, r0, r2
 8007916:	d10d      	bne.n	8007934 <__mcmp+0x28>
 8007918:	3314      	adds	r3, #20
 800791a:	3114      	adds	r1, #20
 800791c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007920:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007924:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007928:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800792c:	4295      	cmp	r5, r2
 800792e:	d002      	beq.n	8007936 <__mcmp+0x2a>
 8007930:	d304      	bcc.n	800793c <__mcmp+0x30>
 8007932:	2001      	movs	r0, #1
 8007934:	bd30      	pop	{r4, r5, pc}
 8007936:	42a3      	cmp	r3, r4
 8007938:	d3f4      	bcc.n	8007924 <__mcmp+0x18>
 800793a:	e7fb      	b.n	8007934 <__mcmp+0x28>
 800793c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007940:	e7f8      	b.n	8007934 <__mcmp+0x28>
	...

08007944 <__mdiff>:
 8007944:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007948:	460c      	mov	r4, r1
 800794a:	4606      	mov	r6, r0
 800794c:	4611      	mov	r1, r2
 800794e:	4620      	mov	r0, r4
 8007950:	4692      	mov	sl, r2
 8007952:	f7ff ffdb 	bl	800790c <__mcmp>
 8007956:	1e05      	subs	r5, r0, #0
 8007958:	d111      	bne.n	800797e <__mdiff+0x3a>
 800795a:	4629      	mov	r1, r5
 800795c:	4630      	mov	r0, r6
 800795e:	f7ff fd5b 	bl	8007418 <_Balloc>
 8007962:	4602      	mov	r2, r0
 8007964:	b928      	cbnz	r0, 8007972 <__mdiff+0x2e>
 8007966:	f240 2132 	movw	r1, #562	; 0x232
 800796a:	4b3c      	ldr	r3, [pc, #240]	; (8007a5c <__mdiff+0x118>)
 800796c:	483c      	ldr	r0, [pc, #240]	; (8007a60 <__mdiff+0x11c>)
 800796e:	f000 faf5 	bl	8007f5c <__assert_func>
 8007972:	2301      	movs	r3, #1
 8007974:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007978:	4610      	mov	r0, r2
 800797a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800797e:	bfa4      	itt	ge
 8007980:	4653      	movge	r3, sl
 8007982:	46a2      	movge	sl, r4
 8007984:	4630      	mov	r0, r6
 8007986:	f8da 1004 	ldr.w	r1, [sl, #4]
 800798a:	bfa6      	itte	ge
 800798c:	461c      	movge	r4, r3
 800798e:	2500      	movge	r5, #0
 8007990:	2501      	movlt	r5, #1
 8007992:	f7ff fd41 	bl	8007418 <_Balloc>
 8007996:	4602      	mov	r2, r0
 8007998:	b918      	cbnz	r0, 80079a2 <__mdiff+0x5e>
 800799a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800799e:	4b2f      	ldr	r3, [pc, #188]	; (8007a5c <__mdiff+0x118>)
 80079a0:	e7e4      	b.n	800796c <__mdiff+0x28>
 80079a2:	f100 0814 	add.w	r8, r0, #20
 80079a6:	f8da 7010 	ldr.w	r7, [sl, #16]
 80079aa:	60c5      	str	r5, [r0, #12]
 80079ac:	f04f 0c00 	mov.w	ip, #0
 80079b0:	f10a 0514 	add.w	r5, sl, #20
 80079b4:	f10a 0010 	add.w	r0, sl, #16
 80079b8:	46c2      	mov	sl, r8
 80079ba:	6926      	ldr	r6, [r4, #16]
 80079bc:	f104 0914 	add.w	r9, r4, #20
 80079c0:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 80079c4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80079c8:	f850 bf04 	ldr.w	fp, [r0, #4]!
 80079cc:	f859 3b04 	ldr.w	r3, [r9], #4
 80079d0:	fa1f f18b 	uxth.w	r1, fp
 80079d4:	4461      	add	r1, ip
 80079d6:	fa1f fc83 	uxth.w	ip, r3
 80079da:	0c1b      	lsrs	r3, r3, #16
 80079dc:	eba1 010c 	sub.w	r1, r1, ip
 80079e0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80079e4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80079e8:	b289      	uxth	r1, r1
 80079ea:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80079ee:	454e      	cmp	r6, r9
 80079f0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80079f4:	f84a 3b04 	str.w	r3, [sl], #4
 80079f8:	d8e6      	bhi.n	80079c8 <__mdiff+0x84>
 80079fa:	1b33      	subs	r3, r6, r4
 80079fc:	3b15      	subs	r3, #21
 80079fe:	f023 0303 	bic.w	r3, r3, #3
 8007a02:	3415      	adds	r4, #21
 8007a04:	3304      	adds	r3, #4
 8007a06:	42a6      	cmp	r6, r4
 8007a08:	bf38      	it	cc
 8007a0a:	2304      	movcc	r3, #4
 8007a0c:	441d      	add	r5, r3
 8007a0e:	4443      	add	r3, r8
 8007a10:	461e      	mov	r6, r3
 8007a12:	462c      	mov	r4, r5
 8007a14:	4574      	cmp	r4, lr
 8007a16:	d30e      	bcc.n	8007a36 <__mdiff+0xf2>
 8007a18:	f10e 0103 	add.w	r1, lr, #3
 8007a1c:	1b49      	subs	r1, r1, r5
 8007a1e:	f021 0103 	bic.w	r1, r1, #3
 8007a22:	3d03      	subs	r5, #3
 8007a24:	45ae      	cmp	lr, r5
 8007a26:	bf38      	it	cc
 8007a28:	2100      	movcc	r1, #0
 8007a2a:	4419      	add	r1, r3
 8007a2c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007a30:	b18b      	cbz	r3, 8007a56 <__mdiff+0x112>
 8007a32:	6117      	str	r7, [r2, #16]
 8007a34:	e7a0      	b.n	8007978 <__mdiff+0x34>
 8007a36:	f854 8b04 	ldr.w	r8, [r4], #4
 8007a3a:	fa1f f188 	uxth.w	r1, r8
 8007a3e:	4461      	add	r1, ip
 8007a40:	1408      	asrs	r0, r1, #16
 8007a42:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8007a46:	b289      	uxth	r1, r1
 8007a48:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007a4c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007a50:	f846 1b04 	str.w	r1, [r6], #4
 8007a54:	e7de      	b.n	8007a14 <__mdiff+0xd0>
 8007a56:	3f01      	subs	r7, #1
 8007a58:	e7e8      	b.n	8007a2c <__mdiff+0xe8>
 8007a5a:	bf00      	nop
 8007a5c:	0800c41b 	.word	0x0800c41b
 8007a60:	0800c42c 	.word	0x0800c42c

08007a64 <__d2b>:
 8007a64:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007a68:	2101      	movs	r1, #1
 8007a6a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007a6e:	4690      	mov	r8, r2
 8007a70:	461d      	mov	r5, r3
 8007a72:	f7ff fcd1 	bl	8007418 <_Balloc>
 8007a76:	4604      	mov	r4, r0
 8007a78:	b930      	cbnz	r0, 8007a88 <__d2b+0x24>
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	f240 310a 	movw	r1, #778	; 0x30a
 8007a80:	4b24      	ldr	r3, [pc, #144]	; (8007b14 <__d2b+0xb0>)
 8007a82:	4825      	ldr	r0, [pc, #148]	; (8007b18 <__d2b+0xb4>)
 8007a84:	f000 fa6a 	bl	8007f5c <__assert_func>
 8007a88:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007a8c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007a90:	bb2d      	cbnz	r5, 8007ade <__d2b+0x7a>
 8007a92:	9301      	str	r3, [sp, #4]
 8007a94:	f1b8 0300 	subs.w	r3, r8, #0
 8007a98:	d026      	beq.n	8007ae8 <__d2b+0x84>
 8007a9a:	4668      	mov	r0, sp
 8007a9c:	9300      	str	r3, [sp, #0]
 8007a9e:	f7ff fd87 	bl	80075b0 <__lo0bits>
 8007aa2:	9900      	ldr	r1, [sp, #0]
 8007aa4:	b1f0      	cbz	r0, 8007ae4 <__d2b+0x80>
 8007aa6:	9a01      	ldr	r2, [sp, #4]
 8007aa8:	f1c0 0320 	rsb	r3, r0, #32
 8007aac:	fa02 f303 	lsl.w	r3, r2, r3
 8007ab0:	430b      	orrs	r3, r1
 8007ab2:	40c2      	lsrs	r2, r0
 8007ab4:	6163      	str	r3, [r4, #20]
 8007ab6:	9201      	str	r2, [sp, #4]
 8007ab8:	9b01      	ldr	r3, [sp, #4]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	bf14      	ite	ne
 8007abe:	2102      	movne	r1, #2
 8007ac0:	2101      	moveq	r1, #1
 8007ac2:	61a3      	str	r3, [r4, #24]
 8007ac4:	6121      	str	r1, [r4, #16]
 8007ac6:	b1c5      	cbz	r5, 8007afa <__d2b+0x96>
 8007ac8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007acc:	4405      	add	r5, r0
 8007ace:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007ad2:	603d      	str	r5, [r7, #0]
 8007ad4:	6030      	str	r0, [r6, #0]
 8007ad6:	4620      	mov	r0, r4
 8007ad8:	b002      	add	sp, #8
 8007ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ade:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ae2:	e7d6      	b.n	8007a92 <__d2b+0x2e>
 8007ae4:	6161      	str	r1, [r4, #20]
 8007ae6:	e7e7      	b.n	8007ab8 <__d2b+0x54>
 8007ae8:	a801      	add	r0, sp, #4
 8007aea:	f7ff fd61 	bl	80075b0 <__lo0bits>
 8007aee:	2101      	movs	r1, #1
 8007af0:	9b01      	ldr	r3, [sp, #4]
 8007af2:	6121      	str	r1, [r4, #16]
 8007af4:	6163      	str	r3, [r4, #20]
 8007af6:	3020      	adds	r0, #32
 8007af8:	e7e5      	b.n	8007ac6 <__d2b+0x62>
 8007afa:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007afe:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007b02:	6038      	str	r0, [r7, #0]
 8007b04:	6918      	ldr	r0, [r3, #16]
 8007b06:	f7ff fd33 	bl	8007570 <__hi0bits>
 8007b0a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007b0e:	6031      	str	r1, [r6, #0]
 8007b10:	e7e1      	b.n	8007ad6 <__d2b+0x72>
 8007b12:	bf00      	nop
 8007b14:	0800c41b 	.word	0x0800c41b
 8007b18:	0800c42c 	.word	0x0800c42c

08007b1c <_calloc_r>:
 8007b1c:	b538      	push	{r3, r4, r5, lr}
 8007b1e:	fb02 f501 	mul.w	r5, r2, r1
 8007b22:	4629      	mov	r1, r5
 8007b24:	f000 f854 	bl	8007bd0 <_malloc_r>
 8007b28:	4604      	mov	r4, r0
 8007b2a:	b118      	cbz	r0, 8007b34 <_calloc_r+0x18>
 8007b2c:	462a      	mov	r2, r5
 8007b2e:	2100      	movs	r1, #0
 8007b30:	f7fe f954 	bl	8005ddc <memset>
 8007b34:	4620      	mov	r0, r4
 8007b36:	bd38      	pop	{r3, r4, r5, pc}

08007b38 <_free_r>:
 8007b38:	b538      	push	{r3, r4, r5, lr}
 8007b3a:	4605      	mov	r5, r0
 8007b3c:	2900      	cmp	r1, #0
 8007b3e:	d043      	beq.n	8007bc8 <_free_r+0x90>
 8007b40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b44:	1f0c      	subs	r4, r1, #4
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	bfb8      	it	lt
 8007b4a:	18e4      	addlt	r4, r4, r3
 8007b4c:	f000 fa62 	bl	8008014 <__malloc_lock>
 8007b50:	4a1e      	ldr	r2, [pc, #120]	; (8007bcc <_free_r+0x94>)
 8007b52:	6813      	ldr	r3, [r2, #0]
 8007b54:	4610      	mov	r0, r2
 8007b56:	b933      	cbnz	r3, 8007b66 <_free_r+0x2e>
 8007b58:	6063      	str	r3, [r4, #4]
 8007b5a:	6014      	str	r4, [r2, #0]
 8007b5c:	4628      	mov	r0, r5
 8007b5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b62:	f000 ba5d 	b.w	8008020 <__malloc_unlock>
 8007b66:	42a3      	cmp	r3, r4
 8007b68:	d90a      	bls.n	8007b80 <_free_r+0x48>
 8007b6a:	6821      	ldr	r1, [r4, #0]
 8007b6c:	1862      	adds	r2, r4, r1
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	bf01      	itttt	eq
 8007b72:	681a      	ldreq	r2, [r3, #0]
 8007b74:	685b      	ldreq	r3, [r3, #4]
 8007b76:	1852      	addeq	r2, r2, r1
 8007b78:	6022      	streq	r2, [r4, #0]
 8007b7a:	6063      	str	r3, [r4, #4]
 8007b7c:	6004      	str	r4, [r0, #0]
 8007b7e:	e7ed      	b.n	8007b5c <_free_r+0x24>
 8007b80:	461a      	mov	r2, r3
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	b10b      	cbz	r3, 8007b8a <_free_r+0x52>
 8007b86:	42a3      	cmp	r3, r4
 8007b88:	d9fa      	bls.n	8007b80 <_free_r+0x48>
 8007b8a:	6811      	ldr	r1, [r2, #0]
 8007b8c:	1850      	adds	r0, r2, r1
 8007b8e:	42a0      	cmp	r0, r4
 8007b90:	d10b      	bne.n	8007baa <_free_r+0x72>
 8007b92:	6820      	ldr	r0, [r4, #0]
 8007b94:	4401      	add	r1, r0
 8007b96:	1850      	adds	r0, r2, r1
 8007b98:	4283      	cmp	r3, r0
 8007b9a:	6011      	str	r1, [r2, #0]
 8007b9c:	d1de      	bne.n	8007b5c <_free_r+0x24>
 8007b9e:	6818      	ldr	r0, [r3, #0]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	4401      	add	r1, r0
 8007ba4:	6011      	str	r1, [r2, #0]
 8007ba6:	6053      	str	r3, [r2, #4]
 8007ba8:	e7d8      	b.n	8007b5c <_free_r+0x24>
 8007baa:	d902      	bls.n	8007bb2 <_free_r+0x7a>
 8007bac:	230c      	movs	r3, #12
 8007bae:	602b      	str	r3, [r5, #0]
 8007bb0:	e7d4      	b.n	8007b5c <_free_r+0x24>
 8007bb2:	6820      	ldr	r0, [r4, #0]
 8007bb4:	1821      	adds	r1, r4, r0
 8007bb6:	428b      	cmp	r3, r1
 8007bb8:	bf01      	itttt	eq
 8007bba:	6819      	ldreq	r1, [r3, #0]
 8007bbc:	685b      	ldreq	r3, [r3, #4]
 8007bbe:	1809      	addeq	r1, r1, r0
 8007bc0:	6021      	streq	r1, [r4, #0]
 8007bc2:	6063      	str	r3, [r4, #4]
 8007bc4:	6054      	str	r4, [r2, #4]
 8007bc6:	e7c9      	b.n	8007b5c <_free_r+0x24>
 8007bc8:	bd38      	pop	{r3, r4, r5, pc}
 8007bca:	bf00      	nop
 8007bcc:	20000700 	.word	0x20000700

08007bd0 <_malloc_r>:
 8007bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bd2:	1ccd      	adds	r5, r1, #3
 8007bd4:	f025 0503 	bic.w	r5, r5, #3
 8007bd8:	3508      	adds	r5, #8
 8007bda:	2d0c      	cmp	r5, #12
 8007bdc:	bf38      	it	cc
 8007bde:	250c      	movcc	r5, #12
 8007be0:	2d00      	cmp	r5, #0
 8007be2:	4606      	mov	r6, r0
 8007be4:	db01      	blt.n	8007bea <_malloc_r+0x1a>
 8007be6:	42a9      	cmp	r1, r5
 8007be8:	d903      	bls.n	8007bf2 <_malloc_r+0x22>
 8007bea:	230c      	movs	r3, #12
 8007bec:	6033      	str	r3, [r6, #0]
 8007bee:	2000      	movs	r0, #0
 8007bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bf2:	f000 fa0f 	bl	8008014 <__malloc_lock>
 8007bf6:	4921      	ldr	r1, [pc, #132]	; (8007c7c <_malloc_r+0xac>)
 8007bf8:	680a      	ldr	r2, [r1, #0]
 8007bfa:	4614      	mov	r4, r2
 8007bfc:	b99c      	cbnz	r4, 8007c26 <_malloc_r+0x56>
 8007bfe:	4f20      	ldr	r7, [pc, #128]	; (8007c80 <_malloc_r+0xb0>)
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	b923      	cbnz	r3, 8007c0e <_malloc_r+0x3e>
 8007c04:	4621      	mov	r1, r4
 8007c06:	4630      	mov	r0, r6
 8007c08:	f000 f998 	bl	8007f3c <_sbrk_r>
 8007c0c:	6038      	str	r0, [r7, #0]
 8007c0e:	4629      	mov	r1, r5
 8007c10:	4630      	mov	r0, r6
 8007c12:	f000 f993 	bl	8007f3c <_sbrk_r>
 8007c16:	1c43      	adds	r3, r0, #1
 8007c18:	d123      	bne.n	8007c62 <_malloc_r+0x92>
 8007c1a:	230c      	movs	r3, #12
 8007c1c:	4630      	mov	r0, r6
 8007c1e:	6033      	str	r3, [r6, #0]
 8007c20:	f000 f9fe 	bl	8008020 <__malloc_unlock>
 8007c24:	e7e3      	b.n	8007bee <_malloc_r+0x1e>
 8007c26:	6823      	ldr	r3, [r4, #0]
 8007c28:	1b5b      	subs	r3, r3, r5
 8007c2a:	d417      	bmi.n	8007c5c <_malloc_r+0x8c>
 8007c2c:	2b0b      	cmp	r3, #11
 8007c2e:	d903      	bls.n	8007c38 <_malloc_r+0x68>
 8007c30:	6023      	str	r3, [r4, #0]
 8007c32:	441c      	add	r4, r3
 8007c34:	6025      	str	r5, [r4, #0]
 8007c36:	e004      	b.n	8007c42 <_malloc_r+0x72>
 8007c38:	6863      	ldr	r3, [r4, #4]
 8007c3a:	42a2      	cmp	r2, r4
 8007c3c:	bf0c      	ite	eq
 8007c3e:	600b      	streq	r3, [r1, #0]
 8007c40:	6053      	strne	r3, [r2, #4]
 8007c42:	4630      	mov	r0, r6
 8007c44:	f000 f9ec 	bl	8008020 <__malloc_unlock>
 8007c48:	f104 000b 	add.w	r0, r4, #11
 8007c4c:	1d23      	adds	r3, r4, #4
 8007c4e:	f020 0007 	bic.w	r0, r0, #7
 8007c52:	1ac2      	subs	r2, r0, r3
 8007c54:	d0cc      	beq.n	8007bf0 <_malloc_r+0x20>
 8007c56:	1a1b      	subs	r3, r3, r0
 8007c58:	50a3      	str	r3, [r4, r2]
 8007c5a:	e7c9      	b.n	8007bf0 <_malloc_r+0x20>
 8007c5c:	4622      	mov	r2, r4
 8007c5e:	6864      	ldr	r4, [r4, #4]
 8007c60:	e7cc      	b.n	8007bfc <_malloc_r+0x2c>
 8007c62:	1cc4      	adds	r4, r0, #3
 8007c64:	f024 0403 	bic.w	r4, r4, #3
 8007c68:	42a0      	cmp	r0, r4
 8007c6a:	d0e3      	beq.n	8007c34 <_malloc_r+0x64>
 8007c6c:	1a21      	subs	r1, r4, r0
 8007c6e:	4630      	mov	r0, r6
 8007c70:	f000 f964 	bl	8007f3c <_sbrk_r>
 8007c74:	3001      	adds	r0, #1
 8007c76:	d1dd      	bne.n	8007c34 <_malloc_r+0x64>
 8007c78:	e7cf      	b.n	8007c1a <_malloc_r+0x4a>
 8007c7a:	bf00      	nop
 8007c7c:	20000700 	.word	0x20000700
 8007c80:	20000704 	.word	0x20000704

08007c84 <__ssputs_r>:
 8007c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c88:	688e      	ldr	r6, [r1, #8]
 8007c8a:	4682      	mov	sl, r0
 8007c8c:	429e      	cmp	r6, r3
 8007c8e:	460c      	mov	r4, r1
 8007c90:	4690      	mov	r8, r2
 8007c92:	461f      	mov	r7, r3
 8007c94:	d838      	bhi.n	8007d08 <__ssputs_r+0x84>
 8007c96:	898a      	ldrh	r2, [r1, #12]
 8007c98:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007c9c:	d032      	beq.n	8007d04 <__ssputs_r+0x80>
 8007c9e:	6825      	ldr	r5, [r4, #0]
 8007ca0:	6909      	ldr	r1, [r1, #16]
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	eba5 0901 	sub.w	r9, r5, r1
 8007ca8:	6965      	ldr	r5, [r4, #20]
 8007caa:	444b      	add	r3, r9
 8007cac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007cb0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007cb4:	106d      	asrs	r5, r5, #1
 8007cb6:	429d      	cmp	r5, r3
 8007cb8:	bf38      	it	cc
 8007cba:	461d      	movcc	r5, r3
 8007cbc:	0553      	lsls	r3, r2, #21
 8007cbe:	d531      	bpl.n	8007d24 <__ssputs_r+0xa0>
 8007cc0:	4629      	mov	r1, r5
 8007cc2:	f7ff ff85 	bl	8007bd0 <_malloc_r>
 8007cc6:	4606      	mov	r6, r0
 8007cc8:	b950      	cbnz	r0, 8007ce0 <__ssputs_r+0x5c>
 8007cca:	230c      	movs	r3, #12
 8007ccc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007cd0:	f8ca 3000 	str.w	r3, [sl]
 8007cd4:	89a3      	ldrh	r3, [r4, #12]
 8007cd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cda:	81a3      	strh	r3, [r4, #12]
 8007cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ce0:	464a      	mov	r2, r9
 8007ce2:	6921      	ldr	r1, [r4, #16]
 8007ce4:	f7fe f86c 	bl	8005dc0 <memcpy>
 8007ce8:	89a3      	ldrh	r3, [r4, #12]
 8007cea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007cee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cf2:	81a3      	strh	r3, [r4, #12]
 8007cf4:	6126      	str	r6, [r4, #16]
 8007cf6:	444e      	add	r6, r9
 8007cf8:	6026      	str	r6, [r4, #0]
 8007cfa:	463e      	mov	r6, r7
 8007cfc:	6165      	str	r5, [r4, #20]
 8007cfe:	eba5 0509 	sub.w	r5, r5, r9
 8007d02:	60a5      	str	r5, [r4, #8]
 8007d04:	42be      	cmp	r6, r7
 8007d06:	d900      	bls.n	8007d0a <__ssputs_r+0x86>
 8007d08:	463e      	mov	r6, r7
 8007d0a:	4632      	mov	r2, r6
 8007d0c:	4641      	mov	r1, r8
 8007d0e:	6820      	ldr	r0, [r4, #0]
 8007d10:	f000 f966 	bl	8007fe0 <memmove>
 8007d14:	68a3      	ldr	r3, [r4, #8]
 8007d16:	6822      	ldr	r2, [r4, #0]
 8007d18:	1b9b      	subs	r3, r3, r6
 8007d1a:	4432      	add	r2, r6
 8007d1c:	2000      	movs	r0, #0
 8007d1e:	60a3      	str	r3, [r4, #8]
 8007d20:	6022      	str	r2, [r4, #0]
 8007d22:	e7db      	b.n	8007cdc <__ssputs_r+0x58>
 8007d24:	462a      	mov	r2, r5
 8007d26:	f000 f981 	bl	800802c <_realloc_r>
 8007d2a:	4606      	mov	r6, r0
 8007d2c:	2800      	cmp	r0, #0
 8007d2e:	d1e1      	bne.n	8007cf4 <__ssputs_r+0x70>
 8007d30:	4650      	mov	r0, sl
 8007d32:	6921      	ldr	r1, [r4, #16]
 8007d34:	f7ff ff00 	bl	8007b38 <_free_r>
 8007d38:	e7c7      	b.n	8007cca <__ssputs_r+0x46>
	...

08007d3c <_svfiprintf_r>:
 8007d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d40:	4698      	mov	r8, r3
 8007d42:	898b      	ldrh	r3, [r1, #12]
 8007d44:	4607      	mov	r7, r0
 8007d46:	061b      	lsls	r3, r3, #24
 8007d48:	460d      	mov	r5, r1
 8007d4a:	4614      	mov	r4, r2
 8007d4c:	b09d      	sub	sp, #116	; 0x74
 8007d4e:	d50e      	bpl.n	8007d6e <_svfiprintf_r+0x32>
 8007d50:	690b      	ldr	r3, [r1, #16]
 8007d52:	b963      	cbnz	r3, 8007d6e <_svfiprintf_r+0x32>
 8007d54:	2140      	movs	r1, #64	; 0x40
 8007d56:	f7ff ff3b 	bl	8007bd0 <_malloc_r>
 8007d5a:	6028      	str	r0, [r5, #0]
 8007d5c:	6128      	str	r0, [r5, #16]
 8007d5e:	b920      	cbnz	r0, 8007d6a <_svfiprintf_r+0x2e>
 8007d60:	230c      	movs	r3, #12
 8007d62:	603b      	str	r3, [r7, #0]
 8007d64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d68:	e0d1      	b.n	8007f0e <_svfiprintf_r+0x1d2>
 8007d6a:	2340      	movs	r3, #64	; 0x40
 8007d6c:	616b      	str	r3, [r5, #20]
 8007d6e:	2300      	movs	r3, #0
 8007d70:	9309      	str	r3, [sp, #36]	; 0x24
 8007d72:	2320      	movs	r3, #32
 8007d74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d78:	2330      	movs	r3, #48	; 0x30
 8007d7a:	f04f 0901 	mov.w	r9, #1
 8007d7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d82:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007f28 <_svfiprintf_r+0x1ec>
 8007d86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d8a:	4623      	mov	r3, r4
 8007d8c:	469a      	mov	sl, r3
 8007d8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d92:	b10a      	cbz	r2, 8007d98 <_svfiprintf_r+0x5c>
 8007d94:	2a25      	cmp	r2, #37	; 0x25
 8007d96:	d1f9      	bne.n	8007d8c <_svfiprintf_r+0x50>
 8007d98:	ebba 0b04 	subs.w	fp, sl, r4
 8007d9c:	d00b      	beq.n	8007db6 <_svfiprintf_r+0x7a>
 8007d9e:	465b      	mov	r3, fp
 8007da0:	4622      	mov	r2, r4
 8007da2:	4629      	mov	r1, r5
 8007da4:	4638      	mov	r0, r7
 8007da6:	f7ff ff6d 	bl	8007c84 <__ssputs_r>
 8007daa:	3001      	adds	r0, #1
 8007dac:	f000 80aa 	beq.w	8007f04 <_svfiprintf_r+0x1c8>
 8007db0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007db2:	445a      	add	r2, fp
 8007db4:	9209      	str	r2, [sp, #36]	; 0x24
 8007db6:	f89a 3000 	ldrb.w	r3, [sl]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	f000 80a2 	beq.w	8007f04 <_svfiprintf_r+0x1c8>
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007dc6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007dca:	f10a 0a01 	add.w	sl, sl, #1
 8007dce:	9304      	str	r3, [sp, #16]
 8007dd0:	9307      	str	r3, [sp, #28]
 8007dd2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007dd6:	931a      	str	r3, [sp, #104]	; 0x68
 8007dd8:	4654      	mov	r4, sl
 8007dda:	2205      	movs	r2, #5
 8007ddc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007de0:	4851      	ldr	r0, [pc, #324]	; (8007f28 <_svfiprintf_r+0x1ec>)
 8007de2:	f7ff fb0b 	bl	80073fc <memchr>
 8007de6:	9a04      	ldr	r2, [sp, #16]
 8007de8:	b9d8      	cbnz	r0, 8007e22 <_svfiprintf_r+0xe6>
 8007dea:	06d0      	lsls	r0, r2, #27
 8007dec:	bf44      	itt	mi
 8007dee:	2320      	movmi	r3, #32
 8007df0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007df4:	0711      	lsls	r1, r2, #28
 8007df6:	bf44      	itt	mi
 8007df8:	232b      	movmi	r3, #43	; 0x2b
 8007dfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007dfe:	f89a 3000 	ldrb.w	r3, [sl]
 8007e02:	2b2a      	cmp	r3, #42	; 0x2a
 8007e04:	d015      	beq.n	8007e32 <_svfiprintf_r+0xf6>
 8007e06:	4654      	mov	r4, sl
 8007e08:	2000      	movs	r0, #0
 8007e0a:	f04f 0c0a 	mov.w	ip, #10
 8007e0e:	9a07      	ldr	r2, [sp, #28]
 8007e10:	4621      	mov	r1, r4
 8007e12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e16:	3b30      	subs	r3, #48	; 0x30
 8007e18:	2b09      	cmp	r3, #9
 8007e1a:	d94e      	bls.n	8007eba <_svfiprintf_r+0x17e>
 8007e1c:	b1b0      	cbz	r0, 8007e4c <_svfiprintf_r+0x110>
 8007e1e:	9207      	str	r2, [sp, #28]
 8007e20:	e014      	b.n	8007e4c <_svfiprintf_r+0x110>
 8007e22:	eba0 0308 	sub.w	r3, r0, r8
 8007e26:	fa09 f303 	lsl.w	r3, r9, r3
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	46a2      	mov	sl, r4
 8007e2e:	9304      	str	r3, [sp, #16]
 8007e30:	e7d2      	b.n	8007dd8 <_svfiprintf_r+0x9c>
 8007e32:	9b03      	ldr	r3, [sp, #12]
 8007e34:	1d19      	adds	r1, r3, #4
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	9103      	str	r1, [sp, #12]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	bfbb      	ittet	lt
 8007e3e:	425b      	neglt	r3, r3
 8007e40:	f042 0202 	orrlt.w	r2, r2, #2
 8007e44:	9307      	strge	r3, [sp, #28]
 8007e46:	9307      	strlt	r3, [sp, #28]
 8007e48:	bfb8      	it	lt
 8007e4a:	9204      	strlt	r2, [sp, #16]
 8007e4c:	7823      	ldrb	r3, [r4, #0]
 8007e4e:	2b2e      	cmp	r3, #46	; 0x2e
 8007e50:	d10c      	bne.n	8007e6c <_svfiprintf_r+0x130>
 8007e52:	7863      	ldrb	r3, [r4, #1]
 8007e54:	2b2a      	cmp	r3, #42	; 0x2a
 8007e56:	d135      	bne.n	8007ec4 <_svfiprintf_r+0x188>
 8007e58:	9b03      	ldr	r3, [sp, #12]
 8007e5a:	3402      	adds	r4, #2
 8007e5c:	1d1a      	adds	r2, r3, #4
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	9203      	str	r2, [sp, #12]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	bfb8      	it	lt
 8007e66:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007e6a:	9305      	str	r3, [sp, #20]
 8007e6c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007f38 <_svfiprintf_r+0x1fc>
 8007e70:	2203      	movs	r2, #3
 8007e72:	4650      	mov	r0, sl
 8007e74:	7821      	ldrb	r1, [r4, #0]
 8007e76:	f7ff fac1 	bl	80073fc <memchr>
 8007e7a:	b140      	cbz	r0, 8007e8e <_svfiprintf_r+0x152>
 8007e7c:	2340      	movs	r3, #64	; 0x40
 8007e7e:	eba0 000a 	sub.w	r0, r0, sl
 8007e82:	fa03 f000 	lsl.w	r0, r3, r0
 8007e86:	9b04      	ldr	r3, [sp, #16]
 8007e88:	3401      	adds	r4, #1
 8007e8a:	4303      	orrs	r3, r0
 8007e8c:	9304      	str	r3, [sp, #16]
 8007e8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e92:	2206      	movs	r2, #6
 8007e94:	4825      	ldr	r0, [pc, #148]	; (8007f2c <_svfiprintf_r+0x1f0>)
 8007e96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e9a:	f7ff faaf 	bl	80073fc <memchr>
 8007e9e:	2800      	cmp	r0, #0
 8007ea0:	d038      	beq.n	8007f14 <_svfiprintf_r+0x1d8>
 8007ea2:	4b23      	ldr	r3, [pc, #140]	; (8007f30 <_svfiprintf_r+0x1f4>)
 8007ea4:	bb1b      	cbnz	r3, 8007eee <_svfiprintf_r+0x1b2>
 8007ea6:	9b03      	ldr	r3, [sp, #12]
 8007ea8:	3307      	adds	r3, #7
 8007eaa:	f023 0307 	bic.w	r3, r3, #7
 8007eae:	3308      	adds	r3, #8
 8007eb0:	9303      	str	r3, [sp, #12]
 8007eb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eb4:	4433      	add	r3, r6
 8007eb6:	9309      	str	r3, [sp, #36]	; 0x24
 8007eb8:	e767      	b.n	8007d8a <_svfiprintf_r+0x4e>
 8007eba:	460c      	mov	r4, r1
 8007ebc:	2001      	movs	r0, #1
 8007ebe:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ec2:	e7a5      	b.n	8007e10 <_svfiprintf_r+0xd4>
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	f04f 0c0a 	mov.w	ip, #10
 8007eca:	4619      	mov	r1, r3
 8007ecc:	3401      	adds	r4, #1
 8007ece:	9305      	str	r3, [sp, #20]
 8007ed0:	4620      	mov	r0, r4
 8007ed2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ed6:	3a30      	subs	r2, #48	; 0x30
 8007ed8:	2a09      	cmp	r2, #9
 8007eda:	d903      	bls.n	8007ee4 <_svfiprintf_r+0x1a8>
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d0c5      	beq.n	8007e6c <_svfiprintf_r+0x130>
 8007ee0:	9105      	str	r1, [sp, #20]
 8007ee2:	e7c3      	b.n	8007e6c <_svfiprintf_r+0x130>
 8007ee4:	4604      	mov	r4, r0
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	fb0c 2101 	mla	r1, ip, r1, r2
 8007eec:	e7f0      	b.n	8007ed0 <_svfiprintf_r+0x194>
 8007eee:	ab03      	add	r3, sp, #12
 8007ef0:	9300      	str	r3, [sp, #0]
 8007ef2:	462a      	mov	r2, r5
 8007ef4:	4638      	mov	r0, r7
 8007ef6:	4b0f      	ldr	r3, [pc, #60]	; (8007f34 <_svfiprintf_r+0x1f8>)
 8007ef8:	a904      	add	r1, sp, #16
 8007efa:	f7fe f815 	bl	8005f28 <_printf_float>
 8007efe:	1c42      	adds	r2, r0, #1
 8007f00:	4606      	mov	r6, r0
 8007f02:	d1d6      	bne.n	8007eb2 <_svfiprintf_r+0x176>
 8007f04:	89ab      	ldrh	r3, [r5, #12]
 8007f06:	065b      	lsls	r3, r3, #25
 8007f08:	f53f af2c 	bmi.w	8007d64 <_svfiprintf_r+0x28>
 8007f0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f0e:	b01d      	add	sp, #116	; 0x74
 8007f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f14:	ab03      	add	r3, sp, #12
 8007f16:	9300      	str	r3, [sp, #0]
 8007f18:	462a      	mov	r2, r5
 8007f1a:	4638      	mov	r0, r7
 8007f1c:	4b05      	ldr	r3, [pc, #20]	; (8007f34 <_svfiprintf_r+0x1f8>)
 8007f1e:	a904      	add	r1, sp, #16
 8007f20:	f7fe fa9e 	bl	8006460 <_printf_i>
 8007f24:	e7eb      	b.n	8007efe <_svfiprintf_r+0x1c2>
 8007f26:	bf00      	nop
 8007f28:	0800c58c 	.word	0x0800c58c
 8007f2c:	0800c596 	.word	0x0800c596
 8007f30:	08005f29 	.word	0x08005f29
 8007f34:	08007c85 	.word	0x08007c85
 8007f38:	0800c592 	.word	0x0800c592

08007f3c <_sbrk_r>:
 8007f3c:	b538      	push	{r3, r4, r5, lr}
 8007f3e:	2300      	movs	r3, #0
 8007f40:	4d05      	ldr	r5, [pc, #20]	; (8007f58 <_sbrk_r+0x1c>)
 8007f42:	4604      	mov	r4, r0
 8007f44:	4608      	mov	r0, r1
 8007f46:	602b      	str	r3, [r5, #0]
 8007f48:	f7f9 ffc2 	bl	8001ed0 <_sbrk>
 8007f4c:	1c43      	adds	r3, r0, #1
 8007f4e:	d102      	bne.n	8007f56 <_sbrk_r+0x1a>
 8007f50:	682b      	ldr	r3, [r5, #0]
 8007f52:	b103      	cbz	r3, 8007f56 <_sbrk_r+0x1a>
 8007f54:	6023      	str	r3, [r4, #0]
 8007f56:	bd38      	pop	{r3, r4, r5, pc}
 8007f58:	20000bec 	.word	0x20000bec

08007f5c <__assert_func>:
 8007f5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007f5e:	4614      	mov	r4, r2
 8007f60:	461a      	mov	r2, r3
 8007f62:	4b09      	ldr	r3, [pc, #36]	; (8007f88 <__assert_func+0x2c>)
 8007f64:	4605      	mov	r5, r0
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	68d8      	ldr	r0, [r3, #12]
 8007f6a:	b14c      	cbz	r4, 8007f80 <__assert_func+0x24>
 8007f6c:	4b07      	ldr	r3, [pc, #28]	; (8007f8c <__assert_func+0x30>)
 8007f6e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007f72:	9100      	str	r1, [sp, #0]
 8007f74:	462b      	mov	r3, r5
 8007f76:	4906      	ldr	r1, [pc, #24]	; (8007f90 <__assert_func+0x34>)
 8007f78:	f000 f80e 	bl	8007f98 <fiprintf>
 8007f7c:	f000 faa2 	bl	80084c4 <abort>
 8007f80:	4b04      	ldr	r3, [pc, #16]	; (8007f94 <__assert_func+0x38>)
 8007f82:	461c      	mov	r4, r3
 8007f84:	e7f3      	b.n	8007f6e <__assert_func+0x12>
 8007f86:	bf00      	nop
 8007f88:	200000a8 	.word	0x200000a8
 8007f8c:	0800c59d 	.word	0x0800c59d
 8007f90:	0800c5aa 	.word	0x0800c5aa
 8007f94:	0800c5d8 	.word	0x0800c5d8

08007f98 <fiprintf>:
 8007f98:	b40e      	push	{r1, r2, r3}
 8007f9a:	b503      	push	{r0, r1, lr}
 8007f9c:	4601      	mov	r1, r0
 8007f9e:	ab03      	add	r3, sp, #12
 8007fa0:	4805      	ldr	r0, [pc, #20]	; (8007fb8 <fiprintf+0x20>)
 8007fa2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fa6:	6800      	ldr	r0, [r0, #0]
 8007fa8:	9301      	str	r3, [sp, #4]
 8007faa:	f000 f88d 	bl	80080c8 <_vfiprintf_r>
 8007fae:	b002      	add	sp, #8
 8007fb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007fb4:	b003      	add	sp, #12
 8007fb6:	4770      	bx	lr
 8007fb8:	200000a8 	.word	0x200000a8

08007fbc <__ascii_mbtowc>:
 8007fbc:	b082      	sub	sp, #8
 8007fbe:	b901      	cbnz	r1, 8007fc2 <__ascii_mbtowc+0x6>
 8007fc0:	a901      	add	r1, sp, #4
 8007fc2:	b142      	cbz	r2, 8007fd6 <__ascii_mbtowc+0x1a>
 8007fc4:	b14b      	cbz	r3, 8007fda <__ascii_mbtowc+0x1e>
 8007fc6:	7813      	ldrb	r3, [r2, #0]
 8007fc8:	600b      	str	r3, [r1, #0]
 8007fca:	7812      	ldrb	r2, [r2, #0]
 8007fcc:	1e10      	subs	r0, r2, #0
 8007fce:	bf18      	it	ne
 8007fd0:	2001      	movne	r0, #1
 8007fd2:	b002      	add	sp, #8
 8007fd4:	4770      	bx	lr
 8007fd6:	4610      	mov	r0, r2
 8007fd8:	e7fb      	b.n	8007fd2 <__ascii_mbtowc+0x16>
 8007fda:	f06f 0001 	mvn.w	r0, #1
 8007fde:	e7f8      	b.n	8007fd2 <__ascii_mbtowc+0x16>

08007fe0 <memmove>:
 8007fe0:	4288      	cmp	r0, r1
 8007fe2:	b510      	push	{r4, lr}
 8007fe4:	eb01 0402 	add.w	r4, r1, r2
 8007fe8:	d902      	bls.n	8007ff0 <memmove+0x10>
 8007fea:	4284      	cmp	r4, r0
 8007fec:	4623      	mov	r3, r4
 8007fee:	d807      	bhi.n	8008000 <memmove+0x20>
 8007ff0:	1e43      	subs	r3, r0, #1
 8007ff2:	42a1      	cmp	r1, r4
 8007ff4:	d008      	beq.n	8008008 <memmove+0x28>
 8007ff6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ffa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007ffe:	e7f8      	b.n	8007ff2 <memmove+0x12>
 8008000:	4601      	mov	r1, r0
 8008002:	4402      	add	r2, r0
 8008004:	428a      	cmp	r2, r1
 8008006:	d100      	bne.n	800800a <memmove+0x2a>
 8008008:	bd10      	pop	{r4, pc}
 800800a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800800e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008012:	e7f7      	b.n	8008004 <memmove+0x24>

08008014 <__malloc_lock>:
 8008014:	4801      	ldr	r0, [pc, #4]	; (800801c <__malloc_lock+0x8>)
 8008016:	f000 bc15 	b.w	8008844 <__retarget_lock_acquire_recursive>
 800801a:	bf00      	nop
 800801c:	20000bf4 	.word	0x20000bf4

08008020 <__malloc_unlock>:
 8008020:	4801      	ldr	r0, [pc, #4]	; (8008028 <__malloc_unlock+0x8>)
 8008022:	f000 bc10 	b.w	8008846 <__retarget_lock_release_recursive>
 8008026:	bf00      	nop
 8008028:	20000bf4 	.word	0x20000bf4

0800802c <_realloc_r>:
 800802c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800802e:	4607      	mov	r7, r0
 8008030:	4614      	mov	r4, r2
 8008032:	460e      	mov	r6, r1
 8008034:	b921      	cbnz	r1, 8008040 <_realloc_r+0x14>
 8008036:	4611      	mov	r1, r2
 8008038:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800803c:	f7ff bdc8 	b.w	8007bd0 <_malloc_r>
 8008040:	b922      	cbnz	r2, 800804c <_realloc_r+0x20>
 8008042:	f7ff fd79 	bl	8007b38 <_free_r>
 8008046:	4625      	mov	r5, r4
 8008048:	4628      	mov	r0, r5
 800804a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800804c:	f000 fc60 	bl	8008910 <_malloc_usable_size_r>
 8008050:	42a0      	cmp	r0, r4
 8008052:	d20f      	bcs.n	8008074 <_realloc_r+0x48>
 8008054:	4621      	mov	r1, r4
 8008056:	4638      	mov	r0, r7
 8008058:	f7ff fdba 	bl	8007bd0 <_malloc_r>
 800805c:	4605      	mov	r5, r0
 800805e:	2800      	cmp	r0, #0
 8008060:	d0f2      	beq.n	8008048 <_realloc_r+0x1c>
 8008062:	4631      	mov	r1, r6
 8008064:	4622      	mov	r2, r4
 8008066:	f7fd feab 	bl	8005dc0 <memcpy>
 800806a:	4631      	mov	r1, r6
 800806c:	4638      	mov	r0, r7
 800806e:	f7ff fd63 	bl	8007b38 <_free_r>
 8008072:	e7e9      	b.n	8008048 <_realloc_r+0x1c>
 8008074:	4635      	mov	r5, r6
 8008076:	e7e7      	b.n	8008048 <_realloc_r+0x1c>

08008078 <__sfputc_r>:
 8008078:	6893      	ldr	r3, [r2, #8]
 800807a:	b410      	push	{r4}
 800807c:	3b01      	subs	r3, #1
 800807e:	2b00      	cmp	r3, #0
 8008080:	6093      	str	r3, [r2, #8]
 8008082:	da07      	bge.n	8008094 <__sfputc_r+0x1c>
 8008084:	6994      	ldr	r4, [r2, #24]
 8008086:	42a3      	cmp	r3, r4
 8008088:	db01      	blt.n	800808e <__sfputc_r+0x16>
 800808a:	290a      	cmp	r1, #10
 800808c:	d102      	bne.n	8008094 <__sfputc_r+0x1c>
 800808e:	bc10      	pop	{r4}
 8008090:	f000 b94a 	b.w	8008328 <__swbuf_r>
 8008094:	6813      	ldr	r3, [r2, #0]
 8008096:	1c58      	adds	r0, r3, #1
 8008098:	6010      	str	r0, [r2, #0]
 800809a:	7019      	strb	r1, [r3, #0]
 800809c:	4608      	mov	r0, r1
 800809e:	bc10      	pop	{r4}
 80080a0:	4770      	bx	lr

080080a2 <__sfputs_r>:
 80080a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080a4:	4606      	mov	r6, r0
 80080a6:	460f      	mov	r7, r1
 80080a8:	4614      	mov	r4, r2
 80080aa:	18d5      	adds	r5, r2, r3
 80080ac:	42ac      	cmp	r4, r5
 80080ae:	d101      	bne.n	80080b4 <__sfputs_r+0x12>
 80080b0:	2000      	movs	r0, #0
 80080b2:	e007      	b.n	80080c4 <__sfputs_r+0x22>
 80080b4:	463a      	mov	r2, r7
 80080b6:	4630      	mov	r0, r6
 80080b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080bc:	f7ff ffdc 	bl	8008078 <__sfputc_r>
 80080c0:	1c43      	adds	r3, r0, #1
 80080c2:	d1f3      	bne.n	80080ac <__sfputs_r+0xa>
 80080c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080080c8 <_vfiprintf_r>:
 80080c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080cc:	460d      	mov	r5, r1
 80080ce:	4614      	mov	r4, r2
 80080d0:	4698      	mov	r8, r3
 80080d2:	4606      	mov	r6, r0
 80080d4:	b09d      	sub	sp, #116	; 0x74
 80080d6:	b118      	cbz	r0, 80080e0 <_vfiprintf_r+0x18>
 80080d8:	6983      	ldr	r3, [r0, #24]
 80080da:	b90b      	cbnz	r3, 80080e0 <_vfiprintf_r+0x18>
 80080dc:	f000 fb14 	bl	8008708 <__sinit>
 80080e0:	4b89      	ldr	r3, [pc, #548]	; (8008308 <_vfiprintf_r+0x240>)
 80080e2:	429d      	cmp	r5, r3
 80080e4:	d11b      	bne.n	800811e <_vfiprintf_r+0x56>
 80080e6:	6875      	ldr	r5, [r6, #4]
 80080e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080ea:	07d9      	lsls	r1, r3, #31
 80080ec:	d405      	bmi.n	80080fa <_vfiprintf_r+0x32>
 80080ee:	89ab      	ldrh	r3, [r5, #12]
 80080f0:	059a      	lsls	r2, r3, #22
 80080f2:	d402      	bmi.n	80080fa <_vfiprintf_r+0x32>
 80080f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080f6:	f000 fba5 	bl	8008844 <__retarget_lock_acquire_recursive>
 80080fa:	89ab      	ldrh	r3, [r5, #12]
 80080fc:	071b      	lsls	r3, r3, #28
 80080fe:	d501      	bpl.n	8008104 <_vfiprintf_r+0x3c>
 8008100:	692b      	ldr	r3, [r5, #16]
 8008102:	b9eb      	cbnz	r3, 8008140 <_vfiprintf_r+0x78>
 8008104:	4629      	mov	r1, r5
 8008106:	4630      	mov	r0, r6
 8008108:	f000 f96e 	bl	80083e8 <__swsetup_r>
 800810c:	b1c0      	cbz	r0, 8008140 <_vfiprintf_r+0x78>
 800810e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008110:	07dc      	lsls	r4, r3, #31
 8008112:	d50e      	bpl.n	8008132 <_vfiprintf_r+0x6a>
 8008114:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008118:	b01d      	add	sp, #116	; 0x74
 800811a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800811e:	4b7b      	ldr	r3, [pc, #492]	; (800830c <_vfiprintf_r+0x244>)
 8008120:	429d      	cmp	r5, r3
 8008122:	d101      	bne.n	8008128 <_vfiprintf_r+0x60>
 8008124:	68b5      	ldr	r5, [r6, #8]
 8008126:	e7df      	b.n	80080e8 <_vfiprintf_r+0x20>
 8008128:	4b79      	ldr	r3, [pc, #484]	; (8008310 <_vfiprintf_r+0x248>)
 800812a:	429d      	cmp	r5, r3
 800812c:	bf08      	it	eq
 800812e:	68f5      	ldreq	r5, [r6, #12]
 8008130:	e7da      	b.n	80080e8 <_vfiprintf_r+0x20>
 8008132:	89ab      	ldrh	r3, [r5, #12]
 8008134:	0598      	lsls	r0, r3, #22
 8008136:	d4ed      	bmi.n	8008114 <_vfiprintf_r+0x4c>
 8008138:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800813a:	f000 fb84 	bl	8008846 <__retarget_lock_release_recursive>
 800813e:	e7e9      	b.n	8008114 <_vfiprintf_r+0x4c>
 8008140:	2300      	movs	r3, #0
 8008142:	9309      	str	r3, [sp, #36]	; 0x24
 8008144:	2320      	movs	r3, #32
 8008146:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800814a:	2330      	movs	r3, #48	; 0x30
 800814c:	f04f 0901 	mov.w	r9, #1
 8008150:	f8cd 800c 	str.w	r8, [sp, #12]
 8008154:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008314 <_vfiprintf_r+0x24c>
 8008158:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800815c:	4623      	mov	r3, r4
 800815e:	469a      	mov	sl, r3
 8008160:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008164:	b10a      	cbz	r2, 800816a <_vfiprintf_r+0xa2>
 8008166:	2a25      	cmp	r2, #37	; 0x25
 8008168:	d1f9      	bne.n	800815e <_vfiprintf_r+0x96>
 800816a:	ebba 0b04 	subs.w	fp, sl, r4
 800816e:	d00b      	beq.n	8008188 <_vfiprintf_r+0xc0>
 8008170:	465b      	mov	r3, fp
 8008172:	4622      	mov	r2, r4
 8008174:	4629      	mov	r1, r5
 8008176:	4630      	mov	r0, r6
 8008178:	f7ff ff93 	bl	80080a2 <__sfputs_r>
 800817c:	3001      	adds	r0, #1
 800817e:	f000 80aa 	beq.w	80082d6 <_vfiprintf_r+0x20e>
 8008182:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008184:	445a      	add	r2, fp
 8008186:	9209      	str	r2, [sp, #36]	; 0x24
 8008188:	f89a 3000 	ldrb.w	r3, [sl]
 800818c:	2b00      	cmp	r3, #0
 800818e:	f000 80a2 	beq.w	80082d6 <_vfiprintf_r+0x20e>
 8008192:	2300      	movs	r3, #0
 8008194:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008198:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800819c:	f10a 0a01 	add.w	sl, sl, #1
 80081a0:	9304      	str	r3, [sp, #16]
 80081a2:	9307      	str	r3, [sp, #28]
 80081a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80081a8:	931a      	str	r3, [sp, #104]	; 0x68
 80081aa:	4654      	mov	r4, sl
 80081ac:	2205      	movs	r2, #5
 80081ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081b2:	4858      	ldr	r0, [pc, #352]	; (8008314 <_vfiprintf_r+0x24c>)
 80081b4:	f7ff f922 	bl	80073fc <memchr>
 80081b8:	9a04      	ldr	r2, [sp, #16]
 80081ba:	b9d8      	cbnz	r0, 80081f4 <_vfiprintf_r+0x12c>
 80081bc:	06d1      	lsls	r1, r2, #27
 80081be:	bf44      	itt	mi
 80081c0:	2320      	movmi	r3, #32
 80081c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081c6:	0713      	lsls	r3, r2, #28
 80081c8:	bf44      	itt	mi
 80081ca:	232b      	movmi	r3, #43	; 0x2b
 80081cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081d0:	f89a 3000 	ldrb.w	r3, [sl]
 80081d4:	2b2a      	cmp	r3, #42	; 0x2a
 80081d6:	d015      	beq.n	8008204 <_vfiprintf_r+0x13c>
 80081d8:	4654      	mov	r4, sl
 80081da:	2000      	movs	r0, #0
 80081dc:	f04f 0c0a 	mov.w	ip, #10
 80081e0:	9a07      	ldr	r2, [sp, #28]
 80081e2:	4621      	mov	r1, r4
 80081e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081e8:	3b30      	subs	r3, #48	; 0x30
 80081ea:	2b09      	cmp	r3, #9
 80081ec:	d94e      	bls.n	800828c <_vfiprintf_r+0x1c4>
 80081ee:	b1b0      	cbz	r0, 800821e <_vfiprintf_r+0x156>
 80081f0:	9207      	str	r2, [sp, #28]
 80081f2:	e014      	b.n	800821e <_vfiprintf_r+0x156>
 80081f4:	eba0 0308 	sub.w	r3, r0, r8
 80081f8:	fa09 f303 	lsl.w	r3, r9, r3
 80081fc:	4313      	orrs	r3, r2
 80081fe:	46a2      	mov	sl, r4
 8008200:	9304      	str	r3, [sp, #16]
 8008202:	e7d2      	b.n	80081aa <_vfiprintf_r+0xe2>
 8008204:	9b03      	ldr	r3, [sp, #12]
 8008206:	1d19      	adds	r1, r3, #4
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	9103      	str	r1, [sp, #12]
 800820c:	2b00      	cmp	r3, #0
 800820e:	bfbb      	ittet	lt
 8008210:	425b      	neglt	r3, r3
 8008212:	f042 0202 	orrlt.w	r2, r2, #2
 8008216:	9307      	strge	r3, [sp, #28]
 8008218:	9307      	strlt	r3, [sp, #28]
 800821a:	bfb8      	it	lt
 800821c:	9204      	strlt	r2, [sp, #16]
 800821e:	7823      	ldrb	r3, [r4, #0]
 8008220:	2b2e      	cmp	r3, #46	; 0x2e
 8008222:	d10c      	bne.n	800823e <_vfiprintf_r+0x176>
 8008224:	7863      	ldrb	r3, [r4, #1]
 8008226:	2b2a      	cmp	r3, #42	; 0x2a
 8008228:	d135      	bne.n	8008296 <_vfiprintf_r+0x1ce>
 800822a:	9b03      	ldr	r3, [sp, #12]
 800822c:	3402      	adds	r4, #2
 800822e:	1d1a      	adds	r2, r3, #4
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	9203      	str	r2, [sp, #12]
 8008234:	2b00      	cmp	r3, #0
 8008236:	bfb8      	it	lt
 8008238:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800823c:	9305      	str	r3, [sp, #20]
 800823e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008324 <_vfiprintf_r+0x25c>
 8008242:	2203      	movs	r2, #3
 8008244:	4650      	mov	r0, sl
 8008246:	7821      	ldrb	r1, [r4, #0]
 8008248:	f7ff f8d8 	bl	80073fc <memchr>
 800824c:	b140      	cbz	r0, 8008260 <_vfiprintf_r+0x198>
 800824e:	2340      	movs	r3, #64	; 0x40
 8008250:	eba0 000a 	sub.w	r0, r0, sl
 8008254:	fa03 f000 	lsl.w	r0, r3, r0
 8008258:	9b04      	ldr	r3, [sp, #16]
 800825a:	3401      	adds	r4, #1
 800825c:	4303      	orrs	r3, r0
 800825e:	9304      	str	r3, [sp, #16]
 8008260:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008264:	2206      	movs	r2, #6
 8008266:	482c      	ldr	r0, [pc, #176]	; (8008318 <_vfiprintf_r+0x250>)
 8008268:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800826c:	f7ff f8c6 	bl	80073fc <memchr>
 8008270:	2800      	cmp	r0, #0
 8008272:	d03f      	beq.n	80082f4 <_vfiprintf_r+0x22c>
 8008274:	4b29      	ldr	r3, [pc, #164]	; (800831c <_vfiprintf_r+0x254>)
 8008276:	bb1b      	cbnz	r3, 80082c0 <_vfiprintf_r+0x1f8>
 8008278:	9b03      	ldr	r3, [sp, #12]
 800827a:	3307      	adds	r3, #7
 800827c:	f023 0307 	bic.w	r3, r3, #7
 8008280:	3308      	adds	r3, #8
 8008282:	9303      	str	r3, [sp, #12]
 8008284:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008286:	443b      	add	r3, r7
 8008288:	9309      	str	r3, [sp, #36]	; 0x24
 800828a:	e767      	b.n	800815c <_vfiprintf_r+0x94>
 800828c:	460c      	mov	r4, r1
 800828e:	2001      	movs	r0, #1
 8008290:	fb0c 3202 	mla	r2, ip, r2, r3
 8008294:	e7a5      	b.n	80081e2 <_vfiprintf_r+0x11a>
 8008296:	2300      	movs	r3, #0
 8008298:	f04f 0c0a 	mov.w	ip, #10
 800829c:	4619      	mov	r1, r3
 800829e:	3401      	adds	r4, #1
 80082a0:	9305      	str	r3, [sp, #20]
 80082a2:	4620      	mov	r0, r4
 80082a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082a8:	3a30      	subs	r2, #48	; 0x30
 80082aa:	2a09      	cmp	r2, #9
 80082ac:	d903      	bls.n	80082b6 <_vfiprintf_r+0x1ee>
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d0c5      	beq.n	800823e <_vfiprintf_r+0x176>
 80082b2:	9105      	str	r1, [sp, #20]
 80082b4:	e7c3      	b.n	800823e <_vfiprintf_r+0x176>
 80082b6:	4604      	mov	r4, r0
 80082b8:	2301      	movs	r3, #1
 80082ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80082be:	e7f0      	b.n	80082a2 <_vfiprintf_r+0x1da>
 80082c0:	ab03      	add	r3, sp, #12
 80082c2:	9300      	str	r3, [sp, #0]
 80082c4:	462a      	mov	r2, r5
 80082c6:	4630      	mov	r0, r6
 80082c8:	4b15      	ldr	r3, [pc, #84]	; (8008320 <_vfiprintf_r+0x258>)
 80082ca:	a904      	add	r1, sp, #16
 80082cc:	f7fd fe2c 	bl	8005f28 <_printf_float>
 80082d0:	4607      	mov	r7, r0
 80082d2:	1c78      	adds	r0, r7, #1
 80082d4:	d1d6      	bne.n	8008284 <_vfiprintf_r+0x1bc>
 80082d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082d8:	07d9      	lsls	r1, r3, #31
 80082da:	d405      	bmi.n	80082e8 <_vfiprintf_r+0x220>
 80082dc:	89ab      	ldrh	r3, [r5, #12]
 80082de:	059a      	lsls	r2, r3, #22
 80082e0:	d402      	bmi.n	80082e8 <_vfiprintf_r+0x220>
 80082e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082e4:	f000 faaf 	bl	8008846 <__retarget_lock_release_recursive>
 80082e8:	89ab      	ldrh	r3, [r5, #12]
 80082ea:	065b      	lsls	r3, r3, #25
 80082ec:	f53f af12 	bmi.w	8008114 <_vfiprintf_r+0x4c>
 80082f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082f2:	e711      	b.n	8008118 <_vfiprintf_r+0x50>
 80082f4:	ab03      	add	r3, sp, #12
 80082f6:	9300      	str	r3, [sp, #0]
 80082f8:	462a      	mov	r2, r5
 80082fa:	4630      	mov	r0, r6
 80082fc:	4b08      	ldr	r3, [pc, #32]	; (8008320 <_vfiprintf_r+0x258>)
 80082fe:	a904      	add	r1, sp, #16
 8008300:	f7fe f8ae 	bl	8006460 <_printf_i>
 8008304:	e7e4      	b.n	80082d0 <_vfiprintf_r+0x208>
 8008306:	bf00      	nop
 8008308:	0800c704 	.word	0x0800c704
 800830c:	0800c724 	.word	0x0800c724
 8008310:	0800c6e4 	.word	0x0800c6e4
 8008314:	0800c58c 	.word	0x0800c58c
 8008318:	0800c596 	.word	0x0800c596
 800831c:	08005f29 	.word	0x08005f29
 8008320:	080080a3 	.word	0x080080a3
 8008324:	0800c592 	.word	0x0800c592

08008328 <__swbuf_r>:
 8008328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800832a:	460e      	mov	r6, r1
 800832c:	4614      	mov	r4, r2
 800832e:	4605      	mov	r5, r0
 8008330:	b118      	cbz	r0, 800833a <__swbuf_r+0x12>
 8008332:	6983      	ldr	r3, [r0, #24]
 8008334:	b90b      	cbnz	r3, 800833a <__swbuf_r+0x12>
 8008336:	f000 f9e7 	bl	8008708 <__sinit>
 800833a:	4b21      	ldr	r3, [pc, #132]	; (80083c0 <__swbuf_r+0x98>)
 800833c:	429c      	cmp	r4, r3
 800833e:	d12b      	bne.n	8008398 <__swbuf_r+0x70>
 8008340:	686c      	ldr	r4, [r5, #4]
 8008342:	69a3      	ldr	r3, [r4, #24]
 8008344:	60a3      	str	r3, [r4, #8]
 8008346:	89a3      	ldrh	r3, [r4, #12]
 8008348:	071a      	lsls	r2, r3, #28
 800834a:	d52f      	bpl.n	80083ac <__swbuf_r+0x84>
 800834c:	6923      	ldr	r3, [r4, #16]
 800834e:	b36b      	cbz	r3, 80083ac <__swbuf_r+0x84>
 8008350:	6923      	ldr	r3, [r4, #16]
 8008352:	6820      	ldr	r0, [r4, #0]
 8008354:	b2f6      	uxtb	r6, r6
 8008356:	1ac0      	subs	r0, r0, r3
 8008358:	6963      	ldr	r3, [r4, #20]
 800835a:	4637      	mov	r7, r6
 800835c:	4283      	cmp	r3, r0
 800835e:	dc04      	bgt.n	800836a <__swbuf_r+0x42>
 8008360:	4621      	mov	r1, r4
 8008362:	4628      	mov	r0, r5
 8008364:	f000 f93c 	bl	80085e0 <_fflush_r>
 8008368:	bb30      	cbnz	r0, 80083b8 <__swbuf_r+0x90>
 800836a:	68a3      	ldr	r3, [r4, #8]
 800836c:	3001      	adds	r0, #1
 800836e:	3b01      	subs	r3, #1
 8008370:	60a3      	str	r3, [r4, #8]
 8008372:	6823      	ldr	r3, [r4, #0]
 8008374:	1c5a      	adds	r2, r3, #1
 8008376:	6022      	str	r2, [r4, #0]
 8008378:	701e      	strb	r6, [r3, #0]
 800837a:	6963      	ldr	r3, [r4, #20]
 800837c:	4283      	cmp	r3, r0
 800837e:	d004      	beq.n	800838a <__swbuf_r+0x62>
 8008380:	89a3      	ldrh	r3, [r4, #12]
 8008382:	07db      	lsls	r3, r3, #31
 8008384:	d506      	bpl.n	8008394 <__swbuf_r+0x6c>
 8008386:	2e0a      	cmp	r6, #10
 8008388:	d104      	bne.n	8008394 <__swbuf_r+0x6c>
 800838a:	4621      	mov	r1, r4
 800838c:	4628      	mov	r0, r5
 800838e:	f000 f927 	bl	80085e0 <_fflush_r>
 8008392:	b988      	cbnz	r0, 80083b8 <__swbuf_r+0x90>
 8008394:	4638      	mov	r0, r7
 8008396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008398:	4b0a      	ldr	r3, [pc, #40]	; (80083c4 <__swbuf_r+0x9c>)
 800839a:	429c      	cmp	r4, r3
 800839c:	d101      	bne.n	80083a2 <__swbuf_r+0x7a>
 800839e:	68ac      	ldr	r4, [r5, #8]
 80083a0:	e7cf      	b.n	8008342 <__swbuf_r+0x1a>
 80083a2:	4b09      	ldr	r3, [pc, #36]	; (80083c8 <__swbuf_r+0xa0>)
 80083a4:	429c      	cmp	r4, r3
 80083a6:	bf08      	it	eq
 80083a8:	68ec      	ldreq	r4, [r5, #12]
 80083aa:	e7ca      	b.n	8008342 <__swbuf_r+0x1a>
 80083ac:	4621      	mov	r1, r4
 80083ae:	4628      	mov	r0, r5
 80083b0:	f000 f81a 	bl	80083e8 <__swsetup_r>
 80083b4:	2800      	cmp	r0, #0
 80083b6:	d0cb      	beq.n	8008350 <__swbuf_r+0x28>
 80083b8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80083bc:	e7ea      	b.n	8008394 <__swbuf_r+0x6c>
 80083be:	bf00      	nop
 80083c0:	0800c704 	.word	0x0800c704
 80083c4:	0800c724 	.word	0x0800c724
 80083c8:	0800c6e4 	.word	0x0800c6e4

080083cc <__ascii_wctomb>:
 80083cc:	4603      	mov	r3, r0
 80083ce:	4608      	mov	r0, r1
 80083d0:	b141      	cbz	r1, 80083e4 <__ascii_wctomb+0x18>
 80083d2:	2aff      	cmp	r2, #255	; 0xff
 80083d4:	d904      	bls.n	80083e0 <__ascii_wctomb+0x14>
 80083d6:	228a      	movs	r2, #138	; 0x8a
 80083d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083dc:	601a      	str	r2, [r3, #0]
 80083de:	4770      	bx	lr
 80083e0:	2001      	movs	r0, #1
 80083e2:	700a      	strb	r2, [r1, #0]
 80083e4:	4770      	bx	lr
	...

080083e8 <__swsetup_r>:
 80083e8:	4b32      	ldr	r3, [pc, #200]	; (80084b4 <__swsetup_r+0xcc>)
 80083ea:	b570      	push	{r4, r5, r6, lr}
 80083ec:	681d      	ldr	r5, [r3, #0]
 80083ee:	4606      	mov	r6, r0
 80083f0:	460c      	mov	r4, r1
 80083f2:	b125      	cbz	r5, 80083fe <__swsetup_r+0x16>
 80083f4:	69ab      	ldr	r3, [r5, #24]
 80083f6:	b913      	cbnz	r3, 80083fe <__swsetup_r+0x16>
 80083f8:	4628      	mov	r0, r5
 80083fa:	f000 f985 	bl	8008708 <__sinit>
 80083fe:	4b2e      	ldr	r3, [pc, #184]	; (80084b8 <__swsetup_r+0xd0>)
 8008400:	429c      	cmp	r4, r3
 8008402:	d10f      	bne.n	8008424 <__swsetup_r+0x3c>
 8008404:	686c      	ldr	r4, [r5, #4]
 8008406:	89a3      	ldrh	r3, [r4, #12]
 8008408:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800840c:	0719      	lsls	r1, r3, #28
 800840e:	d42c      	bmi.n	800846a <__swsetup_r+0x82>
 8008410:	06dd      	lsls	r5, r3, #27
 8008412:	d411      	bmi.n	8008438 <__swsetup_r+0x50>
 8008414:	2309      	movs	r3, #9
 8008416:	6033      	str	r3, [r6, #0]
 8008418:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800841c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008420:	81a3      	strh	r3, [r4, #12]
 8008422:	e03e      	b.n	80084a2 <__swsetup_r+0xba>
 8008424:	4b25      	ldr	r3, [pc, #148]	; (80084bc <__swsetup_r+0xd4>)
 8008426:	429c      	cmp	r4, r3
 8008428:	d101      	bne.n	800842e <__swsetup_r+0x46>
 800842a:	68ac      	ldr	r4, [r5, #8]
 800842c:	e7eb      	b.n	8008406 <__swsetup_r+0x1e>
 800842e:	4b24      	ldr	r3, [pc, #144]	; (80084c0 <__swsetup_r+0xd8>)
 8008430:	429c      	cmp	r4, r3
 8008432:	bf08      	it	eq
 8008434:	68ec      	ldreq	r4, [r5, #12]
 8008436:	e7e6      	b.n	8008406 <__swsetup_r+0x1e>
 8008438:	0758      	lsls	r0, r3, #29
 800843a:	d512      	bpl.n	8008462 <__swsetup_r+0x7a>
 800843c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800843e:	b141      	cbz	r1, 8008452 <__swsetup_r+0x6a>
 8008440:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008444:	4299      	cmp	r1, r3
 8008446:	d002      	beq.n	800844e <__swsetup_r+0x66>
 8008448:	4630      	mov	r0, r6
 800844a:	f7ff fb75 	bl	8007b38 <_free_r>
 800844e:	2300      	movs	r3, #0
 8008450:	6363      	str	r3, [r4, #52]	; 0x34
 8008452:	89a3      	ldrh	r3, [r4, #12]
 8008454:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008458:	81a3      	strh	r3, [r4, #12]
 800845a:	2300      	movs	r3, #0
 800845c:	6063      	str	r3, [r4, #4]
 800845e:	6923      	ldr	r3, [r4, #16]
 8008460:	6023      	str	r3, [r4, #0]
 8008462:	89a3      	ldrh	r3, [r4, #12]
 8008464:	f043 0308 	orr.w	r3, r3, #8
 8008468:	81a3      	strh	r3, [r4, #12]
 800846a:	6923      	ldr	r3, [r4, #16]
 800846c:	b94b      	cbnz	r3, 8008482 <__swsetup_r+0x9a>
 800846e:	89a3      	ldrh	r3, [r4, #12]
 8008470:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008474:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008478:	d003      	beq.n	8008482 <__swsetup_r+0x9a>
 800847a:	4621      	mov	r1, r4
 800847c:	4630      	mov	r0, r6
 800847e:	f000 fa07 	bl	8008890 <__smakebuf_r>
 8008482:	89a0      	ldrh	r0, [r4, #12]
 8008484:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008488:	f010 0301 	ands.w	r3, r0, #1
 800848c:	d00a      	beq.n	80084a4 <__swsetup_r+0xbc>
 800848e:	2300      	movs	r3, #0
 8008490:	60a3      	str	r3, [r4, #8]
 8008492:	6963      	ldr	r3, [r4, #20]
 8008494:	425b      	negs	r3, r3
 8008496:	61a3      	str	r3, [r4, #24]
 8008498:	6923      	ldr	r3, [r4, #16]
 800849a:	b943      	cbnz	r3, 80084ae <__swsetup_r+0xc6>
 800849c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80084a0:	d1ba      	bne.n	8008418 <__swsetup_r+0x30>
 80084a2:	bd70      	pop	{r4, r5, r6, pc}
 80084a4:	0781      	lsls	r1, r0, #30
 80084a6:	bf58      	it	pl
 80084a8:	6963      	ldrpl	r3, [r4, #20]
 80084aa:	60a3      	str	r3, [r4, #8]
 80084ac:	e7f4      	b.n	8008498 <__swsetup_r+0xb0>
 80084ae:	2000      	movs	r0, #0
 80084b0:	e7f7      	b.n	80084a2 <__swsetup_r+0xba>
 80084b2:	bf00      	nop
 80084b4:	200000a8 	.word	0x200000a8
 80084b8:	0800c704 	.word	0x0800c704
 80084bc:	0800c724 	.word	0x0800c724
 80084c0:	0800c6e4 	.word	0x0800c6e4

080084c4 <abort>:
 80084c4:	2006      	movs	r0, #6
 80084c6:	b508      	push	{r3, lr}
 80084c8:	f000 fa52 	bl	8008970 <raise>
 80084cc:	2001      	movs	r0, #1
 80084ce:	f7f9 fc8c 	bl	8001dea <_exit>
	...

080084d4 <__sflush_r>:
 80084d4:	898a      	ldrh	r2, [r1, #12]
 80084d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084da:	4605      	mov	r5, r0
 80084dc:	0710      	lsls	r0, r2, #28
 80084de:	460c      	mov	r4, r1
 80084e0:	d458      	bmi.n	8008594 <__sflush_r+0xc0>
 80084e2:	684b      	ldr	r3, [r1, #4]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	dc05      	bgt.n	80084f4 <__sflush_r+0x20>
 80084e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	dc02      	bgt.n	80084f4 <__sflush_r+0x20>
 80084ee:	2000      	movs	r0, #0
 80084f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80084f6:	2e00      	cmp	r6, #0
 80084f8:	d0f9      	beq.n	80084ee <__sflush_r+0x1a>
 80084fa:	2300      	movs	r3, #0
 80084fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008500:	682f      	ldr	r7, [r5, #0]
 8008502:	602b      	str	r3, [r5, #0]
 8008504:	d032      	beq.n	800856c <__sflush_r+0x98>
 8008506:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008508:	89a3      	ldrh	r3, [r4, #12]
 800850a:	075a      	lsls	r2, r3, #29
 800850c:	d505      	bpl.n	800851a <__sflush_r+0x46>
 800850e:	6863      	ldr	r3, [r4, #4]
 8008510:	1ac0      	subs	r0, r0, r3
 8008512:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008514:	b10b      	cbz	r3, 800851a <__sflush_r+0x46>
 8008516:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008518:	1ac0      	subs	r0, r0, r3
 800851a:	2300      	movs	r3, #0
 800851c:	4602      	mov	r2, r0
 800851e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008520:	4628      	mov	r0, r5
 8008522:	6a21      	ldr	r1, [r4, #32]
 8008524:	47b0      	blx	r6
 8008526:	1c43      	adds	r3, r0, #1
 8008528:	89a3      	ldrh	r3, [r4, #12]
 800852a:	d106      	bne.n	800853a <__sflush_r+0x66>
 800852c:	6829      	ldr	r1, [r5, #0]
 800852e:	291d      	cmp	r1, #29
 8008530:	d82c      	bhi.n	800858c <__sflush_r+0xb8>
 8008532:	4a2a      	ldr	r2, [pc, #168]	; (80085dc <__sflush_r+0x108>)
 8008534:	40ca      	lsrs	r2, r1
 8008536:	07d6      	lsls	r6, r2, #31
 8008538:	d528      	bpl.n	800858c <__sflush_r+0xb8>
 800853a:	2200      	movs	r2, #0
 800853c:	6062      	str	r2, [r4, #4]
 800853e:	6922      	ldr	r2, [r4, #16]
 8008540:	04d9      	lsls	r1, r3, #19
 8008542:	6022      	str	r2, [r4, #0]
 8008544:	d504      	bpl.n	8008550 <__sflush_r+0x7c>
 8008546:	1c42      	adds	r2, r0, #1
 8008548:	d101      	bne.n	800854e <__sflush_r+0x7a>
 800854a:	682b      	ldr	r3, [r5, #0]
 800854c:	b903      	cbnz	r3, 8008550 <__sflush_r+0x7c>
 800854e:	6560      	str	r0, [r4, #84]	; 0x54
 8008550:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008552:	602f      	str	r7, [r5, #0]
 8008554:	2900      	cmp	r1, #0
 8008556:	d0ca      	beq.n	80084ee <__sflush_r+0x1a>
 8008558:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800855c:	4299      	cmp	r1, r3
 800855e:	d002      	beq.n	8008566 <__sflush_r+0x92>
 8008560:	4628      	mov	r0, r5
 8008562:	f7ff fae9 	bl	8007b38 <_free_r>
 8008566:	2000      	movs	r0, #0
 8008568:	6360      	str	r0, [r4, #52]	; 0x34
 800856a:	e7c1      	b.n	80084f0 <__sflush_r+0x1c>
 800856c:	6a21      	ldr	r1, [r4, #32]
 800856e:	2301      	movs	r3, #1
 8008570:	4628      	mov	r0, r5
 8008572:	47b0      	blx	r6
 8008574:	1c41      	adds	r1, r0, #1
 8008576:	d1c7      	bne.n	8008508 <__sflush_r+0x34>
 8008578:	682b      	ldr	r3, [r5, #0]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d0c4      	beq.n	8008508 <__sflush_r+0x34>
 800857e:	2b1d      	cmp	r3, #29
 8008580:	d001      	beq.n	8008586 <__sflush_r+0xb2>
 8008582:	2b16      	cmp	r3, #22
 8008584:	d101      	bne.n	800858a <__sflush_r+0xb6>
 8008586:	602f      	str	r7, [r5, #0]
 8008588:	e7b1      	b.n	80084ee <__sflush_r+0x1a>
 800858a:	89a3      	ldrh	r3, [r4, #12]
 800858c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008590:	81a3      	strh	r3, [r4, #12]
 8008592:	e7ad      	b.n	80084f0 <__sflush_r+0x1c>
 8008594:	690f      	ldr	r7, [r1, #16]
 8008596:	2f00      	cmp	r7, #0
 8008598:	d0a9      	beq.n	80084ee <__sflush_r+0x1a>
 800859a:	0793      	lsls	r3, r2, #30
 800859c:	bf18      	it	ne
 800859e:	2300      	movne	r3, #0
 80085a0:	680e      	ldr	r6, [r1, #0]
 80085a2:	bf08      	it	eq
 80085a4:	694b      	ldreq	r3, [r1, #20]
 80085a6:	eba6 0807 	sub.w	r8, r6, r7
 80085aa:	600f      	str	r7, [r1, #0]
 80085ac:	608b      	str	r3, [r1, #8]
 80085ae:	f1b8 0f00 	cmp.w	r8, #0
 80085b2:	dd9c      	ble.n	80084ee <__sflush_r+0x1a>
 80085b4:	4643      	mov	r3, r8
 80085b6:	463a      	mov	r2, r7
 80085b8:	4628      	mov	r0, r5
 80085ba:	6a21      	ldr	r1, [r4, #32]
 80085bc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80085be:	47b0      	blx	r6
 80085c0:	2800      	cmp	r0, #0
 80085c2:	dc06      	bgt.n	80085d2 <__sflush_r+0xfe>
 80085c4:	89a3      	ldrh	r3, [r4, #12]
 80085c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085ce:	81a3      	strh	r3, [r4, #12]
 80085d0:	e78e      	b.n	80084f0 <__sflush_r+0x1c>
 80085d2:	4407      	add	r7, r0
 80085d4:	eba8 0800 	sub.w	r8, r8, r0
 80085d8:	e7e9      	b.n	80085ae <__sflush_r+0xda>
 80085da:	bf00      	nop
 80085dc:	20400001 	.word	0x20400001

080085e0 <_fflush_r>:
 80085e0:	b538      	push	{r3, r4, r5, lr}
 80085e2:	690b      	ldr	r3, [r1, #16]
 80085e4:	4605      	mov	r5, r0
 80085e6:	460c      	mov	r4, r1
 80085e8:	b913      	cbnz	r3, 80085f0 <_fflush_r+0x10>
 80085ea:	2500      	movs	r5, #0
 80085ec:	4628      	mov	r0, r5
 80085ee:	bd38      	pop	{r3, r4, r5, pc}
 80085f0:	b118      	cbz	r0, 80085fa <_fflush_r+0x1a>
 80085f2:	6983      	ldr	r3, [r0, #24]
 80085f4:	b90b      	cbnz	r3, 80085fa <_fflush_r+0x1a>
 80085f6:	f000 f887 	bl	8008708 <__sinit>
 80085fa:	4b14      	ldr	r3, [pc, #80]	; (800864c <_fflush_r+0x6c>)
 80085fc:	429c      	cmp	r4, r3
 80085fe:	d11b      	bne.n	8008638 <_fflush_r+0x58>
 8008600:	686c      	ldr	r4, [r5, #4]
 8008602:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d0ef      	beq.n	80085ea <_fflush_r+0xa>
 800860a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800860c:	07d0      	lsls	r0, r2, #31
 800860e:	d404      	bmi.n	800861a <_fflush_r+0x3a>
 8008610:	0599      	lsls	r1, r3, #22
 8008612:	d402      	bmi.n	800861a <_fflush_r+0x3a>
 8008614:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008616:	f000 f915 	bl	8008844 <__retarget_lock_acquire_recursive>
 800861a:	4628      	mov	r0, r5
 800861c:	4621      	mov	r1, r4
 800861e:	f7ff ff59 	bl	80084d4 <__sflush_r>
 8008622:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008624:	4605      	mov	r5, r0
 8008626:	07da      	lsls	r2, r3, #31
 8008628:	d4e0      	bmi.n	80085ec <_fflush_r+0xc>
 800862a:	89a3      	ldrh	r3, [r4, #12]
 800862c:	059b      	lsls	r3, r3, #22
 800862e:	d4dd      	bmi.n	80085ec <_fflush_r+0xc>
 8008630:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008632:	f000 f908 	bl	8008846 <__retarget_lock_release_recursive>
 8008636:	e7d9      	b.n	80085ec <_fflush_r+0xc>
 8008638:	4b05      	ldr	r3, [pc, #20]	; (8008650 <_fflush_r+0x70>)
 800863a:	429c      	cmp	r4, r3
 800863c:	d101      	bne.n	8008642 <_fflush_r+0x62>
 800863e:	68ac      	ldr	r4, [r5, #8]
 8008640:	e7df      	b.n	8008602 <_fflush_r+0x22>
 8008642:	4b04      	ldr	r3, [pc, #16]	; (8008654 <_fflush_r+0x74>)
 8008644:	429c      	cmp	r4, r3
 8008646:	bf08      	it	eq
 8008648:	68ec      	ldreq	r4, [r5, #12]
 800864a:	e7da      	b.n	8008602 <_fflush_r+0x22>
 800864c:	0800c704 	.word	0x0800c704
 8008650:	0800c724 	.word	0x0800c724
 8008654:	0800c6e4 	.word	0x0800c6e4

08008658 <std>:
 8008658:	2300      	movs	r3, #0
 800865a:	b510      	push	{r4, lr}
 800865c:	4604      	mov	r4, r0
 800865e:	e9c0 3300 	strd	r3, r3, [r0]
 8008662:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008666:	6083      	str	r3, [r0, #8]
 8008668:	8181      	strh	r1, [r0, #12]
 800866a:	6643      	str	r3, [r0, #100]	; 0x64
 800866c:	81c2      	strh	r2, [r0, #14]
 800866e:	6183      	str	r3, [r0, #24]
 8008670:	4619      	mov	r1, r3
 8008672:	2208      	movs	r2, #8
 8008674:	305c      	adds	r0, #92	; 0x5c
 8008676:	f7fd fbb1 	bl	8005ddc <memset>
 800867a:	4b05      	ldr	r3, [pc, #20]	; (8008690 <std+0x38>)
 800867c:	6224      	str	r4, [r4, #32]
 800867e:	6263      	str	r3, [r4, #36]	; 0x24
 8008680:	4b04      	ldr	r3, [pc, #16]	; (8008694 <std+0x3c>)
 8008682:	62a3      	str	r3, [r4, #40]	; 0x28
 8008684:	4b04      	ldr	r3, [pc, #16]	; (8008698 <std+0x40>)
 8008686:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008688:	4b04      	ldr	r3, [pc, #16]	; (800869c <std+0x44>)
 800868a:	6323      	str	r3, [r4, #48]	; 0x30
 800868c:	bd10      	pop	{r4, pc}
 800868e:	bf00      	nop
 8008690:	080089a9 	.word	0x080089a9
 8008694:	080089cb 	.word	0x080089cb
 8008698:	08008a03 	.word	0x08008a03
 800869c:	08008a27 	.word	0x08008a27

080086a0 <_cleanup_r>:
 80086a0:	4901      	ldr	r1, [pc, #4]	; (80086a8 <_cleanup_r+0x8>)
 80086a2:	f000 b8af 	b.w	8008804 <_fwalk_reent>
 80086a6:	bf00      	nop
 80086a8:	080085e1 	.word	0x080085e1

080086ac <__sfmoreglue>:
 80086ac:	b570      	push	{r4, r5, r6, lr}
 80086ae:	2568      	movs	r5, #104	; 0x68
 80086b0:	1e4a      	subs	r2, r1, #1
 80086b2:	4355      	muls	r5, r2
 80086b4:	460e      	mov	r6, r1
 80086b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80086ba:	f7ff fa89 	bl	8007bd0 <_malloc_r>
 80086be:	4604      	mov	r4, r0
 80086c0:	b140      	cbz	r0, 80086d4 <__sfmoreglue+0x28>
 80086c2:	2100      	movs	r1, #0
 80086c4:	e9c0 1600 	strd	r1, r6, [r0]
 80086c8:	300c      	adds	r0, #12
 80086ca:	60a0      	str	r0, [r4, #8]
 80086cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80086d0:	f7fd fb84 	bl	8005ddc <memset>
 80086d4:	4620      	mov	r0, r4
 80086d6:	bd70      	pop	{r4, r5, r6, pc}

080086d8 <__sfp_lock_acquire>:
 80086d8:	4801      	ldr	r0, [pc, #4]	; (80086e0 <__sfp_lock_acquire+0x8>)
 80086da:	f000 b8b3 	b.w	8008844 <__retarget_lock_acquire_recursive>
 80086de:	bf00      	nop
 80086e0:	20000bf8 	.word	0x20000bf8

080086e4 <__sfp_lock_release>:
 80086e4:	4801      	ldr	r0, [pc, #4]	; (80086ec <__sfp_lock_release+0x8>)
 80086e6:	f000 b8ae 	b.w	8008846 <__retarget_lock_release_recursive>
 80086ea:	bf00      	nop
 80086ec:	20000bf8 	.word	0x20000bf8

080086f0 <__sinit_lock_acquire>:
 80086f0:	4801      	ldr	r0, [pc, #4]	; (80086f8 <__sinit_lock_acquire+0x8>)
 80086f2:	f000 b8a7 	b.w	8008844 <__retarget_lock_acquire_recursive>
 80086f6:	bf00      	nop
 80086f8:	20000bf3 	.word	0x20000bf3

080086fc <__sinit_lock_release>:
 80086fc:	4801      	ldr	r0, [pc, #4]	; (8008704 <__sinit_lock_release+0x8>)
 80086fe:	f000 b8a2 	b.w	8008846 <__retarget_lock_release_recursive>
 8008702:	bf00      	nop
 8008704:	20000bf3 	.word	0x20000bf3

08008708 <__sinit>:
 8008708:	b510      	push	{r4, lr}
 800870a:	4604      	mov	r4, r0
 800870c:	f7ff fff0 	bl	80086f0 <__sinit_lock_acquire>
 8008710:	69a3      	ldr	r3, [r4, #24]
 8008712:	b11b      	cbz	r3, 800871c <__sinit+0x14>
 8008714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008718:	f7ff bff0 	b.w	80086fc <__sinit_lock_release>
 800871c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008720:	6523      	str	r3, [r4, #80]	; 0x50
 8008722:	4b13      	ldr	r3, [pc, #76]	; (8008770 <__sinit+0x68>)
 8008724:	4a13      	ldr	r2, [pc, #76]	; (8008774 <__sinit+0x6c>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	62a2      	str	r2, [r4, #40]	; 0x28
 800872a:	42a3      	cmp	r3, r4
 800872c:	bf08      	it	eq
 800872e:	2301      	moveq	r3, #1
 8008730:	4620      	mov	r0, r4
 8008732:	bf08      	it	eq
 8008734:	61a3      	streq	r3, [r4, #24]
 8008736:	f000 f81f 	bl	8008778 <__sfp>
 800873a:	6060      	str	r0, [r4, #4]
 800873c:	4620      	mov	r0, r4
 800873e:	f000 f81b 	bl	8008778 <__sfp>
 8008742:	60a0      	str	r0, [r4, #8]
 8008744:	4620      	mov	r0, r4
 8008746:	f000 f817 	bl	8008778 <__sfp>
 800874a:	2200      	movs	r2, #0
 800874c:	2104      	movs	r1, #4
 800874e:	60e0      	str	r0, [r4, #12]
 8008750:	6860      	ldr	r0, [r4, #4]
 8008752:	f7ff ff81 	bl	8008658 <std>
 8008756:	2201      	movs	r2, #1
 8008758:	2109      	movs	r1, #9
 800875a:	68a0      	ldr	r0, [r4, #8]
 800875c:	f7ff ff7c 	bl	8008658 <std>
 8008760:	2202      	movs	r2, #2
 8008762:	2112      	movs	r1, #18
 8008764:	68e0      	ldr	r0, [r4, #12]
 8008766:	f7ff ff77 	bl	8008658 <std>
 800876a:	2301      	movs	r3, #1
 800876c:	61a3      	str	r3, [r4, #24]
 800876e:	e7d1      	b.n	8008714 <__sinit+0xc>
 8008770:	0800c360 	.word	0x0800c360
 8008774:	080086a1 	.word	0x080086a1

08008778 <__sfp>:
 8008778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800877a:	4607      	mov	r7, r0
 800877c:	f7ff ffac 	bl	80086d8 <__sfp_lock_acquire>
 8008780:	4b1e      	ldr	r3, [pc, #120]	; (80087fc <__sfp+0x84>)
 8008782:	681e      	ldr	r6, [r3, #0]
 8008784:	69b3      	ldr	r3, [r6, #24]
 8008786:	b913      	cbnz	r3, 800878e <__sfp+0x16>
 8008788:	4630      	mov	r0, r6
 800878a:	f7ff ffbd 	bl	8008708 <__sinit>
 800878e:	3648      	adds	r6, #72	; 0x48
 8008790:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008794:	3b01      	subs	r3, #1
 8008796:	d503      	bpl.n	80087a0 <__sfp+0x28>
 8008798:	6833      	ldr	r3, [r6, #0]
 800879a:	b30b      	cbz	r3, 80087e0 <__sfp+0x68>
 800879c:	6836      	ldr	r6, [r6, #0]
 800879e:	e7f7      	b.n	8008790 <__sfp+0x18>
 80087a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80087a4:	b9d5      	cbnz	r5, 80087dc <__sfp+0x64>
 80087a6:	4b16      	ldr	r3, [pc, #88]	; (8008800 <__sfp+0x88>)
 80087a8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80087ac:	60e3      	str	r3, [r4, #12]
 80087ae:	6665      	str	r5, [r4, #100]	; 0x64
 80087b0:	f000 f847 	bl	8008842 <__retarget_lock_init_recursive>
 80087b4:	f7ff ff96 	bl	80086e4 <__sfp_lock_release>
 80087b8:	2208      	movs	r2, #8
 80087ba:	4629      	mov	r1, r5
 80087bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80087c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80087c4:	6025      	str	r5, [r4, #0]
 80087c6:	61a5      	str	r5, [r4, #24]
 80087c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80087cc:	f7fd fb06 	bl	8005ddc <memset>
 80087d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80087d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80087d8:	4620      	mov	r0, r4
 80087da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087dc:	3468      	adds	r4, #104	; 0x68
 80087de:	e7d9      	b.n	8008794 <__sfp+0x1c>
 80087e0:	2104      	movs	r1, #4
 80087e2:	4638      	mov	r0, r7
 80087e4:	f7ff ff62 	bl	80086ac <__sfmoreglue>
 80087e8:	4604      	mov	r4, r0
 80087ea:	6030      	str	r0, [r6, #0]
 80087ec:	2800      	cmp	r0, #0
 80087ee:	d1d5      	bne.n	800879c <__sfp+0x24>
 80087f0:	f7ff ff78 	bl	80086e4 <__sfp_lock_release>
 80087f4:	230c      	movs	r3, #12
 80087f6:	603b      	str	r3, [r7, #0]
 80087f8:	e7ee      	b.n	80087d8 <__sfp+0x60>
 80087fa:	bf00      	nop
 80087fc:	0800c360 	.word	0x0800c360
 8008800:	ffff0001 	.word	0xffff0001

08008804 <_fwalk_reent>:
 8008804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008808:	4606      	mov	r6, r0
 800880a:	4688      	mov	r8, r1
 800880c:	2700      	movs	r7, #0
 800880e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008812:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008816:	f1b9 0901 	subs.w	r9, r9, #1
 800881a:	d505      	bpl.n	8008828 <_fwalk_reent+0x24>
 800881c:	6824      	ldr	r4, [r4, #0]
 800881e:	2c00      	cmp	r4, #0
 8008820:	d1f7      	bne.n	8008812 <_fwalk_reent+0xe>
 8008822:	4638      	mov	r0, r7
 8008824:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008828:	89ab      	ldrh	r3, [r5, #12]
 800882a:	2b01      	cmp	r3, #1
 800882c:	d907      	bls.n	800883e <_fwalk_reent+0x3a>
 800882e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008832:	3301      	adds	r3, #1
 8008834:	d003      	beq.n	800883e <_fwalk_reent+0x3a>
 8008836:	4629      	mov	r1, r5
 8008838:	4630      	mov	r0, r6
 800883a:	47c0      	blx	r8
 800883c:	4307      	orrs	r7, r0
 800883e:	3568      	adds	r5, #104	; 0x68
 8008840:	e7e9      	b.n	8008816 <_fwalk_reent+0x12>

08008842 <__retarget_lock_init_recursive>:
 8008842:	4770      	bx	lr

08008844 <__retarget_lock_acquire_recursive>:
 8008844:	4770      	bx	lr

08008846 <__retarget_lock_release_recursive>:
 8008846:	4770      	bx	lr

08008848 <__swhatbuf_r>:
 8008848:	b570      	push	{r4, r5, r6, lr}
 800884a:	460e      	mov	r6, r1
 800884c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008850:	4614      	mov	r4, r2
 8008852:	2900      	cmp	r1, #0
 8008854:	461d      	mov	r5, r3
 8008856:	b096      	sub	sp, #88	; 0x58
 8008858:	da07      	bge.n	800886a <__swhatbuf_r+0x22>
 800885a:	2300      	movs	r3, #0
 800885c:	602b      	str	r3, [r5, #0]
 800885e:	89b3      	ldrh	r3, [r6, #12]
 8008860:	061a      	lsls	r2, r3, #24
 8008862:	d410      	bmi.n	8008886 <__swhatbuf_r+0x3e>
 8008864:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008868:	e00e      	b.n	8008888 <__swhatbuf_r+0x40>
 800886a:	466a      	mov	r2, sp
 800886c:	f000 f902 	bl	8008a74 <_fstat_r>
 8008870:	2800      	cmp	r0, #0
 8008872:	dbf2      	blt.n	800885a <__swhatbuf_r+0x12>
 8008874:	9a01      	ldr	r2, [sp, #4]
 8008876:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800887a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800887e:	425a      	negs	r2, r3
 8008880:	415a      	adcs	r2, r3
 8008882:	602a      	str	r2, [r5, #0]
 8008884:	e7ee      	b.n	8008864 <__swhatbuf_r+0x1c>
 8008886:	2340      	movs	r3, #64	; 0x40
 8008888:	2000      	movs	r0, #0
 800888a:	6023      	str	r3, [r4, #0]
 800888c:	b016      	add	sp, #88	; 0x58
 800888e:	bd70      	pop	{r4, r5, r6, pc}

08008890 <__smakebuf_r>:
 8008890:	898b      	ldrh	r3, [r1, #12]
 8008892:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008894:	079d      	lsls	r5, r3, #30
 8008896:	4606      	mov	r6, r0
 8008898:	460c      	mov	r4, r1
 800889a:	d507      	bpl.n	80088ac <__smakebuf_r+0x1c>
 800889c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80088a0:	6023      	str	r3, [r4, #0]
 80088a2:	6123      	str	r3, [r4, #16]
 80088a4:	2301      	movs	r3, #1
 80088a6:	6163      	str	r3, [r4, #20]
 80088a8:	b002      	add	sp, #8
 80088aa:	bd70      	pop	{r4, r5, r6, pc}
 80088ac:	466a      	mov	r2, sp
 80088ae:	ab01      	add	r3, sp, #4
 80088b0:	f7ff ffca 	bl	8008848 <__swhatbuf_r>
 80088b4:	9900      	ldr	r1, [sp, #0]
 80088b6:	4605      	mov	r5, r0
 80088b8:	4630      	mov	r0, r6
 80088ba:	f7ff f989 	bl	8007bd0 <_malloc_r>
 80088be:	b948      	cbnz	r0, 80088d4 <__smakebuf_r+0x44>
 80088c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088c4:	059a      	lsls	r2, r3, #22
 80088c6:	d4ef      	bmi.n	80088a8 <__smakebuf_r+0x18>
 80088c8:	f023 0303 	bic.w	r3, r3, #3
 80088cc:	f043 0302 	orr.w	r3, r3, #2
 80088d0:	81a3      	strh	r3, [r4, #12]
 80088d2:	e7e3      	b.n	800889c <__smakebuf_r+0xc>
 80088d4:	4b0d      	ldr	r3, [pc, #52]	; (800890c <__smakebuf_r+0x7c>)
 80088d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80088d8:	89a3      	ldrh	r3, [r4, #12]
 80088da:	6020      	str	r0, [r4, #0]
 80088dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088e0:	81a3      	strh	r3, [r4, #12]
 80088e2:	9b00      	ldr	r3, [sp, #0]
 80088e4:	6120      	str	r0, [r4, #16]
 80088e6:	6163      	str	r3, [r4, #20]
 80088e8:	9b01      	ldr	r3, [sp, #4]
 80088ea:	b15b      	cbz	r3, 8008904 <__smakebuf_r+0x74>
 80088ec:	4630      	mov	r0, r6
 80088ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088f2:	f000 f8d1 	bl	8008a98 <_isatty_r>
 80088f6:	b128      	cbz	r0, 8008904 <__smakebuf_r+0x74>
 80088f8:	89a3      	ldrh	r3, [r4, #12]
 80088fa:	f023 0303 	bic.w	r3, r3, #3
 80088fe:	f043 0301 	orr.w	r3, r3, #1
 8008902:	81a3      	strh	r3, [r4, #12]
 8008904:	89a0      	ldrh	r0, [r4, #12]
 8008906:	4305      	orrs	r5, r0
 8008908:	81a5      	strh	r5, [r4, #12]
 800890a:	e7cd      	b.n	80088a8 <__smakebuf_r+0x18>
 800890c:	080086a1 	.word	0x080086a1

08008910 <_malloc_usable_size_r>:
 8008910:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008914:	1f18      	subs	r0, r3, #4
 8008916:	2b00      	cmp	r3, #0
 8008918:	bfbc      	itt	lt
 800891a:	580b      	ldrlt	r3, [r1, r0]
 800891c:	18c0      	addlt	r0, r0, r3
 800891e:	4770      	bx	lr

08008920 <_raise_r>:
 8008920:	291f      	cmp	r1, #31
 8008922:	b538      	push	{r3, r4, r5, lr}
 8008924:	4604      	mov	r4, r0
 8008926:	460d      	mov	r5, r1
 8008928:	d904      	bls.n	8008934 <_raise_r+0x14>
 800892a:	2316      	movs	r3, #22
 800892c:	6003      	str	r3, [r0, #0]
 800892e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008932:	bd38      	pop	{r3, r4, r5, pc}
 8008934:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008936:	b112      	cbz	r2, 800893e <_raise_r+0x1e>
 8008938:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800893c:	b94b      	cbnz	r3, 8008952 <_raise_r+0x32>
 800893e:	4620      	mov	r0, r4
 8008940:	f000 f830 	bl	80089a4 <_getpid_r>
 8008944:	462a      	mov	r2, r5
 8008946:	4601      	mov	r1, r0
 8008948:	4620      	mov	r0, r4
 800894a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800894e:	f000 b817 	b.w	8008980 <_kill_r>
 8008952:	2b01      	cmp	r3, #1
 8008954:	d00a      	beq.n	800896c <_raise_r+0x4c>
 8008956:	1c59      	adds	r1, r3, #1
 8008958:	d103      	bne.n	8008962 <_raise_r+0x42>
 800895a:	2316      	movs	r3, #22
 800895c:	6003      	str	r3, [r0, #0]
 800895e:	2001      	movs	r0, #1
 8008960:	e7e7      	b.n	8008932 <_raise_r+0x12>
 8008962:	2400      	movs	r4, #0
 8008964:	4628      	mov	r0, r5
 8008966:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800896a:	4798      	blx	r3
 800896c:	2000      	movs	r0, #0
 800896e:	e7e0      	b.n	8008932 <_raise_r+0x12>

08008970 <raise>:
 8008970:	4b02      	ldr	r3, [pc, #8]	; (800897c <raise+0xc>)
 8008972:	4601      	mov	r1, r0
 8008974:	6818      	ldr	r0, [r3, #0]
 8008976:	f7ff bfd3 	b.w	8008920 <_raise_r>
 800897a:	bf00      	nop
 800897c:	200000a8 	.word	0x200000a8

08008980 <_kill_r>:
 8008980:	b538      	push	{r3, r4, r5, lr}
 8008982:	2300      	movs	r3, #0
 8008984:	4d06      	ldr	r5, [pc, #24]	; (80089a0 <_kill_r+0x20>)
 8008986:	4604      	mov	r4, r0
 8008988:	4608      	mov	r0, r1
 800898a:	4611      	mov	r1, r2
 800898c:	602b      	str	r3, [r5, #0]
 800898e:	f7f9 fa1c 	bl	8001dca <_kill>
 8008992:	1c43      	adds	r3, r0, #1
 8008994:	d102      	bne.n	800899c <_kill_r+0x1c>
 8008996:	682b      	ldr	r3, [r5, #0]
 8008998:	b103      	cbz	r3, 800899c <_kill_r+0x1c>
 800899a:	6023      	str	r3, [r4, #0]
 800899c:	bd38      	pop	{r3, r4, r5, pc}
 800899e:	bf00      	nop
 80089a0:	20000bec 	.word	0x20000bec

080089a4 <_getpid_r>:
 80089a4:	f7f9 ba0a 	b.w	8001dbc <_getpid>

080089a8 <__sread>:
 80089a8:	b510      	push	{r4, lr}
 80089aa:	460c      	mov	r4, r1
 80089ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089b0:	f000 f894 	bl	8008adc <_read_r>
 80089b4:	2800      	cmp	r0, #0
 80089b6:	bfab      	itete	ge
 80089b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80089ba:	89a3      	ldrhlt	r3, [r4, #12]
 80089bc:	181b      	addge	r3, r3, r0
 80089be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80089c2:	bfac      	ite	ge
 80089c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80089c6:	81a3      	strhlt	r3, [r4, #12]
 80089c8:	bd10      	pop	{r4, pc}

080089ca <__swrite>:
 80089ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089ce:	461f      	mov	r7, r3
 80089d0:	898b      	ldrh	r3, [r1, #12]
 80089d2:	4605      	mov	r5, r0
 80089d4:	05db      	lsls	r3, r3, #23
 80089d6:	460c      	mov	r4, r1
 80089d8:	4616      	mov	r6, r2
 80089da:	d505      	bpl.n	80089e8 <__swrite+0x1e>
 80089dc:	2302      	movs	r3, #2
 80089de:	2200      	movs	r2, #0
 80089e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089e4:	f000 f868 	bl	8008ab8 <_lseek_r>
 80089e8:	89a3      	ldrh	r3, [r4, #12]
 80089ea:	4632      	mov	r2, r6
 80089ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80089f0:	81a3      	strh	r3, [r4, #12]
 80089f2:	4628      	mov	r0, r5
 80089f4:	463b      	mov	r3, r7
 80089f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089fe:	f000 b817 	b.w	8008a30 <_write_r>

08008a02 <__sseek>:
 8008a02:	b510      	push	{r4, lr}
 8008a04:	460c      	mov	r4, r1
 8008a06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a0a:	f000 f855 	bl	8008ab8 <_lseek_r>
 8008a0e:	1c43      	adds	r3, r0, #1
 8008a10:	89a3      	ldrh	r3, [r4, #12]
 8008a12:	bf15      	itete	ne
 8008a14:	6560      	strne	r0, [r4, #84]	; 0x54
 8008a16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008a1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008a1e:	81a3      	strheq	r3, [r4, #12]
 8008a20:	bf18      	it	ne
 8008a22:	81a3      	strhne	r3, [r4, #12]
 8008a24:	bd10      	pop	{r4, pc}

08008a26 <__sclose>:
 8008a26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a2a:	f000 b813 	b.w	8008a54 <_close_r>
	...

08008a30 <_write_r>:
 8008a30:	b538      	push	{r3, r4, r5, lr}
 8008a32:	4604      	mov	r4, r0
 8008a34:	4608      	mov	r0, r1
 8008a36:	4611      	mov	r1, r2
 8008a38:	2200      	movs	r2, #0
 8008a3a:	4d05      	ldr	r5, [pc, #20]	; (8008a50 <_write_r+0x20>)
 8008a3c:	602a      	str	r2, [r5, #0]
 8008a3e:	461a      	mov	r2, r3
 8008a40:	f7f9 f9fa 	bl	8001e38 <_write>
 8008a44:	1c43      	adds	r3, r0, #1
 8008a46:	d102      	bne.n	8008a4e <_write_r+0x1e>
 8008a48:	682b      	ldr	r3, [r5, #0]
 8008a4a:	b103      	cbz	r3, 8008a4e <_write_r+0x1e>
 8008a4c:	6023      	str	r3, [r4, #0]
 8008a4e:	bd38      	pop	{r3, r4, r5, pc}
 8008a50:	20000bec 	.word	0x20000bec

08008a54 <_close_r>:
 8008a54:	b538      	push	{r3, r4, r5, lr}
 8008a56:	2300      	movs	r3, #0
 8008a58:	4d05      	ldr	r5, [pc, #20]	; (8008a70 <_close_r+0x1c>)
 8008a5a:	4604      	mov	r4, r0
 8008a5c:	4608      	mov	r0, r1
 8008a5e:	602b      	str	r3, [r5, #0]
 8008a60:	f7f9 fa06 	bl	8001e70 <_close>
 8008a64:	1c43      	adds	r3, r0, #1
 8008a66:	d102      	bne.n	8008a6e <_close_r+0x1a>
 8008a68:	682b      	ldr	r3, [r5, #0]
 8008a6a:	b103      	cbz	r3, 8008a6e <_close_r+0x1a>
 8008a6c:	6023      	str	r3, [r4, #0]
 8008a6e:	bd38      	pop	{r3, r4, r5, pc}
 8008a70:	20000bec 	.word	0x20000bec

08008a74 <_fstat_r>:
 8008a74:	b538      	push	{r3, r4, r5, lr}
 8008a76:	2300      	movs	r3, #0
 8008a78:	4d06      	ldr	r5, [pc, #24]	; (8008a94 <_fstat_r+0x20>)
 8008a7a:	4604      	mov	r4, r0
 8008a7c:	4608      	mov	r0, r1
 8008a7e:	4611      	mov	r1, r2
 8008a80:	602b      	str	r3, [r5, #0]
 8008a82:	f7f9 fa00 	bl	8001e86 <_fstat>
 8008a86:	1c43      	adds	r3, r0, #1
 8008a88:	d102      	bne.n	8008a90 <_fstat_r+0x1c>
 8008a8a:	682b      	ldr	r3, [r5, #0]
 8008a8c:	b103      	cbz	r3, 8008a90 <_fstat_r+0x1c>
 8008a8e:	6023      	str	r3, [r4, #0]
 8008a90:	bd38      	pop	{r3, r4, r5, pc}
 8008a92:	bf00      	nop
 8008a94:	20000bec 	.word	0x20000bec

08008a98 <_isatty_r>:
 8008a98:	b538      	push	{r3, r4, r5, lr}
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	4d05      	ldr	r5, [pc, #20]	; (8008ab4 <_isatty_r+0x1c>)
 8008a9e:	4604      	mov	r4, r0
 8008aa0:	4608      	mov	r0, r1
 8008aa2:	602b      	str	r3, [r5, #0]
 8008aa4:	f7f9 f9fe 	bl	8001ea4 <_isatty>
 8008aa8:	1c43      	adds	r3, r0, #1
 8008aaa:	d102      	bne.n	8008ab2 <_isatty_r+0x1a>
 8008aac:	682b      	ldr	r3, [r5, #0]
 8008aae:	b103      	cbz	r3, 8008ab2 <_isatty_r+0x1a>
 8008ab0:	6023      	str	r3, [r4, #0]
 8008ab2:	bd38      	pop	{r3, r4, r5, pc}
 8008ab4:	20000bec 	.word	0x20000bec

08008ab8 <_lseek_r>:
 8008ab8:	b538      	push	{r3, r4, r5, lr}
 8008aba:	4604      	mov	r4, r0
 8008abc:	4608      	mov	r0, r1
 8008abe:	4611      	mov	r1, r2
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	4d05      	ldr	r5, [pc, #20]	; (8008ad8 <_lseek_r+0x20>)
 8008ac4:	602a      	str	r2, [r5, #0]
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	f7f9 f9f6 	bl	8001eb8 <_lseek>
 8008acc:	1c43      	adds	r3, r0, #1
 8008ace:	d102      	bne.n	8008ad6 <_lseek_r+0x1e>
 8008ad0:	682b      	ldr	r3, [r5, #0]
 8008ad2:	b103      	cbz	r3, 8008ad6 <_lseek_r+0x1e>
 8008ad4:	6023      	str	r3, [r4, #0]
 8008ad6:	bd38      	pop	{r3, r4, r5, pc}
 8008ad8:	20000bec 	.word	0x20000bec

08008adc <_read_r>:
 8008adc:	b538      	push	{r3, r4, r5, lr}
 8008ade:	4604      	mov	r4, r0
 8008ae0:	4608      	mov	r0, r1
 8008ae2:	4611      	mov	r1, r2
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	4d05      	ldr	r5, [pc, #20]	; (8008afc <_read_r+0x20>)
 8008ae8:	602a      	str	r2, [r5, #0]
 8008aea:	461a      	mov	r2, r3
 8008aec:	f7f9 f987 	bl	8001dfe <_read>
 8008af0:	1c43      	adds	r3, r0, #1
 8008af2:	d102      	bne.n	8008afa <_read_r+0x1e>
 8008af4:	682b      	ldr	r3, [r5, #0]
 8008af6:	b103      	cbz	r3, 8008afa <_read_r+0x1e>
 8008af8:	6023      	str	r3, [r4, #0]
 8008afa:	bd38      	pop	{r3, r4, r5, pc}
 8008afc:	20000bec 	.word	0x20000bec

08008b00 <cos>:
 8008b00:	b530      	push	{r4, r5, lr}
 8008b02:	4a1e      	ldr	r2, [pc, #120]	; (8008b7c <cos+0x7c>)
 8008b04:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	b087      	sub	sp, #28
 8008b0c:	dc04      	bgt.n	8008b18 <cos+0x18>
 8008b0e:	2200      	movs	r2, #0
 8008b10:	2300      	movs	r3, #0
 8008b12:	f000 fc1d 	bl	8009350 <__kernel_cos>
 8008b16:	e006      	b.n	8008b26 <cos+0x26>
 8008b18:	4a19      	ldr	r2, [pc, #100]	; (8008b80 <cos+0x80>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	dd05      	ble.n	8008b2a <cos+0x2a>
 8008b1e:	4602      	mov	r2, r0
 8008b20:	460b      	mov	r3, r1
 8008b22:	f7f7 fb21 	bl	8000168 <__aeabi_dsub>
 8008b26:	b007      	add	sp, #28
 8008b28:	bd30      	pop	{r4, r5, pc}
 8008b2a:	aa02      	add	r2, sp, #8
 8008b2c:	f000 f974 	bl	8008e18 <__ieee754_rem_pio2>
 8008b30:	f000 0003 	and.w	r0, r0, #3
 8008b34:	2801      	cmp	r0, #1
 8008b36:	d007      	beq.n	8008b48 <cos+0x48>
 8008b38:	2802      	cmp	r0, #2
 8008b3a:	d00f      	beq.n	8008b5c <cos+0x5c>
 8008b3c:	b9a8      	cbnz	r0, 8008b6a <cos+0x6a>
 8008b3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b46:	e7e4      	b.n	8008b12 <cos+0x12>
 8008b48:	9000      	str	r0, [sp, #0]
 8008b4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b52:	f001 f805 	bl	8009b60 <__kernel_sin>
 8008b56:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8008b5a:	e7e4      	b.n	8008b26 <cos+0x26>
 8008b5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b64:	f000 fbf4 	bl	8009350 <__kernel_cos>
 8008b68:	e7f5      	b.n	8008b56 <cos+0x56>
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b70:	9300      	str	r3, [sp, #0]
 8008b72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b76:	f000 fff3 	bl	8009b60 <__kernel_sin>
 8008b7a:	e7d4      	b.n	8008b26 <cos+0x26>
 8008b7c:	3fe921fb 	.word	0x3fe921fb
 8008b80:	7fefffff 	.word	0x7fefffff

08008b84 <sin>:
 8008b84:	b530      	push	{r4, r5, lr}
 8008b86:	4a20      	ldr	r2, [pc, #128]	; (8008c08 <sin+0x84>)
 8008b88:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	b087      	sub	sp, #28
 8008b90:	dc06      	bgt.n	8008ba0 <sin+0x1c>
 8008b92:	2300      	movs	r3, #0
 8008b94:	2200      	movs	r2, #0
 8008b96:	9300      	str	r3, [sp, #0]
 8008b98:	2300      	movs	r3, #0
 8008b9a:	f000 ffe1 	bl	8009b60 <__kernel_sin>
 8008b9e:	e006      	b.n	8008bae <sin+0x2a>
 8008ba0:	4a1a      	ldr	r2, [pc, #104]	; (8008c0c <sin+0x88>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	dd05      	ble.n	8008bb2 <sin+0x2e>
 8008ba6:	4602      	mov	r2, r0
 8008ba8:	460b      	mov	r3, r1
 8008baa:	f7f7 fadd 	bl	8000168 <__aeabi_dsub>
 8008bae:	b007      	add	sp, #28
 8008bb0:	bd30      	pop	{r4, r5, pc}
 8008bb2:	aa02      	add	r2, sp, #8
 8008bb4:	f000 f930 	bl	8008e18 <__ieee754_rem_pio2>
 8008bb8:	f000 0003 	and.w	r0, r0, #3
 8008bbc:	2801      	cmp	r0, #1
 8008bbe:	d009      	beq.n	8008bd4 <sin+0x50>
 8008bc0:	2802      	cmp	r0, #2
 8008bc2:	d00e      	beq.n	8008be2 <sin+0x5e>
 8008bc4:	b9c0      	cbnz	r0, 8008bf8 <sin+0x74>
 8008bc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bca:	2301      	movs	r3, #1
 8008bcc:	9300      	str	r3, [sp, #0]
 8008bce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008bd2:	e7e2      	b.n	8008b9a <sin+0x16>
 8008bd4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008bd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bdc:	f000 fbb8 	bl	8009350 <__kernel_cos>
 8008be0:	e7e5      	b.n	8008bae <sin+0x2a>
 8008be2:	2301      	movs	r3, #1
 8008be4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008be8:	9300      	str	r3, [sp, #0]
 8008bea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008bee:	f000 ffb7 	bl	8009b60 <__kernel_sin>
 8008bf2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8008bf6:	e7da      	b.n	8008bae <sin+0x2a>
 8008bf8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008bfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c00:	f000 fba6 	bl	8009350 <__kernel_cos>
 8008c04:	e7f5      	b.n	8008bf2 <sin+0x6e>
 8008c06:	bf00      	nop
 8008c08:	3fe921fb 	.word	0x3fe921fb
 8008c0c:	7fefffff 	.word	0x7fefffff

08008c10 <atan2>:
 8008c10:	f000 b82e 	b.w	8008c70 <__ieee754_atan2>

08008c14 <sqrt>:
 8008c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c16:	4606      	mov	r6, r0
 8008c18:	460f      	mov	r7, r1
 8008c1a:	f000 faed 	bl	80091f8 <__ieee754_sqrt>
 8008c1e:	4b12      	ldr	r3, [pc, #72]	; (8008c68 <sqrt+0x54>)
 8008c20:	4604      	mov	r4, r0
 8008c22:	f993 3000 	ldrsb.w	r3, [r3]
 8008c26:	460d      	mov	r5, r1
 8008c28:	3301      	adds	r3, #1
 8008c2a:	d019      	beq.n	8008c60 <sqrt+0x4c>
 8008c2c:	4632      	mov	r2, r6
 8008c2e:	463b      	mov	r3, r7
 8008c30:	4630      	mov	r0, r6
 8008c32:	4639      	mov	r1, r7
 8008c34:	f7f7 feea 	bl	8000a0c <__aeabi_dcmpun>
 8008c38:	b990      	cbnz	r0, 8008c60 <sqrt+0x4c>
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	4630      	mov	r0, r6
 8008c40:	4639      	mov	r1, r7
 8008c42:	f7f7 febb 	bl	80009bc <__aeabi_dcmplt>
 8008c46:	b158      	cbz	r0, 8008c60 <sqrt+0x4c>
 8008c48:	f7fd f890 	bl	8005d6c <__errno>
 8008c4c:	2321      	movs	r3, #33	; 0x21
 8008c4e:	2200      	movs	r2, #0
 8008c50:	6003      	str	r3, [r0, #0]
 8008c52:	2300      	movs	r3, #0
 8008c54:	4610      	mov	r0, r2
 8008c56:	4619      	mov	r1, r3
 8008c58:	f7f7 fd68 	bl	800072c <__aeabi_ddiv>
 8008c5c:	4604      	mov	r4, r0
 8008c5e:	460d      	mov	r5, r1
 8008c60:	4620      	mov	r0, r4
 8008c62:	4629      	mov	r1, r5
 8008c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c66:	bf00      	nop
 8008c68:	20000278 	.word	0x20000278
 8008c6c:	00000000 	.word	0x00000000

08008c70 <__ieee754_atan2>:
 8008c70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c74:	4692      	mov	sl, r2
 8008c76:	4699      	mov	r9, r3
 8008c78:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008c7c:	461f      	mov	r7, r3
 8008c7e:	f1ca 0300 	rsb	r3, sl, #0
 8008c82:	f8df e18c 	ldr.w	lr, [pc, #396]	; 8008e10 <__ieee754_atan2+0x1a0>
 8008c86:	ea43 030a 	orr.w	r3, r3, sl
 8008c8a:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008c8e:	4573      	cmp	r3, lr
 8008c90:	4604      	mov	r4, r0
 8008c92:	460d      	mov	r5, r1
 8008c94:	d808      	bhi.n	8008ca8 <__ieee754_atan2+0x38>
 8008c96:	4246      	negs	r6, r0
 8008c98:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008c9c:	4306      	orrs	r6, r0
 8008c9e:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8008ca2:	4576      	cmp	r6, lr
 8008ca4:	468c      	mov	ip, r1
 8008ca6:	d908      	bls.n	8008cba <__ieee754_atan2+0x4a>
 8008ca8:	4652      	mov	r2, sl
 8008caa:	464b      	mov	r3, r9
 8008cac:	4620      	mov	r0, r4
 8008cae:	4629      	mov	r1, r5
 8008cb0:	f7f7 fa5c 	bl	800016c <__adddf3>
 8008cb4:	4604      	mov	r4, r0
 8008cb6:	460d      	mov	r5, r1
 8008cb8:	e019      	b.n	8008cee <__ieee754_atan2+0x7e>
 8008cba:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 8008cbe:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8008cc2:	ea56 060a 	orrs.w	r6, r6, sl
 8008cc6:	d103      	bne.n	8008cd0 <__ieee754_atan2+0x60>
 8008cc8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ccc:	f001 b800 	b.w	8009cd0 <atan>
 8008cd0:	17be      	asrs	r6, r7, #30
 8008cd2:	f006 0602 	and.w	r6, r6, #2
 8008cd6:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8008cda:	ea53 0100 	orrs.w	r1, r3, r0
 8008cde:	d10a      	bne.n	8008cf6 <__ieee754_atan2+0x86>
 8008ce0:	2e02      	cmp	r6, #2
 8008ce2:	d067      	beq.n	8008db4 <__ieee754_atan2+0x144>
 8008ce4:	2e03      	cmp	r6, #3
 8008ce6:	d102      	bne.n	8008cee <__ieee754_atan2+0x7e>
 8008ce8:	a53b      	add	r5, pc, #236	; (adr r5, 8008dd8 <__ieee754_atan2+0x168>)
 8008cea:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008cee:	4620      	mov	r0, r4
 8008cf0:	4629      	mov	r1, r5
 8008cf2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cf6:	ea52 010a 	orrs.w	r1, r2, sl
 8008cfa:	d106      	bne.n	8008d0a <__ieee754_atan2+0x9a>
 8008cfc:	f1bc 0f00 	cmp.w	ip, #0
 8008d00:	da63      	bge.n	8008dca <__ieee754_atan2+0x15a>
 8008d02:	a537      	add	r5, pc, #220	; (adr r5, 8008de0 <__ieee754_atan2+0x170>)
 8008d04:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008d08:	e7f1      	b.n	8008cee <__ieee754_atan2+0x7e>
 8008d0a:	4572      	cmp	r2, lr
 8008d0c:	d10f      	bne.n	8008d2e <__ieee754_atan2+0xbe>
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 8008d14:	d107      	bne.n	8008d26 <__ieee754_atan2+0xb6>
 8008d16:	2e02      	cmp	r6, #2
 8008d18:	d850      	bhi.n	8008dbc <__ieee754_atan2+0x14c>
 8008d1a:	4b3b      	ldr	r3, [pc, #236]	; (8008e08 <__ieee754_atan2+0x198>)
 8008d1c:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008d20:	e9d6 4500 	ldrd	r4, r5, [r6]
 8008d24:	e7e3      	b.n	8008cee <__ieee754_atan2+0x7e>
 8008d26:	2e02      	cmp	r6, #2
 8008d28:	d84c      	bhi.n	8008dc4 <__ieee754_atan2+0x154>
 8008d2a:	4b38      	ldr	r3, [pc, #224]	; (8008e0c <__ieee754_atan2+0x19c>)
 8008d2c:	e7f6      	b.n	8008d1c <__ieee754_atan2+0xac>
 8008d2e:	4573      	cmp	r3, lr
 8008d30:	d0e4      	beq.n	8008cfc <__ieee754_atan2+0x8c>
 8008d32:	1a9b      	subs	r3, r3, r2
 8008d34:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8008d38:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008d3c:	da20      	bge.n	8008d80 <__ieee754_atan2+0x110>
 8008d3e:	2f00      	cmp	r7, #0
 8008d40:	da01      	bge.n	8008d46 <__ieee754_atan2+0xd6>
 8008d42:	323c      	adds	r2, #60	; 0x3c
 8008d44:	db20      	blt.n	8008d88 <__ieee754_atan2+0x118>
 8008d46:	4652      	mov	r2, sl
 8008d48:	464b      	mov	r3, r9
 8008d4a:	4620      	mov	r0, r4
 8008d4c:	4629      	mov	r1, r5
 8008d4e:	f7f7 fced 	bl	800072c <__aeabi_ddiv>
 8008d52:	f001 f947 	bl	8009fe4 <fabs>
 8008d56:	f000 ffbb 	bl	8009cd0 <atan>
 8008d5a:	4604      	mov	r4, r0
 8008d5c:	460d      	mov	r5, r1
 8008d5e:	2e01      	cmp	r6, #1
 8008d60:	d015      	beq.n	8008d8e <__ieee754_atan2+0x11e>
 8008d62:	2e02      	cmp	r6, #2
 8008d64:	d017      	beq.n	8008d96 <__ieee754_atan2+0x126>
 8008d66:	2e00      	cmp	r6, #0
 8008d68:	d0c1      	beq.n	8008cee <__ieee754_atan2+0x7e>
 8008d6a:	a31f      	add	r3, pc, #124	; (adr r3, 8008de8 <__ieee754_atan2+0x178>)
 8008d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d70:	4620      	mov	r0, r4
 8008d72:	4629      	mov	r1, r5
 8008d74:	f7f7 f9f8 	bl	8000168 <__aeabi_dsub>
 8008d78:	a31d      	add	r3, pc, #116	; (adr r3, 8008df0 <__ieee754_atan2+0x180>)
 8008d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d7e:	e016      	b.n	8008dae <__ieee754_atan2+0x13e>
 8008d80:	a51d      	add	r5, pc, #116	; (adr r5, 8008df8 <__ieee754_atan2+0x188>)
 8008d82:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008d86:	e7ea      	b.n	8008d5e <__ieee754_atan2+0xee>
 8008d88:	2400      	movs	r4, #0
 8008d8a:	2500      	movs	r5, #0
 8008d8c:	e7e7      	b.n	8008d5e <__ieee754_atan2+0xee>
 8008d8e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008d92:	461d      	mov	r5, r3
 8008d94:	e7ab      	b.n	8008cee <__ieee754_atan2+0x7e>
 8008d96:	a314      	add	r3, pc, #80	; (adr r3, 8008de8 <__ieee754_atan2+0x178>)
 8008d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d9c:	4620      	mov	r0, r4
 8008d9e:	4629      	mov	r1, r5
 8008da0:	f7f7 f9e2 	bl	8000168 <__aeabi_dsub>
 8008da4:	4602      	mov	r2, r0
 8008da6:	460b      	mov	r3, r1
 8008da8:	a111      	add	r1, pc, #68	; (adr r1, 8008df0 <__ieee754_atan2+0x180>)
 8008daa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008dae:	f7f7 f9db 	bl	8000168 <__aeabi_dsub>
 8008db2:	e77f      	b.n	8008cb4 <__ieee754_atan2+0x44>
 8008db4:	a50e      	add	r5, pc, #56	; (adr r5, 8008df0 <__ieee754_atan2+0x180>)
 8008db6:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008dba:	e798      	b.n	8008cee <__ieee754_atan2+0x7e>
 8008dbc:	a510      	add	r5, pc, #64	; (adr r5, 8008e00 <__ieee754_atan2+0x190>)
 8008dbe:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008dc2:	e794      	b.n	8008cee <__ieee754_atan2+0x7e>
 8008dc4:	2400      	movs	r4, #0
 8008dc6:	2500      	movs	r5, #0
 8008dc8:	e791      	b.n	8008cee <__ieee754_atan2+0x7e>
 8008dca:	a50b      	add	r5, pc, #44	; (adr r5, 8008df8 <__ieee754_atan2+0x188>)
 8008dcc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008dd0:	e78d      	b.n	8008cee <__ieee754_atan2+0x7e>
 8008dd2:	bf00      	nop
 8008dd4:	f3af 8000 	nop.w
 8008dd8:	54442d18 	.word	0x54442d18
 8008ddc:	c00921fb 	.word	0xc00921fb
 8008de0:	54442d18 	.word	0x54442d18
 8008de4:	bff921fb 	.word	0xbff921fb
 8008de8:	33145c07 	.word	0x33145c07
 8008dec:	3ca1a626 	.word	0x3ca1a626
 8008df0:	54442d18 	.word	0x54442d18
 8008df4:	400921fb 	.word	0x400921fb
 8008df8:	54442d18 	.word	0x54442d18
 8008dfc:	3ff921fb 	.word	0x3ff921fb
 8008e00:	54442d18 	.word	0x54442d18
 8008e04:	3fe921fb 	.word	0x3fe921fb
 8008e08:	0800c748 	.word	0x0800c748
 8008e0c:	0800c760 	.word	0x0800c760
 8008e10:	7ff00000 	.word	0x7ff00000
 8008e14:	00000000 	.word	0x00000000

08008e18 <__ieee754_rem_pio2>:
 8008e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e1c:	4614      	mov	r4, r2
 8008e1e:	4ac4      	ldr	r2, [pc, #784]	; (8009130 <__ieee754_rem_pio2+0x318>)
 8008e20:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8008e24:	b08d      	sub	sp, #52	; 0x34
 8008e26:	4592      	cmp	sl, r2
 8008e28:	9104      	str	r1, [sp, #16]
 8008e2a:	dc07      	bgt.n	8008e3c <__ieee754_rem_pio2+0x24>
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	2300      	movs	r3, #0
 8008e30:	e9c4 0100 	strd	r0, r1, [r4]
 8008e34:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8008e38:	2500      	movs	r5, #0
 8008e3a:	e024      	b.n	8008e86 <__ieee754_rem_pio2+0x6e>
 8008e3c:	4abd      	ldr	r2, [pc, #756]	; (8009134 <__ieee754_rem_pio2+0x31c>)
 8008e3e:	4592      	cmp	sl, r2
 8008e40:	dc72      	bgt.n	8008f28 <__ieee754_rem_pio2+0x110>
 8008e42:	9b04      	ldr	r3, [sp, #16]
 8008e44:	4dbc      	ldr	r5, [pc, #752]	; (8009138 <__ieee754_rem_pio2+0x320>)
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	a3ab      	add	r3, pc, #684	; (adr r3, 80090f8 <__ieee754_rem_pio2+0x2e0>)
 8008e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e4e:	dd36      	ble.n	8008ebe <__ieee754_rem_pio2+0xa6>
 8008e50:	f7f7 f98a 	bl	8000168 <__aeabi_dsub>
 8008e54:	45aa      	cmp	sl, r5
 8008e56:	4606      	mov	r6, r0
 8008e58:	460f      	mov	r7, r1
 8008e5a:	d018      	beq.n	8008e8e <__ieee754_rem_pio2+0x76>
 8008e5c:	a3a8      	add	r3, pc, #672	; (adr r3, 8009100 <__ieee754_rem_pio2+0x2e8>)
 8008e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e62:	f7f7 f981 	bl	8000168 <__aeabi_dsub>
 8008e66:	4602      	mov	r2, r0
 8008e68:	460b      	mov	r3, r1
 8008e6a:	4630      	mov	r0, r6
 8008e6c:	e9c4 2300 	strd	r2, r3, [r4]
 8008e70:	4639      	mov	r1, r7
 8008e72:	f7f7 f979 	bl	8000168 <__aeabi_dsub>
 8008e76:	a3a2      	add	r3, pc, #648	; (adr r3, 8009100 <__ieee754_rem_pio2+0x2e8>)
 8008e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e7c:	f7f7 f974 	bl	8000168 <__aeabi_dsub>
 8008e80:	2501      	movs	r5, #1
 8008e82:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008e86:	4628      	mov	r0, r5
 8008e88:	b00d      	add	sp, #52	; 0x34
 8008e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e8e:	a39e      	add	r3, pc, #632	; (adr r3, 8009108 <__ieee754_rem_pio2+0x2f0>)
 8008e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e94:	f7f7 f968 	bl	8000168 <__aeabi_dsub>
 8008e98:	a39d      	add	r3, pc, #628	; (adr r3, 8009110 <__ieee754_rem_pio2+0x2f8>)
 8008e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e9e:	4606      	mov	r6, r0
 8008ea0:	460f      	mov	r7, r1
 8008ea2:	f7f7 f961 	bl	8000168 <__aeabi_dsub>
 8008ea6:	4602      	mov	r2, r0
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	4630      	mov	r0, r6
 8008eac:	e9c4 2300 	strd	r2, r3, [r4]
 8008eb0:	4639      	mov	r1, r7
 8008eb2:	f7f7 f959 	bl	8000168 <__aeabi_dsub>
 8008eb6:	a396      	add	r3, pc, #600	; (adr r3, 8009110 <__ieee754_rem_pio2+0x2f8>)
 8008eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ebc:	e7de      	b.n	8008e7c <__ieee754_rem_pio2+0x64>
 8008ebe:	f7f7 f955 	bl	800016c <__adddf3>
 8008ec2:	45aa      	cmp	sl, r5
 8008ec4:	4606      	mov	r6, r0
 8008ec6:	460f      	mov	r7, r1
 8008ec8:	d016      	beq.n	8008ef8 <__ieee754_rem_pio2+0xe0>
 8008eca:	a38d      	add	r3, pc, #564	; (adr r3, 8009100 <__ieee754_rem_pio2+0x2e8>)
 8008ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed0:	f7f7 f94c 	bl	800016c <__adddf3>
 8008ed4:	4602      	mov	r2, r0
 8008ed6:	460b      	mov	r3, r1
 8008ed8:	4630      	mov	r0, r6
 8008eda:	e9c4 2300 	strd	r2, r3, [r4]
 8008ede:	4639      	mov	r1, r7
 8008ee0:	f7f7 f942 	bl	8000168 <__aeabi_dsub>
 8008ee4:	a386      	add	r3, pc, #536	; (adr r3, 8009100 <__ieee754_rem_pio2+0x2e8>)
 8008ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eea:	f7f7 f93f 	bl	800016c <__adddf3>
 8008eee:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008ef2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008ef6:	e7c6      	b.n	8008e86 <__ieee754_rem_pio2+0x6e>
 8008ef8:	a383      	add	r3, pc, #524	; (adr r3, 8009108 <__ieee754_rem_pio2+0x2f0>)
 8008efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008efe:	f7f7 f935 	bl	800016c <__adddf3>
 8008f02:	a383      	add	r3, pc, #524	; (adr r3, 8009110 <__ieee754_rem_pio2+0x2f8>)
 8008f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f08:	4606      	mov	r6, r0
 8008f0a:	460f      	mov	r7, r1
 8008f0c:	f7f7 f92e 	bl	800016c <__adddf3>
 8008f10:	4602      	mov	r2, r0
 8008f12:	460b      	mov	r3, r1
 8008f14:	4630      	mov	r0, r6
 8008f16:	e9c4 2300 	strd	r2, r3, [r4]
 8008f1a:	4639      	mov	r1, r7
 8008f1c:	f7f7 f924 	bl	8000168 <__aeabi_dsub>
 8008f20:	a37b      	add	r3, pc, #492	; (adr r3, 8009110 <__ieee754_rem_pio2+0x2f8>)
 8008f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f26:	e7e0      	b.n	8008eea <__ieee754_rem_pio2+0xd2>
 8008f28:	4a84      	ldr	r2, [pc, #528]	; (800913c <__ieee754_rem_pio2+0x324>)
 8008f2a:	4592      	cmp	sl, r2
 8008f2c:	f300 80d5 	bgt.w	80090da <__ieee754_rem_pio2+0x2c2>
 8008f30:	f001 f858 	bl	8009fe4 <fabs>
 8008f34:	a378      	add	r3, pc, #480	; (adr r3, 8009118 <__ieee754_rem_pio2+0x300>)
 8008f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f3a:	4606      	mov	r6, r0
 8008f3c:	460f      	mov	r7, r1
 8008f3e:	f7f7 facb 	bl	80004d8 <__aeabi_dmul>
 8008f42:	2200      	movs	r2, #0
 8008f44:	4b7e      	ldr	r3, [pc, #504]	; (8009140 <__ieee754_rem_pio2+0x328>)
 8008f46:	f7f7 f911 	bl	800016c <__adddf3>
 8008f4a:	f7f7 fd75 	bl	8000a38 <__aeabi_d2iz>
 8008f4e:	4605      	mov	r5, r0
 8008f50:	f7f7 fa58 	bl	8000404 <__aeabi_i2d>
 8008f54:	4602      	mov	r2, r0
 8008f56:	460b      	mov	r3, r1
 8008f58:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008f5c:	a366      	add	r3, pc, #408	; (adr r3, 80090f8 <__ieee754_rem_pio2+0x2e0>)
 8008f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f62:	f7f7 fab9 	bl	80004d8 <__aeabi_dmul>
 8008f66:	4602      	mov	r2, r0
 8008f68:	460b      	mov	r3, r1
 8008f6a:	4630      	mov	r0, r6
 8008f6c:	4639      	mov	r1, r7
 8008f6e:	f7f7 f8fb 	bl	8000168 <__aeabi_dsub>
 8008f72:	a363      	add	r3, pc, #396	; (adr r3, 8009100 <__ieee754_rem_pio2+0x2e8>)
 8008f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f78:	4680      	mov	r8, r0
 8008f7a:	4689      	mov	r9, r1
 8008f7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f80:	f7f7 faaa 	bl	80004d8 <__aeabi_dmul>
 8008f84:	2d1f      	cmp	r5, #31
 8008f86:	4606      	mov	r6, r0
 8008f88:	460f      	mov	r7, r1
 8008f8a:	dc0e      	bgt.n	8008faa <__ieee754_rem_pio2+0x192>
 8008f8c:	4b6d      	ldr	r3, [pc, #436]	; (8009144 <__ieee754_rem_pio2+0x32c>)
 8008f8e:	1e6a      	subs	r2, r5, #1
 8008f90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f94:	4553      	cmp	r3, sl
 8008f96:	d008      	beq.n	8008faa <__ieee754_rem_pio2+0x192>
 8008f98:	4632      	mov	r2, r6
 8008f9a:	463b      	mov	r3, r7
 8008f9c:	4640      	mov	r0, r8
 8008f9e:	4649      	mov	r1, r9
 8008fa0:	f7f7 f8e2 	bl	8000168 <__aeabi_dsub>
 8008fa4:	e9c4 0100 	strd	r0, r1, [r4]
 8008fa8:	e013      	b.n	8008fd2 <__ieee754_rem_pio2+0x1ba>
 8008faa:	463b      	mov	r3, r7
 8008fac:	4632      	mov	r2, r6
 8008fae:	4640      	mov	r0, r8
 8008fb0:	4649      	mov	r1, r9
 8008fb2:	f7f7 f8d9 	bl	8000168 <__aeabi_dsub>
 8008fb6:	ea4f 532a 	mov.w	r3, sl, asr #20
 8008fba:	9305      	str	r3, [sp, #20]
 8008fbc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008fc0:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 8008fc4:	f1ba 0f10 	cmp.w	sl, #16
 8008fc8:	dc1f      	bgt.n	800900a <__ieee754_rem_pio2+0x1f2>
 8008fca:	4602      	mov	r2, r0
 8008fcc:	460b      	mov	r3, r1
 8008fce:	e9c4 2300 	strd	r2, r3, [r4]
 8008fd2:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8008fd6:	4640      	mov	r0, r8
 8008fd8:	4653      	mov	r3, sl
 8008fda:	4649      	mov	r1, r9
 8008fdc:	f7f7 f8c4 	bl	8000168 <__aeabi_dsub>
 8008fe0:	4632      	mov	r2, r6
 8008fe2:	463b      	mov	r3, r7
 8008fe4:	f7f7 f8c0 	bl	8000168 <__aeabi_dsub>
 8008fe8:	460b      	mov	r3, r1
 8008fea:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008fee:	9904      	ldr	r1, [sp, #16]
 8008ff0:	4602      	mov	r2, r0
 8008ff2:	2900      	cmp	r1, #0
 8008ff4:	f6bf af47 	bge.w	8008e86 <__ieee754_rem_pio2+0x6e>
 8008ff8:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 8008ffc:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8009000:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009004:	60e3      	str	r3, [r4, #12]
 8009006:	426d      	negs	r5, r5
 8009008:	e73d      	b.n	8008e86 <__ieee754_rem_pio2+0x6e>
 800900a:	a33f      	add	r3, pc, #252	; (adr r3, 8009108 <__ieee754_rem_pio2+0x2f0>)
 800900c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009010:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009014:	f7f7 fa60 	bl	80004d8 <__aeabi_dmul>
 8009018:	4606      	mov	r6, r0
 800901a:	460f      	mov	r7, r1
 800901c:	4602      	mov	r2, r0
 800901e:	460b      	mov	r3, r1
 8009020:	4640      	mov	r0, r8
 8009022:	4649      	mov	r1, r9
 8009024:	f7f7 f8a0 	bl	8000168 <__aeabi_dsub>
 8009028:	4602      	mov	r2, r0
 800902a:	460b      	mov	r3, r1
 800902c:	4682      	mov	sl, r0
 800902e:	468b      	mov	fp, r1
 8009030:	4640      	mov	r0, r8
 8009032:	4649      	mov	r1, r9
 8009034:	f7f7 f898 	bl	8000168 <__aeabi_dsub>
 8009038:	4632      	mov	r2, r6
 800903a:	463b      	mov	r3, r7
 800903c:	f7f7 f894 	bl	8000168 <__aeabi_dsub>
 8009040:	a333      	add	r3, pc, #204	; (adr r3, 8009110 <__ieee754_rem_pio2+0x2f8>)
 8009042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009046:	4606      	mov	r6, r0
 8009048:	460f      	mov	r7, r1
 800904a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800904e:	f7f7 fa43 	bl	80004d8 <__aeabi_dmul>
 8009052:	4632      	mov	r2, r6
 8009054:	463b      	mov	r3, r7
 8009056:	f7f7 f887 	bl	8000168 <__aeabi_dsub>
 800905a:	4602      	mov	r2, r0
 800905c:	460b      	mov	r3, r1
 800905e:	4606      	mov	r6, r0
 8009060:	460f      	mov	r7, r1
 8009062:	4650      	mov	r0, sl
 8009064:	4659      	mov	r1, fp
 8009066:	f7f7 f87f 	bl	8000168 <__aeabi_dsub>
 800906a:	9a05      	ldr	r2, [sp, #20]
 800906c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009070:	1ad3      	subs	r3, r2, r3
 8009072:	2b31      	cmp	r3, #49	; 0x31
 8009074:	dc06      	bgt.n	8009084 <__ieee754_rem_pio2+0x26c>
 8009076:	4602      	mov	r2, r0
 8009078:	460b      	mov	r3, r1
 800907a:	46d0      	mov	r8, sl
 800907c:	46d9      	mov	r9, fp
 800907e:	e9c4 2300 	strd	r2, r3, [r4]
 8009082:	e7a6      	b.n	8008fd2 <__ieee754_rem_pio2+0x1ba>
 8009084:	a326      	add	r3, pc, #152	; (adr r3, 8009120 <__ieee754_rem_pio2+0x308>)
 8009086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800908a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800908e:	f7f7 fa23 	bl	80004d8 <__aeabi_dmul>
 8009092:	4606      	mov	r6, r0
 8009094:	460f      	mov	r7, r1
 8009096:	4602      	mov	r2, r0
 8009098:	460b      	mov	r3, r1
 800909a:	4650      	mov	r0, sl
 800909c:	4659      	mov	r1, fp
 800909e:	f7f7 f863 	bl	8000168 <__aeabi_dsub>
 80090a2:	4602      	mov	r2, r0
 80090a4:	460b      	mov	r3, r1
 80090a6:	4680      	mov	r8, r0
 80090a8:	4689      	mov	r9, r1
 80090aa:	4650      	mov	r0, sl
 80090ac:	4659      	mov	r1, fp
 80090ae:	f7f7 f85b 	bl	8000168 <__aeabi_dsub>
 80090b2:	4632      	mov	r2, r6
 80090b4:	463b      	mov	r3, r7
 80090b6:	f7f7 f857 	bl	8000168 <__aeabi_dsub>
 80090ba:	a31b      	add	r3, pc, #108	; (adr r3, 8009128 <__ieee754_rem_pio2+0x310>)
 80090bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c0:	4606      	mov	r6, r0
 80090c2:	460f      	mov	r7, r1
 80090c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80090c8:	f7f7 fa06 	bl	80004d8 <__aeabi_dmul>
 80090cc:	4632      	mov	r2, r6
 80090ce:	463b      	mov	r3, r7
 80090d0:	f7f7 f84a 	bl	8000168 <__aeabi_dsub>
 80090d4:	4606      	mov	r6, r0
 80090d6:	460f      	mov	r7, r1
 80090d8:	e75e      	b.n	8008f98 <__ieee754_rem_pio2+0x180>
 80090da:	4a1b      	ldr	r2, [pc, #108]	; (8009148 <__ieee754_rem_pio2+0x330>)
 80090dc:	4592      	cmp	sl, r2
 80090de:	dd35      	ble.n	800914c <__ieee754_rem_pio2+0x334>
 80090e0:	4602      	mov	r2, r0
 80090e2:	460b      	mov	r3, r1
 80090e4:	f7f7 f840 	bl	8000168 <__aeabi_dsub>
 80090e8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80090ec:	e9c4 0100 	strd	r0, r1, [r4]
 80090f0:	e6a2      	b.n	8008e38 <__ieee754_rem_pio2+0x20>
 80090f2:	bf00      	nop
 80090f4:	f3af 8000 	nop.w
 80090f8:	54400000 	.word	0x54400000
 80090fc:	3ff921fb 	.word	0x3ff921fb
 8009100:	1a626331 	.word	0x1a626331
 8009104:	3dd0b461 	.word	0x3dd0b461
 8009108:	1a600000 	.word	0x1a600000
 800910c:	3dd0b461 	.word	0x3dd0b461
 8009110:	2e037073 	.word	0x2e037073
 8009114:	3ba3198a 	.word	0x3ba3198a
 8009118:	6dc9c883 	.word	0x6dc9c883
 800911c:	3fe45f30 	.word	0x3fe45f30
 8009120:	2e000000 	.word	0x2e000000
 8009124:	3ba3198a 	.word	0x3ba3198a
 8009128:	252049c1 	.word	0x252049c1
 800912c:	397b839a 	.word	0x397b839a
 8009130:	3fe921fb 	.word	0x3fe921fb
 8009134:	4002d97b 	.word	0x4002d97b
 8009138:	3ff921fb 	.word	0x3ff921fb
 800913c:	413921fb 	.word	0x413921fb
 8009140:	3fe00000 	.word	0x3fe00000
 8009144:	0800c778 	.word	0x0800c778
 8009148:	7fefffff 	.word	0x7fefffff
 800914c:	ea4f 552a 	mov.w	r5, sl, asr #20
 8009150:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8009154:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8009158:	460f      	mov	r7, r1
 800915a:	4606      	mov	r6, r0
 800915c:	f7f7 fc6c 	bl	8000a38 <__aeabi_d2iz>
 8009160:	f7f7 f950 	bl	8000404 <__aeabi_i2d>
 8009164:	4602      	mov	r2, r0
 8009166:	460b      	mov	r3, r1
 8009168:	4630      	mov	r0, r6
 800916a:	4639      	mov	r1, r7
 800916c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009170:	f7f6 fffa 	bl	8000168 <__aeabi_dsub>
 8009174:	2200      	movs	r2, #0
 8009176:	4b1e      	ldr	r3, [pc, #120]	; (80091f0 <__ieee754_rem_pio2+0x3d8>)
 8009178:	f7f7 f9ae 	bl	80004d8 <__aeabi_dmul>
 800917c:	460f      	mov	r7, r1
 800917e:	4606      	mov	r6, r0
 8009180:	f7f7 fc5a 	bl	8000a38 <__aeabi_d2iz>
 8009184:	f7f7 f93e 	bl	8000404 <__aeabi_i2d>
 8009188:	4602      	mov	r2, r0
 800918a:	460b      	mov	r3, r1
 800918c:	4630      	mov	r0, r6
 800918e:	4639      	mov	r1, r7
 8009190:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009194:	f7f6 ffe8 	bl	8000168 <__aeabi_dsub>
 8009198:	2200      	movs	r2, #0
 800919a:	4b15      	ldr	r3, [pc, #84]	; (80091f0 <__ieee754_rem_pio2+0x3d8>)
 800919c:	f7f7 f99c 	bl	80004d8 <__aeabi_dmul>
 80091a0:	f04f 0803 	mov.w	r8, #3
 80091a4:	2600      	movs	r6, #0
 80091a6:	2700      	movs	r7, #0
 80091a8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80091ac:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 80091b0:	4632      	mov	r2, r6
 80091b2:	e879 0102 	ldrd	r0, r1, [r9], #-8
 80091b6:	463b      	mov	r3, r7
 80091b8:	46c2      	mov	sl, r8
 80091ba:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80091be:	f7f7 fbf3 	bl	80009a8 <__aeabi_dcmpeq>
 80091c2:	2800      	cmp	r0, #0
 80091c4:	d1f4      	bne.n	80091b0 <__ieee754_rem_pio2+0x398>
 80091c6:	4b0b      	ldr	r3, [pc, #44]	; (80091f4 <__ieee754_rem_pio2+0x3dc>)
 80091c8:	462a      	mov	r2, r5
 80091ca:	9301      	str	r3, [sp, #4]
 80091cc:	2302      	movs	r3, #2
 80091ce:	4621      	mov	r1, r4
 80091d0:	9300      	str	r3, [sp, #0]
 80091d2:	a806      	add	r0, sp, #24
 80091d4:	4653      	mov	r3, sl
 80091d6:	f000 f979 	bl	80094cc <__kernel_rem_pio2>
 80091da:	9b04      	ldr	r3, [sp, #16]
 80091dc:	4605      	mov	r5, r0
 80091de:	2b00      	cmp	r3, #0
 80091e0:	f6bf ae51 	bge.w	8008e86 <__ieee754_rem_pio2+0x6e>
 80091e4:	6863      	ldr	r3, [r4, #4]
 80091e6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80091ea:	6063      	str	r3, [r4, #4]
 80091ec:	68e3      	ldr	r3, [r4, #12]
 80091ee:	e707      	b.n	8009000 <__ieee754_rem_pio2+0x1e8>
 80091f0:	41700000 	.word	0x41700000
 80091f4:	0800c7f8 	.word	0x0800c7f8

080091f8 <__ieee754_sqrt>:
 80091f8:	f8df c150 	ldr.w	ip, [pc, #336]	; 800934c <__ieee754_sqrt+0x154>
 80091fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009200:	ea3c 0c01 	bics.w	ip, ip, r1
 8009204:	460b      	mov	r3, r1
 8009206:	4606      	mov	r6, r0
 8009208:	460d      	mov	r5, r1
 800920a:	460a      	mov	r2, r1
 800920c:	4607      	mov	r7, r0
 800920e:	4604      	mov	r4, r0
 8009210:	d10e      	bne.n	8009230 <__ieee754_sqrt+0x38>
 8009212:	4602      	mov	r2, r0
 8009214:	f7f7 f960 	bl	80004d8 <__aeabi_dmul>
 8009218:	4602      	mov	r2, r0
 800921a:	460b      	mov	r3, r1
 800921c:	4630      	mov	r0, r6
 800921e:	4629      	mov	r1, r5
 8009220:	f7f6 ffa4 	bl	800016c <__adddf3>
 8009224:	4606      	mov	r6, r0
 8009226:	460d      	mov	r5, r1
 8009228:	4630      	mov	r0, r6
 800922a:	4629      	mov	r1, r5
 800922c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009230:	2900      	cmp	r1, #0
 8009232:	dc0d      	bgt.n	8009250 <__ieee754_sqrt+0x58>
 8009234:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8009238:	ea5c 0707 	orrs.w	r7, ip, r7
 800923c:	d0f4      	beq.n	8009228 <__ieee754_sqrt+0x30>
 800923e:	b139      	cbz	r1, 8009250 <__ieee754_sqrt+0x58>
 8009240:	4602      	mov	r2, r0
 8009242:	f7f6 ff91 	bl	8000168 <__aeabi_dsub>
 8009246:	4602      	mov	r2, r0
 8009248:	460b      	mov	r3, r1
 800924a:	f7f7 fa6f 	bl	800072c <__aeabi_ddiv>
 800924e:	e7e9      	b.n	8009224 <__ieee754_sqrt+0x2c>
 8009250:	1512      	asrs	r2, r2, #20
 8009252:	d074      	beq.n	800933e <__ieee754_sqrt+0x146>
 8009254:	2000      	movs	r0, #0
 8009256:	07d5      	lsls	r5, r2, #31
 8009258:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800925c:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 8009260:	bf5e      	ittt	pl
 8009262:	0fe3      	lsrpl	r3, r4, #31
 8009264:	0064      	lslpl	r4, r4, #1
 8009266:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800926a:	0fe3      	lsrs	r3, r4, #31
 800926c:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8009270:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8009274:	2516      	movs	r5, #22
 8009276:	4601      	mov	r1, r0
 8009278:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800927c:	1076      	asrs	r6, r6, #1
 800927e:	0064      	lsls	r4, r4, #1
 8009280:	188f      	adds	r7, r1, r2
 8009282:	429f      	cmp	r7, r3
 8009284:	bfde      	ittt	le
 8009286:	1bdb      	suble	r3, r3, r7
 8009288:	18b9      	addle	r1, r7, r2
 800928a:	1880      	addle	r0, r0, r2
 800928c:	005b      	lsls	r3, r3, #1
 800928e:	3d01      	subs	r5, #1
 8009290:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8009294:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8009298:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800929c:	d1f0      	bne.n	8009280 <__ieee754_sqrt+0x88>
 800929e:	462a      	mov	r2, r5
 80092a0:	f04f 0e20 	mov.w	lr, #32
 80092a4:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 80092a8:	428b      	cmp	r3, r1
 80092aa:	eb07 0c05 	add.w	ip, r7, r5
 80092ae:	dc02      	bgt.n	80092b6 <__ieee754_sqrt+0xbe>
 80092b0:	d113      	bne.n	80092da <__ieee754_sqrt+0xe2>
 80092b2:	45a4      	cmp	ip, r4
 80092b4:	d811      	bhi.n	80092da <__ieee754_sqrt+0xe2>
 80092b6:	f1bc 0f00 	cmp.w	ip, #0
 80092ba:	eb0c 0507 	add.w	r5, ip, r7
 80092be:	da43      	bge.n	8009348 <__ieee754_sqrt+0x150>
 80092c0:	2d00      	cmp	r5, #0
 80092c2:	db41      	blt.n	8009348 <__ieee754_sqrt+0x150>
 80092c4:	f101 0801 	add.w	r8, r1, #1
 80092c8:	1a5b      	subs	r3, r3, r1
 80092ca:	4641      	mov	r1, r8
 80092cc:	45a4      	cmp	ip, r4
 80092ce:	bf88      	it	hi
 80092d0:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 80092d4:	eba4 040c 	sub.w	r4, r4, ip
 80092d8:	443a      	add	r2, r7
 80092da:	005b      	lsls	r3, r3, #1
 80092dc:	f1be 0e01 	subs.w	lr, lr, #1
 80092e0:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80092e4:	ea4f 0757 	mov.w	r7, r7, lsr #1
 80092e8:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80092ec:	d1dc      	bne.n	80092a8 <__ieee754_sqrt+0xb0>
 80092ee:	4323      	orrs	r3, r4
 80092f0:	d006      	beq.n	8009300 <__ieee754_sqrt+0x108>
 80092f2:	1c54      	adds	r4, r2, #1
 80092f4:	bf0b      	itete	eq
 80092f6:	4672      	moveq	r2, lr
 80092f8:	3201      	addne	r2, #1
 80092fa:	3001      	addeq	r0, #1
 80092fc:	f022 0201 	bicne.w	r2, r2, #1
 8009300:	1043      	asrs	r3, r0, #1
 8009302:	07c1      	lsls	r1, r0, #31
 8009304:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8009308:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800930c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009310:	bf48      	it	mi
 8009312:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8009316:	4610      	mov	r0, r2
 8009318:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800931c:	e782      	b.n	8009224 <__ieee754_sqrt+0x2c>
 800931e:	0ae3      	lsrs	r3, r4, #11
 8009320:	3915      	subs	r1, #21
 8009322:	0564      	lsls	r4, r4, #21
 8009324:	2b00      	cmp	r3, #0
 8009326:	d0fa      	beq.n	800931e <__ieee754_sqrt+0x126>
 8009328:	02de      	lsls	r6, r3, #11
 800932a:	d50a      	bpl.n	8009342 <__ieee754_sqrt+0x14a>
 800932c:	f1c2 0020 	rsb	r0, r2, #32
 8009330:	fa24 f000 	lsr.w	r0, r4, r0
 8009334:	1e55      	subs	r5, r2, #1
 8009336:	4094      	lsls	r4, r2
 8009338:	4303      	orrs	r3, r0
 800933a:	1b4a      	subs	r2, r1, r5
 800933c:	e78a      	b.n	8009254 <__ieee754_sqrt+0x5c>
 800933e:	4611      	mov	r1, r2
 8009340:	e7f0      	b.n	8009324 <__ieee754_sqrt+0x12c>
 8009342:	005b      	lsls	r3, r3, #1
 8009344:	3201      	adds	r2, #1
 8009346:	e7ef      	b.n	8009328 <__ieee754_sqrt+0x130>
 8009348:	4688      	mov	r8, r1
 800934a:	e7bd      	b.n	80092c8 <__ieee754_sqrt+0xd0>
 800934c:	7ff00000 	.word	0x7ff00000

08009350 <__kernel_cos>:
 8009350:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009354:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009358:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800935c:	4680      	mov	r8, r0
 800935e:	460f      	mov	r7, r1
 8009360:	e9cd 2300 	strd	r2, r3, [sp]
 8009364:	da04      	bge.n	8009370 <__kernel_cos+0x20>
 8009366:	f7f7 fb67 	bl	8000a38 <__aeabi_d2iz>
 800936a:	2800      	cmp	r0, #0
 800936c:	f000 8086 	beq.w	800947c <__kernel_cos+0x12c>
 8009370:	4642      	mov	r2, r8
 8009372:	463b      	mov	r3, r7
 8009374:	4640      	mov	r0, r8
 8009376:	4639      	mov	r1, r7
 8009378:	f7f7 f8ae 	bl	80004d8 <__aeabi_dmul>
 800937c:	2200      	movs	r2, #0
 800937e:	4b4e      	ldr	r3, [pc, #312]	; (80094b8 <__kernel_cos+0x168>)
 8009380:	4604      	mov	r4, r0
 8009382:	460d      	mov	r5, r1
 8009384:	f7f7 f8a8 	bl	80004d8 <__aeabi_dmul>
 8009388:	a33f      	add	r3, pc, #252	; (adr r3, 8009488 <__kernel_cos+0x138>)
 800938a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800938e:	4682      	mov	sl, r0
 8009390:	468b      	mov	fp, r1
 8009392:	4620      	mov	r0, r4
 8009394:	4629      	mov	r1, r5
 8009396:	f7f7 f89f 	bl	80004d8 <__aeabi_dmul>
 800939a:	a33d      	add	r3, pc, #244	; (adr r3, 8009490 <__kernel_cos+0x140>)
 800939c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a0:	f7f6 fee4 	bl	800016c <__adddf3>
 80093a4:	4622      	mov	r2, r4
 80093a6:	462b      	mov	r3, r5
 80093a8:	f7f7 f896 	bl	80004d8 <__aeabi_dmul>
 80093ac:	a33a      	add	r3, pc, #232	; (adr r3, 8009498 <__kernel_cos+0x148>)
 80093ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b2:	f7f6 fed9 	bl	8000168 <__aeabi_dsub>
 80093b6:	4622      	mov	r2, r4
 80093b8:	462b      	mov	r3, r5
 80093ba:	f7f7 f88d 	bl	80004d8 <__aeabi_dmul>
 80093be:	a338      	add	r3, pc, #224	; (adr r3, 80094a0 <__kernel_cos+0x150>)
 80093c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c4:	f7f6 fed2 	bl	800016c <__adddf3>
 80093c8:	4622      	mov	r2, r4
 80093ca:	462b      	mov	r3, r5
 80093cc:	f7f7 f884 	bl	80004d8 <__aeabi_dmul>
 80093d0:	a335      	add	r3, pc, #212	; (adr r3, 80094a8 <__kernel_cos+0x158>)
 80093d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d6:	f7f6 fec7 	bl	8000168 <__aeabi_dsub>
 80093da:	4622      	mov	r2, r4
 80093dc:	462b      	mov	r3, r5
 80093de:	f7f7 f87b 	bl	80004d8 <__aeabi_dmul>
 80093e2:	a333      	add	r3, pc, #204	; (adr r3, 80094b0 <__kernel_cos+0x160>)
 80093e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e8:	f7f6 fec0 	bl	800016c <__adddf3>
 80093ec:	4622      	mov	r2, r4
 80093ee:	462b      	mov	r3, r5
 80093f0:	f7f7 f872 	bl	80004d8 <__aeabi_dmul>
 80093f4:	4622      	mov	r2, r4
 80093f6:	462b      	mov	r3, r5
 80093f8:	f7f7 f86e 	bl	80004d8 <__aeabi_dmul>
 80093fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009400:	4604      	mov	r4, r0
 8009402:	460d      	mov	r5, r1
 8009404:	4640      	mov	r0, r8
 8009406:	4639      	mov	r1, r7
 8009408:	f7f7 f866 	bl	80004d8 <__aeabi_dmul>
 800940c:	460b      	mov	r3, r1
 800940e:	4602      	mov	r2, r0
 8009410:	4629      	mov	r1, r5
 8009412:	4620      	mov	r0, r4
 8009414:	f7f6 fea8 	bl	8000168 <__aeabi_dsub>
 8009418:	4b28      	ldr	r3, [pc, #160]	; (80094bc <__kernel_cos+0x16c>)
 800941a:	4680      	mov	r8, r0
 800941c:	429e      	cmp	r6, r3
 800941e:	4689      	mov	r9, r1
 8009420:	dc0e      	bgt.n	8009440 <__kernel_cos+0xf0>
 8009422:	4602      	mov	r2, r0
 8009424:	460b      	mov	r3, r1
 8009426:	4650      	mov	r0, sl
 8009428:	4659      	mov	r1, fp
 800942a:	f7f6 fe9d 	bl	8000168 <__aeabi_dsub>
 800942e:	4602      	mov	r2, r0
 8009430:	2000      	movs	r0, #0
 8009432:	460b      	mov	r3, r1
 8009434:	4922      	ldr	r1, [pc, #136]	; (80094c0 <__kernel_cos+0x170>)
 8009436:	f7f6 fe97 	bl	8000168 <__aeabi_dsub>
 800943a:	b003      	add	sp, #12
 800943c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009440:	2400      	movs	r4, #0
 8009442:	4b20      	ldr	r3, [pc, #128]	; (80094c4 <__kernel_cos+0x174>)
 8009444:	4622      	mov	r2, r4
 8009446:	429e      	cmp	r6, r3
 8009448:	bfcc      	ite	gt
 800944a:	4d1f      	ldrgt	r5, [pc, #124]	; (80094c8 <__kernel_cos+0x178>)
 800944c:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8009450:	462b      	mov	r3, r5
 8009452:	2000      	movs	r0, #0
 8009454:	491a      	ldr	r1, [pc, #104]	; (80094c0 <__kernel_cos+0x170>)
 8009456:	f7f6 fe87 	bl	8000168 <__aeabi_dsub>
 800945a:	4622      	mov	r2, r4
 800945c:	4606      	mov	r6, r0
 800945e:	460f      	mov	r7, r1
 8009460:	462b      	mov	r3, r5
 8009462:	4650      	mov	r0, sl
 8009464:	4659      	mov	r1, fp
 8009466:	f7f6 fe7f 	bl	8000168 <__aeabi_dsub>
 800946a:	4642      	mov	r2, r8
 800946c:	464b      	mov	r3, r9
 800946e:	f7f6 fe7b 	bl	8000168 <__aeabi_dsub>
 8009472:	4602      	mov	r2, r0
 8009474:	460b      	mov	r3, r1
 8009476:	4630      	mov	r0, r6
 8009478:	4639      	mov	r1, r7
 800947a:	e7dc      	b.n	8009436 <__kernel_cos+0xe6>
 800947c:	2000      	movs	r0, #0
 800947e:	4910      	ldr	r1, [pc, #64]	; (80094c0 <__kernel_cos+0x170>)
 8009480:	e7db      	b.n	800943a <__kernel_cos+0xea>
 8009482:	bf00      	nop
 8009484:	f3af 8000 	nop.w
 8009488:	be8838d4 	.word	0xbe8838d4
 800948c:	bda8fae9 	.word	0xbda8fae9
 8009490:	bdb4b1c4 	.word	0xbdb4b1c4
 8009494:	3e21ee9e 	.word	0x3e21ee9e
 8009498:	809c52ad 	.word	0x809c52ad
 800949c:	3e927e4f 	.word	0x3e927e4f
 80094a0:	19cb1590 	.word	0x19cb1590
 80094a4:	3efa01a0 	.word	0x3efa01a0
 80094a8:	16c15177 	.word	0x16c15177
 80094ac:	3f56c16c 	.word	0x3f56c16c
 80094b0:	5555554c 	.word	0x5555554c
 80094b4:	3fa55555 	.word	0x3fa55555
 80094b8:	3fe00000 	.word	0x3fe00000
 80094bc:	3fd33332 	.word	0x3fd33332
 80094c0:	3ff00000 	.word	0x3ff00000
 80094c4:	3fe90000 	.word	0x3fe90000
 80094c8:	3fd20000 	.word	0x3fd20000

080094cc <__kernel_rem_pio2>:
 80094cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094d0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80094d4:	9308      	str	r3, [sp, #32]
 80094d6:	9101      	str	r1, [sp, #4]
 80094d8:	4bc0      	ldr	r3, [pc, #768]	; (80097dc <__kernel_rem_pio2+0x310>)
 80094da:	99a2      	ldr	r1, [sp, #648]	; 0x288
 80094dc:	f112 0f14 	cmn.w	r2, #20
 80094e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80094e4:	bfa8      	it	ge
 80094e6:	1ed4      	subge	r4, r2, #3
 80094e8:	9304      	str	r3, [sp, #16]
 80094ea:	9b08      	ldr	r3, [sp, #32]
 80094ec:	bfb8      	it	lt
 80094ee:	2400      	movlt	r4, #0
 80094f0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80094f4:	9306      	str	r3, [sp, #24]
 80094f6:	bfa4      	itt	ge
 80094f8:	2318      	movge	r3, #24
 80094fa:	fb94 f4f3 	sdivge	r4, r4, r3
 80094fe:	f06f 0317 	mvn.w	r3, #23
 8009502:	fb04 3303 	mla	r3, r4, r3, r3
 8009506:	eb03 0a02 	add.w	sl, r3, r2
 800950a:	9a06      	ldr	r2, [sp, #24]
 800950c:	9b04      	ldr	r3, [sp, #16]
 800950e:	1aa7      	subs	r7, r4, r2
 8009510:	eb03 0802 	add.w	r8, r3, r2
 8009514:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8009516:	2500      	movs	r5, #0
 8009518:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800951c:	2200      	movs	r2, #0
 800951e:	2300      	movs	r3, #0
 8009520:	9009      	str	r0, [sp, #36]	; 0x24
 8009522:	ae20      	add	r6, sp, #128	; 0x80
 8009524:	4545      	cmp	r5, r8
 8009526:	dd19      	ble.n	800955c <__kernel_rem_pio2+0x90>
 8009528:	9b08      	ldr	r3, [sp, #32]
 800952a:	aa20      	add	r2, sp, #128	; 0x80
 800952c:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8009530:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8009534:	f1c3 0301 	rsb	r3, r3, #1
 8009538:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800953c:	9307      	str	r3, [sp, #28]
 800953e:	9b07      	ldr	r3, [sp, #28]
 8009540:	9a04      	ldr	r2, [sp, #16]
 8009542:	4443      	add	r3, r8
 8009544:	429a      	cmp	r2, r3
 8009546:	db35      	blt.n	80095b4 <__kernel_rem_pio2+0xe8>
 8009548:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800954a:	2200      	movs	r2, #0
 800954c:	f1a3 0908 	sub.w	r9, r3, #8
 8009550:	2300      	movs	r3, #0
 8009552:	462f      	mov	r7, r5
 8009554:	2600      	movs	r6, #0
 8009556:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800955a:	e01f      	b.n	800959c <__kernel_rem_pio2+0xd0>
 800955c:	42ef      	cmn	r7, r5
 800955e:	d40b      	bmi.n	8009578 <__kernel_rem_pio2+0xac>
 8009560:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8009564:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009568:	f7f6 ff4c 	bl	8000404 <__aeabi_i2d>
 800956c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009570:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009574:	3501      	adds	r5, #1
 8009576:	e7d5      	b.n	8009524 <__kernel_rem_pio2+0x58>
 8009578:	4610      	mov	r0, r2
 800957a:	4619      	mov	r1, r3
 800957c:	e7f8      	b.n	8009570 <__kernel_rem_pio2+0xa4>
 800957e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009582:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8009586:	f7f6 ffa7 	bl	80004d8 <__aeabi_dmul>
 800958a:	4602      	mov	r2, r0
 800958c:	460b      	mov	r3, r1
 800958e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009592:	f7f6 fdeb 	bl	800016c <__adddf3>
 8009596:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800959a:	3601      	adds	r6, #1
 800959c:	9b06      	ldr	r3, [sp, #24]
 800959e:	3f08      	subs	r7, #8
 80095a0:	429e      	cmp	r6, r3
 80095a2:	ddec      	ble.n	800957e <__kernel_rem_pio2+0xb2>
 80095a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80095a8:	3508      	adds	r5, #8
 80095aa:	e8eb 2302 	strd	r2, r3, [fp], #8
 80095ae:	f108 0801 	add.w	r8, r8, #1
 80095b2:	e7c4      	b.n	800953e <__kernel_rem_pio2+0x72>
 80095b4:	9b04      	ldr	r3, [sp, #16]
 80095b6:	aa0c      	add	r2, sp, #48	; 0x30
 80095b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80095bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80095be:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80095c0:	9f04      	ldr	r7, [sp, #16]
 80095c2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80095c6:	930a      	str	r3, [sp, #40]	; 0x28
 80095c8:	463e      	mov	r6, r7
 80095ca:	ab98      	add	r3, sp, #608	; 0x260
 80095cc:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 80095d0:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80095d4:	f8cd b008 	str.w	fp, [sp, #8]
 80095d8:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 80095dc:	2e00      	cmp	r6, #0
 80095de:	dc71      	bgt.n	80096c4 <__kernel_rem_pio2+0x1f8>
 80095e0:	4652      	mov	r2, sl
 80095e2:	4620      	mov	r0, r4
 80095e4:	4629      	mov	r1, r5
 80095e6:	f000 fd83 	bl	800a0f0 <scalbn>
 80095ea:	2200      	movs	r2, #0
 80095ec:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80095f0:	4604      	mov	r4, r0
 80095f2:	460d      	mov	r5, r1
 80095f4:	f7f6 ff70 	bl	80004d8 <__aeabi_dmul>
 80095f8:	f000 fcfa 	bl	8009ff0 <floor>
 80095fc:	2200      	movs	r2, #0
 80095fe:	4b78      	ldr	r3, [pc, #480]	; (80097e0 <__kernel_rem_pio2+0x314>)
 8009600:	f7f6 ff6a 	bl	80004d8 <__aeabi_dmul>
 8009604:	4602      	mov	r2, r0
 8009606:	460b      	mov	r3, r1
 8009608:	4620      	mov	r0, r4
 800960a:	4629      	mov	r1, r5
 800960c:	f7f6 fdac 	bl	8000168 <__aeabi_dsub>
 8009610:	460d      	mov	r5, r1
 8009612:	4604      	mov	r4, r0
 8009614:	f7f7 fa10 	bl	8000a38 <__aeabi_d2iz>
 8009618:	9007      	str	r0, [sp, #28]
 800961a:	f7f6 fef3 	bl	8000404 <__aeabi_i2d>
 800961e:	4602      	mov	r2, r0
 8009620:	460b      	mov	r3, r1
 8009622:	4620      	mov	r0, r4
 8009624:	4629      	mov	r1, r5
 8009626:	f7f6 fd9f 	bl	8000168 <__aeabi_dsub>
 800962a:	f1ba 0f00 	cmp.w	sl, #0
 800962e:	4680      	mov	r8, r0
 8009630:	4689      	mov	r9, r1
 8009632:	dd70      	ble.n	8009716 <__kernel_rem_pio2+0x24a>
 8009634:	1e7a      	subs	r2, r7, #1
 8009636:	ab0c      	add	r3, sp, #48	; 0x30
 8009638:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800963c:	9c07      	ldr	r4, [sp, #28]
 800963e:	f1ca 0118 	rsb	r1, sl, #24
 8009642:	fa40 f301 	asr.w	r3, r0, r1
 8009646:	441c      	add	r4, r3
 8009648:	408b      	lsls	r3, r1
 800964a:	1ac0      	subs	r0, r0, r3
 800964c:	ab0c      	add	r3, sp, #48	; 0x30
 800964e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8009652:	f1ca 0317 	rsb	r3, sl, #23
 8009656:	9407      	str	r4, [sp, #28]
 8009658:	fa40 f303 	asr.w	r3, r0, r3
 800965c:	9302      	str	r3, [sp, #8]
 800965e:	9b02      	ldr	r3, [sp, #8]
 8009660:	2b00      	cmp	r3, #0
 8009662:	dd66      	ble.n	8009732 <__kernel_rem_pio2+0x266>
 8009664:	2200      	movs	r2, #0
 8009666:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800966a:	4614      	mov	r4, r2
 800966c:	9b07      	ldr	r3, [sp, #28]
 800966e:	3301      	adds	r3, #1
 8009670:	9307      	str	r3, [sp, #28]
 8009672:	4297      	cmp	r7, r2
 8009674:	f300 809f 	bgt.w	80097b6 <__kernel_rem_pio2+0x2ea>
 8009678:	f1ba 0f00 	cmp.w	sl, #0
 800967c:	dd07      	ble.n	800968e <__kernel_rem_pio2+0x1c2>
 800967e:	f1ba 0f01 	cmp.w	sl, #1
 8009682:	f000 80b9 	beq.w	80097f8 <__kernel_rem_pio2+0x32c>
 8009686:	f1ba 0f02 	cmp.w	sl, #2
 800968a:	f000 80bf 	beq.w	800980c <__kernel_rem_pio2+0x340>
 800968e:	9b02      	ldr	r3, [sp, #8]
 8009690:	2b02      	cmp	r3, #2
 8009692:	d14e      	bne.n	8009732 <__kernel_rem_pio2+0x266>
 8009694:	4642      	mov	r2, r8
 8009696:	464b      	mov	r3, r9
 8009698:	2000      	movs	r0, #0
 800969a:	4952      	ldr	r1, [pc, #328]	; (80097e4 <__kernel_rem_pio2+0x318>)
 800969c:	f7f6 fd64 	bl	8000168 <__aeabi_dsub>
 80096a0:	4680      	mov	r8, r0
 80096a2:	4689      	mov	r9, r1
 80096a4:	2c00      	cmp	r4, #0
 80096a6:	d044      	beq.n	8009732 <__kernel_rem_pio2+0x266>
 80096a8:	4652      	mov	r2, sl
 80096aa:	2000      	movs	r0, #0
 80096ac:	494d      	ldr	r1, [pc, #308]	; (80097e4 <__kernel_rem_pio2+0x318>)
 80096ae:	f000 fd1f 	bl	800a0f0 <scalbn>
 80096b2:	4602      	mov	r2, r0
 80096b4:	460b      	mov	r3, r1
 80096b6:	4640      	mov	r0, r8
 80096b8:	4649      	mov	r1, r9
 80096ba:	f7f6 fd55 	bl	8000168 <__aeabi_dsub>
 80096be:	4680      	mov	r8, r0
 80096c0:	4689      	mov	r9, r1
 80096c2:	e036      	b.n	8009732 <__kernel_rem_pio2+0x266>
 80096c4:	2200      	movs	r2, #0
 80096c6:	4b48      	ldr	r3, [pc, #288]	; (80097e8 <__kernel_rem_pio2+0x31c>)
 80096c8:	4620      	mov	r0, r4
 80096ca:	4629      	mov	r1, r5
 80096cc:	f7f6 ff04 	bl	80004d8 <__aeabi_dmul>
 80096d0:	f7f7 f9b2 	bl	8000a38 <__aeabi_d2iz>
 80096d4:	f7f6 fe96 	bl	8000404 <__aeabi_i2d>
 80096d8:	2200      	movs	r2, #0
 80096da:	4b44      	ldr	r3, [pc, #272]	; (80097ec <__kernel_rem_pio2+0x320>)
 80096dc:	4680      	mov	r8, r0
 80096de:	4689      	mov	r9, r1
 80096e0:	f7f6 fefa 	bl	80004d8 <__aeabi_dmul>
 80096e4:	4602      	mov	r2, r0
 80096e6:	460b      	mov	r3, r1
 80096e8:	4620      	mov	r0, r4
 80096ea:	4629      	mov	r1, r5
 80096ec:	f7f6 fd3c 	bl	8000168 <__aeabi_dsub>
 80096f0:	f7f7 f9a2 	bl	8000a38 <__aeabi_d2iz>
 80096f4:	9b02      	ldr	r3, [sp, #8]
 80096f6:	3e01      	subs	r6, #1
 80096f8:	f843 0b04 	str.w	r0, [r3], #4
 80096fc:	9302      	str	r3, [sp, #8]
 80096fe:	ab70      	add	r3, sp, #448	; 0x1c0
 8009700:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009704:	4640      	mov	r0, r8
 8009706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800970a:	4649      	mov	r1, r9
 800970c:	f7f6 fd2e 	bl	800016c <__adddf3>
 8009710:	4604      	mov	r4, r0
 8009712:	460d      	mov	r5, r1
 8009714:	e762      	b.n	80095dc <__kernel_rem_pio2+0x110>
 8009716:	d105      	bne.n	8009724 <__kernel_rem_pio2+0x258>
 8009718:	1e7b      	subs	r3, r7, #1
 800971a:	aa0c      	add	r2, sp, #48	; 0x30
 800971c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009720:	15c3      	asrs	r3, r0, #23
 8009722:	e79b      	b.n	800965c <__kernel_rem_pio2+0x190>
 8009724:	2200      	movs	r2, #0
 8009726:	4b32      	ldr	r3, [pc, #200]	; (80097f0 <__kernel_rem_pio2+0x324>)
 8009728:	f7f7 f95c 	bl	80009e4 <__aeabi_dcmpge>
 800972c:	2800      	cmp	r0, #0
 800972e:	d13f      	bne.n	80097b0 <__kernel_rem_pio2+0x2e4>
 8009730:	9002      	str	r0, [sp, #8]
 8009732:	2200      	movs	r2, #0
 8009734:	2300      	movs	r3, #0
 8009736:	4640      	mov	r0, r8
 8009738:	4649      	mov	r1, r9
 800973a:	f7f7 f935 	bl	80009a8 <__aeabi_dcmpeq>
 800973e:	2800      	cmp	r0, #0
 8009740:	f000 80b5 	beq.w	80098ae <__kernel_rem_pio2+0x3e2>
 8009744:	1e7c      	subs	r4, r7, #1
 8009746:	4623      	mov	r3, r4
 8009748:	2200      	movs	r2, #0
 800974a:	9904      	ldr	r1, [sp, #16]
 800974c:	428b      	cmp	r3, r1
 800974e:	da64      	bge.n	800981a <__kernel_rem_pio2+0x34e>
 8009750:	2a00      	cmp	r2, #0
 8009752:	d078      	beq.n	8009846 <__kernel_rem_pio2+0x37a>
 8009754:	ab0c      	add	r3, sp, #48	; 0x30
 8009756:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800975a:	f1aa 0a18 	sub.w	sl, sl, #24
 800975e:	2b00      	cmp	r3, #0
 8009760:	f000 80a3 	beq.w	80098aa <__kernel_rem_pio2+0x3de>
 8009764:	4652      	mov	r2, sl
 8009766:	2000      	movs	r0, #0
 8009768:	491e      	ldr	r1, [pc, #120]	; (80097e4 <__kernel_rem_pio2+0x318>)
 800976a:	f000 fcc1 	bl	800a0f0 <scalbn>
 800976e:	46a2      	mov	sl, r4
 8009770:	4606      	mov	r6, r0
 8009772:	460f      	mov	r7, r1
 8009774:	f04f 0800 	mov.w	r8, #0
 8009778:	00e3      	lsls	r3, r4, #3
 800977a:	9306      	str	r3, [sp, #24]
 800977c:	f8df 9068 	ldr.w	r9, [pc, #104]	; 80097e8 <__kernel_rem_pio2+0x31c>
 8009780:	ab70      	add	r3, sp, #448	; 0x1c0
 8009782:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8009786:	f1ba 0f00 	cmp.w	sl, #0
 800978a:	f280 80c6 	bge.w	800991a <__kernel_rem_pio2+0x44e>
 800978e:	4627      	mov	r7, r4
 8009790:	f04f 0800 	mov.w	r8, #0
 8009794:	2f00      	cmp	r7, #0
 8009796:	f2c0 80f3 	blt.w	8009980 <__kernel_rem_pio2+0x4b4>
 800979a:	4b16      	ldr	r3, [pc, #88]	; (80097f4 <__kernel_rem_pio2+0x328>)
 800979c:	f04f 0a00 	mov.w	sl, #0
 80097a0:	461d      	mov	r5, r3
 80097a2:	ab70      	add	r3, sp, #448	; 0x1c0
 80097a4:	f04f 0b00 	mov.w	fp, #0
 80097a8:	2600      	movs	r6, #0
 80097aa:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 80097ae:	e0d9      	b.n	8009964 <__kernel_rem_pio2+0x498>
 80097b0:	2302      	movs	r3, #2
 80097b2:	9302      	str	r3, [sp, #8]
 80097b4:	e756      	b.n	8009664 <__kernel_rem_pio2+0x198>
 80097b6:	f8db 3000 	ldr.w	r3, [fp]
 80097ba:	b954      	cbnz	r4, 80097d2 <__kernel_rem_pio2+0x306>
 80097bc:	b123      	cbz	r3, 80097c8 <__kernel_rem_pio2+0x2fc>
 80097be:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80097c2:	f8cb 3000 	str.w	r3, [fp]
 80097c6:	2301      	movs	r3, #1
 80097c8:	461c      	mov	r4, r3
 80097ca:	3201      	adds	r2, #1
 80097cc:	f10b 0b04 	add.w	fp, fp, #4
 80097d0:	e74f      	b.n	8009672 <__kernel_rem_pio2+0x1a6>
 80097d2:	1acb      	subs	r3, r1, r3
 80097d4:	f8cb 3000 	str.w	r3, [fp]
 80097d8:	4623      	mov	r3, r4
 80097da:	e7f5      	b.n	80097c8 <__kernel_rem_pio2+0x2fc>
 80097dc:	0800c940 	.word	0x0800c940
 80097e0:	40200000 	.word	0x40200000
 80097e4:	3ff00000 	.word	0x3ff00000
 80097e8:	3e700000 	.word	0x3e700000
 80097ec:	41700000 	.word	0x41700000
 80097f0:	3fe00000 	.word	0x3fe00000
 80097f4:	0800c900 	.word	0x0800c900
 80097f8:	1e7a      	subs	r2, r7, #1
 80097fa:	ab0c      	add	r3, sp, #48	; 0x30
 80097fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009800:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009804:	a90c      	add	r1, sp, #48	; 0x30
 8009806:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800980a:	e740      	b.n	800968e <__kernel_rem_pio2+0x1c2>
 800980c:	1e7a      	subs	r2, r7, #1
 800980e:	ab0c      	add	r3, sp, #48	; 0x30
 8009810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009814:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009818:	e7f4      	b.n	8009804 <__kernel_rem_pio2+0x338>
 800981a:	a90c      	add	r1, sp, #48	; 0x30
 800981c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009820:	3b01      	subs	r3, #1
 8009822:	430a      	orrs	r2, r1
 8009824:	e791      	b.n	800974a <__kernel_rem_pio2+0x27e>
 8009826:	3401      	adds	r4, #1
 8009828:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800982c:	2a00      	cmp	r2, #0
 800982e:	d0fa      	beq.n	8009826 <__kernel_rem_pio2+0x35a>
 8009830:	9b08      	ldr	r3, [sp, #32]
 8009832:	1c7e      	adds	r6, r7, #1
 8009834:	18fd      	adds	r5, r7, r3
 8009836:	ab20      	add	r3, sp, #128	; 0x80
 8009838:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800983c:	443c      	add	r4, r7
 800983e:	42b4      	cmp	r4, r6
 8009840:	da04      	bge.n	800984c <__kernel_rem_pio2+0x380>
 8009842:	4627      	mov	r7, r4
 8009844:	e6c0      	b.n	80095c8 <__kernel_rem_pio2+0xfc>
 8009846:	2401      	movs	r4, #1
 8009848:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800984a:	e7ed      	b.n	8009828 <__kernel_rem_pio2+0x35c>
 800984c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800984e:	462f      	mov	r7, r5
 8009850:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009854:	f7f6 fdd6 	bl	8000404 <__aeabi_i2d>
 8009858:	f04f 0b00 	mov.w	fp, #0
 800985c:	f04f 0800 	mov.w	r8, #0
 8009860:	f04f 0900 	mov.w	r9, #0
 8009864:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009866:	e8e7 0102 	strd	r0, r1, [r7], #8
 800986a:	3b08      	subs	r3, #8
 800986c:	9302      	str	r3, [sp, #8]
 800986e:	9b06      	ldr	r3, [sp, #24]
 8009870:	459b      	cmp	fp, r3
 8009872:	dd07      	ble.n	8009884 <__kernel_rem_pio2+0x3b8>
 8009874:	ab70      	add	r3, sp, #448	; 0x1c0
 8009876:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800987a:	463d      	mov	r5, r7
 800987c:	e9c3 8900 	strd	r8, r9, [r3]
 8009880:	3601      	adds	r6, #1
 8009882:	e7dc      	b.n	800983e <__kernel_rem_pio2+0x372>
 8009884:	9902      	ldr	r1, [sp, #8]
 8009886:	f10b 0b01 	add.w	fp, fp, #1
 800988a:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800988e:	9102      	str	r1, [sp, #8]
 8009890:	e875 0102 	ldrd	r0, r1, [r5], #-8
 8009894:	f7f6 fe20 	bl	80004d8 <__aeabi_dmul>
 8009898:	4602      	mov	r2, r0
 800989a:	460b      	mov	r3, r1
 800989c:	4640      	mov	r0, r8
 800989e:	4649      	mov	r1, r9
 80098a0:	f7f6 fc64 	bl	800016c <__adddf3>
 80098a4:	4680      	mov	r8, r0
 80098a6:	4689      	mov	r9, r1
 80098a8:	e7e1      	b.n	800986e <__kernel_rem_pio2+0x3a2>
 80098aa:	3c01      	subs	r4, #1
 80098ac:	e752      	b.n	8009754 <__kernel_rem_pio2+0x288>
 80098ae:	f1ca 0200 	rsb	r2, sl, #0
 80098b2:	4640      	mov	r0, r8
 80098b4:	4649      	mov	r1, r9
 80098b6:	f000 fc1b 	bl	800a0f0 <scalbn>
 80098ba:	2200      	movs	r2, #0
 80098bc:	4ba5      	ldr	r3, [pc, #660]	; (8009b54 <__kernel_rem_pio2+0x688>)
 80098be:	4604      	mov	r4, r0
 80098c0:	460d      	mov	r5, r1
 80098c2:	f7f7 f88f 	bl	80009e4 <__aeabi_dcmpge>
 80098c6:	b1f8      	cbz	r0, 8009908 <__kernel_rem_pio2+0x43c>
 80098c8:	2200      	movs	r2, #0
 80098ca:	4ba3      	ldr	r3, [pc, #652]	; (8009b58 <__kernel_rem_pio2+0x68c>)
 80098cc:	4620      	mov	r0, r4
 80098ce:	4629      	mov	r1, r5
 80098d0:	f7f6 fe02 	bl	80004d8 <__aeabi_dmul>
 80098d4:	f7f7 f8b0 	bl	8000a38 <__aeabi_d2iz>
 80098d8:	4606      	mov	r6, r0
 80098da:	f7f6 fd93 	bl	8000404 <__aeabi_i2d>
 80098de:	2200      	movs	r2, #0
 80098e0:	4b9c      	ldr	r3, [pc, #624]	; (8009b54 <__kernel_rem_pio2+0x688>)
 80098e2:	f7f6 fdf9 	bl	80004d8 <__aeabi_dmul>
 80098e6:	460b      	mov	r3, r1
 80098e8:	4602      	mov	r2, r0
 80098ea:	4629      	mov	r1, r5
 80098ec:	4620      	mov	r0, r4
 80098ee:	f7f6 fc3b 	bl	8000168 <__aeabi_dsub>
 80098f2:	f7f7 f8a1 	bl	8000a38 <__aeabi_d2iz>
 80098f6:	1c7c      	adds	r4, r7, #1
 80098f8:	ab0c      	add	r3, sp, #48	; 0x30
 80098fa:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80098fe:	f10a 0a18 	add.w	sl, sl, #24
 8009902:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 8009906:	e72d      	b.n	8009764 <__kernel_rem_pio2+0x298>
 8009908:	4620      	mov	r0, r4
 800990a:	4629      	mov	r1, r5
 800990c:	f7f7 f894 	bl	8000a38 <__aeabi_d2iz>
 8009910:	ab0c      	add	r3, sp, #48	; 0x30
 8009912:	463c      	mov	r4, r7
 8009914:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8009918:	e724      	b.n	8009764 <__kernel_rem_pio2+0x298>
 800991a:	ab0c      	add	r3, sp, #48	; 0x30
 800991c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8009920:	f7f6 fd70 	bl	8000404 <__aeabi_i2d>
 8009924:	4632      	mov	r2, r6
 8009926:	463b      	mov	r3, r7
 8009928:	f7f6 fdd6 	bl	80004d8 <__aeabi_dmul>
 800992c:	4642      	mov	r2, r8
 800992e:	e86b 0102 	strd	r0, r1, [fp], #-8
 8009932:	464b      	mov	r3, r9
 8009934:	4630      	mov	r0, r6
 8009936:	4639      	mov	r1, r7
 8009938:	f7f6 fdce 	bl	80004d8 <__aeabi_dmul>
 800993c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009940:	4606      	mov	r6, r0
 8009942:	460f      	mov	r7, r1
 8009944:	e71f      	b.n	8009786 <__kernel_rem_pio2+0x2ba>
 8009946:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800994a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800994e:	f7f6 fdc3 	bl	80004d8 <__aeabi_dmul>
 8009952:	4602      	mov	r2, r0
 8009954:	460b      	mov	r3, r1
 8009956:	4650      	mov	r0, sl
 8009958:	4659      	mov	r1, fp
 800995a:	f7f6 fc07 	bl	800016c <__adddf3>
 800995e:	4682      	mov	sl, r0
 8009960:	468b      	mov	fp, r1
 8009962:	3601      	adds	r6, #1
 8009964:	9b04      	ldr	r3, [sp, #16]
 8009966:	429e      	cmp	r6, r3
 8009968:	dc01      	bgt.n	800996e <__kernel_rem_pio2+0x4a2>
 800996a:	45b0      	cmp	r8, r6
 800996c:	daeb      	bge.n	8009946 <__kernel_rem_pio2+0x47a>
 800996e:	ab48      	add	r3, sp, #288	; 0x120
 8009970:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009974:	e9c3 ab00 	strd	sl, fp, [r3]
 8009978:	3f01      	subs	r7, #1
 800997a:	f108 0801 	add.w	r8, r8, #1
 800997e:	e709      	b.n	8009794 <__kernel_rem_pio2+0x2c8>
 8009980:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8009982:	2b02      	cmp	r3, #2
 8009984:	dc09      	bgt.n	800999a <__kernel_rem_pio2+0x4ce>
 8009986:	2b00      	cmp	r3, #0
 8009988:	dc34      	bgt.n	80099f4 <__kernel_rem_pio2+0x528>
 800998a:	d05e      	beq.n	8009a4a <__kernel_rem_pio2+0x57e>
 800998c:	9b07      	ldr	r3, [sp, #28]
 800998e:	f003 0007 	and.w	r0, r3, #7
 8009992:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8009996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800999a:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800999c:	2b03      	cmp	r3, #3
 800999e:	d1f5      	bne.n	800998c <__kernel_rem_pio2+0x4c0>
 80099a0:	9a06      	ldr	r2, [sp, #24]
 80099a2:	ab48      	add	r3, sp, #288	; 0x120
 80099a4:	441a      	add	r2, r3
 80099a6:	4615      	mov	r5, r2
 80099a8:	4692      	mov	sl, r2
 80099aa:	46a3      	mov	fp, r4
 80099ac:	f1bb 0f00 	cmp.w	fp, #0
 80099b0:	dc7a      	bgt.n	8009aa8 <__kernel_rem_pio2+0x5dc>
 80099b2:	46aa      	mov	sl, r5
 80099b4:	46a3      	mov	fp, r4
 80099b6:	f1bb 0f01 	cmp.w	fp, #1
 80099ba:	f300 8094 	bgt.w	8009ae6 <__kernel_rem_pio2+0x61a>
 80099be:	2700      	movs	r7, #0
 80099c0:	463e      	mov	r6, r7
 80099c2:	2c01      	cmp	r4, #1
 80099c4:	f300 80ae 	bgt.w	8009b24 <__kernel_rem_pio2+0x658>
 80099c8:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 80099cc:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 80099d0:	9b02      	ldr	r3, [sp, #8]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	f040 80b0 	bne.w	8009b38 <__kernel_rem_pio2+0x66c>
 80099d8:	4603      	mov	r3, r0
 80099da:	462a      	mov	r2, r5
 80099dc:	9801      	ldr	r0, [sp, #4]
 80099de:	e9c0 2300 	strd	r2, r3, [r0]
 80099e2:	4622      	mov	r2, r4
 80099e4:	460b      	mov	r3, r1
 80099e6:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80099ea:	463a      	mov	r2, r7
 80099ec:	4633      	mov	r3, r6
 80099ee:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80099f2:	e7cb      	b.n	800998c <__kernel_rem_pio2+0x4c0>
 80099f4:	2000      	movs	r0, #0
 80099f6:	9a06      	ldr	r2, [sp, #24]
 80099f8:	ab48      	add	r3, sp, #288	; 0x120
 80099fa:	441a      	add	r2, r3
 80099fc:	4615      	mov	r5, r2
 80099fe:	46a0      	mov	r8, r4
 8009a00:	4601      	mov	r1, r0
 8009a02:	f1b8 0f00 	cmp.w	r8, #0
 8009a06:	da3c      	bge.n	8009a82 <__kernel_rem_pio2+0x5b6>
 8009a08:	9b02      	ldr	r3, [sp, #8]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d040      	beq.n	8009a90 <__kernel_rem_pio2+0x5c4>
 8009a0e:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8009a12:	4602      	mov	r2, r0
 8009a14:	462b      	mov	r3, r5
 8009a16:	9d01      	ldr	r5, [sp, #4]
 8009a18:	2601      	movs	r6, #1
 8009a1a:	e9c5 2300 	strd	r2, r3, [r5]
 8009a1e:	460b      	mov	r3, r1
 8009a20:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8009a24:	f7f6 fba0 	bl	8000168 <__aeabi_dsub>
 8009a28:	4684      	mov	ip, r0
 8009a2a:	460f      	mov	r7, r1
 8009a2c:	ad48      	add	r5, sp, #288	; 0x120
 8009a2e:	42b4      	cmp	r4, r6
 8009a30:	f105 0508 	add.w	r5, r5, #8
 8009a34:	da2e      	bge.n	8009a94 <__kernel_rem_pio2+0x5c8>
 8009a36:	9b02      	ldr	r3, [sp, #8]
 8009a38:	b10b      	cbz	r3, 8009a3e <__kernel_rem_pio2+0x572>
 8009a3a:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8009a3e:	4662      	mov	r2, ip
 8009a40:	463b      	mov	r3, r7
 8009a42:	9901      	ldr	r1, [sp, #4]
 8009a44:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8009a48:	e7a0      	b.n	800998c <__kernel_rem_pio2+0x4c0>
 8009a4a:	9a06      	ldr	r2, [sp, #24]
 8009a4c:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 8009a4e:	ab48      	add	r3, sp, #288	; 0x120
 8009a50:	441a      	add	r2, r3
 8009a52:	4615      	mov	r5, r2
 8009a54:	4637      	mov	r7, r6
 8009a56:	2c00      	cmp	r4, #0
 8009a58:	da09      	bge.n	8009a6e <__kernel_rem_pio2+0x5a2>
 8009a5a:	9b02      	ldr	r3, [sp, #8]
 8009a5c:	b10b      	cbz	r3, 8009a62 <__kernel_rem_pio2+0x596>
 8009a5e:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8009a62:	4632      	mov	r2, r6
 8009a64:	463b      	mov	r3, r7
 8009a66:	9901      	ldr	r1, [sp, #4]
 8009a68:	e9c1 2300 	strd	r2, r3, [r1]
 8009a6c:	e78e      	b.n	800998c <__kernel_rem_pio2+0x4c0>
 8009a6e:	4630      	mov	r0, r6
 8009a70:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8009a74:	4639      	mov	r1, r7
 8009a76:	f7f6 fb79 	bl	800016c <__adddf3>
 8009a7a:	3c01      	subs	r4, #1
 8009a7c:	4606      	mov	r6, r0
 8009a7e:	460f      	mov	r7, r1
 8009a80:	e7e9      	b.n	8009a56 <__kernel_rem_pio2+0x58a>
 8009a82:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8009a86:	f7f6 fb71 	bl	800016c <__adddf3>
 8009a8a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8009a8e:	e7b8      	b.n	8009a02 <__kernel_rem_pio2+0x536>
 8009a90:	460d      	mov	r5, r1
 8009a92:	e7be      	b.n	8009a12 <__kernel_rem_pio2+0x546>
 8009a94:	4660      	mov	r0, ip
 8009a96:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009a9a:	4639      	mov	r1, r7
 8009a9c:	f7f6 fb66 	bl	800016c <__adddf3>
 8009aa0:	3601      	adds	r6, #1
 8009aa2:	4684      	mov	ip, r0
 8009aa4:	460f      	mov	r7, r1
 8009aa6:	e7c2      	b.n	8009a2e <__kernel_rem_pio2+0x562>
 8009aa8:	e9da 6700 	ldrd	r6, r7, [sl]
 8009aac:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8009ab0:	4632      	mov	r2, r6
 8009ab2:	463b      	mov	r3, r7
 8009ab4:	4640      	mov	r0, r8
 8009ab6:	4649      	mov	r1, r9
 8009ab8:	f7f6 fb58 	bl	800016c <__adddf3>
 8009abc:	4602      	mov	r2, r0
 8009abe:	460b      	mov	r3, r1
 8009ac0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009ac4:	4640      	mov	r0, r8
 8009ac6:	4649      	mov	r1, r9
 8009ac8:	f7f6 fb4e 	bl	8000168 <__aeabi_dsub>
 8009acc:	4632      	mov	r2, r6
 8009ace:	463b      	mov	r3, r7
 8009ad0:	f7f6 fb4c 	bl	800016c <__adddf3>
 8009ad4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ad8:	e86a 0102 	strd	r0, r1, [sl], #-8
 8009adc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009ae0:	e9ca 2300 	strd	r2, r3, [sl]
 8009ae4:	e762      	b.n	80099ac <__kernel_rem_pio2+0x4e0>
 8009ae6:	e9da 8900 	ldrd	r8, r9, [sl]
 8009aea:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8009aee:	4642      	mov	r2, r8
 8009af0:	464b      	mov	r3, r9
 8009af2:	4630      	mov	r0, r6
 8009af4:	4639      	mov	r1, r7
 8009af6:	f7f6 fb39 	bl	800016c <__adddf3>
 8009afa:	4602      	mov	r2, r0
 8009afc:	460b      	mov	r3, r1
 8009afe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b02:	4630      	mov	r0, r6
 8009b04:	4639      	mov	r1, r7
 8009b06:	f7f6 fb2f 	bl	8000168 <__aeabi_dsub>
 8009b0a:	4642      	mov	r2, r8
 8009b0c:	464b      	mov	r3, r9
 8009b0e:	f7f6 fb2d 	bl	800016c <__adddf3>
 8009b12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b16:	e86a 0102 	strd	r0, r1, [sl], #-8
 8009b1a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009b1e:	e9ca 2300 	strd	r2, r3, [sl]
 8009b22:	e748      	b.n	80099b6 <__kernel_rem_pio2+0x4ea>
 8009b24:	4638      	mov	r0, r7
 8009b26:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8009b2a:	4631      	mov	r1, r6
 8009b2c:	f7f6 fb1e 	bl	800016c <__adddf3>
 8009b30:	3c01      	subs	r4, #1
 8009b32:	4607      	mov	r7, r0
 8009b34:	460e      	mov	r6, r1
 8009b36:	e744      	b.n	80099c2 <__kernel_rem_pio2+0x4f6>
 8009b38:	9b01      	ldr	r3, [sp, #4]
 8009b3a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8009b3e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8009b42:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8009b46:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8009b4a:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8009b4e:	601d      	str	r5, [r3, #0]
 8009b50:	615e      	str	r6, [r3, #20]
 8009b52:	e71b      	b.n	800998c <__kernel_rem_pio2+0x4c0>
 8009b54:	41700000 	.word	0x41700000
 8009b58:	3e700000 	.word	0x3e700000
 8009b5c:	00000000 	.word	0x00000000

08009b60 <__kernel_sin>:
 8009b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b64:	b086      	sub	sp, #24
 8009b66:	e9cd 2300 	strd	r2, r3, [sp]
 8009b6a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009b6e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8009b72:	4682      	mov	sl, r0
 8009b74:	460c      	mov	r4, r1
 8009b76:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8009b78:	da03      	bge.n	8009b82 <__kernel_sin+0x22>
 8009b7a:	f7f6 ff5d 	bl	8000a38 <__aeabi_d2iz>
 8009b7e:	2800      	cmp	r0, #0
 8009b80:	d050      	beq.n	8009c24 <__kernel_sin+0xc4>
 8009b82:	4652      	mov	r2, sl
 8009b84:	4623      	mov	r3, r4
 8009b86:	4650      	mov	r0, sl
 8009b88:	4621      	mov	r1, r4
 8009b8a:	f7f6 fca5 	bl	80004d8 <__aeabi_dmul>
 8009b8e:	4606      	mov	r6, r0
 8009b90:	460f      	mov	r7, r1
 8009b92:	4602      	mov	r2, r0
 8009b94:	460b      	mov	r3, r1
 8009b96:	4650      	mov	r0, sl
 8009b98:	4621      	mov	r1, r4
 8009b9a:	f7f6 fc9d 	bl	80004d8 <__aeabi_dmul>
 8009b9e:	a33e      	add	r3, pc, #248	; (adr r3, 8009c98 <__kernel_sin+0x138>)
 8009ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba4:	4680      	mov	r8, r0
 8009ba6:	4689      	mov	r9, r1
 8009ba8:	4630      	mov	r0, r6
 8009baa:	4639      	mov	r1, r7
 8009bac:	f7f6 fc94 	bl	80004d8 <__aeabi_dmul>
 8009bb0:	a33b      	add	r3, pc, #236	; (adr r3, 8009ca0 <__kernel_sin+0x140>)
 8009bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb6:	f7f6 fad7 	bl	8000168 <__aeabi_dsub>
 8009bba:	4632      	mov	r2, r6
 8009bbc:	463b      	mov	r3, r7
 8009bbe:	f7f6 fc8b 	bl	80004d8 <__aeabi_dmul>
 8009bc2:	a339      	add	r3, pc, #228	; (adr r3, 8009ca8 <__kernel_sin+0x148>)
 8009bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc8:	f7f6 fad0 	bl	800016c <__adddf3>
 8009bcc:	4632      	mov	r2, r6
 8009bce:	463b      	mov	r3, r7
 8009bd0:	f7f6 fc82 	bl	80004d8 <__aeabi_dmul>
 8009bd4:	a336      	add	r3, pc, #216	; (adr r3, 8009cb0 <__kernel_sin+0x150>)
 8009bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bda:	f7f6 fac5 	bl	8000168 <__aeabi_dsub>
 8009bde:	4632      	mov	r2, r6
 8009be0:	463b      	mov	r3, r7
 8009be2:	f7f6 fc79 	bl	80004d8 <__aeabi_dmul>
 8009be6:	a334      	add	r3, pc, #208	; (adr r3, 8009cb8 <__kernel_sin+0x158>)
 8009be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bec:	f7f6 fabe 	bl	800016c <__adddf3>
 8009bf0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009bf4:	b9dd      	cbnz	r5, 8009c2e <__kernel_sin+0xce>
 8009bf6:	4602      	mov	r2, r0
 8009bf8:	460b      	mov	r3, r1
 8009bfa:	4630      	mov	r0, r6
 8009bfc:	4639      	mov	r1, r7
 8009bfe:	f7f6 fc6b 	bl	80004d8 <__aeabi_dmul>
 8009c02:	a32f      	add	r3, pc, #188	; (adr r3, 8009cc0 <__kernel_sin+0x160>)
 8009c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c08:	f7f6 faae 	bl	8000168 <__aeabi_dsub>
 8009c0c:	4642      	mov	r2, r8
 8009c0e:	464b      	mov	r3, r9
 8009c10:	f7f6 fc62 	bl	80004d8 <__aeabi_dmul>
 8009c14:	4602      	mov	r2, r0
 8009c16:	460b      	mov	r3, r1
 8009c18:	4650      	mov	r0, sl
 8009c1a:	4621      	mov	r1, r4
 8009c1c:	f7f6 faa6 	bl	800016c <__adddf3>
 8009c20:	4682      	mov	sl, r0
 8009c22:	460c      	mov	r4, r1
 8009c24:	4650      	mov	r0, sl
 8009c26:	4621      	mov	r1, r4
 8009c28:	b006      	add	sp, #24
 8009c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c2e:	2200      	movs	r2, #0
 8009c30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009c34:	4b24      	ldr	r3, [pc, #144]	; (8009cc8 <__kernel_sin+0x168>)
 8009c36:	f7f6 fc4f 	bl	80004d8 <__aeabi_dmul>
 8009c3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009c3e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c42:	4640      	mov	r0, r8
 8009c44:	4649      	mov	r1, r9
 8009c46:	f7f6 fc47 	bl	80004d8 <__aeabi_dmul>
 8009c4a:	4602      	mov	r2, r0
 8009c4c:	460b      	mov	r3, r1
 8009c4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c52:	f7f6 fa89 	bl	8000168 <__aeabi_dsub>
 8009c56:	4632      	mov	r2, r6
 8009c58:	463b      	mov	r3, r7
 8009c5a:	f7f6 fc3d 	bl	80004d8 <__aeabi_dmul>
 8009c5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c62:	f7f6 fa81 	bl	8000168 <__aeabi_dsub>
 8009c66:	a316      	add	r3, pc, #88	; (adr r3, 8009cc0 <__kernel_sin+0x160>)
 8009c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c6c:	4606      	mov	r6, r0
 8009c6e:	460f      	mov	r7, r1
 8009c70:	4640      	mov	r0, r8
 8009c72:	4649      	mov	r1, r9
 8009c74:	f7f6 fc30 	bl	80004d8 <__aeabi_dmul>
 8009c78:	4602      	mov	r2, r0
 8009c7a:	460b      	mov	r3, r1
 8009c7c:	4630      	mov	r0, r6
 8009c7e:	4639      	mov	r1, r7
 8009c80:	f7f6 fa74 	bl	800016c <__adddf3>
 8009c84:	4602      	mov	r2, r0
 8009c86:	460b      	mov	r3, r1
 8009c88:	4650      	mov	r0, sl
 8009c8a:	4621      	mov	r1, r4
 8009c8c:	f7f6 fa6c 	bl	8000168 <__aeabi_dsub>
 8009c90:	e7c6      	b.n	8009c20 <__kernel_sin+0xc0>
 8009c92:	bf00      	nop
 8009c94:	f3af 8000 	nop.w
 8009c98:	5acfd57c 	.word	0x5acfd57c
 8009c9c:	3de5d93a 	.word	0x3de5d93a
 8009ca0:	8a2b9ceb 	.word	0x8a2b9ceb
 8009ca4:	3e5ae5e6 	.word	0x3e5ae5e6
 8009ca8:	57b1fe7d 	.word	0x57b1fe7d
 8009cac:	3ec71de3 	.word	0x3ec71de3
 8009cb0:	19c161d5 	.word	0x19c161d5
 8009cb4:	3f2a01a0 	.word	0x3f2a01a0
 8009cb8:	1110f8a6 	.word	0x1110f8a6
 8009cbc:	3f811111 	.word	0x3f811111
 8009cc0:	55555549 	.word	0x55555549
 8009cc4:	3fc55555 	.word	0x3fc55555
 8009cc8:	3fe00000 	.word	0x3fe00000
 8009ccc:	00000000 	.word	0x00000000

08009cd0 <atan>:
 8009cd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cd4:	4bb6      	ldr	r3, [pc, #728]	; (8009fb0 <atan+0x2e0>)
 8009cd6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009cda:	429e      	cmp	r6, r3
 8009cdc:	4604      	mov	r4, r0
 8009cde:	460d      	mov	r5, r1
 8009ce0:	468b      	mov	fp, r1
 8009ce2:	dd17      	ble.n	8009d14 <atan+0x44>
 8009ce4:	4bb3      	ldr	r3, [pc, #716]	; (8009fb4 <atan+0x2e4>)
 8009ce6:	429e      	cmp	r6, r3
 8009ce8:	dc01      	bgt.n	8009cee <atan+0x1e>
 8009cea:	d109      	bne.n	8009d00 <atan+0x30>
 8009cec:	b140      	cbz	r0, 8009d00 <atan+0x30>
 8009cee:	4622      	mov	r2, r4
 8009cf0:	462b      	mov	r3, r5
 8009cf2:	4620      	mov	r0, r4
 8009cf4:	4629      	mov	r1, r5
 8009cf6:	f7f6 fa39 	bl	800016c <__adddf3>
 8009cfa:	4604      	mov	r4, r0
 8009cfc:	460d      	mov	r5, r1
 8009cfe:	e005      	b.n	8009d0c <atan+0x3c>
 8009d00:	f1bb 0f00 	cmp.w	fp, #0
 8009d04:	4cac      	ldr	r4, [pc, #688]	; (8009fb8 <atan+0x2e8>)
 8009d06:	f300 8121 	bgt.w	8009f4c <atan+0x27c>
 8009d0a:	4dac      	ldr	r5, [pc, #688]	; (8009fbc <atan+0x2ec>)
 8009d0c:	4620      	mov	r0, r4
 8009d0e:	4629      	mov	r1, r5
 8009d10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d14:	4baa      	ldr	r3, [pc, #680]	; (8009fc0 <atan+0x2f0>)
 8009d16:	429e      	cmp	r6, r3
 8009d18:	dc11      	bgt.n	8009d3e <atan+0x6e>
 8009d1a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009d1e:	429e      	cmp	r6, r3
 8009d20:	dc0a      	bgt.n	8009d38 <atan+0x68>
 8009d22:	a38b      	add	r3, pc, #556	; (adr r3, 8009f50 <atan+0x280>)
 8009d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d28:	f7f6 fa20 	bl	800016c <__adddf3>
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	4ba5      	ldr	r3, [pc, #660]	; (8009fc4 <atan+0x2f4>)
 8009d30:	f7f6 fe62 	bl	80009f8 <__aeabi_dcmpgt>
 8009d34:	2800      	cmp	r0, #0
 8009d36:	d1e9      	bne.n	8009d0c <atan+0x3c>
 8009d38:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8009d3c:	e027      	b.n	8009d8e <atan+0xbe>
 8009d3e:	f000 f951 	bl	8009fe4 <fabs>
 8009d42:	4ba1      	ldr	r3, [pc, #644]	; (8009fc8 <atan+0x2f8>)
 8009d44:	4604      	mov	r4, r0
 8009d46:	429e      	cmp	r6, r3
 8009d48:	460d      	mov	r5, r1
 8009d4a:	f300 80b8 	bgt.w	8009ebe <atan+0x1ee>
 8009d4e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8009d52:	429e      	cmp	r6, r3
 8009d54:	f300 809c 	bgt.w	8009e90 <atan+0x1c0>
 8009d58:	4602      	mov	r2, r0
 8009d5a:	460b      	mov	r3, r1
 8009d5c:	f7f6 fa06 	bl	800016c <__adddf3>
 8009d60:	2200      	movs	r2, #0
 8009d62:	4b98      	ldr	r3, [pc, #608]	; (8009fc4 <atan+0x2f4>)
 8009d64:	f7f6 fa00 	bl	8000168 <__aeabi_dsub>
 8009d68:	2200      	movs	r2, #0
 8009d6a:	4606      	mov	r6, r0
 8009d6c:	460f      	mov	r7, r1
 8009d6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009d72:	4620      	mov	r0, r4
 8009d74:	4629      	mov	r1, r5
 8009d76:	f7f6 f9f9 	bl	800016c <__adddf3>
 8009d7a:	4602      	mov	r2, r0
 8009d7c:	460b      	mov	r3, r1
 8009d7e:	4630      	mov	r0, r6
 8009d80:	4639      	mov	r1, r7
 8009d82:	f7f6 fcd3 	bl	800072c <__aeabi_ddiv>
 8009d86:	f04f 0a00 	mov.w	sl, #0
 8009d8a:	4604      	mov	r4, r0
 8009d8c:	460d      	mov	r5, r1
 8009d8e:	4622      	mov	r2, r4
 8009d90:	462b      	mov	r3, r5
 8009d92:	4620      	mov	r0, r4
 8009d94:	4629      	mov	r1, r5
 8009d96:	f7f6 fb9f 	bl	80004d8 <__aeabi_dmul>
 8009d9a:	4602      	mov	r2, r0
 8009d9c:	460b      	mov	r3, r1
 8009d9e:	4680      	mov	r8, r0
 8009da0:	4689      	mov	r9, r1
 8009da2:	f7f6 fb99 	bl	80004d8 <__aeabi_dmul>
 8009da6:	a36c      	add	r3, pc, #432	; (adr r3, 8009f58 <atan+0x288>)
 8009da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dac:	4606      	mov	r6, r0
 8009dae:	460f      	mov	r7, r1
 8009db0:	f7f6 fb92 	bl	80004d8 <__aeabi_dmul>
 8009db4:	a36a      	add	r3, pc, #424	; (adr r3, 8009f60 <atan+0x290>)
 8009db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dba:	f7f6 f9d7 	bl	800016c <__adddf3>
 8009dbe:	4632      	mov	r2, r6
 8009dc0:	463b      	mov	r3, r7
 8009dc2:	f7f6 fb89 	bl	80004d8 <__aeabi_dmul>
 8009dc6:	a368      	add	r3, pc, #416	; (adr r3, 8009f68 <atan+0x298>)
 8009dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dcc:	f7f6 f9ce 	bl	800016c <__adddf3>
 8009dd0:	4632      	mov	r2, r6
 8009dd2:	463b      	mov	r3, r7
 8009dd4:	f7f6 fb80 	bl	80004d8 <__aeabi_dmul>
 8009dd8:	a365      	add	r3, pc, #404	; (adr r3, 8009f70 <atan+0x2a0>)
 8009dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dde:	f7f6 f9c5 	bl	800016c <__adddf3>
 8009de2:	4632      	mov	r2, r6
 8009de4:	463b      	mov	r3, r7
 8009de6:	f7f6 fb77 	bl	80004d8 <__aeabi_dmul>
 8009dea:	a363      	add	r3, pc, #396	; (adr r3, 8009f78 <atan+0x2a8>)
 8009dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df0:	f7f6 f9bc 	bl	800016c <__adddf3>
 8009df4:	4632      	mov	r2, r6
 8009df6:	463b      	mov	r3, r7
 8009df8:	f7f6 fb6e 	bl	80004d8 <__aeabi_dmul>
 8009dfc:	a360      	add	r3, pc, #384	; (adr r3, 8009f80 <atan+0x2b0>)
 8009dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e02:	f7f6 f9b3 	bl	800016c <__adddf3>
 8009e06:	4642      	mov	r2, r8
 8009e08:	464b      	mov	r3, r9
 8009e0a:	f7f6 fb65 	bl	80004d8 <__aeabi_dmul>
 8009e0e:	a35e      	add	r3, pc, #376	; (adr r3, 8009f88 <atan+0x2b8>)
 8009e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e14:	4680      	mov	r8, r0
 8009e16:	4689      	mov	r9, r1
 8009e18:	4630      	mov	r0, r6
 8009e1a:	4639      	mov	r1, r7
 8009e1c:	f7f6 fb5c 	bl	80004d8 <__aeabi_dmul>
 8009e20:	a35b      	add	r3, pc, #364	; (adr r3, 8009f90 <atan+0x2c0>)
 8009e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e26:	f7f6 f99f 	bl	8000168 <__aeabi_dsub>
 8009e2a:	4632      	mov	r2, r6
 8009e2c:	463b      	mov	r3, r7
 8009e2e:	f7f6 fb53 	bl	80004d8 <__aeabi_dmul>
 8009e32:	a359      	add	r3, pc, #356	; (adr r3, 8009f98 <atan+0x2c8>)
 8009e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e38:	f7f6 f996 	bl	8000168 <__aeabi_dsub>
 8009e3c:	4632      	mov	r2, r6
 8009e3e:	463b      	mov	r3, r7
 8009e40:	f7f6 fb4a 	bl	80004d8 <__aeabi_dmul>
 8009e44:	a356      	add	r3, pc, #344	; (adr r3, 8009fa0 <atan+0x2d0>)
 8009e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e4a:	f7f6 f98d 	bl	8000168 <__aeabi_dsub>
 8009e4e:	4632      	mov	r2, r6
 8009e50:	463b      	mov	r3, r7
 8009e52:	f7f6 fb41 	bl	80004d8 <__aeabi_dmul>
 8009e56:	a354      	add	r3, pc, #336	; (adr r3, 8009fa8 <atan+0x2d8>)
 8009e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e5c:	f7f6 f984 	bl	8000168 <__aeabi_dsub>
 8009e60:	4632      	mov	r2, r6
 8009e62:	463b      	mov	r3, r7
 8009e64:	f7f6 fb38 	bl	80004d8 <__aeabi_dmul>
 8009e68:	4602      	mov	r2, r0
 8009e6a:	460b      	mov	r3, r1
 8009e6c:	4640      	mov	r0, r8
 8009e6e:	4649      	mov	r1, r9
 8009e70:	f7f6 f97c 	bl	800016c <__adddf3>
 8009e74:	4622      	mov	r2, r4
 8009e76:	462b      	mov	r3, r5
 8009e78:	f7f6 fb2e 	bl	80004d8 <__aeabi_dmul>
 8009e7c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8009e80:	4602      	mov	r2, r0
 8009e82:	460b      	mov	r3, r1
 8009e84:	d144      	bne.n	8009f10 <atan+0x240>
 8009e86:	4620      	mov	r0, r4
 8009e88:	4629      	mov	r1, r5
 8009e8a:	f7f6 f96d 	bl	8000168 <__aeabi_dsub>
 8009e8e:	e734      	b.n	8009cfa <atan+0x2a>
 8009e90:	2200      	movs	r2, #0
 8009e92:	4b4c      	ldr	r3, [pc, #304]	; (8009fc4 <atan+0x2f4>)
 8009e94:	f7f6 f968 	bl	8000168 <__aeabi_dsub>
 8009e98:	2200      	movs	r2, #0
 8009e9a:	4606      	mov	r6, r0
 8009e9c:	460f      	mov	r7, r1
 8009e9e:	4620      	mov	r0, r4
 8009ea0:	4629      	mov	r1, r5
 8009ea2:	4b48      	ldr	r3, [pc, #288]	; (8009fc4 <atan+0x2f4>)
 8009ea4:	f7f6 f962 	bl	800016c <__adddf3>
 8009ea8:	4602      	mov	r2, r0
 8009eaa:	460b      	mov	r3, r1
 8009eac:	4630      	mov	r0, r6
 8009eae:	4639      	mov	r1, r7
 8009eb0:	f7f6 fc3c 	bl	800072c <__aeabi_ddiv>
 8009eb4:	f04f 0a01 	mov.w	sl, #1
 8009eb8:	4604      	mov	r4, r0
 8009eba:	460d      	mov	r5, r1
 8009ebc:	e767      	b.n	8009d8e <atan+0xbe>
 8009ebe:	4b43      	ldr	r3, [pc, #268]	; (8009fcc <atan+0x2fc>)
 8009ec0:	429e      	cmp	r6, r3
 8009ec2:	da1a      	bge.n	8009efa <atan+0x22a>
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	4b42      	ldr	r3, [pc, #264]	; (8009fd0 <atan+0x300>)
 8009ec8:	f7f6 f94e 	bl	8000168 <__aeabi_dsub>
 8009ecc:	2200      	movs	r2, #0
 8009ece:	4606      	mov	r6, r0
 8009ed0:	460f      	mov	r7, r1
 8009ed2:	4620      	mov	r0, r4
 8009ed4:	4629      	mov	r1, r5
 8009ed6:	4b3e      	ldr	r3, [pc, #248]	; (8009fd0 <atan+0x300>)
 8009ed8:	f7f6 fafe 	bl	80004d8 <__aeabi_dmul>
 8009edc:	2200      	movs	r2, #0
 8009ede:	4b39      	ldr	r3, [pc, #228]	; (8009fc4 <atan+0x2f4>)
 8009ee0:	f7f6 f944 	bl	800016c <__adddf3>
 8009ee4:	4602      	mov	r2, r0
 8009ee6:	460b      	mov	r3, r1
 8009ee8:	4630      	mov	r0, r6
 8009eea:	4639      	mov	r1, r7
 8009eec:	f7f6 fc1e 	bl	800072c <__aeabi_ddiv>
 8009ef0:	f04f 0a02 	mov.w	sl, #2
 8009ef4:	4604      	mov	r4, r0
 8009ef6:	460d      	mov	r5, r1
 8009ef8:	e749      	b.n	8009d8e <atan+0xbe>
 8009efa:	4602      	mov	r2, r0
 8009efc:	460b      	mov	r3, r1
 8009efe:	2000      	movs	r0, #0
 8009f00:	4934      	ldr	r1, [pc, #208]	; (8009fd4 <atan+0x304>)
 8009f02:	f7f6 fc13 	bl	800072c <__aeabi_ddiv>
 8009f06:	f04f 0a03 	mov.w	sl, #3
 8009f0a:	4604      	mov	r4, r0
 8009f0c:	460d      	mov	r5, r1
 8009f0e:	e73e      	b.n	8009d8e <atan+0xbe>
 8009f10:	4b31      	ldr	r3, [pc, #196]	; (8009fd8 <atan+0x308>)
 8009f12:	4e32      	ldr	r6, [pc, #200]	; (8009fdc <atan+0x30c>)
 8009f14:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009f18:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8009f1c:	e9da 2300 	ldrd	r2, r3, [sl]
 8009f20:	f7f6 f922 	bl	8000168 <__aeabi_dsub>
 8009f24:	4622      	mov	r2, r4
 8009f26:	462b      	mov	r3, r5
 8009f28:	f7f6 f91e 	bl	8000168 <__aeabi_dsub>
 8009f2c:	4602      	mov	r2, r0
 8009f2e:	460b      	mov	r3, r1
 8009f30:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009f34:	f7f6 f918 	bl	8000168 <__aeabi_dsub>
 8009f38:	f1bb 0f00 	cmp.w	fp, #0
 8009f3c:	4604      	mov	r4, r0
 8009f3e:	460d      	mov	r5, r1
 8009f40:	f6bf aee4 	bge.w	8009d0c <atan+0x3c>
 8009f44:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009f48:	461d      	mov	r5, r3
 8009f4a:	e6df      	b.n	8009d0c <atan+0x3c>
 8009f4c:	4d24      	ldr	r5, [pc, #144]	; (8009fe0 <atan+0x310>)
 8009f4e:	e6dd      	b.n	8009d0c <atan+0x3c>
 8009f50:	8800759c 	.word	0x8800759c
 8009f54:	7e37e43c 	.word	0x7e37e43c
 8009f58:	e322da11 	.word	0xe322da11
 8009f5c:	3f90ad3a 	.word	0x3f90ad3a
 8009f60:	24760deb 	.word	0x24760deb
 8009f64:	3fa97b4b 	.word	0x3fa97b4b
 8009f68:	a0d03d51 	.word	0xa0d03d51
 8009f6c:	3fb10d66 	.word	0x3fb10d66
 8009f70:	c54c206e 	.word	0xc54c206e
 8009f74:	3fb745cd 	.word	0x3fb745cd
 8009f78:	920083ff 	.word	0x920083ff
 8009f7c:	3fc24924 	.word	0x3fc24924
 8009f80:	5555550d 	.word	0x5555550d
 8009f84:	3fd55555 	.word	0x3fd55555
 8009f88:	2c6a6c2f 	.word	0x2c6a6c2f
 8009f8c:	bfa2b444 	.word	0xbfa2b444
 8009f90:	52defd9a 	.word	0x52defd9a
 8009f94:	3fadde2d 	.word	0x3fadde2d
 8009f98:	af749a6d 	.word	0xaf749a6d
 8009f9c:	3fb3b0f2 	.word	0x3fb3b0f2
 8009fa0:	fe231671 	.word	0xfe231671
 8009fa4:	3fbc71c6 	.word	0x3fbc71c6
 8009fa8:	9998ebc4 	.word	0x9998ebc4
 8009fac:	3fc99999 	.word	0x3fc99999
 8009fb0:	440fffff 	.word	0x440fffff
 8009fb4:	7ff00000 	.word	0x7ff00000
 8009fb8:	54442d18 	.word	0x54442d18
 8009fbc:	bff921fb 	.word	0xbff921fb
 8009fc0:	3fdbffff 	.word	0x3fdbffff
 8009fc4:	3ff00000 	.word	0x3ff00000
 8009fc8:	3ff2ffff 	.word	0x3ff2ffff
 8009fcc:	40038000 	.word	0x40038000
 8009fd0:	3ff80000 	.word	0x3ff80000
 8009fd4:	bff00000 	.word	0xbff00000
 8009fd8:	0800c970 	.word	0x0800c970
 8009fdc:	0800c950 	.word	0x0800c950
 8009fe0:	3ff921fb 	.word	0x3ff921fb

08009fe4 <fabs>:
 8009fe4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009fe8:	4770      	bx	lr
 8009fea:	0000      	movs	r0, r0
 8009fec:	0000      	movs	r0, r0
	...

08009ff0 <floor>:
 8009ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ff4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8009ff8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8009ffc:	2e13      	cmp	r6, #19
 8009ffe:	4602      	mov	r2, r0
 800a000:	460b      	mov	r3, r1
 800a002:	4607      	mov	r7, r0
 800a004:	460c      	mov	r4, r1
 800a006:	4605      	mov	r5, r0
 800a008:	dc34      	bgt.n	800a074 <floor+0x84>
 800a00a:	2e00      	cmp	r6, #0
 800a00c:	da15      	bge.n	800a03a <floor+0x4a>
 800a00e:	a334      	add	r3, pc, #208	; (adr r3, 800a0e0 <floor+0xf0>)
 800a010:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a014:	f7f6 f8aa 	bl	800016c <__adddf3>
 800a018:	2200      	movs	r2, #0
 800a01a:	2300      	movs	r3, #0
 800a01c:	f7f6 fcec 	bl	80009f8 <__aeabi_dcmpgt>
 800a020:	b140      	cbz	r0, 800a034 <floor+0x44>
 800a022:	2c00      	cmp	r4, #0
 800a024:	da59      	bge.n	800a0da <floor+0xea>
 800a026:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800a02a:	ea57 0503 	orrs.w	r5, r7, r3
 800a02e:	d001      	beq.n	800a034 <floor+0x44>
 800a030:	2500      	movs	r5, #0
 800a032:	4c2d      	ldr	r4, [pc, #180]	; (800a0e8 <floor+0xf8>)
 800a034:	4623      	mov	r3, r4
 800a036:	462f      	mov	r7, r5
 800a038:	e025      	b.n	800a086 <floor+0x96>
 800a03a:	4a2c      	ldr	r2, [pc, #176]	; (800a0ec <floor+0xfc>)
 800a03c:	fa42 f806 	asr.w	r8, r2, r6
 800a040:	ea01 0208 	and.w	r2, r1, r8
 800a044:	4302      	orrs	r2, r0
 800a046:	d01e      	beq.n	800a086 <floor+0x96>
 800a048:	a325      	add	r3, pc, #148	; (adr r3, 800a0e0 <floor+0xf0>)
 800a04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a04e:	f7f6 f88d 	bl	800016c <__adddf3>
 800a052:	2200      	movs	r2, #0
 800a054:	2300      	movs	r3, #0
 800a056:	f7f6 fccf 	bl	80009f8 <__aeabi_dcmpgt>
 800a05a:	2800      	cmp	r0, #0
 800a05c:	d0ea      	beq.n	800a034 <floor+0x44>
 800a05e:	2c00      	cmp	r4, #0
 800a060:	bfbe      	ittt	lt
 800a062:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a066:	fa43 f606 	asrlt.w	r6, r3, r6
 800a06a:	19a4      	addlt	r4, r4, r6
 800a06c:	2500      	movs	r5, #0
 800a06e:	ea24 0408 	bic.w	r4, r4, r8
 800a072:	e7df      	b.n	800a034 <floor+0x44>
 800a074:	2e33      	cmp	r6, #51	; 0x33
 800a076:	dd0a      	ble.n	800a08e <floor+0x9e>
 800a078:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a07c:	d103      	bne.n	800a086 <floor+0x96>
 800a07e:	f7f6 f875 	bl	800016c <__adddf3>
 800a082:	4607      	mov	r7, r0
 800a084:	460b      	mov	r3, r1
 800a086:	4638      	mov	r0, r7
 800a088:	4619      	mov	r1, r3
 800a08a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a08e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a092:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800a096:	fa22 f808 	lsr.w	r8, r2, r8
 800a09a:	ea18 0f00 	tst.w	r8, r0
 800a09e:	d0f2      	beq.n	800a086 <floor+0x96>
 800a0a0:	a30f      	add	r3, pc, #60	; (adr r3, 800a0e0 <floor+0xf0>)
 800a0a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0a6:	f7f6 f861 	bl	800016c <__adddf3>
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	f7f6 fca3 	bl	80009f8 <__aeabi_dcmpgt>
 800a0b2:	2800      	cmp	r0, #0
 800a0b4:	d0be      	beq.n	800a034 <floor+0x44>
 800a0b6:	2c00      	cmp	r4, #0
 800a0b8:	da02      	bge.n	800a0c0 <floor+0xd0>
 800a0ba:	2e14      	cmp	r6, #20
 800a0bc:	d103      	bne.n	800a0c6 <floor+0xd6>
 800a0be:	3401      	adds	r4, #1
 800a0c0:	ea25 0508 	bic.w	r5, r5, r8
 800a0c4:	e7b6      	b.n	800a034 <floor+0x44>
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a0cc:	fa03 f606 	lsl.w	r6, r3, r6
 800a0d0:	4435      	add	r5, r6
 800a0d2:	42bd      	cmp	r5, r7
 800a0d4:	bf38      	it	cc
 800a0d6:	18e4      	addcc	r4, r4, r3
 800a0d8:	e7f2      	b.n	800a0c0 <floor+0xd0>
 800a0da:	2500      	movs	r5, #0
 800a0dc:	462c      	mov	r4, r5
 800a0de:	e7a9      	b.n	800a034 <floor+0x44>
 800a0e0:	8800759c 	.word	0x8800759c
 800a0e4:	7e37e43c 	.word	0x7e37e43c
 800a0e8:	bff00000 	.word	0xbff00000
 800a0ec:	000fffff 	.word	0x000fffff

0800a0f0 <scalbn>:
 800a0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0f2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800a0f6:	4604      	mov	r4, r0
 800a0f8:	460d      	mov	r5, r1
 800a0fa:	4617      	mov	r7, r2
 800a0fc:	460b      	mov	r3, r1
 800a0fe:	b996      	cbnz	r6, 800a126 <scalbn+0x36>
 800a100:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a104:	4303      	orrs	r3, r0
 800a106:	d039      	beq.n	800a17c <scalbn+0x8c>
 800a108:	4b35      	ldr	r3, [pc, #212]	; (800a1e0 <scalbn+0xf0>)
 800a10a:	2200      	movs	r2, #0
 800a10c:	f7f6 f9e4 	bl	80004d8 <__aeabi_dmul>
 800a110:	4b34      	ldr	r3, [pc, #208]	; (800a1e4 <scalbn+0xf4>)
 800a112:	4604      	mov	r4, r0
 800a114:	429f      	cmp	r7, r3
 800a116:	460d      	mov	r5, r1
 800a118:	da0f      	bge.n	800a13a <scalbn+0x4a>
 800a11a:	a32d      	add	r3, pc, #180	; (adr r3, 800a1d0 <scalbn+0xe0>)
 800a11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a120:	f7f6 f9da 	bl	80004d8 <__aeabi_dmul>
 800a124:	e006      	b.n	800a134 <scalbn+0x44>
 800a126:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800a12a:	4296      	cmp	r6, r2
 800a12c:	d10a      	bne.n	800a144 <scalbn+0x54>
 800a12e:	4602      	mov	r2, r0
 800a130:	f7f6 f81c 	bl	800016c <__adddf3>
 800a134:	4604      	mov	r4, r0
 800a136:	460d      	mov	r5, r1
 800a138:	e020      	b.n	800a17c <scalbn+0x8c>
 800a13a:	460b      	mov	r3, r1
 800a13c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a140:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800a144:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800a148:	19b9      	adds	r1, r7, r6
 800a14a:	4291      	cmp	r1, r2
 800a14c:	dd0e      	ble.n	800a16c <scalbn+0x7c>
 800a14e:	a322      	add	r3, pc, #136	; (adr r3, 800a1d8 <scalbn+0xe8>)
 800a150:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a154:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800a158:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800a15c:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800a160:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800a164:	4820      	ldr	r0, [pc, #128]	; (800a1e8 <scalbn+0xf8>)
 800a166:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800a16a:	e7d9      	b.n	800a120 <scalbn+0x30>
 800a16c:	2900      	cmp	r1, #0
 800a16e:	dd08      	ble.n	800a182 <scalbn+0x92>
 800a170:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a174:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a178:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800a17c:	4620      	mov	r0, r4
 800a17e:	4629      	mov	r1, r5
 800a180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a182:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800a186:	da16      	bge.n	800a1b6 <scalbn+0xc6>
 800a188:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a18c:	429f      	cmp	r7, r3
 800a18e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800a192:	dd08      	ble.n	800a1a6 <scalbn+0xb6>
 800a194:	4c15      	ldr	r4, [pc, #84]	; (800a1ec <scalbn+0xfc>)
 800a196:	4814      	ldr	r0, [pc, #80]	; (800a1e8 <scalbn+0xf8>)
 800a198:	f363 74df 	bfi	r4, r3, #31, #1
 800a19c:	a30e      	add	r3, pc, #56	; (adr r3, 800a1d8 <scalbn+0xe8>)
 800a19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a2:	4621      	mov	r1, r4
 800a1a4:	e7bc      	b.n	800a120 <scalbn+0x30>
 800a1a6:	4c12      	ldr	r4, [pc, #72]	; (800a1f0 <scalbn+0x100>)
 800a1a8:	4812      	ldr	r0, [pc, #72]	; (800a1f4 <scalbn+0x104>)
 800a1aa:	f363 74df 	bfi	r4, r3, #31, #1
 800a1ae:	a308      	add	r3, pc, #32	; (adr r3, 800a1d0 <scalbn+0xe0>)
 800a1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b4:	e7f5      	b.n	800a1a2 <scalbn+0xb2>
 800a1b6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a1ba:	3136      	adds	r1, #54	; 0x36
 800a1bc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a1c0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800a1c4:	4620      	mov	r0, r4
 800a1c6:	4629      	mov	r1, r5
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	4b0b      	ldr	r3, [pc, #44]	; (800a1f8 <scalbn+0x108>)
 800a1cc:	e7a8      	b.n	800a120 <scalbn+0x30>
 800a1ce:	bf00      	nop
 800a1d0:	c2f8f359 	.word	0xc2f8f359
 800a1d4:	01a56e1f 	.word	0x01a56e1f
 800a1d8:	8800759c 	.word	0x8800759c
 800a1dc:	7e37e43c 	.word	0x7e37e43c
 800a1e0:	43500000 	.word	0x43500000
 800a1e4:	ffff3cb0 	.word	0xffff3cb0
 800a1e8:	8800759c 	.word	0x8800759c
 800a1ec:	7e37e43c 	.word	0x7e37e43c
 800a1f0:	01a56e1f 	.word	0x01a56e1f
 800a1f4:	c2f8f359 	.word	0xc2f8f359
 800a1f8:	3c900000 	.word	0x3c900000

0800a1fc <_init>:
 800a1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1fe:	bf00      	nop
 800a200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a202:	bc08      	pop	{r3}
 800a204:	469e      	mov	lr, r3
 800a206:	4770      	bx	lr

0800a208 <_fini>:
 800a208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a20a:	bf00      	nop
 800a20c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a20e:	bc08      	pop	{r3}
 800a210:	469e      	mov	lr, r3
 800a212:	4770      	bx	lr


oled_accel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c94  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002148  08009da8  08009da8  00019da8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bef0  0800bef0  00020274  2**0
                  CONTENTS
  4 .ARM          00000000  0800bef0  0800bef0  00020274  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bef0  0800bef0  00020274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bef0  0800bef0  0001bef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bef4  0800bef4  0001bef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000274  20000000  0800bef8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000086c  20000274  0800c16c  00020274  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ae0  0800c16c  00020ae0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012956  00000000  00000000  0002029d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029bc  00000000  00000000  00032bf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001120  00000000  00000000  000355b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ff8  00000000  00000000  000366d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019f13  00000000  00000000  000376c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012f69  00000000  00000000  000515db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093ad1  00000000  00000000  00064544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f8015  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005dcc  00000000  00000000  000f8068  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000274 	.word	0x20000274
 800012c:	00000000 	.word	0x00000000
 8000130:	08009d8c 	.word	0x08009d8c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000278 	.word	0x20000278
 800014c:	08009d8c 	.word	0x08009d8c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001114:	f001 f84e 	bl	80021b4 <HAL_Init>

  /* USER CODE BEGIN Init */


  FIRFilter_Init(&az_filter);
 8001118:	4847      	ldr	r0, [pc, #284]	; (8001238 <main+0x128>)
 800111a:	f003 ff59 	bl	8004fd0 <FIRFilter_Init>
  FIRFilter_Init(&angle_yx_filter);
 800111e:	4847      	ldr	r0, [pc, #284]	; (800123c <main+0x12c>)
 8001120:	f003 ff56 	bl	8004fd0 <FIRFilter_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001124:	f000 f89e 	bl	8001264 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001128:	f000 fa58 	bl	80015dc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800112c:	f000 fa2c 	bl	8001588 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001130:	f000 f98e 	bl	8001450 <MX_TIM2_Init>
  MX_ADC1_Init();
 8001134:	f000 f8f2 	bl	800131c <MX_ADC1_Init>
  MX_I2C1_Init();
 8001138:	f000 f92e 	bl	8001398 <MX_I2C1_Init>
  MX_I2C2_Init();
 800113c:	f000 f95a 	bl	80013f4 <MX_I2C2_Init>
  MX_TIM3_Init();
 8001140:	f000 f9d4 	bl	80014ec <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  mpu6050_Init(&mpu6050);
 8001144:	483e      	ldr	r0, [pc, #248]	; (8001240 <main+0x130>)
 8001146:	f003 ffbf 	bl	80050c8 <mpu6050_Init>
  ssd1306_Init();
 800114a:	f004 f895 	bl	8005278 <ssd1306_Init>

  ssd1306_Fill(Black);
 800114e:	2000      	movs	r0, #0
 8001150:	f004 f8fc 	bl	800534c <ssd1306_Fill>
  ssd1306_SetCursor(1, 11);
 8001154:	210b      	movs	r1, #11
 8001156:	2001      	movs	r0, #1
 8001158:	f004 fa5e 	bl	8005618 <ssd1306_SetCursor>
  ssd1306_WriteString("Proyecto final", Font_7x10, White);
 800115c:	4a39      	ldr	r2, [pc, #228]	; (8001244 <main+0x134>)
 800115e:	2301      	movs	r3, #1
 8001160:	ca06      	ldmia	r2, {r1, r2}
 8001162:	4839      	ldr	r0, [pc, #228]	; (8001248 <main+0x138>)
 8001164:	f004 fa32 	bl	80055cc <ssd1306_WriteString>
  ssd1306_SetCursor(1, 27);
 8001168:	211b      	movs	r1, #27
 800116a:	2001      	movs	r0, #1
 800116c:	f004 fa54 	bl	8005618 <ssd1306_SetCursor>
  ssd1306_WriteString("Sistemas Embebidos", Font_7x10, White);
 8001170:	4a34      	ldr	r2, [pc, #208]	; (8001244 <main+0x134>)
 8001172:	2301      	movs	r3, #1
 8001174:	ca06      	ldmia	r2, {r1, r2}
 8001176:	4835      	ldr	r0, [pc, #212]	; (800124c <main+0x13c>)
 8001178:	f004 fa28 	bl	80055cc <ssd1306_WriteString>
  ssd1306_SetCursor(1, 43);
 800117c:	212b      	movs	r1, #43	; 0x2b
 800117e:	2001      	movs	r0, #1
 8001180:	f004 fa4a 	bl	8005618 <ssd1306_SetCursor>
  ssd1306_WriteString("Tomas Cornaglia", Font_7x10, White);
 8001184:	4a2f      	ldr	r2, [pc, #188]	; (8001244 <main+0x134>)
 8001186:	2301      	movs	r3, #1
 8001188:	ca06      	ldmia	r2, {r1, r2}
 800118a:	4831      	ldr	r0, [pc, #196]	; (8001250 <main+0x140>)
 800118c:	f004 fa1e 	bl	80055cc <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8001190:	f004 f8fe 	bl	8005390 <ssd1306_UpdateScreen>

  HAL_Delay(1000);
 8001194:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001198:	f001 f86e 	bl	8002278 <HAL_Delay>

  HAL_TIM_Base_Start_IT(&htim3);
 800119c:	482d      	ldr	r0, [pc, #180]	; (8001254 <main+0x144>)
 800119e:	f003 fa63 	bl	8004668 <HAL_TIM_Base_Start_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	switch(display_mode)
 80011a2:	4b2d      	ldr	r3, [pc, #180]	; (8001258 <main+0x148>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d002      	beq.n	80011b0 <main+0xa0>
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d006      	beq.n	80011bc <main+0xac>
 80011ae:	e00e      	b.n	80011ce <main+0xbe>
	{
		case 1:
			bubbleLevel_1d(angle.yx);
 80011b0:	4b2a      	ldr	r3, [pc, #168]	; (800125c <main+0x14c>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f000 fb77 	bl	80018a8 <bubbleLevel_1d>
			break;
 80011ba:	e008      	b.n	80011ce <main+0xbe>

		case 2:
			bubbleLevel_2d(angle.yz, angle.xz);
 80011bc:	4b27      	ldr	r3, [pc, #156]	; (800125c <main+0x14c>)
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	4a26      	ldr	r2, [pc, #152]	; (800125c <main+0x14c>)
 80011c2:	6852      	ldr	r2, [r2, #4]
 80011c4:	4611      	mov	r1, r2
 80011c6:	4618      	mov	r0, r3
 80011c8:	f000 fc42 	bl	8001a50 <bubbleLevel_2d>
			break;
 80011cc:	bf00      	nop
	}

	if( (az_filter.out < 0.3) && (display_mode != 1)  )	// Revisar como evaluar que el timer ya está corriendo, cosa de no iniciarlo más de una vez.
 80011ce:	4b1a      	ldr	r3, [pc, #104]	; (8001238 <main+0x128>)
 80011d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff f927 	bl	8000428 <__aeabi_f2d>
 80011da:	a313      	add	r3, pc, #76	; (adr r3, 8001228 <main+0x118>)
 80011dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e0:	f7ff fbec 	bl	80009bc <__aeabi_dcmplt>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d006      	beq.n	80011f8 <main+0xe8>
 80011ea:	4b1b      	ldr	r3, [pc, #108]	; (8001258 <main+0x148>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d002      	beq.n	80011f8 <main+0xe8>
		HAL_TIM_Base_Start_IT(&htim2);
 80011f2:	481b      	ldr	r0, [pc, #108]	; (8001260 <main+0x150>)
 80011f4:	f003 fa38 	bl	8004668 <HAL_TIM_Base_Start_IT>

	if( (az_filter.out > 0.7) && (display_mode != 2) )
 80011f8:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <main+0x128>)
 80011fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff f912 	bl	8000428 <__aeabi_f2d>
 8001204:	a30a      	add	r3, pc, #40	; (adr r3, 8001230 <main+0x120>)
 8001206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800120a:	f7ff fbf5 	bl	80009f8 <__aeabi_dcmpgt>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d006      	beq.n	8001222 <main+0x112>
 8001214:	4b10      	ldr	r3, [pc, #64]	; (8001258 <main+0x148>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b02      	cmp	r3, #2
 800121a:	d0c2      	beq.n	80011a2 <main+0x92>
		HAL_TIM_Base_Start_IT(&htim2);
 800121c:	4810      	ldr	r0, [pc, #64]	; (8001260 <main+0x150>)
 800121e:	f003 fa23 	bl	8004668 <HAL_TIM_Base_Start_IT>
	switch(display_mode)
 8001222:	e7be      	b.n	80011a2 <main+0x92>
 8001224:	f3af 8000 	nop.w
 8001228:	33333333 	.word	0x33333333
 800122c:	3fd33333 	.word	0x3fd33333
 8001230:	66666666 	.word	0x66666666
 8001234:	3fe66666 	.word	0x3fe66666
 8001238:	200002b0 	.word	0x200002b0
 800123c:	20000338 	.word	0x20000338
 8001240:	20000294 	.word	0x20000294
 8001244:	20000090 	.word	0x20000090
 8001248:	08009da8 	.word	0x08009da8
 800124c:	08009db8 	.word	0x08009db8
 8001250:	08009dcc 	.word	0x08009dcc
 8001254:	200009b0 	.word	0x200009b0
 8001258:	20000290 	.word	0x20000290
 800125c:	20000a68 	.word	0x20000a68
 8001260:	20000a74 	.word	0x20000a74

08001264 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b094      	sub	sp, #80	; 0x50
 8001268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800126a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800126e:	2228      	movs	r2, #40	; 0x28
 8001270:	2100      	movs	r1, #0
 8001272:	4618      	mov	r0, r3
 8001274:	f004 fb7a 	bl	800596c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001278:	f107 0314 	add.w	r3, r7, #20
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001288:	1d3b      	adds	r3, r7, #4
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]
 8001292:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001294:	2301      	movs	r3, #1
 8001296:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001298:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800129c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800129e:	2300      	movs	r3, #0
 80012a0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012a2:	2301      	movs	r3, #1
 80012a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012a6:	2302      	movs	r3, #2
 80012a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012b0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80012b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012ba:	4618      	mov	r0, r3
 80012bc:	f002 fcb4 	bl	8003c28 <HAL_RCC_OscConfig>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <SystemClock_Config+0x66>
  {
    Error_Handler();
 80012c6:	f000 fce1 	bl	8001c8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ca:	230f      	movs	r3, #15
 80012cc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ce:	2302      	movs	r3, #2
 80012d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012d2:	2300      	movs	r3, #0
 80012d4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012da:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012dc:	2300      	movs	r3, #0
 80012de:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	2102      	movs	r1, #2
 80012e6:	4618      	mov	r0, r3
 80012e8:	f002 ff1e 	bl	8004128 <HAL_RCC_ClockConfig>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80012f2:	f000 fccb 	bl	8001c8c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80012f6:	2302      	movs	r3, #2
 80012f8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80012fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012fe:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001300:	1d3b      	adds	r3, r7, #4
 8001302:	4618      	mov	r0, r3
 8001304:	f003 f8aa 	bl	800445c <HAL_RCCEx_PeriphCLKConfig>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800130e:	f000 fcbd 	bl	8001c8c <Error_Handler>
  }
}
 8001312:	bf00      	nop
 8001314:	3750      	adds	r7, #80	; 0x50
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
	...

0800131c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800132c:	4b18      	ldr	r3, [pc, #96]	; (8001390 <MX_ADC1_Init+0x74>)
 800132e:	4a19      	ldr	r2, [pc, #100]	; (8001394 <MX_ADC1_Init+0x78>)
 8001330:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001332:	4b17      	ldr	r3, [pc, #92]	; (8001390 <MX_ADC1_Init+0x74>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001338:	4b15      	ldr	r3, [pc, #84]	; (8001390 <MX_ADC1_Init+0x74>)
 800133a:	2200      	movs	r2, #0
 800133c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800133e:	4b14      	ldr	r3, [pc, #80]	; (8001390 <MX_ADC1_Init+0x74>)
 8001340:	2200      	movs	r2, #0
 8001342:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001344:	4b12      	ldr	r3, [pc, #72]	; (8001390 <MX_ADC1_Init+0x74>)
 8001346:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800134a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800134c:	4b10      	ldr	r3, [pc, #64]	; (8001390 <MX_ADC1_Init+0x74>)
 800134e:	2200      	movs	r2, #0
 8001350:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001352:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <MX_ADC1_Init+0x74>)
 8001354:	2201      	movs	r2, #1
 8001356:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001358:	480d      	ldr	r0, [pc, #52]	; (8001390 <MX_ADC1_Init+0x74>)
 800135a:	f000 ffb1 	bl	80022c0 <HAL_ADC_Init>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001364:	f000 fc92 	bl	8001c8c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001368:	2307      	movs	r3, #7
 800136a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800136c:	2301      	movs	r3, #1
 800136e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001370:	2300      	movs	r3, #0
 8001372:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	4619      	mov	r1, r3
 8001378:	4805      	ldr	r0, [pc, #20]	; (8001390 <MX_ADC1_Init+0x74>)
 800137a:	f001 f879 	bl	8002470 <HAL_ADC_ConfigChannel>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001384:	f000 fc82 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001388:	bf00      	nop
 800138a:	3710      	adds	r7, #16
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	200009f8 	.word	0x200009f8
 8001394:	40012400 	.word	0x40012400

08001398 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800139c:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <MX_I2C1_Init+0x50>)
 800139e:	4a13      	ldr	r2, [pc, #76]	; (80013ec <MX_I2C1_Init+0x54>)
 80013a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013a2:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <MX_I2C1_Init+0x50>)
 80013a4:	4a12      	ldr	r2, [pc, #72]	; (80013f0 <MX_I2C1_Init+0x58>)
 80013a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013a8:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <MX_I2C1_Init+0x50>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013ae:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <MX_I2C1_Init+0x50>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013b4:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <MX_I2C1_Init+0x50>)
 80013b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013bc:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <MX_I2C1_Init+0x50>)
 80013be:	2200      	movs	r2, #0
 80013c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013c2:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <MX_I2C1_Init+0x50>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013c8:	4b07      	ldr	r3, [pc, #28]	; (80013e8 <MX_I2C1_Init+0x50>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013ce:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <MX_I2C1_Init+0x50>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013d4:	4804      	ldr	r0, [pc, #16]	; (80013e8 <MX_I2C1_Init+0x50>)
 80013d6:	f001 fc27 	bl	8002c28 <HAL_I2C_Init>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013e0:	f000 fc54 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013e4:	bf00      	nop
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	200008f8 	.word	0x200008f8
 80013ec:	40005400 	.word	0x40005400
 80013f0:	000186a0 	.word	0x000186a0

080013f4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80013f8:	4b12      	ldr	r3, [pc, #72]	; (8001444 <MX_I2C2_Init+0x50>)
 80013fa:	4a13      	ldr	r2, [pc, #76]	; (8001448 <MX_I2C2_Init+0x54>)
 80013fc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80013fe:	4b11      	ldr	r3, [pc, #68]	; (8001444 <MX_I2C2_Init+0x50>)
 8001400:	4a12      	ldr	r2, [pc, #72]	; (800144c <MX_I2C2_Init+0x58>)
 8001402:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001404:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <MX_I2C2_Init+0x50>)
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800140a:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <MX_I2C2_Init+0x50>)
 800140c:	2200      	movs	r2, #0
 800140e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001410:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <MX_I2C2_Init+0x50>)
 8001412:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001416:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001418:	4b0a      	ldr	r3, [pc, #40]	; (8001444 <MX_I2C2_Init+0x50>)
 800141a:	2200      	movs	r2, #0
 800141c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800141e:	4b09      	ldr	r3, [pc, #36]	; (8001444 <MX_I2C2_Init+0x50>)
 8001420:	2200      	movs	r2, #0
 8001422:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001424:	4b07      	ldr	r3, [pc, #28]	; (8001444 <MX_I2C2_Init+0x50>)
 8001426:	2200      	movs	r2, #0
 8001428:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800142a:	4b06      	ldr	r3, [pc, #24]	; (8001444 <MX_I2C2_Init+0x50>)
 800142c:	2200      	movs	r2, #0
 800142e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001430:	4804      	ldr	r0, [pc, #16]	; (8001444 <MX_I2C2_Init+0x50>)
 8001432:	f001 fbf9 	bl	8002c28 <HAL_I2C_Init>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800143c:	f000 fc26 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}
 8001444:	2000094c 	.word	0x2000094c
 8001448:	40005800 	.word	0x40005800
 800144c:	000186a0 	.word	0x000186a0

08001450 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001456:	f107 0308 	add.w	r3, r7, #8
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001464:	463b      	mov	r3, r7
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800146c:	4b1e      	ldr	r3, [pc, #120]	; (80014e8 <MX_TIM2_Init+0x98>)
 800146e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001472:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200;
 8001474:	4b1c      	ldr	r3, [pc, #112]	; (80014e8 <MX_TIM2_Init+0x98>)
 8001476:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 800147a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800147c:	4b1a      	ldr	r3, [pc, #104]	; (80014e8 <MX_TIM2_Init+0x98>)
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8001482:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <MX_TIM2_Init+0x98>)
 8001484:	f242 7210 	movw	r2, #10000	; 0x2710
 8001488:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800148a:	4b17      	ldr	r3, [pc, #92]	; (80014e8 <MX_TIM2_Init+0x98>)
 800148c:	2200      	movs	r2, #0
 800148e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001490:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <MX_TIM2_Init+0x98>)
 8001492:	2280      	movs	r2, #128	; 0x80
 8001494:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001496:	4814      	ldr	r0, [pc, #80]	; (80014e8 <MX_TIM2_Init+0x98>)
 8001498:	f003 f896 	bl	80045c8 <HAL_TIM_Base_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80014a2:	f000 fbf3 	bl	8001c8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014ac:	f107 0308 	add.w	r3, r7, #8
 80014b0:	4619      	mov	r1, r3
 80014b2:	480d      	ldr	r0, [pc, #52]	; (80014e8 <MX_TIM2_Init+0x98>)
 80014b4:	f003 fa60 	bl	8004978 <HAL_TIM_ConfigClockSource>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80014be:	f000 fbe5 	bl	8001c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014c2:	2300      	movs	r3, #0
 80014c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c6:	2300      	movs	r3, #0
 80014c8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014ca:	463b      	mov	r3, r7
 80014cc:	4619      	mov	r1, r3
 80014ce:	4806      	ldr	r0, [pc, #24]	; (80014e8 <MX_TIM2_Init+0x98>)
 80014d0:	f003 fc32 	bl	8004d38 <HAL_TIMEx_MasterConfigSynchronization>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80014da:	f000 fbd7 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014de:	bf00      	nop
 80014e0:	3718      	adds	r7, #24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20000a74 	.word	0x20000a74

080014ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014f2:	f107 0308 	add.w	r3, r7, #8
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]
 80014fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001500:	463b      	mov	r3, r7
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001508:	4b1d      	ldr	r3, [pc, #116]	; (8001580 <MX_TIM3_Init+0x94>)
 800150a:	4a1e      	ldr	r2, [pc, #120]	; (8001584 <MX_TIM3_Init+0x98>)
 800150c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 720;
 800150e:	4b1c      	ldr	r3, [pc, #112]	; (8001580 <MX_TIM3_Init+0x94>)
 8001510:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8001514:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001516:	4b1a      	ldr	r3, [pc, #104]	; (8001580 <MX_TIM3_Init+0x94>)
 8001518:	2200      	movs	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500;
 800151c:	4b18      	ldr	r3, [pc, #96]	; (8001580 <MX_TIM3_Init+0x94>)
 800151e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001522:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001524:	4b16      	ldr	r3, [pc, #88]	; (8001580 <MX_TIM3_Init+0x94>)
 8001526:	2200      	movs	r2, #0
 8001528:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800152a:	4b15      	ldr	r3, [pc, #84]	; (8001580 <MX_TIM3_Init+0x94>)
 800152c:	2200      	movs	r2, #0
 800152e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001530:	4813      	ldr	r0, [pc, #76]	; (8001580 <MX_TIM3_Init+0x94>)
 8001532:	f003 f849 	bl	80045c8 <HAL_TIM_Base_Init>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800153c:	f000 fba6 	bl	8001c8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001540:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001544:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001546:	f107 0308 	add.w	r3, r7, #8
 800154a:	4619      	mov	r1, r3
 800154c:	480c      	ldr	r0, [pc, #48]	; (8001580 <MX_TIM3_Init+0x94>)
 800154e:	f003 fa13 	bl	8004978 <HAL_TIM_ConfigClockSource>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001558:	f000 fb98 	bl	8001c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800155c:	2300      	movs	r3, #0
 800155e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001560:	2300      	movs	r3, #0
 8001562:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001564:	463b      	mov	r3, r7
 8001566:	4619      	mov	r1, r3
 8001568:	4805      	ldr	r0, [pc, #20]	; (8001580 <MX_TIM3_Init+0x94>)
 800156a:	f003 fbe5 	bl	8004d38 <HAL_TIMEx_MasterConfigSynchronization>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001574:	f000 fb8a 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001578:	bf00      	nop
 800157a:	3718      	adds	r7, #24
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	200009b0 	.word	0x200009b0
 8001584:	40000400 	.word	0x40000400

08001588 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800158c:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <MX_USART1_UART_Init+0x4c>)
 800158e:	4a12      	ldr	r2, [pc, #72]	; (80015d8 <MX_USART1_UART_Init+0x50>)
 8001590:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001592:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <MX_USART1_UART_Init+0x4c>)
 8001594:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001598:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800159a:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <MX_USART1_UART_Init+0x4c>)
 800159c:	2200      	movs	r2, #0
 800159e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015a0:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <MX_USART1_UART_Init+0x4c>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015a6:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <MX_USART1_UART_Init+0x4c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015ac:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <MX_USART1_UART_Init+0x4c>)
 80015ae:	220c      	movs	r2, #12
 80015b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015b2:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <MX_USART1_UART_Init+0x4c>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <MX_USART1_UART_Init+0x4c>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015be:	4805      	ldr	r0, [pc, #20]	; (80015d4 <MX_USART1_UART_Init+0x4c>)
 80015c0:	f003 fc2a 	bl	8004e18 <HAL_UART_Init>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80015ca:	f000 fb5f 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000a28 	.word	0x20000a28
 80015d8:	40013800 	.word	0x40013800

080015dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b088      	sub	sp, #32
 80015e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e2:	f107 0310 	add.w	r3, r7, #16
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]
 80015ec:	609a      	str	r2, [r3, #8]
 80015ee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015f0:	4b2a      	ldr	r3, [pc, #168]	; (800169c <MX_GPIO_Init+0xc0>)
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	4a29      	ldr	r2, [pc, #164]	; (800169c <MX_GPIO_Init+0xc0>)
 80015f6:	f043 0310 	orr.w	r3, r3, #16
 80015fa:	6193      	str	r3, [r2, #24]
 80015fc:	4b27      	ldr	r3, [pc, #156]	; (800169c <MX_GPIO_Init+0xc0>)
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	f003 0310 	and.w	r3, r3, #16
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001608:	4b24      	ldr	r3, [pc, #144]	; (800169c <MX_GPIO_Init+0xc0>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	4a23      	ldr	r2, [pc, #140]	; (800169c <MX_GPIO_Init+0xc0>)
 800160e:	f043 0320 	orr.w	r3, r3, #32
 8001612:	6193      	str	r3, [r2, #24]
 8001614:	4b21      	ldr	r3, [pc, #132]	; (800169c <MX_GPIO_Init+0xc0>)
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	f003 0320 	and.w	r3, r3, #32
 800161c:	60bb      	str	r3, [r7, #8]
 800161e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001620:	4b1e      	ldr	r3, [pc, #120]	; (800169c <MX_GPIO_Init+0xc0>)
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	4a1d      	ldr	r2, [pc, #116]	; (800169c <MX_GPIO_Init+0xc0>)
 8001626:	f043 0304 	orr.w	r3, r3, #4
 800162a:	6193      	str	r3, [r2, #24]
 800162c:	4b1b      	ldr	r3, [pc, #108]	; (800169c <MX_GPIO_Init+0xc0>)
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	f003 0304 	and.w	r3, r3, #4
 8001634:	607b      	str	r3, [r7, #4]
 8001636:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001638:	4b18      	ldr	r3, [pc, #96]	; (800169c <MX_GPIO_Init+0xc0>)
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	4a17      	ldr	r2, [pc, #92]	; (800169c <MX_GPIO_Init+0xc0>)
 800163e:	f043 0308 	orr.w	r3, r3, #8
 8001642:	6193      	str	r3, [r2, #24]
 8001644:	4b15      	ldr	r3, [pc, #84]	; (800169c <MX_GPIO_Init+0xc0>)
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	f003 0308 	and.w	r3, r3, #8
 800164c:	603b      	str	r3, [r7, #0]
 800164e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001650:	2201      	movs	r2, #1
 8001652:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001656:	4812      	ldr	r0, [pc, #72]	; (80016a0 <MX_GPIO_Init+0xc4>)
 8001658:	f001 face 	bl	8002bf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800165c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001660:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001662:	2301      	movs	r3, #1
 8001664:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166a:	2302      	movs	r3, #2
 800166c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800166e:	f107 0310 	add.w	r3, r7, #16
 8001672:	4619      	mov	r1, r3
 8001674:	480a      	ldr	r0, [pc, #40]	; (80016a0 <MX_GPIO_Init+0xc4>)
 8001676:	f001 f93b 	bl	80028f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800167a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800167e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001684:	2301      	movs	r3, #1
 8001686:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001688:	f107 0310 	add.w	r3, r7, #16
 800168c:	4619      	mov	r1, r3
 800168e:	4804      	ldr	r0, [pc, #16]	; (80016a0 <MX_GPIO_Init+0xc4>)
 8001690:	f001 f92e 	bl	80028f0 <HAL_GPIO_Init>

}
 8001694:	bf00      	nop
 8001696:	3720      	adds	r7, #32
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40021000 	.word	0x40021000
 80016a0:	40011000 	.word	0x40011000
 80016a4:	00000000 	.word	0x00000000

080016a8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80016a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016ac:	b082      	sub	sp, #8
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]

//
//	HAL_TIM_Base_Stop_IT(&htim2);

	if(htim->Instance==TIM2)	//	Si interrupcion proviene de TIM2 -> cambio de modo de display
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016ba:	d124      	bne.n	8001706 <HAL_TIM_PeriodElapsedCallback+0x5e>
	{
		if(az_filter.out > 0.8)
 80016bc:	4b70      	ldr	r3, [pc, #448]	; (8001880 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80016be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7fe feb0 	bl	8000428 <__aeabi_f2d>
 80016c8:	a367      	add	r3, pc, #412	; (adr r3, 8001868 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80016ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ce:	f7ff f993 	bl	80009f8 <__aeabi_dcmpgt>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d002      	beq.n	80016de <HAL_TIM_PeriodElapsedCallback+0x36>
			display_mode = 2;
 80016d8:	4b6a      	ldr	r3, [pc, #424]	; (8001884 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80016da:	2202      	movs	r2, #2
 80016dc:	701a      	strb	r2, [r3, #0]

		if(az_filter.out < 0.2)
 80016de:	4b68      	ldr	r3, [pc, #416]	; (8001880 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80016e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7fe fe9f 	bl	8000428 <__aeabi_f2d>
 80016ea:	a361      	add	r3, pc, #388	; (adr r3, 8001870 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80016ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f0:	f7ff f964 	bl	80009bc <__aeabi_dcmplt>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d002      	beq.n	8001700 <HAL_TIM_PeriodElapsedCallback+0x58>
			display_mode = 1;
 80016fa:	4b62      	ldr	r3, [pc, #392]	; (8001884 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80016fc:	2201      	movs	r2, #1
 80016fe:	701a      	strb	r2, [r3, #0]

		HAL_TIM_Base_Stop_IT(&htim2);
 8001700:	4861      	ldr	r0, [pc, #388]	; (8001888 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001702:	f003 f803 	bl	800470c <HAL_TIM_Base_Stop_IT>
	}

	if(htim->Instance==TIM3)	//	Si intrerrupcion proviene de TIM3 -> lectura de MPU6050
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a60      	ldr	r2, [pc, #384]	; (800188c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800170c:	4293      	cmp	r3, r2
 800170e:	f040 80a5 	bne.w	800185c <HAL_TIM_PeriodElapsedCallback+0x1b4>
	{
		mpu6050_Get_Accel(&mpu6050);
 8001712:	485f      	ldr	r0, [pc, #380]	; (8001890 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001714:	f003 fd0c 	bl	8005130 <mpu6050_Get_Accel>

		FIRFilter_Update(&az_filter, mpu6050.accel_z);
 8001718:	4b5d      	ldr	r3, [pc, #372]	; (8001890 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	4619      	mov	r1, r3
 800171e:	4858      	ldr	r0, [pc, #352]	; (8001880 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001720:	f003 fc78 	bl	8005014 <FIRFilter_Update>

		angle.yx = -1*(atan2(mpu6050.accel_y,mpu6050.accel_x)*180)/PI;
 8001724:	4b5a      	ldr	r3, [pc, #360]	; (8001890 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	4618      	mov	r0, r3
 800172a:	f7fe fe7d 	bl	8000428 <__aeabi_f2d>
 800172e:	4682      	mov	sl, r0
 8001730:	468b      	mov	fp, r1
 8001732:	4b57      	ldr	r3, [pc, #348]	; (8001890 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4618      	mov	r0, r3
 8001738:	f7fe fe76 	bl	8000428 <__aeabi_f2d>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	4650      	mov	r0, sl
 8001742:	4659      	mov	r1, fp
 8001744:	f007 f82c 	bl	80087a0 <atan2>
 8001748:	f04f 0200 	mov.w	r2, #0
 800174c:	4b51      	ldr	r3, [pc, #324]	; (8001894 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800174e:	f7fe fec3 	bl	80004d8 <__aeabi_dmul>
 8001752:	4602      	mov	r2, r0
 8001754:	460b      	mov	r3, r1
 8001756:	4690      	mov	r8, r2
 8001758:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 800175c:	a346      	add	r3, pc, #280	; (adr r3, 8001878 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 800175e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001762:	4640      	mov	r0, r8
 8001764:	4649      	mov	r1, r9
 8001766:	f7fe ffe1 	bl	800072c <__aeabi_ddiv>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	4610      	mov	r0, r2
 8001770:	4619      	mov	r1, r3
 8001772:	f7ff f9a9 	bl	8000ac8 <__aeabi_d2f>
 8001776:	4603      	mov	r3, r0
 8001778:	4a47      	ldr	r2, [pc, #284]	; (8001898 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800177a:	6013      	str	r3, [r2, #0]
		angle.xz = (atan2(mpu6050.accel_x,mpu6050.accel_z)*180)/PI;
 800177c:	4b44      	ldr	r3, [pc, #272]	; (8001890 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4618      	mov	r0, r3
 8001782:	f7fe fe51 	bl	8000428 <__aeabi_f2d>
 8001786:	4680      	mov	r8, r0
 8001788:	4689      	mov	r9, r1
 800178a:	4b41      	ldr	r3, [pc, #260]	; (8001890 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	4618      	mov	r0, r3
 8001790:	f7fe fe4a 	bl	8000428 <__aeabi_f2d>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	4640      	mov	r0, r8
 800179a:	4649      	mov	r1, r9
 800179c:	f007 f800 	bl	80087a0 <atan2>
 80017a0:	f04f 0200 	mov.w	r2, #0
 80017a4:	4b3b      	ldr	r3, [pc, #236]	; (8001894 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80017a6:	f7fe fe97 	bl	80004d8 <__aeabi_dmul>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	4610      	mov	r0, r2
 80017b0:	4619      	mov	r1, r3
 80017b2:	a331      	add	r3, pc, #196	; (adr r3, 8001878 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80017b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b8:	f7fe ffb8 	bl	800072c <__aeabi_ddiv>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	4610      	mov	r0, r2
 80017c2:	4619      	mov	r1, r3
 80017c4:	f7ff f980 	bl	8000ac8 <__aeabi_d2f>
 80017c8:	4603      	mov	r3, r0
 80017ca:	4a33      	ldr	r2, [pc, #204]	; (8001898 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80017cc:	6053      	str	r3, [r2, #4]
		angle.yz = -1*(atan2(mpu6050.accel_y,mpu6050.accel_z)*180)/PI;
 80017ce:	4b30      	ldr	r3, [pc, #192]	; (8001890 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7fe fe28 	bl	8000428 <__aeabi_f2d>
 80017d8:	4680      	mov	r8, r0
 80017da:	4689      	mov	r9, r1
 80017dc:	4b2c      	ldr	r3, [pc, #176]	; (8001890 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7fe fe21 	bl	8000428 <__aeabi_f2d>
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	4640      	mov	r0, r8
 80017ec:	4649      	mov	r1, r9
 80017ee:	f006 ffd7 	bl	80087a0 <atan2>
 80017f2:	f04f 0200 	mov.w	r2, #0
 80017f6:	4b27      	ldr	r3, [pc, #156]	; (8001894 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80017f8:	f7fe fe6e 	bl	80004d8 <__aeabi_dmul>
 80017fc:	4602      	mov	r2, r0
 80017fe:	460b      	mov	r3, r1
 8001800:	4614      	mov	r4, r2
 8001802:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001806:	a31c      	add	r3, pc, #112	; (adr r3, 8001878 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180c:	4620      	mov	r0, r4
 800180e:	4629      	mov	r1, r5
 8001810:	f7fe ff8c 	bl	800072c <__aeabi_ddiv>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	4610      	mov	r0, r2
 800181a:	4619      	mov	r1, r3
 800181c:	f7ff f954 	bl	8000ac8 <__aeabi_d2f>
 8001820:	4603      	mov	r3, r0
 8001822:	4a1d      	ldr	r2, [pc, #116]	; (8001898 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001824:	6093      	str	r3, [r2, #8]

		angle.yx = FIRFilter_Update(&angle_yx_filter, angle.yx);
 8001826:	4b1c      	ldr	r3, [pc, #112]	; (8001898 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4619      	mov	r1, r3
 800182c:	481b      	ldr	r0, [pc, #108]	; (800189c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800182e:	f003 fbf1 	bl	8005014 <FIRFilter_Update>
 8001832:	4603      	mov	r3, r0
 8001834:	4a18      	ldr	r2, [pc, #96]	; (8001898 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001836:	6013      	str	r3, [r2, #0]
		angle.xz = FIRFilter_Update(&angle_xz_filter, angle.xz);
 8001838:	4b17      	ldr	r3, [pc, #92]	; (8001898 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	4619      	mov	r1, r3
 800183e:	4818      	ldr	r0, [pc, #96]	; (80018a0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001840:	f003 fbe8 	bl	8005014 <FIRFilter_Update>
 8001844:	4603      	mov	r3, r0
 8001846:	4a14      	ldr	r2, [pc, #80]	; (8001898 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001848:	6053      	str	r3, [r2, #4]
		angle.yz = FIRFilter_Update(&angle_yz_filter, angle.yz);
 800184a:	4b13      	ldr	r3, [pc, #76]	; (8001898 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	4619      	mov	r1, r3
 8001850:	4814      	ldr	r0, [pc, #80]	; (80018a4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001852:	f003 fbdf 	bl	8005014 <FIRFilter_Update>
 8001856:	4603      	mov	r3, r0
 8001858:	4a0f      	ldr	r2, [pc, #60]	; (8001898 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800185a:	6093      	str	r3, [r2, #8]
	}

}
 800185c:	bf00      	nop
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001866:	bf00      	nop
 8001868:	9999999a 	.word	0x9999999a
 800186c:	3fe99999 	.word	0x3fe99999
 8001870:	9999999a 	.word	0x9999999a
 8001874:	3fc99999 	.word	0x3fc99999
 8001878:	5443d6f4 	.word	0x5443d6f4
 800187c:	400921fb 	.word	0x400921fb
 8001880:	200002b0 	.word	0x200002b0
 8001884:	20000290 	.word	0x20000290
 8001888:	20000a74 	.word	0x20000a74
 800188c:	40000400 	.word	0x40000400
 8001890:	20000294 	.word	0x20000294
 8001894:	40668000 	.word	0x40668000
 8001898:	20000a68 	.word	0x20000a68
 800189c:	20000338 	.word	0x20000338
 80018a0:	200003c0 	.word	0x200003c0
 80018a4:	20000448 	.word	0x20000448

080018a8 <bubbleLevel_1d>:
//	ssd1306_UpdateScreen();
//}


static void bubbleLevel_1d(float angle)
{
 80018a8:	b5b0      	push	{r4, r5, r7, lr}
 80018aa:	b088      	sub	sp, #32
 80018ac:	af02      	add	r7, sp, #8
 80018ae:	6078      	str	r0, [r7, #4]

	#define COLOR	1

	char  MSG0[7] = "";
 80018b0:	2300      	movs	r3, #0
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	f107 0310 	add.w	r3, r7, #16
 80018b8:	2100      	movs	r1, #0
 80018ba:	460a      	mov	r2, r1
 80018bc:	801a      	strh	r2, [r3, #0]
 80018be:	460a      	mov	r2, r1
 80018c0:	709a      	strb	r2, [r3, #2]

	static uint8_t radius = 9;
	static int16_t x0;
	const uint8_t y0 = 52;
 80018c2:	2334      	movs	r3, #52	; 0x34
 80018c4:	75fb      	strb	r3, [r7, #23]
	const uint8_t x1 = 10;
 80018c6:	230a      	movs	r3, #10
 80018c8:	75bb      	strb	r3, [r7, #22]
	const uint8_t x2 = 120;
 80018ca:	2378      	movs	r3, #120	; 0x78
 80018cc:	757b      	strb	r3, [r7, #21]

	//angle = -170;

	//x0 = ((angle + 180)/360.0)*(x2 - x1 - 2*(radius + 1)) + (x1 + radius +1);
	//x0 = (angle/60.0)*45.0 + 65;
	x0 = (angle/60.0)*(x2 - (radius+1) - (x2 + x1)/2) + (x2 + x1)/2;
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f7fe fdaa 	bl	8000428 <__aeabi_f2d>
 80018d4:	f04f 0200 	mov.w	r2, #0
 80018d8:	4b58      	ldr	r3, [pc, #352]	; (8001a3c <bubbleLevel_1d+0x194>)
 80018da:	f7fe ff27 	bl	800072c <__aeabi_ddiv>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	4614      	mov	r4, r2
 80018e4:	461d      	mov	r5, r3
 80018e6:	7d7a      	ldrb	r2, [r7, #21]
 80018e8:	4b55      	ldr	r3, [pc, #340]	; (8001a40 <bubbleLevel_1d+0x198>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	3301      	adds	r3, #1
 80018ee:	1ad2      	subs	r2, r2, r3
 80018f0:	7d79      	ldrb	r1, [r7, #21]
 80018f2:	7dbb      	ldrb	r3, [r7, #22]
 80018f4:	440b      	add	r3, r1
 80018f6:	0fd9      	lsrs	r1, r3, #31
 80018f8:	440b      	add	r3, r1
 80018fa:	105b      	asrs	r3, r3, #1
 80018fc:	425b      	negs	r3, r3
 80018fe:	4413      	add	r3, r2
 8001900:	4618      	mov	r0, r3
 8001902:	f7fe fd7f 	bl	8000404 <__aeabi_i2d>
 8001906:	4602      	mov	r2, r0
 8001908:	460b      	mov	r3, r1
 800190a:	4620      	mov	r0, r4
 800190c:	4629      	mov	r1, r5
 800190e:	f7fe fde3 	bl	80004d8 <__aeabi_dmul>
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	4614      	mov	r4, r2
 8001918:	461d      	mov	r5, r3
 800191a:	7d7a      	ldrb	r2, [r7, #21]
 800191c:	7dbb      	ldrb	r3, [r7, #22]
 800191e:	4413      	add	r3, r2
 8001920:	0fda      	lsrs	r2, r3, #31
 8001922:	4413      	add	r3, r2
 8001924:	105b      	asrs	r3, r3, #1
 8001926:	4618      	mov	r0, r3
 8001928:	f7fe fd6c 	bl	8000404 <__aeabi_i2d>
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
 8001930:	4620      	mov	r0, r4
 8001932:	4629      	mov	r1, r5
 8001934:	f7fe fc1a 	bl	800016c <__adddf3>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	4610      	mov	r0, r2
 800193e:	4619      	mov	r1, r3
 8001940:	f7ff f87a 	bl	8000a38 <__aeabi_d2iz>
 8001944:	4603      	mov	r3, r0
 8001946:	b21a      	sxth	r2, r3
 8001948:	4b3e      	ldr	r3, [pc, #248]	; (8001a44 <bubbleLevel_1d+0x19c>)
 800194a:	801a      	strh	r2, [r3, #0]

	if( (x0 - (radius +1)) <= x1 )
 800194c:	4b3d      	ldr	r3, [pc, #244]	; (8001a44 <bubbleLevel_1d+0x19c>)
 800194e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001952:	461a      	mov	r2, r3
 8001954:	4b3a      	ldr	r3, [pc, #232]	; (8001a40 <bubbleLevel_1d+0x198>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	3301      	adds	r3, #1
 800195a:	1ad2      	subs	r2, r2, r3
 800195c:	7dbb      	ldrb	r3, [r7, #22]
 800195e:	429a      	cmp	r2, r3
 8001960:	dc0b      	bgt.n	800197a <bubbleLevel_1d+0xd2>
		x0 = x1 + (radius + 1);
 8001962:	7dbb      	ldrb	r3, [r7, #22]
 8001964:	b29a      	uxth	r2, r3
 8001966:	4b36      	ldr	r3, [pc, #216]	; (8001a40 <bubbleLevel_1d+0x198>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	b29b      	uxth	r3, r3
 800196c:	4413      	add	r3, r2
 800196e:	b29b      	uxth	r3, r3
 8001970:	3301      	adds	r3, #1
 8001972:	b29b      	uxth	r3, r3
 8001974:	b21a      	sxth	r2, r3
 8001976:	4b33      	ldr	r3, [pc, #204]	; (8001a44 <bubbleLevel_1d+0x19c>)
 8001978:	801a      	strh	r2, [r3, #0]
										//	SON NECESARIOS ESTOS LÍMITES?
	if( (x0 + (radius +1)) >= x2 )
 800197a:	4b32      	ldr	r3, [pc, #200]	; (8001a44 <bubbleLevel_1d+0x19c>)
 800197c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001980:	461a      	mov	r2, r3
 8001982:	4b2f      	ldr	r3, [pc, #188]	; (8001a40 <bubbleLevel_1d+0x198>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	3301      	adds	r3, #1
 8001988:	441a      	add	r2, r3
 800198a:	7d7b      	ldrb	r3, [r7, #21]
 800198c:	429a      	cmp	r2, r3
 800198e:	db0b      	blt.n	80019a8 <bubbleLevel_1d+0x100>
		x0 = x2 - (radius + 1);
 8001990:	7d7b      	ldrb	r3, [r7, #21]
 8001992:	b29a      	uxth	r2, r3
 8001994:	4b2a      	ldr	r3, [pc, #168]	; (8001a40 <bubbleLevel_1d+0x198>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	b29b      	uxth	r3, r3
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	b29b      	uxth	r3, r3
 800199e:	3b01      	subs	r3, #1
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	b21a      	sxth	r2, r3
 80019a4:	4b27      	ldr	r3, [pc, #156]	; (8001a44 <bubbleLevel_1d+0x19c>)
 80019a6:	801a      	strh	r2, [r3, #0]

	sprintf(MSG0, "%+4.1f", angle);
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f7fe fd3d 	bl	8000428 <__aeabi_f2d>
 80019ae:	4602      	mov	r2, r0
 80019b0:	460b      	mov	r3, r1
 80019b2:	f107 000c 	add.w	r0, r7, #12
 80019b6:	4924      	ldr	r1, [pc, #144]	; (8001a48 <bubbleLevel_1d+0x1a0>)
 80019b8:	f004 fc40 	bl	800623c <siprintf>

	ssd1306_Fill(!COLOR);
 80019bc:	2000      	movs	r0, #0
 80019be:	f003 fcc5 	bl	800534c <ssd1306_Fill>
	ssd1306_DrawRectangle(x1, y0 - (radius + 1), x2, y0 + (radius +1), COLOR);
 80019c2:	4b1f      	ldr	r3, [pc, #124]	; (8001a40 <bubbleLevel_1d+0x198>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	7dfa      	ldrb	r2, [r7, #23]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	3b01      	subs	r3, #1
 80019ce:	b2d9      	uxtb	r1, r3
 80019d0:	4b1b      	ldr	r3, [pc, #108]	; (8001a40 <bubbleLevel_1d+0x198>)
 80019d2:	781a      	ldrb	r2, [r3, #0]
 80019d4:	7dfb      	ldrb	r3, [r7, #23]
 80019d6:	4413      	add	r3, r2
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	3301      	adds	r3, #1
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	7d7a      	ldrb	r2, [r7, #21]
 80019e0:	7db8      	ldrb	r0, [r7, #22]
 80019e2:	2401      	movs	r4, #1
 80019e4:	9400      	str	r4, [sp, #0]
 80019e6:	f003 ff21 	bl	800582c <ssd1306_DrawRectangle>
	ssd1306_DrawCircle(x0, y0, radius, COLOR);
 80019ea:	4b16      	ldr	r3, [pc, #88]	; (8001a44 <bubbleLevel_1d+0x19c>)
 80019ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019f0:	b2d8      	uxtb	r0, r3
 80019f2:	4b13      	ldr	r3, [pc, #76]	; (8001a40 <bubbleLevel_1d+0x198>)
 80019f4:	781a      	ldrb	r2, [r3, #0]
 80019f6:	7df9      	ldrb	r1, [r7, #23]
 80019f8:	2301      	movs	r3, #1
 80019fa:	f003 fe91 	bl	8005720 <ssd1306_DrawCircle>
	ssd1306_DrawCircle(x0+3, y0-3, 2, COLOR);
 80019fe:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <bubbleLevel_1d+0x19c>)
 8001a00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	3303      	adds	r3, #3
 8001a08:	b2d8      	uxtb	r0, r3
 8001a0a:	7dfb      	ldrb	r3, [r7, #23]
 8001a0c:	3b03      	subs	r3, #3
 8001a0e:	b2d9      	uxtb	r1, r3
 8001a10:	2301      	movs	r3, #1
 8001a12:	2202      	movs	r2, #2
 8001a14:	f003 fe84 	bl	8005720 <ssd1306_DrawCircle>
	ssd1306_SetCursor(26, 8);
 8001a18:	2108      	movs	r1, #8
 8001a1a:	201a      	movs	r0, #26
 8001a1c:	f003 fdfc 	bl	8005618 <ssd1306_SetCursor>
	ssd1306_WriteString(MSG0, Font_16x26, COLOR);
 8001a20:	4a0a      	ldr	r2, [pc, #40]	; (8001a4c <bubbleLevel_1d+0x1a4>)
 8001a22:	f107 000c 	add.w	r0, r7, #12
 8001a26:	2301      	movs	r3, #1
 8001a28:	ca06      	ldmia	r2, {r1, r2}
 8001a2a:	f003 fdcf 	bl	80055cc <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001a2e:	f003 fcaf 	bl	8005390 <ssd1306_UpdateScreen>

}
 8001a32:	bf00      	nop
 8001a34:	3718      	adds	r7, #24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bdb0      	pop	{r4, r5, r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	404e0000 	.word	0x404e0000
 8001a40:	20000000 	.word	0x20000000
 8001a44:	200004d0 	.word	0x200004d0
 8001a48:	08009ddc 	.word	0x08009ddc
 8001a4c:	20000098 	.word	0x20000098

08001a50 <bubbleLevel_2d>:

static void bubbleLevel_2d(float angle_xz, float angle_yz)
{
 8001a50:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a54:	b08c      	sub	sp, #48	; 0x30
 8001a56:	af02      	add	r7, sp, #8
 8001a58:	6078      	str	r0, [r7, #4]
 8001a5a:	6039      	str	r1, [r7, #0]

	#define COLOR 	1
	#define FONT	Font_7x10

	char  MSG0[7] = "";
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	617b      	str	r3, [r7, #20]
 8001a60:	f107 0318 	add.w	r3, r7, #24
 8001a64:	2100      	movs	r1, #0
 8001a66:	460a      	mov	r2, r1
 8001a68:	801a      	strh	r2, [r3, #0]
 8001a6a:	460a      	mov	r2, r1
 8001a6c:	709a      	strb	r2, [r3, #2]
	char  MSG1[7] = "";
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	f107 0310 	add.w	r3, r7, #16
 8001a76:	2100      	movs	r1, #0
 8001a78:	460a      	mov	r2, r1
 8001a7a:	801a      	strh	r2, [r3, #0]
 8001a7c:	460a      	mov	r2, r1
 8001a7e:	709a      	strb	r2, [r3, #2]

	sprintf(MSG0, "%+4.1f", angle_xz);
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f7fe fcd1 	bl	8000428 <__aeabi_f2d>
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	f107 0014 	add.w	r0, r7, #20
 8001a8e:	497c      	ldr	r1, [pc, #496]	; (8001c80 <bubbleLevel_2d+0x230>)
 8001a90:	f004 fbd4 	bl	800623c <siprintf>
	sprintf(MSG1, "%+4.1f", angle_yz);
 8001a94:	6838      	ldr	r0, [r7, #0]
 8001a96:	f7fe fcc7 	bl	8000428 <__aeabi_f2d>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	f107 000c 	add.w	r0, r7, #12
 8001aa2:	4977      	ldr	r1, [pc, #476]	; (8001c80 <bubbleLevel_2d+0x230>)
 8001aa4:	f004 fbca 	bl	800623c <siprintf>

	uint8_t x0 = 95;
 8001aa8:	235f      	movs	r3, #95	; 0x5f
 8001aaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t y0 = 32;
 8001aae:	2320      	movs	r3, #32
 8001ab0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	float radius;
	float theta;

	//radius = sqrt(pow(angle_yz, 2) + pow(angle_xz, 2));
	radius = sqrt(angle_yz*angle_yz + angle_xz*angle_xz);
 8001ab4:	6839      	ldr	r1, [r7, #0]
 8001ab6:	6838      	ldr	r0, [r7, #0]
 8001ab8:	f7ff f964 	bl	8000d84 <__aeabi_fmul>
 8001abc:	4603      	mov	r3, r0
 8001abe:	461c      	mov	r4, r3
 8001ac0:	6879      	ldr	r1, [r7, #4]
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7ff f95e 	bl	8000d84 <__aeabi_fmul>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	4619      	mov	r1, r3
 8001acc:	4620      	mov	r0, r4
 8001ace:	f7ff f851 	bl	8000b74 <__addsf3>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7fe fca7 	bl	8000428 <__aeabi_f2d>
 8001ada:	4602      	mov	r2, r0
 8001adc:	460b      	mov	r3, r1
 8001ade:	4610      	mov	r0, r2
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	f006 fe5f 	bl	80087a4 <sqrt>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	460b      	mov	r3, r1
 8001aea:	4610      	mov	r0, r2
 8001aec:	4619      	mov	r1, r3
 8001aee:	f7fe ffeb 	bl	8000ac8 <__aeabi_d2f>
 8001af2:	4603      	mov	r3, r0
 8001af4:	627b      	str	r3, [r7, #36]	; 0x24

	if(radius > 26)
 8001af6:	4963      	ldr	r1, [pc, #396]	; (8001c84 <bubbleLevel_2d+0x234>)
 8001af8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001afa:	f7ff faff 	bl	80010fc <__aeabi_fcmpgt>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <bubbleLevel_2d+0xb8>
		radius = 26;
 8001b04:	4b5f      	ldr	r3, [pc, #380]	; (8001c84 <bubbleLevel_2d+0x234>)
 8001b06:	627b      	str	r3, [r7, #36]	; 0x24

	theta = atan2(angle_xz, angle_yz);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f7fe fc8d 	bl	8000428 <__aeabi_f2d>
 8001b0e:	4604      	mov	r4, r0
 8001b10:	460d      	mov	r5, r1
 8001b12:	6838      	ldr	r0, [r7, #0]
 8001b14:	f7fe fc88 	bl	8000428 <__aeabi_f2d>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	4620      	mov	r0, r4
 8001b1e:	4629      	mov	r1, r5
 8001b20:	f006 fe3e 	bl	80087a0 <atan2>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	4610      	mov	r0, r2
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	f7fe ffcc 	bl	8000ac8 <__aeabi_d2f>
 8001b30:	4603      	mov	r3, r0
 8001b32:	61fb      	str	r3, [r7, #28]

	x0 += radius * sin(theta);
 8001b34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7fe fc63 	bl	8000404 <__aeabi_i2d>
 8001b3e:	4604      	mov	r4, r0
 8001b40:	460d      	mov	r5, r1
 8001b42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b44:	f7fe fc70 	bl	8000428 <__aeabi_f2d>
 8001b48:	4680      	mov	r8, r0
 8001b4a:	4689      	mov	r9, r1
 8001b4c:	69f8      	ldr	r0, [r7, #28]
 8001b4e:	f7fe fc6b 	bl	8000428 <__aeabi_f2d>
 8001b52:	4602      	mov	r2, r0
 8001b54:	460b      	mov	r3, r1
 8001b56:	4610      	mov	r0, r2
 8001b58:	4619      	mov	r1, r3
 8001b5a:	f006 fddb 	bl	8008714 <sin>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	4640      	mov	r0, r8
 8001b64:	4649      	mov	r1, r9
 8001b66:	f7fe fcb7 	bl	80004d8 <__aeabi_dmul>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	4620      	mov	r0, r4
 8001b70:	4629      	mov	r1, r5
 8001b72:	f7fe fafb 	bl	800016c <__adddf3>
 8001b76:	4602      	mov	r2, r0
 8001b78:	460b      	mov	r3, r1
 8001b7a:	4610      	mov	r0, r2
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	f7fe ff83 	bl	8000a88 <__aeabi_d2uiz>
 8001b82:	4603      	mov	r3, r0
 8001b84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	y0 -= radius * cos(theta);
 8001b88:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7fe fc39 	bl	8000404 <__aeabi_i2d>
 8001b92:	4604      	mov	r4, r0
 8001b94:	460d      	mov	r5, r1
 8001b96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b98:	f7fe fc46 	bl	8000428 <__aeabi_f2d>
 8001b9c:	4680      	mov	r8, r0
 8001b9e:	4689      	mov	r9, r1
 8001ba0:	69f8      	ldr	r0, [r7, #28]
 8001ba2:	f7fe fc41 	bl	8000428 <__aeabi_f2d>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	4610      	mov	r0, r2
 8001bac:	4619      	mov	r1, r3
 8001bae:	f006 fd6f 	bl	8008690 <cos>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	4640      	mov	r0, r8
 8001bb8:	4649      	mov	r1, r9
 8001bba:	f7fe fc8d 	bl	80004d8 <__aeabi_dmul>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	4620      	mov	r0, r4
 8001bc4:	4629      	mov	r1, r5
 8001bc6:	f7fe facf 	bl	8000168 <__aeabi_dsub>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	460b      	mov	r3, r1
 8001bce:	4610      	mov	r0, r2
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	f7fe ff59 	bl	8000a88 <__aeabi_d2uiz>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	//	FIN CONVERSION A COORDENADAS POLARES

	ssd1306_Fill(!COLOR);
 8001bdc:	2000      	movs	r0, #0
 8001bde:	f003 fbb5 	bl	800534c <ssd1306_Fill>
	ssd1306_DrawCircle(95, 32, 31, COLOR);
 8001be2:	2301      	movs	r3, #1
 8001be4:	221f      	movs	r2, #31
 8001be6:	2120      	movs	r1, #32
 8001be8:	205f      	movs	r0, #95	; 0x5f
 8001bea:	f003 fd99 	bl	8005720 <ssd1306_DrawCircle>
	//ssd1306_DrawRectangle(63, 1, 126, 63, COLOR);	//	Descomentar en caso de no usar coordenadas polares
	ssd1306_Line(64, 32, 126, 32, COLOR);
 8001bee:	2301      	movs	r3, #1
 8001bf0:	9300      	str	r3, [sp, #0]
 8001bf2:	2320      	movs	r3, #32
 8001bf4:	227e      	movs	r2, #126	; 0x7e
 8001bf6:	2120      	movs	r1, #32
 8001bf8:	2040      	movs	r0, #64	; 0x40
 8001bfa:	f003 fd25 	bl	8005648 <ssd1306_Line>
	ssd1306_Line(95, 1, 95, 63, COLOR);
 8001bfe:	2301      	movs	r3, #1
 8001c00:	9300      	str	r3, [sp, #0]
 8001c02:	233f      	movs	r3, #63	; 0x3f
 8001c04:	225f      	movs	r2, #95	; 0x5f
 8001c06:	2101      	movs	r1, #1
 8001c08:	205f      	movs	r0, #95	; 0x5f
 8001c0a:	f003 fd1d 	bl	8005648 <ssd1306_Line>
	ssd1306_DrawRectangle(89, 26, 101, 38, COLOR);
 8001c0e:	2301      	movs	r3, #1
 8001c10:	9300      	str	r3, [sp, #0]
 8001c12:	2326      	movs	r3, #38	; 0x26
 8001c14:	2265      	movs	r2, #101	; 0x65
 8001c16:	211a      	movs	r1, #26
 8001c18:	2059      	movs	r0, #89	; 0x59
 8001c1a:	f003 fe07 	bl	800582c <ssd1306_DrawRectangle>
	ssd1306_DrawCircle(x0, y0, 5, COLOR);
 8001c1e:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 8001c22:	f897 0023 	ldrb.w	r0, [r7, #35]	; 0x23
 8001c26:	2301      	movs	r3, #1
 8001c28:	2205      	movs	r2, #5
 8001c2a:	f003 fd79 	bl	8005720 <ssd1306_DrawCircle>
	ssd1306_DrawCircle(x0+2, y0-2, 1, COLOR);
 8001c2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001c32:	3302      	adds	r3, #2
 8001c34:	b2d8      	uxtb	r0, r3
 8001c36:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001c3a:	3b02      	subs	r3, #2
 8001c3c:	b2d9      	uxtb	r1, r3
 8001c3e:	2301      	movs	r3, #1
 8001c40:	2201      	movs	r2, #1
 8001c42:	f003 fd6d 	bl	8005720 <ssd1306_DrawCircle>
	ssd1306_SetCursor(1, 1);
 8001c46:	2101      	movs	r1, #1
 8001c48:	2001      	movs	r0, #1
 8001c4a:	f003 fce5 	bl	8005618 <ssd1306_SetCursor>
	ssd1306_WriteString(MSG0, FONT, COLOR);
 8001c4e:	4a0e      	ldr	r2, [pc, #56]	; (8001c88 <bubbleLevel_2d+0x238>)
 8001c50:	f107 0014 	add.w	r0, r7, #20
 8001c54:	2301      	movs	r3, #1
 8001c56:	ca06      	ldmia	r2, {r1, r2}
 8001c58:	f003 fcb8 	bl	80055cc <ssd1306_WriteString>
	ssd1306_SetCursor(1, 30);
 8001c5c:	211e      	movs	r1, #30
 8001c5e:	2001      	movs	r0, #1
 8001c60:	f003 fcda 	bl	8005618 <ssd1306_SetCursor>
	ssd1306_WriteString(MSG1, FONT, COLOR);
 8001c64:	4a08      	ldr	r2, [pc, #32]	; (8001c88 <bubbleLevel_2d+0x238>)
 8001c66:	f107 000c 	add.w	r0, r7, #12
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	ca06      	ldmia	r2, {r1, r2}
 8001c6e:	f003 fcad 	bl	80055cc <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001c72:	f003 fb8d 	bl	8005390 <ssd1306_UpdateScreen>

}
 8001c76:	bf00      	nop
 8001c78:	3728      	adds	r7, #40	; 0x28
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001c80:	08009ddc 	.word	0x08009ddc
 8001c84:	41d00000 	.word	0x41d00000
 8001c88:	20000090 	.word	0x20000090

08001c8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c90:	b672      	cpsid	i
}
 8001c92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c94:	e7fe      	b.n	8001c94 <Error_Handler+0x8>
	...

08001c98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c9e:	4b15      	ldr	r3, [pc, #84]	; (8001cf4 <HAL_MspInit+0x5c>)
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	4a14      	ldr	r2, [pc, #80]	; (8001cf4 <HAL_MspInit+0x5c>)
 8001ca4:	f043 0301 	orr.w	r3, r3, #1
 8001ca8:	6193      	str	r3, [r2, #24]
 8001caa:	4b12      	ldr	r3, [pc, #72]	; (8001cf4 <HAL_MspInit+0x5c>)
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	60bb      	str	r3, [r7, #8]
 8001cb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cb6:	4b0f      	ldr	r3, [pc, #60]	; (8001cf4 <HAL_MspInit+0x5c>)
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	4a0e      	ldr	r2, [pc, #56]	; (8001cf4 <HAL_MspInit+0x5c>)
 8001cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc0:	61d3      	str	r3, [r2, #28]
 8001cc2:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <HAL_MspInit+0x5c>)
 8001cc4:	69db      	ldr	r3, [r3, #28]
 8001cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cca:	607b      	str	r3, [r7, #4]
 8001ccc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001cce:	4b0a      	ldr	r3, [pc, #40]	; (8001cf8 <HAL_MspInit+0x60>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	4a04      	ldr	r2, [pc, #16]	; (8001cf8 <HAL_MspInit+0x60>)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cea:	bf00      	nop
 8001cec:	3714      	adds	r7, #20
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bc80      	pop	{r7}
 8001cf2:	4770      	bx	lr
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	40010000 	.word	0x40010000

08001cfc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b088      	sub	sp, #32
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d04:	f107 0310 	add.w	r3, r7, #16
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a14      	ldr	r2, [pc, #80]	; (8001d68 <HAL_ADC_MspInit+0x6c>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d121      	bne.n	8001d60 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d1c:	4b13      	ldr	r3, [pc, #76]	; (8001d6c <HAL_ADC_MspInit+0x70>)
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	4a12      	ldr	r2, [pc, #72]	; (8001d6c <HAL_ADC_MspInit+0x70>)
 8001d22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d26:	6193      	str	r3, [r2, #24]
 8001d28:	4b10      	ldr	r3, [pc, #64]	; (8001d6c <HAL_ADC_MspInit+0x70>)
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d34:	4b0d      	ldr	r3, [pc, #52]	; (8001d6c <HAL_ADC_MspInit+0x70>)
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	4a0c      	ldr	r2, [pc, #48]	; (8001d6c <HAL_ADC_MspInit+0x70>)
 8001d3a:	f043 0304 	orr.w	r3, r3, #4
 8001d3e:	6193      	str	r3, [r2, #24]
 8001d40:	4b0a      	ldr	r3, [pc, #40]	; (8001d6c <HAL_ADC_MspInit+0x70>)
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	f003 0304 	and.w	r3, r3, #4
 8001d48:	60bb      	str	r3, [r7, #8]
 8001d4a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d4c:	2380      	movs	r3, #128	; 0x80
 8001d4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d50:	2303      	movs	r3, #3
 8001d52:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d54:	f107 0310 	add.w	r3, r7, #16
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4805      	ldr	r0, [pc, #20]	; (8001d70 <HAL_ADC_MspInit+0x74>)
 8001d5c:	f000 fdc8 	bl	80028f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d60:	bf00      	nop
 8001d62:	3720      	adds	r7, #32
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40012400 	.word	0x40012400
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	40010800 	.word	0x40010800

08001d74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b08a      	sub	sp, #40	; 0x28
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d7c:	f107 0318 	add.w	r3, r7, #24
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	609a      	str	r2, [r3, #8]
 8001d88:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a2b      	ldr	r2, [pc, #172]	; (8001e3c <HAL_I2C_MspInit+0xc8>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d124      	bne.n	8001dde <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d94:	4b2a      	ldr	r3, [pc, #168]	; (8001e40 <HAL_I2C_MspInit+0xcc>)
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	4a29      	ldr	r2, [pc, #164]	; (8001e40 <HAL_I2C_MspInit+0xcc>)
 8001d9a:	f043 0308 	orr.w	r3, r3, #8
 8001d9e:	6193      	str	r3, [r2, #24]
 8001da0:	4b27      	ldr	r3, [pc, #156]	; (8001e40 <HAL_I2C_MspInit+0xcc>)
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	f003 0308 	and.w	r3, r3, #8
 8001da8:	617b      	str	r3, [r7, #20]
 8001daa:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001dac:	23c0      	movs	r3, #192	; 0xc0
 8001dae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001db0:	2312      	movs	r3, #18
 8001db2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001db4:	2303      	movs	r3, #3
 8001db6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db8:	f107 0318 	add.w	r3, r7, #24
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4821      	ldr	r0, [pc, #132]	; (8001e44 <HAL_I2C_MspInit+0xd0>)
 8001dc0:	f000 fd96 	bl	80028f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dc4:	4b1e      	ldr	r3, [pc, #120]	; (8001e40 <HAL_I2C_MspInit+0xcc>)
 8001dc6:	69db      	ldr	r3, [r3, #28]
 8001dc8:	4a1d      	ldr	r2, [pc, #116]	; (8001e40 <HAL_I2C_MspInit+0xcc>)
 8001dca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001dce:	61d3      	str	r3, [r2, #28]
 8001dd0:	4b1b      	ldr	r3, [pc, #108]	; (8001e40 <HAL_I2C_MspInit+0xcc>)
 8001dd2:	69db      	ldr	r3, [r3, #28]
 8001dd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dd8:	613b      	str	r3, [r7, #16]
 8001dda:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001ddc:	e029      	b.n	8001e32 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a19      	ldr	r2, [pc, #100]	; (8001e48 <HAL_I2C_MspInit+0xd4>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d124      	bne.n	8001e32 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de8:	4b15      	ldr	r3, [pc, #84]	; (8001e40 <HAL_I2C_MspInit+0xcc>)
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	4a14      	ldr	r2, [pc, #80]	; (8001e40 <HAL_I2C_MspInit+0xcc>)
 8001dee:	f043 0308 	orr.w	r3, r3, #8
 8001df2:	6193      	str	r3, [r2, #24]
 8001df4:	4b12      	ldr	r3, [pc, #72]	; (8001e40 <HAL_I2C_MspInit+0xcc>)
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	f003 0308 	and.w	r3, r3, #8
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001e00:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001e04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e06:	2312      	movs	r3, #18
 8001e08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e0e:	f107 0318 	add.w	r3, r7, #24
 8001e12:	4619      	mov	r1, r3
 8001e14:	480b      	ldr	r0, [pc, #44]	; (8001e44 <HAL_I2C_MspInit+0xd0>)
 8001e16:	f000 fd6b 	bl	80028f0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e1a:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <HAL_I2C_MspInit+0xcc>)
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	4a08      	ldr	r2, [pc, #32]	; (8001e40 <HAL_I2C_MspInit+0xcc>)
 8001e20:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e24:	61d3      	str	r3, [r2, #28]
 8001e26:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <HAL_I2C_MspInit+0xcc>)
 8001e28:	69db      	ldr	r3, [r3, #28]
 8001e2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e2e:	60bb      	str	r3, [r7, #8]
 8001e30:	68bb      	ldr	r3, [r7, #8]
}
 8001e32:	bf00      	nop
 8001e34:	3728      	adds	r7, #40	; 0x28
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40005400 	.word	0x40005400
 8001e40:	40021000 	.word	0x40021000
 8001e44:	40010c00 	.word	0x40010c00
 8001e48:	40005800 	.word	0x40005800

08001e4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e5c:	d114      	bne.n	8001e88 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e5e:	4b19      	ldr	r3, [pc, #100]	; (8001ec4 <HAL_TIM_Base_MspInit+0x78>)
 8001e60:	69db      	ldr	r3, [r3, #28]
 8001e62:	4a18      	ldr	r2, [pc, #96]	; (8001ec4 <HAL_TIM_Base_MspInit+0x78>)
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	61d3      	str	r3, [r2, #28]
 8001e6a:	4b16      	ldr	r3, [pc, #88]	; (8001ec4 <HAL_TIM_Base_MspInit+0x78>)
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e76:	2200      	movs	r2, #0
 8001e78:	2100      	movs	r1, #0
 8001e7a:	201c      	movs	r0, #28
 8001e7c:	f000 fd01 	bl	8002882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e80:	201c      	movs	r0, #28
 8001e82:	f000 fd1a 	bl	80028ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e86:	e018      	b.n	8001eba <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a0e      	ldr	r2, [pc, #56]	; (8001ec8 <HAL_TIM_Base_MspInit+0x7c>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d113      	bne.n	8001eba <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e92:	4b0c      	ldr	r3, [pc, #48]	; (8001ec4 <HAL_TIM_Base_MspInit+0x78>)
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	4a0b      	ldr	r2, [pc, #44]	; (8001ec4 <HAL_TIM_Base_MspInit+0x78>)
 8001e98:	f043 0302 	orr.w	r3, r3, #2
 8001e9c:	61d3      	str	r3, [r2, #28]
 8001e9e:	4b09      	ldr	r3, [pc, #36]	; (8001ec4 <HAL_TIM_Base_MspInit+0x78>)
 8001ea0:	69db      	ldr	r3, [r3, #28]
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	60bb      	str	r3, [r7, #8]
 8001ea8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001eaa:	2200      	movs	r2, #0
 8001eac:	2100      	movs	r1, #0
 8001eae:	201d      	movs	r0, #29
 8001eb0:	f000 fce7 	bl	8002882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001eb4:	201d      	movs	r0, #29
 8001eb6:	f000 fd00 	bl	80028ba <HAL_NVIC_EnableIRQ>
}
 8001eba:	bf00      	nop
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40000400 	.word	0x40000400

08001ecc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b088      	sub	sp, #32
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed4:	f107 0310 	add.w	r3, r7, #16
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	605a      	str	r2, [r3, #4]
 8001ede:	609a      	str	r2, [r3, #8]
 8001ee0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a1c      	ldr	r2, [pc, #112]	; (8001f58 <HAL_UART_MspInit+0x8c>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d131      	bne.n	8001f50 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001eec:	4b1b      	ldr	r3, [pc, #108]	; (8001f5c <HAL_UART_MspInit+0x90>)
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	4a1a      	ldr	r2, [pc, #104]	; (8001f5c <HAL_UART_MspInit+0x90>)
 8001ef2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ef6:	6193      	str	r3, [r2, #24]
 8001ef8:	4b18      	ldr	r3, [pc, #96]	; (8001f5c <HAL_UART_MspInit+0x90>)
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f00:	60fb      	str	r3, [r7, #12]
 8001f02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f04:	4b15      	ldr	r3, [pc, #84]	; (8001f5c <HAL_UART_MspInit+0x90>)
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	4a14      	ldr	r2, [pc, #80]	; (8001f5c <HAL_UART_MspInit+0x90>)
 8001f0a:	f043 0304 	orr.w	r3, r3, #4
 8001f0e:	6193      	str	r3, [r2, #24]
 8001f10:	4b12      	ldr	r3, [pc, #72]	; (8001f5c <HAL_UART_MspInit+0x90>)
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	f003 0304 	and.w	r3, r3, #4
 8001f18:	60bb      	str	r3, [r7, #8]
 8001f1a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f20:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f22:	2302      	movs	r3, #2
 8001f24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f26:	2303      	movs	r3, #3
 8001f28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f2a:	f107 0310 	add.w	r3, r7, #16
 8001f2e:	4619      	mov	r1, r3
 8001f30:	480b      	ldr	r0, [pc, #44]	; (8001f60 <HAL_UART_MspInit+0x94>)
 8001f32:	f000 fcdd 	bl	80028f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f40:	2300      	movs	r3, #0
 8001f42:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f44:	f107 0310 	add.w	r3, r7, #16
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4805      	ldr	r0, [pc, #20]	; (8001f60 <HAL_UART_MspInit+0x94>)
 8001f4c:	f000 fcd0 	bl	80028f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001f50:	bf00      	nop
 8001f52:	3720      	adds	r7, #32
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40013800 	.word	0x40013800
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	40010800 	.word	0x40010800

08001f64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f68:	e7fe      	b.n	8001f68 <NMI_Handler+0x4>

08001f6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f6e:	e7fe      	b.n	8001f6e <HardFault_Handler+0x4>

08001f70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f74:	e7fe      	b.n	8001f74 <MemManage_Handler+0x4>

08001f76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f76:	b480      	push	{r7}
 8001f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f7a:	e7fe      	b.n	8001f7a <BusFault_Handler+0x4>

08001f7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f80:	e7fe      	b.n	8001f80 <UsageFault_Handler+0x4>

08001f82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f82:	b480      	push	{r7}
 8001f84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f86:	bf00      	nop
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bc80      	pop	{r7}
 8001f8c:	4770      	bx	lr

08001f8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bc80      	pop	{r7}
 8001f98:	4770      	bx	lr

08001f9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f9e:	bf00      	nop
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bc80      	pop	{r7}
 8001fa4:	4770      	bx	lr

08001fa6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001faa:	f000 f949 	bl	8002240 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	bd80      	pop	{r7, pc}
	...

08001fb4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001fb8:	4802      	ldr	r0, [pc, #8]	; (8001fc4 <TIM2_IRQHandler+0x10>)
 8001fba:	f002 fbd5 	bl	8004768 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20000a74 	.word	0x20000a74

08001fc8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001fcc:	4802      	ldr	r0, [pc, #8]	; (8001fd8 <TIM3_IRQHandler+0x10>)
 8001fce:	f002 fbcb 	bl	8004768 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	200009b0 	.word	0x200009b0

08001fdc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
	return 1;
 8001fe0:	2301      	movs	r3, #1
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bc80      	pop	{r7}
 8001fe8:	4770      	bx	lr

08001fea <_kill>:

int _kill(int pid, int sig)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b082      	sub	sp, #8
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
 8001ff2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ff4:	f003 fc82 	bl	80058fc <__errno>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2216      	movs	r2, #22
 8001ffc:	601a      	str	r2, [r3, #0]
	return -1;
 8001ffe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002002:	4618      	mov	r0, r3
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <_exit>:

void _exit (int status)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b082      	sub	sp, #8
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002012:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f7ff ffe7 	bl	8001fea <_kill>
	while (1) {}		/* Make sure we hang here */
 800201c:	e7fe      	b.n	800201c <_exit+0x12>

0800201e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b086      	sub	sp, #24
 8002022:	af00      	add	r7, sp, #0
 8002024:	60f8      	str	r0, [r7, #12]
 8002026:	60b9      	str	r1, [r7, #8]
 8002028:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800202a:	2300      	movs	r3, #0
 800202c:	617b      	str	r3, [r7, #20]
 800202e:	e00a      	b.n	8002046 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002030:	f3af 8000 	nop.w
 8002034:	4601      	mov	r1, r0
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	1c5a      	adds	r2, r3, #1
 800203a:	60ba      	str	r2, [r7, #8]
 800203c:	b2ca      	uxtb	r2, r1
 800203e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	3301      	adds	r3, #1
 8002044:	617b      	str	r3, [r7, #20]
 8002046:	697a      	ldr	r2, [r7, #20]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	429a      	cmp	r2, r3
 800204c:	dbf0      	blt.n	8002030 <_read+0x12>
	}

return len;
 800204e:	687b      	ldr	r3, [r7, #4]
}
 8002050:	4618      	mov	r0, r3
 8002052:	3718      	adds	r7, #24
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002064:	2300      	movs	r3, #0
 8002066:	617b      	str	r3, [r7, #20]
 8002068:	e009      	b.n	800207e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	1c5a      	adds	r2, r3, #1
 800206e:	60ba      	str	r2, [r7, #8]
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	3301      	adds	r3, #1
 800207c:	617b      	str	r3, [r7, #20]
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	429a      	cmp	r2, r3
 8002084:	dbf1      	blt.n	800206a <_write+0x12>
	}
	return len;
 8002086:	687b      	ldr	r3, [r7, #4]
}
 8002088:	4618      	mov	r0, r3
 800208a:	3718      	adds	r7, #24
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <_close>:

int _close(int file)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
	return -1;
 8002098:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800209c:	4618      	mov	r0, r3
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bc80      	pop	{r7}
 80020a4:	4770      	bx	lr

080020a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020a6:	b480      	push	{r7}
 80020a8:	b083      	sub	sp, #12
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
 80020ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020b6:	605a      	str	r2, [r3, #4]
	return 0;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	bc80      	pop	{r7}
 80020c2:	4770      	bx	lr

080020c4 <_isatty>:

int _isatty(int file)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
	return 1;
 80020cc:	2301      	movs	r3, #1
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bc80      	pop	{r7}
 80020d6:	4770      	bx	lr

080020d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
	return 0;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3714      	adds	r7, #20
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bc80      	pop	{r7}
 80020ee:	4770      	bx	lr

080020f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020f8:	4a14      	ldr	r2, [pc, #80]	; (800214c <_sbrk+0x5c>)
 80020fa:	4b15      	ldr	r3, [pc, #84]	; (8002150 <_sbrk+0x60>)
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002104:	4b13      	ldr	r3, [pc, #76]	; (8002154 <_sbrk+0x64>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d102      	bne.n	8002112 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800210c:	4b11      	ldr	r3, [pc, #68]	; (8002154 <_sbrk+0x64>)
 800210e:	4a12      	ldr	r2, [pc, #72]	; (8002158 <_sbrk+0x68>)
 8002110:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002112:	4b10      	ldr	r3, [pc, #64]	; (8002154 <_sbrk+0x64>)
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4413      	add	r3, r2
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	429a      	cmp	r2, r3
 800211e:	d207      	bcs.n	8002130 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002120:	f003 fbec 	bl	80058fc <__errno>
 8002124:	4603      	mov	r3, r0
 8002126:	220c      	movs	r2, #12
 8002128:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800212a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800212e:	e009      	b.n	8002144 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002130:	4b08      	ldr	r3, [pc, #32]	; (8002154 <_sbrk+0x64>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002136:	4b07      	ldr	r3, [pc, #28]	; (8002154 <_sbrk+0x64>)
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4413      	add	r3, r2
 800213e:	4a05      	ldr	r2, [pc, #20]	; (8002154 <_sbrk+0x64>)
 8002140:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002142:	68fb      	ldr	r3, [r7, #12]
}
 8002144:	4618      	mov	r0, r3
 8002146:	3718      	adds	r7, #24
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	20005000 	.word	0x20005000
 8002150:	00000400 	.word	0x00000400
 8002154:	200004d4 	.word	0x200004d4
 8002158:	20000ae0 	.word	0x20000ae0

0800215c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002160:	bf00      	nop
 8002162:	46bd      	mov	sp, r7
 8002164:	bc80      	pop	{r7}
 8002166:	4770      	bx	lr

08002168 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002168:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800216a:	e003      	b.n	8002174 <LoopCopyDataInit>

0800216c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800216c:	4b0b      	ldr	r3, [pc, #44]	; (800219c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800216e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002170:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002172:	3104      	adds	r1, #4

08002174 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002174:	480a      	ldr	r0, [pc, #40]	; (80021a0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002176:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002178:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800217a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800217c:	d3f6      	bcc.n	800216c <CopyDataInit>
  ldr r2, =_sbss
 800217e:	4a0a      	ldr	r2, [pc, #40]	; (80021a8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002180:	e002      	b.n	8002188 <LoopFillZerobss>

08002182 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002182:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002184:	f842 3b04 	str.w	r3, [r2], #4

08002188 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002188:	4b08      	ldr	r3, [pc, #32]	; (80021ac <LoopFillZerobss+0x24>)
  cmp r2, r3
 800218a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800218c:	d3f9      	bcc.n	8002182 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800218e:	f7ff ffe5 	bl	800215c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002192:	f003 fbb9 	bl	8005908 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002196:	f7fe ffbb 	bl	8001110 <main>
  bx lr
 800219a:	4770      	bx	lr
  ldr r3, =_sidata
 800219c:	0800bef8 	.word	0x0800bef8
  ldr r0, =_sdata
 80021a0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80021a4:	20000274 	.word	0x20000274
  ldr r2, =_sbss
 80021a8:	20000274 	.word	0x20000274
  ldr r3, = _ebss
 80021ac:	20000ae0 	.word	0x20000ae0

080021b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021b0:	e7fe      	b.n	80021b0 <ADC1_2_IRQHandler>
	...

080021b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021b8:	4b08      	ldr	r3, [pc, #32]	; (80021dc <HAL_Init+0x28>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a07      	ldr	r2, [pc, #28]	; (80021dc <HAL_Init+0x28>)
 80021be:	f043 0310 	orr.w	r3, r3, #16
 80021c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021c4:	2003      	movs	r0, #3
 80021c6:	f000 fb51 	bl	800286c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021ca:	2000      	movs	r0, #0
 80021cc:	f000 f808 	bl	80021e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021d0:	f7ff fd62 	bl	8001c98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40022000 	.word	0x40022000

080021e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021e8:	4b12      	ldr	r3, [pc, #72]	; (8002234 <HAL_InitTick+0x54>)
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	4b12      	ldr	r3, [pc, #72]	; (8002238 <HAL_InitTick+0x58>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	4619      	mov	r1, r3
 80021f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80021fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80021fe:	4618      	mov	r0, r3
 8002200:	f000 fb69 	bl	80028d6 <HAL_SYSTICK_Config>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e00e      	b.n	800222c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2b0f      	cmp	r3, #15
 8002212:	d80a      	bhi.n	800222a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002214:	2200      	movs	r2, #0
 8002216:	6879      	ldr	r1, [r7, #4]
 8002218:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800221c:	f000 fb31 	bl	8002882 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002220:	4a06      	ldr	r2, [pc, #24]	; (800223c <HAL_InitTick+0x5c>)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002226:	2300      	movs	r3, #0
 8002228:	e000      	b.n	800222c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
}
 800222c:	4618      	mov	r0, r3
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	20000004 	.word	0x20000004
 8002238:	2000000c 	.word	0x2000000c
 800223c:	20000008 	.word	0x20000008

08002240 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002244:	4b05      	ldr	r3, [pc, #20]	; (800225c <HAL_IncTick+0x1c>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	461a      	mov	r2, r3
 800224a:	4b05      	ldr	r3, [pc, #20]	; (8002260 <HAL_IncTick+0x20>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4413      	add	r3, r2
 8002250:	4a03      	ldr	r2, [pc, #12]	; (8002260 <HAL_IncTick+0x20>)
 8002252:	6013      	str	r3, [r2, #0]
}
 8002254:	bf00      	nop
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr
 800225c:	2000000c 	.word	0x2000000c
 8002260:	20000abc 	.word	0x20000abc

08002264 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  return uwTick;
 8002268:	4b02      	ldr	r3, [pc, #8]	; (8002274 <HAL_GetTick+0x10>)
 800226a:	681b      	ldr	r3, [r3, #0]
}
 800226c:	4618      	mov	r0, r3
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr
 8002274:	20000abc 	.word	0x20000abc

08002278 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002280:	f7ff fff0 	bl	8002264 <HAL_GetTick>
 8002284:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002290:	d005      	beq.n	800229e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002292:	4b0a      	ldr	r3, [pc, #40]	; (80022bc <HAL_Delay+0x44>)
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	461a      	mov	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	4413      	add	r3, r2
 800229c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800229e:	bf00      	nop
 80022a0:	f7ff ffe0 	bl	8002264 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d8f7      	bhi.n	80022a0 <HAL_Delay+0x28>
  {
  }
}
 80022b0:	bf00      	nop
 80022b2:	bf00      	nop
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	2000000c 	.word	0x2000000c

080022c0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022c8:	2300      	movs	r3, #0
 80022ca:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80022cc:	2300      	movs	r3, #0
 80022ce:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80022d0:	2300      	movs	r3, #0
 80022d2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80022d4:	2300      	movs	r3, #0
 80022d6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e0be      	b.n	8002460 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d109      	bne.n	8002304 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f7ff fcfc 	bl	8001cfc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f000 f9ab 	bl	8002660 <ADC_ConversionStop_Disable>
 800230a:	4603      	mov	r3, r0
 800230c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002312:	f003 0310 	and.w	r3, r3, #16
 8002316:	2b00      	cmp	r3, #0
 8002318:	f040 8099 	bne.w	800244e <HAL_ADC_Init+0x18e>
 800231c:	7dfb      	ldrb	r3, [r7, #23]
 800231e:	2b00      	cmp	r3, #0
 8002320:	f040 8095 	bne.w	800244e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002328:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800232c:	f023 0302 	bic.w	r3, r3, #2
 8002330:	f043 0202 	orr.w	r2, r3, #2
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002340:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	7b1b      	ldrb	r3, [r3, #12]
 8002346:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002348:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800234a:	68ba      	ldr	r2, [r7, #8]
 800234c:	4313      	orrs	r3, r2
 800234e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002358:	d003      	beq.n	8002362 <HAL_ADC_Init+0xa2>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d102      	bne.n	8002368 <HAL_ADC_Init+0xa8>
 8002362:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002366:	e000      	b.n	800236a <HAL_ADC_Init+0xaa>
 8002368:	2300      	movs	r3, #0
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	4313      	orrs	r3, r2
 800236e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	7d1b      	ldrb	r3, [r3, #20]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d119      	bne.n	80023ac <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	7b1b      	ldrb	r3, [r3, #12]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d109      	bne.n	8002394 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	3b01      	subs	r3, #1
 8002386:	035a      	lsls	r2, r3, #13
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	4313      	orrs	r3, r2
 800238c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002390:	613b      	str	r3, [r7, #16]
 8002392:	e00b      	b.n	80023ac <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002398:	f043 0220 	orr.w	r2, r3, #32
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a4:	f043 0201 	orr.w	r2, r3, #1
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	430a      	orrs	r2, r1
 80023be:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	689a      	ldr	r2, [r3, #8]
 80023c6:	4b28      	ldr	r3, [pc, #160]	; (8002468 <HAL_ADC_Init+0x1a8>)
 80023c8:	4013      	ands	r3, r2
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	6812      	ldr	r2, [r2, #0]
 80023ce:	68b9      	ldr	r1, [r7, #8]
 80023d0:	430b      	orrs	r3, r1
 80023d2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023dc:	d003      	beq.n	80023e6 <HAL_ADC_Init+0x126>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d104      	bne.n	80023f0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	3b01      	subs	r3, #1
 80023ec:	051b      	lsls	r3, r3, #20
 80023ee:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	430a      	orrs	r2, r1
 8002402:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	689a      	ldr	r2, [r3, #8]
 800240a:	4b18      	ldr	r3, [pc, #96]	; (800246c <HAL_ADC_Init+0x1ac>)
 800240c:	4013      	ands	r3, r2
 800240e:	68ba      	ldr	r2, [r7, #8]
 8002410:	429a      	cmp	r2, r3
 8002412:	d10b      	bne.n	800242c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241e:	f023 0303 	bic.w	r3, r3, #3
 8002422:	f043 0201 	orr.w	r2, r3, #1
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800242a:	e018      	b.n	800245e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002430:	f023 0312 	bic.w	r3, r3, #18
 8002434:	f043 0210 	orr.w	r2, r3, #16
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002440:	f043 0201 	orr.w	r2, r3, #1
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800244c:	e007      	b.n	800245e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002452:	f043 0210 	orr.w	r2, r3, #16
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800245e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002460:	4618      	mov	r0, r3
 8002462:	3718      	adds	r7, #24
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	ffe1f7fd 	.word	0xffe1f7fd
 800246c:	ff1f0efe 	.word	0xff1f0efe

08002470 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800247a:	2300      	movs	r3, #0
 800247c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800247e:	2300      	movs	r3, #0
 8002480:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002488:	2b01      	cmp	r3, #1
 800248a:	d101      	bne.n	8002490 <HAL_ADC_ConfigChannel+0x20>
 800248c:	2302      	movs	r3, #2
 800248e:	e0dc      	b.n	800264a <HAL_ADC_ConfigChannel+0x1da>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	2b06      	cmp	r3, #6
 800249e:	d81c      	bhi.n	80024da <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685a      	ldr	r2, [r3, #4]
 80024aa:	4613      	mov	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	3b05      	subs	r3, #5
 80024b2:	221f      	movs	r2, #31
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	43db      	mvns	r3, r3
 80024ba:	4019      	ands	r1, r3
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	6818      	ldr	r0, [r3, #0]
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	4613      	mov	r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	4413      	add	r3, r2
 80024ca:	3b05      	subs	r3, #5
 80024cc:	fa00 f203 	lsl.w	r2, r0, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	430a      	orrs	r2, r1
 80024d6:	635a      	str	r2, [r3, #52]	; 0x34
 80024d8:	e03c      	b.n	8002554 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	2b0c      	cmp	r3, #12
 80024e0:	d81c      	bhi.n	800251c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685a      	ldr	r2, [r3, #4]
 80024ec:	4613      	mov	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	4413      	add	r3, r2
 80024f2:	3b23      	subs	r3, #35	; 0x23
 80024f4:	221f      	movs	r2, #31
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	43db      	mvns	r3, r3
 80024fc:	4019      	ands	r1, r3
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	6818      	ldr	r0, [r3, #0]
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685a      	ldr	r2, [r3, #4]
 8002506:	4613      	mov	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4413      	add	r3, r2
 800250c:	3b23      	subs	r3, #35	; 0x23
 800250e:	fa00 f203 	lsl.w	r2, r0, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	430a      	orrs	r2, r1
 8002518:	631a      	str	r2, [r3, #48]	; 0x30
 800251a:	e01b      	b.n	8002554 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685a      	ldr	r2, [r3, #4]
 8002526:	4613      	mov	r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	4413      	add	r3, r2
 800252c:	3b41      	subs	r3, #65	; 0x41
 800252e:	221f      	movs	r2, #31
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	43db      	mvns	r3, r3
 8002536:	4019      	ands	r1, r3
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	6818      	ldr	r0, [r3, #0]
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685a      	ldr	r2, [r3, #4]
 8002540:	4613      	mov	r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	4413      	add	r3, r2
 8002546:	3b41      	subs	r3, #65	; 0x41
 8002548:	fa00 f203 	lsl.w	r2, r0, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	430a      	orrs	r2, r1
 8002552:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2b09      	cmp	r3, #9
 800255a:	d91c      	bls.n	8002596 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68d9      	ldr	r1, [r3, #12]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	4613      	mov	r3, r2
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	4413      	add	r3, r2
 800256c:	3b1e      	subs	r3, #30
 800256e:	2207      	movs	r2, #7
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	43db      	mvns	r3, r3
 8002576:	4019      	ands	r1, r3
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	6898      	ldr	r0, [r3, #8]
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	4613      	mov	r3, r2
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	4413      	add	r3, r2
 8002586:	3b1e      	subs	r3, #30
 8002588:	fa00 f203 	lsl.w	r2, r0, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	430a      	orrs	r2, r1
 8002592:	60da      	str	r2, [r3, #12]
 8002594:	e019      	b.n	80025ca <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	6919      	ldr	r1, [r3, #16]
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	4613      	mov	r3, r2
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	4413      	add	r3, r2
 80025a6:	2207      	movs	r2, #7
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	43db      	mvns	r3, r3
 80025ae:	4019      	ands	r1, r3
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	6898      	ldr	r0, [r3, #8]
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	4613      	mov	r3, r2
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	4413      	add	r3, r2
 80025be:	fa00 f203 	lsl.w	r2, r0, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	430a      	orrs	r2, r1
 80025c8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2b10      	cmp	r3, #16
 80025d0:	d003      	beq.n	80025da <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80025d6:	2b11      	cmp	r3, #17
 80025d8:	d132      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a1d      	ldr	r2, [pc, #116]	; (8002654 <HAL_ADC_ConfigChannel+0x1e4>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d125      	bne.n	8002630 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d126      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	689a      	ldr	r2, [r3, #8]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002600:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2b10      	cmp	r3, #16
 8002608:	d11a      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800260a:	4b13      	ldr	r3, [pc, #76]	; (8002658 <HAL_ADC_ConfigChannel+0x1e8>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a13      	ldr	r2, [pc, #76]	; (800265c <HAL_ADC_ConfigChannel+0x1ec>)
 8002610:	fba2 2303 	umull	r2, r3, r2, r3
 8002614:	0c9a      	lsrs	r2, r3, #18
 8002616:	4613      	mov	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4413      	add	r3, r2
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002620:	e002      	b.n	8002628 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	3b01      	subs	r3, #1
 8002626:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1f9      	bne.n	8002622 <HAL_ADC_ConfigChannel+0x1b2>
 800262e:	e007      	b.n	8002640 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002634:	f043 0220 	orr.w	r2, r3, #32
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002648:	7bfb      	ldrb	r3, [r7, #15]
}
 800264a:	4618      	mov	r0, r3
 800264c:	3714      	adds	r7, #20
 800264e:	46bd      	mov	sp, r7
 8002650:	bc80      	pop	{r7}
 8002652:	4770      	bx	lr
 8002654:	40012400 	.word	0x40012400
 8002658:	20000004 	.word	0x20000004
 800265c:	431bde83 	.word	0x431bde83

08002660 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002668:	2300      	movs	r3, #0
 800266a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	2b01      	cmp	r3, #1
 8002678:	d127      	bne.n	80026ca <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f022 0201 	bic.w	r2, r2, #1
 8002688:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800268a:	f7ff fdeb 	bl	8002264 <HAL_GetTick>
 800268e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002690:	e014      	b.n	80026bc <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002692:	f7ff fde7 	bl	8002264 <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d90d      	bls.n	80026bc <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a4:	f043 0210 	orr.w	r2, r3, #16
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b0:	f043 0201 	orr.w	r2, r3, #1
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e007      	b.n	80026cc <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d0e3      	beq.n	8002692 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3710      	adds	r7, #16
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f003 0307 	and.w	r3, r3, #7
 80026e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026e4:	4b0c      	ldr	r3, [pc, #48]	; (8002718 <__NVIC_SetPriorityGrouping+0x44>)
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026ea:	68ba      	ldr	r2, [r7, #8]
 80026ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026f0:	4013      	ands	r3, r2
 80026f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002704:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002706:	4a04      	ldr	r2, [pc, #16]	; (8002718 <__NVIC_SetPriorityGrouping+0x44>)
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	60d3      	str	r3, [r2, #12]
}
 800270c:	bf00      	nop
 800270e:	3714      	adds	r7, #20
 8002710:	46bd      	mov	sp, r7
 8002712:	bc80      	pop	{r7}
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	e000ed00 	.word	0xe000ed00

0800271c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002720:	4b04      	ldr	r3, [pc, #16]	; (8002734 <__NVIC_GetPriorityGrouping+0x18>)
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	0a1b      	lsrs	r3, r3, #8
 8002726:	f003 0307 	and.w	r3, r3, #7
}
 800272a:	4618      	mov	r0, r3
 800272c:	46bd      	mov	sp, r7
 800272e:	bc80      	pop	{r7}
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	e000ed00 	.word	0xe000ed00

08002738 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	4603      	mov	r3, r0
 8002740:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002746:	2b00      	cmp	r3, #0
 8002748:	db0b      	blt.n	8002762 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800274a:	79fb      	ldrb	r3, [r7, #7]
 800274c:	f003 021f 	and.w	r2, r3, #31
 8002750:	4906      	ldr	r1, [pc, #24]	; (800276c <__NVIC_EnableIRQ+0x34>)
 8002752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002756:	095b      	lsrs	r3, r3, #5
 8002758:	2001      	movs	r0, #1
 800275a:	fa00 f202 	lsl.w	r2, r0, r2
 800275e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002762:	bf00      	nop
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	bc80      	pop	{r7}
 800276a:	4770      	bx	lr
 800276c:	e000e100 	.word	0xe000e100

08002770 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	4603      	mov	r3, r0
 8002778:	6039      	str	r1, [r7, #0]
 800277a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800277c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002780:	2b00      	cmp	r3, #0
 8002782:	db0a      	blt.n	800279a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	b2da      	uxtb	r2, r3
 8002788:	490c      	ldr	r1, [pc, #48]	; (80027bc <__NVIC_SetPriority+0x4c>)
 800278a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278e:	0112      	lsls	r2, r2, #4
 8002790:	b2d2      	uxtb	r2, r2
 8002792:	440b      	add	r3, r1
 8002794:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002798:	e00a      	b.n	80027b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	b2da      	uxtb	r2, r3
 800279e:	4908      	ldr	r1, [pc, #32]	; (80027c0 <__NVIC_SetPriority+0x50>)
 80027a0:	79fb      	ldrb	r3, [r7, #7]
 80027a2:	f003 030f 	and.w	r3, r3, #15
 80027a6:	3b04      	subs	r3, #4
 80027a8:	0112      	lsls	r2, r2, #4
 80027aa:	b2d2      	uxtb	r2, r2
 80027ac:	440b      	add	r3, r1
 80027ae:	761a      	strb	r2, [r3, #24]
}
 80027b0:	bf00      	nop
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bc80      	pop	{r7}
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	e000e100 	.word	0xe000e100
 80027c0:	e000ed00 	.word	0xe000ed00

080027c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b089      	sub	sp, #36	; 0x24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f003 0307 	and.w	r3, r3, #7
 80027d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	f1c3 0307 	rsb	r3, r3, #7
 80027de:	2b04      	cmp	r3, #4
 80027e0:	bf28      	it	cs
 80027e2:	2304      	movcs	r3, #4
 80027e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	3304      	adds	r3, #4
 80027ea:	2b06      	cmp	r3, #6
 80027ec:	d902      	bls.n	80027f4 <NVIC_EncodePriority+0x30>
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	3b03      	subs	r3, #3
 80027f2:	e000      	b.n	80027f6 <NVIC_EncodePriority+0x32>
 80027f4:	2300      	movs	r3, #0
 80027f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	43da      	mvns	r2, r3
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	401a      	ands	r2, r3
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800280c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	fa01 f303 	lsl.w	r3, r1, r3
 8002816:	43d9      	mvns	r1, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800281c:	4313      	orrs	r3, r2
         );
}
 800281e:	4618      	mov	r0, r3
 8002820:	3724      	adds	r7, #36	; 0x24
 8002822:	46bd      	mov	sp, r7
 8002824:	bc80      	pop	{r7}
 8002826:	4770      	bx	lr

08002828 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	3b01      	subs	r3, #1
 8002834:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002838:	d301      	bcc.n	800283e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800283a:	2301      	movs	r3, #1
 800283c:	e00f      	b.n	800285e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800283e:	4a0a      	ldr	r2, [pc, #40]	; (8002868 <SysTick_Config+0x40>)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	3b01      	subs	r3, #1
 8002844:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002846:	210f      	movs	r1, #15
 8002848:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800284c:	f7ff ff90 	bl	8002770 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002850:	4b05      	ldr	r3, [pc, #20]	; (8002868 <SysTick_Config+0x40>)
 8002852:	2200      	movs	r2, #0
 8002854:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002856:	4b04      	ldr	r3, [pc, #16]	; (8002868 <SysTick_Config+0x40>)
 8002858:	2207      	movs	r2, #7
 800285a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	e000e010 	.word	0xe000e010

0800286c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f7ff ff2d 	bl	80026d4 <__NVIC_SetPriorityGrouping>
}
 800287a:	bf00      	nop
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002882:	b580      	push	{r7, lr}
 8002884:	b086      	sub	sp, #24
 8002886:	af00      	add	r7, sp, #0
 8002888:	4603      	mov	r3, r0
 800288a:	60b9      	str	r1, [r7, #8]
 800288c:	607a      	str	r2, [r7, #4]
 800288e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002890:	2300      	movs	r3, #0
 8002892:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002894:	f7ff ff42 	bl	800271c <__NVIC_GetPriorityGrouping>
 8002898:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	68b9      	ldr	r1, [r7, #8]
 800289e:	6978      	ldr	r0, [r7, #20]
 80028a0:	f7ff ff90 	bl	80027c4 <NVIC_EncodePriority>
 80028a4:	4602      	mov	r2, r0
 80028a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028aa:	4611      	mov	r1, r2
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7ff ff5f 	bl	8002770 <__NVIC_SetPriority>
}
 80028b2:	bf00      	nop
 80028b4:	3718      	adds	r7, #24
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b082      	sub	sp, #8
 80028be:	af00      	add	r7, sp, #0
 80028c0:	4603      	mov	r3, r0
 80028c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7ff ff35 	bl	8002738 <__NVIC_EnableIRQ>
}
 80028ce:	bf00      	nop
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b082      	sub	sp, #8
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f7ff ffa2 	bl	8002828 <SysTick_Config>
 80028e4:	4603      	mov	r3, r0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
	...

080028f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b08b      	sub	sp, #44	; 0x2c
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028fa:	2300      	movs	r3, #0
 80028fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80028fe:	2300      	movs	r3, #0
 8002900:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002902:	e169      	b.n	8002bd8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002904:	2201      	movs	r2, #1
 8002906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	69fa      	ldr	r2, [r7, #28]
 8002914:	4013      	ands	r3, r2
 8002916:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	429a      	cmp	r2, r3
 800291e:	f040 8158 	bne.w	8002bd2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	4a9a      	ldr	r2, [pc, #616]	; (8002b90 <HAL_GPIO_Init+0x2a0>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d05e      	beq.n	80029ea <HAL_GPIO_Init+0xfa>
 800292c:	4a98      	ldr	r2, [pc, #608]	; (8002b90 <HAL_GPIO_Init+0x2a0>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d875      	bhi.n	8002a1e <HAL_GPIO_Init+0x12e>
 8002932:	4a98      	ldr	r2, [pc, #608]	; (8002b94 <HAL_GPIO_Init+0x2a4>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d058      	beq.n	80029ea <HAL_GPIO_Init+0xfa>
 8002938:	4a96      	ldr	r2, [pc, #600]	; (8002b94 <HAL_GPIO_Init+0x2a4>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d86f      	bhi.n	8002a1e <HAL_GPIO_Init+0x12e>
 800293e:	4a96      	ldr	r2, [pc, #600]	; (8002b98 <HAL_GPIO_Init+0x2a8>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d052      	beq.n	80029ea <HAL_GPIO_Init+0xfa>
 8002944:	4a94      	ldr	r2, [pc, #592]	; (8002b98 <HAL_GPIO_Init+0x2a8>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d869      	bhi.n	8002a1e <HAL_GPIO_Init+0x12e>
 800294a:	4a94      	ldr	r2, [pc, #592]	; (8002b9c <HAL_GPIO_Init+0x2ac>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d04c      	beq.n	80029ea <HAL_GPIO_Init+0xfa>
 8002950:	4a92      	ldr	r2, [pc, #584]	; (8002b9c <HAL_GPIO_Init+0x2ac>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d863      	bhi.n	8002a1e <HAL_GPIO_Init+0x12e>
 8002956:	4a92      	ldr	r2, [pc, #584]	; (8002ba0 <HAL_GPIO_Init+0x2b0>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d046      	beq.n	80029ea <HAL_GPIO_Init+0xfa>
 800295c:	4a90      	ldr	r2, [pc, #576]	; (8002ba0 <HAL_GPIO_Init+0x2b0>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d85d      	bhi.n	8002a1e <HAL_GPIO_Init+0x12e>
 8002962:	2b12      	cmp	r3, #18
 8002964:	d82a      	bhi.n	80029bc <HAL_GPIO_Init+0xcc>
 8002966:	2b12      	cmp	r3, #18
 8002968:	d859      	bhi.n	8002a1e <HAL_GPIO_Init+0x12e>
 800296a:	a201      	add	r2, pc, #4	; (adr r2, 8002970 <HAL_GPIO_Init+0x80>)
 800296c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002970:	080029eb 	.word	0x080029eb
 8002974:	080029c5 	.word	0x080029c5
 8002978:	080029d7 	.word	0x080029d7
 800297c:	08002a19 	.word	0x08002a19
 8002980:	08002a1f 	.word	0x08002a1f
 8002984:	08002a1f 	.word	0x08002a1f
 8002988:	08002a1f 	.word	0x08002a1f
 800298c:	08002a1f 	.word	0x08002a1f
 8002990:	08002a1f 	.word	0x08002a1f
 8002994:	08002a1f 	.word	0x08002a1f
 8002998:	08002a1f 	.word	0x08002a1f
 800299c:	08002a1f 	.word	0x08002a1f
 80029a0:	08002a1f 	.word	0x08002a1f
 80029a4:	08002a1f 	.word	0x08002a1f
 80029a8:	08002a1f 	.word	0x08002a1f
 80029ac:	08002a1f 	.word	0x08002a1f
 80029b0:	08002a1f 	.word	0x08002a1f
 80029b4:	080029cd 	.word	0x080029cd
 80029b8:	080029e1 	.word	0x080029e1
 80029bc:	4a79      	ldr	r2, [pc, #484]	; (8002ba4 <HAL_GPIO_Init+0x2b4>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d013      	beq.n	80029ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80029c2:	e02c      	b.n	8002a1e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	623b      	str	r3, [r7, #32]
          break;
 80029ca:	e029      	b.n	8002a20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	3304      	adds	r3, #4
 80029d2:	623b      	str	r3, [r7, #32]
          break;
 80029d4:	e024      	b.n	8002a20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	3308      	adds	r3, #8
 80029dc:	623b      	str	r3, [r7, #32]
          break;
 80029de:	e01f      	b.n	8002a20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	330c      	adds	r3, #12
 80029e6:	623b      	str	r3, [r7, #32]
          break;
 80029e8:	e01a      	b.n	8002a20 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d102      	bne.n	80029f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80029f2:	2304      	movs	r3, #4
 80029f4:	623b      	str	r3, [r7, #32]
          break;
 80029f6:	e013      	b.n	8002a20 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d105      	bne.n	8002a0c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a00:	2308      	movs	r3, #8
 8002a02:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	69fa      	ldr	r2, [r7, #28]
 8002a08:	611a      	str	r2, [r3, #16]
          break;
 8002a0a:	e009      	b.n	8002a20 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a0c:	2308      	movs	r3, #8
 8002a0e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	69fa      	ldr	r2, [r7, #28]
 8002a14:	615a      	str	r2, [r3, #20]
          break;
 8002a16:	e003      	b.n	8002a20 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	623b      	str	r3, [r7, #32]
          break;
 8002a1c:	e000      	b.n	8002a20 <HAL_GPIO_Init+0x130>
          break;
 8002a1e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	2bff      	cmp	r3, #255	; 0xff
 8002a24:	d801      	bhi.n	8002a2a <HAL_GPIO_Init+0x13a>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	e001      	b.n	8002a2e <HAL_GPIO_Init+0x13e>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	3304      	adds	r3, #4
 8002a2e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	2bff      	cmp	r3, #255	; 0xff
 8002a34:	d802      	bhi.n	8002a3c <HAL_GPIO_Init+0x14c>
 8002a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	e002      	b.n	8002a42 <HAL_GPIO_Init+0x152>
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3e:	3b08      	subs	r3, #8
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	210f      	movs	r1, #15
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a50:	43db      	mvns	r3, r3
 8002a52:	401a      	ands	r2, r3
 8002a54:	6a39      	ldr	r1, [r7, #32]
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	fa01 f303 	lsl.w	r3, r1, r3
 8002a5c:	431a      	orrs	r2, r3
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f000 80b1 	beq.w	8002bd2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a70:	4b4d      	ldr	r3, [pc, #308]	; (8002ba8 <HAL_GPIO_Init+0x2b8>)
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	4a4c      	ldr	r2, [pc, #304]	; (8002ba8 <HAL_GPIO_Init+0x2b8>)
 8002a76:	f043 0301 	orr.w	r3, r3, #1
 8002a7a:	6193      	str	r3, [r2, #24]
 8002a7c:	4b4a      	ldr	r3, [pc, #296]	; (8002ba8 <HAL_GPIO_Init+0x2b8>)
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	60bb      	str	r3, [r7, #8]
 8002a86:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a88:	4a48      	ldr	r2, [pc, #288]	; (8002bac <HAL_GPIO_Init+0x2bc>)
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8c:	089b      	lsrs	r3, r3, #2
 8002a8e:	3302      	adds	r3, #2
 8002a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a94:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a98:	f003 0303 	and.w	r3, r3, #3
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	220f      	movs	r2, #15
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a40      	ldr	r2, [pc, #256]	; (8002bb0 <HAL_GPIO_Init+0x2c0>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d013      	beq.n	8002adc <HAL_GPIO_Init+0x1ec>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a3f      	ldr	r2, [pc, #252]	; (8002bb4 <HAL_GPIO_Init+0x2c4>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d00d      	beq.n	8002ad8 <HAL_GPIO_Init+0x1e8>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a3e      	ldr	r2, [pc, #248]	; (8002bb8 <HAL_GPIO_Init+0x2c8>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d007      	beq.n	8002ad4 <HAL_GPIO_Init+0x1e4>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a3d      	ldr	r2, [pc, #244]	; (8002bbc <HAL_GPIO_Init+0x2cc>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d101      	bne.n	8002ad0 <HAL_GPIO_Init+0x1e0>
 8002acc:	2303      	movs	r3, #3
 8002ace:	e006      	b.n	8002ade <HAL_GPIO_Init+0x1ee>
 8002ad0:	2304      	movs	r3, #4
 8002ad2:	e004      	b.n	8002ade <HAL_GPIO_Init+0x1ee>
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	e002      	b.n	8002ade <HAL_GPIO_Init+0x1ee>
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e000      	b.n	8002ade <HAL_GPIO_Init+0x1ee>
 8002adc:	2300      	movs	r3, #0
 8002ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ae0:	f002 0203 	and.w	r2, r2, #3
 8002ae4:	0092      	lsls	r2, r2, #2
 8002ae6:	4093      	lsls	r3, r2
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002aee:	492f      	ldr	r1, [pc, #188]	; (8002bac <HAL_GPIO_Init+0x2bc>)
 8002af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af2:	089b      	lsrs	r3, r3, #2
 8002af4:	3302      	adds	r3, #2
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d006      	beq.n	8002b16 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002b08:	4b2d      	ldr	r3, [pc, #180]	; (8002bc0 <HAL_GPIO_Init+0x2d0>)
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	492c      	ldr	r1, [pc, #176]	; (8002bc0 <HAL_GPIO_Init+0x2d0>)
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	600b      	str	r3, [r1, #0]
 8002b14:	e006      	b.n	8002b24 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b16:	4b2a      	ldr	r3, [pc, #168]	; (8002bc0 <HAL_GPIO_Init+0x2d0>)
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	43db      	mvns	r3, r3
 8002b1e:	4928      	ldr	r1, [pc, #160]	; (8002bc0 <HAL_GPIO_Init+0x2d0>)
 8002b20:	4013      	ands	r3, r2
 8002b22:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d006      	beq.n	8002b3e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002b30:	4b23      	ldr	r3, [pc, #140]	; (8002bc0 <HAL_GPIO_Init+0x2d0>)
 8002b32:	685a      	ldr	r2, [r3, #4]
 8002b34:	4922      	ldr	r1, [pc, #136]	; (8002bc0 <HAL_GPIO_Init+0x2d0>)
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	604b      	str	r3, [r1, #4]
 8002b3c:	e006      	b.n	8002b4c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b3e:	4b20      	ldr	r3, [pc, #128]	; (8002bc0 <HAL_GPIO_Init+0x2d0>)
 8002b40:	685a      	ldr	r2, [r3, #4]
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	43db      	mvns	r3, r3
 8002b46:	491e      	ldr	r1, [pc, #120]	; (8002bc0 <HAL_GPIO_Init+0x2d0>)
 8002b48:	4013      	ands	r3, r2
 8002b4a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d006      	beq.n	8002b66 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b58:	4b19      	ldr	r3, [pc, #100]	; (8002bc0 <HAL_GPIO_Init+0x2d0>)
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	4918      	ldr	r1, [pc, #96]	; (8002bc0 <HAL_GPIO_Init+0x2d0>)
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	608b      	str	r3, [r1, #8]
 8002b64:	e006      	b.n	8002b74 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b66:	4b16      	ldr	r3, [pc, #88]	; (8002bc0 <HAL_GPIO_Init+0x2d0>)
 8002b68:	689a      	ldr	r2, [r3, #8]
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	4914      	ldr	r1, [pc, #80]	; (8002bc0 <HAL_GPIO_Init+0x2d0>)
 8002b70:	4013      	ands	r3, r2
 8002b72:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d021      	beq.n	8002bc4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b80:	4b0f      	ldr	r3, [pc, #60]	; (8002bc0 <HAL_GPIO_Init+0x2d0>)
 8002b82:	68da      	ldr	r2, [r3, #12]
 8002b84:	490e      	ldr	r1, [pc, #56]	; (8002bc0 <HAL_GPIO_Init+0x2d0>)
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	60cb      	str	r3, [r1, #12]
 8002b8c:	e021      	b.n	8002bd2 <HAL_GPIO_Init+0x2e2>
 8002b8e:	bf00      	nop
 8002b90:	10320000 	.word	0x10320000
 8002b94:	10310000 	.word	0x10310000
 8002b98:	10220000 	.word	0x10220000
 8002b9c:	10210000 	.word	0x10210000
 8002ba0:	10120000 	.word	0x10120000
 8002ba4:	10110000 	.word	0x10110000
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	40010000 	.word	0x40010000
 8002bb0:	40010800 	.word	0x40010800
 8002bb4:	40010c00 	.word	0x40010c00
 8002bb8:	40011000 	.word	0x40011000
 8002bbc:	40011400 	.word	0x40011400
 8002bc0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002bc4:	4b0b      	ldr	r3, [pc, #44]	; (8002bf4 <HAL_GPIO_Init+0x304>)
 8002bc6:	68da      	ldr	r2, [r3, #12]
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	43db      	mvns	r3, r3
 8002bcc:	4909      	ldr	r1, [pc, #36]	; (8002bf4 <HAL_GPIO_Init+0x304>)
 8002bce:	4013      	ands	r3, r2
 8002bd0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bde:	fa22 f303 	lsr.w	r3, r2, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f47f ae8e 	bne.w	8002904 <HAL_GPIO_Init+0x14>
  }
}
 8002be8:	bf00      	nop
 8002bea:	bf00      	nop
 8002bec:	372c      	adds	r7, #44	; 0x2c
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bc80      	pop	{r7}
 8002bf2:	4770      	bx	lr
 8002bf4:	40010400 	.word	0x40010400

08002bf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	460b      	mov	r3, r1
 8002c02:	807b      	strh	r3, [r7, #2]
 8002c04:	4613      	mov	r3, r2
 8002c06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c08:	787b      	ldrb	r3, [r7, #1]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d003      	beq.n	8002c16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c0e:	887a      	ldrh	r2, [r7, #2]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002c14:	e003      	b.n	8002c1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c16:	887b      	ldrh	r3, [r7, #2]
 8002c18:	041a      	lsls	r2, r3, #16
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	611a      	str	r2, [r3, #16]
}
 8002c1e:	bf00      	nop
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bc80      	pop	{r7}
 8002c26:	4770      	bx	lr

08002c28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e12b      	b.n	8002e92 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d106      	bne.n	8002c54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f7ff f890 	bl	8001d74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2224      	movs	r2, #36	; 0x24
 8002c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f022 0201 	bic.w	r2, r2, #1
 8002c6a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c8c:	f001 fba0 	bl	80043d0 <HAL_RCC_GetPCLK1Freq>
 8002c90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	4a81      	ldr	r2, [pc, #516]	; (8002e9c <HAL_I2C_Init+0x274>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d807      	bhi.n	8002cac <HAL_I2C_Init+0x84>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	4a80      	ldr	r2, [pc, #512]	; (8002ea0 <HAL_I2C_Init+0x278>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	bf94      	ite	ls
 8002ca4:	2301      	movls	r3, #1
 8002ca6:	2300      	movhi	r3, #0
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	e006      	b.n	8002cba <HAL_I2C_Init+0x92>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	4a7d      	ldr	r2, [pc, #500]	; (8002ea4 <HAL_I2C_Init+0x27c>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	bf94      	ite	ls
 8002cb4:	2301      	movls	r3, #1
 8002cb6:	2300      	movhi	r3, #0
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e0e7      	b.n	8002e92 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	4a78      	ldr	r2, [pc, #480]	; (8002ea8 <HAL_I2C_Init+0x280>)
 8002cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cca:	0c9b      	lsrs	r3, r3, #18
 8002ccc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68ba      	ldr	r2, [r7, #8]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	4a6a      	ldr	r2, [pc, #424]	; (8002e9c <HAL_I2C_Init+0x274>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d802      	bhi.n	8002cfc <HAL_I2C_Init+0xd4>
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	e009      	b.n	8002d10 <HAL_I2C_Init+0xe8>
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d02:	fb02 f303 	mul.w	r3, r2, r3
 8002d06:	4a69      	ldr	r2, [pc, #420]	; (8002eac <HAL_I2C_Init+0x284>)
 8002d08:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0c:	099b      	lsrs	r3, r3, #6
 8002d0e:	3301      	adds	r3, #1
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	6812      	ldr	r2, [r2, #0]
 8002d14:	430b      	orrs	r3, r1
 8002d16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d22:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	495c      	ldr	r1, [pc, #368]	; (8002e9c <HAL_I2C_Init+0x274>)
 8002d2c:	428b      	cmp	r3, r1
 8002d2e:	d819      	bhi.n	8002d64 <HAL_I2C_Init+0x13c>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	1e59      	subs	r1, r3, #1
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d3e:	1c59      	adds	r1, r3, #1
 8002d40:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d44:	400b      	ands	r3, r1
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00a      	beq.n	8002d60 <HAL_I2C_Init+0x138>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	1e59      	subs	r1, r3, #1
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d58:	3301      	adds	r3, #1
 8002d5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d5e:	e051      	b.n	8002e04 <HAL_I2C_Init+0x1dc>
 8002d60:	2304      	movs	r3, #4
 8002d62:	e04f      	b.n	8002e04 <HAL_I2C_Init+0x1dc>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d111      	bne.n	8002d90 <HAL_I2C_Init+0x168>
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	1e58      	subs	r0, r3, #1
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6859      	ldr	r1, [r3, #4]
 8002d74:	460b      	mov	r3, r1
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	440b      	add	r3, r1
 8002d7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d7e:	3301      	adds	r3, #1
 8002d80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	bf0c      	ite	eq
 8002d88:	2301      	moveq	r3, #1
 8002d8a:	2300      	movne	r3, #0
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	e012      	b.n	8002db6 <HAL_I2C_Init+0x18e>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	1e58      	subs	r0, r3, #1
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6859      	ldr	r1, [r3, #4]
 8002d98:	460b      	mov	r3, r1
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	440b      	add	r3, r1
 8002d9e:	0099      	lsls	r1, r3, #2
 8002da0:	440b      	add	r3, r1
 8002da2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002da6:	3301      	adds	r3, #1
 8002da8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	bf0c      	ite	eq
 8002db0:	2301      	moveq	r3, #1
 8002db2:	2300      	movne	r3, #0
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <HAL_I2C_Init+0x196>
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e022      	b.n	8002e04 <HAL_I2C_Init+0x1dc>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10e      	bne.n	8002de4 <HAL_I2C_Init+0x1bc>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	1e58      	subs	r0, r3, #1
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6859      	ldr	r1, [r3, #4]
 8002dce:	460b      	mov	r3, r1
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	440b      	add	r3, r1
 8002dd4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dd8:	3301      	adds	r3, #1
 8002dda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002de2:	e00f      	b.n	8002e04 <HAL_I2C_Init+0x1dc>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	1e58      	subs	r0, r3, #1
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6859      	ldr	r1, [r3, #4]
 8002dec:	460b      	mov	r3, r1
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	440b      	add	r3, r1
 8002df2:	0099      	lsls	r1, r3, #2
 8002df4:	440b      	add	r3, r1
 8002df6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e04:	6879      	ldr	r1, [r7, #4]
 8002e06:	6809      	ldr	r1, [r1, #0]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	69da      	ldr	r2, [r3, #28]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a1b      	ldr	r3, [r3, #32]
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	430a      	orrs	r2, r1
 8002e26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e32:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	6911      	ldr	r1, [r2, #16]
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	68d2      	ldr	r2, [r2, #12]
 8002e3e:	4311      	orrs	r1, r2
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	6812      	ldr	r2, [r2, #0]
 8002e44:	430b      	orrs	r3, r1
 8002e46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	695a      	ldr	r2, [r3, #20]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	430a      	orrs	r2, r1
 8002e62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f042 0201 	orr.w	r2, r2, #1
 8002e72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2220      	movs	r2, #32
 8002e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	000186a0 	.word	0x000186a0
 8002ea0:	001e847f 	.word	0x001e847f
 8002ea4:	003d08ff 	.word	0x003d08ff
 8002ea8:	431bde83 	.word	0x431bde83
 8002eac:	10624dd3 	.word	0x10624dd3

08002eb0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b088      	sub	sp, #32
 8002eb4:	af02      	add	r7, sp, #8
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	4608      	mov	r0, r1
 8002eba:	4611      	mov	r1, r2
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	817b      	strh	r3, [r7, #10]
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	813b      	strh	r3, [r7, #8]
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002eca:	f7ff f9cb 	bl	8002264 <HAL_GetTick>
 8002ece:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2b20      	cmp	r3, #32
 8002eda:	f040 80d9 	bne.w	8003090 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	9300      	str	r3, [sp, #0]
 8002ee2:	2319      	movs	r3, #25
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	496d      	ldr	r1, [pc, #436]	; (800309c <HAL_I2C_Mem_Write+0x1ec>)
 8002ee8:	68f8      	ldr	r0, [r7, #12]
 8002eea:	f000 fcc1 	bl	8003870 <I2C_WaitOnFlagUntilTimeout>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d001      	beq.n	8002ef8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	e0cc      	b.n	8003092 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d101      	bne.n	8002f06 <HAL_I2C_Mem_Write+0x56>
 8002f02:	2302      	movs	r3, #2
 8002f04:	e0c5      	b.n	8003092 <HAL_I2C_Mem_Write+0x1e2>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0301 	and.w	r3, r3, #1
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d007      	beq.n	8002f2c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f042 0201 	orr.w	r2, r2, #1
 8002f2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f3a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2221      	movs	r2, #33	; 0x21
 8002f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2240      	movs	r2, #64	; 0x40
 8002f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6a3a      	ldr	r2, [r7, #32]
 8002f56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	4a4d      	ldr	r2, [pc, #308]	; (80030a0 <HAL_I2C_Mem_Write+0x1f0>)
 8002f6c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f6e:	88f8      	ldrh	r0, [r7, #6]
 8002f70:	893a      	ldrh	r2, [r7, #8]
 8002f72:	8979      	ldrh	r1, [r7, #10]
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	9301      	str	r3, [sp, #4]
 8002f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f7a:	9300      	str	r3, [sp, #0]
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f000 faf8 	bl	8003574 <I2C_RequestMemoryWrite>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d052      	beq.n	8003030 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e081      	b.n	8003092 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f000 fd42 	bl	8003a1c <I2C_WaitOnTXEFlagUntilTimeout>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00d      	beq.n	8002fba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	2b04      	cmp	r3, #4
 8002fa4:	d107      	bne.n	8002fb6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fb4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e06b      	b.n	8003092 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbe:	781a      	ldrb	r2, [r3, #0]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fca:	1c5a      	adds	r2, r3, #1
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	695b      	ldr	r3, [r3, #20]
 8002ff0:	f003 0304 	and.w	r3, r3, #4
 8002ff4:	2b04      	cmp	r3, #4
 8002ff6:	d11b      	bne.n	8003030 <HAL_I2C_Mem_Write+0x180>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d017      	beq.n	8003030 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003004:	781a      	ldrb	r2, [r3, #0]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003010:	1c5a      	adds	r2, r3, #1
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800301a:	3b01      	subs	r3, #1
 800301c:	b29a      	uxth	r2, r3
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003026:	b29b      	uxth	r3, r3
 8003028:	3b01      	subs	r3, #1
 800302a:	b29a      	uxth	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003034:	2b00      	cmp	r3, #0
 8003036:	d1aa      	bne.n	8002f8e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800303c:	68f8      	ldr	r0, [r7, #12]
 800303e:	f000 fd2e 	bl	8003a9e <I2C_WaitOnBTFFlagUntilTimeout>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00d      	beq.n	8003064 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304c:	2b04      	cmp	r3, #4
 800304e:	d107      	bne.n	8003060 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800305e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e016      	b.n	8003092 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003072:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2220      	movs	r2, #32
 8003078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800308c:	2300      	movs	r3, #0
 800308e:	e000      	b.n	8003092 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003090:	2302      	movs	r3, #2
  }
}
 8003092:	4618      	mov	r0, r3
 8003094:	3718      	adds	r7, #24
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	00100002 	.word	0x00100002
 80030a0:	ffff0000 	.word	0xffff0000

080030a4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b08c      	sub	sp, #48	; 0x30
 80030a8:	af02      	add	r7, sp, #8
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	4608      	mov	r0, r1
 80030ae:	4611      	mov	r1, r2
 80030b0:	461a      	mov	r2, r3
 80030b2:	4603      	mov	r3, r0
 80030b4:	817b      	strh	r3, [r7, #10]
 80030b6:	460b      	mov	r3, r1
 80030b8:	813b      	strh	r3, [r7, #8]
 80030ba:	4613      	mov	r3, r2
 80030bc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80030be:	2300      	movs	r3, #0
 80030c0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030c2:	f7ff f8cf 	bl	8002264 <HAL_GetTick>
 80030c6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	2b20      	cmp	r3, #32
 80030d2:	f040 8244 	bne.w	800355e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d8:	9300      	str	r3, [sp, #0]
 80030da:	2319      	movs	r3, #25
 80030dc:	2201      	movs	r2, #1
 80030de:	4982      	ldr	r1, [pc, #520]	; (80032e8 <HAL_I2C_Mem_Read+0x244>)
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f000 fbc5 	bl	8003870 <I2C_WaitOnFlagUntilTimeout>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d001      	beq.n	80030f0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80030ec:	2302      	movs	r3, #2
 80030ee:	e237      	b.n	8003560 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d101      	bne.n	80030fe <HAL_I2C_Mem_Read+0x5a>
 80030fa:	2302      	movs	r3, #2
 80030fc:	e230      	b.n	8003560 <HAL_I2C_Mem_Read+0x4bc>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0301 	and.w	r3, r3, #1
 8003110:	2b01      	cmp	r3, #1
 8003112:	d007      	beq.n	8003124 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f042 0201 	orr.w	r2, r2, #1
 8003122:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003132:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2222      	movs	r2, #34	; 0x22
 8003138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2240      	movs	r2, #64	; 0x40
 8003140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800314e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003154:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800315a:	b29a      	uxth	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	4a62      	ldr	r2, [pc, #392]	; (80032ec <HAL_I2C_Mem_Read+0x248>)
 8003164:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003166:	88f8      	ldrh	r0, [r7, #6]
 8003168:	893a      	ldrh	r2, [r7, #8]
 800316a:	8979      	ldrh	r1, [r7, #10]
 800316c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316e:	9301      	str	r3, [sp, #4]
 8003170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003172:	9300      	str	r3, [sp, #0]
 8003174:	4603      	mov	r3, r0
 8003176:	68f8      	ldr	r0, [r7, #12]
 8003178:	f000 fa92 	bl	80036a0 <I2C_RequestMemoryRead>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e1ec      	b.n	8003560 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800318a:	2b00      	cmp	r3, #0
 800318c:	d113      	bne.n	80031b6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800318e:	2300      	movs	r3, #0
 8003190:	61fb      	str	r3, [r7, #28]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	61fb      	str	r3, [r7, #28]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	61fb      	str	r3, [r7, #28]
 80031a2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	e1c0      	b.n	8003538 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d11e      	bne.n	80031fc <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031cc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80031ce:	b672      	cpsid	i
}
 80031d0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031d2:	2300      	movs	r3, #0
 80031d4:	61bb      	str	r3, [r7, #24]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	61bb      	str	r3, [r7, #24]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	61bb      	str	r3, [r7, #24]
 80031e6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031f6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80031f8:	b662      	cpsie	i
}
 80031fa:	e035      	b.n	8003268 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003200:	2b02      	cmp	r3, #2
 8003202:	d11e      	bne.n	8003242 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003212:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003214:	b672      	cpsid	i
}
 8003216:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003218:	2300      	movs	r3, #0
 800321a:	617b      	str	r3, [r7, #20]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	617b      	str	r3, [r7, #20]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	617b      	str	r3, [r7, #20]
 800322c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800323c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800323e:	b662      	cpsie	i
}
 8003240:	e012      	b.n	8003268 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003250:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003252:	2300      	movs	r3, #0
 8003254:	613b      	str	r3, [r7, #16]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	695b      	ldr	r3, [r3, #20]
 800325c:	613b      	str	r3, [r7, #16]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	613b      	str	r3, [r7, #16]
 8003266:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003268:	e166      	b.n	8003538 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800326e:	2b03      	cmp	r3, #3
 8003270:	f200 811f 	bhi.w	80034b2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003278:	2b01      	cmp	r3, #1
 800327a:	d123      	bne.n	80032c4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800327c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800327e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	f000 fc4d 	bl	8003b20 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d001      	beq.n	8003290 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e167      	b.n	8003560 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	691a      	ldr	r2, [r3, #16]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329a:	b2d2      	uxtb	r2, r2
 800329c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a2:	1c5a      	adds	r2, r3, #1
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ac:	3b01      	subs	r3, #1
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	3b01      	subs	r3, #1
 80032bc:	b29a      	uxth	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032c2:	e139      	b.n	8003538 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d152      	bne.n	8003372 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ce:	9300      	str	r3, [sp, #0]
 80032d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032d2:	2200      	movs	r2, #0
 80032d4:	4906      	ldr	r1, [pc, #24]	; (80032f0 <HAL_I2C_Mem_Read+0x24c>)
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f000 faca 	bl	8003870 <I2C_WaitOnFlagUntilTimeout>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d008      	beq.n	80032f4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e13c      	b.n	8003560 <HAL_I2C_Mem_Read+0x4bc>
 80032e6:	bf00      	nop
 80032e8:	00100002 	.word	0x00100002
 80032ec:	ffff0000 	.word	0xffff0000
 80032f0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80032f4:	b672      	cpsid	i
}
 80032f6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003306:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	691a      	ldr	r2, [r3, #16]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003312:	b2d2      	uxtb	r2, r2
 8003314:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331a:	1c5a      	adds	r2, r3, #1
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003324:	3b01      	subs	r3, #1
 8003326:	b29a      	uxth	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003330:	b29b      	uxth	r3, r3
 8003332:	3b01      	subs	r3, #1
 8003334:	b29a      	uxth	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800333a:	b662      	cpsie	i
}
 800333c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	691a      	ldr	r2, [r3, #16]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003348:	b2d2      	uxtb	r2, r2
 800334a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003350:	1c5a      	adds	r2, r3, #1
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800335a:	3b01      	subs	r3, #1
 800335c:	b29a      	uxth	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003366:	b29b      	uxth	r3, r3
 8003368:	3b01      	subs	r3, #1
 800336a:	b29a      	uxth	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003370:	e0e2      	b.n	8003538 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003378:	2200      	movs	r2, #0
 800337a:	497b      	ldr	r1, [pc, #492]	; (8003568 <HAL_I2C_Mem_Read+0x4c4>)
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f000 fa77 	bl	8003870 <I2C_WaitOnFlagUntilTimeout>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d001      	beq.n	800338c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e0e9      	b.n	8003560 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800339a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800339c:	b672      	cpsid	i
}
 800339e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	691a      	ldr	r2, [r3, #16]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033aa:	b2d2      	uxtb	r2, r2
 80033ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b2:	1c5a      	adds	r2, r3, #1
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033bc:	3b01      	subs	r3, #1
 80033be:	b29a      	uxth	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	3b01      	subs	r3, #1
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80033d2:	4b66      	ldr	r3, [pc, #408]	; (800356c <HAL_I2C_Mem_Read+0x4c8>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	08db      	lsrs	r3, r3, #3
 80033d8:	4a65      	ldr	r2, [pc, #404]	; (8003570 <HAL_I2C_Mem_Read+0x4cc>)
 80033da:	fba2 2303 	umull	r2, r3, r2, r3
 80033de:	0a1a      	lsrs	r2, r3, #8
 80033e0:	4613      	mov	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4413      	add	r3, r2
 80033e6:	00da      	lsls	r2, r3, #3
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80033ec:	6a3b      	ldr	r3, [r7, #32]
 80033ee:	3b01      	subs	r3, #1
 80033f0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80033f2:	6a3b      	ldr	r3, [r7, #32]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d118      	bne.n	800342a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2220      	movs	r2, #32
 8003402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	f043 0220 	orr.w	r2, r3, #32
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800341a:	b662      	cpsie	i
}
 800341c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e09a      	b.n	8003560 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	695b      	ldr	r3, [r3, #20]
 8003430:	f003 0304 	and.w	r3, r3, #4
 8003434:	2b04      	cmp	r3, #4
 8003436:	d1d9      	bne.n	80033ec <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003446:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	691a      	ldr	r2, [r3, #16]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003452:	b2d2      	uxtb	r2, r2
 8003454:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345a:	1c5a      	adds	r2, r3, #1
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003464:	3b01      	subs	r3, #1
 8003466:	b29a      	uxth	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003470:	b29b      	uxth	r3, r3
 8003472:	3b01      	subs	r3, #1
 8003474:	b29a      	uxth	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800347a:	b662      	cpsie	i
}
 800347c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	691a      	ldr	r2, [r3, #16]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003488:	b2d2      	uxtb	r2, r2
 800348a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003490:	1c5a      	adds	r2, r3, #1
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800349a:	3b01      	subs	r3, #1
 800349c:	b29a      	uxth	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	3b01      	subs	r3, #1
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034b0:	e042      	b.n	8003538 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80034b6:	68f8      	ldr	r0, [r7, #12]
 80034b8:	f000 fb32 	bl	8003b20 <I2C_WaitOnRXNEFlagUntilTimeout>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e04c      	b.n	8003560 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	691a      	ldr	r2, [r3, #16]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d0:	b2d2      	uxtb	r2, r2
 80034d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d8:	1c5a      	adds	r2, r3, #1
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034e2:	3b01      	subs	r3, #1
 80034e4:	b29a      	uxth	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	3b01      	subs	r3, #1
 80034f2:	b29a      	uxth	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	f003 0304 	and.w	r3, r3, #4
 8003502:	2b04      	cmp	r3, #4
 8003504:	d118      	bne.n	8003538 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	691a      	ldr	r2, [r3, #16]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003510:	b2d2      	uxtb	r2, r2
 8003512:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003518:	1c5a      	adds	r2, r3, #1
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003522:	3b01      	subs	r3, #1
 8003524:	b29a      	uxth	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800352e:	b29b      	uxth	r3, r3
 8003530:	3b01      	subs	r3, #1
 8003532:	b29a      	uxth	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800353c:	2b00      	cmp	r3, #0
 800353e:	f47f ae94 	bne.w	800326a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2220      	movs	r2, #32
 8003546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800355a:	2300      	movs	r3, #0
 800355c:	e000      	b.n	8003560 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800355e:	2302      	movs	r3, #2
  }
}
 8003560:	4618      	mov	r0, r3
 8003562:	3728      	adds	r7, #40	; 0x28
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	00010004 	.word	0x00010004
 800356c:	20000004 	.word	0x20000004
 8003570:	14f8b589 	.word	0x14f8b589

08003574 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b088      	sub	sp, #32
 8003578:	af02      	add	r7, sp, #8
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	4608      	mov	r0, r1
 800357e:	4611      	mov	r1, r2
 8003580:	461a      	mov	r2, r3
 8003582:	4603      	mov	r3, r0
 8003584:	817b      	strh	r3, [r7, #10]
 8003586:	460b      	mov	r3, r1
 8003588:	813b      	strh	r3, [r7, #8]
 800358a:	4613      	mov	r3, r2
 800358c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800359c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800359e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a0:	9300      	str	r3, [sp, #0]
 80035a2:	6a3b      	ldr	r3, [r7, #32]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f000 f960 	bl	8003870 <I2C_WaitOnFlagUntilTimeout>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00d      	beq.n	80035d2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035c4:	d103      	bne.n	80035ce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e05f      	b.n	8003692 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035d2:	897b      	ldrh	r3, [r7, #10]
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	461a      	mov	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80035e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e4:	6a3a      	ldr	r2, [r7, #32]
 80035e6:	492d      	ldr	r1, [pc, #180]	; (800369c <I2C_RequestMemoryWrite+0x128>)
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	f000 f998 	bl	800391e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d001      	beq.n	80035f8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e04c      	b.n	8003692 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035f8:	2300      	movs	r3, #0
 80035fa:	617b      	str	r3, [r7, #20]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	617b      	str	r3, [r7, #20]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	617b      	str	r3, [r7, #20]
 800360c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800360e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003610:	6a39      	ldr	r1, [r7, #32]
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f000 fa02 	bl	8003a1c <I2C_WaitOnTXEFlagUntilTimeout>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00d      	beq.n	800363a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003622:	2b04      	cmp	r3, #4
 8003624:	d107      	bne.n	8003636 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003634:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e02b      	b.n	8003692 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800363a:	88fb      	ldrh	r3, [r7, #6]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d105      	bne.n	800364c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003640:	893b      	ldrh	r3, [r7, #8]
 8003642:	b2da      	uxtb	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	611a      	str	r2, [r3, #16]
 800364a:	e021      	b.n	8003690 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800364c:	893b      	ldrh	r3, [r7, #8]
 800364e:	0a1b      	lsrs	r3, r3, #8
 8003650:	b29b      	uxth	r3, r3
 8003652:	b2da      	uxtb	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800365a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800365c:	6a39      	ldr	r1, [r7, #32]
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f000 f9dc 	bl	8003a1c <I2C_WaitOnTXEFlagUntilTimeout>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00d      	beq.n	8003686 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366e:	2b04      	cmp	r3, #4
 8003670:	d107      	bne.n	8003682 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003680:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e005      	b.n	8003692 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003686:	893b      	ldrh	r3, [r7, #8]
 8003688:	b2da      	uxtb	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3718      	adds	r7, #24
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	00010002 	.word	0x00010002

080036a0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b088      	sub	sp, #32
 80036a4:	af02      	add	r7, sp, #8
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	4608      	mov	r0, r1
 80036aa:	4611      	mov	r1, r2
 80036ac:	461a      	mov	r2, r3
 80036ae:	4603      	mov	r3, r0
 80036b0:	817b      	strh	r3, [r7, #10]
 80036b2:	460b      	mov	r3, r1
 80036b4:	813b      	strh	r3, [r7, #8]
 80036b6:	4613      	mov	r3, r2
 80036b8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036c8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036dc:	9300      	str	r3, [sp, #0]
 80036de:	6a3b      	ldr	r3, [r7, #32]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036e6:	68f8      	ldr	r0, [r7, #12]
 80036e8:	f000 f8c2 	bl	8003870 <I2C_WaitOnFlagUntilTimeout>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00d      	beq.n	800370e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003700:	d103      	bne.n	800370a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003708:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e0aa      	b.n	8003864 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800370e:	897b      	ldrh	r3, [r7, #10]
 8003710:	b2db      	uxtb	r3, r3
 8003712:	461a      	mov	r2, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800371c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800371e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003720:	6a3a      	ldr	r2, [r7, #32]
 8003722:	4952      	ldr	r1, [pc, #328]	; (800386c <I2C_RequestMemoryRead+0x1cc>)
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f000 f8fa 	bl	800391e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d001      	beq.n	8003734 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e097      	b.n	8003864 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003734:	2300      	movs	r3, #0
 8003736:	617b      	str	r3, [r7, #20]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	617b      	str	r3, [r7, #20]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	617b      	str	r3, [r7, #20]
 8003748:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800374a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800374c:	6a39      	ldr	r1, [r7, #32]
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f000 f964 	bl	8003a1c <I2C_WaitOnTXEFlagUntilTimeout>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00d      	beq.n	8003776 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	2b04      	cmp	r3, #4
 8003760:	d107      	bne.n	8003772 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003770:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e076      	b.n	8003864 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003776:	88fb      	ldrh	r3, [r7, #6]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d105      	bne.n	8003788 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800377c:	893b      	ldrh	r3, [r7, #8]
 800377e:	b2da      	uxtb	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	611a      	str	r2, [r3, #16]
 8003786:	e021      	b.n	80037cc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003788:	893b      	ldrh	r3, [r7, #8]
 800378a:	0a1b      	lsrs	r3, r3, #8
 800378c:	b29b      	uxth	r3, r3
 800378e:	b2da      	uxtb	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003798:	6a39      	ldr	r1, [r7, #32]
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f000 f93e 	bl	8003a1c <I2C_WaitOnTXEFlagUntilTimeout>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00d      	beq.n	80037c2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	2b04      	cmp	r3, #4
 80037ac:	d107      	bne.n	80037be <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e050      	b.n	8003864 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80037c2:	893b      	ldrh	r3, [r7, #8]
 80037c4:	b2da      	uxtb	r2, r3
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037ce:	6a39      	ldr	r1, [r7, #32]
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	f000 f923 	bl	8003a1c <I2C_WaitOnTXEFlagUntilTimeout>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00d      	beq.n	80037f8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e0:	2b04      	cmp	r3, #4
 80037e2:	d107      	bne.n	80037f4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037f2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e035      	b.n	8003864 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003806:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380a:	9300      	str	r3, [sp, #0]
 800380c:	6a3b      	ldr	r3, [r7, #32]
 800380e:	2200      	movs	r2, #0
 8003810:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f000 f82b 	bl	8003870 <I2C_WaitOnFlagUntilTimeout>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00d      	beq.n	800383c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800382a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800382e:	d103      	bne.n	8003838 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003836:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e013      	b.n	8003864 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800383c:	897b      	ldrh	r3, [r7, #10]
 800383e:	b2db      	uxtb	r3, r3
 8003840:	f043 0301 	orr.w	r3, r3, #1
 8003844:	b2da      	uxtb	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800384c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384e:	6a3a      	ldr	r2, [r7, #32]
 8003850:	4906      	ldr	r1, [pc, #24]	; (800386c <I2C_RequestMemoryRead+0x1cc>)
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f000 f863 	bl	800391e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e000      	b.n	8003864 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3718      	adds	r7, #24
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	00010002 	.word	0x00010002

08003870 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	603b      	str	r3, [r7, #0]
 800387c:	4613      	mov	r3, r2
 800387e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003880:	e025      	b.n	80038ce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003888:	d021      	beq.n	80038ce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800388a:	f7fe fceb 	bl	8002264 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	683a      	ldr	r2, [r7, #0]
 8003896:	429a      	cmp	r2, r3
 8003898:	d302      	bcc.n	80038a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d116      	bne.n	80038ce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2220      	movs	r2, #32
 80038aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	f043 0220 	orr.w	r2, r3, #32
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e023      	b.n	8003916 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	0c1b      	lsrs	r3, r3, #16
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d10d      	bne.n	80038f4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	43da      	mvns	r2, r3
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	4013      	ands	r3, r2
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	bf0c      	ite	eq
 80038ea:	2301      	moveq	r3, #1
 80038ec:	2300      	movne	r3, #0
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	461a      	mov	r2, r3
 80038f2:	e00c      	b.n	800390e <I2C_WaitOnFlagUntilTimeout+0x9e>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	43da      	mvns	r2, r3
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	4013      	ands	r3, r2
 8003900:	b29b      	uxth	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	bf0c      	ite	eq
 8003906:	2301      	moveq	r3, #1
 8003908:	2300      	movne	r3, #0
 800390a:	b2db      	uxtb	r3, r3
 800390c:	461a      	mov	r2, r3
 800390e:	79fb      	ldrb	r3, [r7, #7]
 8003910:	429a      	cmp	r2, r3
 8003912:	d0b6      	beq.n	8003882 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b084      	sub	sp, #16
 8003922:	af00      	add	r7, sp, #0
 8003924:	60f8      	str	r0, [r7, #12]
 8003926:	60b9      	str	r1, [r7, #8]
 8003928:	607a      	str	r2, [r7, #4]
 800392a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800392c:	e051      	b.n	80039d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	695b      	ldr	r3, [r3, #20]
 8003934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003938:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800393c:	d123      	bne.n	8003986 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800394c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003956:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2220      	movs	r2, #32
 8003962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	f043 0204 	orr.w	r2, r3, #4
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e046      	b.n	8003a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800398c:	d021      	beq.n	80039d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800398e:	f7fe fc69 	bl	8002264 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	429a      	cmp	r2, r3
 800399c:	d302      	bcc.n	80039a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d116      	bne.n	80039d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2220      	movs	r2, #32
 80039ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	f043 0220 	orr.w	r2, r3, #32
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e020      	b.n	8003a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	0c1b      	lsrs	r3, r3, #16
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d10c      	bne.n	80039f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	43da      	mvns	r2, r3
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	4013      	ands	r3, r2
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	bf14      	ite	ne
 80039ee:	2301      	movne	r3, #1
 80039f0:	2300      	moveq	r3, #0
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	e00b      	b.n	8003a0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	43da      	mvns	r2, r3
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	4013      	ands	r3, r2
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	bf14      	ite	ne
 8003a08:	2301      	movne	r3, #1
 8003a0a:	2300      	moveq	r3, #0
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d18d      	bne.n	800392e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3710      	adds	r7, #16
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a28:	e02d      	b.n	8003a86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f000 f8ce 	bl	8003bcc <I2C_IsAcknowledgeFailed>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e02d      	b.n	8003a96 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a40:	d021      	beq.n	8003a86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a42:	f7fe fc0f 	bl	8002264 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	68ba      	ldr	r2, [r7, #8]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d302      	bcc.n	8003a58 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d116      	bne.n	8003a86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2220      	movs	r2, #32
 8003a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a72:	f043 0220 	orr.w	r2, r3, #32
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e007      	b.n	8003a96 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a90:	2b80      	cmp	r3, #128	; 0x80
 8003a92:	d1ca      	bne.n	8003a2a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3710      	adds	r7, #16
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}

08003a9e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	b084      	sub	sp, #16
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	60f8      	str	r0, [r7, #12]
 8003aa6:	60b9      	str	r1, [r7, #8]
 8003aa8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003aaa:	e02d      	b.n	8003b08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003aac:	68f8      	ldr	r0, [r7, #12]
 8003aae:	f000 f88d 	bl	8003bcc <I2C_IsAcknowledgeFailed>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d001      	beq.n	8003abc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e02d      	b.n	8003b18 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ac2:	d021      	beq.n	8003b08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ac4:	f7fe fbce 	bl	8002264 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	68ba      	ldr	r2, [r7, #8]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d302      	bcc.n	8003ada <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d116      	bne.n	8003b08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af4:	f043 0220 	orr.w	r2, r3, #32
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e007      	b.n	8003b18 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	f003 0304 	and.w	r3, r3, #4
 8003b12:	2b04      	cmp	r3, #4
 8003b14:	d1ca      	bne.n	8003aac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b16:	2300      	movs	r3, #0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3710      	adds	r7, #16
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b2c:	e042      	b.n	8003bb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	695b      	ldr	r3, [r3, #20]
 8003b34:	f003 0310 	and.w	r3, r3, #16
 8003b38:	2b10      	cmp	r3, #16
 8003b3a:	d119      	bne.n	8003b70 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f06f 0210 	mvn.w	r2, #16
 8003b44:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2220      	movs	r2, #32
 8003b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e029      	b.n	8003bc4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b70:	f7fe fb78 	bl	8002264 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	68ba      	ldr	r2, [r7, #8]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d302      	bcc.n	8003b86 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d116      	bne.n	8003bb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2220      	movs	r2, #32
 8003b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba0:	f043 0220 	orr.w	r2, r3, #32
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e007      	b.n	8003bc4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bbe:	2b40      	cmp	r3, #64	; 0x40
 8003bc0:	d1b5      	bne.n	8003b2e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003be2:	d11b      	bne.n	8003c1c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003bec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2220      	movs	r2, #32
 8003bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c08:	f043 0204 	orr.w	r2, r3, #4
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e000      	b.n	8003c1e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	370c      	adds	r7, #12
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bc80      	pop	{r7}
 8003c26:	4770      	bx	lr

08003c28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b086      	sub	sp, #24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e26c      	b.n	8004114 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	f000 8087 	beq.w	8003d56 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c48:	4b92      	ldr	r3, [pc, #584]	; (8003e94 <HAL_RCC_OscConfig+0x26c>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f003 030c 	and.w	r3, r3, #12
 8003c50:	2b04      	cmp	r3, #4
 8003c52:	d00c      	beq.n	8003c6e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c54:	4b8f      	ldr	r3, [pc, #572]	; (8003e94 <HAL_RCC_OscConfig+0x26c>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f003 030c 	and.w	r3, r3, #12
 8003c5c:	2b08      	cmp	r3, #8
 8003c5e:	d112      	bne.n	8003c86 <HAL_RCC_OscConfig+0x5e>
 8003c60:	4b8c      	ldr	r3, [pc, #560]	; (8003e94 <HAL_RCC_OscConfig+0x26c>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c6c:	d10b      	bne.n	8003c86 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c6e:	4b89      	ldr	r3, [pc, #548]	; (8003e94 <HAL_RCC_OscConfig+0x26c>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d06c      	beq.n	8003d54 <HAL_RCC_OscConfig+0x12c>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d168      	bne.n	8003d54 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e246      	b.n	8004114 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c8e:	d106      	bne.n	8003c9e <HAL_RCC_OscConfig+0x76>
 8003c90:	4b80      	ldr	r3, [pc, #512]	; (8003e94 <HAL_RCC_OscConfig+0x26c>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a7f      	ldr	r2, [pc, #508]	; (8003e94 <HAL_RCC_OscConfig+0x26c>)
 8003c96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c9a:	6013      	str	r3, [r2, #0]
 8003c9c:	e02e      	b.n	8003cfc <HAL_RCC_OscConfig+0xd4>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d10c      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x98>
 8003ca6:	4b7b      	ldr	r3, [pc, #492]	; (8003e94 <HAL_RCC_OscConfig+0x26c>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a7a      	ldr	r2, [pc, #488]	; (8003e94 <HAL_RCC_OscConfig+0x26c>)
 8003cac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cb0:	6013      	str	r3, [r2, #0]
 8003cb2:	4b78      	ldr	r3, [pc, #480]	; (8003e94 <HAL_RCC_OscConfig+0x26c>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a77      	ldr	r2, [pc, #476]	; (8003e94 <HAL_RCC_OscConfig+0x26c>)
 8003cb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cbc:	6013      	str	r3, [r2, #0]
 8003cbe:	e01d      	b.n	8003cfc <HAL_RCC_OscConfig+0xd4>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cc8:	d10c      	bne.n	8003ce4 <HAL_RCC_OscConfig+0xbc>
 8003cca:	4b72      	ldr	r3, [pc, #456]	; (8003e94 <HAL_RCC_OscConfig+0x26c>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a71      	ldr	r2, [pc, #452]	; (8003e94 <HAL_RCC_OscConfig+0x26c>)
 8003cd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cd4:	6013      	str	r3, [r2, #0]
 8003cd6:	4b6f      	ldr	r3, [pc, #444]	; (8003e94 <HAL_RCC_OscConfig+0x26c>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a6e      	ldr	r2, [pc, #440]	; (8003e94 <HAL_RCC_OscConfig+0x26c>)
 8003cdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ce0:	6013      	str	r3, [r2, #0]
 8003ce2:	e00b      	b.n	8003cfc <HAL_RCC_OscConfig+0xd4>
 8003ce4:	4b6b      	ldr	r3, [pc, #428]	; (8003e94 <HAL_RCC_OscConfig+0x26c>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a6a      	ldr	r2, [pc, #424]	; (8003e94 <HAL_RCC_OscConfig+0x26c>)
 8003cea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cee:	6013      	str	r3, [r2, #0]
 8003cf0:	4b68      	ldr	r3, [pc, #416]	; (8003e94 <HAL_RCC_OscConfig+0x26c>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a67      	ldr	r2, [pc, #412]	; (8003e94 <HAL_RCC_OscConfig+0x26c>)
 8003cf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cfa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d013      	beq.n	8003d2c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d04:	f7fe faae 	bl	8002264 <HAL_GetTick>
 8003d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d0a:	e008      	b.n	8003d1e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d0c:	f7fe faaa 	bl	8002264 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b64      	cmp	r3, #100	; 0x64
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e1fa      	b.n	8004114 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d1e:	4b5d      	ldr	r3, [pc, #372]	; (8003e94 <HAL_RCC_OscConfig+0x26c>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d0f0      	beq.n	8003d0c <HAL_RCC_OscConfig+0xe4>
 8003d2a:	e014      	b.n	8003d56 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d2c:	f7fe fa9a 	bl	8002264 <HAL_GetTick>
 8003d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d34:	f7fe fa96 	bl	8002264 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b64      	cmp	r3, #100	; 0x64
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e1e6      	b.n	8004114 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d46:	4b53      	ldr	r3, [pc, #332]	; (8003e94 <HAL_RCC_OscConfig+0x26c>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1f0      	bne.n	8003d34 <HAL_RCC_OscConfig+0x10c>
 8003d52:	e000      	b.n	8003d56 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d063      	beq.n	8003e2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d62:	4b4c      	ldr	r3, [pc, #304]	; (8003e94 <HAL_RCC_OscConfig+0x26c>)
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f003 030c 	and.w	r3, r3, #12
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00b      	beq.n	8003d86 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003d6e:	4b49      	ldr	r3, [pc, #292]	; (8003e94 <HAL_RCC_OscConfig+0x26c>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f003 030c 	and.w	r3, r3, #12
 8003d76:	2b08      	cmp	r3, #8
 8003d78:	d11c      	bne.n	8003db4 <HAL_RCC_OscConfig+0x18c>
 8003d7a:	4b46      	ldr	r3, [pc, #280]	; (8003e94 <HAL_RCC_OscConfig+0x26c>)
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d116      	bne.n	8003db4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d86:	4b43      	ldr	r3, [pc, #268]	; (8003e94 <HAL_RCC_OscConfig+0x26c>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d005      	beq.n	8003d9e <HAL_RCC_OscConfig+0x176>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d001      	beq.n	8003d9e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e1ba      	b.n	8004114 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d9e:	4b3d      	ldr	r3, [pc, #244]	; (8003e94 <HAL_RCC_OscConfig+0x26c>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	00db      	lsls	r3, r3, #3
 8003dac:	4939      	ldr	r1, [pc, #228]	; (8003e94 <HAL_RCC_OscConfig+0x26c>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003db2:	e03a      	b.n	8003e2a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d020      	beq.n	8003dfe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dbc:	4b36      	ldr	r3, [pc, #216]	; (8003e98 <HAL_RCC_OscConfig+0x270>)
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc2:	f7fe fa4f 	bl	8002264 <HAL_GetTick>
 8003dc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dc8:	e008      	b.n	8003ddc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dca:	f7fe fa4b 	bl	8002264 <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d901      	bls.n	8003ddc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e19b      	b.n	8004114 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ddc:	4b2d      	ldr	r3, [pc, #180]	; (8003e94 <HAL_RCC_OscConfig+0x26c>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d0f0      	beq.n	8003dca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003de8:	4b2a      	ldr	r3, [pc, #168]	; (8003e94 <HAL_RCC_OscConfig+0x26c>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	00db      	lsls	r3, r3, #3
 8003df6:	4927      	ldr	r1, [pc, #156]	; (8003e94 <HAL_RCC_OscConfig+0x26c>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	600b      	str	r3, [r1, #0]
 8003dfc:	e015      	b.n	8003e2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dfe:	4b26      	ldr	r3, [pc, #152]	; (8003e98 <HAL_RCC_OscConfig+0x270>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e04:	f7fe fa2e 	bl	8002264 <HAL_GetTick>
 8003e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e0c:	f7fe fa2a 	bl	8002264 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e17a      	b.n	8004114 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e1e:	4b1d      	ldr	r3, [pc, #116]	; (8003e94 <HAL_RCC_OscConfig+0x26c>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1f0      	bne.n	8003e0c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0308 	and.w	r3, r3, #8
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d03a      	beq.n	8003eac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d019      	beq.n	8003e72 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e3e:	4b17      	ldr	r3, [pc, #92]	; (8003e9c <HAL_RCC_OscConfig+0x274>)
 8003e40:	2201      	movs	r2, #1
 8003e42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e44:	f7fe fa0e 	bl	8002264 <HAL_GetTick>
 8003e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e4a:	e008      	b.n	8003e5e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e4c:	f7fe fa0a 	bl	8002264 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e15a      	b.n	8004114 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e5e:	4b0d      	ldr	r3, [pc, #52]	; (8003e94 <HAL_RCC_OscConfig+0x26c>)
 8003e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d0f0      	beq.n	8003e4c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003e6a:	2001      	movs	r0, #1
 8003e6c:	f000 fad8 	bl	8004420 <RCC_Delay>
 8003e70:	e01c      	b.n	8003eac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e72:	4b0a      	ldr	r3, [pc, #40]	; (8003e9c <HAL_RCC_OscConfig+0x274>)
 8003e74:	2200      	movs	r2, #0
 8003e76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e78:	f7fe f9f4 	bl	8002264 <HAL_GetTick>
 8003e7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e7e:	e00f      	b.n	8003ea0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e80:	f7fe f9f0 	bl	8002264 <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d908      	bls.n	8003ea0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e140      	b.n	8004114 <HAL_RCC_OscConfig+0x4ec>
 8003e92:	bf00      	nop
 8003e94:	40021000 	.word	0x40021000
 8003e98:	42420000 	.word	0x42420000
 8003e9c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ea0:	4b9e      	ldr	r3, [pc, #632]	; (800411c <HAL_RCC_OscConfig+0x4f4>)
 8003ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea4:	f003 0302 	and.w	r3, r3, #2
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1e9      	bne.n	8003e80 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0304 	and.w	r3, r3, #4
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f000 80a6 	beq.w	8004006 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ebe:	4b97      	ldr	r3, [pc, #604]	; (800411c <HAL_RCC_OscConfig+0x4f4>)
 8003ec0:	69db      	ldr	r3, [r3, #28]
 8003ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10d      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eca:	4b94      	ldr	r3, [pc, #592]	; (800411c <HAL_RCC_OscConfig+0x4f4>)
 8003ecc:	69db      	ldr	r3, [r3, #28]
 8003ece:	4a93      	ldr	r2, [pc, #588]	; (800411c <HAL_RCC_OscConfig+0x4f4>)
 8003ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ed4:	61d3      	str	r3, [r2, #28]
 8003ed6:	4b91      	ldr	r3, [pc, #580]	; (800411c <HAL_RCC_OscConfig+0x4f4>)
 8003ed8:	69db      	ldr	r3, [r3, #28]
 8003eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ede:	60bb      	str	r3, [r7, #8]
 8003ee0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ee6:	4b8e      	ldr	r3, [pc, #568]	; (8004120 <HAL_RCC_OscConfig+0x4f8>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d118      	bne.n	8003f24 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ef2:	4b8b      	ldr	r3, [pc, #556]	; (8004120 <HAL_RCC_OscConfig+0x4f8>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a8a      	ldr	r2, [pc, #552]	; (8004120 <HAL_RCC_OscConfig+0x4f8>)
 8003ef8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003efc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003efe:	f7fe f9b1 	bl	8002264 <HAL_GetTick>
 8003f02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f04:	e008      	b.n	8003f18 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f06:	f7fe f9ad 	bl	8002264 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	2b64      	cmp	r3, #100	; 0x64
 8003f12:	d901      	bls.n	8003f18 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e0fd      	b.n	8004114 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f18:	4b81      	ldr	r3, [pc, #516]	; (8004120 <HAL_RCC_OscConfig+0x4f8>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d0f0      	beq.n	8003f06 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d106      	bne.n	8003f3a <HAL_RCC_OscConfig+0x312>
 8003f2c:	4b7b      	ldr	r3, [pc, #492]	; (800411c <HAL_RCC_OscConfig+0x4f4>)
 8003f2e:	6a1b      	ldr	r3, [r3, #32]
 8003f30:	4a7a      	ldr	r2, [pc, #488]	; (800411c <HAL_RCC_OscConfig+0x4f4>)
 8003f32:	f043 0301 	orr.w	r3, r3, #1
 8003f36:	6213      	str	r3, [r2, #32]
 8003f38:	e02d      	b.n	8003f96 <HAL_RCC_OscConfig+0x36e>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d10c      	bne.n	8003f5c <HAL_RCC_OscConfig+0x334>
 8003f42:	4b76      	ldr	r3, [pc, #472]	; (800411c <HAL_RCC_OscConfig+0x4f4>)
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	4a75      	ldr	r2, [pc, #468]	; (800411c <HAL_RCC_OscConfig+0x4f4>)
 8003f48:	f023 0301 	bic.w	r3, r3, #1
 8003f4c:	6213      	str	r3, [r2, #32]
 8003f4e:	4b73      	ldr	r3, [pc, #460]	; (800411c <HAL_RCC_OscConfig+0x4f4>)
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	4a72      	ldr	r2, [pc, #456]	; (800411c <HAL_RCC_OscConfig+0x4f4>)
 8003f54:	f023 0304 	bic.w	r3, r3, #4
 8003f58:	6213      	str	r3, [r2, #32]
 8003f5a:	e01c      	b.n	8003f96 <HAL_RCC_OscConfig+0x36e>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	2b05      	cmp	r3, #5
 8003f62:	d10c      	bne.n	8003f7e <HAL_RCC_OscConfig+0x356>
 8003f64:	4b6d      	ldr	r3, [pc, #436]	; (800411c <HAL_RCC_OscConfig+0x4f4>)
 8003f66:	6a1b      	ldr	r3, [r3, #32]
 8003f68:	4a6c      	ldr	r2, [pc, #432]	; (800411c <HAL_RCC_OscConfig+0x4f4>)
 8003f6a:	f043 0304 	orr.w	r3, r3, #4
 8003f6e:	6213      	str	r3, [r2, #32]
 8003f70:	4b6a      	ldr	r3, [pc, #424]	; (800411c <HAL_RCC_OscConfig+0x4f4>)
 8003f72:	6a1b      	ldr	r3, [r3, #32]
 8003f74:	4a69      	ldr	r2, [pc, #420]	; (800411c <HAL_RCC_OscConfig+0x4f4>)
 8003f76:	f043 0301 	orr.w	r3, r3, #1
 8003f7a:	6213      	str	r3, [r2, #32]
 8003f7c:	e00b      	b.n	8003f96 <HAL_RCC_OscConfig+0x36e>
 8003f7e:	4b67      	ldr	r3, [pc, #412]	; (800411c <HAL_RCC_OscConfig+0x4f4>)
 8003f80:	6a1b      	ldr	r3, [r3, #32]
 8003f82:	4a66      	ldr	r2, [pc, #408]	; (800411c <HAL_RCC_OscConfig+0x4f4>)
 8003f84:	f023 0301 	bic.w	r3, r3, #1
 8003f88:	6213      	str	r3, [r2, #32]
 8003f8a:	4b64      	ldr	r3, [pc, #400]	; (800411c <HAL_RCC_OscConfig+0x4f4>)
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	4a63      	ldr	r2, [pc, #396]	; (800411c <HAL_RCC_OscConfig+0x4f4>)
 8003f90:	f023 0304 	bic.w	r3, r3, #4
 8003f94:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d015      	beq.n	8003fca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f9e:	f7fe f961 	bl	8002264 <HAL_GetTick>
 8003fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fa4:	e00a      	b.n	8003fbc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fa6:	f7fe f95d 	bl	8002264 <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d901      	bls.n	8003fbc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e0ab      	b.n	8004114 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fbc:	4b57      	ldr	r3, [pc, #348]	; (800411c <HAL_RCC_OscConfig+0x4f4>)
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
 8003fc0:	f003 0302 	and.w	r3, r3, #2
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d0ee      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x37e>
 8003fc8:	e014      	b.n	8003ff4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fca:	f7fe f94b 	bl	8002264 <HAL_GetTick>
 8003fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fd0:	e00a      	b.n	8003fe8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fd2:	f7fe f947 	bl	8002264 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d901      	bls.n	8003fe8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	e095      	b.n	8004114 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fe8:	4b4c      	ldr	r3, [pc, #304]	; (800411c <HAL_RCC_OscConfig+0x4f4>)
 8003fea:	6a1b      	ldr	r3, [r3, #32]
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1ee      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ff4:	7dfb      	ldrb	r3, [r7, #23]
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d105      	bne.n	8004006 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ffa:	4b48      	ldr	r3, [pc, #288]	; (800411c <HAL_RCC_OscConfig+0x4f4>)
 8003ffc:	69db      	ldr	r3, [r3, #28]
 8003ffe:	4a47      	ldr	r2, [pc, #284]	; (800411c <HAL_RCC_OscConfig+0x4f4>)
 8004000:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004004:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	2b00      	cmp	r3, #0
 800400c:	f000 8081 	beq.w	8004112 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004010:	4b42      	ldr	r3, [pc, #264]	; (800411c <HAL_RCC_OscConfig+0x4f4>)
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f003 030c 	and.w	r3, r3, #12
 8004018:	2b08      	cmp	r3, #8
 800401a:	d061      	beq.n	80040e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	69db      	ldr	r3, [r3, #28]
 8004020:	2b02      	cmp	r3, #2
 8004022:	d146      	bne.n	80040b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004024:	4b3f      	ldr	r3, [pc, #252]	; (8004124 <HAL_RCC_OscConfig+0x4fc>)
 8004026:	2200      	movs	r2, #0
 8004028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800402a:	f7fe f91b 	bl	8002264 <HAL_GetTick>
 800402e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004030:	e008      	b.n	8004044 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004032:	f7fe f917 	bl	8002264 <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	2b02      	cmp	r3, #2
 800403e:	d901      	bls.n	8004044 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e067      	b.n	8004114 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004044:	4b35      	ldr	r3, [pc, #212]	; (800411c <HAL_RCC_OscConfig+0x4f4>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1f0      	bne.n	8004032 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a1b      	ldr	r3, [r3, #32]
 8004054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004058:	d108      	bne.n	800406c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800405a:	4b30      	ldr	r3, [pc, #192]	; (800411c <HAL_RCC_OscConfig+0x4f4>)
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	492d      	ldr	r1, [pc, #180]	; (800411c <HAL_RCC_OscConfig+0x4f4>)
 8004068:	4313      	orrs	r3, r2
 800406a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800406c:	4b2b      	ldr	r3, [pc, #172]	; (800411c <HAL_RCC_OscConfig+0x4f4>)
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a19      	ldr	r1, [r3, #32]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407c:	430b      	orrs	r3, r1
 800407e:	4927      	ldr	r1, [pc, #156]	; (800411c <HAL_RCC_OscConfig+0x4f4>)
 8004080:	4313      	orrs	r3, r2
 8004082:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004084:	4b27      	ldr	r3, [pc, #156]	; (8004124 <HAL_RCC_OscConfig+0x4fc>)
 8004086:	2201      	movs	r2, #1
 8004088:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800408a:	f7fe f8eb 	bl	8002264 <HAL_GetTick>
 800408e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004090:	e008      	b.n	80040a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004092:	f7fe f8e7 	bl	8002264 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	2b02      	cmp	r3, #2
 800409e:	d901      	bls.n	80040a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e037      	b.n	8004114 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040a4:	4b1d      	ldr	r3, [pc, #116]	; (800411c <HAL_RCC_OscConfig+0x4f4>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d0f0      	beq.n	8004092 <HAL_RCC_OscConfig+0x46a>
 80040b0:	e02f      	b.n	8004112 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040b2:	4b1c      	ldr	r3, [pc, #112]	; (8004124 <HAL_RCC_OscConfig+0x4fc>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b8:	f7fe f8d4 	bl	8002264 <HAL_GetTick>
 80040bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040be:	e008      	b.n	80040d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040c0:	f7fe f8d0 	bl	8002264 <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e020      	b.n	8004114 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040d2:	4b12      	ldr	r3, [pc, #72]	; (800411c <HAL_RCC_OscConfig+0x4f4>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1f0      	bne.n	80040c0 <HAL_RCC_OscConfig+0x498>
 80040de:	e018      	b.n	8004112 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	69db      	ldr	r3, [r3, #28]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d101      	bne.n	80040ec <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e013      	b.n	8004114 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80040ec:	4b0b      	ldr	r3, [pc, #44]	; (800411c <HAL_RCC_OscConfig+0x4f4>)
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d106      	bne.n	800410e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800410a:	429a      	cmp	r2, r3
 800410c:	d001      	beq.n	8004112 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e000      	b.n	8004114 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	3718      	adds	r7, #24
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	40021000 	.word	0x40021000
 8004120:	40007000 	.word	0x40007000
 8004124:	42420060 	.word	0x42420060

08004128 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d101      	bne.n	800413c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e0d0      	b.n	80042de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800413c:	4b6a      	ldr	r3, [pc, #424]	; (80042e8 <HAL_RCC_ClockConfig+0x1c0>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0307 	and.w	r3, r3, #7
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	429a      	cmp	r2, r3
 8004148:	d910      	bls.n	800416c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800414a:	4b67      	ldr	r3, [pc, #412]	; (80042e8 <HAL_RCC_ClockConfig+0x1c0>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f023 0207 	bic.w	r2, r3, #7
 8004152:	4965      	ldr	r1, [pc, #404]	; (80042e8 <HAL_RCC_ClockConfig+0x1c0>)
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	4313      	orrs	r3, r2
 8004158:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800415a:	4b63      	ldr	r3, [pc, #396]	; (80042e8 <HAL_RCC_ClockConfig+0x1c0>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0307 	and.w	r3, r3, #7
 8004162:	683a      	ldr	r2, [r7, #0]
 8004164:	429a      	cmp	r2, r3
 8004166:	d001      	beq.n	800416c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e0b8      	b.n	80042de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0302 	and.w	r3, r3, #2
 8004174:	2b00      	cmp	r3, #0
 8004176:	d020      	beq.n	80041ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0304 	and.w	r3, r3, #4
 8004180:	2b00      	cmp	r3, #0
 8004182:	d005      	beq.n	8004190 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004184:	4b59      	ldr	r3, [pc, #356]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	4a58      	ldr	r2, [pc, #352]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 800418a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800418e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0308 	and.w	r3, r3, #8
 8004198:	2b00      	cmp	r3, #0
 800419a:	d005      	beq.n	80041a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800419c:	4b53      	ldr	r3, [pc, #332]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	4a52      	ldr	r2, [pc, #328]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 80041a2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80041a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041a8:	4b50      	ldr	r3, [pc, #320]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	494d      	ldr	r1, [pc, #308]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d040      	beq.n	8004248 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d107      	bne.n	80041de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ce:	4b47      	ldr	r3, [pc, #284]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d115      	bne.n	8004206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e07f      	b.n	80042de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d107      	bne.n	80041f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041e6:	4b41      	ldr	r3, [pc, #260]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d109      	bne.n	8004206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e073      	b.n	80042de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041f6:	4b3d      	ldr	r3, [pc, #244]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0302 	and.w	r3, r3, #2
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d101      	bne.n	8004206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e06b      	b.n	80042de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004206:	4b39      	ldr	r3, [pc, #228]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f023 0203 	bic.w	r2, r3, #3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	4936      	ldr	r1, [pc, #216]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 8004214:	4313      	orrs	r3, r2
 8004216:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004218:	f7fe f824 	bl	8002264 <HAL_GetTick>
 800421c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800421e:	e00a      	b.n	8004236 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004220:	f7fe f820 	bl	8002264 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	f241 3288 	movw	r2, #5000	; 0x1388
 800422e:	4293      	cmp	r3, r2
 8004230:	d901      	bls.n	8004236 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e053      	b.n	80042de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004236:	4b2d      	ldr	r3, [pc, #180]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f003 020c 	and.w	r2, r3, #12
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	429a      	cmp	r2, r3
 8004246:	d1eb      	bne.n	8004220 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004248:	4b27      	ldr	r3, [pc, #156]	; (80042e8 <HAL_RCC_ClockConfig+0x1c0>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0307 	and.w	r3, r3, #7
 8004250:	683a      	ldr	r2, [r7, #0]
 8004252:	429a      	cmp	r2, r3
 8004254:	d210      	bcs.n	8004278 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004256:	4b24      	ldr	r3, [pc, #144]	; (80042e8 <HAL_RCC_ClockConfig+0x1c0>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f023 0207 	bic.w	r2, r3, #7
 800425e:	4922      	ldr	r1, [pc, #136]	; (80042e8 <HAL_RCC_ClockConfig+0x1c0>)
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	4313      	orrs	r3, r2
 8004264:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004266:	4b20      	ldr	r3, [pc, #128]	; (80042e8 <HAL_RCC_ClockConfig+0x1c0>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0307 	and.w	r3, r3, #7
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	429a      	cmp	r2, r3
 8004272:	d001      	beq.n	8004278 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e032      	b.n	80042de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0304 	and.w	r3, r3, #4
 8004280:	2b00      	cmp	r3, #0
 8004282:	d008      	beq.n	8004296 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004284:	4b19      	ldr	r3, [pc, #100]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	4916      	ldr	r1, [pc, #88]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 8004292:	4313      	orrs	r3, r2
 8004294:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0308 	and.w	r3, r3, #8
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d009      	beq.n	80042b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80042a2:	4b12      	ldr	r3, [pc, #72]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	00db      	lsls	r3, r3, #3
 80042b0:	490e      	ldr	r1, [pc, #56]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80042b6:	f000 f821 	bl	80042fc <HAL_RCC_GetSysClockFreq>
 80042ba:	4602      	mov	r2, r0
 80042bc:	4b0b      	ldr	r3, [pc, #44]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	091b      	lsrs	r3, r3, #4
 80042c2:	f003 030f 	and.w	r3, r3, #15
 80042c6:	490a      	ldr	r1, [pc, #40]	; (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 80042c8:	5ccb      	ldrb	r3, [r1, r3]
 80042ca:	fa22 f303 	lsr.w	r3, r2, r3
 80042ce:	4a09      	ldr	r2, [pc, #36]	; (80042f4 <HAL_RCC_ClockConfig+0x1cc>)
 80042d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80042d2:	4b09      	ldr	r3, [pc, #36]	; (80042f8 <HAL_RCC_ClockConfig+0x1d0>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7fd ff82 	bl	80021e0 <HAL_InitTick>

  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	40022000 	.word	0x40022000
 80042ec:	40021000 	.word	0x40021000
 80042f0:	08009df4 	.word	0x08009df4
 80042f4:	20000004 	.word	0x20000004
 80042f8:	20000008 	.word	0x20000008

080042fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042fc:	b490      	push	{r4, r7}
 80042fe:	b08a      	sub	sp, #40	; 0x28
 8004300:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004302:	4b2a      	ldr	r3, [pc, #168]	; (80043ac <HAL_RCC_GetSysClockFreq+0xb0>)
 8004304:	1d3c      	adds	r4, r7, #4
 8004306:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004308:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800430c:	f240 2301 	movw	r3, #513	; 0x201
 8004310:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004312:	2300      	movs	r3, #0
 8004314:	61fb      	str	r3, [r7, #28]
 8004316:	2300      	movs	r3, #0
 8004318:	61bb      	str	r3, [r7, #24]
 800431a:	2300      	movs	r3, #0
 800431c:	627b      	str	r3, [r7, #36]	; 0x24
 800431e:	2300      	movs	r3, #0
 8004320:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004322:	2300      	movs	r3, #0
 8004324:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004326:	4b22      	ldr	r3, [pc, #136]	; (80043b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	f003 030c 	and.w	r3, r3, #12
 8004332:	2b04      	cmp	r3, #4
 8004334:	d002      	beq.n	800433c <HAL_RCC_GetSysClockFreq+0x40>
 8004336:	2b08      	cmp	r3, #8
 8004338:	d003      	beq.n	8004342 <HAL_RCC_GetSysClockFreq+0x46>
 800433a:	e02d      	b.n	8004398 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800433c:	4b1d      	ldr	r3, [pc, #116]	; (80043b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800433e:	623b      	str	r3, [r7, #32]
      break;
 8004340:	e02d      	b.n	800439e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	0c9b      	lsrs	r3, r3, #18
 8004346:	f003 030f 	and.w	r3, r3, #15
 800434a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800434e:	4413      	add	r3, r2
 8004350:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004354:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d013      	beq.n	8004388 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004360:	4b13      	ldr	r3, [pc, #76]	; (80043b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	0c5b      	lsrs	r3, r3, #17
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800436e:	4413      	add	r3, r2
 8004370:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004374:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	4a0e      	ldr	r2, [pc, #56]	; (80043b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800437a:	fb02 f203 	mul.w	r2, r2, r3
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	fbb2 f3f3 	udiv	r3, r2, r3
 8004384:	627b      	str	r3, [r7, #36]	; 0x24
 8004386:	e004      	b.n	8004392 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	4a0b      	ldr	r2, [pc, #44]	; (80043b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800438c:	fb02 f303 	mul.w	r3, r2, r3
 8004390:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004394:	623b      	str	r3, [r7, #32]
      break;
 8004396:	e002      	b.n	800439e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004398:	4b06      	ldr	r3, [pc, #24]	; (80043b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800439a:	623b      	str	r3, [r7, #32]
      break;
 800439c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800439e:	6a3b      	ldr	r3, [r7, #32]
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3728      	adds	r7, #40	; 0x28
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bc90      	pop	{r4, r7}
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	08009de4 	.word	0x08009de4
 80043b0:	40021000 	.word	0x40021000
 80043b4:	007a1200 	.word	0x007a1200
 80043b8:	003d0900 	.word	0x003d0900

080043bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043bc:	b480      	push	{r7}
 80043be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043c0:	4b02      	ldr	r3, [pc, #8]	; (80043cc <HAL_RCC_GetHCLKFreq+0x10>)
 80043c2:	681b      	ldr	r3, [r3, #0]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bc80      	pop	{r7}
 80043ca:	4770      	bx	lr
 80043cc:	20000004 	.word	0x20000004

080043d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80043d4:	f7ff fff2 	bl	80043bc <HAL_RCC_GetHCLKFreq>
 80043d8:	4602      	mov	r2, r0
 80043da:	4b05      	ldr	r3, [pc, #20]	; (80043f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	0a1b      	lsrs	r3, r3, #8
 80043e0:	f003 0307 	and.w	r3, r3, #7
 80043e4:	4903      	ldr	r1, [pc, #12]	; (80043f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043e6:	5ccb      	ldrb	r3, [r1, r3]
 80043e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	40021000 	.word	0x40021000
 80043f4:	08009e04 	.word	0x08009e04

080043f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80043fc:	f7ff ffde 	bl	80043bc <HAL_RCC_GetHCLKFreq>
 8004400:	4602      	mov	r2, r0
 8004402:	4b05      	ldr	r3, [pc, #20]	; (8004418 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	0adb      	lsrs	r3, r3, #11
 8004408:	f003 0307 	and.w	r3, r3, #7
 800440c:	4903      	ldr	r1, [pc, #12]	; (800441c <HAL_RCC_GetPCLK2Freq+0x24>)
 800440e:	5ccb      	ldrb	r3, [r1, r3]
 8004410:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004414:	4618      	mov	r0, r3
 8004416:	bd80      	pop	{r7, pc}
 8004418:	40021000 	.word	0x40021000
 800441c:	08009e04 	.word	0x08009e04

08004420 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004420:	b480      	push	{r7}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004428:	4b0a      	ldr	r3, [pc, #40]	; (8004454 <RCC_Delay+0x34>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a0a      	ldr	r2, [pc, #40]	; (8004458 <RCC_Delay+0x38>)
 800442e:	fba2 2303 	umull	r2, r3, r2, r3
 8004432:	0a5b      	lsrs	r3, r3, #9
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	fb02 f303 	mul.w	r3, r2, r3
 800443a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800443c:	bf00      	nop
  }
  while (Delay --);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	1e5a      	subs	r2, r3, #1
 8004442:	60fa      	str	r2, [r7, #12]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1f9      	bne.n	800443c <RCC_Delay+0x1c>
}
 8004448:	bf00      	nop
 800444a:	bf00      	nop
 800444c:	3714      	adds	r7, #20
 800444e:	46bd      	mov	sp, r7
 8004450:	bc80      	pop	{r7}
 8004452:	4770      	bx	lr
 8004454:	20000004 	.word	0x20000004
 8004458:	10624dd3 	.word	0x10624dd3

0800445c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b086      	sub	sp, #24
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004464:	2300      	movs	r3, #0
 8004466:	613b      	str	r3, [r7, #16]
 8004468:	2300      	movs	r3, #0
 800446a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0301 	and.w	r3, r3, #1
 8004474:	2b00      	cmp	r3, #0
 8004476:	d07d      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004478:	2300      	movs	r3, #0
 800447a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800447c:	4b4f      	ldr	r3, [pc, #316]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800447e:	69db      	ldr	r3, [r3, #28]
 8004480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d10d      	bne.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004488:	4b4c      	ldr	r3, [pc, #304]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800448a:	69db      	ldr	r3, [r3, #28]
 800448c:	4a4b      	ldr	r2, [pc, #300]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800448e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004492:	61d3      	str	r3, [r2, #28]
 8004494:	4b49      	ldr	r3, [pc, #292]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004496:	69db      	ldr	r3, [r3, #28]
 8004498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800449c:	60bb      	str	r3, [r7, #8]
 800449e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044a0:	2301      	movs	r3, #1
 80044a2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044a4:	4b46      	ldr	r3, [pc, #280]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d118      	bne.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044b0:	4b43      	ldr	r3, [pc, #268]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a42      	ldr	r2, [pc, #264]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044bc:	f7fd fed2 	bl	8002264 <HAL_GetTick>
 80044c0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044c2:	e008      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044c4:	f7fd fece 	bl	8002264 <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	2b64      	cmp	r3, #100	; 0x64
 80044d0:	d901      	bls.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e06d      	b.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044d6:	4b3a      	ldr	r3, [pc, #232]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d0f0      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044e2:	4b36      	ldr	r3, [pc, #216]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044e4:	6a1b      	ldr	r3, [r3, #32]
 80044e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044ea:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d02e      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d027      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004500:	4b2e      	ldr	r3, [pc, #184]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004502:	6a1b      	ldr	r3, [r3, #32]
 8004504:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004508:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800450a:	4b2e      	ldr	r3, [pc, #184]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800450c:	2201      	movs	r2, #1
 800450e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004510:	4b2c      	ldr	r3, [pc, #176]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004512:	2200      	movs	r2, #0
 8004514:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004516:	4a29      	ldr	r2, [pc, #164]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	2b00      	cmp	r3, #0
 8004524:	d014      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004526:	f7fd fe9d 	bl	8002264 <HAL_GetTick>
 800452a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800452c:	e00a      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800452e:	f7fd fe99 	bl	8002264 <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	f241 3288 	movw	r2, #5000	; 0x1388
 800453c:	4293      	cmp	r3, r2
 800453e:	d901      	bls.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e036      	b.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004544:	4b1d      	ldr	r3, [pc, #116]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004546:	6a1b      	ldr	r3, [r3, #32]
 8004548:	f003 0302 	and.w	r3, r3, #2
 800454c:	2b00      	cmp	r3, #0
 800454e:	d0ee      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004550:	4b1a      	ldr	r3, [pc, #104]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	4917      	ldr	r1, [pc, #92]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800455e:	4313      	orrs	r3, r2
 8004560:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004562:	7dfb      	ldrb	r3, [r7, #23]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d105      	bne.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004568:	4b14      	ldr	r3, [pc, #80]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800456a:	69db      	ldr	r3, [r3, #28]
 800456c:	4a13      	ldr	r2, [pc, #76]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800456e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004572:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b00      	cmp	r3, #0
 800457e:	d008      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004580:	4b0e      	ldr	r3, [pc, #56]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	490b      	ldr	r1, [pc, #44]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800458e:	4313      	orrs	r3, r2
 8004590:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0310 	and.w	r3, r3, #16
 800459a:	2b00      	cmp	r3, #0
 800459c:	d008      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800459e:	4b07      	ldr	r3, [pc, #28]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	4904      	ldr	r1, [pc, #16]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3718      	adds	r7, #24
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	40021000 	.word	0x40021000
 80045c0:	40007000 	.word	0x40007000
 80045c4:	42420440 	.word	0x42420440

080045c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d101      	bne.n	80045da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e041      	b.n	800465e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d106      	bne.n	80045f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f7fd fc2c 	bl	8001e4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2202      	movs	r2, #2
 80045f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	3304      	adds	r3, #4
 8004604:	4619      	mov	r1, r3
 8004606:	4610      	mov	r0, r2
 8004608:	f000 fa9e 	bl	8004b48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3708      	adds	r7, #8
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
	...

08004668 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004676:	b2db      	uxtb	r3, r3
 8004678:	2b01      	cmp	r3, #1
 800467a:	d001      	beq.n	8004680 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e03a      	b.n	80046f6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2202      	movs	r2, #2
 8004684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68da      	ldr	r2, [r3, #12]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f042 0201 	orr.w	r2, r2, #1
 8004696:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a18      	ldr	r2, [pc, #96]	; (8004700 <HAL_TIM_Base_Start_IT+0x98>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d00e      	beq.n	80046c0 <HAL_TIM_Base_Start_IT+0x58>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046aa:	d009      	beq.n	80046c0 <HAL_TIM_Base_Start_IT+0x58>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a14      	ldr	r2, [pc, #80]	; (8004704 <HAL_TIM_Base_Start_IT+0x9c>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d004      	beq.n	80046c0 <HAL_TIM_Base_Start_IT+0x58>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a13      	ldr	r2, [pc, #76]	; (8004708 <HAL_TIM_Base_Start_IT+0xa0>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d111      	bne.n	80046e4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f003 0307 	and.w	r3, r3, #7
 80046ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2b06      	cmp	r3, #6
 80046d0:	d010      	beq.n	80046f4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f042 0201 	orr.w	r2, r2, #1
 80046e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046e2:	e007      	b.n	80046f4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f042 0201 	orr.w	r2, r2, #1
 80046f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3714      	adds	r7, #20
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bc80      	pop	{r7}
 80046fe:	4770      	bx	lr
 8004700:	40012c00 	.word	0x40012c00
 8004704:	40000400 	.word	0x40000400
 8004708:	40000800 	.word	0x40000800

0800470c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68da      	ldr	r2, [r3, #12]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f022 0201 	bic.w	r2, r2, #1
 8004722:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6a1a      	ldr	r2, [r3, #32]
 800472a:	f241 1311 	movw	r3, #4369	; 0x1111
 800472e:	4013      	ands	r3, r2
 8004730:	2b00      	cmp	r3, #0
 8004732:	d10f      	bne.n	8004754 <HAL_TIM_Base_Stop_IT+0x48>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	6a1a      	ldr	r2, [r3, #32]
 800473a:	f240 4344 	movw	r3, #1092	; 0x444
 800473e:	4013      	ands	r3, r2
 8004740:	2b00      	cmp	r3, #0
 8004742:	d107      	bne.n	8004754 <HAL_TIM_Base_Stop_IT+0x48>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f022 0201 	bic.w	r2, r2, #1
 8004752:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	370c      	adds	r7, #12
 8004762:	46bd      	mov	sp, r7
 8004764:	bc80      	pop	{r7}
 8004766:	4770      	bx	lr

08004768 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	f003 0302 	and.w	r3, r3, #2
 800477a:	2b02      	cmp	r3, #2
 800477c:	d122      	bne.n	80047c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	f003 0302 	and.w	r3, r3, #2
 8004788:	2b02      	cmp	r3, #2
 800478a:	d11b      	bne.n	80047c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f06f 0202 	mvn.w	r2, #2
 8004794:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	f003 0303 	and.w	r3, r3, #3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d003      	beq.n	80047b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 f9b1 	bl	8004b12 <HAL_TIM_IC_CaptureCallback>
 80047b0:	e005      	b.n	80047be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 f9a4 	bl	8004b00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f000 f9b3 	bl	8004b24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	f003 0304 	and.w	r3, r3, #4
 80047ce:	2b04      	cmp	r3, #4
 80047d0:	d122      	bne.n	8004818 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	f003 0304 	and.w	r3, r3, #4
 80047dc:	2b04      	cmp	r3, #4
 80047de:	d11b      	bne.n	8004818 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f06f 0204 	mvn.w	r2, #4
 80047e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2202      	movs	r2, #2
 80047ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d003      	beq.n	8004806 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 f987 	bl	8004b12 <HAL_TIM_IC_CaptureCallback>
 8004804:	e005      	b.n	8004812 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 f97a 	bl	8004b00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 f989 	bl	8004b24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	f003 0308 	and.w	r3, r3, #8
 8004822:	2b08      	cmp	r3, #8
 8004824:	d122      	bne.n	800486c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	f003 0308 	and.w	r3, r3, #8
 8004830:	2b08      	cmp	r3, #8
 8004832:	d11b      	bne.n	800486c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f06f 0208 	mvn.w	r2, #8
 800483c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2204      	movs	r2, #4
 8004842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	69db      	ldr	r3, [r3, #28]
 800484a:	f003 0303 	and.w	r3, r3, #3
 800484e:	2b00      	cmp	r3, #0
 8004850:	d003      	beq.n	800485a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 f95d 	bl	8004b12 <HAL_TIM_IC_CaptureCallback>
 8004858:	e005      	b.n	8004866 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 f950 	bl	8004b00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f000 f95f 	bl	8004b24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	f003 0310 	and.w	r3, r3, #16
 8004876:	2b10      	cmp	r3, #16
 8004878:	d122      	bne.n	80048c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	f003 0310 	and.w	r3, r3, #16
 8004884:	2b10      	cmp	r3, #16
 8004886:	d11b      	bne.n	80048c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f06f 0210 	mvn.w	r2, #16
 8004890:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2208      	movs	r2, #8
 8004896:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	69db      	ldr	r3, [r3, #28]
 800489e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d003      	beq.n	80048ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 f933 	bl	8004b12 <HAL_TIM_IC_CaptureCallback>
 80048ac:	e005      	b.n	80048ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f926 	bl	8004b00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 f935 	bl	8004b24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d10e      	bne.n	80048ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	f003 0301 	and.w	r3, r3, #1
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d107      	bne.n	80048ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f06f 0201 	mvn.w	r2, #1
 80048e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f7fc fede 	bl	80016a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048f6:	2b80      	cmp	r3, #128	; 0x80
 80048f8:	d10e      	bne.n	8004918 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004904:	2b80      	cmp	r3, #128	; 0x80
 8004906:	d107      	bne.n	8004918 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 fa77 	bl	8004e06 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004922:	2b40      	cmp	r3, #64	; 0x40
 8004924:	d10e      	bne.n	8004944 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004930:	2b40      	cmp	r3, #64	; 0x40
 8004932:	d107      	bne.n	8004944 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800493c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 f8f9 	bl	8004b36 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	f003 0320 	and.w	r3, r3, #32
 800494e:	2b20      	cmp	r3, #32
 8004950:	d10e      	bne.n	8004970 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	f003 0320 	and.w	r3, r3, #32
 800495c:	2b20      	cmp	r3, #32
 800495e:	d107      	bne.n	8004970 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f06f 0220 	mvn.w	r2, #32
 8004968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 fa42 	bl	8004df4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004970:	bf00      	nop
 8004972:	3708      	adds	r7, #8
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004988:	2b01      	cmp	r3, #1
 800498a:	d101      	bne.n	8004990 <HAL_TIM_ConfigClockSource+0x18>
 800498c:	2302      	movs	r3, #2
 800498e:	e0b3      	b.n	8004af8 <HAL_TIM_ConfigClockSource+0x180>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2202      	movs	r2, #2
 800499c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80049ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049b6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049c8:	d03e      	beq.n	8004a48 <HAL_TIM_ConfigClockSource+0xd0>
 80049ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049ce:	f200 8087 	bhi.w	8004ae0 <HAL_TIM_ConfigClockSource+0x168>
 80049d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049d6:	f000 8085 	beq.w	8004ae4 <HAL_TIM_ConfigClockSource+0x16c>
 80049da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049de:	d87f      	bhi.n	8004ae0 <HAL_TIM_ConfigClockSource+0x168>
 80049e0:	2b70      	cmp	r3, #112	; 0x70
 80049e2:	d01a      	beq.n	8004a1a <HAL_TIM_ConfigClockSource+0xa2>
 80049e4:	2b70      	cmp	r3, #112	; 0x70
 80049e6:	d87b      	bhi.n	8004ae0 <HAL_TIM_ConfigClockSource+0x168>
 80049e8:	2b60      	cmp	r3, #96	; 0x60
 80049ea:	d050      	beq.n	8004a8e <HAL_TIM_ConfigClockSource+0x116>
 80049ec:	2b60      	cmp	r3, #96	; 0x60
 80049ee:	d877      	bhi.n	8004ae0 <HAL_TIM_ConfigClockSource+0x168>
 80049f0:	2b50      	cmp	r3, #80	; 0x50
 80049f2:	d03c      	beq.n	8004a6e <HAL_TIM_ConfigClockSource+0xf6>
 80049f4:	2b50      	cmp	r3, #80	; 0x50
 80049f6:	d873      	bhi.n	8004ae0 <HAL_TIM_ConfigClockSource+0x168>
 80049f8:	2b40      	cmp	r3, #64	; 0x40
 80049fa:	d058      	beq.n	8004aae <HAL_TIM_ConfigClockSource+0x136>
 80049fc:	2b40      	cmp	r3, #64	; 0x40
 80049fe:	d86f      	bhi.n	8004ae0 <HAL_TIM_ConfigClockSource+0x168>
 8004a00:	2b30      	cmp	r3, #48	; 0x30
 8004a02:	d064      	beq.n	8004ace <HAL_TIM_ConfigClockSource+0x156>
 8004a04:	2b30      	cmp	r3, #48	; 0x30
 8004a06:	d86b      	bhi.n	8004ae0 <HAL_TIM_ConfigClockSource+0x168>
 8004a08:	2b20      	cmp	r3, #32
 8004a0a:	d060      	beq.n	8004ace <HAL_TIM_ConfigClockSource+0x156>
 8004a0c:	2b20      	cmp	r3, #32
 8004a0e:	d867      	bhi.n	8004ae0 <HAL_TIM_ConfigClockSource+0x168>
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d05c      	beq.n	8004ace <HAL_TIM_ConfigClockSource+0x156>
 8004a14:	2b10      	cmp	r3, #16
 8004a16:	d05a      	beq.n	8004ace <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004a18:	e062      	b.n	8004ae0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6818      	ldr	r0, [r3, #0]
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	6899      	ldr	r1, [r3, #8]
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	685a      	ldr	r2, [r3, #4]
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	f000 f966 	bl	8004cfa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a3c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	609a      	str	r2, [r3, #8]
      break;
 8004a46:	e04e      	b.n	8004ae6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6818      	ldr	r0, [r3, #0]
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	6899      	ldr	r1, [r3, #8]
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	685a      	ldr	r2, [r3, #4]
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	f000 f94f 	bl	8004cfa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	689a      	ldr	r2, [r3, #8]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a6a:	609a      	str	r2, [r3, #8]
      break;
 8004a6c:	e03b      	b.n	8004ae6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6818      	ldr	r0, [r3, #0]
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	6859      	ldr	r1, [r3, #4]
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	f000 f8c6 	bl	8004c0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2150      	movs	r1, #80	; 0x50
 8004a86:	4618      	mov	r0, r3
 8004a88:	f000 f91d 	bl	8004cc6 <TIM_ITRx_SetConfig>
      break;
 8004a8c:	e02b      	b.n	8004ae6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6818      	ldr	r0, [r3, #0]
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	6859      	ldr	r1, [r3, #4]
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	f000 f8e4 	bl	8004c68 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2160      	movs	r1, #96	; 0x60
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f000 f90d 	bl	8004cc6 <TIM_ITRx_SetConfig>
      break;
 8004aac:	e01b      	b.n	8004ae6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6818      	ldr	r0, [r3, #0]
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	6859      	ldr	r1, [r3, #4]
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	461a      	mov	r2, r3
 8004abc:	f000 f8a6 	bl	8004c0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2140      	movs	r1, #64	; 0x40
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f000 f8fd 	bl	8004cc6 <TIM_ITRx_SetConfig>
      break;
 8004acc:	e00b      	b.n	8004ae6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	4610      	mov	r0, r2
 8004ada:	f000 f8f4 	bl	8004cc6 <TIM_ITRx_SetConfig>
        break;
 8004ade:	e002      	b.n	8004ae6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004ae0:	bf00      	nop
 8004ae2:	e000      	b.n	8004ae6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004ae4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3710      	adds	r7, #16
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bc80      	pop	{r7}
 8004b10:	4770      	bx	lr

08004b12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b12:	b480      	push	{r7}
 8004b14:	b083      	sub	sp, #12
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b1a:	bf00      	nop
 8004b1c:	370c      	adds	r7, #12
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bc80      	pop	{r7}
 8004b22:	4770      	bx	lr

08004b24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b2c:	bf00      	nop
 8004b2e:	370c      	adds	r7, #12
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bc80      	pop	{r7}
 8004b34:	4770      	bx	lr

08004b36 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b36:	b480      	push	{r7}
 8004b38:	b083      	sub	sp, #12
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b3e:	bf00      	nop
 8004b40:	370c      	adds	r7, #12
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bc80      	pop	{r7}
 8004b46:	4770      	bx	lr

08004b48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a29      	ldr	r2, [pc, #164]	; (8004c00 <TIM_Base_SetConfig+0xb8>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d00b      	beq.n	8004b78 <TIM_Base_SetConfig+0x30>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b66:	d007      	beq.n	8004b78 <TIM_Base_SetConfig+0x30>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a26      	ldr	r2, [pc, #152]	; (8004c04 <TIM_Base_SetConfig+0xbc>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d003      	beq.n	8004b78 <TIM_Base_SetConfig+0x30>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a25      	ldr	r2, [pc, #148]	; (8004c08 <TIM_Base_SetConfig+0xc0>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d108      	bne.n	8004b8a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a1c      	ldr	r2, [pc, #112]	; (8004c00 <TIM_Base_SetConfig+0xb8>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d00b      	beq.n	8004baa <TIM_Base_SetConfig+0x62>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b98:	d007      	beq.n	8004baa <TIM_Base_SetConfig+0x62>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a19      	ldr	r2, [pc, #100]	; (8004c04 <TIM_Base_SetConfig+0xbc>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d003      	beq.n	8004baa <TIM_Base_SetConfig+0x62>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a18      	ldr	r2, [pc, #96]	; (8004c08 <TIM_Base_SetConfig+0xc0>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d108      	bne.n	8004bbc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	689a      	ldr	r2, [r3, #8]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a07      	ldr	r2, [pc, #28]	; (8004c00 <TIM_Base_SetConfig+0xb8>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d103      	bne.n	8004bf0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	691a      	ldr	r2, [r3, #16]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	615a      	str	r2, [r3, #20]
}
 8004bf6:	bf00      	nop
 8004bf8:	3714      	adds	r7, #20
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bc80      	pop	{r7}
 8004bfe:	4770      	bx	lr
 8004c00:	40012c00 	.word	0x40012c00
 8004c04:	40000400 	.word	0x40000400
 8004c08:	40000800 	.word	0x40000800

08004c0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b087      	sub	sp, #28
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6a1b      	ldr	r3, [r3, #32]
 8004c1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6a1b      	ldr	r3, [r3, #32]
 8004c22:	f023 0201 	bic.w	r2, r3, #1
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	011b      	lsls	r3, r3, #4
 8004c3c:	693a      	ldr	r2, [r7, #16]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	f023 030a 	bic.w	r3, r3, #10
 8004c48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c4a:	697a      	ldr	r2, [r7, #20]
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	697a      	ldr	r2, [r7, #20]
 8004c5c:	621a      	str	r2, [r3, #32]
}
 8004c5e:	bf00      	nop
 8004c60:	371c      	adds	r7, #28
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bc80      	pop	{r7}
 8004c66:	4770      	bx	lr

08004c68 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b087      	sub	sp, #28
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6a1b      	ldr	r3, [r3, #32]
 8004c78:	f023 0210 	bic.w	r2, r3, #16
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	699b      	ldr	r3, [r3, #24]
 8004c84:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6a1b      	ldr	r3, [r3, #32]
 8004c8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c92:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	031b      	lsls	r3, r3, #12
 8004c98:	697a      	ldr	r2, [r7, #20]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ca4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	011b      	lsls	r3, r3, #4
 8004caa:	693a      	ldr	r2, [r7, #16]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	697a      	ldr	r2, [r7, #20]
 8004cb4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	621a      	str	r2, [r3, #32]
}
 8004cbc:	bf00      	nop
 8004cbe:	371c      	adds	r7, #28
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bc80      	pop	{r7}
 8004cc4:	4770      	bx	lr

08004cc6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004cc6:	b480      	push	{r7}
 8004cc8:	b085      	sub	sp, #20
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
 8004cce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cdc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004cde:	683a      	ldr	r2, [r7, #0]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	f043 0307 	orr.w	r3, r3, #7
 8004ce8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	609a      	str	r2, [r3, #8]
}
 8004cf0:	bf00      	nop
 8004cf2:	3714      	adds	r7, #20
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bc80      	pop	{r7}
 8004cf8:	4770      	bx	lr

08004cfa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004cfa:	b480      	push	{r7}
 8004cfc:	b087      	sub	sp, #28
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	60f8      	str	r0, [r7, #12]
 8004d02:	60b9      	str	r1, [r7, #8]
 8004d04:	607a      	str	r2, [r7, #4]
 8004d06:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d14:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	021a      	lsls	r2, r3, #8
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	431a      	orrs	r2, r3
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	697a      	ldr	r2, [r7, #20]
 8004d2c:	609a      	str	r2, [r3, #8]
}
 8004d2e:	bf00      	nop
 8004d30:	371c      	adds	r7, #28
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bc80      	pop	{r7}
 8004d36:	4770      	bx	lr

08004d38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b085      	sub	sp, #20
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d101      	bne.n	8004d50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	e046      	b.n	8004dde <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2202      	movs	r2, #2
 8004d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a16      	ldr	r2, [pc, #88]	; (8004de8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d00e      	beq.n	8004db2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d9c:	d009      	beq.n	8004db2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a12      	ldr	r2, [pc, #72]	; (8004dec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d004      	beq.n	8004db2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a10      	ldr	r2, [pc, #64]	; (8004df0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d10c      	bne.n	8004dcc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004db8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	68ba      	ldr	r2, [r7, #8]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68ba      	ldr	r2, [r7, #8]
 8004dca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3714      	adds	r7, #20
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bc80      	pop	{r7}
 8004de6:	4770      	bx	lr
 8004de8:	40012c00 	.word	0x40012c00
 8004dec:	40000400 	.word	0x40000400
 8004df0:	40000800 	.word	0x40000800

08004df4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bc80      	pop	{r7}
 8004e04:	4770      	bx	lr

08004e06 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e06:	b480      	push	{r7}
 8004e08:	b083      	sub	sp, #12
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e0e:	bf00      	nop
 8004e10:	370c      	adds	r7, #12
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bc80      	pop	{r7}
 8004e16:	4770      	bx	lr

08004e18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b082      	sub	sp, #8
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d101      	bne.n	8004e2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e03f      	b.n	8004eaa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d106      	bne.n	8004e44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f7fd f844 	bl	8001ecc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2224      	movs	r2, #36	; 0x24
 8004e48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68da      	ldr	r2, [r3, #12]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 f829 	bl	8004eb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	691a      	ldr	r2, [r3, #16]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	695a      	ldr	r2, [r3, #20]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68da      	ldr	r2, [r3, #12]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2220      	movs	r2, #32
 8004e9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2220      	movs	r2, #32
 8004ea4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3708      	adds	r7, #8
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
	...

08004eb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	68da      	ldr	r2, [r3, #12]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	430a      	orrs	r2, r1
 8004ed0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	689a      	ldr	r2, [r3, #8]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	431a      	orrs	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	695b      	ldr	r3, [r3, #20]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004eee:	f023 030c 	bic.w	r3, r3, #12
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	6812      	ldr	r2, [r2, #0]
 8004ef6:	68b9      	ldr	r1, [r7, #8]
 8004ef8:	430b      	orrs	r3, r1
 8004efa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	695b      	ldr	r3, [r3, #20]
 8004f02:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	699a      	ldr	r2, [r3, #24]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	430a      	orrs	r2, r1
 8004f10:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a2c      	ldr	r2, [pc, #176]	; (8004fc8 <UART_SetConfig+0x114>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d103      	bne.n	8004f24 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004f1c:	f7ff fa6c 	bl	80043f8 <HAL_RCC_GetPCLK2Freq>
 8004f20:	60f8      	str	r0, [r7, #12]
 8004f22:	e002      	b.n	8004f2a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004f24:	f7ff fa54 	bl	80043d0 <HAL_RCC_GetPCLK1Freq>
 8004f28:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	4413      	add	r3, r2
 8004f32:	009a      	lsls	r2, r3, #2
 8004f34:	441a      	add	r2, r3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f40:	4a22      	ldr	r2, [pc, #136]	; (8004fcc <UART_SetConfig+0x118>)
 8004f42:	fba2 2303 	umull	r2, r3, r2, r3
 8004f46:	095b      	lsrs	r3, r3, #5
 8004f48:	0119      	lsls	r1, r3, #4
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	4413      	add	r3, r2
 8004f52:	009a      	lsls	r2, r3, #2
 8004f54:	441a      	add	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f60:	4b1a      	ldr	r3, [pc, #104]	; (8004fcc <UART_SetConfig+0x118>)
 8004f62:	fba3 0302 	umull	r0, r3, r3, r2
 8004f66:	095b      	lsrs	r3, r3, #5
 8004f68:	2064      	movs	r0, #100	; 0x64
 8004f6a:	fb00 f303 	mul.w	r3, r0, r3
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	011b      	lsls	r3, r3, #4
 8004f72:	3332      	adds	r3, #50	; 0x32
 8004f74:	4a15      	ldr	r2, [pc, #84]	; (8004fcc <UART_SetConfig+0x118>)
 8004f76:	fba2 2303 	umull	r2, r3, r2, r3
 8004f7a:	095b      	lsrs	r3, r3, #5
 8004f7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f80:	4419      	add	r1, r3
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	4613      	mov	r3, r2
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	4413      	add	r3, r2
 8004f8a:	009a      	lsls	r2, r3, #2
 8004f8c:	441a      	add	r2, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f98:	4b0c      	ldr	r3, [pc, #48]	; (8004fcc <UART_SetConfig+0x118>)
 8004f9a:	fba3 0302 	umull	r0, r3, r3, r2
 8004f9e:	095b      	lsrs	r3, r3, #5
 8004fa0:	2064      	movs	r0, #100	; 0x64
 8004fa2:	fb00 f303 	mul.w	r3, r0, r3
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	011b      	lsls	r3, r3, #4
 8004faa:	3332      	adds	r3, #50	; 0x32
 8004fac:	4a07      	ldr	r2, [pc, #28]	; (8004fcc <UART_SetConfig+0x118>)
 8004fae:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb2:	095b      	lsrs	r3, r3, #5
 8004fb4:	f003 020f 	and.w	r2, r3, #15
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	440a      	add	r2, r1
 8004fbe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004fc0:	bf00      	nop
 8004fc2:	3710      	adds	r7, #16
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	40013800 	.word	0x40013800
 8004fcc:	51eb851f 	.word	0x51eb851f

08004fd0 <FIRFilter_Init>:
};




void FIRFilter_Init(FIRFilter *fir) {
 8004fd0:	b480      	push	{r7}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]

	/* Clear filter buffer */
	for (uint8_t n = 0; n < FIR_FILTER_LENGTH; n++) {
 8004fd8:	2300      	movs	r3, #0
 8004fda:	73fb      	strb	r3, [r7, #15]
 8004fdc:	e008      	b.n	8004ff0 <FIRFilter_Init+0x20>

		fir->buf[n] = 0.0f;
 8004fde:	7bfa      	ldrb	r2, [r7, #15]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f04f 0100 	mov.w	r1, #0
 8004fe6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (uint8_t n = 0; n < FIR_FILTER_LENGTH; n++) {
 8004fea:	7bfb      	ldrb	r3, [r7, #15]
 8004fec:	3301      	adds	r3, #1
 8004fee:	73fb      	strb	r3, [r7, #15]
 8004ff0:	7bfb      	ldrb	r3, [r7, #15]
 8004ff2:	2b1f      	cmp	r3, #31
 8004ff4:	d9f3      	bls.n	8004fde <FIRFilter_Init+0xe>

	}

	/* Reset buffer index */
	fir->bufIndex = 0;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	/* Clear filter output */
	fir->out = 0.0f;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f04f 0200 	mov.w	r2, #0
 8005004:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

}
 8005008:	bf00      	nop
 800500a:	3714      	adds	r7, #20
 800500c:	46bd      	mov	sp, r7
 800500e:	bc80      	pop	{r7}
 8005010:	4770      	bx	lr
	...

08005014 <FIRFilter_Update>:

float FIRFilter_Update(FIRFilter *fir, float inp) {
 8005014:	b590      	push	{r4, r7, lr}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]

	/* Store latest sample in buffer */
	fir->buf[fir->bufIndex] = inp;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005024:	4619      	mov	r1, r3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	683a      	ldr	r2, [r7, #0]
 800502a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	/* Increment buffer index and wrap around if necessary */
	fir->bufIndex++;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005034:	3301      	adds	r3, #1
 8005036:	b2da      	uxtb	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	if (fir->bufIndex == FIR_FILTER_LENGTH) {
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005044:	2b20      	cmp	r3, #32
 8005046:	d103      	bne.n	8005050 <FIRFilter_Update+0x3c>

		fir->bufIndex = 0;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	}

	/* Compute new output sample (via convolution) */
	fir->out = 0.0f;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f04f 0200 	mov.w	r2, #0
 8005056:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

	uint8_t sumIndex = fir->bufIndex;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005060:	73fb      	strb	r3, [r7, #15]

	for (uint8_t n = 0; n < FIR_FILTER_LENGTH; n++) {
 8005062:	2300      	movs	r3, #0
 8005064:	73bb      	strb	r3, [r7, #14]
 8005066:	e023      	b.n	80050b0 <FIRFilter_Update+0x9c>

		/* Decrement index and wrap if necessary */
		if (sumIndex > 0) {
 8005068:	7bfb      	ldrb	r3, [r7, #15]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d003      	beq.n	8005076 <FIRFilter_Update+0x62>

			sumIndex--;
 800506e:	7bfb      	ldrb	r3, [r7, #15]
 8005070:	3b01      	subs	r3, #1
 8005072:	73fb      	strb	r3, [r7, #15]
 8005074:	e001      	b.n	800507a <FIRFilter_Update+0x66>

		} else {

			sumIndex = FIR_FILTER_LENGTH - 1;
 8005076:	231f      	movs	r3, #31
 8005078:	73fb      	strb	r3, [r7, #15]

		}

		/* Multiply impulse response with shifted input sample and add to output */
		fir->out += FIR_IMPULSE_RESPONSE[n] * fir->buf[sumIndex];
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8005080:	7bbb      	ldrb	r3, [r7, #14]
 8005082:	4a10      	ldr	r2, [pc, #64]	; (80050c4 <FIRFilter_Update+0xb0>)
 8005084:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005088:	7bfa      	ldrb	r2, [r7, #15]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005090:	4619      	mov	r1, r3
 8005092:	f7fb fe77 	bl	8000d84 <__aeabi_fmul>
 8005096:	4603      	mov	r3, r0
 8005098:	4619      	mov	r1, r3
 800509a:	4620      	mov	r0, r4
 800509c:	f7fb fd6a 	bl	8000b74 <__addsf3>
 80050a0:	4603      	mov	r3, r0
 80050a2:	461a      	mov	r2, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	for (uint8_t n = 0; n < FIR_FILTER_LENGTH; n++) {
 80050aa:	7bbb      	ldrb	r3, [r7, #14]
 80050ac:	3301      	adds	r3, #1
 80050ae:	73bb      	strb	r3, [r7, #14]
 80050b0:	7bbb      	ldrb	r3, [r7, #14]
 80050b2:	2b1f      	cmp	r3, #31
 80050b4:	d9d8      	bls.n	8005068 <FIRFilter_Update+0x54>

	}

	/* Return filtered output */
	return fir->out;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84

}
 80050bc:	4618      	mov	r0, r3
 80050be:	3714      	adds	r7, #20
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd90      	pop	{r4, r7, pc}
 80050c4:	20000010 	.word	0x20000010

080050c8 <mpu6050_Init>:
#include "mpu6050.h"

RAW_DATA raw;

void mpu6050_Init (MPU6050 *mpu6050)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b086      	sub	sp, #24
 80050cc:	af04      	add	r7, sp, #16
 80050ce:	6078      	str	r0, [r7, #4]
	mpu6050->accel_x = 0;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f04f 0200 	mov.w	r2, #0
 80050d6:	601a      	str	r2, [r3, #0]
	mpu6050->accel_y = 0;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f04f 0200 	mov.w	r2, #0
 80050de:	605a      	str	r2, [r3, #4]
	mpu6050->accel_z = 0;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f04f 0200 	mov.w	r2, #0
 80050e6:	609a      	str	r2, [r3, #8]

	mpu6050->temp = 0;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f04f 0200 	mov.w	r2, #0
 80050ee:	60da      	str	r2, [r3, #12]

	mpu6050->gyro_x = 0;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f04f 0200 	mov.w	r2, #0
 80050f6:	611a      	str	r2, [r3, #16]
	mpu6050->gyro_y = 0;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f04f 0200 	mov.w	r2, #0
 80050fe:	615a      	str	r2, [r3, #20]
	mpu6050->gyro_z = 0;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f04f 0200 	mov.w	r2, #0
 8005106:	619a      	str	r2, [r3, #24]

	HAL_I2C_Mem_Write(&hi2c1, (MPU6050_ADDRESS<<1) | 0, PWRMNGT1_REG, 1, 0x00, 1, 100);
 8005108:	2364      	movs	r3, #100	; 0x64
 800510a:	9302      	str	r3, [sp, #8]
 800510c:	2301      	movs	r3, #1
 800510e:	9301      	str	r3, [sp, #4]
 8005110:	2300      	movs	r3, #0
 8005112:	9300      	str	r3, [sp, #0]
 8005114:	2301      	movs	r3, #1
 8005116:	226b      	movs	r2, #107	; 0x6b
 8005118:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 800511c:	4803      	ldr	r0, [pc, #12]	; (800512c <mpu6050_Init+0x64>)
 800511e:	f7fd fec7 	bl	8002eb0 <HAL_I2C_Mem_Write>
}
 8005122:	bf00      	nop
 8005124:	3708      	adds	r7, #8
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	200008f8 	.word	0x200008f8

08005130 <mpu6050_Get_Accel>:

void mpu6050_Get_Accel(MPU6050 *mpu6050)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b086      	sub	sp, #24
 8005134:	af04      	add	r7, sp, #16
 8005136:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(&MPU6050_I2C_PORT, MPU6050_ADDRESS | 0, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8005138:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800513c:	9302      	str	r3, [sp, #8]
 800513e:	2306      	movs	r3, #6
 8005140:	9301      	str	r3, [sp, #4]
 8005142:	4b2e      	ldr	r3, [pc, #184]	; (80051fc <mpu6050_Get_Accel+0xcc>)
 8005144:	9300      	str	r3, [sp, #0]
 8005146:	2301      	movs	r3, #1
 8005148:	223b      	movs	r2, #59	; 0x3b
 800514a:	21d0      	movs	r1, #208	; 0xd0
 800514c:	482c      	ldr	r0, [pc, #176]	; (8005200 <mpu6050_Get_Accel+0xd0>)
 800514e:	f7fd ffa9 	bl	80030a4 <HAL_I2C_Mem_Read>


	raw.accel_x = (Rec_Data[0] << 8 | Rec_Data [1]);
 8005152:	4b2a      	ldr	r3, [pc, #168]	; (80051fc <mpu6050_Get_Accel+0xcc>)
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	021b      	lsls	r3, r3, #8
 8005158:	b21a      	sxth	r2, r3
 800515a:	4b28      	ldr	r3, [pc, #160]	; (80051fc <mpu6050_Get_Accel+0xcc>)
 800515c:	785b      	ldrb	r3, [r3, #1]
 800515e:	b21b      	sxth	r3, r3
 8005160:	4313      	orrs	r3, r2
 8005162:	b21a      	sxth	r2, r3
 8005164:	4b27      	ldr	r3, [pc, #156]	; (8005204 <mpu6050_Get_Accel+0xd4>)
 8005166:	801a      	strh	r2, [r3, #0]
	raw.accel_y = (Rec_Data[2] << 8 | Rec_Data [3]);
 8005168:	4b24      	ldr	r3, [pc, #144]	; (80051fc <mpu6050_Get_Accel+0xcc>)
 800516a:	789b      	ldrb	r3, [r3, #2]
 800516c:	021b      	lsls	r3, r3, #8
 800516e:	b21a      	sxth	r2, r3
 8005170:	4b22      	ldr	r3, [pc, #136]	; (80051fc <mpu6050_Get_Accel+0xcc>)
 8005172:	78db      	ldrb	r3, [r3, #3]
 8005174:	b21b      	sxth	r3, r3
 8005176:	4313      	orrs	r3, r2
 8005178:	b21a      	sxth	r2, r3
 800517a:	4b22      	ldr	r3, [pc, #136]	; (8005204 <mpu6050_Get_Accel+0xd4>)
 800517c:	805a      	strh	r2, [r3, #2]
	raw.accel_z = (Rec_Data[4] << 8 | Rec_Data [5]);
 800517e:	4b1f      	ldr	r3, [pc, #124]	; (80051fc <mpu6050_Get_Accel+0xcc>)
 8005180:	791b      	ldrb	r3, [r3, #4]
 8005182:	021b      	lsls	r3, r3, #8
 8005184:	b21a      	sxth	r2, r3
 8005186:	4b1d      	ldr	r3, [pc, #116]	; (80051fc <mpu6050_Get_Accel+0xcc>)
 8005188:	795b      	ldrb	r3, [r3, #5]
 800518a:	b21b      	sxth	r3, r3
 800518c:	4313      	orrs	r3, r2
 800518e:	b21a      	sxth	r2, r3
 8005190:	4b1c      	ldr	r3, [pc, #112]	; (8005204 <mpu6050_Get_Accel+0xd4>)
 8005192:	809a      	strh	r2, [r3, #4]

	mpu6050->accel_x = (float)raw.accel_x / 16384.0;
 8005194:	4b1b      	ldr	r3, [pc, #108]	; (8005204 <mpu6050_Get_Accel+0xd4>)
 8005196:	f9b3 3000 	ldrsh.w	r3, [r3]
 800519a:	4618      	mov	r0, r3
 800519c:	f7fb fd9e 	bl	8000cdc <__aeabi_i2f>
 80051a0:	4603      	mov	r3, r0
 80051a2:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7fb fea0 	bl	8000eec <__aeabi_fdiv>
 80051ac:	4603      	mov	r3, r0
 80051ae:	461a      	mov	r2, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	601a      	str	r2, [r3, #0]
	mpu6050->accel_y = (float)raw.accel_y / 16384.0;
 80051b4:	4b13      	ldr	r3, [pc, #76]	; (8005204 <mpu6050_Get_Accel+0xd4>)
 80051b6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7fb fd8e 	bl	8000cdc <__aeabi_i2f>
 80051c0:	4603      	mov	r3, r0
 80051c2:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80051c6:	4618      	mov	r0, r3
 80051c8:	f7fb fe90 	bl	8000eec <__aeabi_fdiv>
 80051cc:	4603      	mov	r3, r0
 80051ce:	461a      	mov	r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	605a      	str	r2, [r3, #4]
	mpu6050->accel_z = (float)raw.accel_z / 16384.0;
 80051d4:	4b0b      	ldr	r3, [pc, #44]	; (8005204 <mpu6050_Get_Accel+0xd4>)
 80051d6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80051da:	4618      	mov	r0, r3
 80051dc:	f7fb fd7e 	bl	8000cdc <__aeabi_i2f>
 80051e0:	4603      	mov	r3, r0
 80051e2:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80051e6:	4618      	mov	r0, r3
 80051e8:	f7fb fe80 	bl	8000eec <__aeabi_fdiv>
 80051ec:	4603      	mov	r3, r0
 80051ee:	461a      	mov	r2, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	609a      	str	r2, [r3, #8]
}
 80051f4:	bf00      	nop
 80051f6:	3708      	adds	r7, #8
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	200009a0 	.word	0x200009a0
 8005200:	200008f8 	.word	0x200008f8
 8005204:	20000ac0 	.word	0x20000ac0

08005208 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8005208:	b480      	push	{r7}
 800520a:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800520c:	bf00      	nop
 800520e:	46bd      	mov	sp, r7
 8005210:	bc80      	pop	{r7}
 8005212:	4770      	bx	lr

08005214 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8005214:	b580      	push	{r7, lr}
 8005216:	b086      	sub	sp, #24
 8005218:	af04      	add	r7, sp, #16
 800521a:	4603      	mov	r3, r0
 800521c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800521e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005222:	9302      	str	r3, [sp, #8]
 8005224:	2301      	movs	r3, #1
 8005226:	9301      	str	r3, [sp, #4]
 8005228:	1dfb      	adds	r3, r7, #7
 800522a:	9300      	str	r3, [sp, #0]
 800522c:	2301      	movs	r3, #1
 800522e:	2200      	movs	r2, #0
 8005230:	2178      	movs	r1, #120	; 0x78
 8005232:	4803      	ldr	r0, [pc, #12]	; (8005240 <ssd1306_WriteCommand+0x2c>)
 8005234:	f7fd fe3c 	bl	8002eb0 <HAL_I2C_Mem_Write>
}
 8005238:	bf00      	nop
 800523a:	3708      	adds	r7, #8
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	2000094c 	.word	0x2000094c

08005244 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8005244:	b580      	push	{r7, lr}
 8005246:	b086      	sub	sp, #24
 8005248:	af04      	add	r7, sp, #16
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	b29b      	uxth	r3, r3
 8005252:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005256:	9202      	str	r2, [sp, #8]
 8005258:	9301      	str	r3, [sp, #4]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	9300      	str	r3, [sp, #0]
 800525e:	2301      	movs	r3, #1
 8005260:	2240      	movs	r2, #64	; 0x40
 8005262:	2178      	movs	r1, #120	; 0x78
 8005264:	4803      	ldr	r0, [pc, #12]	; (8005274 <ssd1306_WriteData+0x30>)
 8005266:	f7fd fe23 	bl	8002eb0 <HAL_I2C_Mem_Write>
}
 800526a:	bf00      	nop
 800526c:	3708      	adds	r7, #8
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	2000094c 	.word	0x2000094c

08005278 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8005278:	b580      	push	{r7, lr}
 800527a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800527c:	f7ff ffc4 	bl	8005208 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8005280:	2064      	movs	r0, #100	; 0x64
 8005282:	f7fc fff9 	bl	8002278 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8005286:	2000      	movs	r0, #0
 8005288:	f000 fb1a 	bl	80058c0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800528c:	2020      	movs	r0, #32
 800528e:	f7ff ffc1 	bl	8005214 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8005292:	2000      	movs	r0, #0
 8005294:	f7ff ffbe 	bl	8005214 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8005298:	20b0      	movs	r0, #176	; 0xb0
 800529a:	f7ff ffbb 	bl	8005214 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800529e:	20c8      	movs	r0, #200	; 0xc8
 80052a0:	f7ff ffb8 	bl	8005214 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80052a4:	2000      	movs	r0, #0
 80052a6:	f7ff ffb5 	bl	8005214 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80052aa:	2010      	movs	r0, #16
 80052ac:	f7ff ffb2 	bl	8005214 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80052b0:	2040      	movs	r0, #64	; 0x40
 80052b2:	f7ff ffaf 	bl	8005214 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80052b6:	20ff      	movs	r0, #255	; 0xff
 80052b8:	f000 faef 	bl	800589a <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80052bc:	20a1      	movs	r0, #161	; 0xa1
 80052be:	f7ff ffa9 	bl	8005214 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80052c2:	20a6      	movs	r0, #166	; 0xa6
 80052c4:	f7ff ffa6 	bl	8005214 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80052c8:	20a8      	movs	r0, #168	; 0xa8
 80052ca:	f7ff ffa3 	bl	8005214 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80052ce:	203f      	movs	r0, #63	; 0x3f
 80052d0:	f7ff ffa0 	bl	8005214 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80052d4:	20a4      	movs	r0, #164	; 0xa4
 80052d6:	f7ff ff9d 	bl	8005214 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80052da:	20d3      	movs	r0, #211	; 0xd3
 80052dc:	f7ff ff9a 	bl	8005214 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80052e0:	2000      	movs	r0, #0
 80052e2:	f7ff ff97 	bl	8005214 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80052e6:	20d5      	movs	r0, #213	; 0xd5
 80052e8:	f7ff ff94 	bl	8005214 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80052ec:	20f0      	movs	r0, #240	; 0xf0
 80052ee:	f7ff ff91 	bl	8005214 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80052f2:	20d9      	movs	r0, #217	; 0xd9
 80052f4:	f7ff ff8e 	bl	8005214 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80052f8:	2022      	movs	r0, #34	; 0x22
 80052fa:	f7ff ff8b 	bl	8005214 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80052fe:	20da      	movs	r0, #218	; 0xda
 8005300:	f7ff ff88 	bl	8005214 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8005304:	2012      	movs	r0, #18
 8005306:	f7ff ff85 	bl	8005214 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800530a:	20db      	movs	r0, #219	; 0xdb
 800530c:	f7ff ff82 	bl	8005214 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8005310:	2020      	movs	r0, #32
 8005312:	f7ff ff7f 	bl	8005214 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8005316:	208d      	movs	r0, #141	; 0x8d
 8005318:	f7ff ff7c 	bl	8005214 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800531c:	2014      	movs	r0, #20
 800531e:	f7ff ff79 	bl	8005214 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8005322:	2001      	movs	r0, #1
 8005324:	f000 facc 	bl	80058c0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8005328:	2000      	movs	r0, #0
 800532a:	f000 f80f 	bl	800534c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800532e:	f000 f82f 	bl	8005390 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8005332:	4b05      	ldr	r3, [pc, #20]	; (8005348 <ssd1306_Init+0xd0>)
 8005334:	2200      	movs	r2, #0
 8005336:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8005338:	4b03      	ldr	r3, [pc, #12]	; (8005348 <ssd1306_Init+0xd0>)
 800533a:	2200      	movs	r2, #0
 800533c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800533e:	4b02      	ldr	r3, [pc, #8]	; (8005348 <ssd1306_Init+0xd0>)
 8005340:	2201      	movs	r2, #1
 8005342:	715a      	strb	r2, [r3, #5]
}
 8005344:	bf00      	nop
 8005346:	bd80      	pop	{r7, pc}
 8005348:	200008e8 	.word	0x200008e8

0800534c <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 800534c:	b480      	push	{r7}
 800534e:	b085      	sub	sp, #20
 8005350:	af00      	add	r7, sp, #0
 8005352:	4603      	mov	r3, r0
 8005354:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8005356:	2300      	movs	r3, #0
 8005358:	60fb      	str	r3, [r7, #12]
 800535a:	e00d      	b.n	8005378 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800535c:	79fb      	ldrb	r3, [r7, #7]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d101      	bne.n	8005366 <ssd1306_Fill+0x1a>
 8005362:	2100      	movs	r1, #0
 8005364:	e000      	b.n	8005368 <ssd1306_Fill+0x1c>
 8005366:	21ff      	movs	r1, #255	; 0xff
 8005368:	4a08      	ldr	r2, [pc, #32]	; (800538c <ssd1306_Fill+0x40>)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	4413      	add	r3, r2
 800536e:	460a      	mov	r2, r1
 8005370:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	3301      	adds	r3, #1
 8005376:	60fb      	str	r3, [r7, #12]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 800537e:	d3ed      	bcc.n	800535c <ssd1306_Fill+0x10>
    }
}
 8005380:	bf00      	nop
 8005382:	bf00      	nop
 8005384:	3714      	adds	r7, #20
 8005386:	46bd      	mov	sp, r7
 8005388:	bc80      	pop	{r7}
 800538a:	4770      	bx	lr
 800538c:	200004d8 	.word	0x200004d8

08005390 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8005396:	2300      	movs	r3, #0
 8005398:	71fb      	strb	r3, [r7, #7]
 800539a:	e01a      	b.n	80053d2 <ssd1306_UpdateScreen+0x42>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800539c:	79fb      	ldrb	r3, [r7, #7]
 800539e:	3b50      	subs	r3, #80	; 0x50
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	4618      	mov	r0, r3
 80053a4:	f7ff ff36 	bl	8005214 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 80053a8:	2000      	movs	r0, #0
 80053aa:	f7ff ff33 	bl	8005214 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 80053ae:	2010      	movs	r0, #16
 80053b0:	f7ff ff30 	bl	8005214 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80053b4:	79fa      	ldrb	r2, [r7, #7]
 80053b6:	4613      	mov	r3, r2
 80053b8:	019b      	lsls	r3, r3, #6
 80053ba:	4413      	add	r3, r2
 80053bc:	005b      	lsls	r3, r3, #1
 80053be:	461a      	mov	r2, r3
 80053c0:	4b08      	ldr	r3, [pc, #32]	; (80053e4 <ssd1306_UpdateScreen+0x54>)
 80053c2:	4413      	add	r3, r2
 80053c4:	2182      	movs	r1, #130	; 0x82
 80053c6:	4618      	mov	r0, r3
 80053c8:	f7ff ff3c 	bl	8005244 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80053cc:	79fb      	ldrb	r3, [r7, #7]
 80053ce:	3301      	adds	r3, #1
 80053d0:	71fb      	strb	r3, [r7, #7]
 80053d2:	79fb      	ldrb	r3, [r7, #7]
 80053d4:	2b07      	cmp	r3, #7
 80053d6:	d9e1      	bls.n	800539c <ssd1306_UpdateScreen+0xc>
    }
}
 80053d8:	bf00      	nop
 80053da:	bf00      	nop
 80053dc:	3708      	adds	r7, #8
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	200004d8 	.word	0x200004d8

080053e8 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80053e8:	b490      	push	{r4, r7}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	4603      	mov	r3, r0
 80053f0:	71fb      	strb	r3, [r7, #7]
 80053f2:	460b      	mov	r3, r1
 80053f4:	71bb      	strb	r3, [r7, #6]
 80053f6:	4613      	mov	r3, r2
 80053f8:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80053fa:	79fb      	ldrb	r3, [r7, #7]
 80053fc:	2b81      	cmp	r3, #129	; 0x81
 80053fe:	d854      	bhi.n	80054aa <ssd1306_DrawPixel+0xc2>
 8005400:	79bb      	ldrb	r3, [r7, #6]
 8005402:	2b3f      	cmp	r3, #63	; 0x3f
 8005404:	d851      	bhi.n	80054aa <ssd1306_DrawPixel+0xc2>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8005406:	4b2b      	ldr	r3, [pc, #172]	; (80054b4 <ssd1306_DrawPixel+0xcc>)
 8005408:	791b      	ldrb	r3, [r3, #4]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d006      	beq.n	800541c <ssd1306_DrawPixel+0x34>
        color = (SSD1306_COLOR)!color;
 800540e:	797b      	ldrb	r3, [r7, #5]
 8005410:	2b00      	cmp	r3, #0
 8005412:	bf0c      	ite	eq
 8005414:	2301      	moveq	r3, #1
 8005416:	2300      	movne	r3, #0
 8005418:	b2db      	uxtb	r3, r3
 800541a:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 800541c:	797b      	ldrb	r3, [r7, #5]
 800541e:	2b01      	cmp	r3, #1
 8005420:	d120      	bne.n	8005464 <ssd1306_DrawPixel+0x7c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8005422:	79fa      	ldrb	r2, [r7, #7]
 8005424:	79bb      	ldrb	r3, [r7, #6]
 8005426:	08db      	lsrs	r3, r3, #3
 8005428:	b2d8      	uxtb	r0, r3
 800542a:	4601      	mov	r1, r0
 800542c:	460b      	mov	r3, r1
 800542e:	019b      	lsls	r3, r3, #6
 8005430:	440b      	add	r3, r1
 8005432:	005b      	lsls	r3, r3, #1
 8005434:	4413      	add	r3, r2
 8005436:	4a20      	ldr	r2, [pc, #128]	; (80054b8 <ssd1306_DrawPixel+0xd0>)
 8005438:	5cd3      	ldrb	r3, [r2, r3]
 800543a:	b25a      	sxtb	r2, r3
 800543c:	79bb      	ldrb	r3, [r7, #6]
 800543e:	f003 0307 	and.w	r3, r3, #7
 8005442:	2101      	movs	r1, #1
 8005444:	fa01 f303 	lsl.w	r3, r1, r3
 8005448:	b25b      	sxtb	r3, r3
 800544a:	4313      	orrs	r3, r2
 800544c:	b25c      	sxtb	r4, r3
 800544e:	79fa      	ldrb	r2, [r7, #7]
 8005450:	4601      	mov	r1, r0
 8005452:	460b      	mov	r3, r1
 8005454:	019b      	lsls	r3, r3, #6
 8005456:	440b      	add	r3, r1
 8005458:	005b      	lsls	r3, r3, #1
 800545a:	4413      	add	r3, r2
 800545c:	b2e1      	uxtb	r1, r4
 800545e:	4a16      	ldr	r2, [pc, #88]	; (80054b8 <ssd1306_DrawPixel+0xd0>)
 8005460:	54d1      	strb	r1, [r2, r3]
 8005462:	e023      	b.n	80054ac <ssd1306_DrawPixel+0xc4>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8005464:	79fa      	ldrb	r2, [r7, #7]
 8005466:	79bb      	ldrb	r3, [r7, #6]
 8005468:	08db      	lsrs	r3, r3, #3
 800546a:	b2d8      	uxtb	r0, r3
 800546c:	4601      	mov	r1, r0
 800546e:	460b      	mov	r3, r1
 8005470:	019b      	lsls	r3, r3, #6
 8005472:	440b      	add	r3, r1
 8005474:	005b      	lsls	r3, r3, #1
 8005476:	4413      	add	r3, r2
 8005478:	4a0f      	ldr	r2, [pc, #60]	; (80054b8 <ssd1306_DrawPixel+0xd0>)
 800547a:	5cd3      	ldrb	r3, [r2, r3]
 800547c:	b25a      	sxtb	r2, r3
 800547e:	79bb      	ldrb	r3, [r7, #6]
 8005480:	f003 0307 	and.w	r3, r3, #7
 8005484:	2101      	movs	r1, #1
 8005486:	fa01 f303 	lsl.w	r3, r1, r3
 800548a:	b25b      	sxtb	r3, r3
 800548c:	43db      	mvns	r3, r3
 800548e:	b25b      	sxtb	r3, r3
 8005490:	4013      	ands	r3, r2
 8005492:	b25c      	sxtb	r4, r3
 8005494:	79fa      	ldrb	r2, [r7, #7]
 8005496:	4601      	mov	r1, r0
 8005498:	460b      	mov	r3, r1
 800549a:	019b      	lsls	r3, r3, #6
 800549c:	440b      	add	r3, r1
 800549e:	005b      	lsls	r3, r3, #1
 80054a0:	4413      	add	r3, r2
 80054a2:	b2e1      	uxtb	r1, r4
 80054a4:	4a04      	ldr	r2, [pc, #16]	; (80054b8 <ssd1306_DrawPixel+0xd0>)
 80054a6:	54d1      	strb	r1, [r2, r3]
 80054a8:	e000      	b.n	80054ac <ssd1306_DrawPixel+0xc4>
        return;
 80054aa:	bf00      	nop
    }
}
 80054ac:	3708      	adds	r7, #8
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bc90      	pop	{r4, r7}
 80054b2:	4770      	bx	lr
 80054b4:	200008e8 	.word	0x200008e8
 80054b8:	200004d8 	.word	0x200004d8

080054bc <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80054bc:	b590      	push	{r4, r7, lr}
 80054be:	b089      	sub	sp, #36	; 0x24
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	4604      	mov	r4, r0
 80054c4:	1d38      	adds	r0, r7, #4
 80054c6:	e880 0006 	stmia.w	r0, {r1, r2}
 80054ca:	461a      	mov	r2, r3
 80054cc:	4623      	mov	r3, r4
 80054ce:	73fb      	strb	r3, [r7, #15]
 80054d0:	4613      	mov	r3, r2
 80054d2:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80054d4:	7bfb      	ldrb	r3, [r7, #15]
 80054d6:	2b1f      	cmp	r3, #31
 80054d8:	d902      	bls.n	80054e0 <ssd1306_WriteChar+0x24>
 80054da:	7bfb      	ldrb	r3, [r7, #15]
 80054dc:	2b7e      	cmp	r3, #126	; 0x7e
 80054de:	d901      	bls.n	80054e4 <ssd1306_WriteChar+0x28>
        return 0;
 80054e0:	2300      	movs	r3, #0
 80054e2:	e06d      	b.n	80055c0 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80054e4:	4b38      	ldr	r3, [pc, #224]	; (80055c8 <ssd1306_WriteChar+0x10c>)
 80054e6:	881b      	ldrh	r3, [r3, #0]
 80054e8:	461a      	mov	r2, r3
 80054ea:	793b      	ldrb	r3, [r7, #4]
 80054ec:	4413      	add	r3, r2
 80054ee:	2b82      	cmp	r3, #130	; 0x82
 80054f0:	dc06      	bgt.n	8005500 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80054f2:	4b35      	ldr	r3, [pc, #212]	; (80055c8 <ssd1306_WriteChar+0x10c>)
 80054f4:	885b      	ldrh	r3, [r3, #2]
 80054f6:	461a      	mov	r2, r3
 80054f8:	797b      	ldrb	r3, [r7, #5]
 80054fa:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80054fc:	2b40      	cmp	r3, #64	; 0x40
 80054fe:	dd01      	ble.n	8005504 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8005500:	2300      	movs	r3, #0
 8005502:	e05d      	b.n	80055c0 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8005504:	2300      	movs	r3, #0
 8005506:	61fb      	str	r3, [r7, #28]
 8005508:	e04c      	b.n	80055a4 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800550a:	68ba      	ldr	r2, [r7, #8]
 800550c:	7bfb      	ldrb	r3, [r7, #15]
 800550e:	3b20      	subs	r3, #32
 8005510:	7979      	ldrb	r1, [r7, #5]
 8005512:	fb01 f303 	mul.w	r3, r1, r3
 8005516:	4619      	mov	r1, r3
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	440b      	add	r3, r1
 800551c:	005b      	lsls	r3, r3, #1
 800551e:	4413      	add	r3, r2
 8005520:	881b      	ldrh	r3, [r3, #0]
 8005522:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8005524:	2300      	movs	r3, #0
 8005526:	61bb      	str	r3, [r7, #24]
 8005528:	e034      	b.n	8005594 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800552a:	697a      	ldr	r2, [r7, #20]
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	fa02 f303 	lsl.w	r3, r2, r3
 8005532:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005536:	2b00      	cmp	r3, #0
 8005538:	d012      	beq.n	8005560 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800553a:	4b23      	ldr	r3, [pc, #140]	; (80055c8 <ssd1306_WriteChar+0x10c>)
 800553c:	881b      	ldrh	r3, [r3, #0]
 800553e:	b2da      	uxtb	r2, r3
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	b2db      	uxtb	r3, r3
 8005544:	4413      	add	r3, r2
 8005546:	b2d8      	uxtb	r0, r3
 8005548:	4b1f      	ldr	r3, [pc, #124]	; (80055c8 <ssd1306_WriteChar+0x10c>)
 800554a:	885b      	ldrh	r3, [r3, #2]
 800554c:	b2da      	uxtb	r2, r3
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	b2db      	uxtb	r3, r3
 8005552:	4413      	add	r3, r2
 8005554:	b2db      	uxtb	r3, r3
 8005556:	7bba      	ldrb	r2, [r7, #14]
 8005558:	4619      	mov	r1, r3
 800555a:	f7ff ff45 	bl	80053e8 <ssd1306_DrawPixel>
 800555e:	e016      	b.n	800558e <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8005560:	4b19      	ldr	r3, [pc, #100]	; (80055c8 <ssd1306_WriteChar+0x10c>)
 8005562:	881b      	ldrh	r3, [r3, #0]
 8005564:	b2da      	uxtb	r2, r3
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	b2db      	uxtb	r3, r3
 800556a:	4413      	add	r3, r2
 800556c:	b2d8      	uxtb	r0, r3
 800556e:	4b16      	ldr	r3, [pc, #88]	; (80055c8 <ssd1306_WriteChar+0x10c>)
 8005570:	885b      	ldrh	r3, [r3, #2]
 8005572:	b2da      	uxtb	r2, r3
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	b2db      	uxtb	r3, r3
 8005578:	4413      	add	r3, r2
 800557a:	b2d9      	uxtb	r1, r3
 800557c:	7bbb      	ldrb	r3, [r7, #14]
 800557e:	2b00      	cmp	r3, #0
 8005580:	bf0c      	ite	eq
 8005582:	2301      	moveq	r3, #1
 8005584:	2300      	movne	r3, #0
 8005586:	b2db      	uxtb	r3, r3
 8005588:	461a      	mov	r2, r3
 800558a:	f7ff ff2d 	bl	80053e8 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	3301      	adds	r3, #1
 8005592:	61bb      	str	r3, [r7, #24]
 8005594:	793b      	ldrb	r3, [r7, #4]
 8005596:	461a      	mov	r2, r3
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	4293      	cmp	r3, r2
 800559c:	d3c5      	bcc.n	800552a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	3301      	adds	r3, #1
 80055a2:	61fb      	str	r3, [r7, #28]
 80055a4:	797b      	ldrb	r3, [r7, #5]
 80055a6:	461a      	mov	r2, r3
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d3ad      	bcc.n	800550a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80055ae:	4b06      	ldr	r3, [pc, #24]	; (80055c8 <ssd1306_WriteChar+0x10c>)
 80055b0:	881a      	ldrh	r2, [r3, #0]
 80055b2:	793b      	ldrb	r3, [r7, #4]
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	4413      	add	r3, r2
 80055b8:	b29a      	uxth	r2, r3
 80055ba:	4b03      	ldr	r3, [pc, #12]	; (80055c8 <ssd1306_WriteChar+0x10c>)
 80055bc:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80055be:	7bfb      	ldrb	r3, [r7, #15]
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3724      	adds	r7, #36	; 0x24
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd90      	pop	{r4, r7, pc}
 80055c8:	200008e8 	.word	0x200008e8

080055cc <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	1d38      	adds	r0, r7, #4
 80055d6:	e880 0006 	stmia.w	r0, {r1, r2}
 80055da:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 80055dc:	e012      	b.n	8005604 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	7818      	ldrb	r0, [r3, #0]
 80055e2:	78fb      	ldrb	r3, [r7, #3]
 80055e4:	1d3a      	adds	r2, r7, #4
 80055e6:	ca06      	ldmia	r2, {r1, r2}
 80055e8:	f7ff ff68 	bl	80054bc <ssd1306_WriteChar>
 80055ec:	4603      	mov	r3, r0
 80055ee:	461a      	mov	r2, r3
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d002      	beq.n	80055fe <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	e008      	b.n	8005610 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	3301      	adds	r3, #1
 8005602:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d1e8      	bne.n	80055de <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	781b      	ldrb	r3, [r3, #0]
}
 8005610:	4618      	mov	r0, r3
 8005612:	3710      	adds	r7, #16
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	4603      	mov	r3, r0
 8005620:	460a      	mov	r2, r1
 8005622:	71fb      	strb	r3, [r7, #7]
 8005624:	4613      	mov	r3, r2
 8005626:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8005628:	79fb      	ldrb	r3, [r7, #7]
 800562a:	b29a      	uxth	r2, r3
 800562c:	4b05      	ldr	r3, [pc, #20]	; (8005644 <ssd1306_SetCursor+0x2c>)
 800562e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8005630:	79bb      	ldrb	r3, [r7, #6]
 8005632:	b29a      	uxth	r2, r3
 8005634:	4b03      	ldr	r3, [pc, #12]	; (8005644 <ssd1306_SetCursor+0x2c>)
 8005636:	805a      	strh	r2, [r3, #2]
}
 8005638:	bf00      	nop
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	bc80      	pop	{r7}
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	200008e8 	.word	0x200008e8

08005648 <ssd1306_Line>:

// Draw line by Bresenhem's algorithm
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8005648:	b590      	push	{r4, r7, lr}
 800564a:	b089      	sub	sp, #36	; 0x24
 800564c:	af00      	add	r7, sp, #0
 800564e:	4604      	mov	r4, r0
 8005650:	4608      	mov	r0, r1
 8005652:	4611      	mov	r1, r2
 8005654:	461a      	mov	r2, r3
 8005656:	4623      	mov	r3, r4
 8005658:	71fb      	strb	r3, [r7, #7]
 800565a:	4603      	mov	r3, r0
 800565c:	71bb      	strb	r3, [r7, #6]
 800565e:	460b      	mov	r3, r1
 8005660:	717b      	strb	r3, [r7, #5]
 8005662:	4613      	mov	r3, r2
 8005664:	713b      	strb	r3, [r7, #4]
  int32_t deltaX = abs(x2 - x1);
 8005666:	797a      	ldrb	r2, [r7, #5]
 8005668:	79fb      	ldrb	r3, [r7, #7]
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	2b00      	cmp	r3, #0
 800566e:	bfb8      	it	lt
 8005670:	425b      	neglt	r3, r3
 8005672:	61bb      	str	r3, [r7, #24]
  int32_t deltaY = abs(y2 - y1);
 8005674:	793a      	ldrb	r2, [r7, #4]
 8005676:	79bb      	ldrb	r3, [r7, #6]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	2b00      	cmp	r3, #0
 800567c:	bfb8      	it	lt
 800567e:	425b      	neglt	r3, r3
 8005680:	617b      	str	r3, [r7, #20]
  int32_t signX = ((x1 < x2) ? 1 : -1);
 8005682:	79fa      	ldrb	r2, [r7, #7]
 8005684:	797b      	ldrb	r3, [r7, #5]
 8005686:	429a      	cmp	r2, r3
 8005688:	d201      	bcs.n	800568e <ssd1306_Line+0x46>
 800568a:	2301      	movs	r3, #1
 800568c:	e001      	b.n	8005692 <ssd1306_Line+0x4a>
 800568e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005692:	613b      	str	r3, [r7, #16]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 8005694:	79ba      	ldrb	r2, [r7, #6]
 8005696:	793b      	ldrb	r3, [r7, #4]
 8005698:	429a      	cmp	r2, r3
 800569a:	d201      	bcs.n	80056a0 <ssd1306_Line+0x58>
 800569c:	2301      	movs	r3, #1
 800569e:	e001      	b.n	80056a4 <ssd1306_Line+0x5c>
 80056a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056a4:	60fb      	str	r3, [r7, #12]
  int32_t error = deltaX - deltaY;
 80056a6:	69ba      	ldr	r2, [r7, #24]
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	61fb      	str	r3, [r7, #28]
  int32_t error2;
    
  ssd1306_DrawPixel(x2, y2, color);
 80056ae:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80056b2:	7939      	ldrb	r1, [r7, #4]
 80056b4:	797b      	ldrb	r3, [r7, #5]
 80056b6:	4618      	mov	r0, r3
 80056b8:	f7ff fe96 	bl	80053e8 <ssd1306_DrawPixel>
    while((x1 != x2) || (y1 != y2))
 80056bc:	e024      	b.n	8005708 <ssd1306_Line+0xc0>
    {
    ssd1306_DrawPixel(x1, y1, color);
 80056be:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80056c2:	79b9      	ldrb	r1, [r7, #6]
 80056c4:	79fb      	ldrb	r3, [r7, #7]
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7ff fe8e 	bl	80053e8 <ssd1306_DrawPixel>
    error2 = error * 2;
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	005b      	lsls	r3, r3, #1
 80056d0:	60bb      	str	r3, [r7, #8]
    if(error2 > -deltaY)
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	425b      	negs	r3, r3
 80056d6:	68ba      	ldr	r2, [r7, #8]
 80056d8:	429a      	cmp	r2, r3
 80056da:	dd08      	ble.n	80056ee <ssd1306_Line+0xa6>
    {
      error -= deltaY;
 80056dc:	69fa      	ldr	r2, [r7, #28]
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	61fb      	str	r3, [r7, #28]
      x1 += signX;
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	b2da      	uxtb	r2, r3
 80056e8:	79fb      	ldrb	r3, [r7, #7]
 80056ea:	4413      	add	r3, r2
 80056ec:	71fb      	strb	r3, [r7, #7]
    else
    {
    /*nothing to do*/
    }
        
    if(error2 < deltaX)
 80056ee:	68ba      	ldr	r2, [r7, #8]
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	da08      	bge.n	8005708 <ssd1306_Line+0xc0>
    {
      error += deltaX;
 80056f6:	69fa      	ldr	r2, [r7, #28]
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	4413      	add	r3, r2
 80056fc:	61fb      	str	r3, [r7, #28]
      y1 += signY;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	b2da      	uxtb	r2, r3
 8005702:	79bb      	ldrb	r3, [r7, #6]
 8005704:	4413      	add	r3, r2
 8005706:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2))
 8005708:	79fa      	ldrb	r2, [r7, #7]
 800570a:	797b      	ldrb	r3, [r7, #5]
 800570c:	429a      	cmp	r2, r3
 800570e:	d1d6      	bne.n	80056be <ssd1306_Line+0x76>
 8005710:	79ba      	ldrb	r2, [r7, #6]
 8005712:	793b      	ldrb	r3, [r7, #4]
 8005714:	429a      	cmp	r2, r3
 8005716:	d1d2      	bne.n	80056be <ssd1306_Line+0x76>
    else
    {
    /*nothing to do*/
    }
  }
  return;
 8005718:	bf00      	nop
}
 800571a:	3724      	adds	r7, #36	; 0x24
 800571c:	46bd      	mov	sp, r7
 800571e:	bd90      	pop	{r4, r7, pc}

08005720 <ssd1306_DrawCircle>:
    }
    
    return;
}
//Draw circle by Bresenhem's algorithm
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8005720:	b590      	push	{r4, r7, lr}
 8005722:	b087      	sub	sp, #28
 8005724:	af00      	add	r7, sp, #0
 8005726:	4604      	mov	r4, r0
 8005728:	4608      	mov	r0, r1
 800572a:	4611      	mov	r1, r2
 800572c:	461a      	mov	r2, r3
 800572e:	4623      	mov	r3, r4
 8005730:	71fb      	strb	r3, [r7, #7]
 8005732:	4603      	mov	r3, r0
 8005734:	71bb      	strb	r3, [r7, #6]
 8005736:	460b      	mov	r3, r1
 8005738:	717b      	strb	r3, [r7, #5]
 800573a:	4613      	mov	r3, r2
 800573c:	713b      	strb	r3, [r7, #4]
  int32_t x = -par_r;
 800573e:	797b      	ldrb	r3, [r7, #5]
 8005740:	425b      	negs	r3, r3
 8005742:	617b      	str	r3, [r7, #20]
  int32_t y = 0;
 8005744:	2300      	movs	r3, #0
 8005746:	613b      	str	r3, [r7, #16]
  int32_t err = 2 - 2 * par_r;
 8005748:	797b      	ldrb	r3, [r7, #5]
 800574a:	f1c3 0301 	rsb	r3, r3, #1
 800574e:	005b      	lsls	r3, r3, #1
 8005750:	60fb      	str	r3, [r7, #12]
  int32_t e2;

  if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 8005752:	79fb      	ldrb	r3, [r7, #7]
 8005754:	2b81      	cmp	r3, #129	; 0x81
 8005756:	d865      	bhi.n	8005824 <ssd1306_DrawCircle+0x104>
 8005758:	79bb      	ldrb	r3, [r7, #6]
 800575a:	2b3f      	cmp	r3, #63	; 0x3f
 800575c:	d862      	bhi.n	8005824 <ssd1306_DrawCircle+0x104>
    return;
  }

    do {
      ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	b2db      	uxtb	r3, r3
 8005762:	79fa      	ldrb	r2, [r7, #7]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	b2d8      	uxtb	r0, r3
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	b2da      	uxtb	r2, r3
 800576c:	79bb      	ldrb	r3, [r7, #6]
 800576e:	4413      	add	r3, r2
 8005770:	b2db      	uxtb	r3, r3
 8005772:	793a      	ldrb	r2, [r7, #4]
 8005774:	4619      	mov	r1, r3
 8005776:	f7ff fe37 	bl	80053e8 <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	b2da      	uxtb	r2, r3
 800577e:	79fb      	ldrb	r3, [r7, #7]
 8005780:	4413      	add	r3, r2
 8005782:	b2d8      	uxtb	r0, r3
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	b2da      	uxtb	r2, r3
 8005788:	79bb      	ldrb	r3, [r7, #6]
 800578a:	4413      	add	r3, r2
 800578c:	b2db      	uxtb	r3, r3
 800578e:	793a      	ldrb	r2, [r7, #4]
 8005790:	4619      	mov	r1, r3
 8005792:	f7ff fe29 	bl	80053e8 <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	b2da      	uxtb	r2, r3
 800579a:	79fb      	ldrb	r3, [r7, #7]
 800579c:	4413      	add	r3, r2
 800579e:	b2d8      	uxtb	r0, r3
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	79ba      	ldrb	r2, [r7, #6]
 80057a6:	1ad3      	subs	r3, r2, r3
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	793a      	ldrb	r2, [r7, #4]
 80057ac:	4619      	mov	r1, r3
 80057ae:	f7ff fe1b 	bl	80053e8 <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	79fa      	ldrb	r2, [r7, #7]
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	b2d8      	uxtb	r0, r3
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	79ba      	ldrb	r2, [r7, #6]
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	793a      	ldrb	r2, [r7, #4]
 80057c8:	4619      	mov	r1, r3
 80057ca:	f7ff fe0d 	bl	80053e8 <ssd1306_DrawPixel>
        e2 = err;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	60bb      	str	r3, [r7, #8]
        if (e2 <= y) {
 80057d2:	68ba      	ldr	r2, [r7, #8]
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	dc13      	bgt.n	8005802 <ssd1306_DrawCircle+0xe2>
            y++;
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	3301      	adds	r3, #1
 80057de:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	005b      	lsls	r3, r3, #1
 80057e4:	3301      	adds	r3, #1
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	4413      	add	r3, r2
 80057ea:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	425b      	negs	r3, r3
 80057f0:	693a      	ldr	r2, [r7, #16]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d105      	bne.n	8005802 <ssd1306_DrawCircle+0xe2>
 80057f6:	68ba      	ldr	r2, [r7, #8]
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	429a      	cmp	r2, r3
 80057fc:	dc01      	bgt.n	8005802 <ssd1306_DrawCircle+0xe2>
              e2 = 0;
 80057fe:	2300      	movs	r3, #0
 8005800:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          /*nothing to do*/
        }
        if(e2 > x) {
 8005802:	68ba      	ldr	r2, [r7, #8]
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	429a      	cmp	r2, r3
 8005808:	dd08      	ble.n	800581c <ssd1306_DrawCircle+0xfc>
          x++;
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	3301      	adds	r3, #1
 800580e:	617b      	str	r3, [r7, #20]
          err = err + (x * 2 + 1);
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	005b      	lsls	r3, r3, #1
 8005814:	3301      	adds	r3, #1
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	4413      	add	r3, r2
 800581a:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          /*nothing to do*/
        }
    } while(x <= 0);
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	2b00      	cmp	r3, #0
 8005820:	dd9d      	ble.n	800575e <ssd1306_DrawCircle+0x3e>

    return;
 8005822:	e000      	b.n	8005826 <ssd1306_DrawCircle+0x106>
    return;
 8005824:	bf00      	nop
}
 8005826:	371c      	adds	r7, #28
 8005828:	46bd      	mov	sp, r7
 800582a:	bd90      	pop	{r4, r7, pc}

0800582c <ssd1306_DrawRectangle>:

//Draw rectangle
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 800582c:	b590      	push	{r4, r7, lr}
 800582e:	b085      	sub	sp, #20
 8005830:	af02      	add	r7, sp, #8
 8005832:	4604      	mov	r4, r0
 8005834:	4608      	mov	r0, r1
 8005836:	4611      	mov	r1, r2
 8005838:	461a      	mov	r2, r3
 800583a:	4623      	mov	r3, r4
 800583c:	71fb      	strb	r3, [r7, #7]
 800583e:	4603      	mov	r3, r0
 8005840:	71bb      	strb	r3, [r7, #6]
 8005842:	460b      	mov	r3, r1
 8005844:	717b      	strb	r3, [r7, #5]
 8005846:	4613      	mov	r3, r2
 8005848:	713b      	strb	r3, [r7, #4]
  ssd1306_Line(x1,y1,x2,y1,color);
 800584a:	79bc      	ldrb	r4, [r7, #6]
 800584c:	797a      	ldrb	r2, [r7, #5]
 800584e:	79b9      	ldrb	r1, [r7, #6]
 8005850:	79f8      	ldrb	r0, [r7, #7]
 8005852:	7e3b      	ldrb	r3, [r7, #24]
 8005854:	9300      	str	r3, [sp, #0]
 8005856:	4623      	mov	r3, r4
 8005858:	f7ff fef6 	bl	8005648 <ssd1306_Line>
  ssd1306_Line(x2,y1,x2,y2,color);
 800585c:	793c      	ldrb	r4, [r7, #4]
 800585e:	797a      	ldrb	r2, [r7, #5]
 8005860:	79b9      	ldrb	r1, [r7, #6]
 8005862:	7978      	ldrb	r0, [r7, #5]
 8005864:	7e3b      	ldrb	r3, [r7, #24]
 8005866:	9300      	str	r3, [sp, #0]
 8005868:	4623      	mov	r3, r4
 800586a:	f7ff feed 	bl	8005648 <ssd1306_Line>
  ssd1306_Line(x2,y2,x1,y2,color);
 800586e:	793c      	ldrb	r4, [r7, #4]
 8005870:	79fa      	ldrb	r2, [r7, #7]
 8005872:	7939      	ldrb	r1, [r7, #4]
 8005874:	7978      	ldrb	r0, [r7, #5]
 8005876:	7e3b      	ldrb	r3, [r7, #24]
 8005878:	9300      	str	r3, [sp, #0]
 800587a:	4623      	mov	r3, r4
 800587c:	f7ff fee4 	bl	8005648 <ssd1306_Line>
  ssd1306_Line(x1,y2,x1,y1,color);
 8005880:	79bc      	ldrb	r4, [r7, #6]
 8005882:	79fa      	ldrb	r2, [r7, #7]
 8005884:	7939      	ldrb	r1, [r7, #4]
 8005886:	79f8      	ldrb	r0, [r7, #7]
 8005888:	7e3b      	ldrb	r3, [r7, #24]
 800588a:	9300      	str	r3, [sp, #0]
 800588c:	4623      	mov	r3, r4
 800588e:	f7ff fedb 	bl	8005648 <ssd1306_Line>

  return;
 8005892:	bf00      	nop
}
 8005894:	370c      	adds	r7, #12
 8005896:	46bd      	mov	sp, r7
 8005898:	bd90      	pop	{r4, r7, pc}

0800589a <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 800589a:	b580      	push	{r7, lr}
 800589c:	b084      	sub	sp, #16
 800589e:	af00      	add	r7, sp, #0
 80058a0:	4603      	mov	r3, r0
 80058a2:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80058a4:	2381      	movs	r3, #129	; 0x81
 80058a6:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80058a8:	7bfb      	ldrb	r3, [r7, #15]
 80058aa:	4618      	mov	r0, r3
 80058ac:	f7ff fcb2 	bl	8005214 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80058b0:	79fb      	ldrb	r3, [r7, #7]
 80058b2:	4618      	mov	r0, r3
 80058b4:	f7ff fcae 	bl	8005214 <ssd1306_WriteCommand>
}
 80058b8:	bf00      	nop
 80058ba:	3710      	adds	r7, #16
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}

080058c0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b084      	sub	sp, #16
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	4603      	mov	r3, r0
 80058c8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80058ca:	79fb      	ldrb	r3, [r7, #7]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d005      	beq.n	80058dc <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80058d0:	23af      	movs	r3, #175	; 0xaf
 80058d2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80058d4:	4b08      	ldr	r3, [pc, #32]	; (80058f8 <ssd1306_SetDisplayOn+0x38>)
 80058d6:	2201      	movs	r2, #1
 80058d8:	719a      	strb	r2, [r3, #6]
 80058da:	e004      	b.n	80058e6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80058dc:	23ae      	movs	r3, #174	; 0xae
 80058de:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80058e0:	4b05      	ldr	r3, [pc, #20]	; (80058f8 <ssd1306_SetDisplayOn+0x38>)
 80058e2:	2200      	movs	r2, #0
 80058e4:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 80058e6:	7bfb      	ldrb	r3, [r7, #15]
 80058e8:	4618      	mov	r0, r3
 80058ea:	f7ff fc93 	bl	8005214 <ssd1306_WriteCommand>
}
 80058ee:	bf00      	nop
 80058f0:	3710      	adds	r7, #16
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	200008e8 	.word	0x200008e8

080058fc <__errno>:
 80058fc:	4b01      	ldr	r3, [pc, #4]	; (8005904 <__errno+0x8>)
 80058fe:	6818      	ldr	r0, [r3, #0]
 8005900:	4770      	bx	lr
 8005902:	bf00      	nop
 8005904:	200000a0 	.word	0x200000a0

08005908 <__libc_init_array>:
 8005908:	b570      	push	{r4, r5, r6, lr}
 800590a:	2600      	movs	r6, #0
 800590c:	4d0c      	ldr	r5, [pc, #48]	; (8005940 <__libc_init_array+0x38>)
 800590e:	4c0d      	ldr	r4, [pc, #52]	; (8005944 <__libc_init_array+0x3c>)
 8005910:	1b64      	subs	r4, r4, r5
 8005912:	10a4      	asrs	r4, r4, #2
 8005914:	42a6      	cmp	r6, r4
 8005916:	d109      	bne.n	800592c <__libc_init_array+0x24>
 8005918:	f004 fa38 	bl	8009d8c <_init>
 800591c:	2600      	movs	r6, #0
 800591e:	4d0a      	ldr	r5, [pc, #40]	; (8005948 <__libc_init_array+0x40>)
 8005920:	4c0a      	ldr	r4, [pc, #40]	; (800594c <__libc_init_array+0x44>)
 8005922:	1b64      	subs	r4, r4, r5
 8005924:	10a4      	asrs	r4, r4, #2
 8005926:	42a6      	cmp	r6, r4
 8005928:	d105      	bne.n	8005936 <__libc_init_array+0x2e>
 800592a:	bd70      	pop	{r4, r5, r6, pc}
 800592c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005930:	4798      	blx	r3
 8005932:	3601      	adds	r6, #1
 8005934:	e7ee      	b.n	8005914 <__libc_init_array+0xc>
 8005936:	f855 3b04 	ldr.w	r3, [r5], #4
 800593a:	4798      	blx	r3
 800593c:	3601      	adds	r6, #1
 800593e:	e7f2      	b.n	8005926 <__libc_init_array+0x1e>
 8005940:	0800bef0 	.word	0x0800bef0
 8005944:	0800bef0 	.word	0x0800bef0
 8005948:	0800bef0 	.word	0x0800bef0
 800594c:	0800bef4 	.word	0x0800bef4

08005950 <memcpy>:
 8005950:	440a      	add	r2, r1
 8005952:	4291      	cmp	r1, r2
 8005954:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005958:	d100      	bne.n	800595c <memcpy+0xc>
 800595a:	4770      	bx	lr
 800595c:	b510      	push	{r4, lr}
 800595e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005962:	4291      	cmp	r1, r2
 8005964:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005968:	d1f9      	bne.n	800595e <memcpy+0xe>
 800596a:	bd10      	pop	{r4, pc}

0800596c <memset>:
 800596c:	4603      	mov	r3, r0
 800596e:	4402      	add	r2, r0
 8005970:	4293      	cmp	r3, r2
 8005972:	d100      	bne.n	8005976 <memset+0xa>
 8005974:	4770      	bx	lr
 8005976:	f803 1b01 	strb.w	r1, [r3], #1
 800597a:	e7f9      	b.n	8005970 <memset+0x4>

0800597c <__cvt>:
 800597c:	2b00      	cmp	r3, #0
 800597e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005982:	461f      	mov	r7, r3
 8005984:	bfbb      	ittet	lt
 8005986:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800598a:	461f      	movlt	r7, r3
 800598c:	2300      	movge	r3, #0
 800598e:	232d      	movlt	r3, #45	; 0x2d
 8005990:	b088      	sub	sp, #32
 8005992:	4614      	mov	r4, r2
 8005994:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005996:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005998:	7013      	strb	r3, [r2, #0]
 800599a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800599c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80059a0:	f023 0820 	bic.w	r8, r3, #32
 80059a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80059a8:	d005      	beq.n	80059b6 <__cvt+0x3a>
 80059aa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80059ae:	d100      	bne.n	80059b2 <__cvt+0x36>
 80059b0:	3501      	adds	r5, #1
 80059b2:	2302      	movs	r3, #2
 80059b4:	e000      	b.n	80059b8 <__cvt+0x3c>
 80059b6:	2303      	movs	r3, #3
 80059b8:	aa07      	add	r2, sp, #28
 80059ba:	9204      	str	r2, [sp, #16]
 80059bc:	aa06      	add	r2, sp, #24
 80059be:	e9cd a202 	strd	sl, r2, [sp, #8]
 80059c2:	e9cd 3500 	strd	r3, r5, [sp]
 80059c6:	4622      	mov	r2, r4
 80059c8:	463b      	mov	r3, r7
 80059ca:	f000 fce5 	bl	8006398 <_dtoa_r>
 80059ce:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80059d2:	4606      	mov	r6, r0
 80059d4:	d102      	bne.n	80059dc <__cvt+0x60>
 80059d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80059d8:	07db      	lsls	r3, r3, #31
 80059da:	d522      	bpl.n	8005a22 <__cvt+0xa6>
 80059dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80059e0:	eb06 0905 	add.w	r9, r6, r5
 80059e4:	d110      	bne.n	8005a08 <__cvt+0x8c>
 80059e6:	7833      	ldrb	r3, [r6, #0]
 80059e8:	2b30      	cmp	r3, #48	; 0x30
 80059ea:	d10a      	bne.n	8005a02 <__cvt+0x86>
 80059ec:	2200      	movs	r2, #0
 80059ee:	2300      	movs	r3, #0
 80059f0:	4620      	mov	r0, r4
 80059f2:	4639      	mov	r1, r7
 80059f4:	f7fa ffd8 	bl	80009a8 <__aeabi_dcmpeq>
 80059f8:	b918      	cbnz	r0, 8005a02 <__cvt+0x86>
 80059fa:	f1c5 0501 	rsb	r5, r5, #1
 80059fe:	f8ca 5000 	str.w	r5, [sl]
 8005a02:	f8da 3000 	ldr.w	r3, [sl]
 8005a06:	4499      	add	r9, r3
 8005a08:	2200      	movs	r2, #0
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	4620      	mov	r0, r4
 8005a0e:	4639      	mov	r1, r7
 8005a10:	f7fa ffca 	bl	80009a8 <__aeabi_dcmpeq>
 8005a14:	b108      	cbz	r0, 8005a1a <__cvt+0x9e>
 8005a16:	f8cd 901c 	str.w	r9, [sp, #28]
 8005a1a:	2230      	movs	r2, #48	; 0x30
 8005a1c:	9b07      	ldr	r3, [sp, #28]
 8005a1e:	454b      	cmp	r3, r9
 8005a20:	d307      	bcc.n	8005a32 <__cvt+0xb6>
 8005a22:	4630      	mov	r0, r6
 8005a24:	9b07      	ldr	r3, [sp, #28]
 8005a26:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005a28:	1b9b      	subs	r3, r3, r6
 8005a2a:	6013      	str	r3, [r2, #0]
 8005a2c:	b008      	add	sp, #32
 8005a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a32:	1c59      	adds	r1, r3, #1
 8005a34:	9107      	str	r1, [sp, #28]
 8005a36:	701a      	strb	r2, [r3, #0]
 8005a38:	e7f0      	b.n	8005a1c <__cvt+0xa0>

08005a3a <__exponent>:
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a3e:	2900      	cmp	r1, #0
 8005a40:	f803 2b02 	strb.w	r2, [r3], #2
 8005a44:	bfb6      	itet	lt
 8005a46:	222d      	movlt	r2, #45	; 0x2d
 8005a48:	222b      	movge	r2, #43	; 0x2b
 8005a4a:	4249      	neglt	r1, r1
 8005a4c:	2909      	cmp	r1, #9
 8005a4e:	7042      	strb	r2, [r0, #1]
 8005a50:	dd2b      	ble.n	8005aaa <__exponent+0x70>
 8005a52:	f10d 0407 	add.w	r4, sp, #7
 8005a56:	46a4      	mov	ip, r4
 8005a58:	270a      	movs	r7, #10
 8005a5a:	fb91 f6f7 	sdiv	r6, r1, r7
 8005a5e:	460a      	mov	r2, r1
 8005a60:	46a6      	mov	lr, r4
 8005a62:	fb07 1516 	mls	r5, r7, r6, r1
 8005a66:	2a63      	cmp	r2, #99	; 0x63
 8005a68:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005a6c:	4631      	mov	r1, r6
 8005a6e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8005a72:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005a76:	dcf0      	bgt.n	8005a5a <__exponent+0x20>
 8005a78:	3130      	adds	r1, #48	; 0x30
 8005a7a:	f1ae 0502 	sub.w	r5, lr, #2
 8005a7e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005a82:	4629      	mov	r1, r5
 8005a84:	1c44      	adds	r4, r0, #1
 8005a86:	4561      	cmp	r1, ip
 8005a88:	d30a      	bcc.n	8005aa0 <__exponent+0x66>
 8005a8a:	f10d 0209 	add.w	r2, sp, #9
 8005a8e:	eba2 020e 	sub.w	r2, r2, lr
 8005a92:	4565      	cmp	r5, ip
 8005a94:	bf88      	it	hi
 8005a96:	2200      	movhi	r2, #0
 8005a98:	4413      	add	r3, r2
 8005a9a:	1a18      	subs	r0, r3, r0
 8005a9c:	b003      	add	sp, #12
 8005a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005aa0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005aa4:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005aa8:	e7ed      	b.n	8005a86 <__exponent+0x4c>
 8005aaa:	2330      	movs	r3, #48	; 0x30
 8005aac:	3130      	adds	r1, #48	; 0x30
 8005aae:	7083      	strb	r3, [r0, #2]
 8005ab0:	70c1      	strb	r1, [r0, #3]
 8005ab2:	1d03      	adds	r3, r0, #4
 8005ab4:	e7f1      	b.n	8005a9a <__exponent+0x60>
	...

08005ab8 <_printf_float>:
 8005ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005abc:	b091      	sub	sp, #68	; 0x44
 8005abe:	460c      	mov	r4, r1
 8005ac0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005ac4:	4616      	mov	r6, r2
 8005ac6:	461f      	mov	r7, r3
 8005ac8:	4605      	mov	r5, r0
 8005aca:	f001 fa53 	bl	8006f74 <_localeconv_r>
 8005ace:	6803      	ldr	r3, [r0, #0]
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	9309      	str	r3, [sp, #36]	; 0x24
 8005ad4:	f7fa fb3c 	bl	8000150 <strlen>
 8005ad8:	2300      	movs	r3, #0
 8005ada:	930e      	str	r3, [sp, #56]	; 0x38
 8005adc:	f8d8 3000 	ldr.w	r3, [r8]
 8005ae0:	900a      	str	r0, [sp, #40]	; 0x28
 8005ae2:	3307      	adds	r3, #7
 8005ae4:	f023 0307 	bic.w	r3, r3, #7
 8005ae8:	f103 0208 	add.w	r2, r3, #8
 8005aec:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005af0:	f8d4 b000 	ldr.w	fp, [r4]
 8005af4:	f8c8 2000 	str.w	r2, [r8]
 8005af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005afc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005b00:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005b04:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005b08:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b0e:	4640      	mov	r0, r8
 8005b10:	4b9c      	ldr	r3, [pc, #624]	; (8005d84 <_printf_float+0x2cc>)
 8005b12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005b14:	f7fa ff7a 	bl	8000a0c <__aeabi_dcmpun>
 8005b18:	bb70      	cbnz	r0, 8005b78 <_printf_float+0xc0>
 8005b1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b1e:	4640      	mov	r0, r8
 8005b20:	4b98      	ldr	r3, [pc, #608]	; (8005d84 <_printf_float+0x2cc>)
 8005b22:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005b24:	f7fa ff54 	bl	80009d0 <__aeabi_dcmple>
 8005b28:	bb30      	cbnz	r0, 8005b78 <_printf_float+0xc0>
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	4640      	mov	r0, r8
 8005b30:	4651      	mov	r1, sl
 8005b32:	f7fa ff43 	bl	80009bc <__aeabi_dcmplt>
 8005b36:	b110      	cbz	r0, 8005b3e <_printf_float+0x86>
 8005b38:	232d      	movs	r3, #45	; 0x2d
 8005b3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b3e:	4b92      	ldr	r3, [pc, #584]	; (8005d88 <_printf_float+0x2d0>)
 8005b40:	4892      	ldr	r0, [pc, #584]	; (8005d8c <_printf_float+0x2d4>)
 8005b42:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005b46:	bf94      	ite	ls
 8005b48:	4698      	movls	r8, r3
 8005b4a:	4680      	movhi	r8, r0
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	f04f 0a00 	mov.w	sl, #0
 8005b52:	6123      	str	r3, [r4, #16]
 8005b54:	f02b 0304 	bic.w	r3, fp, #4
 8005b58:	6023      	str	r3, [r4, #0]
 8005b5a:	4633      	mov	r3, r6
 8005b5c:	4621      	mov	r1, r4
 8005b5e:	4628      	mov	r0, r5
 8005b60:	9700      	str	r7, [sp, #0]
 8005b62:	aa0f      	add	r2, sp, #60	; 0x3c
 8005b64:	f000 f9d4 	bl	8005f10 <_printf_common>
 8005b68:	3001      	adds	r0, #1
 8005b6a:	f040 8090 	bne.w	8005c8e <_printf_float+0x1d6>
 8005b6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b72:	b011      	add	sp, #68	; 0x44
 8005b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b78:	4642      	mov	r2, r8
 8005b7a:	4653      	mov	r3, sl
 8005b7c:	4640      	mov	r0, r8
 8005b7e:	4651      	mov	r1, sl
 8005b80:	f7fa ff44 	bl	8000a0c <__aeabi_dcmpun>
 8005b84:	b148      	cbz	r0, 8005b9a <_printf_float+0xe2>
 8005b86:	f1ba 0f00 	cmp.w	sl, #0
 8005b8a:	bfb8      	it	lt
 8005b8c:	232d      	movlt	r3, #45	; 0x2d
 8005b8e:	4880      	ldr	r0, [pc, #512]	; (8005d90 <_printf_float+0x2d8>)
 8005b90:	bfb8      	it	lt
 8005b92:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005b96:	4b7f      	ldr	r3, [pc, #508]	; (8005d94 <_printf_float+0x2dc>)
 8005b98:	e7d3      	b.n	8005b42 <_printf_float+0x8a>
 8005b9a:	6863      	ldr	r3, [r4, #4]
 8005b9c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005ba0:	1c5a      	adds	r2, r3, #1
 8005ba2:	d142      	bne.n	8005c2a <_printf_float+0x172>
 8005ba4:	2306      	movs	r3, #6
 8005ba6:	6063      	str	r3, [r4, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	9206      	str	r2, [sp, #24]
 8005bac:	aa0e      	add	r2, sp, #56	; 0x38
 8005bae:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005bb2:	aa0d      	add	r2, sp, #52	; 0x34
 8005bb4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005bb8:	9203      	str	r2, [sp, #12]
 8005bba:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005bbe:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005bc2:	6023      	str	r3, [r4, #0]
 8005bc4:	6863      	ldr	r3, [r4, #4]
 8005bc6:	4642      	mov	r2, r8
 8005bc8:	9300      	str	r3, [sp, #0]
 8005bca:	4628      	mov	r0, r5
 8005bcc:	4653      	mov	r3, sl
 8005bce:	910b      	str	r1, [sp, #44]	; 0x2c
 8005bd0:	f7ff fed4 	bl	800597c <__cvt>
 8005bd4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005bd6:	4680      	mov	r8, r0
 8005bd8:	2947      	cmp	r1, #71	; 0x47
 8005bda:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005bdc:	d108      	bne.n	8005bf0 <_printf_float+0x138>
 8005bde:	1cc8      	adds	r0, r1, #3
 8005be0:	db02      	blt.n	8005be8 <_printf_float+0x130>
 8005be2:	6863      	ldr	r3, [r4, #4]
 8005be4:	4299      	cmp	r1, r3
 8005be6:	dd40      	ble.n	8005c6a <_printf_float+0x1b2>
 8005be8:	f1a9 0902 	sub.w	r9, r9, #2
 8005bec:	fa5f f989 	uxtb.w	r9, r9
 8005bf0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005bf4:	d81f      	bhi.n	8005c36 <_printf_float+0x17e>
 8005bf6:	464a      	mov	r2, r9
 8005bf8:	3901      	subs	r1, #1
 8005bfa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005bfe:	910d      	str	r1, [sp, #52]	; 0x34
 8005c00:	f7ff ff1b 	bl	8005a3a <__exponent>
 8005c04:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c06:	4682      	mov	sl, r0
 8005c08:	1813      	adds	r3, r2, r0
 8005c0a:	2a01      	cmp	r2, #1
 8005c0c:	6123      	str	r3, [r4, #16]
 8005c0e:	dc02      	bgt.n	8005c16 <_printf_float+0x15e>
 8005c10:	6822      	ldr	r2, [r4, #0]
 8005c12:	07d2      	lsls	r2, r2, #31
 8005c14:	d501      	bpl.n	8005c1a <_printf_float+0x162>
 8005c16:	3301      	adds	r3, #1
 8005c18:	6123      	str	r3, [r4, #16]
 8005c1a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d09b      	beq.n	8005b5a <_printf_float+0xa2>
 8005c22:	232d      	movs	r3, #45	; 0x2d
 8005c24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c28:	e797      	b.n	8005b5a <_printf_float+0xa2>
 8005c2a:	2947      	cmp	r1, #71	; 0x47
 8005c2c:	d1bc      	bne.n	8005ba8 <_printf_float+0xf0>
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1ba      	bne.n	8005ba8 <_printf_float+0xf0>
 8005c32:	2301      	movs	r3, #1
 8005c34:	e7b7      	b.n	8005ba6 <_printf_float+0xee>
 8005c36:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005c3a:	d118      	bne.n	8005c6e <_printf_float+0x1b6>
 8005c3c:	2900      	cmp	r1, #0
 8005c3e:	6863      	ldr	r3, [r4, #4]
 8005c40:	dd0b      	ble.n	8005c5a <_printf_float+0x1a2>
 8005c42:	6121      	str	r1, [r4, #16]
 8005c44:	b913      	cbnz	r3, 8005c4c <_printf_float+0x194>
 8005c46:	6822      	ldr	r2, [r4, #0]
 8005c48:	07d0      	lsls	r0, r2, #31
 8005c4a:	d502      	bpl.n	8005c52 <_printf_float+0x19a>
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	440b      	add	r3, r1
 8005c50:	6123      	str	r3, [r4, #16]
 8005c52:	f04f 0a00 	mov.w	sl, #0
 8005c56:	65a1      	str	r1, [r4, #88]	; 0x58
 8005c58:	e7df      	b.n	8005c1a <_printf_float+0x162>
 8005c5a:	b913      	cbnz	r3, 8005c62 <_printf_float+0x1aa>
 8005c5c:	6822      	ldr	r2, [r4, #0]
 8005c5e:	07d2      	lsls	r2, r2, #31
 8005c60:	d501      	bpl.n	8005c66 <_printf_float+0x1ae>
 8005c62:	3302      	adds	r3, #2
 8005c64:	e7f4      	b.n	8005c50 <_printf_float+0x198>
 8005c66:	2301      	movs	r3, #1
 8005c68:	e7f2      	b.n	8005c50 <_printf_float+0x198>
 8005c6a:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005c6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c70:	4299      	cmp	r1, r3
 8005c72:	db05      	blt.n	8005c80 <_printf_float+0x1c8>
 8005c74:	6823      	ldr	r3, [r4, #0]
 8005c76:	6121      	str	r1, [r4, #16]
 8005c78:	07d8      	lsls	r0, r3, #31
 8005c7a:	d5ea      	bpl.n	8005c52 <_printf_float+0x19a>
 8005c7c:	1c4b      	adds	r3, r1, #1
 8005c7e:	e7e7      	b.n	8005c50 <_printf_float+0x198>
 8005c80:	2900      	cmp	r1, #0
 8005c82:	bfcc      	ite	gt
 8005c84:	2201      	movgt	r2, #1
 8005c86:	f1c1 0202 	rsble	r2, r1, #2
 8005c8a:	4413      	add	r3, r2
 8005c8c:	e7e0      	b.n	8005c50 <_printf_float+0x198>
 8005c8e:	6823      	ldr	r3, [r4, #0]
 8005c90:	055a      	lsls	r2, r3, #21
 8005c92:	d407      	bmi.n	8005ca4 <_printf_float+0x1ec>
 8005c94:	6923      	ldr	r3, [r4, #16]
 8005c96:	4642      	mov	r2, r8
 8005c98:	4631      	mov	r1, r6
 8005c9a:	4628      	mov	r0, r5
 8005c9c:	47b8      	blx	r7
 8005c9e:	3001      	adds	r0, #1
 8005ca0:	d12b      	bne.n	8005cfa <_printf_float+0x242>
 8005ca2:	e764      	b.n	8005b6e <_printf_float+0xb6>
 8005ca4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005ca8:	f240 80dd 	bls.w	8005e66 <_printf_float+0x3ae>
 8005cac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	f7fa fe78 	bl	80009a8 <__aeabi_dcmpeq>
 8005cb8:	2800      	cmp	r0, #0
 8005cba:	d033      	beq.n	8005d24 <_printf_float+0x26c>
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	4631      	mov	r1, r6
 8005cc0:	4628      	mov	r0, r5
 8005cc2:	4a35      	ldr	r2, [pc, #212]	; (8005d98 <_printf_float+0x2e0>)
 8005cc4:	47b8      	blx	r7
 8005cc6:	3001      	adds	r0, #1
 8005cc8:	f43f af51 	beq.w	8005b6e <_printf_float+0xb6>
 8005ccc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	db02      	blt.n	8005cda <_printf_float+0x222>
 8005cd4:	6823      	ldr	r3, [r4, #0]
 8005cd6:	07d8      	lsls	r0, r3, #31
 8005cd8:	d50f      	bpl.n	8005cfa <_printf_float+0x242>
 8005cda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005cde:	4631      	mov	r1, r6
 8005ce0:	4628      	mov	r0, r5
 8005ce2:	47b8      	blx	r7
 8005ce4:	3001      	adds	r0, #1
 8005ce6:	f43f af42 	beq.w	8005b6e <_printf_float+0xb6>
 8005cea:	f04f 0800 	mov.w	r8, #0
 8005cee:	f104 091a 	add.w	r9, r4, #26
 8005cf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	4543      	cmp	r3, r8
 8005cf8:	dc09      	bgt.n	8005d0e <_printf_float+0x256>
 8005cfa:	6823      	ldr	r3, [r4, #0]
 8005cfc:	079b      	lsls	r3, r3, #30
 8005cfe:	f100 8102 	bmi.w	8005f06 <_printf_float+0x44e>
 8005d02:	68e0      	ldr	r0, [r4, #12]
 8005d04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005d06:	4298      	cmp	r0, r3
 8005d08:	bfb8      	it	lt
 8005d0a:	4618      	movlt	r0, r3
 8005d0c:	e731      	b.n	8005b72 <_printf_float+0xba>
 8005d0e:	2301      	movs	r3, #1
 8005d10:	464a      	mov	r2, r9
 8005d12:	4631      	mov	r1, r6
 8005d14:	4628      	mov	r0, r5
 8005d16:	47b8      	blx	r7
 8005d18:	3001      	adds	r0, #1
 8005d1a:	f43f af28 	beq.w	8005b6e <_printf_float+0xb6>
 8005d1e:	f108 0801 	add.w	r8, r8, #1
 8005d22:	e7e6      	b.n	8005cf2 <_printf_float+0x23a>
 8005d24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	dc38      	bgt.n	8005d9c <_printf_float+0x2e4>
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	4631      	mov	r1, r6
 8005d2e:	4628      	mov	r0, r5
 8005d30:	4a19      	ldr	r2, [pc, #100]	; (8005d98 <_printf_float+0x2e0>)
 8005d32:	47b8      	blx	r7
 8005d34:	3001      	adds	r0, #1
 8005d36:	f43f af1a 	beq.w	8005b6e <_printf_float+0xb6>
 8005d3a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	d102      	bne.n	8005d48 <_printf_float+0x290>
 8005d42:	6823      	ldr	r3, [r4, #0]
 8005d44:	07d9      	lsls	r1, r3, #31
 8005d46:	d5d8      	bpl.n	8005cfa <_printf_float+0x242>
 8005d48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d4c:	4631      	mov	r1, r6
 8005d4e:	4628      	mov	r0, r5
 8005d50:	47b8      	blx	r7
 8005d52:	3001      	adds	r0, #1
 8005d54:	f43f af0b 	beq.w	8005b6e <_printf_float+0xb6>
 8005d58:	f04f 0900 	mov.w	r9, #0
 8005d5c:	f104 0a1a 	add.w	sl, r4, #26
 8005d60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d62:	425b      	negs	r3, r3
 8005d64:	454b      	cmp	r3, r9
 8005d66:	dc01      	bgt.n	8005d6c <_printf_float+0x2b4>
 8005d68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d6a:	e794      	b.n	8005c96 <_printf_float+0x1de>
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	4652      	mov	r2, sl
 8005d70:	4631      	mov	r1, r6
 8005d72:	4628      	mov	r0, r5
 8005d74:	47b8      	blx	r7
 8005d76:	3001      	adds	r0, #1
 8005d78:	f43f aef9 	beq.w	8005b6e <_printf_float+0xb6>
 8005d7c:	f109 0901 	add.w	r9, r9, #1
 8005d80:	e7ee      	b.n	8005d60 <_printf_float+0x2a8>
 8005d82:	bf00      	nop
 8005d84:	7fefffff 	.word	0x7fefffff
 8005d88:	0800b8c8 	.word	0x0800b8c8
 8005d8c:	0800b8cc 	.word	0x0800b8cc
 8005d90:	0800b8d4 	.word	0x0800b8d4
 8005d94:	0800b8d0 	.word	0x0800b8d0
 8005d98:	0800b8d8 	.word	0x0800b8d8
 8005d9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005da0:	429a      	cmp	r2, r3
 8005da2:	bfa8      	it	ge
 8005da4:	461a      	movge	r2, r3
 8005da6:	2a00      	cmp	r2, #0
 8005da8:	4691      	mov	r9, r2
 8005daa:	dc37      	bgt.n	8005e1c <_printf_float+0x364>
 8005dac:	f04f 0b00 	mov.w	fp, #0
 8005db0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005db4:	f104 021a 	add.w	r2, r4, #26
 8005db8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005dbc:	ebaa 0309 	sub.w	r3, sl, r9
 8005dc0:	455b      	cmp	r3, fp
 8005dc2:	dc33      	bgt.n	8005e2c <_printf_float+0x374>
 8005dc4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	db3b      	blt.n	8005e44 <_printf_float+0x38c>
 8005dcc:	6823      	ldr	r3, [r4, #0]
 8005dce:	07da      	lsls	r2, r3, #31
 8005dd0:	d438      	bmi.n	8005e44 <_printf_float+0x38c>
 8005dd2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005dd4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005dd6:	eba2 030a 	sub.w	r3, r2, sl
 8005dda:	eba2 0901 	sub.w	r9, r2, r1
 8005dde:	4599      	cmp	r9, r3
 8005de0:	bfa8      	it	ge
 8005de2:	4699      	movge	r9, r3
 8005de4:	f1b9 0f00 	cmp.w	r9, #0
 8005de8:	dc34      	bgt.n	8005e54 <_printf_float+0x39c>
 8005dea:	f04f 0800 	mov.w	r8, #0
 8005dee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005df2:	f104 0a1a 	add.w	sl, r4, #26
 8005df6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005dfa:	1a9b      	subs	r3, r3, r2
 8005dfc:	eba3 0309 	sub.w	r3, r3, r9
 8005e00:	4543      	cmp	r3, r8
 8005e02:	f77f af7a 	ble.w	8005cfa <_printf_float+0x242>
 8005e06:	2301      	movs	r3, #1
 8005e08:	4652      	mov	r2, sl
 8005e0a:	4631      	mov	r1, r6
 8005e0c:	4628      	mov	r0, r5
 8005e0e:	47b8      	blx	r7
 8005e10:	3001      	adds	r0, #1
 8005e12:	f43f aeac 	beq.w	8005b6e <_printf_float+0xb6>
 8005e16:	f108 0801 	add.w	r8, r8, #1
 8005e1a:	e7ec      	b.n	8005df6 <_printf_float+0x33e>
 8005e1c:	4613      	mov	r3, r2
 8005e1e:	4631      	mov	r1, r6
 8005e20:	4642      	mov	r2, r8
 8005e22:	4628      	mov	r0, r5
 8005e24:	47b8      	blx	r7
 8005e26:	3001      	adds	r0, #1
 8005e28:	d1c0      	bne.n	8005dac <_printf_float+0x2f4>
 8005e2a:	e6a0      	b.n	8005b6e <_printf_float+0xb6>
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	4631      	mov	r1, r6
 8005e30:	4628      	mov	r0, r5
 8005e32:	920b      	str	r2, [sp, #44]	; 0x2c
 8005e34:	47b8      	blx	r7
 8005e36:	3001      	adds	r0, #1
 8005e38:	f43f ae99 	beq.w	8005b6e <_printf_float+0xb6>
 8005e3c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005e3e:	f10b 0b01 	add.w	fp, fp, #1
 8005e42:	e7b9      	b.n	8005db8 <_printf_float+0x300>
 8005e44:	4631      	mov	r1, r6
 8005e46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e4a:	4628      	mov	r0, r5
 8005e4c:	47b8      	blx	r7
 8005e4e:	3001      	adds	r0, #1
 8005e50:	d1bf      	bne.n	8005dd2 <_printf_float+0x31a>
 8005e52:	e68c      	b.n	8005b6e <_printf_float+0xb6>
 8005e54:	464b      	mov	r3, r9
 8005e56:	4631      	mov	r1, r6
 8005e58:	4628      	mov	r0, r5
 8005e5a:	eb08 020a 	add.w	r2, r8, sl
 8005e5e:	47b8      	blx	r7
 8005e60:	3001      	adds	r0, #1
 8005e62:	d1c2      	bne.n	8005dea <_printf_float+0x332>
 8005e64:	e683      	b.n	8005b6e <_printf_float+0xb6>
 8005e66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005e68:	2a01      	cmp	r2, #1
 8005e6a:	dc01      	bgt.n	8005e70 <_printf_float+0x3b8>
 8005e6c:	07db      	lsls	r3, r3, #31
 8005e6e:	d537      	bpl.n	8005ee0 <_printf_float+0x428>
 8005e70:	2301      	movs	r3, #1
 8005e72:	4642      	mov	r2, r8
 8005e74:	4631      	mov	r1, r6
 8005e76:	4628      	mov	r0, r5
 8005e78:	47b8      	blx	r7
 8005e7a:	3001      	adds	r0, #1
 8005e7c:	f43f ae77 	beq.w	8005b6e <_printf_float+0xb6>
 8005e80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e84:	4631      	mov	r1, r6
 8005e86:	4628      	mov	r0, r5
 8005e88:	47b8      	blx	r7
 8005e8a:	3001      	adds	r0, #1
 8005e8c:	f43f ae6f 	beq.w	8005b6e <_printf_float+0xb6>
 8005e90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005e94:	2200      	movs	r2, #0
 8005e96:	2300      	movs	r3, #0
 8005e98:	f7fa fd86 	bl	80009a8 <__aeabi_dcmpeq>
 8005e9c:	b9d8      	cbnz	r0, 8005ed6 <_printf_float+0x41e>
 8005e9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ea0:	f108 0201 	add.w	r2, r8, #1
 8005ea4:	3b01      	subs	r3, #1
 8005ea6:	4631      	mov	r1, r6
 8005ea8:	4628      	mov	r0, r5
 8005eaa:	47b8      	blx	r7
 8005eac:	3001      	adds	r0, #1
 8005eae:	d10e      	bne.n	8005ece <_printf_float+0x416>
 8005eb0:	e65d      	b.n	8005b6e <_printf_float+0xb6>
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	464a      	mov	r2, r9
 8005eb6:	4631      	mov	r1, r6
 8005eb8:	4628      	mov	r0, r5
 8005eba:	47b8      	blx	r7
 8005ebc:	3001      	adds	r0, #1
 8005ebe:	f43f ae56 	beq.w	8005b6e <_printf_float+0xb6>
 8005ec2:	f108 0801 	add.w	r8, r8, #1
 8005ec6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ec8:	3b01      	subs	r3, #1
 8005eca:	4543      	cmp	r3, r8
 8005ecc:	dcf1      	bgt.n	8005eb2 <_printf_float+0x3fa>
 8005ece:	4653      	mov	r3, sl
 8005ed0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005ed4:	e6e0      	b.n	8005c98 <_printf_float+0x1e0>
 8005ed6:	f04f 0800 	mov.w	r8, #0
 8005eda:	f104 091a 	add.w	r9, r4, #26
 8005ede:	e7f2      	b.n	8005ec6 <_printf_float+0x40e>
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	4642      	mov	r2, r8
 8005ee4:	e7df      	b.n	8005ea6 <_printf_float+0x3ee>
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	464a      	mov	r2, r9
 8005eea:	4631      	mov	r1, r6
 8005eec:	4628      	mov	r0, r5
 8005eee:	47b8      	blx	r7
 8005ef0:	3001      	adds	r0, #1
 8005ef2:	f43f ae3c 	beq.w	8005b6e <_printf_float+0xb6>
 8005ef6:	f108 0801 	add.w	r8, r8, #1
 8005efa:	68e3      	ldr	r3, [r4, #12]
 8005efc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005efe:	1a5b      	subs	r3, r3, r1
 8005f00:	4543      	cmp	r3, r8
 8005f02:	dcf0      	bgt.n	8005ee6 <_printf_float+0x42e>
 8005f04:	e6fd      	b.n	8005d02 <_printf_float+0x24a>
 8005f06:	f04f 0800 	mov.w	r8, #0
 8005f0a:	f104 0919 	add.w	r9, r4, #25
 8005f0e:	e7f4      	b.n	8005efa <_printf_float+0x442>

08005f10 <_printf_common>:
 8005f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f14:	4616      	mov	r6, r2
 8005f16:	4699      	mov	r9, r3
 8005f18:	688a      	ldr	r2, [r1, #8]
 8005f1a:	690b      	ldr	r3, [r1, #16]
 8005f1c:	4607      	mov	r7, r0
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	bfb8      	it	lt
 8005f22:	4613      	movlt	r3, r2
 8005f24:	6033      	str	r3, [r6, #0]
 8005f26:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f2a:	460c      	mov	r4, r1
 8005f2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f30:	b10a      	cbz	r2, 8005f36 <_printf_common+0x26>
 8005f32:	3301      	adds	r3, #1
 8005f34:	6033      	str	r3, [r6, #0]
 8005f36:	6823      	ldr	r3, [r4, #0]
 8005f38:	0699      	lsls	r1, r3, #26
 8005f3a:	bf42      	ittt	mi
 8005f3c:	6833      	ldrmi	r3, [r6, #0]
 8005f3e:	3302      	addmi	r3, #2
 8005f40:	6033      	strmi	r3, [r6, #0]
 8005f42:	6825      	ldr	r5, [r4, #0]
 8005f44:	f015 0506 	ands.w	r5, r5, #6
 8005f48:	d106      	bne.n	8005f58 <_printf_common+0x48>
 8005f4a:	f104 0a19 	add.w	sl, r4, #25
 8005f4e:	68e3      	ldr	r3, [r4, #12]
 8005f50:	6832      	ldr	r2, [r6, #0]
 8005f52:	1a9b      	subs	r3, r3, r2
 8005f54:	42ab      	cmp	r3, r5
 8005f56:	dc28      	bgt.n	8005faa <_printf_common+0x9a>
 8005f58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005f5c:	1e13      	subs	r3, r2, #0
 8005f5e:	6822      	ldr	r2, [r4, #0]
 8005f60:	bf18      	it	ne
 8005f62:	2301      	movne	r3, #1
 8005f64:	0692      	lsls	r2, r2, #26
 8005f66:	d42d      	bmi.n	8005fc4 <_printf_common+0xb4>
 8005f68:	4649      	mov	r1, r9
 8005f6a:	4638      	mov	r0, r7
 8005f6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f70:	47c0      	blx	r8
 8005f72:	3001      	adds	r0, #1
 8005f74:	d020      	beq.n	8005fb8 <_printf_common+0xa8>
 8005f76:	6823      	ldr	r3, [r4, #0]
 8005f78:	68e5      	ldr	r5, [r4, #12]
 8005f7a:	f003 0306 	and.w	r3, r3, #6
 8005f7e:	2b04      	cmp	r3, #4
 8005f80:	bf18      	it	ne
 8005f82:	2500      	movne	r5, #0
 8005f84:	6832      	ldr	r2, [r6, #0]
 8005f86:	f04f 0600 	mov.w	r6, #0
 8005f8a:	68a3      	ldr	r3, [r4, #8]
 8005f8c:	bf08      	it	eq
 8005f8e:	1aad      	subeq	r5, r5, r2
 8005f90:	6922      	ldr	r2, [r4, #16]
 8005f92:	bf08      	it	eq
 8005f94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	bfc4      	itt	gt
 8005f9c:	1a9b      	subgt	r3, r3, r2
 8005f9e:	18ed      	addgt	r5, r5, r3
 8005fa0:	341a      	adds	r4, #26
 8005fa2:	42b5      	cmp	r5, r6
 8005fa4:	d11a      	bne.n	8005fdc <_printf_common+0xcc>
 8005fa6:	2000      	movs	r0, #0
 8005fa8:	e008      	b.n	8005fbc <_printf_common+0xac>
 8005faa:	2301      	movs	r3, #1
 8005fac:	4652      	mov	r2, sl
 8005fae:	4649      	mov	r1, r9
 8005fb0:	4638      	mov	r0, r7
 8005fb2:	47c0      	blx	r8
 8005fb4:	3001      	adds	r0, #1
 8005fb6:	d103      	bne.n	8005fc0 <_printf_common+0xb0>
 8005fb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fc0:	3501      	adds	r5, #1
 8005fc2:	e7c4      	b.n	8005f4e <_printf_common+0x3e>
 8005fc4:	2030      	movs	r0, #48	; 0x30
 8005fc6:	18e1      	adds	r1, r4, r3
 8005fc8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005fcc:	1c5a      	adds	r2, r3, #1
 8005fce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005fd2:	4422      	add	r2, r4
 8005fd4:	3302      	adds	r3, #2
 8005fd6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005fda:	e7c5      	b.n	8005f68 <_printf_common+0x58>
 8005fdc:	2301      	movs	r3, #1
 8005fde:	4622      	mov	r2, r4
 8005fe0:	4649      	mov	r1, r9
 8005fe2:	4638      	mov	r0, r7
 8005fe4:	47c0      	blx	r8
 8005fe6:	3001      	adds	r0, #1
 8005fe8:	d0e6      	beq.n	8005fb8 <_printf_common+0xa8>
 8005fea:	3601      	adds	r6, #1
 8005fec:	e7d9      	b.n	8005fa2 <_printf_common+0x92>
	...

08005ff0 <_printf_i>:
 8005ff0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ff4:	460c      	mov	r4, r1
 8005ff6:	7e27      	ldrb	r7, [r4, #24]
 8005ff8:	4691      	mov	r9, r2
 8005ffa:	2f78      	cmp	r7, #120	; 0x78
 8005ffc:	4680      	mov	r8, r0
 8005ffe:	469a      	mov	sl, r3
 8006000:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006002:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006006:	d807      	bhi.n	8006018 <_printf_i+0x28>
 8006008:	2f62      	cmp	r7, #98	; 0x62
 800600a:	d80a      	bhi.n	8006022 <_printf_i+0x32>
 800600c:	2f00      	cmp	r7, #0
 800600e:	f000 80d9 	beq.w	80061c4 <_printf_i+0x1d4>
 8006012:	2f58      	cmp	r7, #88	; 0x58
 8006014:	f000 80a4 	beq.w	8006160 <_printf_i+0x170>
 8006018:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800601c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006020:	e03a      	b.n	8006098 <_printf_i+0xa8>
 8006022:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006026:	2b15      	cmp	r3, #21
 8006028:	d8f6      	bhi.n	8006018 <_printf_i+0x28>
 800602a:	a001      	add	r0, pc, #4	; (adr r0, 8006030 <_printf_i+0x40>)
 800602c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006030:	08006089 	.word	0x08006089
 8006034:	0800609d 	.word	0x0800609d
 8006038:	08006019 	.word	0x08006019
 800603c:	08006019 	.word	0x08006019
 8006040:	08006019 	.word	0x08006019
 8006044:	08006019 	.word	0x08006019
 8006048:	0800609d 	.word	0x0800609d
 800604c:	08006019 	.word	0x08006019
 8006050:	08006019 	.word	0x08006019
 8006054:	08006019 	.word	0x08006019
 8006058:	08006019 	.word	0x08006019
 800605c:	080061ab 	.word	0x080061ab
 8006060:	080060cd 	.word	0x080060cd
 8006064:	0800618d 	.word	0x0800618d
 8006068:	08006019 	.word	0x08006019
 800606c:	08006019 	.word	0x08006019
 8006070:	080061cd 	.word	0x080061cd
 8006074:	08006019 	.word	0x08006019
 8006078:	080060cd 	.word	0x080060cd
 800607c:	08006019 	.word	0x08006019
 8006080:	08006019 	.word	0x08006019
 8006084:	08006195 	.word	0x08006195
 8006088:	680b      	ldr	r3, [r1, #0]
 800608a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800608e:	1d1a      	adds	r2, r3, #4
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	600a      	str	r2, [r1, #0]
 8006094:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006098:	2301      	movs	r3, #1
 800609a:	e0a4      	b.n	80061e6 <_printf_i+0x1f6>
 800609c:	6825      	ldr	r5, [r4, #0]
 800609e:	6808      	ldr	r0, [r1, #0]
 80060a0:	062e      	lsls	r6, r5, #24
 80060a2:	f100 0304 	add.w	r3, r0, #4
 80060a6:	d50a      	bpl.n	80060be <_printf_i+0xce>
 80060a8:	6805      	ldr	r5, [r0, #0]
 80060aa:	600b      	str	r3, [r1, #0]
 80060ac:	2d00      	cmp	r5, #0
 80060ae:	da03      	bge.n	80060b8 <_printf_i+0xc8>
 80060b0:	232d      	movs	r3, #45	; 0x2d
 80060b2:	426d      	negs	r5, r5
 80060b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060b8:	230a      	movs	r3, #10
 80060ba:	485e      	ldr	r0, [pc, #376]	; (8006234 <_printf_i+0x244>)
 80060bc:	e019      	b.n	80060f2 <_printf_i+0x102>
 80060be:	f015 0f40 	tst.w	r5, #64	; 0x40
 80060c2:	6805      	ldr	r5, [r0, #0]
 80060c4:	600b      	str	r3, [r1, #0]
 80060c6:	bf18      	it	ne
 80060c8:	b22d      	sxthne	r5, r5
 80060ca:	e7ef      	b.n	80060ac <_printf_i+0xbc>
 80060cc:	680b      	ldr	r3, [r1, #0]
 80060ce:	6825      	ldr	r5, [r4, #0]
 80060d0:	1d18      	adds	r0, r3, #4
 80060d2:	6008      	str	r0, [r1, #0]
 80060d4:	0628      	lsls	r0, r5, #24
 80060d6:	d501      	bpl.n	80060dc <_printf_i+0xec>
 80060d8:	681d      	ldr	r5, [r3, #0]
 80060da:	e002      	b.n	80060e2 <_printf_i+0xf2>
 80060dc:	0669      	lsls	r1, r5, #25
 80060de:	d5fb      	bpl.n	80060d8 <_printf_i+0xe8>
 80060e0:	881d      	ldrh	r5, [r3, #0]
 80060e2:	2f6f      	cmp	r7, #111	; 0x6f
 80060e4:	bf0c      	ite	eq
 80060e6:	2308      	moveq	r3, #8
 80060e8:	230a      	movne	r3, #10
 80060ea:	4852      	ldr	r0, [pc, #328]	; (8006234 <_printf_i+0x244>)
 80060ec:	2100      	movs	r1, #0
 80060ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80060f2:	6866      	ldr	r6, [r4, #4]
 80060f4:	2e00      	cmp	r6, #0
 80060f6:	bfa8      	it	ge
 80060f8:	6821      	ldrge	r1, [r4, #0]
 80060fa:	60a6      	str	r6, [r4, #8]
 80060fc:	bfa4      	itt	ge
 80060fe:	f021 0104 	bicge.w	r1, r1, #4
 8006102:	6021      	strge	r1, [r4, #0]
 8006104:	b90d      	cbnz	r5, 800610a <_printf_i+0x11a>
 8006106:	2e00      	cmp	r6, #0
 8006108:	d04d      	beq.n	80061a6 <_printf_i+0x1b6>
 800610a:	4616      	mov	r6, r2
 800610c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006110:	fb03 5711 	mls	r7, r3, r1, r5
 8006114:	5dc7      	ldrb	r7, [r0, r7]
 8006116:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800611a:	462f      	mov	r7, r5
 800611c:	42bb      	cmp	r3, r7
 800611e:	460d      	mov	r5, r1
 8006120:	d9f4      	bls.n	800610c <_printf_i+0x11c>
 8006122:	2b08      	cmp	r3, #8
 8006124:	d10b      	bne.n	800613e <_printf_i+0x14e>
 8006126:	6823      	ldr	r3, [r4, #0]
 8006128:	07df      	lsls	r7, r3, #31
 800612a:	d508      	bpl.n	800613e <_printf_i+0x14e>
 800612c:	6923      	ldr	r3, [r4, #16]
 800612e:	6861      	ldr	r1, [r4, #4]
 8006130:	4299      	cmp	r1, r3
 8006132:	bfde      	ittt	le
 8006134:	2330      	movle	r3, #48	; 0x30
 8006136:	f806 3c01 	strble.w	r3, [r6, #-1]
 800613a:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800613e:	1b92      	subs	r2, r2, r6
 8006140:	6122      	str	r2, [r4, #16]
 8006142:	464b      	mov	r3, r9
 8006144:	4621      	mov	r1, r4
 8006146:	4640      	mov	r0, r8
 8006148:	f8cd a000 	str.w	sl, [sp]
 800614c:	aa03      	add	r2, sp, #12
 800614e:	f7ff fedf 	bl	8005f10 <_printf_common>
 8006152:	3001      	adds	r0, #1
 8006154:	d14c      	bne.n	80061f0 <_printf_i+0x200>
 8006156:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800615a:	b004      	add	sp, #16
 800615c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006160:	4834      	ldr	r0, [pc, #208]	; (8006234 <_printf_i+0x244>)
 8006162:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006166:	680e      	ldr	r6, [r1, #0]
 8006168:	6823      	ldr	r3, [r4, #0]
 800616a:	f856 5b04 	ldr.w	r5, [r6], #4
 800616e:	061f      	lsls	r7, r3, #24
 8006170:	600e      	str	r6, [r1, #0]
 8006172:	d514      	bpl.n	800619e <_printf_i+0x1ae>
 8006174:	07d9      	lsls	r1, r3, #31
 8006176:	bf44      	itt	mi
 8006178:	f043 0320 	orrmi.w	r3, r3, #32
 800617c:	6023      	strmi	r3, [r4, #0]
 800617e:	b91d      	cbnz	r5, 8006188 <_printf_i+0x198>
 8006180:	6823      	ldr	r3, [r4, #0]
 8006182:	f023 0320 	bic.w	r3, r3, #32
 8006186:	6023      	str	r3, [r4, #0]
 8006188:	2310      	movs	r3, #16
 800618a:	e7af      	b.n	80060ec <_printf_i+0xfc>
 800618c:	6823      	ldr	r3, [r4, #0]
 800618e:	f043 0320 	orr.w	r3, r3, #32
 8006192:	6023      	str	r3, [r4, #0]
 8006194:	2378      	movs	r3, #120	; 0x78
 8006196:	4828      	ldr	r0, [pc, #160]	; (8006238 <_printf_i+0x248>)
 8006198:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800619c:	e7e3      	b.n	8006166 <_printf_i+0x176>
 800619e:	065e      	lsls	r6, r3, #25
 80061a0:	bf48      	it	mi
 80061a2:	b2ad      	uxthmi	r5, r5
 80061a4:	e7e6      	b.n	8006174 <_printf_i+0x184>
 80061a6:	4616      	mov	r6, r2
 80061a8:	e7bb      	b.n	8006122 <_printf_i+0x132>
 80061aa:	680b      	ldr	r3, [r1, #0]
 80061ac:	6826      	ldr	r6, [r4, #0]
 80061ae:	1d1d      	adds	r5, r3, #4
 80061b0:	6960      	ldr	r0, [r4, #20]
 80061b2:	600d      	str	r5, [r1, #0]
 80061b4:	0635      	lsls	r5, r6, #24
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	d501      	bpl.n	80061be <_printf_i+0x1ce>
 80061ba:	6018      	str	r0, [r3, #0]
 80061bc:	e002      	b.n	80061c4 <_printf_i+0x1d4>
 80061be:	0671      	lsls	r1, r6, #25
 80061c0:	d5fb      	bpl.n	80061ba <_printf_i+0x1ca>
 80061c2:	8018      	strh	r0, [r3, #0]
 80061c4:	2300      	movs	r3, #0
 80061c6:	4616      	mov	r6, r2
 80061c8:	6123      	str	r3, [r4, #16]
 80061ca:	e7ba      	b.n	8006142 <_printf_i+0x152>
 80061cc:	680b      	ldr	r3, [r1, #0]
 80061ce:	1d1a      	adds	r2, r3, #4
 80061d0:	600a      	str	r2, [r1, #0]
 80061d2:	681e      	ldr	r6, [r3, #0]
 80061d4:	2100      	movs	r1, #0
 80061d6:	4630      	mov	r0, r6
 80061d8:	6862      	ldr	r2, [r4, #4]
 80061da:	f000 fed7 	bl	8006f8c <memchr>
 80061de:	b108      	cbz	r0, 80061e4 <_printf_i+0x1f4>
 80061e0:	1b80      	subs	r0, r0, r6
 80061e2:	6060      	str	r0, [r4, #4]
 80061e4:	6863      	ldr	r3, [r4, #4]
 80061e6:	6123      	str	r3, [r4, #16]
 80061e8:	2300      	movs	r3, #0
 80061ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061ee:	e7a8      	b.n	8006142 <_printf_i+0x152>
 80061f0:	4632      	mov	r2, r6
 80061f2:	4649      	mov	r1, r9
 80061f4:	4640      	mov	r0, r8
 80061f6:	6923      	ldr	r3, [r4, #16]
 80061f8:	47d0      	blx	sl
 80061fa:	3001      	adds	r0, #1
 80061fc:	d0ab      	beq.n	8006156 <_printf_i+0x166>
 80061fe:	6823      	ldr	r3, [r4, #0]
 8006200:	079b      	lsls	r3, r3, #30
 8006202:	d413      	bmi.n	800622c <_printf_i+0x23c>
 8006204:	68e0      	ldr	r0, [r4, #12]
 8006206:	9b03      	ldr	r3, [sp, #12]
 8006208:	4298      	cmp	r0, r3
 800620a:	bfb8      	it	lt
 800620c:	4618      	movlt	r0, r3
 800620e:	e7a4      	b.n	800615a <_printf_i+0x16a>
 8006210:	2301      	movs	r3, #1
 8006212:	4632      	mov	r2, r6
 8006214:	4649      	mov	r1, r9
 8006216:	4640      	mov	r0, r8
 8006218:	47d0      	blx	sl
 800621a:	3001      	adds	r0, #1
 800621c:	d09b      	beq.n	8006156 <_printf_i+0x166>
 800621e:	3501      	adds	r5, #1
 8006220:	68e3      	ldr	r3, [r4, #12]
 8006222:	9903      	ldr	r1, [sp, #12]
 8006224:	1a5b      	subs	r3, r3, r1
 8006226:	42ab      	cmp	r3, r5
 8006228:	dcf2      	bgt.n	8006210 <_printf_i+0x220>
 800622a:	e7eb      	b.n	8006204 <_printf_i+0x214>
 800622c:	2500      	movs	r5, #0
 800622e:	f104 0619 	add.w	r6, r4, #25
 8006232:	e7f5      	b.n	8006220 <_printf_i+0x230>
 8006234:	0800b8da 	.word	0x0800b8da
 8006238:	0800b8eb 	.word	0x0800b8eb

0800623c <siprintf>:
 800623c:	b40e      	push	{r1, r2, r3}
 800623e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006242:	b500      	push	{lr}
 8006244:	b09c      	sub	sp, #112	; 0x70
 8006246:	ab1d      	add	r3, sp, #116	; 0x74
 8006248:	9002      	str	r0, [sp, #8]
 800624a:	9006      	str	r0, [sp, #24]
 800624c:	9107      	str	r1, [sp, #28]
 800624e:	9104      	str	r1, [sp, #16]
 8006250:	4808      	ldr	r0, [pc, #32]	; (8006274 <siprintf+0x38>)
 8006252:	4909      	ldr	r1, [pc, #36]	; (8006278 <siprintf+0x3c>)
 8006254:	f853 2b04 	ldr.w	r2, [r3], #4
 8006258:	9105      	str	r1, [sp, #20]
 800625a:	6800      	ldr	r0, [r0, #0]
 800625c:	a902      	add	r1, sp, #8
 800625e:	9301      	str	r3, [sp, #4]
 8006260:	f001 fb34 	bl	80078cc <_svfiprintf_r>
 8006264:	2200      	movs	r2, #0
 8006266:	9b02      	ldr	r3, [sp, #8]
 8006268:	701a      	strb	r2, [r3, #0]
 800626a:	b01c      	add	sp, #112	; 0x70
 800626c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006270:	b003      	add	sp, #12
 8006272:	4770      	bx	lr
 8006274:	200000a0 	.word	0x200000a0
 8006278:	ffff0208 	.word	0xffff0208

0800627c <quorem>:
 800627c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006280:	6903      	ldr	r3, [r0, #16]
 8006282:	690c      	ldr	r4, [r1, #16]
 8006284:	4607      	mov	r7, r0
 8006286:	42a3      	cmp	r3, r4
 8006288:	f2c0 8083 	blt.w	8006392 <quorem+0x116>
 800628c:	3c01      	subs	r4, #1
 800628e:	f100 0514 	add.w	r5, r0, #20
 8006292:	f101 0814 	add.w	r8, r1, #20
 8006296:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800629a:	9301      	str	r3, [sp, #4]
 800629c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80062a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80062a4:	3301      	adds	r3, #1
 80062a6:	429a      	cmp	r2, r3
 80062a8:	fbb2 f6f3 	udiv	r6, r2, r3
 80062ac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80062b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80062b4:	d332      	bcc.n	800631c <quorem+0xa0>
 80062b6:	f04f 0e00 	mov.w	lr, #0
 80062ba:	4640      	mov	r0, r8
 80062bc:	46ac      	mov	ip, r5
 80062be:	46f2      	mov	sl, lr
 80062c0:	f850 2b04 	ldr.w	r2, [r0], #4
 80062c4:	b293      	uxth	r3, r2
 80062c6:	fb06 e303 	mla	r3, r6, r3, lr
 80062ca:	0c12      	lsrs	r2, r2, #16
 80062cc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80062d0:	fb06 e202 	mla	r2, r6, r2, lr
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	ebaa 0303 	sub.w	r3, sl, r3
 80062da:	f8dc a000 	ldr.w	sl, [ip]
 80062de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80062e2:	fa1f fa8a 	uxth.w	sl, sl
 80062e6:	4453      	add	r3, sl
 80062e8:	fa1f fa82 	uxth.w	sl, r2
 80062ec:	f8dc 2000 	ldr.w	r2, [ip]
 80062f0:	4581      	cmp	r9, r0
 80062f2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80062f6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006300:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006304:	f84c 3b04 	str.w	r3, [ip], #4
 8006308:	d2da      	bcs.n	80062c0 <quorem+0x44>
 800630a:	f855 300b 	ldr.w	r3, [r5, fp]
 800630e:	b92b      	cbnz	r3, 800631c <quorem+0xa0>
 8006310:	9b01      	ldr	r3, [sp, #4]
 8006312:	3b04      	subs	r3, #4
 8006314:	429d      	cmp	r5, r3
 8006316:	461a      	mov	r2, r3
 8006318:	d32f      	bcc.n	800637a <quorem+0xfe>
 800631a:	613c      	str	r4, [r7, #16]
 800631c:	4638      	mov	r0, r7
 800631e:	f001 f8bd 	bl	800749c <__mcmp>
 8006322:	2800      	cmp	r0, #0
 8006324:	db25      	blt.n	8006372 <quorem+0xf6>
 8006326:	4628      	mov	r0, r5
 8006328:	f04f 0c00 	mov.w	ip, #0
 800632c:	3601      	adds	r6, #1
 800632e:	f858 1b04 	ldr.w	r1, [r8], #4
 8006332:	f8d0 e000 	ldr.w	lr, [r0]
 8006336:	b28b      	uxth	r3, r1
 8006338:	ebac 0303 	sub.w	r3, ip, r3
 800633c:	fa1f f28e 	uxth.w	r2, lr
 8006340:	4413      	add	r3, r2
 8006342:	0c0a      	lsrs	r2, r1, #16
 8006344:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006348:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800634c:	b29b      	uxth	r3, r3
 800634e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006352:	45c1      	cmp	r9, r8
 8006354:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006358:	f840 3b04 	str.w	r3, [r0], #4
 800635c:	d2e7      	bcs.n	800632e <quorem+0xb2>
 800635e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006362:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006366:	b922      	cbnz	r2, 8006372 <quorem+0xf6>
 8006368:	3b04      	subs	r3, #4
 800636a:	429d      	cmp	r5, r3
 800636c:	461a      	mov	r2, r3
 800636e:	d30a      	bcc.n	8006386 <quorem+0x10a>
 8006370:	613c      	str	r4, [r7, #16]
 8006372:	4630      	mov	r0, r6
 8006374:	b003      	add	sp, #12
 8006376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800637a:	6812      	ldr	r2, [r2, #0]
 800637c:	3b04      	subs	r3, #4
 800637e:	2a00      	cmp	r2, #0
 8006380:	d1cb      	bne.n	800631a <quorem+0x9e>
 8006382:	3c01      	subs	r4, #1
 8006384:	e7c6      	b.n	8006314 <quorem+0x98>
 8006386:	6812      	ldr	r2, [r2, #0]
 8006388:	3b04      	subs	r3, #4
 800638a:	2a00      	cmp	r2, #0
 800638c:	d1f0      	bne.n	8006370 <quorem+0xf4>
 800638e:	3c01      	subs	r4, #1
 8006390:	e7eb      	b.n	800636a <quorem+0xee>
 8006392:	2000      	movs	r0, #0
 8006394:	e7ee      	b.n	8006374 <quorem+0xf8>
	...

08006398 <_dtoa_r>:
 8006398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800639c:	4616      	mov	r6, r2
 800639e:	461f      	mov	r7, r3
 80063a0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80063a2:	b099      	sub	sp, #100	; 0x64
 80063a4:	4605      	mov	r5, r0
 80063a6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80063aa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80063ae:	b974      	cbnz	r4, 80063ce <_dtoa_r+0x36>
 80063b0:	2010      	movs	r0, #16
 80063b2:	f000 fde3 	bl	8006f7c <malloc>
 80063b6:	4602      	mov	r2, r0
 80063b8:	6268      	str	r0, [r5, #36]	; 0x24
 80063ba:	b920      	cbnz	r0, 80063c6 <_dtoa_r+0x2e>
 80063bc:	21ea      	movs	r1, #234	; 0xea
 80063be:	4bae      	ldr	r3, [pc, #696]	; (8006678 <_dtoa_r+0x2e0>)
 80063c0:	48ae      	ldr	r0, [pc, #696]	; (800667c <_dtoa_r+0x2e4>)
 80063c2:	f001 fb93 	bl	8007aec <__assert_func>
 80063c6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80063ca:	6004      	str	r4, [r0, #0]
 80063cc:	60c4      	str	r4, [r0, #12]
 80063ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80063d0:	6819      	ldr	r1, [r3, #0]
 80063d2:	b151      	cbz	r1, 80063ea <_dtoa_r+0x52>
 80063d4:	685a      	ldr	r2, [r3, #4]
 80063d6:	2301      	movs	r3, #1
 80063d8:	4093      	lsls	r3, r2
 80063da:	604a      	str	r2, [r1, #4]
 80063dc:	608b      	str	r3, [r1, #8]
 80063de:	4628      	mov	r0, r5
 80063e0:	f000 fe22 	bl	8007028 <_Bfree>
 80063e4:	2200      	movs	r2, #0
 80063e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80063e8:	601a      	str	r2, [r3, #0]
 80063ea:	1e3b      	subs	r3, r7, #0
 80063ec:	bfaf      	iteee	ge
 80063ee:	2300      	movge	r3, #0
 80063f0:	2201      	movlt	r2, #1
 80063f2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80063f6:	9305      	strlt	r3, [sp, #20]
 80063f8:	bfa8      	it	ge
 80063fa:	f8c8 3000 	strge.w	r3, [r8]
 80063fe:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006402:	4b9f      	ldr	r3, [pc, #636]	; (8006680 <_dtoa_r+0x2e8>)
 8006404:	bfb8      	it	lt
 8006406:	f8c8 2000 	strlt.w	r2, [r8]
 800640a:	ea33 0309 	bics.w	r3, r3, r9
 800640e:	d119      	bne.n	8006444 <_dtoa_r+0xac>
 8006410:	f242 730f 	movw	r3, #9999	; 0x270f
 8006414:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006416:	6013      	str	r3, [r2, #0]
 8006418:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800641c:	4333      	orrs	r3, r6
 800641e:	f000 8580 	beq.w	8006f22 <_dtoa_r+0xb8a>
 8006422:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006424:	b953      	cbnz	r3, 800643c <_dtoa_r+0xa4>
 8006426:	4b97      	ldr	r3, [pc, #604]	; (8006684 <_dtoa_r+0x2ec>)
 8006428:	e022      	b.n	8006470 <_dtoa_r+0xd8>
 800642a:	4b97      	ldr	r3, [pc, #604]	; (8006688 <_dtoa_r+0x2f0>)
 800642c:	9308      	str	r3, [sp, #32]
 800642e:	3308      	adds	r3, #8
 8006430:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006432:	6013      	str	r3, [r2, #0]
 8006434:	9808      	ldr	r0, [sp, #32]
 8006436:	b019      	add	sp, #100	; 0x64
 8006438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800643c:	4b91      	ldr	r3, [pc, #580]	; (8006684 <_dtoa_r+0x2ec>)
 800643e:	9308      	str	r3, [sp, #32]
 8006440:	3303      	adds	r3, #3
 8006442:	e7f5      	b.n	8006430 <_dtoa_r+0x98>
 8006444:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006448:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800644c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006450:	2200      	movs	r2, #0
 8006452:	2300      	movs	r3, #0
 8006454:	f7fa faa8 	bl	80009a8 <__aeabi_dcmpeq>
 8006458:	4680      	mov	r8, r0
 800645a:	b158      	cbz	r0, 8006474 <_dtoa_r+0xdc>
 800645c:	2301      	movs	r3, #1
 800645e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006460:	6013      	str	r3, [r2, #0]
 8006462:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006464:	2b00      	cmp	r3, #0
 8006466:	f000 8559 	beq.w	8006f1c <_dtoa_r+0xb84>
 800646a:	4888      	ldr	r0, [pc, #544]	; (800668c <_dtoa_r+0x2f4>)
 800646c:	6018      	str	r0, [r3, #0]
 800646e:	1e43      	subs	r3, r0, #1
 8006470:	9308      	str	r3, [sp, #32]
 8006472:	e7df      	b.n	8006434 <_dtoa_r+0x9c>
 8006474:	ab16      	add	r3, sp, #88	; 0x58
 8006476:	9301      	str	r3, [sp, #4]
 8006478:	ab17      	add	r3, sp, #92	; 0x5c
 800647a:	9300      	str	r3, [sp, #0]
 800647c:	4628      	mov	r0, r5
 800647e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006482:	f001 f8b7 	bl	80075f4 <__d2b>
 8006486:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800648a:	4682      	mov	sl, r0
 800648c:	2c00      	cmp	r4, #0
 800648e:	d07e      	beq.n	800658e <_dtoa_r+0x1f6>
 8006490:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006494:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006496:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800649a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800649e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80064a2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80064a6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80064aa:	2200      	movs	r2, #0
 80064ac:	4b78      	ldr	r3, [pc, #480]	; (8006690 <_dtoa_r+0x2f8>)
 80064ae:	f7f9 fe5b 	bl	8000168 <__aeabi_dsub>
 80064b2:	a36b      	add	r3, pc, #428	; (adr r3, 8006660 <_dtoa_r+0x2c8>)
 80064b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b8:	f7fa f80e 	bl	80004d8 <__aeabi_dmul>
 80064bc:	a36a      	add	r3, pc, #424	; (adr r3, 8006668 <_dtoa_r+0x2d0>)
 80064be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c2:	f7f9 fe53 	bl	800016c <__adddf3>
 80064c6:	4606      	mov	r6, r0
 80064c8:	4620      	mov	r0, r4
 80064ca:	460f      	mov	r7, r1
 80064cc:	f7f9 ff9a 	bl	8000404 <__aeabi_i2d>
 80064d0:	a367      	add	r3, pc, #412	; (adr r3, 8006670 <_dtoa_r+0x2d8>)
 80064d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d6:	f7f9 ffff 	bl	80004d8 <__aeabi_dmul>
 80064da:	4602      	mov	r2, r0
 80064dc:	460b      	mov	r3, r1
 80064de:	4630      	mov	r0, r6
 80064e0:	4639      	mov	r1, r7
 80064e2:	f7f9 fe43 	bl	800016c <__adddf3>
 80064e6:	4606      	mov	r6, r0
 80064e8:	460f      	mov	r7, r1
 80064ea:	f7fa faa5 	bl	8000a38 <__aeabi_d2iz>
 80064ee:	2200      	movs	r2, #0
 80064f0:	4681      	mov	r9, r0
 80064f2:	2300      	movs	r3, #0
 80064f4:	4630      	mov	r0, r6
 80064f6:	4639      	mov	r1, r7
 80064f8:	f7fa fa60 	bl	80009bc <__aeabi_dcmplt>
 80064fc:	b148      	cbz	r0, 8006512 <_dtoa_r+0x17a>
 80064fe:	4648      	mov	r0, r9
 8006500:	f7f9 ff80 	bl	8000404 <__aeabi_i2d>
 8006504:	4632      	mov	r2, r6
 8006506:	463b      	mov	r3, r7
 8006508:	f7fa fa4e 	bl	80009a8 <__aeabi_dcmpeq>
 800650c:	b908      	cbnz	r0, 8006512 <_dtoa_r+0x17a>
 800650e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8006512:	f1b9 0f16 	cmp.w	r9, #22
 8006516:	d857      	bhi.n	80065c8 <_dtoa_r+0x230>
 8006518:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800651c:	4b5d      	ldr	r3, [pc, #372]	; (8006694 <_dtoa_r+0x2fc>)
 800651e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006526:	f7fa fa49 	bl	80009bc <__aeabi_dcmplt>
 800652a:	2800      	cmp	r0, #0
 800652c:	d04e      	beq.n	80065cc <_dtoa_r+0x234>
 800652e:	2300      	movs	r3, #0
 8006530:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8006534:	930f      	str	r3, [sp, #60]	; 0x3c
 8006536:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006538:	1b1c      	subs	r4, r3, r4
 800653a:	1e63      	subs	r3, r4, #1
 800653c:	9309      	str	r3, [sp, #36]	; 0x24
 800653e:	bf49      	itett	mi
 8006540:	f1c4 0301 	rsbmi	r3, r4, #1
 8006544:	2300      	movpl	r3, #0
 8006546:	9306      	strmi	r3, [sp, #24]
 8006548:	2300      	movmi	r3, #0
 800654a:	bf54      	ite	pl
 800654c:	9306      	strpl	r3, [sp, #24]
 800654e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006550:	f1b9 0f00 	cmp.w	r9, #0
 8006554:	db3c      	blt.n	80065d0 <_dtoa_r+0x238>
 8006556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006558:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800655c:	444b      	add	r3, r9
 800655e:	9309      	str	r3, [sp, #36]	; 0x24
 8006560:	2300      	movs	r3, #0
 8006562:	930a      	str	r3, [sp, #40]	; 0x28
 8006564:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006566:	2b09      	cmp	r3, #9
 8006568:	d86c      	bhi.n	8006644 <_dtoa_r+0x2ac>
 800656a:	2b05      	cmp	r3, #5
 800656c:	bfc4      	itt	gt
 800656e:	3b04      	subgt	r3, #4
 8006570:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006572:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006574:	bfc8      	it	gt
 8006576:	2400      	movgt	r4, #0
 8006578:	f1a3 0302 	sub.w	r3, r3, #2
 800657c:	bfd8      	it	le
 800657e:	2401      	movle	r4, #1
 8006580:	2b03      	cmp	r3, #3
 8006582:	f200 808b 	bhi.w	800669c <_dtoa_r+0x304>
 8006586:	e8df f003 	tbb	[pc, r3]
 800658a:	4f2d      	.short	0x4f2d
 800658c:	5b4d      	.short	0x5b4d
 800658e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006592:	441c      	add	r4, r3
 8006594:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006598:	2b20      	cmp	r3, #32
 800659a:	bfc3      	ittte	gt
 800659c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80065a0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80065a4:	fa09 f303 	lslgt.w	r3, r9, r3
 80065a8:	f1c3 0320 	rsble	r3, r3, #32
 80065ac:	bfc6      	itte	gt
 80065ae:	fa26 f000 	lsrgt.w	r0, r6, r0
 80065b2:	4318      	orrgt	r0, r3
 80065b4:	fa06 f003 	lslle.w	r0, r6, r3
 80065b8:	f7f9 ff14 	bl	80003e4 <__aeabi_ui2d>
 80065bc:	2301      	movs	r3, #1
 80065be:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80065c2:	3c01      	subs	r4, #1
 80065c4:	9313      	str	r3, [sp, #76]	; 0x4c
 80065c6:	e770      	b.n	80064aa <_dtoa_r+0x112>
 80065c8:	2301      	movs	r3, #1
 80065ca:	e7b3      	b.n	8006534 <_dtoa_r+0x19c>
 80065cc:	900f      	str	r0, [sp, #60]	; 0x3c
 80065ce:	e7b2      	b.n	8006536 <_dtoa_r+0x19e>
 80065d0:	9b06      	ldr	r3, [sp, #24]
 80065d2:	eba3 0309 	sub.w	r3, r3, r9
 80065d6:	9306      	str	r3, [sp, #24]
 80065d8:	f1c9 0300 	rsb	r3, r9, #0
 80065dc:	930a      	str	r3, [sp, #40]	; 0x28
 80065de:	2300      	movs	r3, #0
 80065e0:	930e      	str	r3, [sp, #56]	; 0x38
 80065e2:	e7bf      	b.n	8006564 <_dtoa_r+0x1cc>
 80065e4:	2300      	movs	r3, #0
 80065e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80065e8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	dc59      	bgt.n	80066a2 <_dtoa_r+0x30a>
 80065ee:	f04f 0b01 	mov.w	fp, #1
 80065f2:	465b      	mov	r3, fp
 80065f4:	f8cd b008 	str.w	fp, [sp, #8]
 80065f8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80065fc:	2200      	movs	r2, #0
 80065fe:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006600:	6042      	str	r2, [r0, #4]
 8006602:	2204      	movs	r2, #4
 8006604:	f102 0614 	add.w	r6, r2, #20
 8006608:	429e      	cmp	r6, r3
 800660a:	6841      	ldr	r1, [r0, #4]
 800660c:	d94f      	bls.n	80066ae <_dtoa_r+0x316>
 800660e:	4628      	mov	r0, r5
 8006610:	f000 fcca 	bl	8006fa8 <_Balloc>
 8006614:	9008      	str	r0, [sp, #32]
 8006616:	2800      	cmp	r0, #0
 8006618:	d14d      	bne.n	80066b6 <_dtoa_r+0x31e>
 800661a:	4602      	mov	r2, r0
 800661c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006620:	4b1d      	ldr	r3, [pc, #116]	; (8006698 <_dtoa_r+0x300>)
 8006622:	e6cd      	b.n	80063c0 <_dtoa_r+0x28>
 8006624:	2301      	movs	r3, #1
 8006626:	e7de      	b.n	80065e6 <_dtoa_r+0x24e>
 8006628:	2300      	movs	r3, #0
 800662a:	930b      	str	r3, [sp, #44]	; 0x2c
 800662c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800662e:	eb09 0b03 	add.w	fp, r9, r3
 8006632:	f10b 0301 	add.w	r3, fp, #1
 8006636:	2b01      	cmp	r3, #1
 8006638:	9302      	str	r3, [sp, #8]
 800663a:	bfb8      	it	lt
 800663c:	2301      	movlt	r3, #1
 800663e:	e7dd      	b.n	80065fc <_dtoa_r+0x264>
 8006640:	2301      	movs	r3, #1
 8006642:	e7f2      	b.n	800662a <_dtoa_r+0x292>
 8006644:	2401      	movs	r4, #1
 8006646:	2300      	movs	r3, #0
 8006648:	940b      	str	r4, [sp, #44]	; 0x2c
 800664a:	9322      	str	r3, [sp, #136]	; 0x88
 800664c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8006650:	2200      	movs	r2, #0
 8006652:	2312      	movs	r3, #18
 8006654:	f8cd b008 	str.w	fp, [sp, #8]
 8006658:	9223      	str	r2, [sp, #140]	; 0x8c
 800665a:	e7cf      	b.n	80065fc <_dtoa_r+0x264>
 800665c:	f3af 8000 	nop.w
 8006660:	636f4361 	.word	0x636f4361
 8006664:	3fd287a7 	.word	0x3fd287a7
 8006668:	8b60c8b3 	.word	0x8b60c8b3
 800666c:	3fc68a28 	.word	0x3fc68a28
 8006670:	509f79fb 	.word	0x509f79fb
 8006674:	3fd34413 	.word	0x3fd34413
 8006678:	0800b909 	.word	0x0800b909
 800667c:	0800b920 	.word	0x0800b920
 8006680:	7ff00000 	.word	0x7ff00000
 8006684:	0800b905 	.word	0x0800b905
 8006688:	0800b8fc 	.word	0x0800b8fc
 800668c:	0800b8d9 	.word	0x0800b8d9
 8006690:	3ff80000 	.word	0x3ff80000
 8006694:	0800ba18 	.word	0x0800ba18
 8006698:	0800b97f 	.word	0x0800b97f
 800669c:	2301      	movs	r3, #1
 800669e:	930b      	str	r3, [sp, #44]	; 0x2c
 80066a0:	e7d4      	b.n	800664c <_dtoa_r+0x2b4>
 80066a2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80066a6:	465b      	mov	r3, fp
 80066a8:	f8cd b008 	str.w	fp, [sp, #8]
 80066ac:	e7a6      	b.n	80065fc <_dtoa_r+0x264>
 80066ae:	3101      	adds	r1, #1
 80066b0:	6041      	str	r1, [r0, #4]
 80066b2:	0052      	lsls	r2, r2, #1
 80066b4:	e7a6      	b.n	8006604 <_dtoa_r+0x26c>
 80066b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80066b8:	9a08      	ldr	r2, [sp, #32]
 80066ba:	601a      	str	r2, [r3, #0]
 80066bc:	9b02      	ldr	r3, [sp, #8]
 80066be:	2b0e      	cmp	r3, #14
 80066c0:	f200 80a8 	bhi.w	8006814 <_dtoa_r+0x47c>
 80066c4:	2c00      	cmp	r4, #0
 80066c6:	f000 80a5 	beq.w	8006814 <_dtoa_r+0x47c>
 80066ca:	f1b9 0f00 	cmp.w	r9, #0
 80066ce:	dd34      	ble.n	800673a <_dtoa_r+0x3a2>
 80066d0:	4a9a      	ldr	r2, [pc, #616]	; (800693c <_dtoa_r+0x5a4>)
 80066d2:	f009 030f 	and.w	r3, r9, #15
 80066d6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80066da:	f419 7f80 	tst.w	r9, #256	; 0x100
 80066de:	e9d3 3400 	ldrd	r3, r4, [r3]
 80066e2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80066e6:	ea4f 1429 	mov.w	r4, r9, asr #4
 80066ea:	d016      	beq.n	800671a <_dtoa_r+0x382>
 80066ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80066f0:	4b93      	ldr	r3, [pc, #588]	; (8006940 <_dtoa_r+0x5a8>)
 80066f2:	2703      	movs	r7, #3
 80066f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80066f8:	f7fa f818 	bl	800072c <__aeabi_ddiv>
 80066fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006700:	f004 040f 	and.w	r4, r4, #15
 8006704:	4e8e      	ldr	r6, [pc, #568]	; (8006940 <_dtoa_r+0x5a8>)
 8006706:	b954      	cbnz	r4, 800671e <_dtoa_r+0x386>
 8006708:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800670c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006710:	f7fa f80c 	bl	800072c <__aeabi_ddiv>
 8006714:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006718:	e029      	b.n	800676e <_dtoa_r+0x3d6>
 800671a:	2702      	movs	r7, #2
 800671c:	e7f2      	b.n	8006704 <_dtoa_r+0x36c>
 800671e:	07e1      	lsls	r1, r4, #31
 8006720:	d508      	bpl.n	8006734 <_dtoa_r+0x39c>
 8006722:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006726:	e9d6 2300 	ldrd	r2, r3, [r6]
 800672a:	f7f9 fed5 	bl	80004d8 <__aeabi_dmul>
 800672e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006732:	3701      	adds	r7, #1
 8006734:	1064      	asrs	r4, r4, #1
 8006736:	3608      	adds	r6, #8
 8006738:	e7e5      	b.n	8006706 <_dtoa_r+0x36e>
 800673a:	f000 80a5 	beq.w	8006888 <_dtoa_r+0x4f0>
 800673e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006742:	f1c9 0400 	rsb	r4, r9, #0
 8006746:	4b7d      	ldr	r3, [pc, #500]	; (800693c <_dtoa_r+0x5a4>)
 8006748:	f004 020f 	and.w	r2, r4, #15
 800674c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006754:	f7f9 fec0 	bl	80004d8 <__aeabi_dmul>
 8006758:	2702      	movs	r7, #2
 800675a:	2300      	movs	r3, #0
 800675c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006760:	4e77      	ldr	r6, [pc, #476]	; (8006940 <_dtoa_r+0x5a8>)
 8006762:	1124      	asrs	r4, r4, #4
 8006764:	2c00      	cmp	r4, #0
 8006766:	f040 8084 	bne.w	8006872 <_dtoa_r+0x4da>
 800676a:	2b00      	cmp	r3, #0
 800676c:	d1d2      	bne.n	8006714 <_dtoa_r+0x37c>
 800676e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006770:	2b00      	cmp	r3, #0
 8006772:	f000 808b 	beq.w	800688c <_dtoa_r+0x4f4>
 8006776:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800677a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800677e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006782:	2200      	movs	r2, #0
 8006784:	4b6f      	ldr	r3, [pc, #444]	; (8006944 <_dtoa_r+0x5ac>)
 8006786:	f7fa f919 	bl	80009bc <__aeabi_dcmplt>
 800678a:	2800      	cmp	r0, #0
 800678c:	d07e      	beq.n	800688c <_dtoa_r+0x4f4>
 800678e:	9b02      	ldr	r3, [sp, #8]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d07b      	beq.n	800688c <_dtoa_r+0x4f4>
 8006794:	f1bb 0f00 	cmp.w	fp, #0
 8006798:	dd38      	ble.n	800680c <_dtoa_r+0x474>
 800679a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800679e:	2200      	movs	r2, #0
 80067a0:	4b69      	ldr	r3, [pc, #420]	; (8006948 <_dtoa_r+0x5b0>)
 80067a2:	f7f9 fe99 	bl	80004d8 <__aeabi_dmul>
 80067a6:	465c      	mov	r4, fp
 80067a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80067ac:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
 80067b0:	3701      	adds	r7, #1
 80067b2:	4638      	mov	r0, r7
 80067b4:	f7f9 fe26 	bl	8000404 <__aeabi_i2d>
 80067b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067bc:	f7f9 fe8c 	bl	80004d8 <__aeabi_dmul>
 80067c0:	2200      	movs	r2, #0
 80067c2:	4b62      	ldr	r3, [pc, #392]	; (800694c <_dtoa_r+0x5b4>)
 80067c4:	f7f9 fcd2 	bl	800016c <__adddf3>
 80067c8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80067cc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80067d0:	9611      	str	r6, [sp, #68]	; 0x44
 80067d2:	2c00      	cmp	r4, #0
 80067d4:	d15d      	bne.n	8006892 <_dtoa_r+0x4fa>
 80067d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067da:	2200      	movs	r2, #0
 80067dc:	4b5c      	ldr	r3, [pc, #368]	; (8006950 <_dtoa_r+0x5b8>)
 80067de:	f7f9 fcc3 	bl	8000168 <__aeabi_dsub>
 80067e2:	4602      	mov	r2, r0
 80067e4:	460b      	mov	r3, r1
 80067e6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80067ea:	4633      	mov	r3, r6
 80067ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80067ee:	f7fa f903 	bl	80009f8 <__aeabi_dcmpgt>
 80067f2:	2800      	cmp	r0, #0
 80067f4:	f040 829e 	bne.w	8006d34 <_dtoa_r+0x99c>
 80067f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80067fe:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006802:	f7fa f8db 	bl	80009bc <__aeabi_dcmplt>
 8006806:	2800      	cmp	r0, #0
 8006808:	f040 8292 	bne.w	8006d30 <_dtoa_r+0x998>
 800680c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006810:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006814:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006816:	2b00      	cmp	r3, #0
 8006818:	f2c0 8153 	blt.w	8006ac2 <_dtoa_r+0x72a>
 800681c:	f1b9 0f0e 	cmp.w	r9, #14
 8006820:	f300 814f 	bgt.w	8006ac2 <_dtoa_r+0x72a>
 8006824:	4b45      	ldr	r3, [pc, #276]	; (800693c <_dtoa_r+0x5a4>)
 8006826:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800682a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800682e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006832:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006834:	2b00      	cmp	r3, #0
 8006836:	f280 80db 	bge.w	80069f0 <_dtoa_r+0x658>
 800683a:	9b02      	ldr	r3, [sp, #8]
 800683c:	2b00      	cmp	r3, #0
 800683e:	f300 80d7 	bgt.w	80069f0 <_dtoa_r+0x658>
 8006842:	f040 8274 	bne.w	8006d2e <_dtoa_r+0x996>
 8006846:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800684a:	2200      	movs	r2, #0
 800684c:	4b40      	ldr	r3, [pc, #256]	; (8006950 <_dtoa_r+0x5b8>)
 800684e:	f7f9 fe43 	bl	80004d8 <__aeabi_dmul>
 8006852:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006856:	f7fa f8c5 	bl	80009e4 <__aeabi_dcmpge>
 800685a:	9c02      	ldr	r4, [sp, #8]
 800685c:	4626      	mov	r6, r4
 800685e:	2800      	cmp	r0, #0
 8006860:	f040 824a 	bne.w	8006cf8 <_dtoa_r+0x960>
 8006864:	2331      	movs	r3, #49	; 0x31
 8006866:	9f08      	ldr	r7, [sp, #32]
 8006868:	f109 0901 	add.w	r9, r9, #1
 800686c:	f807 3b01 	strb.w	r3, [r7], #1
 8006870:	e246      	b.n	8006d00 <_dtoa_r+0x968>
 8006872:	07e2      	lsls	r2, r4, #31
 8006874:	d505      	bpl.n	8006882 <_dtoa_r+0x4ea>
 8006876:	e9d6 2300 	ldrd	r2, r3, [r6]
 800687a:	f7f9 fe2d 	bl	80004d8 <__aeabi_dmul>
 800687e:	2301      	movs	r3, #1
 8006880:	3701      	adds	r7, #1
 8006882:	1064      	asrs	r4, r4, #1
 8006884:	3608      	adds	r6, #8
 8006886:	e76d      	b.n	8006764 <_dtoa_r+0x3cc>
 8006888:	2702      	movs	r7, #2
 800688a:	e770      	b.n	800676e <_dtoa_r+0x3d6>
 800688c:	46c8      	mov	r8, r9
 800688e:	9c02      	ldr	r4, [sp, #8]
 8006890:	e78f      	b.n	80067b2 <_dtoa_r+0x41a>
 8006892:	9908      	ldr	r1, [sp, #32]
 8006894:	4b29      	ldr	r3, [pc, #164]	; (800693c <_dtoa_r+0x5a4>)
 8006896:	4421      	add	r1, r4
 8006898:	9112      	str	r1, [sp, #72]	; 0x48
 800689a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800689c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80068a0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80068a4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80068a8:	2900      	cmp	r1, #0
 80068aa:	d055      	beq.n	8006958 <_dtoa_r+0x5c0>
 80068ac:	2000      	movs	r0, #0
 80068ae:	4929      	ldr	r1, [pc, #164]	; (8006954 <_dtoa_r+0x5bc>)
 80068b0:	f7f9 ff3c 	bl	800072c <__aeabi_ddiv>
 80068b4:	463b      	mov	r3, r7
 80068b6:	4632      	mov	r2, r6
 80068b8:	f7f9 fc56 	bl	8000168 <__aeabi_dsub>
 80068bc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80068c0:	9f08      	ldr	r7, [sp, #32]
 80068c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068c6:	f7fa f8b7 	bl	8000a38 <__aeabi_d2iz>
 80068ca:	4604      	mov	r4, r0
 80068cc:	f7f9 fd9a 	bl	8000404 <__aeabi_i2d>
 80068d0:	4602      	mov	r2, r0
 80068d2:	460b      	mov	r3, r1
 80068d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068d8:	f7f9 fc46 	bl	8000168 <__aeabi_dsub>
 80068dc:	4602      	mov	r2, r0
 80068de:	460b      	mov	r3, r1
 80068e0:	3430      	adds	r4, #48	; 0x30
 80068e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80068e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80068ea:	f807 4b01 	strb.w	r4, [r7], #1
 80068ee:	f7fa f865 	bl	80009bc <__aeabi_dcmplt>
 80068f2:	2800      	cmp	r0, #0
 80068f4:	d174      	bne.n	80069e0 <_dtoa_r+0x648>
 80068f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068fa:	2000      	movs	r0, #0
 80068fc:	4911      	ldr	r1, [pc, #68]	; (8006944 <_dtoa_r+0x5ac>)
 80068fe:	f7f9 fc33 	bl	8000168 <__aeabi_dsub>
 8006902:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006906:	f7fa f859 	bl	80009bc <__aeabi_dcmplt>
 800690a:	2800      	cmp	r0, #0
 800690c:	f040 80b6 	bne.w	8006a7c <_dtoa_r+0x6e4>
 8006910:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006912:	429f      	cmp	r7, r3
 8006914:	f43f af7a 	beq.w	800680c <_dtoa_r+0x474>
 8006918:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800691c:	2200      	movs	r2, #0
 800691e:	4b0a      	ldr	r3, [pc, #40]	; (8006948 <_dtoa_r+0x5b0>)
 8006920:	f7f9 fdda 	bl	80004d8 <__aeabi_dmul>
 8006924:	2200      	movs	r2, #0
 8006926:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800692a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800692e:	4b06      	ldr	r3, [pc, #24]	; (8006948 <_dtoa_r+0x5b0>)
 8006930:	f7f9 fdd2 	bl	80004d8 <__aeabi_dmul>
 8006934:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006938:	e7c3      	b.n	80068c2 <_dtoa_r+0x52a>
 800693a:	bf00      	nop
 800693c:	0800ba18 	.word	0x0800ba18
 8006940:	0800b9f0 	.word	0x0800b9f0
 8006944:	3ff00000 	.word	0x3ff00000
 8006948:	40240000 	.word	0x40240000
 800694c:	401c0000 	.word	0x401c0000
 8006950:	40140000 	.word	0x40140000
 8006954:	3fe00000 	.word	0x3fe00000
 8006958:	4630      	mov	r0, r6
 800695a:	4639      	mov	r1, r7
 800695c:	f7f9 fdbc 	bl	80004d8 <__aeabi_dmul>
 8006960:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006962:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006966:	9c08      	ldr	r4, [sp, #32]
 8006968:	9314      	str	r3, [sp, #80]	; 0x50
 800696a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800696e:	f7fa f863 	bl	8000a38 <__aeabi_d2iz>
 8006972:	9015      	str	r0, [sp, #84]	; 0x54
 8006974:	f7f9 fd46 	bl	8000404 <__aeabi_i2d>
 8006978:	4602      	mov	r2, r0
 800697a:	460b      	mov	r3, r1
 800697c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006980:	f7f9 fbf2 	bl	8000168 <__aeabi_dsub>
 8006984:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006986:	4606      	mov	r6, r0
 8006988:	3330      	adds	r3, #48	; 0x30
 800698a:	f804 3b01 	strb.w	r3, [r4], #1
 800698e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006990:	460f      	mov	r7, r1
 8006992:	429c      	cmp	r4, r3
 8006994:	f04f 0200 	mov.w	r2, #0
 8006998:	d124      	bne.n	80069e4 <_dtoa_r+0x64c>
 800699a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800699e:	4bb3      	ldr	r3, [pc, #716]	; (8006c6c <_dtoa_r+0x8d4>)
 80069a0:	f7f9 fbe4 	bl	800016c <__adddf3>
 80069a4:	4602      	mov	r2, r0
 80069a6:	460b      	mov	r3, r1
 80069a8:	4630      	mov	r0, r6
 80069aa:	4639      	mov	r1, r7
 80069ac:	f7fa f824 	bl	80009f8 <__aeabi_dcmpgt>
 80069b0:	2800      	cmp	r0, #0
 80069b2:	d162      	bne.n	8006a7a <_dtoa_r+0x6e2>
 80069b4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80069b8:	2000      	movs	r0, #0
 80069ba:	49ac      	ldr	r1, [pc, #688]	; (8006c6c <_dtoa_r+0x8d4>)
 80069bc:	f7f9 fbd4 	bl	8000168 <__aeabi_dsub>
 80069c0:	4602      	mov	r2, r0
 80069c2:	460b      	mov	r3, r1
 80069c4:	4630      	mov	r0, r6
 80069c6:	4639      	mov	r1, r7
 80069c8:	f7f9 fff8 	bl	80009bc <__aeabi_dcmplt>
 80069cc:	2800      	cmp	r0, #0
 80069ce:	f43f af1d 	beq.w	800680c <_dtoa_r+0x474>
 80069d2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80069d4:	1e7b      	subs	r3, r7, #1
 80069d6:	9314      	str	r3, [sp, #80]	; 0x50
 80069d8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80069dc:	2b30      	cmp	r3, #48	; 0x30
 80069de:	d0f8      	beq.n	80069d2 <_dtoa_r+0x63a>
 80069e0:	46c1      	mov	r9, r8
 80069e2:	e03a      	b.n	8006a5a <_dtoa_r+0x6c2>
 80069e4:	4ba2      	ldr	r3, [pc, #648]	; (8006c70 <_dtoa_r+0x8d8>)
 80069e6:	f7f9 fd77 	bl	80004d8 <__aeabi_dmul>
 80069ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80069ee:	e7bc      	b.n	800696a <_dtoa_r+0x5d2>
 80069f0:	9f08      	ldr	r7, [sp, #32]
 80069f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80069f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069fa:	f7f9 fe97 	bl	800072c <__aeabi_ddiv>
 80069fe:	f7fa f81b 	bl	8000a38 <__aeabi_d2iz>
 8006a02:	4604      	mov	r4, r0
 8006a04:	f7f9 fcfe 	bl	8000404 <__aeabi_i2d>
 8006a08:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006a0c:	f7f9 fd64 	bl	80004d8 <__aeabi_dmul>
 8006a10:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006a14:	460b      	mov	r3, r1
 8006a16:	4602      	mov	r2, r0
 8006a18:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a1c:	f7f9 fba4 	bl	8000168 <__aeabi_dsub>
 8006a20:	f807 6b01 	strb.w	r6, [r7], #1
 8006a24:	9e08      	ldr	r6, [sp, #32]
 8006a26:	9b02      	ldr	r3, [sp, #8]
 8006a28:	1bbe      	subs	r6, r7, r6
 8006a2a:	42b3      	cmp	r3, r6
 8006a2c:	d13a      	bne.n	8006aa4 <_dtoa_r+0x70c>
 8006a2e:	4602      	mov	r2, r0
 8006a30:	460b      	mov	r3, r1
 8006a32:	f7f9 fb9b 	bl	800016c <__adddf3>
 8006a36:	4602      	mov	r2, r0
 8006a38:	460b      	mov	r3, r1
 8006a3a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006a3e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006a42:	f7f9 ffd9 	bl	80009f8 <__aeabi_dcmpgt>
 8006a46:	bb58      	cbnz	r0, 8006aa0 <_dtoa_r+0x708>
 8006a48:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006a4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a50:	f7f9 ffaa 	bl	80009a8 <__aeabi_dcmpeq>
 8006a54:	b108      	cbz	r0, 8006a5a <_dtoa_r+0x6c2>
 8006a56:	07e1      	lsls	r1, r4, #31
 8006a58:	d422      	bmi.n	8006aa0 <_dtoa_r+0x708>
 8006a5a:	4628      	mov	r0, r5
 8006a5c:	4651      	mov	r1, sl
 8006a5e:	f000 fae3 	bl	8007028 <_Bfree>
 8006a62:	2300      	movs	r3, #0
 8006a64:	703b      	strb	r3, [r7, #0]
 8006a66:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006a68:	f109 0001 	add.w	r0, r9, #1
 8006a6c:	6018      	str	r0, [r3, #0]
 8006a6e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	f43f acdf 	beq.w	8006434 <_dtoa_r+0x9c>
 8006a76:	601f      	str	r7, [r3, #0]
 8006a78:	e4dc      	b.n	8006434 <_dtoa_r+0x9c>
 8006a7a:	4627      	mov	r7, r4
 8006a7c:	463b      	mov	r3, r7
 8006a7e:	461f      	mov	r7, r3
 8006a80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a84:	2a39      	cmp	r2, #57	; 0x39
 8006a86:	d107      	bne.n	8006a98 <_dtoa_r+0x700>
 8006a88:	9a08      	ldr	r2, [sp, #32]
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d1f7      	bne.n	8006a7e <_dtoa_r+0x6e6>
 8006a8e:	2230      	movs	r2, #48	; 0x30
 8006a90:	9908      	ldr	r1, [sp, #32]
 8006a92:	f108 0801 	add.w	r8, r8, #1
 8006a96:	700a      	strb	r2, [r1, #0]
 8006a98:	781a      	ldrb	r2, [r3, #0]
 8006a9a:	3201      	adds	r2, #1
 8006a9c:	701a      	strb	r2, [r3, #0]
 8006a9e:	e79f      	b.n	80069e0 <_dtoa_r+0x648>
 8006aa0:	46c8      	mov	r8, r9
 8006aa2:	e7eb      	b.n	8006a7c <_dtoa_r+0x6e4>
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	4b72      	ldr	r3, [pc, #456]	; (8006c70 <_dtoa_r+0x8d8>)
 8006aa8:	f7f9 fd16 	bl	80004d8 <__aeabi_dmul>
 8006aac:	4602      	mov	r2, r0
 8006aae:	460b      	mov	r3, r1
 8006ab0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	f7f9 ff76 	bl	80009a8 <__aeabi_dcmpeq>
 8006abc:	2800      	cmp	r0, #0
 8006abe:	d098      	beq.n	80069f2 <_dtoa_r+0x65a>
 8006ac0:	e7cb      	b.n	8006a5a <_dtoa_r+0x6c2>
 8006ac2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006ac4:	2a00      	cmp	r2, #0
 8006ac6:	f000 80cd 	beq.w	8006c64 <_dtoa_r+0x8cc>
 8006aca:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006acc:	2a01      	cmp	r2, #1
 8006ace:	f300 80af 	bgt.w	8006c30 <_dtoa_r+0x898>
 8006ad2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006ad4:	2a00      	cmp	r2, #0
 8006ad6:	f000 80a7 	beq.w	8006c28 <_dtoa_r+0x890>
 8006ada:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006ade:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006ae0:	9f06      	ldr	r7, [sp, #24]
 8006ae2:	9a06      	ldr	r2, [sp, #24]
 8006ae4:	2101      	movs	r1, #1
 8006ae6:	441a      	add	r2, r3
 8006ae8:	9206      	str	r2, [sp, #24]
 8006aea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006aec:	4628      	mov	r0, r5
 8006aee:	441a      	add	r2, r3
 8006af0:	9209      	str	r2, [sp, #36]	; 0x24
 8006af2:	f000 fb53 	bl	800719c <__i2b>
 8006af6:	4606      	mov	r6, r0
 8006af8:	2f00      	cmp	r7, #0
 8006afa:	dd0c      	ble.n	8006b16 <_dtoa_r+0x77e>
 8006afc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	dd09      	ble.n	8006b16 <_dtoa_r+0x77e>
 8006b02:	42bb      	cmp	r3, r7
 8006b04:	bfa8      	it	ge
 8006b06:	463b      	movge	r3, r7
 8006b08:	9a06      	ldr	r2, [sp, #24]
 8006b0a:	1aff      	subs	r7, r7, r3
 8006b0c:	1ad2      	subs	r2, r2, r3
 8006b0e:	9206      	str	r2, [sp, #24]
 8006b10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b12:	1ad3      	subs	r3, r2, r3
 8006b14:	9309      	str	r3, [sp, #36]	; 0x24
 8006b16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b18:	b1f3      	cbz	r3, 8006b58 <_dtoa_r+0x7c0>
 8006b1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	f000 80a9 	beq.w	8006c74 <_dtoa_r+0x8dc>
 8006b22:	2c00      	cmp	r4, #0
 8006b24:	dd10      	ble.n	8006b48 <_dtoa_r+0x7b0>
 8006b26:	4631      	mov	r1, r6
 8006b28:	4622      	mov	r2, r4
 8006b2a:	4628      	mov	r0, r5
 8006b2c:	f000 fbf0 	bl	8007310 <__pow5mult>
 8006b30:	4652      	mov	r2, sl
 8006b32:	4601      	mov	r1, r0
 8006b34:	4606      	mov	r6, r0
 8006b36:	4628      	mov	r0, r5
 8006b38:	f000 fb46 	bl	80071c8 <__multiply>
 8006b3c:	4680      	mov	r8, r0
 8006b3e:	4651      	mov	r1, sl
 8006b40:	4628      	mov	r0, r5
 8006b42:	f000 fa71 	bl	8007028 <_Bfree>
 8006b46:	46c2      	mov	sl, r8
 8006b48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b4a:	1b1a      	subs	r2, r3, r4
 8006b4c:	d004      	beq.n	8006b58 <_dtoa_r+0x7c0>
 8006b4e:	4651      	mov	r1, sl
 8006b50:	4628      	mov	r0, r5
 8006b52:	f000 fbdd 	bl	8007310 <__pow5mult>
 8006b56:	4682      	mov	sl, r0
 8006b58:	2101      	movs	r1, #1
 8006b5a:	4628      	mov	r0, r5
 8006b5c:	f000 fb1e 	bl	800719c <__i2b>
 8006b60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b62:	4604      	mov	r4, r0
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	f340 8087 	ble.w	8006c78 <_dtoa_r+0x8e0>
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	4601      	mov	r1, r0
 8006b6e:	4628      	mov	r0, r5
 8006b70:	f000 fbce 	bl	8007310 <__pow5mult>
 8006b74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b76:	4604      	mov	r4, r0
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	f340 8080 	ble.w	8006c7e <_dtoa_r+0x8e6>
 8006b7e:	f04f 0800 	mov.w	r8, #0
 8006b82:	6923      	ldr	r3, [r4, #16]
 8006b84:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006b88:	6918      	ldr	r0, [r3, #16]
 8006b8a:	f000 fab9 	bl	8007100 <__hi0bits>
 8006b8e:	f1c0 0020 	rsb	r0, r0, #32
 8006b92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b94:	4418      	add	r0, r3
 8006b96:	f010 001f 	ands.w	r0, r0, #31
 8006b9a:	f000 8092 	beq.w	8006cc2 <_dtoa_r+0x92a>
 8006b9e:	f1c0 0320 	rsb	r3, r0, #32
 8006ba2:	2b04      	cmp	r3, #4
 8006ba4:	f340 808a 	ble.w	8006cbc <_dtoa_r+0x924>
 8006ba8:	f1c0 001c 	rsb	r0, r0, #28
 8006bac:	9b06      	ldr	r3, [sp, #24]
 8006bae:	4407      	add	r7, r0
 8006bb0:	4403      	add	r3, r0
 8006bb2:	9306      	str	r3, [sp, #24]
 8006bb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bb6:	4403      	add	r3, r0
 8006bb8:	9309      	str	r3, [sp, #36]	; 0x24
 8006bba:	9b06      	ldr	r3, [sp, #24]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	dd05      	ble.n	8006bcc <_dtoa_r+0x834>
 8006bc0:	4651      	mov	r1, sl
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	4628      	mov	r0, r5
 8006bc6:	f000 fbfd 	bl	80073c4 <__lshift>
 8006bca:	4682      	mov	sl, r0
 8006bcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	dd05      	ble.n	8006bde <_dtoa_r+0x846>
 8006bd2:	4621      	mov	r1, r4
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	4628      	mov	r0, r5
 8006bd8:	f000 fbf4 	bl	80073c4 <__lshift>
 8006bdc:	4604      	mov	r4, r0
 8006bde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d070      	beq.n	8006cc6 <_dtoa_r+0x92e>
 8006be4:	4621      	mov	r1, r4
 8006be6:	4650      	mov	r0, sl
 8006be8:	f000 fc58 	bl	800749c <__mcmp>
 8006bec:	2800      	cmp	r0, #0
 8006bee:	da6a      	bge.n	8006cc6 <_dtoa_r+0x92e>
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	4651      	mov	r1, sl
 8006bf4:	220a      	movs	r2, #10
 8006bf6:	4628      	mov	r0, r5
 8006bf8:	f000 fa38 	bl	800706c <__multadd>
 8006bfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bfe:	4682      	mov	sl, r0
 8006c00:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	f000 8193 	beq.w	8006f30 <_dtoa_r+0xb98>
 8006c0a:	4631      	mov	r1, r6
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	220a      	movs	r2, #10
 8006c10:	4628      	mov	r0, r5
 8006c12:	f000 fa2b 	bl	800706c <__multadd>
 8006c16:	f1bb 0f00 	cmp.w	fp, #0
 8006c1a:	4606      	mov	r6, r0
 8006c1c:	f300 8093 	bgt.w	8006d46 <_dtoa_r+0x9ae>
 8006c20:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c22:	2b02      	cmp	r3, #2
 8006c24:	dc57      	bgt.n	8006cd6 <_dtoa_r+0x93e>
 8006c26:	e08e      	b.n	8006d46 <_dtoa_r+0x9ae>
 8006c28:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006c2a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006c2e:	e756      	b.n	8006ade <_dtoa_r+0x746>
 8006c30:	9b02      	ldr	r3, [sp, #8]
 8006c32:	1e5c      	subs	r4, r3, #1
 8006c34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c36:	42a3      	cmp	r3, r4
 8006c38:	bfb7      	itett	lt
 8006c3a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006c3c:	1b1c      	subge	r4, r3, r4
 8006c3e:	1ae2      	sublt	r2, r4, r3
 8006c40:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006c42:	bfbe      	ittt	lt
 8006c44:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006c46:	189b      	addlt	r3, r3, r2
 8006c48:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006c4a:	9b02      	ldr	r3, [sp, #8]
 8006c4c:	bfb8      	it	lt
 8006c4e:	2400      	movlt	r4, #0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	bfbb      	ittet	lt
 8006c54:	9b06      	ldrlt	r3, [sp, #24]
 8006c56:	9a02      	ldrlt	r2, [sp, #8]
 8006c58:	9f06      	ldrge	r7, [sp, #24]
 8006c5a:	1a9f      	sublt	r7, r3, r2
 8006c5c:	bfac      	ite	ge
 8006c5e:	9b02      	ldrge	r3, [sp, #8]
 8006c60:	2300      	movlt	r3, #0
 8006c62:	e73e      	b.n	8006ae2 <_dtoa_r+0x74a>
 8006c64:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006c66:	9f06      	ldr	r7, [sp, #24]
 8006c68:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006c6a:	e745      	b.n	8006af8 <_dtoa_r+0x760>
 8006c6c:	3fe00000 	.word	0x3fe00000
 8006c70:	40240000 	.word	0x40240000
 8006c74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c76:	e76a      	b.n	8006b4e <_dtoa_r+0x7b6>
 8006c78:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	dc19      	bgt.n	8006cb2 <_dtoa_r+0x91a>
 8006c7e:	9b04      	ldr	r3, [sp, #16]
 8006c80:	b9bb      	cbnz	r3, 8006cb2 <_dtoa_r+0x91a>
 8006c82:	9b05      	ldr	r3, [sp, #20]
 8006c84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c88:	b99b      	cbnz	r3, 8006cb2 <_dtoa_r+0x91a>
 8006c8a:	9b05      	ldr	r3, [sp, #20]
 8006c8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c90:	0d1b      	lsrs	r3, r3, #20
 8006c92:	051b      	lsls	r3, r3, #20
 8006c94:	b183      	cbz	r3, 8006cb8 <_dtoa_r+0x920>
 8006c96:	f04f 0801 	mov.w	r8, #1
 8006c9a:	9b06      	ldr	r3, [sp, #24]
 8006c9c:	3301      	adds	r3, #1
 8006c9e:	9306      	str	r3, [sp, #24]
 8006ca0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	9309      	str	r3, [sp, #36]	; 0x24
 8006ca6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	f47f af6a 	bne.w	8006b82 <_dtoa_r+0x7ea>
 8006cae:	2001      	movs	r0, #1
 8006cb0:	e76f      	b.n	8006b92 <_dtoa_r+0x7fa>
 8006cb2:	f04f 0800 	mov.w	r8, #0
 8006cb6:	e7f6      	b.n	8006ca6 <_dtoa_r+0x90e>
 8006cb8:	4698      	mov	r8, r3
 8006cba:	e7f4      	b.n	8006ca6 <_dtoa_r+0x90e>
 8006cbc:	f43f af7d 	beq.w	8006bba <_dtoa_r+0x822>
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	301c      	adds	r0, #28
 8006cc4:	e772      	b.n	8006bac <_dtoa_r+0x814>
 8006cc6:	9b02      	ldr	r3, [sp, #8]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	dc36      	bgt.n	8006d3a <_dtoa_r+0x9a2>
 8006ccc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006cce:	2b02      	cmp	r3, #2
 8006cd0:	dd33      	ble.n	8006d3a <_dtoa_r+0x9a2>
 8006cd2:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006cd6:	f1bb 0f00 	cmp.w	fp, #0
 8006cda:	d10d      	bne.n	8006cf8 <_dtoa_r+0x960>
 8006cdc:	4621      	mov	r1, r4
 8006cde:	465b      	mov	r3, fp
 8006ce0:	2205      	movs	r2, #5
 8006ce2:	4628      	mov	r0, r5
 8006ce4:	f000 f9c2 	bl	800706c <__multadd>
 8006ce8:	4601      	mov	r1, r0
 8006cea:	4604      	mov	r4, r0
 8006cec:	4650      	mov	r0, sl
 8006cee:	f000 fbd5 	bl	800749c <__mcmp>
 8006cf2:	2800      	cmp	r0, #0
 8006cf4:	f73f adb6 	bgt.w	8006864 <_dtoa_r+0x4cc>
 8006cf8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006cfa:	9f08      	ldr	r7, [sp, #32]
 8006cfc:	ea6f 0903 	mvn.w	r9, r3
 8006d00:	f04f 0800 	mov.w	r8, #0
 8006d04:	4621      	mov	r1, r4
 8006d06:	4628      	mov	r0, r5
 8006d08:	f000 f98e 	bl	8007028 <_Bfree>
 8006d0c:	2e00      	cmp	r6, #0
 8006d0e:	f43f aea4 	beq.w	8006a5a <_dtoa_r+0x6c2>
 8006d12:	f1b8 0f00 	cmp.w	r8, #0
 8006d16:	d005      	beq.n	8006d24 <_dtoa_r+0x98c>
 8006d18:	45b0      	cmp	r8, r6
 8006d1a:	d003      	beq.n	8006d24 <_dtoa_r+0x98c>
 8006d1c:	4641      	mov	r1, r8
 8006d1e:	4628      	mov	r0, r5
 8006d20:	f000 f982 	bl	8007028 <_Bfree>
 8006d24:	4631      	mov	r1, r6
 8006d26:	4628      	mov	r0, r5
 8006d28:	f000 f97e 	bl	8007028 <_Bfree>
 8006d2c:	e695      	b.n	8006a5a <_dtoa_r+0x6c2>
 8006d2e:	2400      	movs	r4, #0
 8006d30:	4626      	mov	r6, r4
 8006d32:	e7e1      	b.n	8006cf8 <_dtoa_r+0x960>
 8006d34:	46c1      	mov	r9, r8
 8006d36:	4626      	mov	r6, r4
 8006d38:	e594      	b.n	8006864 <_dtoa_r+0x4cc>
 8006d3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d3c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f000 80fc 	beq.w	8006f3e <_dtoa_r+0xba6>
 8006d46:	2f00      	cmp	r7, #0
 8006d48:	dd05      	ble.n	8006d56 <_dtoa_r+0x9be>
 8006d4a:	4631      	mov	r1, r6
 8006d4c:	463a      	mov	r2, r7
 8006d4e:	4628      	mov	r0, r5
 8006d50:	f000 fb38 	bl	80073c4 <__lshift>
 8006d54:	4606      	mov	r6, r0
 8006d56:	f1b8 0f00 	cmp.w	r8, #0
 8006d5a:	d05c      	beq.n	8006e16 <_dtoa_r+0xa7e>
 8006d5c:	4628      	mov	r0, r5
 8006d5e:	6871      	ldr	r1, [r6, #4]
 8006d60:	f000 f922 	bl	8006fa8 <_Balloc>
 8006d64:	4607      	mov	r7, r0
 8006d66:	b928      	cbnz	r0, 8006d74 <_dtoa_r+0x9dc>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006d6e:	4b7e      	ldr	r3, [pc, #504]	; (8006f68 <_dtoa_r+0xbd0>)
 8006d70:	f7ff bb26 	b.w	80063c0 <_dtoa_r+0x28>
 8006d74:	6932      	ldr	r2, [r6, #16]
 8006d76:	f106 010c 	add.w	r1, r6, #12
 8006d7a:	3202      	adds	r2, #2
 8006d7c:	0092      	lsls	r2, r2, #2
 8006d7e:	300c      	adds	r0, #12
 8006d80:	f7fe fde6 	bl	8005950 <memcpy>
 8006d84:	2201      	movs	r2, #1
 8006d86:	4639      	mov	r1, r7
 8006d88:	4628      	mov	r0, r5
 8006d8a:	f000 fb1b 	bl	80073c4 <__lshift>
 8006d8e:	46b0      	mov	r8, r6
 8006d90:	4606      	mov	r6, r0
 8006d92:	9b08      	ldr	r3, [sp, #32]
 8006d94:	3301      	adds	r3, #1
 8006d96:	9302      	str	r3, [sp, #8]
 8006d98:	9b08      	ldr	r3, [sp, #32]
 8006d9a:	445b      	add	r3, fp
 8006d9c:	930a      	str	r3, [sp, #40]	; 0x28
 8006d9e:	9b04      	ldr	r3, [sp, #16]
 8006da0:	f003 0301 	and.w	r3, r3, #1
 8006da4:	9309      	str	r3, [sp, #36]	; 0x24
 8006da6:	9b02      	ldr	r3, [sp, #8]
 8006da8:	4621      	mov	r1, r4
 8006daa:	4650      	mov	r0, sl
 8006dac:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8006db0:	f7ff fa64 	bl	800627c <quorem>
 8006db4:	4603      	mov	r3, r0
 8006db6:	4641      	mov	r1, r8
 8006db8:	3330      	adds	r3, #48	; 0x30
 8006dba:	9004      	str	r0, [sp, #16]
 8006dbc:	4650      	mov	r0, sl
 8006dbe:	930b      	str	r3, [sp, #44]	; 0x2c
 8006dc0:	f000 fb6c 	bl	800749c <__mcmp>
 8006dc4:	4632      	mov	r2, r6
 8006dc6:	9006      	str	r0, [sp, #24]
 8006dc8:	4621      	mov	r1, r4
 8006dca:	4628      	mov	r0, r5
 8006dcc:	f000 fb82 	bl	80074d4 <__mdiff>
 8006dd0:	68c2      	ldr	r2, [r0, #12]
 8006dd2:	4607      	mov	r7, r0
 8006dd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dd6:	bb02      	cbnz	r2, 8006e1a <_dtoa_r+0xa82>
 8006dd8:	4601      	mov	r1, r0
 8006dda:	4650      	mov	r0, sl
 8006ddc:	f000 fb5e 	bl	800749c <__mcmp>
 8006de0:	4602      	mov	r2, r0
 8006de2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006de4:	4639      	mov	r1, r7
 8006de6:	4628      	mov	r0, r5
 8006de8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006dec:	f000 f91c 	bl	8007028 <_Bfree>
 8006df0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006df2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006df4:	9f02      	ldr	r7, [sp, #8]
 8006df6:	ea43 0102 	orr.w	r1, r3, r2
 8006dfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dfc:	430b      	orrs	r3, r1
 8006dfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e00:	d10d      	bne.n	8006e1e <_dtoa_r+0xa86>
 8006e02:	2b39      	cmp	r3, #57	; 0x39
 8006e04:	d027      	beq.n	8006e56 <_dtoa_r+0xabe>
 8006e06:	9a06      	ldr	r2, [sp, #24]
 8006e08:	2a00      	cmp	r2, #0
 8006e0a:	dd01      	ble.n	8006e10 <_dtoa_r+0xa78>
 8006e0c:	9b04      	ldr	r3, [sp, #16]
 8006e0e:	3331      	adds	r3, #49	; 0x31
 8006e10:	f88b 3000 	strb.w	r3, [fp]
 8006e14:	e776      	b.n	8006d04 <_dtoa_r+0x96c>
 8006e16:	4630      	mov	r0, r6
 8006e18:	e7b9      	b.n	8006d8e <_dtoa_r+0x9f6>
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	e7e2      	b.n	8006de4 <_dtoa_r+0xa4c>
 8006e1e:	9906      	ldr	r1, [sp, #24]
 8006e20:	2900      	cmp	r1, #0
 8006e22:	db04      	blt.n	8006e2e <_dtoa_r+0xa96>
 8006e24:	9822      	ldr	r0, [sp, #136]	; 0x88
 8006e26:	4301      	orrs	r1, r0
 8006e28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e2a:	4301      	orrs	r1, r0
 8006e2c:	d120      	bne.n	8006e70 <_dtoa_r+0xad8>
 8006e2e:	2a00      	cmp	r2, #0
 8006e30:	ddee      	ble.n	8006e10 <_dtoa_r+0xa78>
 8006e32:	4651      	mov	r1, sl
 8006e34:	2201      	movs	r2, #1
 8006e36:	4628      	mov	r0, r5
 8006e38:	9302      	str	r3, [sp, #8]
 8006e3a:	f000 fac3 	bl	80073c4 <__lshift>
 8006e3e:	4621      	mov	r1, r4
 8006e40:	4682      	mov	sl, r0
 8006e42:	f000 fb2b 	bl	800749c <__mcmp>
 8006e46:	2800      	cmp	r0, #0
 8006e48:	9b02      	ldr	r3, [sp, #8]
 8006e4a:	dc02      	bgt.n	8006e52 <_dtoa_r+0xaba>
 8006e4c:	d1e0      	bne.n	8006e10 <_dtoa_r+0xa78>
 8006e4e:	07da      	lsls	r2, r3, #31
 8006e50:	d5de      	bpl.n	8006e10 <_dtoa_r+0xa78>
 8006e52:	2b39      	cmp	r3, #57	; 0x39
 8006e54:	d1da      	bne.n	8006e0c <_dtoa_r+0xa74>
 8006e56:	2339      	movs	r3, #57	; 0x39
 8006e58:	f88b 3000 	strb.w	r3, [fp]
 8006e5c:	463b      	mov	r3, r7
 8006e5e:	461f      	mov	r7, r3
 8006e60:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006e64:	3b01      	subs	r3, #1
 8006e66:	2a39      	cmp	r2, #57	; 0x39
 8006e68:	d050      	beq.n	8006f0c <_dtoa_r+0xb74>
 8006e6a:	3201      	adds	r2, #1
 8006e6c:	701a      	strb	r2, [r3, #0]
 8006e6e:	e749      	b.n	8006d04 <_dtoa_r+0x96c>
 8006e70:	2a00      	cmp	r2, #0
 8006e72:	dd03      	ble.n	8006e7c <_dtoa_r+0xae4>
 8006e74:	2b39      	cmp	r3, #57	; 0x39
 8006e76:	d0ee      	beq.n	8006e56 <_dtoa_r+0xabe>
 8006e78:	3301      	adds	r3, #1
 8006e7a:	e7c9      	b.n	8006e10 <_dtoa_r+0xa78>
 8006e7c:	9a02      	ldr	r2, [sp, #8]
 8006e7e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006e80:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006e84:	428a      	cmp	r2, r1
 8006e86:	d02a      	beq.n	8006ede <_dtoa_r+0xb46>
 8006e88:	4651      	mov	r1, sl
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	220a      	movs	r2, #10
 8006e8e:	4628      	mov	r0, r5
 8006e90:	f000 f8ec 	bl	800706c <__multadd>
 8006e94:	45b0      	cmp	r8, r6
 8006e96:	4682      	mov	sl, r0
 8006e98:	f04f 0300 	mov.w	r3, #0
 8006e9c:	f04f 020a 	mov.w	r2, #10
 8006ea0:	4641      	mov	r1, r8
 8006ea2:	4628      	mov	r0, r5
 8006ea4:	d107      	bne.n	8006eb6 <_dtoa_r+0xb1e>
 8006ea6:	f000 f8e1 	bl	800706c <__multadd>
 8006eaa:	4680      	mov	r8, r0
 8006eac:	4606      	mov	r6, r0
 8006eae:	9b02      	ldr	r3, [sp, #8]
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	9302      	str	r3, [sp, #8]
 8006eb4:	e777      	b.n	8006da6 <_dtoa_r+0xa0e>
 8006eb6:	f000 f8d9 	bl	800706c <__multadd>
 8006eba:	4631      	mov	r1, r6
 8006ebc:	4680      	mov	r8, r0
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	220a      	movs	r2, #10
 8006ec2:	4628      	mov	r0, r5
 8006ec4:	f000 f8d2 	bl	800706c <__multadd>
 8006ec8:	4606      	mov	r6, r0
 8006eca:	e7f0      	b.n	8006eae <_dtoa_r+0xb16>
 8006ecc:	f1bb 0f00 	cmp.w	fp, #0
 8006ed0:	bfcc      	ite	gt
 8006ed2:	465f      	movgt	r7, fp
 8006ed4:	2701      	movle	r7, #1
 8006ed6:	f04f 0800 	mov.w	r8, #0
 8006eda:	9a08      	ldr	r2, [sp, #32]
 8006edc:	4417      	add	r7, r2
 8006ede:	4651      	mov	r1, sl
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	4628      	mov	r0, r5
 8006ee4:	9302      	str	r3, [sp, #8]
 8006ee6:	f000 fa6d 	bl	80073c4 <__lshift>
 8006eea:	4621      	mov	r1, r4
 8006eec:	4682      	mov	sl, r0
 8006eee:	f000 fad5 	bl	800749c <__mcmp>
 8006ef2:	2800      	cmp	r0, #0
 8006ef4:	dcb2      	bgt.n	8006e5c <_dtoa_r+0xac4>
 8006ef6:	d102      	bne.n	8006efe <_dtoa_r+0xb66>
 8006ef8:	9b02      	ldr	r3, [sp, #8]
 8006efa:	07db      	lsls	r3, r3, #31
 8006efc:	d4ae      	bmi.n	8006e5c <_dtoa_r+0xac4>
 8006efe:	463b      	mov	r3, r7
 8006f00:	461f      	mov	r7, r3
 8006f02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f06:	2a30      	cmp	r2, #48	; 0x30
 8006f08:	d0fa      	beq.n	8006f00 <_dtoa_r+0xb68>
 8006f0a:	e6fb      	b.n	8006d04 <_dtoa_r+0x96c>
 8006f0c:	9a08      	ldr	r2, [sp, #32]
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	d1a5      	bne.n	8006e5e <_dtoa_r+0xac6>
 8006f12:	2331      	movs	r3, #49	; 0x31
 8006f14:	f109 0901 	add.w	r9, r9, #1
 8006f18:	7013      	strb	r3, [r2, #0]
 8006f1a:	e6f3      	b.n	8006d04 <_dtoa_r+0x96c>
 8006f1c:	4b13      	ldr	r3, [pc, #76]	; (8006f6c <_dtoa_r+0xbd4>)
 8006f1e:	f7ff baa7 	b.w	8006470 <_dtoa_r+0xd8>
 8006f22:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	f47f aa80 	bne.w	800642a <_dtoa_r+0x92>
 8006f2a:	4b11      	ldr	r3, [pc, #68]	; (8006f70 <_dtoa_r+0xbd8>)
 8006f2c:	f7ff baa0 	b.w	8006470 <_dtoa_r+0xd8>
 8006f30:	f1bb 0f00 	cmp.w	fp, #0
 8006f34:	dc03      	bgt.n	8006f3e <_dtoa_r+0xba6>
 8006f36:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006f38:	2b02      	cmp	r3, #2
 8006f3a:	f73f aecc 	bgt.w	8006cd6 <_dtoa_r+0x93e>
 8006f3e:	9f08      	ldr	r7, [sp, #32]
 8006f40:	4621      	mov	r1, r4
 8006f42:	4650      	mov	r0, sl
 8006f44:	f7ff f99a 	bl	800627c <quorem>
 8006f48:	9a08      	ldr	r2, [sp, #32]
 8006f4a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006f4e:	f807 3b01 	strb.w	r3, [r7], #1
 8006f52:	1aba      	subs	r2, r7, r2
 8006f54:	4593      	cmp	fp, r2
 8006f56:	ddb9      	ble.n	8006ecc <_dtoa_r+0xb34>
 8006f58:	4651      	mov	r1, sl
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	220a      	movs	r2, #10
 8006f5e:	4628      	mov	r0, r5
 8006f60:	f000 f884 	bl	800706c <__multadd>
 8006f64:	4682      	mov	sl, r0
 8006f66:	e7eb      	b.n	8006f40 <_dtoa_r+0xba8>
 8006f68:	0800b97f 	.word	0x0800b97f
 8006f6c:	0800b8d8 	.word	0x0800b8d8
 8006f70:	0800b8fc 	.word	0x0800b8fc

08006f74 <_localeconv_r>:
 8006f74:	4800      	ldr	r0, [pc, #0]	; (8006f78 <_localeconv_r+0x4>)
 8006f76:	4770      	bx	lr
 8006f78:	200001f4 	.word	0x200001f4

08006f7c <malloc>:
 8006f7c:	4b02      	ldr	r3, [pc, #8]	; (8006f88 <malloc+0xc>)
 8006f7e:	4601      	mov	r1, r0
 8006f80:	6818      	ldr	r0, [r3, #0]
 8006f82:	f000 bbed 	b.w	8007760 <_malloc_r>
 8006f86:	bf00      	nop
 8006f88:	200000a0 	.word	0x200000a0

08006f8c <memchr>:
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	b510      	push	{r4, lr}
 8006f90:	b2c9      	uxtb	r1, r1
 8006f92:	4402      	add	r2, r0
 8006f94:	4293      	cmp	r3, r2
 8006f96:	4618      	mov	r0, r3
 8006f98:	d101      	bne.n	8006f9e <memchr+0x12>
 8006f9a:	2000      	movs	r0, #0
 8006f9c:	e003      	b.n	8006fa6 <memchr+0x1a>
 8006f9e:	7804      	ldrb	r4, [r0, #0]
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	428c      	cmp	r4, r1
 8006fa4:	d1f6      	bne.n	8006f94 <memchr+0x8>
 8006fa6:	bd10      	pop	{r4, pc}

08006fa8 <_Balloc>:
 8006fa8:	b570      	push	{r4, r5, r6, lr}
 8006faa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006fac:	4604      	mov	r4, r0
 8006fae:	460d      	mov	r5, r1
 8006fb0:	b976      	cbnz	r6, 8006fd0 <_Balloc+0x28>
 8006fb2:	2010      	movs	r0, #16
 8006fb4:	f7ff ffe2 	bl	8006f7c <malloc>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	6260      	str	r0, [r4, #36]	; 0x24
 8006fbc:	b920      	cbnz	r0, 8006fc8 <_Balloc+0x20>
 8006fbe:	2166      	movs	r1, #102	; 0x66
 8006fc0:	4b17      	ldr	r3, [pc, #92]	; (8007020 <_Balloc+0x78>)
 8006fc2:	4818      	ldr	r0, [pc, #96]	; (8007024 <_Balloc+0x7c>)
 8006fc4:	f000 fd92 	bl	8007aec <__assert_func>
 8006fc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006fcc:	6006      	str	r6, [r0, #0]
 8006fce:	60c6      	str	r6, [r0, #12]
 8006fd0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006fd2:	68f3      	ldr	r3, [r6, #12]
 8006fd4:	b183      	cbz	r3, 8006ff8 <_Balloc+0x50>
 8006fd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006fde:	b9b8      	cbnz	r0, 8007010 <_Balloc+0x68>
 8006fe0:	2101      	movs	r1, #1
 8006fe2:	fa01 f605 	lsl.w	r6, r1, r5
 8006fe6:	1d72      	adds	r2, r6, #5
 8006fe8:	4620      	mov	r0, r4
 8006fea:	0092      	lsls	r2, r2, #2
 8006fec:	f000 fb5e 	bl	80076ac <_calloc_r>
 8006ff0:	b160      	cbz	r0, 800700c <_Balloc+0x64>
 8006ff2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006ff6:	e00e      	b.n	8007016 <_Balloc+0x6e>
 8006ff8:	2221      	movs	r2, #33	; 0x21
 8006ffa:	2104      	movs	r1, #4
 8006ffc:	4620      	mov	r0, r4
 8006ffe:	f000 fb55 	bl	80076ac <_calloc_r>
 8007002:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007004:	60f0      	str	r0, [r6, #12]
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d1e4      	bne.n	8006fd6 <_Balloc+0x2e>
 800700c:	2000      	movs	r0, #0
 800700e:	bd70      	pop	{r4, r5, r6, pc}
 8007010:	6802      	ldr	r2, [r0, #0]
 8007012:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007016:	2300      	movs	r3, #0
 8007018:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800701c:	e7f7      	b.n	800700e <_Balloc+0x66>
 800701e:	bf00      	nop
 8007020:	0800b909 	.word	0x0800b909
 8007024:	0800b990 	.word	0x0800b990

08007028 <_Bfree>:
 8007028:	b570      	push	{r4, r5, r6, lr}
 800702a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800702c:	4605      	mov	r5, r0
 800702e:	460c      	mov	r4, r1
 8007030:	b976      	cbnz	r6, 8007050 <_Bfree+0x28>
 8007032:	2010      	movs	r0, #16
 8007034:	f7ff ffa2 	bl	8006f7c <malloc>
 8007038:	4602      	mov	r2, r0
 800703a:	6268      	str	r0, [r5, #36]	; 0x24
 800703c:	b920      	cbnz	r0, 8007048 <_Bfree+0x20>
 800703e:	218a      	movs	r1, #138	; 0x8a
 8007040:	4b08      	ldr	r3, [pc, #32]	; (8007064 <_Bfree+0x3c>)
 8007042:	4809      	ldr	r0, [pc, #36]	; (8007068 <_Bfree+0x40>)
 8007044:	f000 fd52 	bl	8007aec <__assert_func>
 8007048:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800704c:	6006      	str	r6, [r0, #0]
 800704e:	60c6      	str	r6, [r0, #12]
 8007050:	b13c      	cbz	r4, 8007062 <_Bfree+0x3a>
 8007052:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007054:	6862      	ldr	r2, [r4, #4]
 8007056:	68db      	ldr	r3, [r3, #12]
 8007058:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800705c:	6021      	str	r1, [r4, #0]
 800705e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007062:	bd70      	pop	{r4, r5, r6, pc}
 8007064:	0800b909 	.word	0x0800b909
 8007068:	0800b990 	.word	0x0800b990

0800706c <__multadd>:
 800706c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007070:	4698      	mov	r8, r3
 8007072:	460c      	mov	r4, r1
 8007074:	2300      	movs	r3, #0
 8007076:	690e      	ldr	r6, [r1, #16]
 8007078:	4607      	mov	r7, r0
 800707a:	f101 0014 	add.w	r0, r1, #20
 800707e:	6805      	ldr	r5, [r0, #0]
 8007080:	3301      	adds	r3, #1
 8007082:	b2a9      	uxth	r1, r5
 8007084:	fb02 8101 	mla	r1, r2, r1, r8
 8007088:	0c2d      	lsrs	r5, r5, #16
 800708a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800708e:	fb02 c505 	mla	r5, r2, r5, ip
 8007092:	b289      	uxth	r1, r1
 8007094:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007098:	429e      	cmp	r6, r3
 800709a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800709e:	f840 1b04 	str.w	r1, [r0], #4
 80070a2:	dcec      	bgt.n	800707e <__multadd+0x12>
 80070a4:	f1b8 0f00 	cmp.w	r8, #0
 80070a8:	d022      	beq.n	80070f0 <__multadd+0x84>
 80070aa:	68a3      	ldr	r3, [r4, #8]
 80070ac:	42b3      	cmp	r3, r6
 80070ae:	dc19      	bgt.n	80070e4 <__multadd+0x78>
 80070b0:	6861      	ldr	r1, [r4, #4]
 80070b2:	4638      	mov	r0, r7
 80070b4:	3101      	adds	r1, #1
 80070b6:	f7ff ff77 	bl	8006fa8 <_Balloc>
 80070ba:	4605      	mov	r5, r0
 80070bc:	b928      	cbnz	r0, 80070ca <__multadd+0x5e>
 80070be:	4602      	mov	r2, r0
 80070c0:	21b5      	movs	r1, #181	; 0xb5
 80070c2:	4b0d      	ldr	r3, [pc, #52]	; (80070f8 <__multadd+0x8c>)
 80070c4:	480d      	ldr	r0, [pc, #52]	; (80070fc <__multadd+0x90>)
 80070c6:	f000 fd11 	bl	8007aec <__assert_func>
 80070ca:	6922      	ldr	r2, [r4, #16]
 80070cc:	f104 010c 	add.w	r1, r4, #12
 80070d0:	3202      	adds	r2, #2
 80070d2:	0092      	lsls	r2, r2, #2
 80070d4:	300c      	adds	r0, #12
 80070d6:	f7fe fc3b 	bl	8005950 <memcpy>
 80070da:	4621      	mov	r1, r4
 80070dc:	4638      	mov	r0, r7
 80070de:	f7ff ffa3 	bl	8007028 <_Bfree>
 80070e2:	462c      	mov	r4, r5
 80070e4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80070e8:	3601      	adds	r6, #1
 80070ea:	f8c3 8014 	str.w	r8, [r3, #20]
 80070ee:	6126      	str	r6, [r4, #16]
 80070f0:	4620      	mov	r0, r4
 80070f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070f6:	bf00      	nop
 80070f8:	0800b97f 	.word	0x0800b97f
 80070fc:	0800b990 	.word	0x0800b990

08007100 <__hi0bits>:
 8007100:	0c02      	lsrs	r2, r0, #16
 8007102:	0412      	lsls	r2, r2, #16
 8007104:	4603      	mov	r3, r0
 8007106:	b9ca      	cbnz	r2, 800713c <__hi0bits+0x3c>
 8007108:	0403      	lsls	r3, r0, #16
 800710a:	2010      	movs	r0, #16
 800710c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007110:	bf04      	itt	eq
 8007112:	021b      	lsleq	r3, r3, #8
 8007114:	3008      	addeq	r0, #8
 8007116:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800711a:	bf04      	itt	eq
 800711c:	011b      	lsleq	r3, r3, #4
 800711e:	3004      	addeq	r0, #4
 8007120:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007124:	bf04      	itt	eq
 8007126:	009b      	lsleq	r3, r3, #2
 8007128:	3002      	addeq	r0, #2
 800712a:	2b00      	cmp	r3, #0
 800712c:	db05      	blt.n	800713a <__hi0bits+0x3a>
 800712e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007132:	f100 0001 	add.w	r0, r0, #1
 8007136:	bf08      	it	eq
 8007138:	2020      	moveq	r0, #32
 800713a:	4770      	bx	lr
 800713c:	2000      	movs	r0, #0
 800713e:	e7e5      	b.n	800710c <__hi0bits+0xc>

08007140 <__lo0bits>:
 8007140:	6803      	ldr	r3, [r0, #0]
 8007142:	4602      	mov	r2, r0
 8007144:	f013 0007 	ands.w	r0, r3, #7
 8007148:	d00b      	beq.n	8007162 <__lo0bits+0x22>
 800714a:	07d9      	lsls	r1, r3, #31
 800714c:	d422      	bmi.n	8007194 <__lo0bits+0x54>
 800714e:	0798      	lsls	r0, r3, #30
 8007150:	bf49      	itett	mi
 8007152:	085b      	lsrmi	r3, r3, #1
 8007154:	089b      	lsrpl	r3, r3, #2
 8007156:	2001      	movmi	r0, #1
 8007158:	6013      	strmi	r3, [r2, #0]
 800715a:	bf5c      	itt	pl
 800715c:	2002      	movpl	r0, #2
 800715e:	6013      	strpl	r3, [r2, #0]
 8007160:	4770      	bx	lr
 8007162:	b299      	uxth	r1, r3
 8007164:	b909      	cbnz	r1, 800716a <__lo0bits+0x2a>
 8007166:	2010      	movs	r0, #16
 8007168:	0c1b      	lsrs	r3, r3, #16
 800716a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800716e:	bf04      	itt	eq
 8007170:	0a1b      	lsreq	r3, r3, #8
 8007172:	3008      	addeq	r0, #8
 8007174:	0719      	lsls	r1, r3, #28
 8007176:	bf04      	itt	eq
 8007178:	091b      	lsreq	r3, r3, #4
 800717a:	3004      	addeq	r0, #4
 800717c:	0799      	lsls	r1, r3, #30
 800717e:	bf04      	itt	eq
 8007180:	089b      	lsreq	r3, r3, #2
 8007182:	3002      	addeq	r0, #2
 8007184:	07d9      	lsls	r1, r3, #31
 8007186:	d403      	bmi.n	8007190 <__lo0bits+0x50>
 8007188:	085b      	lsrs	r3, r3, #1
 800718a:	f100 0001 	add.w	r0, r0, #1
 800718e:	d003      	beq.n	8007198 <__lo0bits+0x58>
 8007190:	6013      	str	r3, [r2, #0]
 8007192:	4770      	bx	lr
 8007194:	2000      	movs	r0, #0
 8007196:	4770      	bx	lr
 8007198:	2020      	movs	r0, #32
 800719a:	4770      	bx	lr

0800719c <__i2b>:
 800719c:	b510      	push	{r4, lr}
 800719e:	460c      	mov	r4, r1
 80071a0:	2101      	movs	r1, #1
 80071a2:	f7ff ff01 	bl	8006fa8 <_Balloc>
 80071a6:	4602      	mov	r2, r0
 80071a8:	b928      	cbnz	r0, 80071b6 <__i2b+0x1a>
 80071aa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80071ae:	4b04      	ldr	r3, [pc, #16]	; (80071c0 <__i2b+0x24>)
 80071b0:	4804      	ldr	r0, [pc, #16]	; (80071c4 <__i2b+0x28>)
 80071b2:	f000 fc9b 	bl	8007aec <__assert_func>
 80071b6:	2301      	movs	r3, #1
 80071b8:	6144      	str	r4, [r0, #20]
 80071ba:	6103      	str	r3, [r0, #16]
 80071bc:	bd10      	pop	{r4, pc}
 80071be:	bf00      	nop
 80071c0:	0800b97f 	.word	0x0800b97f
 80071c4:	0800b990 	.word	0x0800b990

080071c8 <__multiply>:
 80071c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071cc:	4614      	mov	r4, r2
 80071ce:	690a      	ldr	r2, [r1, #16]
 80071d0:	6923      	ldr	r3, [r4, #16]
 80071d2:	460d      	mov	r5, r1
 80071d4:	429a      	cmp	r2, r3
 80071d6:	bfbe      	ittt	lt
 80071d8:	460b      	movlt	r3, r1
 80071da:	4625      	movlt	r5, r4
 80071dc:	461c      	movlt	r4, r3
 80071de:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80071e2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80071e6:	68ab      	ldr	r3, [r5, #8]
 80071e8:	6869      	ldr	r1, [r5, #4]
 80071ea:	eb0a 0709 	add.w	r7, sl, r9
 80071ee:	42bb      	cmp	r3, r7
 80071f0:	b085      	sub	sp, #20
 80071f2:	bfb8      	it	lt
 80071f4:	3101      	addlt	r1, #1
 80071f6:	f7ff fed7 	bl	8006fa8 <_Balloc>
 80071fa:	b930      	cbnz	r0, 800720a <__multiply+0x42>
 80071fc:	4602      	mov	r2, r0
 80071fe:	f240 115d 	movw	r1, #349	; 0x15d
 8007202:	4b41      	ldr	r3, [pc, #260]	; (8007308 <__multiply+0x140>)
 8007204:	4841      	ldr	r0, [pc, #260]	; (800730c <__multiply+0x144>)
 8007206:	f000 fc71 	bl	8007aec <__assert_func>
 800720a:	f100 0614 	add.w	r6, r0, #20
 800720e:	4633      	mov	r3, r6
 8007210:	2200      	movs	r2, #0
 8007212:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007216:	4543      	cmp	r3, r8
 8007218:	d31e      	bcc.n	8007258 <__multiply+0x90>
 800721a:	f105 0c14 	add.w	ip, r5, #20
 800721e:	f104 0314 	add.w	r3, r4, #20
 8007222:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007226:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800722a:	9202      	str	r2, [sp, #8]
 800722c:	ebac 0205 	sub.w	r2, ip, r5
 8007230:	3a15      	subs	r2, #21
 8007232:	f022 0203 	bic.w	r2, r2, #3
 8007236:	3204      	adds	r2, #4
 8007238:	f105 0115 	add.w	r1, r5, #21
 800723c:	458c      	cmp	ip, r1
 800723e:	bf38      	it	cc
 8007240:	2204      	movcc	r2, #4
 8007242:	9201      	str	r2, [sp, #4]
 8007244:	9a02      	ldr	r2, [sp, #8]
 8007246:	9303      	str	r3, [sp, #12]
 8007248:	429a      	cmp	r2, r3
 800724a:	d808      	bhi.n	800725e <__multiply+0x96>
 800724c:	2f00      	cmp	r7, #0
 800724e:	dc55      	bgt.n	80072fc <__multiply+0x134>
 8007250:	6107      	str	r7, [r0, #16]
 8007252:	b005      	add	sp, #20
 8007254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007258:	f843 2b04 	str.w	r2, [r3], #4
 800725c:	e7db      	b.n	8007216 <__multiply+0x4e>
 800725e:	f8b3 a000 	ldrh.w	sl, [r3]
 8007262:	f1ba 0f00 	cmp.w	sl, #0
 8007266:	d020      	beq.n	80072aa <__multiply+0xe2>
 8007268:	46b1      	mov	r9, r6
 800726a:	2200      	movs	r2, #0
 800726c:	f105 0e14 	add.w	lr, r5, #20
 8007270:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007274:	f8d9 b000 	ldr.w	fp, [r9]
 8007278:	b2a1      	uxth	r1, r4
 800727a:	fa1f fb8b 	uxth.w	fp, fp
 800727e:	fb0a b101 	mla	r1, sl, r1, fp
 8007282:	4411      	add	r1, r2
 8007284:	f8d9 2000 	ldr.w	r2, [r9]
 8007288:	0c24      	lsrs	r4, r4, #16
 800728a:	0c12      	lsrs	r2, r2, #16
 800728c:	fb0a 2404 	mla	r4, sl, r4, r2
 8007290:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007294:	b289      	uxth	r1, r1
 8007296:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800729a:	45f4      	cmp	ip, lr
 800729c:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80072a0:	f849 1b04 	str.w	r1, [r9], #4
 80072a4:	d8e4      	bhi.n	8007270 <__multiply+0xa8>
 80072a6:	9901      	ldr	r1, [sp, #4]
 80072a8:	5072      	str	r2, [r6, r1]
 80072aa:	9a03      	ldr	r2, [sp, #12]
 80072ac:	3304      	adds	r3, #4
 80072ae:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80072b2:	f1b9 0f00 	cmp.w	r9, #0
 80072b6:	d01f      	beq.n	80072f8 <__multiply+0x130>
 80072b8:	46b6      	mov	lr, r6
 80072ba:	f04f 0a00 	mov.w	sl, #0
 80072be:	6834      	ldr	r4, [r6, #0]
 80072c0:	f105 0114 	add.w	r1, r5, #20
 80072c4:	880a      	ldrh	r2, [r1, #0]
 80072c6:	f8be b002 	ldrh.w	fp, [lr, #2]
 80072ca:	b2a4      	uxth	r4, r4
 80072cc:	fb09 b202 	mla	r2, r9, r2, fp
 80072d0:	4492      	add	sl, r2
 80072d2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80072d6:	f84e 4b04 	str.w	r4, [lr], #4
 80072da:	f851 4b04 	ldr.w	r4, [r1], #4
 80072de:	f8be 2000 	ldrh.w	r2, [lr]
 80072e2:	0c24      	lsrs	r4, r4, #16
 80072e4:	fb09 2404 	mla	r4, r9, r4, r2
 80072e8:	458c      	cmp	ip, r1
 80072ea:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80072ee:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80072f2:	d8e7      	bhi.n	80072c4 <__multiply+0xfc>
 80072f4:	9a01      	ldr	r2, [sp, #4]
 80072f6:	50b4      	str	r4, [r6, r2]
 80072f8:	3604      	adds	r6, #4
 80072fa:	e7a3      	b.n	8007244 <__multiply+0x7c>
 80072fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007300:	2b00      	cmp	r3, #0
 8007302:	d1a5      	bne.n	8007250 <__multiply+0x88>
 8007304:	3f01      	subs	r7, #1
 8007306:	e7a1      	b.n	800724c <__multiply+0x84>
 8007308:	0800b97f 	.word	0x0800b97f
 800730c:	0800b990 	.word	0x0800b990

08007310 <__pow5mult>:
 8007310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007314:	4615      	mov	r5, r2
 8007316:	f012 0203 	ands.w	r2, r2, #3
 800731a:	4606      	mov	r6, r0
 800731c:	460f      	mov	r7, r1
 800731e:	d007      	beq.n	8007330 <__pow5mult+0x20>
 8007320:	4c25      	ldr	r4, [pc, #148]	; (80073b8 <__pow5mult+0xa8>)
 8007322:	3a01      	subs	r2, #1
 8007324:	2300      	movs	r3, #0
 8007326:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800732a:	f7ff fe9f 	bl	800706c <__multadd>
 800732e:	4607      	mov	r7, r0
 8007330:	10ad      	asrs	r5, r5, #2
 8007332:	d03d      	beq.n	80073b0 <__pow5mult+0xa0>
 8007334:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007336:	b97c      	cbnz	r4, 8007358 <__pow5mult+0x48>
 8007338:	2010      	movs	r0, #16
 800733a:	f7ff fe1f 	bl	8006f7c <malloc>
 800733e:	4602      	mov	r2, r0
 8007340:	6270      	str	r0, [r6, #36]	; 0x24
 8007342:	b928      	cbnz	r0, 8007350 <__pow5mult+0x40>
 8007344:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007348:	4b1c      	ldr	r3, [pc, #112]	; (80073bc <__pow5mult+0xac>)
 800734a:	481d      	ldr	r0, [pc, #116]	; (80073c0 <__pow5mult+0xb0>)
 800734c:	f000 fbce 	bl	8007aec <__assert_func>
 8007350:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007354:	6004      	str	r4, [r0, #0]
 8007356:	60c4      	str	r4, [r0, #12]
 8007358:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800735c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007360:	b94c      	cbnz	r4, 8007376 <__pow5mult+0x66>
 8007362:	f240 2171 	movw	r1, #625	; 0x271
 8007366:	4630      	mov	r0, r6
 8007368:	f7ff ff18 	bl	800719c <__i2b>
 800736c:	2300      	movs	r3, #0
 800736e:	4604      	mov	r4, r0
 8007370:	f8c8 0008 	str.w	r0, [r8, #8]
 8007374:	6003      	str	r3, [r0, #0]
 8007376:	f04f 0900 	mov.w	r9, #0
 800737a:	07eb      	lsls	r3, r5, #31
 800737c:	d50a      	bpl.n	8007394 <__pow5mult+0x84>
 800737e:	4639      	mov	r1, r7
 8007380:	4622      	mov	r2, r4
 8007382:	4630      	mov	r0, r6
 8007384:	f7ff ff20 	bl	80071c8 <__multiply>
 8007388:	4680      	mov	r8, r0
 800738a:	4639      	mov	r1, r7
 800738c:	4630      	mov	r0, r6
 800738e:	f7ff fe4b 	bl	8007028 <_Bfree>
 8007392:	4647      	mov	r7, r8
 8007394:	106d      	asrs	r5, r5, #1
 8007396:	d00b      	beq.n	80073b0 <__pow5mult+0xa0>
 8007398:	6820      	ldr	r0, [r4, #0]
 800739a:	b938      	cbnz	r0, 80073ac <__pow5mult+0x9c>
 800739c:	4622      	mov	r2, r4
 800739e:	4621      	mov	r1, r4
 80073a0:	4630      	mov	r0, r6
 80073a2:	f7ff ff11 	bl	80071c8 <__multiply>
 80073a6:	6020      	str	r0, [r4, #0]
 80073a8:	f8c0 9000 	str.w	r9, [r0]
 80073ac:	4604      	mov	r4, r0
 80073ae:	e7e4      	b.n	800737a <__pow5mult+0x6a>
 80073b0:	4638      	mov	r0, r7
 80073b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073b6:	bf00      	nop
 80073b8:	0800bae0 	.word	0x0800bae0
 80073bc:	0800b909 	.word	0x0800b909
 80073c0:	0800b990 	.word	0x0800b990

080073c4 <__lshift>:
 80073c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073c8:	460c      	mov	r4, r1
 80073ca:	4607      	mov	r7, r0
 80073cc:	4691      	mov	r9, r2
 80073ce:	6923      	ldr	r3, [r4, #16]
 80073d0:	6849      	ldr	r1, [r1, #4]
 80073d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80073d6:	68a3      	ldr	r3, [r4, #8]
 80073d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80073dc:	f108 0601 	add.w	r6, r8, #1
 80073e0:	42b3      	cmp	r3, r6
 80073e2:	db0b      	blt.n	80073fc <__lshift+0x38>
 80073e4:	4638      	mov	r0, r7
 80073e6:	f7ff fddf 	bl	8006fa8 <_Balloc>
 80073ea:	4605      	mov	r5, r0
 80073ec:	b948      	cbnz	r0, 8007402 <__lshift+0x3e>
 80073ee:	4602      	mov	r2, r0
 80073f0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80073f4:	4b27      	ldr	r3, [pc, #156]	; (8007494 <__lshift+0xd0>)
 80073f6:	4828      	ldr	r0, [pc, #160]	; (8007498 <__lshift+0xd4>)
 80073f8:	f000 fb78 	bl	8007aec <__assert_func>
 80073fc:	3101      	adds	r1, #1
 80073fe:	005b      	lsls	r3, r3, #1
 8007400:	e7ee      	b.n	80073e0 <__lshift+0x1c>
 8007402:	2300      	movs	r3, #0
 8007404:	f100 0114 	add.w	r1, r0, #20
 8007408:	f100 0210 	add.w	r2, r0, #16
 800740c:	4618      	mov	r0, r3
 800740e:	4553      	cmp	r3, sl
 8007410:	db33      	blt.n	800747a <__lshift+0xb6>
 8007412:	6920      	ldr	r0, [r4, #16]
 8007414:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007418:	f104 0314 	add.w	r3, r4, #20
 800741c:	f019 091f 	ands.w	r9, r9, #31
 8007420:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007424:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007428:	d02b      	beq.n	8007482 <__lshift+0xbe>
 800742a:	468a      	mov	sl, r1
 800742c:	2200      	movs	r2, #0
 800742e:	f1c9 0e20 	rsb	lr, r9, #32
 8007432:	6818      	ldr	r0, [r3, #0]
 8007434:	fa00 f009 	lsl.w	r0, r0, r9
 8007438:	4302      	orrs	r2, r0
 800743a:	f84a 2b04 	str.w	r2, [sl], #4
 800743e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007442:	459c      	cmp	ip, r3
 8007444:	fa22 f20e 	lsr.w	r2, r2, lr
 8007448:	d8f3      	bhi.n	8007432 <__lshift+0x6e>
 800744a:	ebac 0304 	sub.w	r3, ip, r4
 800744e:	3b15      	subs	r3, #21
 8007450:	f023 0303 	bic.w	r3, r3, #3
 8007454:	3304      	adds	r3, #4
 8007456:	f104 0015 	add.w	r0, r4, #21
 800745a:	4584      	cmp	ip, r0
 800745c:	bf38      	it	cc
 800745e:	2304      	movcc	r3, #4
 8007460:	50ca      	str	r2, [r1, r3]
 8007462:	b10a      	cbz	r2, 8007468 <__lshift+0xa4>
 8007464:	f108 0602 	add.w	r6, r8, #2
 8007468:	3e01      	subs	r6, #1
 800746a:	4638      	mov	r0, r7
 800746c:	4621      	mov	r1, r4
 800746e:	612e      	str	r6, [r5, #16]
 8007470:	f7ff fdda 	bl	8007028 <_Bfree>
 8007474:	4628      	mov	r0, r5
 8007476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800747a:	f842 0f04 	str.w	r0, [r2, #4]!
 800747e:	3301      	adds	r3, #1
 8007480:	e7c5      	b.n	800740e <__lshift+0x4a>
 8007482:	3904      	subs	r1, #4
 8007484:	f853 2b04 	ldr.w	r2, [r3], #4
 8007488:	459c      	cmp	ip, r3
 800748a:	f841 2f04 	str.w	r2, [r1, #4]!
 800748e:	d8f9      	bhi.n	8007484 <__lshift+0xc0>
 8007490:	e7ea      	b.n	8007468 <__lshift+0xa4>
 8007492:	bf00      	nop
 8007494:	0800b97f 	.word	0x0800b97f
 8007498:	0800b990 	.word	0x0800b990

0800749c <__mcmp>:
 800749c:	4603      	mov	r3, r0
 800749e:	690a      	ldr	r2, [r1, #16]
 80074a0:	6900      	ldr	r0, [r0, #16]
 80074a2:	b530      	push	{r4, r5, lr}
 80074a4:	1a80      	subs	r0, r0, r2
 80074a6:	d10d      	bne.n	80074c4 <__mcmp+0x28>
 80074a8:	3314      	adds	r3, #20
 80074aa:	3114      	adds	r1, #20
 80074ac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80074b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80074b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80074b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80074bc:	4295      	cmp	r5, r2
 80074be:	d002      	beq.n	80074c6 <__mcmp+0x2a>
 80074c0:	d304      	bcc.n	80074cc <__mcmp+0x30>
 80074c2:	2001      	movs	r0, #1
 80074c4:	bd30      	pop	{r4, r5, pc}
 80074c6:	42a3      	cmp	r3, r4
 80074c8:	d3f4      	bcc.n	80074b4 <__mcmp+0x18>
 80074ca:	e7fb      	b.n	80074c4 <__mcmp+0x28>
 80074cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074d0:	e7f8      	b.n	80074c4 <__mcmp+0x28>
	...

080074d4 <__mdiff>:
 80074d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074d8:	460c      	mov	r4, r1
 80074da:	4606      	mov	r6, r0
 80074dc:	4611      	mov	r1, r2
 80074de:	4620      	mov	r0, r4
 80074e0:	4692      	mov	sl, r2
 80074e2:	f7ff ffdb 	bl	800749c <__mcmp>
 80074e6:	1e05      	subs	r5, r0, #0
 80074e8:	d111      	bne.n	800750e <__mdiff+0x3a>
 80074ea:	4629      	mov	r1, r5
 80074ec:	4630      	mov	r0, r6
 80074ee:	f7ff fd5b 	bl	8006fa8 <_Balloc>
 80074f2:	4602      	mov	r2, r0
 80074f4:	b928      	cbnz	r0, 8007502 <__mdiff+0x2e>
 80074f6:	f240 2132 	movw	r1, #562	; 0x232
 80074fa:	4b3c      	ldr	r3, [pc, #240]	; (80075ec <__mdiff+0x118>)
 80074fc:	483c      	ldr	r0, [pc, #240]	; (80075f0 <__mdiff+0x11c>)
 80074fe:	f000 faf5 	bl	8007aec <__assert_func>
 8007502:	2301      	movs	r3, #1
 8007504:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007508:	4610      	mov	r0, r2
 800750a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800750e:	bfa4      	itt	ge
 8007510:	4653      	movge	r3, sl
 8007512:	46a2      	movge	sl, r4
 8007514:	4630      	mov	r0, r6
 8007516:	f8da 1004 	ldr.w	r1, [sl, #4]
 800751a:	bfa6      	itte	ge
 800751c:	461c      	movge	r4, r3
 800751e:	2500      	movge	r5, #0
 8007520:	2501      	movlt	r5, #1
 8007522:	f7ff fd41 	bl	8006fa8 <_Balloc>
 8007526:	4602      	mov	r2, r0
 8007528:	b918      	cbnz	r0, 8007532 <__mdiff+0x5e>
 800752a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800752e:	4b2f      	ldr	r3, [pc, #188]	; (80075ec <__mdiff+0x118>)
 8007530:	e7e4      	b.n	80074fc <__mdiff+0x28>
 8007532:	f100 0814 	add.w	r8, r0, #20
 8007536:	f8da 7010 	ldr.w	r7, [sl, #16]
 800753a:	60c5      	str	r5, [r0, #12]
 800753c:	f04f 0c00 	mov.w	ip, #0
 8007540:	f10a 0514 	add.w	r5, sl, #20
 8007544:	f10a 0010 	add.w	r0, sl, #16
 8007548:	46c2      	mov	sl, r8
 800754a:	6926      	ldr	r6, [r4, #16]
 800754c:	f104 0914 	add.w	r9, r4, #20
 8007550:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8007554:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007558:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800755c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007560:	fa1f f18b 	uxth.w	r1, fp
 8007564:	4461      	add	r1, ip
 8007566:	fa1f fc83 	uxth.w	ip, r3
 800756a:	0c1b      	lsrs	r3, r3, #16
 800756c:	eba1 010c 	sub.w	r1, r1, ip
 8007570:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007574:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007578:	b289      	uxth	r1, r1
 800757a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800757e:	454e      	cmp	r6, r9
 8007580:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007584:	f84a 3b04 	str.w	r3, [sl], #4
 8007588:	d8e6      	bhi.n	8007558 <__mdiff+0x84>
 800758a:	1b33      	subs	r3, r6, r4
 800758c:	3b15      	subs	r3, #21
 800758e:	f023 0303 	bic.w	r3, r3, #3
 8007592:	3415      	adds	r4, #21
 8007594:	3304      	adds	r3, #4
 8007596:	42a6      	cmp	r6, r4
 8007598:	bf38      	it	cc
 800759a:	2304      	movcc	r3, #4
 800759c:	441d      	add	r5, r3
 800759e:	4443      	add	r3, r8
 80075a0:	461e      	mov	r6, r3
 80075a2:	462c      	mov	r4, r5
 80075a4:	4574      	cmp	r4, lr
 80075a6:	d30e      	bcc.n	80075c6 <__mdiff+0xf2>
 80075a8:	f10e 0103 	add.w	r1, lr, #3
 80075ac:	1b49      	subs	r1, r1, r5
 80075ae:	f021 0103 	bic.w	r1, r1, #3
 80075b2:	3d03      	subs	r5, #3
 80075b4:	45ae      	cmp	lr, r5
 80075b6:	bf38      	it	cc
 80075b8:	2100      	movcc	r1, #0
 80075ba:	4419      	add	r1, r3
 80075bc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80075c0:	b18b      	cbz	r3, 80075e6 <__mdiff+0x112>
 80075c2:	6117      	str	r7, [r2, #16]
 80075c4:	e7a0      	b.n	8007508 <__mdiff+0x34>
 80075c6:	f854 8b04 	ldr.w	r8, [r4], #4
 80075ca:	fa1f f188 	uxth.w	r1, r8
 80075ce:	4461      	add	r1, ip
 80075d0:	1408      	asrs	r0, r1, #16
 80075d2:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 80075d6:	b289      	uxth	r1, r1
 80075d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80075dc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80075e0:	f846 1b04 	str.w	r1, [r6], #4
 80075e4:	e7de      	b.n	80075a4 <__mdiff+0xd0>
 80075e6:	3f01      	subs	r7, #1
 80075e8:	e7e8      	b.n	80075bc <__mdiff+0xe8>
 80075ea:	bf00      	nop
 80075ec:	0800b97f 	.word	0x0800b97f
 80075f0:	0800b990 	.word	0x0800b990

080075f4 <__d2b>:
 80075f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80075f8:	2101      	movs	r1, #1
 80075fa:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80075fe:	4690      	mov	r8, r2
 8007600:	461d      	mov	r5, r3
 8007602:	f7ff fcd1 	bl	8006fa8 <_Balloc>
 8007606:	4604      	mov	r4, r0
 8007608:	b930      	cbnz	r0, 8007618 <__d2b+0x24>
 800760a:	4602      	mov	r2, r0
 800760c:	f240 310a 	movw	r1, #778	; 0x30a
 8007610:	4b24      	ldr	r3, [pc, #144]	; (80076a4 <__d2b+0xb0>)
 8007612:	4825      	ldr	r0, [pc, #148]	; (80076a8 <__d2b+0xb4>)
 8007614:	f000 fa6a 	bl	8007aec <__assert_func>
 8007618:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800761c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007620:	bb2d      	cbnz	r5, 800766e <__d2b+0x7a>
 8007622:	9301      	str	r3, [sp, #4]
 8007624:	f1b8 0300 	subs.w	r3, r8, #0
 8007628:	d026      	beq.n	8007678 <__d2b+0x84>
 800762a:	4668      	mov	r0, sp
 800762c:	9300      	str	r3, [sp, #0]
 800762e:	f7ff fd87 	bl	8007140 <__lo0bits>
 8007632:	9900      	ldr	r1, [sp, #0]
 8007634:	b1f0      	cbz	r0, 8007674 <__d2b+0x80>
 8007636:	9a01      	ldr	r2, [sp, #4]
 8007638:	f1c0 0320 	rsb	r3, r0, #32
 800763c:	fa02 f303 	lsl.w	r3, r2, r3
 8007640:	430b      	orrs	r3, r1
 8007642:	40c2      	lsrs	r2, r0
 8007644:	6163      	str	r3, [r4, #20]
 8007646:	9201      	str	r2, [sp, #4]
 8007648:	9b01      	ldr	r3, [sp, #4]
 800764a:	2b00      	cmp	r3, #0
 800764c:	bf14      	ite	ne
 800764e:	2102      	movne	r1, #2
 8007650:	2101      	moveq	r1, #1
 8007652:	61a3      	str	r3, [r4, #24]
 8007654:	6121      	str	r1, [r4, #16]
 8007656:	b1c5      	cbz	r5, 800768a <__d2b+0x96>
 8007658:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800765c:	4405      	add	r5, r0
 800765e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007662:	603d      	str	r5, [r7, #0]
 8007664:	6030      	str	r0, [r6, #0]
 8007666:	4620      	mov	r0, r4
 8007668:	b002      	add	sp, #8
 800766a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800766e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007672:	e7d6      	b.n	8007622 <__d2b+0x2e>
 8007674:	6161      	str	r1, [r4, #20]
 8007676:	e7e7      	b.n	8007648 <__d2b+0x54>
 8007678:	a801      	add	r0, sp, #4
 800767a:	f7ff fd61 	bl	8007140 <__lo0bits>
 800767e:	2101      	movs	r1, #1
 8007680:	9b01      	ldr	r3, [sp, #4]
 8007682:	6121      	str	r1, [r4, #16]
 8007684:	6163      	str	r3, [r4, #20]
 8007686:	3020      	adds	r0, #32
 8007688:	e7e5      	b.n	8007656 <__d2b+0x62>
 800768a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800768e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007692:	6038      	str	r0, [r7, #0]
 8007694:	6918      	ldr	r0, [r3, #16]
 8007696:	f7ff fd33 	bl	8007100 <__hi0bits>
 800769a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800769e:	6031      	str	r1, [r6, #0]
 80076a0:	e7e1      	b.n	8007666 <__d2b+0x72>
 80076a2:	bf00      	nop
 80076a4:	0800b97f 	.word	0x0800b97f
 80076a8:	0800b990 	.word	0x0800b990

080076ac <_calloc_r>:
 80076ac:	b538      	push	{r3, r4, r5, lr}
 80076ae:	fb02 f501 	mul.w	r5, r2, r1
 80076b2:	4629      	mov	r1, r5
 80076b4:	f000 f854 	bl	8007760 <_malloc_r>
 80076b8:	4604      	mov	r4, r0
 80076ba:	b118      	cbz	r0, 80076c4 <_calloc_r+0x18>
 80076bc:	462a      	mov	r2, r5
 80076be:	2100      	movs	r1, #0
 80076c0:	f7fe f954 	bl	800596c <memset>
 80076c4:	4620      	mov	r0, r4
 80076c6:	bd38      	pop	{r3, r4, r5, pc}

080076c8 <_free_r>:
 80076c8:	b538      	push	{r3, r4, r5, lr}
 80076ca:	4605      	mov	r5, r0
 80076cc:	2900      	cmp	r1, #0
 80076ce:	d043      	beq.n	8007758 <_free_r+0x90>
 80076d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076d4:	1f0c      	subs	r4, r1, #4
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	bfb8      	it	lt
 80076da:	18e4      	addlt	r4, r4, r3
 80076dc:	f000 fa62 	bl	8007ba4 <__malloc_lock>
 80076e0:	4a1e      	ldr	r2, [pc, #120]	; (800775c <_free_r+0x94>)
 80076e2:	6813      	ldr	r3, [r2, #0]
 80076e4:	4610      	mov	r0, r2
 80076e6:	b933      	cbnz	r3, 80076f6 <_free_r+0x2e>
 80076e8:	6063      	str	r3, [r4, #4]
 80076ea:	6014      	str	r4, [r2, #0]
 80076ec:	4628      	mov	r0, r5
 80076ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076f2:	f000 ba5d 	b.w	8007bb0 <__malloc_unlock>
 80076f6:	42a3      	cmp	r3, r4
 80076f8:	d90a      	bls.n	8007710 <_free_r+0x48>
 80076fa:	6821      	ldr	r1, [r4, #0]
 80076fc:	1862      	adds	r2, r4, r1
 80076fe:	4293      	cmp	r3, r2
 8007700:	bf01      	itttt	eq
 8007702:	681a      	ldreq	r2, [r3, #0]
 8007704:	685b      	ldreq	r3, [r3, #4]
 8007706:	1852      	addeq	r2, r2, r1
 8007708:	6022      	streq	r2, [r4, #0]
 800770a:	6063      	str	r3, [r4, #4]
 800770c:	6004      	str	r4, [r0, #0]
 800770e:	e7ed      	b.n	80076ec <_free_r+0x24>
 8007710:	461a      	mov	r2, r3
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	b10b      	cbz	r3, 800771a <_free_r+0x52>
 8007716:	42a3      	cmp	r3, r4
 8007718:	d9fa      	bls.n	8007710 <_free_r+0x48>
 800771a:	6811      	ldr	r1, [r2, #0]
 800771c:	1850      	adds	r0, r2, r1
 800771e:	42a0      	cmp	r0, r4
 8007720:	d10b      	bne.n	800773a <_free_r+0x72>
 8007722:	6820      	ldr	r0, [r4, #0]
 8007724:	4401      	add	r1, r0
 8007726:	1850      	adds	r0, r2, r1
 8007728:	4283      	cmp	r3, r0
 800772a:	6011      	str	r1, [r2, #0]
 800772c:	d1de      	bne.n	80076ec <_free_r+0x24>
 800772e:	6818      	ldr	r0, [r3, #0]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	4401      	add	r1, r0
 8007734:	6011      	str	r1, [r2, #0]
 8007736:	6053      	str	r3, [r2, #4]
 8007738:	e7d8      	b.n	80076ec <_free_r+0x24>
 800773a:	d902      	bls.n	8007742 <_free_r+0x7a>
 800773c:	230c      	movs	r3, #12
 800773e:	602b      	str	r3, [r5, #0]
 8007740:	e7d4      	b.n	80076ec <_free_r+0x24>
 8007742:	6820      	ldr	r0, [r4, #0]
 8007744:	1821      	adds	r1, r4, r0
 8007746:	428b      	cmp	r3, r1
 8007748:	bf01      	itttt	eq
 800774a:	6819      	ldreq	r1, [r3, #0]
 800774c:	685b      	ldreq	r3, [r3, #4]
 800774e:	1809      	addeq	r1, r1, r0
 8007750:	6021      	streq	r1, [r4, #0]
 8007752:	6063      	str	r3, [r4, #4]
 8007754:	6054      	str	r4, [r2, #4]
 8007756:	e7c9      	b.n	80076ec <_free_r+0x24>
 8007758:	bd38      	pop	{r3, r4, r5, pc}
 800775a:	bf00      	nop
 800775c:	200008f0 	.word	0x200008f0

08007760 <_malloc_r>:
 8007760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007762:	1ccd      	adds	r5, r1, #3
 8007764:	f025 0503 	bic.w	r5, r5, #3
 8007768:	3508      	adds	r5, #8
 800776a:	2d0c      	cmp	r5, #12
 800776c:	bf38      	it	cc
 800776e:	250c      	movcc	r5, #12
 8007770:	2d00      	cmp	r5, #0
 8007772:	4606      	mov	r6, r0
 8007774:	db01      	blt.n	800777a <_malloc_r+0x1a>
 8007776:	42a9      	cmp	r1, r5
 8007778:	d903      	bls.n	8007782 <_malloc_r+0x22>
 800777a:	230c      	movs	r3, #12
 800777c:	6033      	str	r3, [r6, #0]
 800777e:	2000      	movs	r0, #0
 8007780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007782:	f000 fa0f 	bl	8007ba4 <__malloc_lock>
 8007786:	4921      	ldr	r1, [pc, #132]	; (800780c <_malloc_r+0xac>)
 8007788:	680a      	ldr	r2, [r1, #0]
 800778a:	4614      	mov	r4, r2
 800778c:	b99c      	cbnz	r4, 80077b6 <_malloc_r+0x56>
 800778e:	4f20      	ldr	r7, [pc, #128]	; (8007810 <_malloc_r+0xb0>)
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	b923      	cbnz	r3, 800779e <_malloc_r+0x3e>
 8007794:	4621      	mov	r1, r4
 8007796:	4630      	mov	r0, r6
 8007798:	f000 f998 	bl	8007acc <_sbrk_r>
 800779c:	6038      	str	r0, [r7, #0]
 800779e:	4629      	mov	r1, r5
 80077a0:	4630      	mov	r0, r6
 80077a2:	f000 f993 	bl	8007acc <_sbrk_r>
 80077a6:	1c43      	adds	r3, r0, #1
 80077a8:	d123      	bne.n	80077f2 <_malloc_r+0x92>
 80077aa:	230c      	movs	r3, #12
 80077ac:	4630      	mov	r0, r6
 80077ae:	6033      	str	r3, [r6, #0]
 80077b0:	f000 f9fe 	bl	8007bb0 <__malloc_unlock>
 80077b4:	e7e3      	b.n	800777e <_malloc_r+0x1e>
 80077b6:	6823      	ldr	r3, [r4, #0]
 80077b8:	1b5b      	subs	r3, r3, r5
 80077ba:	d417      	bmi.n	80077ec <_malloc_r+0x8c>
 80077bc:	2b0b      	cmp	r3, #11
 80077be:	d903      	bls.n	80077c8 <_malloc_r+0x68>
 80077c0:	6023      	str	r3, [r4, #0]
 80077c2:	441c      	add	r4, r3
 80077c4:	6025      	str	r5, [r4, #0]
 80077c6:	e004      	b.n	80077d2 <_malloc_r+0x72>
 80077c8:	6863      	ldr	r3, [r4, #4]
 80077ca:	42a2      	cmp	r2, r4
 80077cc:	bf0c      	ite	eq
 80077ce:	600b      	streq	r3, [r1, #0]
 80077d0:	6053      	strne	r3, [r2, #4]
 80077d2:	4630      	mov	r0, r6
 80077d4:	f000 f9ec 	bl	8007bb0 <__malloc_unlock>
 80077d8:	f104 000b 	add.w	r0, r4, #11
 80077dc:	1d23      	adds	r3, r4, #4
 80077de:	f020 0007 	bic.w	r0, r0, #7
 80077e2:	1ac2      	subs	r2, r0, r3
 80077e4:	d0cc      	beq.n	8007780 <_malloc_r+0x20>
 80077e6:	1a1b      	subs	r3, r3, r0
 80077e8:	50a3      	str	r3, [r4, r2]
 80077ea:	e7c9      	b.n	8007780 <_malloc_r+0x20>
 80077ec:	4622      	mov	r2, r4
 80077ee:	6864      	ldr	r4, [r4, #4]
 80077f0:	e7cc      	b.n	800778c <_malloc_r+0x2c>
 80077f2:	1cc4      	adds	r4, r0, #3
 80077f4:	f024 0403 	bic.w	r4, r4, #3
 80077f8:	42a0      	cmp	r0, r4
 80077fa:	d0e3      	beq.n	80077c4 <_malloc_r+0x64>
 80077fc:	1a21      	subs	r1, r4, r0
 80077fe:	4630      	mov	r0, r6
 8007800:	f000 f964 	bl	8007acc <_sbrk_r>
 8007804:	3001      	adds	r0, #1
 8007806:	d1dd      	bne.n	80077c4 <_malloc_r+0x64>
 8007808:	e7cf      	b.n	80077aa <_malloc_r+0x4a>
 800780a:	bf00      	nop
 800780c:	200008f0 	.word	0x200008f0
 8007810:	200008f4 	.word	0x200008f4

08007814 <__ssputs_r>:
 8007814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007818:	688e      	ldr	r6, [r1, #8]
 800781a:	4682      	mov	sl, r0
 800781c:	429e      	cmp	r6, r3
 800781e:	460c      	mov	r4, r1
 8007820:	4690      	mov	r8, r2
 8007822:	461f      	mov	r7, r3
 8007824:	d838      	bhi.n	8007898 <__ssputs_r+0x84>
 8007826:	898a      	ldrh	r2, [r1, #12]
 8007828:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800782c:	d032      	beq.n	8007894 <__ssputs_r+0x80>
 800782e:	6825      	ldr	r5, [r4, #0]
 8007830:	6909      	ldr	r1, [r1, #16]
 8007832:	3301      	adds	r3, #1
 8007834:	eba5 0901 	sub.w	r9, r5, r1
 8007838:	6965      	ldr	r5, [r4, #20]
 800783a:	444b      	add	r3, r9
 800783c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007840:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007844:	106d      	asrs	r5, r5, #1
 8007846:	429d      	cmp	r5, r3
 8007848:	bf38      	it	cc
 800784a:	461d      	movcc	r5, r3
 800784c:	0553      	lsls	r3, r2, #21
 800784e:	d531      	bpl.n	80078b4 <__ssputs_r+0xa0>
 8007850:	4629      	mov	r1, r5
 8007852:	f7ff ff85 	bl	8007760 <_malloc_r>
 8007856:	4606      	mov	r6, r0
 8007858:	b950      	cbnz	r0, 8007870 <__ssputs_r+0x5c>
 800785a:	230c      	movs	r3, #12
 800785c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007860:	f8ca 3000 	str.w	r3, [sl]
 8007864:	89a3      	ldrh	r3, [r4, #12]
 8007866:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800786a:	81a3      	strh	r3, [r4, #12]
 800786c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007870:	464a      	mov	r2, r9
 8007872:	6921      	ldr	r1, [r4, #16]
 8007874:	f7fe f86c 	bl	8005950 <memcpy>
 8007878:	89a3      	ldrh	r3, [r4, #12]
 800787a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800787e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007882:	81a3      	strh	r3, [r4, #12]
 8007884:	6126      	str	r6, [r4, #16]
 8007886:	444e      	add	r6, r9
 8007888:	6026      	str	r6, [r4, #0]
 800788a:	463e      	mov	r6, r7
 800788c:	6165      	str	r5, [r4, #20]
 800788e:	eba5 0509 	sub.w	r5, r5, r9
 8007892:	60a5      	str	r5, [r4, #8]
 8007894:	42be      	cmp	r6, r7
 8007896:	d900      	bls.n	800789a <__ssputs_r+0x86>
 8007898:	463e      	mov	r6, r7
 800789a:	4632      	mov	r2, r6
 800789c:	4641      	mov	r1, r8
 800789e:	6820      	ldr	r0, [r4, #0]
 80078a0:	f000 f966 	bl	8007b70 <memmove>
 80078a4:	68a3      	ldr	r3, [r4, #8]
 80078a6:	6822      	ldr	r2, [r4, #0]
 80078a8:	1b9b      	subs	r3, r3, r6
 80078aa:	4432      	add	r2, r6
 80078ac:	2000      	movs	r0, #0
 80078ae:	60a3      	str	r3, [r4, #8]
 80078b0:	6022      	str	r2, [r4, #0]
 80078b2:	e7db      	b.n	800786c <__ssputs_r+0x58>
 80078b4:	462a      	mov	r2, r5
 80078b6:	f000 f981 	bl	8007bbc <_realloc_r>
 80078ba:	4606      	mov	r6, r0
 80078bc:	2800      	cmp	r0, #0
 80078be:	d1e1      	bne.n	8007884 <__ssputs_r+0x70>
 80078c0:	4650      	mov	r0, sl
 80078c2:	6921      	ldr	r1, [r4, #16]
 80078c4:	f7ff ff00 	bl	80076c8 <_free_r>
 80078c8:	e7c7      	b.n	800785a <__ssputs_r+0x46>
	...

080078cc <_svfiprintf_r>:
 80078cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078d0:	4698      	mov	r8, r3
 80078d2:	898b      	ldrh	r3, [r1, #12]
 80078d4:	4607      	mov	r7, r0
 80078d6:	061b      	lsls	r3, r3, #24
 80078d8:	460d      	mov	r5, r1
 80078da:	4614      	mov	r4, r2
 80078dc:	b09d      	sub	sp, #116	; 0x74
 80078de:	d50e      	bpl.n	80078fe <_svfiprintf_r+0x32>
 80078e0:	690b      	ldr	r3, [r1, #16]
 80078e2:	b963      	cbnz	r3, 80078fe <_svfiprintf_r+0x32>
 80078e4:	2140      	movs	r1, #64	; 0x40
 80078e6:	f7ff ff3b 	bl	8007760 <_malloc_r>
 80078ea:	6028      	str	r0, [r5, #0]
 80078ec:	6128      	str	r0, [r5, #16]
 80078ee:	b920      	cbnz	r0, 80078fa <_svfiprintf_r+0x2e>
 80078f0:	230c      	movs	r3, #12
 80078f2:	603b      	str	r3, [r7, #0]
 80078f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80078f8:	e0d1      	b.n	8007a9e <_svfiprintf_r+0x1d2>
 80078fa:	2340      	movs	r3, #64	; 0x40
 80078fc:	616b      	str	r3, [r5, #20]
 80078fe:	2300      	movs	r3, #0
 8007900:	9309      	str	r3, [sp, #36]	; 0x24
 8007902:	2320      	movs	r3, #32
 8007904:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007908:	2330      	movs	r3, #48	; 0x30
 800790a:	f04f 0901 	mov.w	r9, #1
 800790e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007912:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007ab8 <_svfiprintf_r+0x1ec>
 8007916:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800791a:	4623      	mov	r3, r4
 800791c:	469a      	mov	sl, r3
 800791e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007922:	b10a      	cbz	r2, 8007928 <_svfiprintf_r+0x5c>
 8007924:	2a25      	cmp	r2, #37	; 0x25
 8007926:	d1f9      	bne.n	800791c <_svfiprintf_r+0x50>
 8007928:	ebba 0b04 	subs.w	fp, sl, r4
 800792c:	d00b      	beq.n	8007946 <_svfiprintf_r+0x7a>
 800792e:	465b      	mov	r3, fp
 8007930:	4622      	mov	r2, r4
 8007932:	4629      	mov	r1, r5
 8007934:	4638      	mov	r0, r7
 8007936:	f7ff ff6d 	bl	8007814 <__ssputs_r>
 800793a:	3001      	adds	r0, #1
 800793c:	f000 80aa 	beq.w	8007a94 <_svfiprintf_r+0x1c8>
 8007940:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007942:	445a      	add	r2, fp
 8007944:	9209      	str	r2, [sp, #36]	; 0x24
 8007946:	f89a 3000 	ldrb.w	r3, [sl]
 800794a:	2b00      	cmp	r3, #0
 800794c:	f000 80a2 	beq.w	8007a94 <_svfiprintf_r+0x1c8>
 8007950:	2300      	movs	r3, #0
 8007952:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007956:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800795a:	f10a 0a01 	add.w	sl, sl, #1
 800795e:	9304      	str	r3, [sp, #16]
 8007960:	9307      	str	r3, [sp, #28]
 8007962:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007966:	931a      	str	r3, [sp, #104]	; 0x68
 8007968:	4654      	mov	r4, sl
 800796a:	2205      	movs	r2, #5
 800796c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007970:	4851      	ldr	r0, [pc, #324]	; (8007ab8 <_svfiprintf_r+0x1ec>)
 8007972:	f7ff fb0b 	bl	8006f8c <memchr>
 8007976:	9a04      	ldr	r2, [sp, #16]
 8007978:	b9d8      	cbnz	r0, 80079b2 <_svfiprintf_r+0xe6>
 800797a:	06d0      	lsls	r0, r2, #27
 800797c:	bf44      	itt	mi
 800797e:	2320      	movmi	r3, #32
 8007980:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007984:	0711      	lsls	r1, r2, #28
 8007986:	bf44      	itt	mi
 8007988:	232b      	movmi	r3, #43	; 0x2b
 800798a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800798e:	f89a 3000 	ldrb.w	r3, [sl]
 8007992:	2b2a      	cmp	r3, #42	; 0x2a
 8007994:	d015      	beq.n	80079c2 <_svfiprintf_r+0xf6>
 8007996:	4654      	mov	r4, sl
 8007998:	2000      	movs	r0, #0
 800799a:	f04f 0c0a 	mov.w	ip, #10
 800799e:	9a07      	ldr	r2, [sp, #28]
 80079a0:	4621      	mov	r1, r4
 80079a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079a6:	3b30      	subs	r3, #48	; 0x30
 80079a8:	2b09      	cmp	r3, #9
 80079aa:	d94e      	bls.n	8007a4a <_svfiprintf_r+0x17e>
 80079ac:	b1b0      	cbz	r0, 80079dc <_svfiprintf_r+0x110>
 80079ae:	9207      	str	r2, [sp, #28]
 80079b0:	e014      	b.n	80079dc <_svfiprintf_r+0x110>
 80079b2:	eba0 0308 	sub.w	r3, r0, r8
 80079b6:	fa09 f303 	lsl.w	r3, r9, r3
 80079ba:	4313      	orrs	r3, r2
 80079bc:	46a2      	mov	sl, r4
 80079be:	9304      	str	r3, [sp, #16]
 80079c0:	e7d2      	b.n	8007968 <_svfiprintf_r+0x9c>
 80079c2:	9b03      	ldr	r3, [sp, #12]
 80079c4:	1d19      	adds	r1, r3, #4
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	9103      	str	r1, [sp, #12]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	bfbb      	ittet	lt
 80079ce:	425b      	neglt	r3, r3
 80079d0:	f042 0202 	orrlt.w	r2, r2, #2
 80079d4:	9307      	strge	r3, [sp, #28]
 80079d6:	9307      	strlt	r3, [sp, #28]
 80079d8:	bfb8      	it	lt
 80079da:	9204      	strlt	r2, [sp, #16]
 80079dc:	7823      	ldrb	r3, [r4, #0]
 80079de:	2b2e      	cmp	r3, #46	; 0x2e
 80079e0:	d10c      	bne.n	80079fc <_svfiprintf_r+0x130>
 80079e2:	7863      	ldrb	r3, [r4, #1]
 80079e4:	2b2a      	cmp	r3, #42	; 0x2a
 80079e6:	d135      	bne.n	8007a54 <_svfiprintf_r+0x188>
 80079e8:	9b03      	ldr	r3, [sp, #12]
 80079ea:	3402      	adds	r4, #2
 80079ec:	1d1a      	adds	r2, r3, #4
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	9203      	str	r2, [sp, #12]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	bfb8      	it	lt
 80079f6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80079fa:	9305      	str	r3, [sp, #20]
 80079fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007ac8 <_svfiprintf_r+0x1fc>
 8007a00:	2203      	movs	r2, #3
 8007a02:	4650      	mov	r0, sl
 8007a04:	7821      	ldrb	r1, [r4, #0]
 8007a06:	f7ff fac1 	bl	8006f8c <memchr>
 8007a0a:	b140      	cbz	r0, 8007a1e <_svfiprintf_r+0x152>
 8007a0c:	2340      	movs	r3, #64	; 0x40
 8007a0e:	eba0 000a 	sub.w	r0, r0, sl
 8007a12:	fa03 f000 	lsl.w	r0, r3, r0
 8007a16:	9b04      	ldr	r3, [sp, #16]
 8007a18:	3401      	adds	r4, #1
 8007a1a:	4303      	orrs	r3, r0
 8007a1c:	9304      	str	r3, [sp, #16]
 8007a1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a22:	2206      	movs	r2, #6
 8007a24:	4825      	ldr	r0, [pc, #148]	; (8007abc <_svfiprintf_r+0x1f0>)
 8007a26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a2a:	f7ff faaf 	bl	8006f8c <memchr>
 8007a2e:	2800      	cmp	r0, #0
 8007a30:	d038      	beq.n	8007aa4 <_svfiprintf_r+0x1d8>
 8007a32:	4b23      	ldr	r3, [pc, #140]	; (8007ac0 <_svfiprintf_r+0x1f4>)
 8007a34:	bb1b      	cbnz	r3, 8007a7e <_svfiprintf_r+0x1b2>
 8007a36:	9b03      	ldr	r3, [sp, #12]
 8007a38:	3307      	adds	r3, #7
 8007a3a:	f023 0307 	bic.w	r3, r3, #7
 8007a3e:	3308      	adds	r3, #8
 8007a40:	9303      	str	r3, [sp, #12]
 8007a42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a44:	4433      	add	r3, r6
 8007a46:	9309      	str	r3, [sp, #36]	; 0x24
 8007a48:	e767      	b.n	800791a <_svfiprintf_r+0x4e>
 8007a4a:	460c      	mov	r4, r1
 8007a4c:	2001      	movs	r0, #1
 8007a4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a52:	e7a5      	b.n	80079a0 <_svfiprintf_r+0xd4>
 8007a54:	2300      	movs	r3, #0
 8007a56:	f04f 0c0a 	mov.w	ip, #10
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	3401      	adds	r4, #1
 8007a5e:	9305      	str	r3, [sp, #20]
 8007a60:	4620      	mov	r0, r4
 8007a62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a66:	3a30      	subs	r2, #48	; 0x30
 8007a68:	2a09      	cmp	r2, #9
 8007a6a:	d903      	bls.n	8007a74 <_svfiprintf_r+0x1a8>
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d0c5      	beq.n	80079fc <_svfiprintf_r+0x130>
 8007a70:	9105      	str	r1, [sp, #20]
 8007a72:	e7c3      	b.n	80079fc <_svfiprintf_r+0x130>
 8007a74:	4604      	mov	r4, r0
 8007a76:	2301      	movs	r3, #1
 8007a78:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a7c:	e7f0      	b.n	8007a60 <_svfiprintf_r+0x194>
 8007a7e:	ab03      	add	r3, sp, #12
 8007a80:	9300      	str	r3, [sp, #0]
 8007a82:	462a      	mov	r2, r5
 8007a84:	4638      	mov	r0, r7
 8007a86:	4b0f      	ldr	r3, [pc, #60]	; (8007ac4 <_svfiprintf_r+0x1f8>)
 8007a88:	a904      	add	r1, sp, #16
 8007a8a:	f7fe f815 	bl	8005ab8 <_printf_float>
 8007a8e:	1c42      	adds	r2, r0, #1
 8007a90:	4606      	mov	r6, r0
 8007a92:	d1d6      	bne.n	8007a42 <_svfiprintf_r+0x176>
 8007a94:	89ab      	ldrh	r3, [r5, #12]
 8007a96:	065b      	lsls	r3, r3, #25
 8007a98:	f53f af2c 	bmi.w	80078f4 <_svfiprintf_r+0x28>
 8007a9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a9e:	b01d      	add	sp, #116	; 0x74
 8007aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aa4:	ab03      	add	r3, sp, #12
 8007aa6:	9300      	str	r3, [sp, #0]
 8007aa8:	462a      	mov	r2, r5
 8007aaa:	4638      	mov	r0, r7
 8007aac:	4b05      	ldr	r3, [pc, #20]	; (8007ac4 <_svfiprintf_r+0x1f8>)
 8007aae:	a904      	add	r1, sp, #16
 8007ab0:	f7fe fa9e 	bl	8005ff0 <_printf_i>
 8007ab4:	e7eb      	b.n	8007a8e <_svfiprintf_r+0x1c2>
 8007ab6:	bf00      	nop
 8007ab8:	0800baec 	.word	0x0800baec
 8007abc:	0800baf6 	.word	0x0800baf6
 8007ac0:	08005ab9 	.word	0x08005ab9
 8007ac4:	08007815 	.word	0x08007815
 8007ac8:	0800baf2 	.word	0x0800baf2

08007acc <_sbrk_r>:
 8007acc:	b538      	push	{r3, r4, r5, lr}
 8007ace:	2300      	movs	r3, #0
 8007ad0:	4d05      	ldr	r5, [pc, #20]	; (8007ae8 <_sbrk_r+0x1c>)
 8007ad2:	4604      	mov	r4, r0
 8007ad4:	4608      	mov	r0, r1
 8007ad6:	602b      	str	r3, [r5, #0]
 8007ad8:	f7fa fb0a 	bl	80020f0 <_sbrk>
 8007adc:	1c43      	adds	r3, r0, #1
 8007ade:	d102      	bne.n	8007ae6 <_sbrk_r+0x1a>
 8007ae0:	682b      	ldr	r3, [r5, #0]
 8007ae2:	b103      	cbz	r3, 8007ae6 <_sbrk_r+0x1a>
 8007ae4:	6023      	str	r3, [r4, #0]
 8007ae6:	bd38      	pop	{r3, r4, r5, pc}
 8007ae8:	20000ad0 	.word	0x20000ad0

08007aec <__assert_func>:
 8007aec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007aee:	4614      	mov	r4, r2
 8007af0:	461a      	mov	r2, r3
 8007af2:	4b09      	ldr	r3, [pc, #36]	; (8007b18 <__assert_func+0x2c>)
 8007af4:	4605      	mov	r5, r0
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	68d8      	ldr	r0, [r3, #12]
 8007afa:	b14c      	cbz	r4, 8007b10 <__assert_func+0x24>
 8007afc:	4b07      	ldr	r3, [pc, #28]	; (8007b1c <__assert_func+0x30>)
 8007afe:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007b02:	9100      	str	r1, [sp, #0]
 8007b04:	462b      	mov	r3, r5
 8007b06:	4906      	ldr	r1, [pc, #24]	; (8007b20 <__assert_func+0x34>)
 8007b08:	f000 f80e 	bl	8007b28 <fiprintf>
 8007b0c:	f000 faa2 	bl	8008054 <abort>
 8007b10:	4b04      	ldr	r3, [pc, #16]	; (8007b24 <__assert_func+0x38>)
 8007b12:	461c      	mov	r4, r3
 8007b14:	e7f3      	b.n	8007afe <__assert_func+0x12>
 8007b16:	bf00      	nop
 8007b18:	200000a0 	.word	0x200000a0
 8007b1c:	0800bafd 	.word	0x0800bafd
 8007b20:	0800bb0a 	.word	0x0800bb0a
 8007b24:	0800bb38 	.word	0x0800bb38

08007b28 <fiprintf>:
 8007b28:	b40e      	push	{r1, r2, r3}
 8007b2a:	b503      	push	{r0, r1, lr}
 8007b2c:	4601      	mov	r1, r0
 8007b2e:	ab03      	add	r3, sp, #12
 8007b30:	4805      	ldr	r0, [pc, #20]	; (8007b48 <fiprintf+0x20>)
 8007b32:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b36:	6800      	ldr	r0, [r0, #0]
 8007b38:	9301      	str	r3, [sp, #4]
 8007b3a:	f000 f88d 	bl	8007c58 <_vfiprintf_r>
 8007b3e:	b002      	add	sp, #8
 8007b40:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b44:	b003      	add	sp, #12
 8007b46:	4770      	bx	lr
 8007b48:	200000a0 	.word	0x200000a0

08007b4c <__ascii_mbtowc>:
 8007b4c:	b082      	sub	sp, #8
 8007b4e:	b901      	cbnz	r1, 8007b52 <__ascii_mbtowc+0x6>
 8007b50:	a901      	add	r1, sp, #4
 8007b52:	b142      	cbz	r2, 8007b66 <__ascii_mbtowc+0x1a>
 8007b54:	b14b      	cbz	r3, 8007b6a <__ascii_mbtowc+0x1e>
 8007b56:	7813      	ldrb	r3, [r2, #0]
 8007b58:	600b      	str	r3, [r1, #0]
 8007b5a:	7812      	ldrb	r2, [r2, #0]
 8007b5c:	1e10      	subs	r0, r2, #0
 8007b5e:	bf18      	it	ne
 8007b60:	2001      	movne	r0, #1
 8007b62:	b002      	add	sp, #8
 8007b64:	4770      	bx	lr
 8007b66:	4610      	mov	r0, r2
 8007b68:	e7fb      	b.n	8007b62 <__ascii_mbtowc+0x16>
 8007b6a:	f06f 0001 	mvn.w	r0, #1
 8007b6e:	e7f8      	b.n	8007b62 <__ascii_mbtowc+0x16>

08007b70 <memmove>:
 8007b70:	4288      	cmp	r0, r1
 8007b72:	b510      	push	{r4, lr}
 8007b74:	eb01 0402 	add.w	r4, r1, r2
 8007b78:	d902      	bls.n	8007b80 <memmove+0x10>
 8007b7a:	4284      	cmp	r4, r0
 8007b7c:	4623      	mov	r3, r4
 8007b7e:	d807      	bhi.n	8007b90 <memmove+0x20>
 8007b80:	1e43      	subs	r3, r0, #1
 8007b82:	42a1      	cmp	r1, r4
 8007b84:	d008      	beq.n	8007b98 <memmove+0x28>
 8007b86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007b8e:	e7f8      	b.n	8007b82 <memmove+0x12>
 8007b90:	4601      	mov	r1, r0
 8007b92:	4402      	add	r2, r0
 8007b94:	428a      	cmp	r2, r1
 8007b96:	d100      	bne.n	8007b9a <memmove+0x2a>
 8007b98:	bd10      	pop	{r4, pc}
 8007b9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ba2:	e7f7      	b.n	8007b94 <memmove+0x24>

08007ba4 <__malloc_lock>:
 8007ba4:	4801      	ldr	r0, [pc, #4]	; (8007bac <__malloc_lock+0x8>)
 8007ba6:	f000 bc15 	b.w	80083d4 <__retarget_lock_acquire_recursive>
 8007baa:	bf00      	nop
 8007bac:	20000ad8 	.word	0x20000ad8

08007bb0 <__malloc_unlock>:
 8007bb0:	4801      	ldr	r0, [pc, #4]	; (8007bb8 <__malloc_unlock+0x8>)
 8007bb2:	f000 bc10 	b.w	80083d6 <__retarget_lock_release_recursive>
 8007bb6:	bf00      	nop
 8007bb8:	20000ad8 	.word	0x20000ad8

08007bbc <_realloc_r>:
 8007bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bbe:	4607      	mov	r7, r0
 8007bc0:	4614      	mov	r4, r2
 8007bc2:	460e      	mov	r6, r1
 8007bc4:	b921      	cbnz	r1, 8007bd0 <_realloc_r+0x14>
 8007bc6:	4611      	mov	r1, r2
 8007bc8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007bcc:	f7ff bdc8 	b.w	8007760 <_malloc_r>
 8007bd0:	b922      	cbnz	r2, 8007bdc <_realloc_r+0x20>
 8007bd2:	f7ff fd79 	bl	80076c8 <_free_r>
 8007bd6:	4625      	mov	r5, r4
 8007bd8:	4628      	mov	r0, r5
 8007bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bdc:	f000 fc60 	bl	80084a0 <_malloc_usable_size_r>
 8007be0:	42a0      	cmp	r0, r4
 8007be2:	d20f      	bcs.n	8007c04 <_realloc_r+0x48>
 8007be4:	4621      	mov	r1, r4
 8007be6:	4638      	mov	r0, r7
 8007be8:	f7ff fdba 	bl	8007760 <_malloc_r>
 8007bec:	4605      	mov	r5, r0
 8007bee:	2800      	cmp	r0, #0
 8007bf0:	d0f2      	beq.n	8007bd8 <_realloc_r+0x1c>
 8007bf2:	4631      	mov	r1, r6
 8007bf4:	4622      	mov	r2, r4
 8007bf6:	f7fd feab 	bl	8005950 <memcpy>
 8007bfa:	4631      	mov	r1, r6
 8007bfc:	4638      	mov	r0, r7
 8007bfe:	f7ff fd63 	bl	80076c8 <_free_r>
 8007c02:	e7e9      	b.n	8007bd8 <_realloc_r+0x1c>
 8007c04:	4635      	mov	r5, r6
 8007c06:	e7e7      	b.n	8007bd8 <_realloc_r+0x1c>

08007c08 <__sfputc_r>:
 8007c08:	6893      	ldr	r3, [r2, #8]
 8007c0a:	b410      	push	{r4}
 8007c0c:	3b01      	subs	r3, #1
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	6093      	str	r3, [r2, #8]
 8007c12:	da07      	bge.n	8007c24 <__sfputc_r+0x1c>
 8007c14:	6994      	ldr	r4, [r2, #24]
 8007c16:	42a3      	cmp	r3, r4
 8007c18:	db01      	blt.n	8007c1e <__sfputc_r+0x16>
 8007c1a:	290a      	cmp	r1, #10
 8007c1c:	d102      	bne.n	8007c24 <__sfputc_r+0x1c>
 8007c1e:	bc10      	pop	{r4}
 8007c20:	f000 b94a 	b.w	8007eb8 <__swbuf_r>
 8007c24:	6813      	ldr	r3, [r2, #0]
 8007c26:	1c58      	adds	r0, r3, #1
 8007c28:	6010      	str	r0, [r2, #0]
 8007c2a:	7019      	strb	r1, [r3, #0]
 8007c2c:	4608      	mov	r0, r1
 8007c2e:	bc10      	pop	{r4}
 8007c30:	4770      	bx	lr

08007c32 <__sfputs_r>:
 8007c32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c34:	4606      	mov	r6, r0
 8007c36:	460f      	mov	r7, r1
 8007c38:	4614      	mov	r4, r2
 8007c3a:	18d5      	adds	r5, r2, r3
 8007c3c:	42ac      	cmp	r4, r5
 8007c3e:	d101      	bne.n	8007c44 <__sfputs_r+0x12>
 8007c40:	2000      	movs	r0, #0
 8007c42:	e007      	b.n	8007c54 <__sfputs_r+0x22>
 8007c44:	463a      	mov	r2, r7
 8007c46:	4630      	mov	r0, r6
 8007c48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c4c:	f7ff ffdc 	bl	8007c08 <__sfputc_r>
 8007c50:	1c43      	adds	r3, r0, #1
 8007c52:	d1f3      	bne.n	8007c3c <__sfputs_r+0xa>
 8007c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007c58 <_vfiprintf_r>:
 8007c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c5c:	460d      	mov	r5, r1
 8007c5e:	4614      	mov	r4, r2
 8007c60:	4698      	mov	r8, r3
 8007c62:	4606      	mov	r6, r0
 8007c64:	b09d      	sub	sp, #116	; 0x74
 8007c66:	b118      	cbz	r0, 8007c70 <_vfiprintf_r+0x18>
 8007c68:	6983      	ldr	r3, [r0, #24]
 8007c6a:	b90b      	cbnz	r3, 8007c70 <_vfiprintf_r+0x18>
 8007c6c:	f000 fb14 	bl	8008298 <__sinit>
 8007c70:	4b89      	ldr	r3, [pc, #548]	; (8007e98 <_vfiprintf_r+0x240>)
 8007c72:	429d      	cmp	r5, r3
 8007c74:	d11b      	bne.n	8007cae <_vfiprintf_r+0x56>
 8007c76:	6875      	ldr	r5, [r6, #4]
 8007c78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c7a:	07d9      	lsls	r1, r3, #31
 8007c7c:	d405      	bmi.n	8007c8a <_vfiprintf_r+0x32>
 8007c7e:	89ab      	ldrh	r3, [r5, #12]
 8007c80:	059a      	lsls	r2, r3, #22
 8007c82:	d402      	bmi.n	8007c8a <_vfiprintf_r+0x32>
 8007c84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c86:	f000 fba5 	bl	80083d4 <__retarget_lock_acquire_recursive>
 8007c8a:	89ab      	ldrh	r3, [r5, #12]
 8007c8c:	071b      	lsls	r3, r3, #28
 8007c8e:	d501      	bpl.n	8007c94 <_vfiprintf_r+0x3c>
 8007c90:	692b      	ldr	r3, [r5, #16]
 8007c92:	b9eb      	cbnz	r3, 8007cd0 <_vfiprintf_r+0x78>
 8007c94:	4629      	mov	r1, r5
 8007c96:	4630      	mov	r0, r6
 8007c98:	f000 f96e 	bl	8007f78 <__swsetup_r>
 8007c9c:	b1c0      	cbz	r0, 8007cd0 <_vfiprintf_r+0x78>
 8007c9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ca0:	07dc      	lsls	r4, r3, #31
 8007ca2:	d50e      	bpl.n	8007cc2 <_vfiprintf_r+0x6a>
 8007ca4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ca8:	b01d      	add	sp, #116	; 0x74
 8007caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cae:	4b7b      	ldr	r3, [pc, #492]	; (8007e9c <_vfiprintf_r+0x244>)
 8007cb0:	429d      	cmp	r5, r3
 8007cb2:	d101      	bne.n	8007cb8 <_vfiprintf_r+0x60>
 8007cb4:	68b5      	ldr	r5, [r6, #8]
 8007cb6:	e7df      	b.n	8007c78 <_vfiprintf_r+0x20>
 8007cb8:	4b79      	ldr	r3, [pc, #484]	; (8007ea0 <_vfiprintf_r+0x248>)
 8007cba:	429d      	cmp	r5, r3
 8007cbc:	bf08      	it	eq
 8007cbe:	68f5      	ldreq	r5, [r6, #12]
 8007cc0:	e7da      	b.n	8007c78 <_vfiprintf_r+0x20>
 8007cc2:	89ab      	ldrh	r3, [r5, #12]
 8007cc4:	0598      	lsls	r0, r3, #22
 8007cc6:	d4ed      	bmi.n	8007ca4 <_vfiprintf_r+0x4c>
 8007cc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007cca:	f000 fb84 	bl	80083d6 <__retarget_lock_release_recursive>
 8007cce:	e7e9      	b.n	8007ca4 <_vfiprintf_r+0x4c>
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	9309      	str	r3, [sp, #36]	; 0x24
 8007cd4:	2320      	movs	r3, #32
 8007cd6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007cda:	2330      	movs	r3, #48	; 0x30
 8007cdc:	f04f 0901 	mov.w	r9, #1
 8007ce0:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ce4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007ea4 <_vfiprintf_r+0x24c>
 8007ce8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007cec:	4623      	mov	r3, r4
 8007cee:	469a      	mov	sl, r3
 8007cf0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007cf4:	b10a      	cbz	r2, 8007cfa <_vfiprintf_r+0xa2>
 8007cf6:	2a25      	cmp	r2, #37	; 0x25
 8007cf8:	d1f9      	bne.n	8007cee <_vfiprintf_r+0x96>
 8007cfa:	ebba 0b04 	subs.w	fp, sl, r4
 8007cfe:	d00b      	beq.n	8007d18 <_vfiprintf_r+0xc0>
 8007d00:	465b      	mov	r3, fp
 8007d02:	4622      	mov	r2, r4
 8007d04:	4629      	mov	r1, r5
 8007d06:	4630      	mov	r0, r6
 8007d08:	f7ff ff93 	bl	8007c32 <__sfputs_r>
 8007d0c:	3001      	adds	r0, #1
 8007d0e:	f000 80aa 	beq.w	8007e66 <_vfiprintf_r+0x20e>
 8007d12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d14:	445a      	add	r2, fp
 8007d16:	9209      	str	r2, [sp, #36]	; 0x24
 8007d18:	f89a 3000 	ldrb.w	r3, [sl]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	f000 80a2 	beq.w	8007e66 <_vfiprintf_r+0x20e>
 8007d22:	2300      	movs	r3, #0
 8007d24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d2c:	f10a 0a01 	add.w	sl, sl, #1
 8007d30:	9304      	str	r3, [sp, #16]
 8007d32:	9307      	str	r3, [sp, #28]
 8007d34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d38:	931a      	str	r3, [sp, #104]	; 0x68
 8007d3a:	4654      	mov	r4, sl
 8007d3c:	2205      	movs	r2, #5
 8007d3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d42:	4858      	ldr	r0, [pc, #352]	; (8007ea4 <_vfiprintf_r+0x24c>)
 8007d44:	f7ff f922 	bl	8006f8c <memchr>
 8007d48:	9a04      	ldr	r2, [sp, #16]
 8007d4a:	b9d8      	cbnz	r0, 8007d84 <_vfiprintf_r+0x12c>
 8007d4c:	06d1      	lsls	r1, r2, #27
 8007d4e:	bf44      	itt	mi
 8007d50:	2320      	movmi	r3, #32
 8007d52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d56:	0713      	lsls	r3, r2, #28
 8007d58:	bf44      	itt	mi
 8007d5a:	232b      	movmi	r3, #43	; 0x2b
 8007d5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d60:	f89a 3000 	ldrb.w	r3, [sl]
 8007d64:	2b2a      	cmp	r3, #42	; 0x2a
 8007d66:	d015      	beq.n	8007d94 <_vfiprintf_r+0x13c>
 8007d68:	4654      	mov	r4, sl
 8007d6a:	2000      	movs	r0, #0
 8007d6c:	f04f 0c0a 	mov.w	ip, #10
 8007d70:	9a07      	ldr	r2, [sp, #28]
 8007d72:	4621      	mov	r1, r4
 8007d74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d78:	3b30      	subs	r3, #48	; 0x30
 8007d7a:	2b09      	cmp	r3, #9
 8007d7c:	d94e      	bls.n	8007e1c <_vfiprintf_r+0x1c4>
 8007d7e:	b1b0      	cbz	r0, 8007dae <_vfiprintf_r+0x156>
 8007d80:	9207      	str	r2, [sp, #28]
 8007d82:	e014      	b.n	8007dae <_vfiprintf_r+0x156>
 8007d84:	eba0 0308 	sub.w	r3, r0, r8
 8007d88:	fa09 f303 	lsl.w	r3, r9, r3
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	46a2      	mov	sl, r4
 8007d90:	9304      	str	r3, [sp, #16]
 8007d92:	e7d2      	b.n	8007d3a <_vfiprintf_r+0xe2>
 8007d94:	9b03      	ldr	r3, [sp, #12]
 8007d96:	1d19      	adds	r1, r3, #4
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	9103      	str	r1, [sp, #12]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	bfbb      	ittet	lt
 8007da0:	425b      	neglt	r3, r3
 8007da2:	f042 0202 	orrlt.w	r2, r2, #2
 8007da6:	9307      	strge	r3, [sp, #28]
 8007da8:	9307      	strlt	r3, [sp, #28]
 8007daa:	bfb8      	it	lt
 8007dac:	9204      	strlt	r2, [sp, #16]
 8007dae:	7823      	ldrb	r3, [r4, #0]
 8007db0:	2b2e      	cmp	r3, #46	; 0x2e
 8007db2:	d10c      	bne.n	8007dce <_vfiprintf_r+0x176>
 8007db4:	7863      	ldrb	r3, [r4, #1]
 8007db6:	2b2a      	cmp	r3, #42	; 0x2a
 8007db8:	d135      	bne.n	8007e26 <_vfiprintf_r+0x1ce>
 8007dba:	9b03      	ldr	r3, [sp, #12]
 8007dbc:	3402      	adds	r4, #2
 8007dbe:	1d1a      	adds	r2, r3, #4
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	9203      	str	r2, [sp, #12]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	bfb8      	it	lt
 8007dc8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007dcc:	9305      	str	r3, [sp, #20]
 8007dce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007eb4 <_vfiprintf_r+0x25c>
 8007dd2:	2203      	movs	r2, #3
 8007dd4:	4650      	mov	r0, sl
 8007dd6:	7821      	ldrb	r1, [r4, #0]
 8007dd8:	f7ff f8d8 	bl	8006f8c <memchr>
 8007ddc:	b140      	cbz	r0, 8007df0 <_vfiprintf_r+0x198>
 8007dde:	2340      	movs	r3, #64	; 0x40
 8007de0:	eba0 000a 	sub.w	r0, r0, sl
 8007de4:	fa03 f000 	lsl.w	r0, r3, r0
 8007de8:	9b04      	ldr	r3, [sp, #16]
 8007dea:	3401      	adds	r4, #1
 8007dec:	4303      	orrs	r3, r0
 8007dee:	9304      	str	r3, [sp, #16]
 8007df0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007df4:	2206      	movs	r2, #6
 8007df6:	482c      	ldr	r0, [pc, #176]	; (8007ea8 <_vfiprintf_r+0x250>)
 8007df8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007dfc:	f7ff f8c6 	bl	8006f8c <memchr>
 8007e00:	2800      	cmp	r0, #0
 8007e02:	d03f      	beq.n	8007e84 <_vfiprintf_r+0x22c>
 8007e04:	4b29      	ldr	r3, [pc, #164]	; (8007eac <_vfiprintf_r+0x254>)
 8007e06:	bb1b      	cbnz	r3, 8007e50 <_vfiprintf_r+0x1f8>
 8007e08:	9b03      	ldr	r3, [sp, #12]
 8007e0a:	3307      	adds	r3, #7
 8007e0c:	f023 0307 	bic.w	r3, r3, #7
 8007e10:	3308      	adds	r3, #8
 8007e12:	9303      	str	r3, [sp, #12]
 8007e14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e16:	443b      	add	r3, r7
 8007e18:	9309      	str	r3, [sp, #36]	; 0x24
 8007e1a:	e767      	b.n	8007cec <_vfiprintf_r+0x94>
 8007e1c:	460c      	mov	r4, r1
 8007e1e:	2001      	movs	r0, #1
 8007e20:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e24:	e7a5      	b.n	8007d72 <_vfiprintf_r+0x11a>
 8007e26:	2300      	movs	r3, #0
 8007e28:	f04f 0c0a 	mov.w	ip, #10
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	3401      	adds	r4, #1
 8007e30:	9305      	str	r3, [sp, #20]
 8007e32:	4620      	mov	r0, r4
 8007e34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e38:	3a30      	subs	r2, #48	; 0x30
 8007e3a:	2a09      	cmp	r2, #9
 8007e3c:	d903      	bls.n	8007e46 <_vfiprintf_r+0x1ee>
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d0c5      	beq.n	8007dce <_vfiprintf_r+0x176>
 8007e42:	9105      	str	r1, [sp, #20]
 8007e44:	e7c3      	b.n	8007dce <_vfiprintf_r+0x176>
 8007e46:	4604      	mov	r4, r0
 8007e48:	2301      	movs	r3, #1
 8007e4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e4e:	e7f0      	b.n	8007e32 <_vfiprintf_r+0x1da>
 8007e50:	ab03      	add	r3, sp, #12
 8007e52:	9300      	str	r3, [sp, #0]
 8007e54:	462a      	mov	r2, r5
 8007e56:	4630      	mov	r0, r6
 8007e58:	4b15      	ldr	r3, [pc, #84]	; (8007eb0 <_vfiprintf_r+0x258>)
 8007e5a:	a904      	add	r1, sp, #16
 8007e5c:	f7fd fe2c 	bl	8005ab8 <_printf_float>
 8007e60:	4607      	mov	r7, r0
 8007e62:	1c78      	adds	r0, r7, #1
 8007e64:	d1d6      	bne.n	8007e14 <_vfiprintf_r+0x1bc>
 8007e66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e68:	07d9      	lsls	r1, r3, #31
 8007e6a:	d405      	bmi.n	8007e78 <_vfiprintf_r+0x220>
 8007e6c:	89ab      	ldrh	r3, [r5, #12]
 8007e6e:	059a      	lsls	r2, r3, #22
 8007e70:	d402      	bmi.n	8007e78 <_vfiprintf_r+0x220>
 8007e72:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e74:	f000 faaf 	bl	80083d6 <__retarget_lock_release_recursive>
 8007e78:	89ab      	ldrh	r3, [r5, #12]
 8007e7a:	065b      	lsls	r3, r3, #25
 8007e7c:	f53f af12 	bmi.w	8007ca4 <_vfiprintf_r+0x4c>
 8007e80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e82:	e711      	b.n	8007ca8 <_vfiprintf_r+0x50>
 8007e84:	ab03      	add	r3, sp, #12
 8007e86:	9300      	str	r3, [sp, #0]
 8007e88:	462a      	mov	r2, r5
 8007e8a:	4630      	mov	r0, r6
 8007e8c:	4b08      	ldr	r3, [pc, #32]	; (8007eb0 <_vfiprintf_r+0x258>)
 8007e8e:	a904      	add	r1, sp, #16
 8007e90:	f7fe f8ae 	bl	8005ff0 <_printf_i>
 8007e94:	e7e4      	b.n	8007e60 <_vfiprintf_r+0x208>
 8007e96:	bf00      	nop
 8007e98:	0800bc64 	.word	0x0800bc64
 8007e9c:	0800bc84 	.word	0x0800bc84
 8007ea0:	0800bc44 	.word	0x0800bc44
 8007ea4:	0800baec 	.word	0x0800baec
 8007ea8:	0800baf6 	.word	0x0800baf6
 8007eac:	08005ab9 	.word	0x08005ab9
 8007eb0:	08007c33 	.word	0x08007c33
 8007eb4:	0800baf2 	.word	0x0800baf2

08007eb8 <__swbuf_r>:
 8007eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eba:	460e      	mov	r6, r1
 8007ebc:	4614      	mov	r4, r2
 8007ebe:	4605      	mov	r5, r0
 8007ec0:	b118      	cbz	r0, 8007eca <__swbuf_r+0x12>
 8007ec2:	6983      	ldr	r3, [r0, #24]
 8007ec4:	b90b      	cbnz	r3, 8007eca <__swbuf_r+0x12>
 8007ec6:	f000 f9e7 	bl	8008298 <__sinit>
 8007eca:	4b21      	ldr	r3, [pc, #132]	; (8007f50 <__swbuf_r+0x98>)
 8007ecc:	429c      	cmp	r4, r3
 8007ece:	d12b      	bne.n	8007f28 <__swbuf_r+0x70>
 8007ed0:	686c      	ldr	r4, [r5, #4]
 8007ed2:	69a3      	ldr	r3, [r4, #24]
 8007ed4:	60a3      	str	r3, [r4, #8]
 8007ed6:	89a3      	ldrh	r3, [r4, #12]
 8007ed8:	071a      	lsls	r2, r3, #28
 8007eda:	d52f      	bpl.n	8007f3c <__swbuf_r+0x84>
 8007edc:	6923      	ldr	r3, [r4, #16]
 8007ede:	b36b      	cbz	r3, 8007f3c <__swbuf_r+0x84>
 8007ee0:	6923      	ldr	r3, [r4, #16]
 8007ee2:	6820      	ldr	r0, [r4, #0]
 8007ee4:	b2f6      	uxtb	r6, r6
 8007ee6:	1ac0      	subs	r0, r0, r3
 8007ee8:	6963      	ldr	r3, [r4, #20]
 8007eea:	4637      	mov	r7, r6
 8007eec:	4283      	cmp	r3, r0
 8007eee:	dc04      	bgt.n	8007efa <__swbuf_r+0x42>
 8007ef0:	4621      	mov	r1, r4
 8007ef2:	4628      	mov	r0, r5
 8007ef4:	f000 f93c 	bl	8008170 <_fflush_r>
 8007ef8:	bb30      	cbnz	r0, 8007f48 <__swbuf_r+0x90>
 8007efa:	68a3      	ldr	r3, [r4, #8]
 8007efc:	3001      	adds	r0, #1
 8007efe:	3b01      	subs	r3, #1
 8007f00:	60a3      	str	r3, [r4, #8]
 8007f02:	6823      	ldr	r3, [r4, #0]
 8007f04:	1c5a      	adds	r2, r3, #1
 8007f06:	6022      	str	r2, [r4, #0]
 8007f08:	701e      	strb	r6, [r3, #0]
 8007f0a:	6963      	ldr	r3, [r4, #20]
 8007f0c:	4283      	cmp	r3, r0
 8007f0e:	d004      	beq.n	8007f1a <__swbuf_r+0x62>
 8007f10:	89a3      	ldrh	r3, [r4, #12]
 8007f12:	07db      	lsls	r3, r3, #31
 8007f14:	d506      	bpl.n	8007f24 <__swbuf_r+0x6c>
 8007f16:	2e0a      	cmp	r6, #10
 8007f18:	d104      	bne.n	8007f24 <__swbuf_r+0x6c>
 8007f1a:	4621      	mov	r1, r4
 8007f1c:	4628      	mov	r0, r5
 8007f1e:	f000 f927 	bl	8008170 <_fflush_r>
 8007f22:	b988      	cbnz	r0, 8007f48 <__swbuf_r+0x90>
 8007f24:	4638      	mov	r0, r7
 8007f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f28:	4b0a      	ldr	r3, [pc, #40]	; (8007f54 <__swbuf_r+0x9c>)
 8007f2a:	429c      	cmp	r4, r3
 8007f2c:	d101      	bne.n	8007f32 <__swbuf_r+0x7a>
 8007f2e:	68ac      	ldr	r4, [r5, #8]
 8007f30:	e7cf      	b.n	8007ed2 <__swbuf_r+0x1a>
 8007f32:	4b09      	ldr	r3, [pc, #36]	; (8007f58 <__swbuf_r+0xa0>)
 8007f34:	429c      	cmp	r4, r3
 8007f36:	bf08      	it	eq
 8007f38:	68ec      	ldreq	r4, [r5, #12]
 8007f3a:	e7ca      	b.n	8007ed2 <__swbuf_r+0x1a>
 8007f3c:	4621      	mov	r1, r4
 8007f3e:	4628      	mov	r0, r5
 8007f40:	f000 f81a 	bl	8007f78 <__swsetup_r>
 8007f44:	2800      	cmp	r0, #0
 8007f46:	d0cb      	beq.n	8007ee0 <__swbuf_r+0x28>
 8007f48:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007f4c:	e7ea      	b.n	8007f24 <__swbuf_r+0x6c>
 8007f4e:	bf00      	nop
 8007f50:	0800bc64 	.word	0x0800bc64
 8007f54:	0800bc84 	.word	0x0800bc84
 8007f58:	0800bc44 	.word	0x0800bc44

08007f5c <__ascii_wctomb>:
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	4608      	mov	r0, r1
 8007f60:	b141      	cbz	r1, 8007f74 <__ascii_wctomb+0x18>
 8007f62:	2aff      	cmp	r2, #255	; 0xff
 8007f64:	d904      	bls.n	8007f70 <__ascii_wctomb+0x14>
 8007f66:	228a      	movs	r2, #138	; 0x8a
 8007f68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f6c:	601a      	str	r2, [r3, #0]
 8007f6e:	4770      	bx	lr
 8007f70:	2001      	movs	r0, #1
 8007f72:	700a      	strb	r2, [r1, #0]
 8007f74:	4770      	bx	lr
	...

08007f78 <__swsetup_r>:
 8007f78:	4b32      	ldr	r3, [pc, #200]	; (8008044 <__swsetup_r+0xcc>)
 8007f7a:	b570      	push	{r4, r5, r6, lr}
 8007f7c:	681d      	ldr	r5, [r3, #0]
 8007f7e:	4606      	mov	r6, r0
 8007f80:	460c      	mov	r4, r1
 8007f82:	b125      	cbz	r5, 8007f8e <__swsetup_r+0x16>
 8007f84:	69ab      	ldr	r3, [r5, #24]
 8007f86:	b913      	cbnz	r3, 8007f8e <__swsetup_r+0x16>
 8007f88:	4628      	mov	r0, r5
 8007f8a:	f000 f985 	bl	8008298 <__sinit>
 8007f8e:	4b2e      	ldr	r3, [pc, #184]	; (8008048 <__swsetup_r+0xd0>)
 8007f90:	429c      	cmp	r4, r3
 8007f92:	d10f      	bne.n	8007fb4 <__swsetup_r+0x3c>
 8007f94:	686c      	ldr	r4, [r5, #4]
 8007f96:	89a3      	ldrh	r3, [r4, #12]
 8007f98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f9c:	0719      	lsls	r1, r3, #28
 8007f9e:	d42c      	bmi.n	8007ffa <__swsetup_r+0x82>
 8007fa0:	06dd      	lsls	r5, r3, #27
 8007fa2:	d411      	bmi.n	8007fc8 <__swsetup_r+0x50>
 8007fa4:	2309      	movs	r3, #9
 8007fa6:	6033      	str	r3, [r6, #0]
 8007fa8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007fac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007fb0:	81a3      	strh	r3, [r4, #12]
 8007fb2:	e03e      	b.n	8008032 <__swsetup_r+0xba>
 8007fb4:	4b25      	ldr	r3, [pc, #148]	; (800804c <__swsetup_r+0xd4>)
 8007fb6:	429c      	cmp	r4, r3
 8007fb8:	d101      	bne.n	8007fbe <__swsetup_r+0x46>
 8007fba:	68ac      	ldr	r4, [r5, #8]
 8007fbc:	e7eb      	b.n	8007f96 <__swsetup_r+0x1e>
 8007fbe:	4b24      	ldr	r3, [pc, #144]	; (8008050 <__swsetup_r+0xd8>)
 8007fc0:	429c      	cmp	r4, r3
 8007fc2:	bf08      	it	eq
 8007fc4:	68ec      	ldreq	r4, [r5, #12]
 8007fc6:	e7e6      	b.n	8007f96 <__swsetup_r+0x1e>
 8007fc8:	0758      	lsls	r0, r3, #29
 8007fca:	d512      	bpl.n	8007ff2 <__swsetup_r+0x7a>
 8007fcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007fce:	b141      	cbz	r1, 8007fe2 <__swsetup_r+0x6a>
 8007fd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007fd4:	4299      	cmp	r1, r3
 8007fd6:	d002      	beq.n	8007fde <__swsetup_r+0x66>
 8007fd8:	4630      	mov	r0, r6
 8007fda:	f7ff fb75 	bl	80076c8 <_free_r>
 8007fde:	2300      	movs	r3, #0
 8007fe0:	6363      	str	r3, [r4, #52]	; 0x34
 8007fe2:	89a3      	ldrh	r3, [r4, #12]
 8007fe4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007fe8:	81a3      	strh	r3, [r4, #12]
 8007fea:	2300      	movs	r3, #0
 8007fec:	6063      	str	r3, [r4, #4]
 8007fee:	6923      	ldr	r3, [r4, #16]
 8007ff0:	6023      	str	r3, [r4, #0]
 8007ff2:	89a3      	ldrh	r3, [r4, #12]
 8007ff4:	f043 0308 	orr.w	r3, r3, #8
 8007ff8:	81a3      	strh	r3, [r4, #12]
 8007ffa:	6923      	ldr	r3, [r4, #16]
 8007ffc:	b94b      	cbnz	r3, 8008012 <__swsetup_r+0x9a>
 8007ffe:	89a3      	ldrh	r3, [r4, #12]
 8008000:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008008:	d003      	beq.n	8008012 <__swsetup_r+0x9a>
 800800a:	4621      	mov	r1, r4
 800800c:	4630      	mov	r0, r6
 800800e:	f000 fa07 	bl	8008420 <__smakebuf_r>
 8008012:	89a0      	ldrh	r0, [r4, #12]
 8008014:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008018:	f010 0301 	ands.w	r3, r0, #1
 800801c:	d00a      	beq.n	8008034 <__swsetup_r+0xbc>
 800801e:	2300      	movs	r3, #0
 8008020:	60a3      	str	r3, [r4, #8]
 8008022:	6963      	ldr	r3, [r4, #20]
 8008024:	425b      	negs	r3, r3
 8008026:	61a3      	str	r3, [r4, #24]
 8008028:	6923      	ldr	r3, [r4, #16]
 800802a:	b943      	cbnz	r3, 800803e <__swsetup_r+0xc6>
 800802c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008030:	d1ba      	bne.n	8007fa8 <__swsetup_r+0x30>
 8008032:	bd70      	pop	{r4, r5, r6, pc}
 8008034:	0781      	lsls	r1, r0, #30
 8008036:	bf58      	it	pl
 8008038:	6963      	ldrpl	r3, [r4, #20]
 800803a:	60a3      	str	r3, [r4, #8]
 800803c:	e7f4      	b.n	8008028 <__swsetup_r+0xb0>
 800803e:	2000      	movs	r0, #0
 8008040:	e7f7      	b.n	8008032 <__swsetup_r+0xba>
 8008042:	bf00      	nop
 8008044:	200000a0 	.word	0x200000a0
 8008048:	0800bc64 	.word	0x0800bc64
 800804c:	0800bc84 	.word	0x0800bc84
 8008050:	0800bc44 	.word	0x0800bc44

08008054 <abort>:
 8008054:	2006      	movs	r0, #6
 8008056:	b508      	push	{r3, lr}
 8008058:	f000 fa52 	bl	8008500 <raise>
 800805c:	2001      	movs	r0, #1
 800805e:	f7f9 ffd4 	bl	800200a <_exit>
	...

08008064 <__sflush_r>:
 8008064:	898a      	ldrh	r2, [r1, #12]
 8008066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800806a:	4605      	mov	r5, r0
 800806c:	0710      	lsls	r0, r2, #28
 800806e:	460c      	mov	r4, r1
 8008070:	d458      	bmi.n	8008124 <__sflush_r+0xc0>
 8008072:	684b      	ldr	r3, [r1, #4]
 8008074:	2b00      	cmp	r3, #0
 8008076:	dc05      	bgt.n	8008084 <__sflush_r+0x20>
 8008078:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800807a:	2b00      	cmp	r3, #0
 800807c:	dc02      	bgt.n	8008084 <__sflush_r+0x20>
 800807e:	2000      	movs	r0, #0
 8008080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008084:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008086:	2e00      	cmp	r6, #0
 8008088:	d0f9      	beq.n	800807e <__sflush_r+0x1a>
 800808a:	2300      	movs	r3, #0
 800808c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008090:	682f      	ldr	r7, [r5, #0]
 8008092:	602b      	str	r3, [r5, #0]
 8008094:	d032      	beq.n	80080fc <__sflush_r+0x98>
 8008096:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008098:	89a3      	ldrh	r3, [r4, #12]
 800809a:	075a      	lsls	r2, r3, #29
 800809c:	d505      	bpl.n	80080aa <__sflush_r+0x46>
 800809e:	6863      	ldr	r3, [r4, #4]
 80080a0:	1ac0      	subs	r0, r0, r3
 80080a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80080a4:	b10b      	cbz	r3, 80080aa <__sflush_r+0x46>
 80080a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80080a8:	1ac0      	subs	r0, r0, r3
 80080aa:	2300      	movs	r3, #0
 80080ac:	4602      	mov	r2, r0
 80080ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80080b0:	4628      	mov	r0, r5
 80080b2:	6a21      	ldr	r1, [r4, #32]
 80080b4:	47b0      	blx	r6
 80080b6:	1c43      	adds	r3, r0, #1
 80080b8:	89a3      	ldrh	r3, [r4, #12]
 80080ba:	d106      	bne.n	80080ca <__sflush_r+0x66>
 80080bc:	6829      	ldr	r1, [r5, #0]
 80080be:	291d      	cmp	r1, #29
 80080c0:	d82c      	bhi.n	800811c <__sflush_r+0xb8>
 80080c2:	4a2a      	ldr	r2, [pc, #168]	; (800816c <__sflush_r+0x108>)
 80080c4:	40ca      	lsrs	r2, r1
 80080c6:	07d6      	lsls	r6, r2, #31
 80080c8:	d528      	bpl.n	800811c <__sflush_r+0xb8>
 80080ca:	2200      	movs	r2, #0
 80080cc:	6062      	str	r2, [r4, #4]
 80080ce:	6922      	ldr	r2, [r4, #16]
 80080d0:	04d9      	lsls	r1, r3, #19
 80080d2:	6022      	str	r2, [r4, #0]
 80080d4:	d504      	bpl.n	80080e0 <__sflush_r+0x7c>
 80080d6:	1c42      	adds	r2, r0, #1
 80080d8:	d101      	bne.n	80080de <__sflush_r+0x7a>
 80080da:	682b      	ldr	r3, [r5, #0]
 80080dc:	b903      	cbnz	r3, 80080e0 <__sflush_r+0x7c>
 80080de:	6560      	str	r0, [r4, #84]	; 0x54
 80080e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080e2:	602f      	str	r7, [r5, #0]
 80080e4:	2900      	cmp	r1, #0
 80080e6:	d0ca      	beq.n	800807e <__sflush_r+0x1a>
 80080e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80080ec:	4299      	cmp	r1, r3
 80080ee:	d002      	beq.n	80080f6 <__sflush_r+0x92>
 80080f0:	4628      	mov	r0, r5
 80080f2:	f7ff fae9 	bl	80076c8 <_free_r>
 80080f6:	2000      	movs	r0, #0
 80080f8:	6360      	str	r0, [r4, #52]	; 0x34
 80080fa:	e7c1      	b.n	8008080 <__sflush_r+0x1c>
 80080fc:	6a21      	ldr	r1, [r4, #32]
 80080fe:	2301      	movs	r3, #1
 8008100:	4628      	mov	r0, r5
 8008102:	47b0      	blx	r6
 8008104:	1c41      	adds	r1, r0, #1
 8008106:	d1c7      	bne.n	8008098 <__sflush_r+0x34>
 8008108:	682b      	ldr	r3, [r5, #0]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d0c4      	beq.n	8008098 <__sflush_r+0x34>
 800810e:	2b1d      	cmp	r3, #29
 8008110:	d001      	beq.n	8008116 <__sflush_r+0xb2>
 8008112:	2b16      	cmp	r3, #22
 8008114:	d101      	bne.n	800811a <__sflush_r+0xb6>
 8008116:	602f      	str	r7, [r5, #0]
 8008118:	e7b1      	b.n	800807e <__sflush_r+0x1a>
 800811a:	89a3      	ldrh	r3, [r4, #12]
 800811c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008120:	81a3      	strh	r3, [r4, #12]
 8008122:	e7ad      	b.n	8008080 <__sflush_r+0x1c>
 8008124:	690f      	ldr	r7, [r1, #16]
 8008126:	2f00      	cmp	r7, #0
 8008128:	d0a9      	beq.n	800807e <__sflush_r+0x1a>
 800812a:	0793      	lsls	r3, r2, #30
 800812c:	bf18      	it	ne
 800812e:	2300      	movne	r3, #0
 8008130:	680e      	ldr	r6, [r1, #0]
 8008132:	bf08      	it	eq
 8008134:	694b      	ldreq	r3, [r1, #20]
 8008136:	eba6 0807 	sub.w	r8, r6, r7
 800813a:	600f      	str	r7, [r1, #0]
 800813c:	608b      	str	r3, [r1, #8]
 800813e:	f1b8 0f00 	cmp.w	r8, #0
 8008142:	dd9c      	ble.n	800807e <__sflush_r+0x1a>
 8008144:	4643      	mov	r3, r8
 8008146:	463a      	mov	r2, r7
 8008148:	4628      	mov	r0, r5
 800814a:	6a21      	ldr	r1, [r4, #32]
 800814c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800814e:	47b0      	blx	r6
 8008150:	2800      	cmp	r0, #0
 8008152:	dc06      	bgt.n	8008162 <__sflush_r+0xfe>
 8008154:	89a3      	ldrh	r3, [r4, #12]
 8008156:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800815a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800815e:	81a3      	strh	r3, [r4, #12]
 8008160:	e78e      	b.n	8008080 <__sflush_r+0x1c>
 8008162:	4407      	add	r7, r0
 8008164:	eba8 0800 	sub.w	r8, r8, r0
 8008168:	e7e9      	b.n	800813e <__sflush_r+0xda>
 800816a:	bf00      	nop
 800816c:	20400001 	.word	0x20400001

08008170 <_fflush_r>:
 8008170:	b538      	push	{r3, r4, r5, lr}
 8008172:	690b      	ldr	r3, [r1, #16]
 8008174:	4605      	mov	r5, r0
 8008176:	460c      	mov	r4, r1
 8008178:	b913      	cbnz	r3, 8008180 <_fflush_r+0x10>
 800817a:	2500      	movs	r5, #0
 800817c:	4628      	mov	r0, r5
 800817e:	bd38      	pop	{r3, r4, r5, pc}
 8008180:	b118      	cbz	r0, 800818a <_fflush_r+0x1a>
 8008182:	6983      	ldr	r3, [r0, #24]
 8008184:	b90b      	cbnz	r3, 800818a <_fflush_r+0x1a>
 8008186:	f000 f887 	bl	8008298 <__sinit>
 800818a:	4b14      	ldr	r3, [pc, #80]	; (80081dc <_fflush_r+0x6c>)
 800818c:	429c      	cmp	r4, r3
 800818e:	d11b      	bne.n	80081c8 <_fflush_r+0x58>
 8008190:	686c      	ldr	r4, [r5, #4]
 8008192:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d0ef      	beq.n	800817a <_fflush_r+0xa>
 800819a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800819c:	07d0      	lsls	r0, r2, #31
 800819e:	d404      	bmi.n	80081aa <_fflush_r+0x3a>
 80081a0:	0599      	lsls	r1, r3, #22
 80081a2:	d402      	bmi.n	80081aa <_fflush_r+0x3a>
 80081a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081a6:	f000 f915 	bl	80083d4 <__retarget_lock_acquire_recursive>
 80081aa:	4628      	mov	r0, r5
 80081ac:	4621      	mov	r1, r4
 80081ae:	f7ff ff59 	bl	8008064 <__sflush_r>
 80081b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80081b4:	4605      	mov	r5, r0
 80081b6:	07da      	lsls	r2, r3, #31
 80081b8:	d4e0      	bmi.n	800817c <_fflush_r+0xc>
 80081ba:	89a3      	ldrh	r3, [r4, #12]
 80081bc:	059b      	lsls	r3, r3, #22
 80081be:	d4dd      	bmi.n	800817c <_fflush_r+0xc>
 80081c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081c2:	f000 f908 	bl	80083d6 <__retarget_lock_release_recursive>
 80081c6:	e7d9      	b.n	800817c <_fflush_r+0xc>
 80081c8:	4b05      	ldr	r3, [pc, #20]	; (80081e0 <_fflush_r+0x70>)
 80081ca:	429c      	cmp	r4, r3
 80081cc:	d101      	bne.n	80081d2 <_fflush_r+0x62>
 80081ce:	68ac      	ldr	r4, [r5, #8]
 80081d0:	e7df      	b.n	8008192 <_fflush_r+0x22>
 80081d2:	4b04      	ldr	r3, [pc, #16]	; (80081e4 <_fflush_r+0x74>)
 80081d4:	429c      	cmp	r4, r3
 80081d6:	bf08      	it	eq
 80081d8:	68ec      	ldreq	r4, [r5, #12]
 80081da:	e7da      	b.n	8008192 <_fflush_r+0x22>
 80081dc:	0800bc64 	.word	0x0800bc64
 80081e0:	0800bc84 	.word	0x0800bc84
 80081e4:	0800bc44 	.word	0x0800bc44

080081e8 <std>:
 80081e8:	2300      	movs	r3, #0
 80081ea:	b510      	push	{r4, lr}
 80081ec:	4604      	mov	r4, r0
 80081ee:	e9c0 3300 	strd	r3, r3, [r0]
 80081f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80081f6:	6083      	str	r3, [r0, #8]
 80081f8:	8181      	strh	r1, [r0, #12]
 80081fa:	6643      	str	r3, [r0, #100]	; 0x64
 80081fc:	81c2      	strh	r2, [r0, #14]
 80081fe:	6183      	str	r3, [r0, #24]
 8008200:	4619      	mov	r1, r3
 8008202:	2208      	movs	r2, #8
 8008204:	305c      	adds	r0, #92	; 0x5c
 8008206:	f7fd fbb1 	bl	800596c <memset>
 800820a:	4b05      	ldr	r3, [pc, #20]	; (8008220 <std+0x38>)
 800820c:	6224      	str	r4, [r4, #32]
 800820e:	6263      	str	r3, [r4, #36]	; 0x24
 8008210:	4b04      	ldr	r3, [pc, #16]	; (8008224 <std+0x3c>)
 8008212:	62a3      	str	r3, [r4, #40]	; 0x28
 8008214:	4b04      	ldr	r3, [pc, #16]	; (8008228 <std+0x40>)
 8008216:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008218:	4b04      	ldr	r3, [pc, #16]	; (800822c <std+0x44>)
 800821a:	6323      	str	r3, [r4, #48]	; 0x30
 800821c:	bd10      	pop	{r4, pc}
 800821e:	bf00      	nop
 8008220:	08008539 	.word	0x08008539
 8008224:	0800855b 	.word	0x0800855b
 8008228:	08008593 	.word	0x08008593
 800822c:	080085b7 	.word	0x080085b7

08008230 <_cleanup_r>:
 8008230:	4901      	ldr	r1, [pc, #4]	; (8008238 <_cleanup_r+0x8>)
 8008232:	f000 b8af 	b.w	8008394 <_fwalk_reent>
 8008236:	bf00      	nop
 8008238:	08008171 	.word	0x08008171

0800823c <__sfmoreglue>:
 800823c:	b570      	push	{r4, r5, r6, lr}
 800823e:	2568      	movs	r5, #104	; 0x68
 8008240:	1e4a      	subs	r2, r1, #1
 8008242:	4355      	muls	r5, r2
 8008244:	460e      	mov	r6, r1
 8008246:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800824a:	f7ff fa89 	bl	8007760 <_malloc_r>
 800824e:	4604      	mov	r4, r0
 8008250:	b140      	cbz	r0, 8008264 <__sfmoreglue+0x28>
 8008252:	2100      	movs	r1, #0
 8008254:	e9c0 1600 	strd	r1, r6, [r0]
 8008258:	300c      	adds	r0, #12
 800825a:	60a0      	str	r0, [r4, #8]
 800825c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008260:	f7fd fb84 	bl	800596c <memset>
 8008264:	4620      	mov	r0, r4
 8008266:	bd70      	pop	{r4, r5, r6, pc}

08008268 <__sfp_lock_acquire>:
 8008268:	4801      	ldr	r0, [pc, #4]	; (8008270 <__sfp_lock_acquire+0x8>)
 800826a:	f000 b8b3 	b.w	80083d4 <__retarget_lock_acquire_recursive>
 800826e:	bf00      	nop
 8008270:	20000adc 	.word	0x20000adc

08008274 <__sfp_lock_release>:
 8008274:	4801      	ldr	r0, [pc, #4]	; (800827c <__sfp_lock_release+0x8>)
 8008276:	f000 b8ae 	b.w	80083d6 <__retarget_lock_release_recursive>
 800827a:	bf00      	nop
 800827c:	20000adc 	.word	0x20000adc

08008280 <__sinit_lock_acquire>:
 8008280:	4801      	ldr	r0, [pc, #4]	; (8008288 <__sinit_lock_acquire+0x8>)
 8008282:	f000 b8a7 	b.w	80083d4 <__retarget_lock_acquire_recursive>
 8008286:	bf00      	nop
 8008288:	20000ad7 	.word	0x20000ad7

0800828c <__sinit_lock_release>:
 800828c:	4801      	ldr	r0, [pc, #4]	; (8008294 <__sinit_lock_release+0x8>)
 800828e:	f000 b8a2 	b.w	80083d6 <__retarget_lock_release_recursive>
 8008292:	bf00      	nop
 8008294:	20000ad7 	.word	0x20000ad7

08008298 <__sinit>:
 8008298:	b510      	push	{r4, lr}
 800829a:	4604      	mov	r4, r0
 800829c:	f7ff fff0 	bl	8008280 <__sinit_lock_acquire>
 80082a0:	69a3      	ldr	r3, [r4, #24]
 80082a2:	b11b      	cbz	r3, 80082ac <__sinit+0x14>
 80082a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082a8:	f7ff bff0 	b.w	800828c <__sinit_lock_release>
 80082ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80082b0:	6523      	str	r3, [r4, #80]	; 0x50
 80082b2:	4b13      	ldr	r3, [pc, #76]	; (8008300 <__sinit+0x68>)
 80082b4:	4a13      	ldr	r2, [pc, #76]	; (8008304 <__sinit+0x6c>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80082ba:	42a3      	cmp	r3, r4
 80082bc:	bf08      	it	eq
 80082be:	2301      	moveq	r3, #1
 80082c0:	4620      	mov	r0, r4
 80082c2:	bf08      	it	eq
 80082c4:	61a3      	streq	r3, [r4, #24]
 80082c6:	f000 f81f 	bl	8008308 <__sfp>
 80082ca:	6060      	str	r0, [r4, #4]
 80082cc:	4620      	mov	r0, r4
 80082ce:	f000 f81b 	bl	8008308 <__sfp>
 80082d2:	60a0      	str	r0, [r4, #8]
 80082d4:	4620      	mov	r0, r4
 80082d6:	f000 f817 	bl	8008308 <__sfp>
 80082da:	2200      	movs	r2, #0
 80082dc:	2104      	movs	r1, #4
 80082de:	60e0      	str	r0, [r4, #12]
 80082e0:	6860      	ldr	r0, [r4, #4]
 80082e2:	f7ff ff81 	bl	80081e8 <std>
 80082e6:	2201      	movs	r2, #1
 80082e8:	2109      	movs	r1, #9
 80082ea:	68a0      	ldr	r0, [r4, #8]
 80082ec:	f7ff ff7c 	bl	80081e8 <std>
 80082f0:	2202      	movs	r2, #2
 80082f2:	2112      	movs	r1, #18
 80082f4:	68e0      	ldr	r0, [r4, #12]
 80082f6:	f7ff ff77 	bl	80081e8 <std>
 80082fa:	2301      	movs	r3, #1
 80082fc:	61a3      	str	r3, [r4, #24]
 80082fe:	e7d1      	b.n	80082a4 <__sinit+0xc>
 8008300:	0800b8c4 	.word	0x0800b8c4
 8008304:	08008231 	.word	0x08008231

08008308 <__sfp>:
 8008308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800830a:	4607      	mov	r7, r0
 800830c:	f7ff ffac 	bl	8008268 <__sfp_lock_acquire>
 8008310:	4b1e      	ldr	r3, [pc, #120]	; (800838c <__sfp+0x84>)
 8008312:	681e      	ldr	r6, [r3, #0]
 8008314:	69b3      	ldr	r3, [r6, #24]
 8008316:	b913      	cbnz	r3, 800831e <__sfp+0x16>
 8008318:	4630      	mov	r0, r6
 800831a:	f7ff ffbd 	bl	8008298 <__sinit>
 800831e:	3648      	adds	r6, #72	; 0x48
 8008320:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008324:	3b01      	subs	r3, #1
 8008326:	d503      	bpl.n	8008330 <__sfp+0x28>
 8008328:	6833      	ldr	r3, [r6, #0]
 800832a:	b30b      	cbz	r3, 8008370 <__sfp+0x68>
 800832c:	6836      	ldr	r6, [r6, #0]
 800832e:	e7f7      	b.n	8008320 <__sfp+0x18>
 8008330:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008334:	b9d5      	cbnz	r5, 800836c <__sfp+0x64>
 8008336:	4b16      	ldr	r3, [pc, #88]	; (8008390 <__sfp+0x88>)
 8008338:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800833c:	60e3      	str	r3, [r4, #12]
 800833e:	6665      	str	r5, [r4, #100]	; 0x64
 8008340:	f000 f847 	bl	80083d2 <__retarget_lock_init_recursive>
 8008344:	f7ff ff96 	bl	8008274 <__sfp_lock_release>
 8008348:	2208      	movs	r2, #8
 800834a:	4629      	mov	r1, r5
 800834c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008350:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008354:	6025      	str	r5, [r4, #0]
 8008356:	61a5      	str	r5, [r4, #24]
 8008358:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800835c:	f7fd fb06 	bl	800596c <memset>
 8008360:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008364:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008368:	4620      	mov	r0, r4
 800836a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800836c:	3468      	adds	r4, #104	; 0x68
 800836e:	e7d9      	b.n	8008324 <__sfp+0x1c>
 8008370:	2104      	movs	r1, #4
 8008372:	4638      	mov	r0, r7
 8008374:	f7ff ff62 	bl	800823c <__sfmoreglue>
 8008378:	4604      	mov	r4, r0
 800837a:	6030      	str	r0, [r6, #0]
 800837c:	2800      	cmp	r0, #0
 800837e:	d1d5      	bne.n	800832c <__sfp+0x24>
 8008380:	f7ff ff78 	bl	8008274 <__sfp_lock_release>
 8008384:	230c      	movs	r3, #12
 8008386:	603b      	str	r3, [r7, #0]
 8008388:	e7ee      	b.n	8008368 <__sfp+0x60>
 800838a:	bf00      	nop
 800838c:	0800b8c4 	.word	0x0800b8c4
 8008390:	ffff0001 	.word	0xffff0001

08008394 <_fwalk_reent>:
 8008394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008398:	4606      	mov	r6, r0
 800839a:	4688      	mov	r8, r1
 800839c:	2700      	movs	r7, #0
 800839e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80083a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80083a6:	f1b9 0901 	subs.w	r9, r9, #1
 80083aa:	d505      	bpl.n	80083b8 <_fwalk_reent+0x24>
 80083ac:	6824      	ldr	r4, [r4, #0]
 80083ae:	2c00      	cmp	r4, #0
 80083b0:	d1f7      	bne.n	80083a2 <_fwalk_reent+0xe>
 80083b2:	4638      	mov	r0, r7
 80083b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083b8:	89ab      	ldrh	r3, [r5, #12]
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	d907      	bls.n	80083ce <_fwalk_reent+0x3a>
 80083be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80083c2:	3301      	adds	r3, #1
 80083c4:	d003      	beq.n	80083ce <_fwalk_reent+0x3a>
 80083c6:	4629      	mov	r1, r5
 80083c8:	4630      	mov	r0, r6
 80083ca:	47c0      	blx	r8
 80083cc:	4307      	orrs	r7, r0
 80083ce:	3568      	adds	r5, #104	; 0x68
 80083d0:	e7e9      	b.n	80083a6 <_fwalk_reent+0x12>

080083d2 <__retarget_lock_init_recursive>:
 80083d2:	4770      	bx	lr

080083d4 <__retarget_lock_acquire_recursive>:
 80083d4:	4770      	bx	lr

080083d6 <__retarget_lock_release_recursive>:
 80083d6:	4770      	bx	lr

080083d8 <__swhatbuf_r>:
 80083d8:	b570      	push	{r4, r5, r6, lr}
 80083da:	460e      	mov	r6, r1
 80083dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083e0:	4614      	mov	r4, r2
 80083e2:	2900      	cmp	r1, #0
 80083e4:	461d      	mov	r5, r3
 80083e6:	b096      	sub	sp, #88	; 0x58
 80083e8:	da07      	bge.n	80083fa <__swhatbuf_r+0x22>
 80083ea:	2300      	movs	r3, #0
 80083ec:	602b      	str	r3, [r5, #0]
 80083ee:	89b3      	ldrh	r3, [r6, #12]
 80083f0:	061a      	lsls	r2, r3, #24
 80083f2:	d410      	bmi.n	8008416 <__swhatbuf_r+0x3e>
 80083f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083f8:	e00e      	b.n	8008418 <__swhatbuf_r+0x40>
 80083fa:	466a      	mov	r2, sp
 80083fc:	f000 f902 	bl	8008604 <_fstat_r>
 8008400:	2800      	cmp	r0, #0
 8008402:	dbf2      	blt.n	80083ea <__swhatbuf_r+0x12>
 8008404:	9a01      	ldr	r2, [sp, #4]
 8008406:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800840a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800840e:	425a      	negs	r2, r3
 8008410:	415a      	adcs	r2, r3
 8008412:	602a      	str	r2, [r5, #0]
 8008414:	e7ee      	b.n	80083f4 <__swhatbuf_r+0x1c>
 8008416:	2340      	movs	r3, #64	; 0x40
 8008418:	2000      	movs	r0, #0
 800841a:	6023      	str	r3, [r4, #0]
 800841c:	b016      	add	sp, #88	; 0x58
 800841e:	bd70      	pop	{r4, r5, r6, pc}

08008420 <__smakebuf_r>:
 8008420:	898b      	ldrh	r3, [r1, #12]
 8008422:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008424:	079d      	lsls	r5, r3, #30
 8008426:	4606      	mov	r6, r0
 8008428:	460c      	mov	r4, r1
 800842a:	d507      	bpl.n	800843c <__smakebuf_r+0x1c>
 800842c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008430:	6023      	str	r3, [r4, #0]
 8008432:	6123      	str	r3, [r4, #16]
 8008434:	2301      	movs	r3, #1
 8008436:	6163      	str	r3, [r4, #20]
 8008438:	b002      	add	sp, #8
 800843a:	bd70      	pop	{r4, r5, r6, pc}
 800843c:	466a      	mov	r2, sp
 800843e:	ab01      	add	r3, sp, #4
 8008440:	f7ff ffca 	bl	80083d8 <__swhatbuf_r>
 8008444:	9900      	ldr	r1, [sp, #0]
 8008446:	4605      	mov	r5, r0
 8008448:	4630      	mov	r0, r6
 800844a:	f7ff f989 	bl	8007760 <_malloc_r>
 800844e:	b948      	cbnz	r0, 8008464 <__smakebuf_r+0x44>
 8008450:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008454:	059a      	lsls	r2, r3, #22
 8008456:	d4ef      	bmi.n	8008438 <__smakebuf_r+0x18>
 8008458:	f023 0303 	bic.w	r3, r3, #3
 800845c:	f043 0302 	orr.w	r3, r3, #2
 8008460:	81a3      	strh	r3, [r4, #12]
 8008462:	e7e3      	b.n	800842c <__smakebuf_r+0xc>
 8008464:	4b0d      	ldr	r3, [pc, #52]	; (800849c <__smakebuf_r+0x7c>)
 8008466:	62b3      	str	r3, [r6, #40]	; 0x28
 8008468:	89a3      	ldrh	r3, [r4, #12]
 800846a:	6020      	str	r0, [r4, #0]
 800846c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008470:	81a3      	strh	r3, [r4, #12]
 8008472:	9b00      	ldr	r3, [sp, #0]
 8008474:	6120      	str	r0, [r4, #16]
 8008476:	6163      	str	r3, [r4, #20]
 8008478:	9b01      	ldr	r3, [sp, #4]
 800847a:	b15b      	cbz	r3, 8008494 <__smakebuf_r+0x74>
 800847c:	4630      	mov	r0, r6
 800847e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008482:	f000 f8d1 	bl	8008628 <_isatty_r>
 8008486:	b128      	cbz	r0, 8008494 <__smakebuf_r+0x74>
 8008488:	89a3      	ldrh	r3, [r4, #12]
 800848a:	f023 0303 	bic.w	r3, r3, #3
 800848e:	f043 0301 	orr.w	r3, r3, #1
 8008492:	81a3      	strh	r3, [r4, #12]
 8008494:	89a0      	ldrh	r0, [r4, #12]
 8008496:	4305      	orrs	r5, r0
 8008498:	81a5      	strh	r5, [r4, #12]
 800849a:	e7cd      	b.n	8008438 <__smakebuf_r+0x18>
 800849c:	08008231 	.word	0x08008231

080084a0 <_malloc_usable_size_r>:
 80084a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084a4:	1f18      	subs	r0, r3, #4
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	bfbc      	itt	lt
 80084aa:	580b      	ldrlt	r3, [r1, r0]
 80084ac:	18c0      	addlt	r0, r0, r3
 80084ae:	4770      	bx	lr

080084b0 <_raise_r>:
 80084b0:	291f      	cmp	r1, #31
 80084b2:	b538      	push	{r3, r4, r5, lr}
 80084b4:	4604      	mov	r4, r0
 80084b6:	460d      	mov	r5, r1
 80084b8:	d904      	bls.n	80084c4 <_raise_r+0x14>
 80084ba:	2316      	movs	r3, #22
 80084bc:	6003      	str	r3, [r0, #0]
 80084be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80084c2:	bd38      	pop	{r3, r4, r5, pc}
 80084c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80084c6:	b112      	cbz	r2, 80084ce <_raise_r+0x1e>
 80084c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80084cc:	b94b      	cbnz	r3, 80084e2 <_raise_r+0x32>
 80084ce:	4620      	mov	r0, r4
 80084d0:	f000 f830 	bl	8008534 <_getpid_r>
 80084d4:	462a      	mov	r2, r5
 80084d6:	4601      	mov	r1, r0
 80084d8:	4620      	mov	r0, r4
 80084da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084de:	f000 b817 	b.w	8008510 <_kill_r>
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	d00a      	beq.n	80084fc <_raise_r+0x4c>
 80084e6:	1c59      	adds	r1, r3, #1
 80084e8:	d103      	bne.n	80084f2 <_raise_r+0x42>
 80084ea:	2316      	movs	r3, #22
 80084ec:	6003      	str	r3, [r0, #0]
 80084ee:	2001      	movs	r0, #1
 80084f0:	e7e7      	b.n	80084c2 <_raise_r+0x12>
 80084f2:	2400      	movs	r4, #0
 80084f4:	4628      	mov	r0, r5
 80084f6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80084fa:	4798      	blx	r3
 80084fc:	2000      	movs	r0, #0
 80084fe:	e7e0      	b.n	80084c2 <_raise_r+0x12>

08008500 <raise>:
 8008500:	4b02      	ldr	r3, [pc, #8]	; (800850c <raise+0xc>)
 8008502:	4601      	mov	r1, r0
 8008504:	6818      	ldr	r0, [r3, #0]
 8008506:	f7ff bfd3 	b.w	80084b0 <_raise_r>
 800850a:	bf00      	nop
 800850c:	200000a0 	.word	0x200000a0

08008510 <_kill_r>:
 8008510:	b538      	push	{r3, r4, r5, lr}
 8008512:	2300      	movs	r3, #0
 8008514:	4d06      	ldr	r5, [pc, #24]	; (8008530 <_kill_r+0x20>)
 8008516:	4604      	mov	r4, r0
 8008518:	4608      	mov	r0, r1
 800851a:	4611      	mov	r1, r2
 800851c:	602b      	str	r3, [r5, #0]
 800851e:	f7f9 fd64 	bl	8001fea <_kill>
 8008522:	1c43      	adds	r3, r0, #1
 8008524:	d102      	bne.n	800852c <_kill_r+0x1c>
 8008526:	682b      	ldr	r3, [r5, #0]
 8008528:	b103      	cbz	r3, 800852c <_kill_r+0x1c>
 800852a:	6023      	str	r3, [r4, #0]
 800852c:	bd38      	pop	{r3, r4, r5, pc}
 800852e:	bf00      	nop
 8008530:	20000ad0 	.word	0x20000ad0

08008534 <_getpid_r>:
 8008534:	f7f9 bd52 	b.w	8001fdc <_getpid>

08008538 <__sread>:
 8008538:	b510      	push	{r4, lr}
 800853a:	460c      	mov	r4, r1
 800853c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008540:	f000 f894 	bl	800866c <_read_r>
 8008544:	2800      	cmp	r0, #0
 8008546:	bfab      	itete	ge
 8008548:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800854a:	89a3      	ldrhlt	r3, [r4, #12]
 800854c:	181b      	addge	r3, r3, r0
 800854e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008552:	bfac      	ite	ge
 8008554:	6563      	strge	r3, [r4, #84]	; 0x54
 8008556:	81a3      	strhlt	r3, [r4, #12]
 8008558:	bd10      	pop	{r4, pc}

0800855a <__swrite>:
 800855a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800855e:	461f      	mov	r7, r3
 8008560:	898b      	ldrh	r3, [r1, #12]
 8008562:	4605      	mov	r5, r0
 8008564:	05db      	lsls	r3, r3, #23
 8008566:	460c      	mov	r4, r1
 8008568:	4616      	mov	r6, r2
 800856a:	d505      	bpl.n	8008578 <__swrite+0x1e>
 800856c:	2302      	movs	r3, #2
 800856e:	2200      	movs	r2, #0
 8008570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008574:	f000 f868 	bl	8008648 <_lseek_r>
 8008578:	89a3      	ldrh	r3, [r4, #12]
 800857a:	4632      	mov	r2, r6
 800857c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008580:	81a3      	strh	r3, [r4, #12]
 8008582:	4628      	mov	r0, r5
 8008584:	463b      	mov	r3, r7
 8008586:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800858a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800858e:	f000 b817 	b.w	80085c0 <_write_r>

08008592 <__sseek>:
 8008592:	b510      	push	{r4, lr}
 8008594:	460c      	mov	r4, r1
 8008596:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800859a:	f000 f855 	bl	8008648 <_lseek_r>
 800859e:	1c43      	adds	r3, r0, #1
 80085a0:	89a3      	ldrh	r3, [r4, #12]
 80085a2:	bf15      	itete	ne
 80085a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80085a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80085aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80085ae:	81a3      	strheq	r3, [r4, #12]
 80085b0:	bf18      	it	ne
 80085b2:	81a3      	strhne	r3, [r4, #12]
 80085b4:	bd10      	pop	{r4, pc}

080085b6 <__sclose>:
 80085b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085ba:	f000 b813 	b.w	80085e4 <_close_r>
	...

080085c0 <_write_r>:
 80085c0:	b538      	push	{r3, r4, r5, lr}
 80085c2:	4604      	mov	r4, r0
 80085c4:	4608      	mov	r0, r1
 80085c6:	4611      	mov	r1, r2
 80085c8:	2200      	movs	r2, #0
 80085ca:	4d05      	ldr	r5, [pc, #20]	; (80085e0 <_write_r+0x20>)
 80085cc:	602a      	str	r2, [r5, #0]
 80085ce:	461a      	mov	r2, r3
 80085d0:	f7f9 fd42 	bl	8002058 <_write>
 80085d4:	1c43      	adds	r3, r0, #1
 80085d6:	d102      	bne.n	80085de <_write_r+0x1e>
 80085d8:	682b      	ldr	r3, [r5, #0]
 80085da:	b103      	cbz	r3, 80085de <_write_r+0x1e>
 80085dc:	6023      	str	r3, [r4, #0]
 80085de:	bd38      	pop	{r3, r4, r5, pc}
 80085e0:	20000ad0 	.word	0x20000ad0

080085e4 <_close_r>:
 80085e4:	b538      	push	{r3, r4, r5, lr}
 80085e6:	2300      	movs	r3, #0
 80085e8:	4d05      	ldr	r5, [pc, #20]	; (8008600 <_close_r+0x1c>)
 80085ea:	4604      	mov	r4, r0
 80085ec:	4608      	mov	r0, r1
 80085ee:	602b      	str	r3, [r5, #0]
 80085f0:	f7f9 fd4e 	bl	8002090 <_close>
 80085f4:	1c43      	adds	r3, r0, #1
 80085f6:	d102      	bne.n	80085fe <_close_r+0x1a>
 80085f8:	682b      	ldr	r3, [r5, #0]
 80085fa:	b103      	cbz	r3, 80085fe <_close_r+0x1a>
 80085fc:	6023      	str	r3, [r4, #0]
 80085fe:	bd38      	pop	{r3, r4, r5, pc}
 8008600:	20000ad0 	.word	0x20000ad0

08008604 <_fstat_r>:
 8008604:	b538      	push	{r3, r4, r5, lr}
 8008606:	2300      	movs	r3, #0
 8008608:	4d06      	ldr	r5, [pc, #24]	; (8008624 <_fstat_r+0x20>)
 800860a:	4604      	mov	r4, r0
 800860c:	4608      	mov	r0, r1
 800860e:	4611      	mov	r1, r2
 8008610:	602b      	str	r3, [r5, #0]
 8008612:	f7f9 fd48 	bl	80020a6 <_fstat>
 8008616:	1c43      	adds	r3, r0, #1
 8008618:	d102      	bne.n	8008620 <_fstat_r+0x1c>
 800861a:	682b      	ldr	r3, [r5, #0]
 800861c:	b103      	cbz	r3, 8008620 <_fstat_r+0x1c>
 800861e:	6023      	str	r3, [r4, #0]
 8008620:	bd38      	pop	{r3, r4, r5, pc}
 8008622:	bf00      	nop
 8008624:	20000ad0 	.word	0x20000ad0

08008628 <_isatty_r>:
 8008628:	b538      	push	{r3, r4, r5, lr}
 800862a:	2300      	movs	r3, #0
 800862c:	4d05      	ldr	r5, [pc, #20]	; (8008644 <_isatty_r+0x1c>)
 800862e:	4604      	mov	r4, r0
 8008630:	4608      	mov	r0, r1
 8008632:	602b      	str	r3, [r5, #0]
 8008634:	f7f9 fd46 	bl	80020c4 <_isatty>
 8008638:	1c43      	adds	r3, r0, #1
 800863a:	d102      	bne.n	8008642 <_isatty_r+0x1a>
 800863c:	682b      	ldr	r3, [r5, #0]
 800863e:	b103      	cbz	r3, 8008642 <_isatty_r+0x1a>
 8008640:	6023      	str	r3, [r4, #0]
 8008642:	bd38      	pop	{r3, r4, r5, pc}
 8008644:	20000ad0 	.word	0x20000ad0

08008648 <_lseek_r>:
 8008648:	b538      	push	{r3, r4, r5, lr}
 800864a:	4604      	mov	r4, r0
 800864c:	4608      	mov	r0, r1
 800864e:	4611      	mov	r1, r2
 8008650:	2200      	movs	r2, #0
 8008652:	4d05      	ldr	r5, [pc, #20]	; (8008668 <_lseek_r+0x20>)
 8008654:	602a      	str	r2, [r5, #0]
 8008656:	461a      	mov	r2, r3
 8008658:	f7f9 fd3e 	bl	80020d8 <_lseek>
 800865c:	1c43      	adds	r3, r0, #1
 800865e:	d102      	bne.n	8008666 <_lseek_r+0x1e>
 8008660:	682b      	ldr	r3, [r5, #0]
 8008662:	b103      	cbz	r3, 8008666 <_lseek_r+0x1e>
 8008664:	6023      	str	r3, [r4, #0]
 8008666:	bd38      	pop	{r3, r4, r5, pc}
 8008668:	20000ad0 	.word	0x20000ad0

0800866c <_read_r>:
 800866c:	b538      	push	{r3, r4, r5, lr}
 800866e:	4604      	mov	r4, r0
 8008670:	4608      	mov	r0, r1
 8008672:	4611      	mov	r1, r2
 8008674:	2200      	movs	r2, #0
 8008676:	4d05      	ldr	r5, [pc, #20]	; (800868c <_read_r+0x20>)
 8008678:	602a      	str	r2, [r5, #0]
 800867a:	461a      	mov	r2, r3
 800867c:	f7f9 fccf 	bl	800201e <_read>
 8008680:	1c43      	adds	r3, r0, #1
 8008682:	d102      	bne.n	800868a <_read_r+0x1e>
 8008684:	682b      	ldr	r3, [r5, #0]
 8008686:	b103      	cbz	r3, 800868a <_read_r+0x1e>
 8008688:	6023      	str	r3, [r4, #0]
 800868a:	bd38      	pop	{r3, r4, r5, pc}
 800868c:	20000ad0 	.word	0x20000ad0

08008690 <cos>:
 8008690:	b530      	push	{r4, r5, lr}
 8008692:	4a1e      	ldr	r2, [pc, #120]	; (800870c <cos+0x7c>)
 8008694:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008698:	4293      	cmp	r3, r2
 800869a:	b087      	sub	sp, #28
 800869c:	dc04      	bgt.n	80086a8 <cos+0x18>
 800869e:	2200      	movs	r2, #0
 80086a0:	2300      	movs	r3, #0
 80086a2:	f000 fc1d 	bl	8008ee0 <__kernel_cos>
 80086a6:	e006      	b.n	80086b6 <cos+0x26>
 80086a8:	4a19      	ldr	r2, [pc, #100]	; (8008710 <cos+0x80>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	dd05      	ble.n	80086ba <cos+0x2a>
 80086ae:	4602      	mov	r2, r0
 80086b0:	460b      	mov	r3, r1
 80086b2:	f7f7 fd59 	bl	8000168 <__aeabi_dsub>
 80086b6:	b007      	add	sp, #28
 80086b8:	bd30      	pop	{r4, r5, pc}
 80086ba:	aa02      	add	r2, sp, #8
 80086bc:	f000 f974 	bl	80089a8 <__ieee754_rem_pio2>
 80086c0:	f000 0003 	and.w	r0, r0, #3
 80086c4:	2801      	cmp	r0, #1
 80086c6:	d007      	beq.n	80086d8 <cos+0x48>
 80086c8:	2802      	cmp	r0, #2
 80086ca:	d00f      	beq.n	80086ec <cos+0x5c>
 80086cc:	b9a8      	cbnz	r0, 80086fa <cos+0x6a>
 80086ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086d6:	e7e4      	b.n	80086a2 <cos+0x12>
 80086d8:	9000      	str	r0, [sp, #0]
 80086da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086e2:	f001 f805 	bl	80096f0 <__kernel_sin>
 80086e6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80086ea:	e7e4      	b.n	80086b6 <cos+0x26>
 80086ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086f4:	f000 fbf4 	bl	8008ee0 <__kernel_cos>
 80086f8:	e7f5      	b.n	80086e6 <cos+0x56>
 80086fa:	2301      	movs	r3, #1
 80086fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008700:	9300      	str	r3, [sp, #0]
 8008702:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008706:	f000 fff3 	bl	80096f0 <__kernel_sin>
 800870a:	e7d4      	b.n	80086b6 <cos+0x26>
 800870c:	3fe921fb 	.word	0x3fe921fb
 8008710:	7fefffff 	.word	0x7fefffff

08008714 <sin>:
 8008714:	b530      	push	{r4, r5, lr}
 8008716:	4a20      	ldr	r2, [pc, #128]	; (8008798 <sin+0x84>)
 8008718:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800871c:	4293      	cmp	r3, r2
 800871e:	b087      	sub	sp, #28
 8008720:	dc06      	bgt.n	8008730 <sin+0x1c>
 8008722:	2300      	movs	r3, #0
 8008724:	2200      	movs	r2, #0
 8008726:	9300      	str	r3, [sp, #0]
 8008728:	2300      	movs	r3, #0
 800872a:	f000 ffe1 	bl	80096f0 <__kernel_sin>
 800872e:	e006      	b.n	800873e <sin+0x2a>
 8008730:	4a1a      	ldr	r2, [pc, #104]	; (800879c <sin+0x88>)
 8008732:	4293      	cmp	r3, r2
 8008734:	dd05      	ble.n	8008742 <sin+0x2e>
 8008736:	4602      	mov	r2, r0
 8008738:	460b      	mov	r3, r1
 800873a:	f7f7 fd15 	bl	8000168 <__aeabi_dsub>
 800873e:	b007      	add	sp, #28
 8008740:	bd30      	pop	{r4, r5, pc}
 8008742:	aa02      	add	r2, sp, #8
 8008744:	f000 f930 	bl	80089a8 <__ieee754_rem_pio2>
 8008748:	f000 0003 	and.w	r0, r0, #3
 800874c:	2801      	cmp	r0, #1
 800874e:	d009      	beq.n	8008764 <sin+0x50>
 8008750:	2802      	cmp	r0, #2
 8008752:	d00e      	beq.n	8008772 <sin+0x5e>
 8008754:	b9c0      	cbnz	r0, 8008788 <sin+0x74>
 8008756:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800875a:	2301      	movs	r3, #1
 800875c:	9300      	str	r3, [sp, #0]
 800875e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008762:	e7e2      	b.n	800872a <sin+0x16>
 8008764:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008768:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800876c:	f000 fbb8 	bl	8008ee0 <__kernel_cos>
 8008770:	e7e5      	b.n	800873e <sin+0x2a>
 8008772:	2301      	movs	r3, #1
 8008774:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008778:	9300      	str	r3, [sp, #0]
 800877a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800877e:	f000 ffb7 	bl	80096f0 <__kernel_sin>
 8008782:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8008786:	e7da      	b.n	800873e <sin+0x2a>
 8008788:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800878c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008790:	f000 fba6 	bl	8008ee0 <__kernel_cos>
 8008794:	e7f5      	b.n	8008782 <sin+0x6e>
 8008796:	bf00      	nop
 8008798:	3fe921fb 	.word	0x3fe921fb
 800879c:	7fefffff 	.word	0x7fefffff

080087a0 <atan2>:
 80087a0:	f000 b82e 	b.w	8008800 <__ieee754_atan2>

080087a4 <sqrt>:
 80087a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087a6:	4606      	mov	r6, r0
 80087a8:	460f      	mov	r7, r1
 80087aa:	f000 faed 	bl	8008d88 <__ieee754_sqrt>
 80087ae:	4b12      	ldr	r3, [pc, #72]	; (80087f8 <sqrt+0x54>)
 80087b0:	4604      	mov	r4, r0
 80087b2:	f993 3000 	ldrsb.w	r3, [r3]
 80087b6:	460d      	mov	r5, r1
 80087b8:	3301      	adds	r3, #1
 80087ba:	d019      	beq.n	80087f0 <sqrt+0x4c>
 80087bc:	4632      	mov	r2, r6
 80087be:	463b      	mov	r3, r7
 80087c0:	4630      	mov	r0, r6
 80087c2:	4639      	mov	r1, r7
 80087c4:	f7f8 f922 	bl	8000a0c <__aeabi_dcmpun>
 80087c8:	b990      	cbnz	r0, 80087f0 <sqrt+0x4c>
 80087ca:	2200      	movs	r2, #0
 80087cc:	2300      	movs	r3, #0
 80087ce:	4630      	mov	r0, r6
 80087d0:	4639      	mov	r1, r7
 80087d2:	f7f8 f8f3 	bl	80009bc <__aeabi_dcmplt>
 80087d6:	b158      	cbz	r0, 80087f0 <sqrt+0x4c>
 80087d8:	f7fd f890 	bl	80058fc <__errno>
 80087dc:	2321      	movs	r3, #33	; 0x21
 80087de:	2200      	movs	r2, #0
 80087e0:	6003      	str	r3, [r0, #0]
 80087e2:	2300      	movs	r3, #0
 80087e4:	4610      	mov	r0, r2
 80087e6:	4619      	mov	r1, r3
 80087e8:	f7f7 ffa0 	bl	800072c <__aeabi_ddiv>
 80087ec:	4604      	mov	r4, r0
 80087ee:	460d      	mov	r5, r1
 80087f0:	4620      	mov	r0, r4
 80087f2:	4629      	mov	r1, r5
 80087f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087f6:	bf00      	nop
 80087f8:	20000270 	.word	0x20000270
 80087fc:	00000000 	.word	0x00000000

08008800 <__ieee754_atan2>:
 8008800:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008804:	4692      	mov	sl, r2
 8008806:	4699      	mov	r9, r3
 8008808:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800880c:	461f      	mov	r7, r3
 800880e:	f1ca 0300 	rsb	r3, sl, #0
 8008812:	f8df e18c 	ldr.w	lr, [pc, #396]	; 80089a0 <__ieee754_atan2+0x1a0>
 8008816:	ea43 030a 	orr.w	r3, r3, sl
 800881a:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800881e:	4573      	cmp	r3, lr
 8008820:	4604      	mov	r4, r0
 8008822:	460d      	mov	r5, r1
 8008824:	d808      	bhi.n	8008838 <__ieee754_atan2+0x38>
 8008826:	4246      	negs	r6, r0
 8008828:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800882c:	4306      	orrs	r6, r0
 800882e:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8008832:	4576      	cmp	r6, lr
 8008834:	468c      	mov	ip, r1
 8008836:	d908      	bls.n	800884a <__ieee754_atan2+0x4a>
 8008838:	4652      	mov	r2, sl
 800883a:	464b      	mov	r3, r9
 800883c:	4620      	mov	r0, r4
 800883e:	4629      	mov	r1, r5
 8008840:	f7f7 fc94 	bl	800016c <__adddf3>
 8008844:	4604      	mov	r4, r0
 8008846:	460d      	mov	r5, r1
 8008848:	e019      	b.n	800887e <__ieee754_atan2+0x7e>
 800884a:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 800884e:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8008852:	ea56 060a 	orrs.w	r6, r6, sl
 8008856:	d103      	bne.n	8008860 <__ieee754_atan2+0x60>
 8008858:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800885c:	f001 b800 	b.w	8009860 <atan>
 8008860:	17be      	asrs	r6, r7, #30
 8008862:	f006 0602 	and.w	r6, r6, #2
 8008866:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800886a:	ea53 0100 	orrs.w	r1, r3, r0
 800886e:	d10a      	bne.n	8008886 <__ieee754_atan2+0x86>
 8008870:	2e02      	cmp	r6, #2
 8008872:	d067      	beq.n	8008944 <__ieee754_atan2+0x144>
 8008874:	2e03      	cmp	r6, #3
 8008876:	d102      	bne.n	800887e <__ieee754_atan2+0x7e>
 8008878:	a53b      	add	r5, pc, #236	; (adr r5, 8008968 <__ieee754_atan2+0x168>)
 800887a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800887e:	4620      	mov	r0, r4
 8008880:	4629      	mov	r1, r5
 8008882:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008886:	ea52 010a 	orrs.w	r1, r2, sl
 800888a:	d106      	bne.n	800889a <__ieee754_atan2+0x9a>
 800888c:	f1bc 0f00 	cmp.w	ip, #0
 8008890:	da63      	bge.n	800895a <__ieee754_atan2+0x15a>
 8008892:	a537      	add	r5, pc, #220	; (adr r5, 8008970 <__ieee754_atan2+0x170>)
 8008894:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008898:	e7f1      	b.n	800887e <__ieee754_atan2+0x7e>
 800889a:	4572      	cmp	r2, lr
 800889c:	d10f      	bne.n	80088be <__ieee754_atan2+0xbe>
 800889e:	4293      	cmp	r3, r2
 80088a0:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 80088a4:	d107      	bne.n	80088b6 <__ieee754_atan2+0xb6>
 80088a6:	2e02      	cmp	r6, #2
 80088a8:	d850      	bhi.n	800894c <__ieee754_atan2+0x14c>
 80088aa:	4b3b      	ldr	r3, [pc, #236]	; (8008998 <__ieee754_atan2+0x198>)
 80088ac:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80088b0:	e9d6 4500 	ldrd	r4, r5, [r6]
 80088b4:	e7e3      	b.n	800887e <__ieee754_atan2+0x7e>
 80088b6:	2e02      	cmp	r6, #2
 80088b8:	d84c      	bhi.n	8008954 <__ieee754_atan2+0x154>
 80088ba:	4b38      	ldr	r3, [pc, #224]	; (800899c <__ieee754_atan2+0x19c>)
 80088bc:	e7f6      	b.n	80088ac <__ieee754_atan2+0xac>
 80088be:	4573      	cmp	r3, lr
 80088c0:	d0e4      	beq.n	800888c <__ieee754_atan2+0x8c>
 80088c2:	1a9b      	subs	r3, r3, r2
 80088c4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80088c8:	ea4f 5223 	mov.w	r2, r3, asr #20
 80088cc:	da20      	bge.n	8008910 <__ieee754_atan2+0x110>
 80088ce:	2f00      	cmp	r7, #0
 80088d0:	da01      	bge.n	80088d6 <__ieee754_atan2+0xd6>
 80088d2:	323c      	adds	r2, #60	; 0x3c
 80088d4:	db20      	blt.n	8008918 <__ieee754_atan2+0x118>
 80088d6:	4652      	mov	r2, sl
 80088d8:	464b      	mov	r3, r9
 80088da:	4620      	mov	r0, r4
 80088dc:	4629      	mov	r1, r5
 80088de:	f7f7 ff25 	bl	800072c <__aeabi_ddiv>
 80088e2:	f001 f947 	bl	8009b74 <fabs>
 80088e6:	f000 ffbb 	bl	8009860 <atan>
 80088ea:	4604      	mov	r4, r0
 80088ec:	460d      	mov	r5, r1
 80088ee:	2e01      	cmp	r6, #1
 80088f0:	d015      	beq.n	800891e <__ieee754_atan2+0x11e>
 80088f2:	2e02      	cmp	r6, #2
 80088f4:	d017      	beq.n	8008926 <__ieee754_atan2+0x126>
 80088f6:	2e00      	cmp	r6, #0
 80088f8:	d0c1      	beq.n	800887e <__ieee754_atan2+0x7e>
 80088fa:	a31f      	add	r3, pc, #124	; (adr r3, 8008978 <__ieee754_atan2+0x178>)
 80088fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008900:	4620      	mov	r0, r4
 8008902:	4629      	mov	r1, r5
 8008904:	f7f7 fc30 	bl	8000168 <__aeabi_dsub>
 8008908:	a31d      	add	r3, pc, #116	; (adr r3, 8008980 <__ieee754_atan2+0x180>)
 800890a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800890e:	e016      	b.n	800893e <__ieee754_atan2+0x13e>
 8008910:	a51d      	add	r5, pc, #116	; (adr r5, 8008988 <__ieee754_atan2+0x188>)
 8008912:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008916:	e7ea      	b.n	80088ee <__ieee754_atan2+0xee>
 8008918:	2400      	movs	r4, #0
 800891a:	2500      	movs	r5, #0
 800891c:	e7e7      	b.n	80088ee <__ieee754_atan2+0xee>
 800891e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008922:	461d      	mov	r5, r3
 8008924:	e7ab      	b.n	800887e <__ieee754_atan2+0x7e>
 8008926:	a314      	add	r3, pc, #80	; (adr r3, 8008978 <__ieee754_atan2+0x178>)
 8008928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800892c:	4620      	mov	r0, r4
 800892e:	4629      	mov	r1, r5
 8008930:	f7f7 fc1a 	bl	8000168 <__aeabi_dsub>
 8008934:	4602      	mov	r2, r0
 8008936:	460b      	mov	r3, r1
 8008938:	a111      	add	r1, pc, #68	; (adr r1, 8008980 <__ieee754_atan2+0x180>)
 800893a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800893e:	f7f7 fc13 	bl	8000168 <__aeabi_dsub>
 8008942:	e77f      	b.n	8008844 <__ieee754_atan2+0x44>
 8008944:	a50e      	add	r5, pc, #56	; (adr r5, 8008980 <__ieee754_atan2+0x180>)
 8008946:	e9d5 4500 	ldrd	r4, r5, [r5]
 800894a:	e798      	b.n	800887e <__ieee754_atan2+0x7e>
 800894c:	a510      	add	r5, pc, #64	; (adr r5, 8008990 <__ieee754_atan2+0x190>)
 800894e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008952:	e794      	b.n	800887e <__ieee754_atan2+0x7e>
 8008954:	2400      	movs	r4, #0
 8008956:	2500      	movs	r5, #0
 8008958:	e791      	b.n	800887e <__ieee754_atan2+0x7e>
 800895a:	a50b      	add	r5, pc, #44	; (adr r5, 8008988 <__ieee754_atan2+0x188>)
 800895c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008960:	e78d      	b.n	800887e <__ieee754_atan2+0x7e>
 8008962:	bf00      	nop
 8008964:	f3af 8000 	nop.w
 8008968:	54442d18 	.word	0x54442d18
 800896c:	c00921fb 	.word	0xc00921fb
 8008970:	54442d18 	.word	0x54442d18
 8008974:	bff921fb 	.word	0xbff921fb
 8008978:	33145c07 	.word	0x33145c07
 800897c:	3ca1a626 	.word	0x3ca1a626
 8008980:	54442d18 	.word	0x54442d18
 8008984:	400921fb 	.word	0x400921fb
 8008988:	54442d18 	.word	0x54442d18
 800898c:	3ff921fb 	.word	0x3ff921fb
 8008990:	54442d18 	.word	0x54442d18
 8008994:	3fe921fb 	.word	0x3fe921fb
 8008998:	0800bca8 	.word	0x0800bca8
 800899c:	0800bcc0 	.word	0x0800bcc0
 80089a0:	7ff00000 	.word	0x7ff00000
 80089a4:	00000000 	.word	0x00000000

080089a8 <__ieee754_rem_pio2>:
 80089a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089ac:	4614      	mov	r4, r2
 80089ae:	4ac4      	ldr	r2, [pc, #784]	; (8008cc0 <__ieee754_rem_pio2+0x318>)
 80089b0:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 80089b4:	b08d      	sub	sp, #52	; 0x34
 80089b6:	4592      	cmp	sl, r2
 80089b8:	9104      	str	r1, [sp, #16]
 80089ba:	dc07      	bgt.n	80089cc <__ieee754_rem_pio2+0x24>
 80089bc:	2200      	movs	r2, #0
 80089be:	2300      	movs	r3, #0
 80089c0:	e9c4 0100 	strd	r0, r1, [r4]
 80089c4:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80089c8:	2500      	movs	r5, #0
 80089ca:	e024      	b.n	8008a16 <__ieee754_rem_pio2+0x6e>
 80089cc:	4abd      	ldr	r2, [pc, #756]	; (8008cc4 <__ieee754_rem_pio2+0x31c>)
 80089ce:	4592      	cmp	sl, r2
 80089d0:	dc72      	bgt.n	8008ab8 <__ieee754_rem_pio2+0x110>
 80089d2:	9b04      	ldr	r3, [sp, #16]
 80089d4:	4dbc      	ldr	r5, [pc, #752]	; (8008cc8 <__ieee754_rem_pio2+0x320>)
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	a3ab      	add	r3, pc, #684	; (adr r3, 8008c88 <__ieee754_rem_pio2+0x2e0>)
 80089da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089de:	dd36      	ble.n	8008a4e <__ieee754_rem_pio2+0xa6>
 80089e0:	f7f7 fbc2 	bl	8000168 <__aeabi_dsub>
 80089e4:	45aa      	cmp	sl, r5
 80089e6:	4606      	mov	r6, r0
 80089e8:	460f      	mov	r7, r1
 80089ea:	d018      	beq.n	8008a1e <__ieee754_rem_pio2+0x76>
 80089ec:	a3a8      	add	r3, pc, #672	; (adr r3, 8008c90 <__ieee754_rem_pio2+0x2e8>)
 80089ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f2:	f7f7 fbb9 	bl	8000168 <__aeabi_dsub>
 80089f6:	4602      	mov	r2, r0
 80089f8:	460b      	mov	r3, r1
 80089fa:	4630      	mov	r0, r6
 80089fc:	e9c4 2300 	strd	r2, r3, [r4]
 8008a00:	4639      	mov	r1, r7
 8008a02:	f7f7 fbb1 	bl	8000168 <__aeabi_dsub>
 8008a06:	a3a2      	add	r3, pc, #648	; (adr r3, 8008c90 <__ieee754_rem_pio2+0x2e8>)
 8008a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a0c:	f7f7 fbac 	bl	8000168 <__aeabi_dsub>
 8008a10:	2501      	movs	r5, #1
 8008a12:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008a16:	4628      	mov	r0, r5
 8008a18:	b00d      	add	sp, #52	; 0x34
 8008a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a1e:	a39e      	add	r3, pc, #632	; (adr r3, 8008c98 <__ieee754_rem_pio2+0x2f0>)
 8008a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a24:	f7f7 fba0 	bl	8000168 <__aeabi_dsub>
 8008a28:	a39d      	add	r3, pc, #628	; (adr r3, 8008ca0 <__ieee754_rem_pio2+0x2f8>)
 8008a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a2e:	4606      	mov	r6, r0
 8008a30:	460f      	mov	r7, r1
 8008a32:	f7f7 fb99 	bl	8000168 <__aeabi_dsub>
 8008a36:	4602      	mov	r2, r0
 8008a38:	460b      	mov	r3, r1
 8008a3a:	4630      	mov	r0, r6
 8008a3c:	e9c4 2300 	strd	r2, r3, [r4]
 8008a40:	4639      	mov	r1, r7
 8008a42:	f7f7 fb91 	bl	8000168 <__aeabi_dsub>
 8008a46:	a396      	add	r3, pc, #600	; (adr r3, 8008ca0 <__ieee754_rem_pio2+0x2f8>)
 8008a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a4c:	e7de      	b.n	8008a0c <__ieee754_rem_pio2+0x64>
 8008a4e:	f7f7 fb8d 	bl	800016c <__adddf3>
 8008a52:	45aa      	cmp	sl, r5
 8008a54:	4606      	mov	r6, r0
 8008a56:	460f      	mov	r7, r1
 8008a58:	d016      	beq.n	8008a88 <__ieee754_rem_pio2+0xe0>
 8008a5a:	a38d      	add	r3, pc, #564	; (adr r3, 8008c90 <__ieee754_rem_pio2+0x2e8>)
 8008a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a60:	f7f7 fb84 	bl	800016c <__adddf3>
 8008a64:	4602      	mov	r2, r0
 8008a66:	460b      	mov	r3, r1
 8008a68:	4630      	mov	r0, r6
 8008a6a:	e9c4 2300 	strd	r2, r3, [r4]
 8008a6e:	4639      	mov	r1, r7
 8008a70:	f7f7 fb7a 	bl	8000168 <__aeabi_dsub>
 8008a74:	a386      	add	r3, pc, #536	; (adr r3, 8008c90 <__ieee754_rem_pio2+0x2e8>)
 8008a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a7a:	f7f7 fb77 	bl	800016c <__adddf3>
 8008a7e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008a82:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008a86:	e7c6      	b.n	8008a16 <__ieee754_rem_pio2+0x6e>
 8008a88:	a383      	add	r3, pc, #524	; (adr r3, 8008c98 <__ieee754_rem_pio2+0x2f0>)
 8008a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a8e:	f7f7 fb6d 	bl	800016c <__adddf3>
 8008a92:	a383      	add	r3, pc, #524	; (adr r3, 8008ca0 <__ieee754_rem_pio2+0x2f8>)
 8008a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a98:	4606      	mov	r6, r0
 8008a9a:	460f      	mov	r7, r1
 8008a9c:	f7f7 fb66 	bl	800016c <__adddf3>
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	460b      	mov	r3, r1
 8008aa4:	4630      	mov	r0, r6
 8008aa6:	e9c4 2300 	strd	r2, r3, [r4]
 8008aaa:	4639      	mov	r1, r7
 8008aac:	f7f7 fb5c 	bl	8000168 <__aeabi_dsub>
 8008ab0:	a37b      	add	r3, pc, #492	; (adr r3, 8008ca0 <__ieee754_rem_pio2+0x2f8>)
 8008ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab6:	e7e0      	b.n	8008a7a <__ieee754_rem_pio2+0xd2>
 8008ab8:	4a84      	ldr	r2, [pc, #528]	; (8008ccc <__ieee754_rem_pio2+0x324>)
 8008aba:	4592      	cmp	sl, r2
 8008abc:	f300 80d5 	bgt.w	8008c6a <__ieee754_rem_pio2+0x2c2>
 8008ac0:	f001 f858 	bl	8009b74 <fabs>
 8008ac4:	a378      	add	r3, pc, #480	; (adr r3, 8008ca8 <__ieee754_rem_pio2+0x300>)
 8008ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aca:	4606      	mov	r6, r0
 8008acc:	460f      	mov	r7, r1
 8008ace:	f7f7 fd03 	bl	80004d8 <__aeabi_dmul>
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	4b7e      	ldr	r3, [pc, #504]	; (8008cd0 <__ieee754_rem_pio2+0x328>)
 8008ad6:	f7f7 fb49 	bl	800016c <__adddf3>
 8008ada:	f7f7 ffad 	bl	8000a38 <__aeabi_d2iz>
 8008ade:	4605      	mov	r5, r0
 8008ae0:	f7f7 fc90 	bl	8000404 <__aeabi_i2d>
 8008ae4:	4602      	mov	r2, r0
 8008ae6:	460b      	mov	r3, r1
 8008ae8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008aec:	a366      	add	r3, pc, #408	; (adr r3, 8008c88 <__ieee754_rem_pio2+0x2e0>)
 8008aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af2:	f7f7 fcf1 	bl	80004d8 <__aeabi_dmul>
 8008af6:	4602      	mov	r2, r0
 8008af8:	460b      	mov	r3, r1
 8008afa:	4630      	mov	r0, r6
 8008afc:	4639      	mov	r1, r7
 8008afe:	f7f7 fb33 	bl	8000168 <__aeabi_dsub>
 8008b02:	a363      	add	r3, pc, #396	; (adr r3, 8008c90 <__ieee754_rem_pio2+0x2e8>)
 8008b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b08:	4680      	mov	r8, r0
 8008b0a:	4689      	mov	r9, r1
 8008b0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b10:	f7f7 fce2 	bl	80004d8 <__aeabi_dmul>
 8008b14:	2d1f      	cmp	r5, #31
 8008b16:	4606      	mov	r6, r0
 8008b18:	460f      	mov	r7, r1
 8008b1a:	dc0e      	bgt.n	8008b3a <__ieee754_rem_pio2+0x192>
 8008b1c:	4b6d      	ldr	r3, [pc, #436]	; (8008cd4 <__ieee754_rem_pio2+0x32c>)
 8008b1e:	1e6a      	subs	r2, r5, #1
 8008b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b24:	4553      	cmp	r3, sl
 8008b26:	d008      	beq.n	8008b3a <__ieee754_rem_pio2+0x192>
 8008b28:	4632      	mov	r2, r6
 8008b2a:	463b      	mov	r3, r7
 8008b2c:	4640      	mov	r0, r8
 8008b2e:	4649      	mov	r1, r9
 8008b30:	f7f7 fb1a 	bl	8000168 <__aeabi_dsub>
 8008b34:	e9c4 0100 	strd	r0, r1, [r4]
 8008b38:	e013      	b.n	8008b62 <__ieee754_rem_pio2+0x1ba>
 8008b3a:	463b      	mov	r3, r7
 8008b3c:	4632      	mov	r2, r6
 8008b3e:	4640      	mov	r0, r8
 8008b40:	4649      	mov	r1, r9
 8008b42:	f7f7 fb11 	bl	8000168 <__aeabi_dsub>
 8008b46:	ea4f 532a 	mov.w	r3, sl, asr #20
 8008b4a:	9305      	str	r3, [sp, #20]
 8008b4c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008b50:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 8008b54:	f1ba 0f10 	cmp.w	sl, #16
 8008b58:	dc1f      	bgt.n	8008b9a <__ieee754_rem_pio2+0x1f2>
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	460b      	mov	r3, r1
 8008b5e:	e9c4 2300 	strd	r2, r3, [r4]
 8008b62:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8008b66:	4640      	mov	r0, r8
 8008b68:	4653      	mov	r3, sl
 8008b6a:	4649      	mov	r1, r9
 8008b6c:	f7f7 fafc 	bl	8000168 <__aeabi_dsub>
 8008b70:	4632      	mov	r2, r6
 8008b72:	463b      	mov	r3, r7
 8008b74:	f7f7 faf8 	bl	8000168 <__aeabi_dsub>
 8008b78:	460b      	mov	r3, r1
 8008b7a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008b7e:	9904      	ldr	r1, [sp, #16]
 8008b80:	4602      	mov	r2, r0
 8008b82:	2900      	cmp	r1, #0
 8008b84:	f6bf af47 	bge.w	8008a16 <__ieee754_rem_pio2+0x6e>
 8008b88:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 8008b8c:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8008b90:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008b94:	60e3      	str	r3, [r4, #12]
 8008b96:	426d      	negs	r5, r5
 8008b98:	e73d      	b.n	8008a16 <__ieee754_rem_pio2+0x6e>
 8008b9a:	a33f      	add	r3, pc, #252	; (adr r3, 8008c98 <__ieee754_rem_pio2+0x2f0>)
 8008b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ba4:	f7f7 fc98 	bl	80004d8 <__aeabi_dmul>
 8008ba8:	4606      	mov	r6, r0
 8008baa:	460f      	mov	r7, r1
 8008bac:	4602      	mov	r2, r0
 8008bae:	460b      	mov	r3, r1
 8008bb0:	4640      	mov	r0, r8
 8008bb2:	4649      	mov	r1, r9
 8008bb4:	f7f7 fad8 	bl	8000168 <__aeabi_dsub>
 8008bb8:	4602      	mov	r2, r0
 8008bba:	460b      	mov	r3, r1
 8008bbc:	4682      	mov	sl, r0
 8008bbe:	468b      	mov	fp, r1
 8008bc0:	4640      	mov	r0, r8
 8008bc2:	4649      	mov	r1, r9
 8008bc4:	f7f7 fad0 	bl	8000168 <__aeabi_dsub>
 8008bc8:	4632      	mov	r2, r6
 8008bca:	463b      	mov	r3, r7
 8008bcc:	f7f7 facc 	bl	8000168 <__aeabi_dsub>
 8008bd0:	a333      	add	r3, pc, #204	; (adr r3, 8008ca0 <__ieee754_rem_pio2+0x2f8>)
 8008bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd6:	4606      	mov	r6, r0
 8008bd8:	460f      	mov	r7, r1
 8008bda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bde:	f7f7 fc7b 	bl	80004d8 <__aeabi_dmul>
 8008be2:	4632      	mov	r2, r6
 8008be4:	463b      	mov	r3, r7
 8008be6:	f7f7 fabf 	bl	8000168 <__aeabi_dsub>
 8008bea:	4602      	mov	r2, r0
 8008bec:	460b      	mov	r3, r1
 8008bee:	4606      	mov	r6, r0
 8008bf0:	460f      	mov	r7, r1
 8008bf2:	4650      	mov	r0, sl
 8008bf4:	4659      	mov	r1, fp
 8008bf6:	f7f7 fab7 	bl	8000168 <__aeabi_dsub>
 8008bfa:	9a05      	ldr	r2, [sp, #20]
 8008bfc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008c00:	1ad3      	subs	r3, r2, r3
 8008c02:	2b31      	cmp	r3, #49	; 0x31
 8008c04:	dc06      	bgt.n	8008c14 <__ieee754_rem_pio2+0x26c>
 8008c06:	4602      	mov	r2, r0
 8008c08:	460b      	mov	r3, r1
 8008c0a:	46d0      	mov	r8, sl
 8008c0c:	46d9      	mov	r9, fp
 8008c0e:	e9c4 2300 	strd	r2, r3, [r4]
 8008c12:	e7a6      	b.n	8008b62 <__ieee754_rem_pio2+0x1ba>
 8008c14:	a326      	add	r3, pc, #152	; (adr r3, 8008cb0 <__ieee754_rem_pio2+0x308>)
 8008c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c1e:	f7f7 fc5b 	bl	80004d8 <__aeabi_dmul>
 8008c22:	4606      	mov	r6, r0
 8008c24:	460f      	mov	r7, r1
 8008c26:	4602      	mov	r2, r0
 8008c28:	460b      	mov	r3, r1
 8008c2a:	4650      	mov	r0, sl
 8008c2c:	4659      	mov	r1, fp
 8008c2e:	f7f7 fa9b 	bl	8000168 <__aeabi_dsub>
 8008c32:	4602      	mov	r2, r0
 8008c34:	460b      	mov	r3, r1
 8008c36:	4680      	mov	r8, r0
 8008c38:	4689      	mov	r9, r1
 8008c3a:	4650      	mov	r0, sl
 8008c3c:	4659      	mov	r1, fp
 8008c3e:	f7f7 fa93 	bl	8000168 <__aeabi_dsub>
 8008c42:	4632      	mov	r2, r6
 8008c44:	463b      	mov	r3, r7
 8008c46:	f7f7 fa8f 	bl	8000168 <__aeabi_dsub>
 8008c4a:	a31b      	add	r3, pc, #108	; (adr r3, 8008cb8 <__ieee754_rem_pio2+0x310>)
 8008c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c50:	4606      	mov	r6, r0
 8008c52:	460f      	mov	r7, r1
 8008c54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c58:	f7f7 fc3e 	bl	80004d8 <__aeabi_dmul>
 8008c5c:	4632      	mov	r2, r6
 8008c5e:	463b      	mov	r3, r7
 8008c60:	f7f7 fa82 	bl	8000168 <__aeabi_dsub>
 8008c64:	4606      	mov	r6, r0
 8008c66:	460f      	mov	r7, r1
 8008c68:	e75e      	b.n	8008b28 <__ieee754_rem_pio2+0x180>
 8008c6a:	4a1b      	ldr	r2, [pc, #108]	; (8008cd8 <__ieee754_rem_pio2+0x330>)
 8008c6c:	4592      	cmp	sl, r2
 8008c6e:	dd35      	ble.n	8008cdc <__ieee754_rem_pio2+0x334>
 8008c70:	4602      	mov	r2, r0
 8008c72:	460b      	mov	r3, r1
 8008c74:	f7f7 fa78 	bl	8000168 <__aeabi_dsub>
 8008c78:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008c7c:	e9c4 0100 	strd	r0, r1, [r4]
 8008c80:	e6a2      	b.n	80089c8 <__ieee754_rem_pio2+0x20>
 8008c82:	bf00      	nop
 8008c84:	f3af 8000 	nop.w
 8008c88:	54400000 	.word	0x54400000
 8008c8c:	3ff921fb 	.word	0x3ff921fb
 8008c90:	1a626331 	.word	0x1a626331
 8008c94:	3dd0b461 	.word	0x3dd0b461
 8008c98:	1a600000 	.word	0x1a600000
 8008c9c:	3dd0b461 	.word	0x3dd0b461
 8008ca0:	2e037073 	.word	0x2e037073
 8008ca4:	3ba3198a 	.word	0x3ba3198a
 8008ca8:	6dc9c883 	.word	0x6dc9c883
 8008cac:	3fe45f30 	.word	0x3fe45f30
 8008cb0:	2e000000 	.word	0x2e000000
 8008cb4:	3ba3198a 	.word	0x3ba3198a
 8008cb8:	252049c1 	.word	0x252049c1
 8008cbc:	397b839a 	.word	0x397b839a
 8008cc0:	3fe921fb 	.word	0x3fe921fb
 8008cc4:	4002d97b 	.word	0x4002d97b
 8008cc8:	3ff921fb 	.word	0x3ff921fb
 8008ccc:	413921fb 	.word	0x413921fb
 8008cd0:	3fe00000 	.word	0x3fe00000
 8008cd4:	0800bcd8 	.word	0x0800bcd8
 8008cd8:	7fefffff 	.word	0x7fefffff
 8008cdc:	ea4f 552a 	mov.w	r5, sl, asr #20
 8008ce0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8008ce4:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8008ce8:	460f      	mov	r7, r1
 8008cea:	4606      	mov	r6, r0
 8008cec:	f7f7 fea4 	bl	8000a38 <__aeabi_d2iz>
 8008cf0:	f7f7 fb88 	bl	8000404 <__aeabi_i2d>
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	460b      	mov	r3, r1
 8008cf8:	4630      	mov	r0, r6
 8008cfa:	4639      	mov	r1, r7
 8008cfc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008d00:	f7f7 fa32 	bl	8000168 <__aeabi_dsub>
 8008d04:	2200      	movs	r2, #0
 8008d06:	4b1e      	ldr	r3, [pc, #120]	; (8008d80 <__ieee754_rem_pio2+0x3d8>)
 8008d08:	f7f7 fbe6 	bl	80004d8 <__aeabi_dmul>
 8008d0c:	460f      	mov	r7, r1
 8008d0e:	4606      	mov	r6, r0
 8008d10:	f7f7 fe92 	bl	8000a38 <__aeabi_d2iz>
 8008d14:	f7f7 fb76 	bl	8000404 <__aeabi_i2d>
 8008d18:	4602      	mov	r2, r0
 8008d1a:	460b      	mov	r3, r1
 8008d1c:	4630      	mov	r0, r6
 8008d1e:	4639      	mov	r1, r7
 8008d20:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008d24:	f7f7 fa20 	bl	8000168 <__aeabi_dsub>
 8008d28:	2200      	movs	r2, #0
 8008d2a:	4b15      	ldr	r3, [pc, #84]	; (8008d80 <__ieee754_rem_pio2+0x3d8>)
 8008d2c:	f7f7 fbd4 	bl	80004d8 <__aeabi_dmul>
 8008d30:	f04f 0803 	mov.w	r8, #3
 8008d34:	2600      	movs	r6, #0
 8008d36:	2700      	movs	r7, #0
 8008d38:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008d3c:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8008d40:	4632      	mov	r2, r6
 8008d42:	e879 0102 	ldrd	r0, r1, [r9], #-8
 8008d46:	463b      	mov	r3, r7
 8008d48:	46c2      	mov	sl, r8
 8008d4a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8008d4e:	f7f7 fe2b 	bl	80009a8 <__aeabi_dcmpeq>
 8008d52:	2800      	cmp	r0, #0
 8008d54:	d1f4      	bne.n	8008d40 <__ieee754_rem_pio2+0x398>
 8008d56:	4b0b      	ldr	r3, [pc, #44]	; (8008d84 <__ieee754_rem_pio2+0x3dc>)
 8008d58:	462a      	mov	r2, r5
 8008d5a:	9301      	str	r3, [sp, #4]
 8008d5c:	2302      	movs	r3, #2
 8008d5e:	4621      	mov	r1, r4
 8008d60:	9300      	str	r3, [sp, #0]
 8008d62:	a806      	add	r0, sp, #24
 8008d64:	4653      	mov	r3, sl
 8008d66:	f000 f979 	bl	800905c <__kernel_rem_pio2>
 8008d6a:	9b04      	ldr	r3, [sp, #16]
 8008d6c:	4605      	mov	r5, r0
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	f6bf ae51 	bge.w	8008a16 <__ieee754_rem_pio2+0x6e>
 8008d74:	6863      	ldr	r3, [r4, #4]
 8008d76:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008d7a:	6063      	str	r3, [r4, #4]
 8008d7c:	68e3      	ldr	r3, [r4, #12]
 8008d7e:	e707      	b.n	8008b90 <__ieee754_rem_pio2+0x1e8>
 8008d80:	41700000 	.word	0x41700000
 8008d84:	0800bd58 	.word	0x0800bd58

08008d88 <__ieee754_sqrt>:
 8008d88:	f8df c150 	ldr.w	ip, [pc, #336]	; 8008edc <__ieee754_sqrt+0x154>
 8008d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d90:	ea3c 0c01 	bics.w	ip, ip, r1
 8008d94:	460b      	mov	r3, r1
 8008d96:	4606      	mov	r6, r0
 8008d98:	460d      	mov	r5, r1
 8008d9a:	460a      	mov	r2, r1
 8008d9c:	4607      	mov	r7, r0
 8008d9e:	4604      	mov	r4, r0
 8008da0:	d10e      	bne.n	8008dc0 <__ieee754_sqrt+0x38>
 8008da2:	4602      	mov	r2, r0
 8008da4:	f7f7 fb98 	bl	80004d8 <__aeabi_dmul>
 8008da8:	4602      	mov	r2, r0
 8008daa:	460b      	mov	r3, r1
 8008dac:	4630      	mov	r0, r6
 8008dae:	4629      	mov	r1, r5
 8008db0:	f7f7 f9dc 	bl	800016c <__adddf3>
 8008db4:	4606      	mov	r6, r0
 8008db6:	460d      	mov	r5, r1
 8008db8:	4630      	mov	r0, r6
 8008dba:	4629      	mov	r1, r5
 8008dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dc0:	2900      	cmp	r1, #0
 8008dc2:	dc0d      	bgt.n	8008de0 <__ieee754_sqrt+0x58>
 8008dc4:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8008dc8:	ea5c 0707 	orrs.w	r7, ip, r7
 8008dcc:	d0f4      	beq.n	8008db8 <__ieee754_sqrt+0x30>
 8008dce:	b139      	cbz	r1, 8008de0 <__ieee754_sqrt+0x58>
 8008dd0:	4602      	mov	r2, r0
 8008dd2:	f7f7 f9c9 	bl	8000168 <__aeabi_dsub>
 8008dd6:	4602      	mov	r2, r0
 8008dd8:	460b      	mov	r3, r1
 8008dda:	f7f7 fca7 	bl	800072c <__aeabi_ddiv>
 8008dde:	e7e9      	b.n	8008db4 <__ieee754_sqrt+0x2c>
 8008de0:	1512      	asrs	r2, r2, #20
 8008de2:	d074      	beq.n	8008ece <__ieee754_sqrt+0x146>
 8008de4:	2000      	movs	r0, #0
 8008de6:	07d5      	lsls	r5, r2, #31
 8008de8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008dec:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 8008df0:	bf5e      	ittt	pl
 8008df2:	0fe3      	lsrpl	r3, r4, #31
 8008df4:	0064      	lslpl	r4, r4, #1
 8008df6:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 8008dfa:	0fe3      	lsrs	r3, r4, #31
 8008dfc:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8008e00:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8008e04:	2516      	movs	r5, #22
 8008e06:	4601      	mov	r1, r0
 8008e08:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008e0c:	1076      	asrs	r6, r6, #1
 8008e0e:	0064      	lsls	r4, r4, #1
 8008e10:	188f      	adds	r7, r1, r2
 8008e12:	429f      	cmp	r7, r3
 8008e14:	bfde      	ittt	le
 8008e16:	1bdb      	suble	r3, r3, r7
 8008e18:	18b9      	addle	r1, r7, r2
 8008e1a:	1880      	addle	r0, r0, r2
 8008e1c:	005b      	lsls	r3, r3, #1
 8008e1e:	3d01      	subs	r5, #1
 8008e20:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8008e24:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8008e28:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8008e2c:	d1f0      	bne.n	8008e10 <__ieee754_sqrt+0x88>
 8008e2e:	462a      	mov	r2, r5
 8008e30:	f04f 0e20 	mov.w	lr, #32
 8008e34:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8008e38:	428b      	cmp	r3, r1
 8008e3a:	eb07 0c05 	add.w	ip, r7, r5
 8008e3e:	dc02      	bgt.n	8008e46 <__ieee754_sqrt+0xbe>
 8008e40:	d113      	bne.n	8008e6a <__ieee754_sqrt+0xe2>
 8008e42:	45a4      	cmp	ip, r4
 8008e44:	d811      	bhi.n	8008e6a <__ieee754_sqrt+0xe2>
 8008e46:	f1bc 0f00 	cmp.w	ip, #0
 8008e4a:	eb0c 0507 	add.w	r5, ip, r7
 8008e4e:	da43      	bge.n	8008ed8 <__ieee754_sqrt+0x150>
 8008e50:	2d00      	cmp	r5, #0
 8008e52:	db41      	blt.n	8008ed8 <__ieee754_sqrt+0x150>
 8008e54:	f101 0801 	add.w	r8, r1, #1
 8008e58:	1a5b      	subs	r3, r3, r1
 8008e5a:	4641      	mov	r1, r8
 8008e5c:	45a4      	cmp	ip, r4
 8008e5e:	bf88      	it	hi
 8008e60:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 8008e64:	eba4 040c 	sub.w	r4, r4, ip
 8008e68:	443a      	add	r2, r7
 8008e6a:	005b      	lsls	r3, r3, #1
 8008e6c:	f1be 0e01 	subs.w	lr, lr, #1
 8008e70:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8008e74:	ea4f 0757 	mov.w	r7, r7, lsr #1
 8008e78:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8008e7c:	d1dc      	bne.n	8008e38 <__ieee754_sqrt+0xb0>
 8008e7e:	4323      	orrs	r3, r4
 8008e80:	d006      	beq.n	8008e90 <__ieee754_sqrt+0x108>
 8008e82:	1c54      	adds	r4, r2, #1
 8008e84:	bf0b      	itete	eq
 8008e86:	4672      	moveq	r2, lr
 8008e88:	3201      	addne	r2, #1
 8008e8a:	3001      	addeq	r0, #1
 8008e8c:	f022 0201 	bicne.w	r2, r2, #1
 8008e90:	1043      	asrs	r3, r0, #1
 8008e92:	07c1      	lsls	r1, r0, #31
 8008e94:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8008e98:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008e9c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008ea0:	bf48      	it	mi
 8008ea2:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8008ea6:	4610      	mov	r0, r2
 8008ea8:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8008eac:	e782      	b.n	8008db4 <__ieee754_sqrt+0x2c>
 8008eae:	0ae3      	lsrs	r3, r4, #11
 8008eb0:	3915      	subs	r1, #21
 8008eb2:	0564      	lsls	r4, r4, #21
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d0fa      	beq.n	8008eae <__ieee754_sqrt+0x126>
 8008eb8:	02de      	lsls	r6, r3, #11
 8008eba:	d50a      	bpl.n	8008ed2 <__ieee754_sqrt+0x14a>
 8008ebc:	f1c2 0020 	rsb	r0, r2, #32
 8008ec0:	fa24 f000 	lsr.w	r0, r4, r0
 8008ec4:	1e55      	subs	r5, r2, #1
 8008ec6:	4094      	lsls	r4, r2
 8008ec8:	4303      	orrs	r3, r0
 8008eca:	1b4a      	subs	r2, r1, r5
 8008ecc:	e78a      	b.n	8008de4 <__ieee754_sqrt+0x5c>
 8008ece:	4611      	mov	r1, r2
 8008ed0:	e7f0      	b.n	8008eb4 <__ieee754_sqrt+0x12c>
 8008ed2:	005b      	lsls	r3, r3, #1
 8008ed4:	3201      	adds	r2, #1
 8008ed6:	e7ef      	b.n	8008eb8 <__ieee754_sqrt+0x130>
 8008ed8:	4688      	mov	r8, r1
 8008eda:	e7bd      	b.n	8008e58 <__ieee754_sqrt+0xd0>
 8008edc:	7ff00000 	.word	0x7ff00000

08008ee0 <__kernel_cos>:
 8008ee0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ee4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008ee8:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8008eec:	4680      	mov	r8, r0
 8008eee:	460f      	mov	r7, r1
 8008ef0:	e9cd 2300 	strd	r2, r3, [sp]
 8008ef4:	da04      	bge.n	8008f00 <__kernel_cos+0x20>
 8008ef6:	f7f7 fd9f 	bl	8000a38 <__aeabi_d2iz>
 8008efa:	2800      	cmp	r0, #0
 8008efc:	f000 8086 	beq.w	800900c <__kernel_cos+0x12c>
 8008f00:	4642      	mov	r2, r8
 8008f02:	463b      	mov	r3, r7
 8008f04:	4640      	mov	r0, r8
 8008f06:	4639      	mov	r1, r7
 8008f08:	f7f7 fae6 	bl	80004d8 <__aeabi_dmul>
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	4b4e      	ldr	r3, [pc, #312]	; (8009048 <__kernel_cos+0x168>)
 8008f10:	4604      	mov	r4, r0
 8008f12:	460d      	mov	r5, r1
 8008f14:	f7f7 fae0 	bl	80004d8 <__aeabi_dmul>
 8008f18:	a33f      	add	r3, pc, #252	; (adr r3, 8009018 <__kernel_cos+0x138>)
 8008f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f1e:	4682      	mov	sl, r0
 8008f20:	468b      	mov	fp, r1
 8008f22:	4620      	mov	r0, r4
 8008f24:	4629      	mov	r1, r5
 8008f26:	f7f7 fad7 	bl	80004d8 <__aeabi_dmul>
 8008f2a:	a33d      	add	r3, pc, #244	; (adr r3, 8009020 <__kernel_cos+0x140>)
 8008f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f30:	f7f7 f91c 	bl	800016c <__adddf3>
 8008f34:	4622      	mov	r2, r4
 8008f36:	462b      	mov	r3, r5
 8008f38:	f7f7 face 	bl	80004d8 <__aeabi_dmul>
 8008f3c:	a33a      	add	r3, pc, #232	; (adr r3, 8009028 <__kernel_cos+0x148>)
 8008f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f42:	f7f7 f911 	bl	8000168 <__aeabi_dsub>
 8008f46:	4622      	mov	r2, r4
 8008f48:	462b      	mov	r3, r5
 8008f4a:	f7f7 fac5 	bl	80004d8 <__aeabi_dmul>
 8008f4e:	a338      	add	r3, pc, #224	; (adr r3, 8009030 <__kernel_cos+0x150>)
 8008f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f54:	f7f7 f90a 	bl	800016c <__adddf3>
 8008f58:	4622      	mov	r2, r4
 8008f5a:	462b      	mov	r3, r5
 8008f5c:	f7f7 fabc 	bl	80004d8 <__aeabi_dmul>
 8008f60:	a335      	add	r3, pc, #212	; (adr r3, 8009038 <__kernel_cos+0x158>)
 8008f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f66:	f7f7 f8ff 	bl	8000168 <__aeabi_dsub>
 8008f6a:	4622      	mov	r2, r4
 8008f6c:	462b      	mov	r3, r5
 8008f6e:	f7f7 fab3 	bl	80004d8 <__aeabi_dmul>
 8008f72:	a333      	add	r3, pc, #204	; (adr r3, 8009040 <__kernel_cos+0x160>)
 8008f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f78:	f7f7 f8f8 	bl	800016c <__adddf3>
 8008f7c:	4622      	mov	r2, r4
 8008f7e:	462b      	mov	r3, r5
 8008f80:	f7f7 faaa 	bl	80004d8 <__aeabi_dmul>
 8008f84:	4622      	mov	r2, r4
 8008f86:	462b      	mov	r3, r5
 8008f88:	f7f7 faa6 	bl	80004d8 <__aeabi_dmul>
 8008f8c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f90:	4604      	mov	r4, r0
 8008f92:	460d      	mov	r5, r1
 8008f94:	4640      	mov	r0, r8
 8008f96:	4639      	mov	r1, r7
 8008f98:	f7f7 fa9e 	bl	80004d8 <__aeabi_dmul>
 8008f9c:	460b      	mov	r3, r1
 8008f9e:	4602      	mov	r2, r0
 8008fa0:	4629      	mov	r1, r5
 8008fa2:	4620      	mov	r0, r4
 8008fa4:	f7f7 f8e0 	bl	8000168 <__aeabi_dsub>
 8008fa8:	4b28      	ldr	r3, [pc, #160]	; (800904c <__kernel_cos+0x16c>)
 8008faa:	4680      	mov	r8, r0
 8008fac:	429e      	cmp	r6, r3
 8008fae:	4689      	mov	r9, r1
 8008fb0:	dc0e      	bgt.n	8008fd0 <__kernel_cos+0xf0>
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	460b      	mov	r3, r1
 8008fb6:	4650      	mov	r0, sl
 8008fb8:	4659      	mov	r1, fp
 8008fba:	f7f7 f8d5 	bl	8000168 <__aeabi_dsub>
 8008fbe:	4602      	mov	r2, r0
 8008fc0:	2000      	movs	r0, #0
 8008fc2:	460b      	mov	r3, r1
 8008fc4:	4922      	ldr	r1, [pc, #136]	; (8009050 <__kernel_cos+0x170>)
 8008fc6:	f7f7 f8cf 	bl	8000168 <__aeabi_dsub>
 8008fca:	b003      	add	sp, #12
 8008fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fd0:	2400      	movs	r4, #0
 8008fd2:	4b20      	ldr	r3, [pc, #128]	; (8009054 <__kernel_cos+0x174>)
 8008fd4:	4622      	mov	r2, r4
 8008fd6:	429e      	cmp	r6, r3
 8008fd8:	bfcc      	ite	gt
 8008fda:	4d1f      	ldrgt	r5, [pc, #124]	; (8009058 <__kernel_cos+0x178>)
 8008fdc:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8008fe0:	462b      	mov	r3, r5
 8008fe2:	2000      	movs	r0, #0
 8008fe4:	491a      	ldr	r1, [pc, #104]	; (8009050 <__kernel_cos+0x170>)
 8008fe6:	f7f7 f8bf 	bl	8000168 <__aeabi_dsub>
 8008fea:	4622      	mov	r2, r4
 8008fec:	4606      	mov	r6, r0
 8008fee:	460f      	mov	r7, r1
 8008ff0:	462b      	mov	r3, r5
 8008ff2:	4650      	mov	r0, sl
 8008ff4:	4659      	mov	r1, fp
 8008ff6:	f7f7 f8b7 	bl	8000168 <__aeabi_dsub>
 8008ffa:	4642      	mov	r2, r8
 8008ffc:	464b      	mov	r3, r9
 8008ffe:	f7f7 f8b3 	bl	8000168 <__aeabi_dsub>
 8009002:	4602      	mov	r2, r0
 8009004:	460b      	mov	r3, r1
 8009006:	4630      	mov	r0, r6
 8009008:	4639      	mov	r1, r7
 800900a:	e7dc      	b.n	8008fc6 <__kernel_cos+0xe6>
 800900c:	2000      	movs	r0, #0
 800900e:	4910      	ldr	r1, [pc, #64]	; (8009050 <__kernel_cos+0x170>)
 8009010:	e7db      	b.n	8008fca <__kernel_cos+0xea>
 8009012:	bf00      	nop
 8009014:	f3af 8000 	nop.w
 8009018:	be8838d4 	.word	0xbe8838d4
 800901c:	bda8fae9 	.word	0xbda8fae9
 8009020:	bdb4b1c4 	.word	0xbdb4b1c4
 8009024:	3e21ee9e 	.word	0x3e21ee9e
 8009028:	809c52ad 	.word	0x809c52ad
 800902c:	3e927e4f 	.word	0x3e927e4f
 8009030:	19cb1590 	.word	0x19cb1590
 8009034:	3efa01a0 	.word	0x3efa01a0
 8009038:	16c15177 	.word	0x16c15177
 800903c:	3f56c16c 	.word	0x3f56c16c
 8009040:	5555554c 	.word	0x5555554c
 8009044:	3fa55555 	.word	0x3fa55555
 8009048:	3fe00000 	.word	0x3fe00000
 800904c:	3fd33332 	.word	0x3fd33332
 8009050:	3ff00000 	.word	0x3ff00000
 8009054:	3fe90000 	.word	0x3fe90000
 8009058:	3fd20000 	.word	0x3fd20000

0800905c <__kernel_rem_pio2>:
 800905c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009060:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8009064:	9308      	str	r3, [sp, #32]
 8009066:	9101      	str	r1, [sp, #4]
 8009068:	4bc0      	ldr	r3, [pc, #768]	; (800936c <__kernel_rem_pio2+0x310>)
 800906a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800906c:	f112 0f14 	cmn.w	r2, #20
 8009070:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009074:	bfa8      	it	ge
 8009076:	1ed4      	subge	r4, r2, #3
 8009078:	9304      	str	r3, [sp, #16]
 800907a:	9b08      	ldr	r3, [sp, #32]
 800907c:	bfb8      	it	lt
 800907e:	2400      	movlt	r4, #0
 8009080:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8009084:	9306      	str	r3, [sp, #24]
 8009086:	bfa4      	itt	ge
 8009088:	2318      	movge	r3, #24
 800908a:	fb94 f4f3 	sdivge	r4, r4, r3
 800908e:	f06f 0317 	mvn.w	r3, #23
 8009092:	fb04 3303 	mla	r3, r4, r3, r3
 8009096:	eb03 0a02 	add.w	sl, r3, r2
 800909a:	9a06      	ldr	r2, [sp, #24]
 800909c:	9b04      	ldr	r3, [sp, #16]
 800909e:	1aa7      	subs	r7, r4, r2
 80090a0:	eb03 0802 	add.w	r8, r3, r2
 80090a4:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80090a6:	2500      	movs	r5, #0
 80090a8:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80090ac:	2200      	movs	r2, #0
 80090ae:	2300      	movs	r3, #0
 80090b0:	9009      	str	r0, [sp, #36]	; 0x24
 80090b2:	ae20      	add	r6, sp, #128	; 0x80
 80090b4:	4545      	cmp	r5, r8
 80090b6:	dd19      	ble.n	80090ec <__kernel_rem_pio2+0x90>
 80090b8:	9b08      	ldr	r3, [sp, #32]
 80090ba:	aa20      	add	r2, sp, #128	; 0x80
 80090bc:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80090c0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80090c4:	f1c3 0301 	rsb	r3, r3, #1
 80090c8:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80090cc:	9307      	str	r3, [sp, #28]
 80090ce:	9b07      	ldr	r3, [sp, #28]
 80090d0:	9a04      	ldr	r2, [sp, #16]
 80090d2:	4443      	add	r3, r8
 80090d4:	429a      	cmp	r2, r3
 80090d6:	db35      	blt.n	8009144 <__kernel_rem_pio2+0xe8>
 80090d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090da:	2200      	movs	r2, #0
 80090dc:	f1a3 0908 	sub.w	r9, r3, #8
 80090e0:	2300      	movs	r3, #0
 80090e2:	462f      	mov	r7, r5
 80090e4:	2600      	movs	r6, #0
 80090e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80090ea:	e01f      	b.n	800912c <__kernel_rem_pio2+0xd0>
 80090ec:	42ef      	cmn	r7, r5
 80090ee:	d40b      	bmi.n	8009108 <__kernel_rem_pio2+0xac>
 80090f0:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80090f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80090f8:	f7f7 f984 	bl	8000404 <__aeabi_i2d>
 80090fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009100:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009104:	3501      	adds	r5, #1
 8009106:	e7d5      	b.n	80090b4 <__kernel_rem_pio2+0x58>
 8009108:	4610      	mov	r0, r2
 800910a:	4619      	mov	r1, r3
 800910c:	e7f8      	b.n	8009100 <__kernel_rem_pio2+0xa4>
 800910e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009112:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8009116:	f7f7 f9df 	bl	80004d8 <__aeabi_dmul>
 800911a:	4602      	mov	r2, r0
 800911c:	460b      	mov	r3, r1
 800911e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009122:	f7f7 f823 	bl	800016c <__adddf3>
 8009126:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800912a:	3601      	adds	r6, #1
 800912c:	9b06      	ldr	r3, [sp, #24]
 800912e:	3f08      	subs	r7, #8
 8009130:	429e      	cmp	r6, r3
 8009132:	ddec      	ble.n	800910e <__kernel_rem_pio2+0xb2>
 8009134:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009138:	3508      	adds	r5, #8
 800913a:	e8eb 2302 	strd	r2, r3, [fp], #8
 800913e:	f108 0801 	add.w	r8, r8, #1
 8009142:	e7c4      	b.n	80090ce <__kernel_rem_pio2+0x72>
 8009144:	9b04      	ldr	r3, [sp, #16]
 8009146:	aa0c      	add	r2, sp, #48	; 0x30
 8009148:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800914c:	930b      	str	r3, [sp, #44]	; 0x2c
 800914e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8009150:	9f04      	ldr	r7, [sp, #16]
 8009152:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009156:	930a      	str	r3, [sp, #40]	; 0x28
 8009158:	463e      	mov	r6, r7
 800915a:	ab98      	add	r3, sp, #608	; 0x260
 800915c:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8009160:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009164:	f8cd b008 	str.w	fp, [sp, #8]
 8009168:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800916c:	2e00      	cmp	r6, #0
 800916e:	dc71      	bgt.n	8009254 <__kernel_rem_pio2+0x1f8>
 8009170:	4652      	mov	r2, sl
 8009172:	4620      	mov	r0, r4
 8009174:	4629      	mov	r1, r5
 8009176:	f000 fd83 	bl	8009c80 <scalbn>
 800917a:	2200      	movs	r2, #0
 800917c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8009180:	4604      	mov	r4, r0
 8009182:	460d      	mov	r5, r1
 8009184:	f7f7 f9a8 	bl	80004d8 <__aeabi_dmul>
 8009188:	f000 fcfa 	bl	8009b80 <floor>
 800918c:	2200      	movs	r2, #0
 800918e:	4b78      	ldr	r3, [pc, #480]	; (8009370 <__kernel_rem_pio2+0x314>)
 8009190:	f7f7 f9a2 	bl	80004d8 <__aeabi_dmul>
 8009194:	4602      	mov	r2, r0
 8009196:	460b      	mov	r3, r1
 8009198:	4620      	mov	r0, r4
 800919a:	4629      	mov	r1, r5
 800919c:	f7f6 ffe4 	bl	8000168 <__aeabi_dsub>
 80091a0:	460d      	mov	r5, r1
 80091a2:	4604      	mov	r4, r0
 80091a4:	f7f7 fc48 	bl	8000a38 <__aeabi_d2iz>
 80091a8:	9007      	str	r0, [sp, #28]
 80091aa:	f7f7 f92b 	bl	8000404 <__aeabi_i2d>
 80091ae:	4602      	mov	r2, r0
 80091b0:	460b      	mov	r3, r1
 80091b2:	4620      	mov	r0, r4
 80091b4:	4629      	mov	r1, r5
 80091b6:	f7f6 ffd7 	bl	8000168 <__aeabi_dsub>
 80091ba:	f1ba 0f00 	cmp.w	sl, #0
 80091be:	4680      	mov	r8, r0
 80091c0:	4689      	mov	r9, r1
 80091c2:	dd70      	ble.n	80092a6 <__kernel_rem_pio2+0x24a>
 80091c4:	1e7a      	subs	r2, r7, #1
 80091c6:	ab0c      	add	r3, sp, #48	; 0x30
 80091c8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80091cc:	9c07      	ldr	r4, [sp, #28]
 80091ce:	f1ca 0118 	rsb	r1, sl, #24
 80091d2:	fa40 f301 	asr.w	r3, r0, r1
 80091d6:	441c      	add	r4, r3
 80091d8:	408b      	lsls	r3, r1
 80091da:	1ac0      	subs	r0, r0, r3
 80091dc:	ab0c      	add	r3, sp, #48	; 0x30
 80091de:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80091e2:	f1ca 0317 	rsb	r3, sl, #23
 80091e6:	9407      	str	r4, [sp, #28]
 80091e8:	fa40 f303 	asr.w	r3, r0, r3
 80091ec:	9302      	str	r3, [sp, #8]
 80091ee:	9b02      	ldr	r3, [sp, #8]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	dd66      	ble.n	80092c2 <__kernel_rem_pio2+0x266>
 80091f4:	2200      	movs	r2, #0
 80091f6:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80091fa:	4614      	mov	r4, r2
 80091fc:	9b07      	ldr	r3, [sp, #28]
 80091fe:	3301      	adds	r3, #1
 8009200:	9307      	str	r3, [sp, #28]
 8009202:	4297      	cmp	r7, r2
 8009204:	f300 809f 	bgt.w	8009346 <__kernel_rem_pio2+0x2ea>
 8009208:	f1ba 0f00 	cmp.w	sl, #0
 800920c:	dd07      	ble.n	800921e <__kernel_rem_pio2+0x1c2>
 800920e:	f1ba 0f01 	cmp.w	sl, #1
 8009212:	f000 80b9 	beq.w	8009388 <__kernel_rem_pio2+0x32c>
 8009216:	f1ba 0f02 	cmp.w	sl, #2
 800921a:	f000 80bf 	beq.w	800939c <__kernel_rem_pio2+0x340>
 800921e:	9b02      	ldr	r3, [sp, #8]
 8009220:	2b02      	cmp	r3, #2
 8009222:	d14e      	bne.n	80092c2 <__kernel_rem_pio2+0x266>
 8009224:	4642      	mov	r2, r8
 8009226:	464b      	mov	r3, r9
 8009228:	2000      	movs	r0, #0
 800922a:	4952      	ldr	r1, [pc, #328]	; (8009374 <__kernel_rem_pio2+0x318>)
 800922c:	f7f6 ff9c 	bl	8000168 <__aeabi_dsub>
 8009230:	4680      	mov	r8, r0
 8009232:	4689      	mov	r9, r1
 8009234:	2c00      	cmp	r4, #0
 8009236:	d044      	beq.n	80092c2 <__kernel_rem_pio2+0x266>
 8009238:	4652      	mov	r2, sl
 800923a:	2000      	movs	r0, #0
 800923c:	494d      	ldr	r1, [pc, #308]	; (8009374 <__kernel_rem_pio2+0x318>)
 800923e:	f000 fd1f 	bl	8009c80 <scalbn>
 8009242:	4602      	mov	r2, r0
 8009244:	460b      	mov	r3, r1
 8009246:	4640      	mov	r0, r8
 8009248:	4649      	mov	r1, r9
 800924a:	f7f6 ff8d 	bl	8000168 <__aeabi_dsub>
 800924e:	4680      	mov	r8, r0
 8009250:	4689      	mov	r9, r1
 8009252:	e036      	b.n	80092c2 <__kernel_rem_pio2+0x266>
 8009254:	2200      	movs	r2, #0
 8009256:	4b48      	ldr	r3, [pc, #288]	; (8009378 <__kernel_rem_pio2+0x31c>)
 8009258:	4620      	mov	r0, r4
 800925a:	4629      	mov	r1, r5
 800925c:	f7f7 f93c 	bl	80004d8 <__aeabi_dmul>
 8009260:	f7f7 fbea 	bl	8000a38 <__aeabi_d2iz>
 8009264:	f7f7 f8ce 	bl	8000404 <__aeabi_i2d>
 8009268:	2200      	movs	r2, #0
 800926a:	4b44      	ldr	r3, [pc, #272]	; (800937c <__kernel_rem_pio2+0x320>)
 800926c:	4680      	mov	r8, r0
 800926e:	4689      	mov	r9, r1
 8009270:	f7f7 f932 	bl	80004d8 <__aeabi_dmul>
 8009274:	4602      	mov	r2, r0
 8009276:	460b      	mov	r3, r1
 8009278:	4620      	mov	r0, r4
 800927a:	4629      	mov	r1, r5
 800927c:	f7f6 ff74 	bl	8000168 <__aeabi_dsub>
 8009280:	f7f7 fbda 	bl	8000a38 <__aeabi_d2iz>
 8009284:	9b02      	ldr	r3, [sp, #8]
 8009286:	3e01      	subs	r6, #1
 8009288:	f843 0b04 	str.w	r0, [r3], #4
 800928c:	9302      	str	r3, [sp, #8]
 800928e:	ab70      	add	r3, sp, #448	; 0x1c0
 8009290:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009294:	4640      	mov	r0, r8
 8009296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800929a:	4649      	mov	r1, r9
 800929c:	f7f6 ff66 	bl	800016c <__adddf3>
 80092a0:	4604      	mov	r4, r0
 80092a2:	460d      	mov	r5, r1
 80092a4:	e762      	b.n	800916c <__kernel_rem_pio2+0x110>
 80092a6:	d105      	bne.n	80092b4 <__kernel_rem_pio2+0x258>
 80092a8:	1e7b      	subs	r3, r7, #1
 80092aa:	aa0c      	add	r2, sp, #48	; 0x30
 80092ac:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80092b0:	15c3      	asrs	r3, r0, #23
 80092b2:	e79b      	b.n	80091ec <__kernel_rem_pio2+0x190>
 80092b4:	2200      	movs	r2, #0
 80092b6:	4b32      	ldr	r3, [pc, #200]	; (8009380 <__kernel_rem_pio2+0x324>)
 80092b8:	f7f7 fb94 	bl	80009e4 <__aeabi_dcmpge>
 80092bc:	2800      	cmp	r0, #0
 80092be:	d13f      	bne.n	8009340 <__kernel_rem_pio2+0x2e4>
 80092c0:	9002      	str	r0, [sp, #8]
 80092c2:	2200      	movs	r2, #0
 80092c4:	2300      	movs	r3, #0
 80092c6:	4640      	mov	r0, r8
 80092c8:	4649      	mov	r1, r9
 80092ca:	f7f7 fb6d 	bl	80009a8 <__aeabi_dcmpeq>
 80092ce:	2800      	cmp	r0, #0
 80092d0:	f000 80b5 	beq.w	800943e <__kernel_rem_pio2+0x3e2>
 80092d4:	1e7c      	subs	r4, r7, #1
 80092d6:	4623      	mov	r3, r4
 80092d8:	2200      	movs	r2, #0
 80092da:	9904      	ldr	r1, [sp, #16]
 80092dc:	428b      	cmp	r3, r1
 80092de:	da64      	bge.n	80093aa <__kernel_rem_pio2+0x34e>
 80092e0:	2a00      	cmp	r2, #0
 80092e2:	d078      	beq.n	80093d6 <__kernel_rem_pio2+0x37a>
 80092e4:	ab0c      	add	r3, sp, #48	; 0x30
 80092e6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80092ea:	f1aa 0a18 	sub.w	sl, sl, #24
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	f000 80a3 	beq.w	800943a <__kernel_rem_pio2+0x3de>
 80092f4:	4652      	mov	r2, sl
 80092f6:	2000      	movs	r0, #0
 80092f8:	491e      	ldr	r1, [pc, #120]	; (8009374 <__kernel_rem_pio2+0x318>)
 80092fa:	f000 fcc1 	bl	8009c80 <scalbn>
 80092fe:	46a2      	mov	sl, r4
 8009300:	4606      	mov	r6, r0
 8009302:	460f      	mov	r7, r1
 8009304:	f04f 0800 	mov.w	r8, #0
 8009308:	00e3      	lsls	r3, r4, #3
 800930a:	9306      	str	r3, [sp, #24]
 800930c:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8009378 <__kernel_rem_pio2+0x31c>
 8009310:	ab70      	add	r3, sp, #448	; 0x1c0
 8009312:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8009316:	f1ba 0f00 	cmp.w	sl, #0
 800931a:	f280 80c6 	bge.w	80094aa <__kernel_rem_pio2+0x44e>
 800931e:	4627      	mov	r7, r4
 8009320:	f04f 0800 	mov.w	r8, #0
 8009324:	2f00      	cmp	r7, #0
 8009326:	f2c0 80f3 	blt.w	8009510 <__kernel_rem_pio2+0x4b4>
 800932a:	4b16      	ldr	r3, [pc, #88]	; (8009384 <__kernel_rem_pio2+0x328>)
 800932c:	f04f 0a00 	mov.w	sl, #0
 8009330:	461d      	mov	r5, r3
 8009332:	ab70      	add	r3, sp, #448	; 0x1c0
 8009334:	f04f 0b00 	mov.w	fp, #0
 8009338:	2600      	movs	r6, #0
 800933a:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800933e:	e0d9      	b.n	80094f4 <__kernel_rem_pio2+0x498>
 8009340:	2302      	movs	r3, #2
 8009342:	9302      	str	r3, [sp, #8]
 8009344:	e756      	b.n	80091f4 <__kernel_rem_pio2+0x198>
 8009346:	f8db 3000 	ldr.w	r3, [fp]
 800934a:	b954      	cbnz	r4, 8009362 <__kernel_rem_pio2+0x306>
 800934c:	b123      	cbz	r3, 8009358 <__kernel_rem_pio2+0x2fc>
 800934e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8009352:	f8cb 3000 	str.w	r3, [fp]
 8009356:	2301      	movs	r3, #1
 8009358:	461c      	mov	r4, r3
 800935a:	3201      	adds	r2, #1
 800935c:	f10b 0b04 	add.w	fp, fp, #4
 8009360:	e74f      	b.n	8009202 <__kernel_rem_pio2+0x1a6>
 8009362:	1acb      	subs	r3, r1, r3
 8009364:	f8cb 3000 	str.w	r3, [fp]
 8009368:	4623      	mov	r3, r4
 800936a:	e7f5      	b.n	8009358 <__kernel_rem_pio2+0x2fc>
 800936c:	0800bea0 	.word	0x0800bea0
 8009370:	40200000 	.word	0x40200000
 8009374:	3ff00000 	.word	0x3ff00000
 8009378:	3e700000 	.word	0x3e700000
 800937c:	41700000 	.word	0x41700000
 8009380:	3fe00000 	.word	0x3fe00000
 8009384:	0800be60 	.word	0x0800be60
 8009388:	1e7a      	subs	r2, r7, #1
 800938a:	ab0c      	add	r3, sp, #48	; 0x30
 800938c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009390:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009394:	a90c      	add	r1, sp, #48	; 0x30
 8009396:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800939a:	e740      	b.n	800921e <__kernel_rem_pio2+0x1c2>
 800939c:	1e7a      	subs	r2, r7, #1
 800939e:	ab0c      	add	r3, sp, #48	; 0x30
 80093a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093a4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80093a8:	e7f4      	b.n	8009394 <__kernel_rem_pio2+0x338>
 80093aa:	a90c      	add	r1, sp, #48	; 0x30
 80093ac:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80093b0:	3b01      	subs	r3, #1
 80093b2:	430a      	orrs	r2, r1
 80093b4:	e791      	b.n	80092da <__kernel_rem_pio2+0x27e>
 80093b6:	3401      	adds	r4, #1
 80093b8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80093bc:	2a00      	cmp	r2, #0
 80093be:	d0fa      	beq.n	80093b6 <__kernel_rem_pio2+0x35a>
 80093c0:	9b08      	ldr	r3, [sp, #32]
 80093c2:	1c7e      	adds	r6, r7, #1
 80093c4:	18fd      	adds	r5, r7, r3
 80093c6:	ab20      	add	r3, sp, #128	; 0x80
 80093c8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80093cc:	443c      	add	r4, r7
 80093ce:	42b4      	cmp	r4, r6
 80093d0:	da04      	bge.n	80093dc <__kernel_rem_pio2+0x380>
 80093d2:	4627      	mov	r7, r4
 80093d4:	e6c0      	b.n	8009158 <__kernel_rem_pio2+0xfc>
 80093d6:	2401      	movs	r4, #1
 80093d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093da:	e7ed      	b.n	80093b8 <__kernel_rem_pio2+0x35c>
 80093dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093de:	462f      	mov	r7, r5
 80093e0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80093e4:	f7f7 f80e 	bl	8000404 <__aeabi_i2d>
 80093e8:	f04f 0b00 	mov.w	fp, #0
 80093ec:	f04f 0800 	mov.w	r8, #0
 80093f0:	f04f 0900 	mov.w	r9, #0
 80093f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093f6:	e8e7 0102 	strd	r0, r1, [r7], #8
 80093fa:	3b08      	subs	r3, #8
 80093fc:	9302      	str	r3, [sp, #8]
 80093fe:	9b06      	ldr	r3, [sp, #24]
 8009400:	459b      	cmp	fp, r3
 8009402:	dd07      	ble.n	8009414 <__kernel_rem_pio2+0x3b8>
 8009404:	ab70      	add	r3, sp, #448	; 0x1c0
 8009406:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800940a:	463d      	mov	r5, r7
 800940c:	e9c3 8900 	strd	r8, r9, [r3]
 8009410:	3601      	adds	r6, #1
 8009412:	e7dc      	b.n	80093ce <__kernel_rem_pio2+0x372>
 8009414:	9902      	ldr	r1, [sp, #8]
 8009416:	f10b 0b01 	add.w	fp, fp, #1
 800941a:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800941e:	9102      	str	r1, [sp, #8]
 8009420:	e875 0102 	ldrd	r0, r1, [r5], #-8
 8009424:	f7f7 f858 	bl	80004d8 <__aeabi_dmul>
 8009428:	4602      	mov	r2, r0
 800942a:	460b      	mov	r3, r1
 800942c:	4640      	mov	r0, r8
 800942e:	4649      	mov	r1, r9
 8009430:	f7f6 fe9c 	bl	800016c <__adddf3>
 8009434:	4680      	mov	r8, r0
 8009436:	4689      	mov	r9, r1
 8009438:	e7e1      	b.n	80093fe <__kernel_rem_pio2+0x3a2>
 800943a:	3c01      	subs	r4, #1
 800943c:	e752      	b.n	80092e4 <__kernel_rem_pio2+0x288>
 800943e:	f1ca 0200 	rsb	r2, sl, #0
 8009442:	4640      	mov	r0, r8
 8009444:	4649      	mov	r1, r9
 8009446:	f000 fc1b 	bl	8009c80 <scalbn>
 800944a:	2200      	movs	r2, #0
 800944c:	4ba5      	ldr	r3, [pc, #660]	; (80096e4 <__kernel_rem_pio2+0x688>)
 800944e:	4604      	mov	r4, r0
 8009450:	460d      	mov	r5, r1
 8009452:	f7f7 fac7 	bl	80009e4 <__aeabi_dcmpge>
 8009456:	b1f8      	cbz	r0, 8009498 <__kernel_rem_pio2+0x43c>
 8009458:	2200      	movs	r2, #0
 800945a:	4ba3      	ldr	r3, [pc, #652]	; (80096e8 <__kernel_rem_pio2+0x68c>)
 800945c:	4620      	mov	r0, r4
 800945e:	4629      	mov	r1, r5
 8009460:	f7f7 f83a 	bl	80004d8 <__aeabi_dmul>
 8009464:	f7f7 fae8 	bl	8000a38 <__aeabi_d2iz>
 8009468:	4606      	mov	r6, r0
 800946a:	f7f6 ffcb 	bl	8000404 <__aeabi_i2d>
 800946e:	2200      	movs	r2, #0
 8009470:	4b9c      	ldr	r3, [pc, #624]	; (80096e4 <__kernel_rem_pio2+0x688>)
 8009472:	f7f7 f831 	bl	80004d8 <__aeabi_dmul>
 8009476:	460b      	mov	r3, r1
 8009478:	4602      	mov	r2, r0
 800947a:	4629      	mov	r1, r5
 800947c:	4620      	mov	r0, r4
 800947e:	f7f6 fe73 	bl	8000168 <__aeabi_dsub>
 8009482:	f7f7 fad9 	bl	8000a38 <__aeabi_d2iz>
 8009486:	1c7c      	adds	r4, r7, #1
 8009488:	ab0c      	add	r3, sp, #48	; 0x30
 800948a:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800948e:	f10a 0a18 	add.w	sl, sl, #24
 8009492:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 8009496:	e72d      	b.n	80092f4 <__kernel_rem_pio2+0x298>
 8009498:	4620      	mov	r0, r4
 800949a:	4629      	mov	r1, r5
 800949c:	f7f7 facc 	bl	8000a38 <__aeabi_d2iz>
 80094a0:	ab0c      	add	r3, sp, #48	; 0x30
 80094a2:	463c      	mov	r4, r7
 80094a4:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80094a8:	e724      	b.n	80092f4 <__kernel_rem_pio2+0x298>
 80094aa:	ab0c      	add	r3, sp, #48	; 0x30
 80094ac:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80094b0:	f7f6 ffa8 	bl	8000404 <__aeabi_i2d>
 80094b4:	4632      	mov	r2, r6
 80094b6:	463b      	mov	r3, r7
 80094b8:	f7f7 f80e 	bl	80004d8 <__aeabi_dmul>
 80094bc:	4642      	mov	r2, r8
 80094be:	e86b 0102 	strd	r0, r1, [fp], #-8
 80094c2:	464b      	mov	r3, r9
 80094c4:	4630      	mov	r0, r6
 80094c6:	4639      	mov	r1, r7
 80094c8:	f7f7 f806 	bl	80004d8 <__aeabi_dmul>
 80094cc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80094d0:	4606      	mov	r6, r0
 80094d2:	460f      	mov	r7, r1
 80094d4:	e71f      	b.n	8009316 <__kernel_rem_pio2+0x2ba>
 80094d6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80094da:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80094de:	f7f6 fffb 	bl	80004d8 <__aeabi_dmul>
 80094e2:	4602      	mov	r2, r0
 80094e4:	460b      	mov	r3, r1
 80094e6:	4650      	mov	r0, sl
 80094e8:	4659      	mov	r1, fp
 80094ea:	f7f6 fe3f 	bl	800016c <__adddf3>
 80094ee:	4682      	mov	sl, r0
 80094f0:	468b      	mov	fp, r1
 80094f2:	3601      	adds	r6, #1
 80094f4:	9b04      	ldr	r3, [sp, #16]
 80094f6:	429e      	cmp	r6, r3
 80094f8:	dc01      	bgt.n	80094fe <__kernel_rem_pio2+0x4a2>
 80094fa:	45b0      	cmp	r8, r6
 80094fc:	daeb      	bge.n	80094d6 <__kernel_rem_pio2+0x47a>
 80094fe:	ab48      	add	r3, sp, #288	; 0x120
 8009500:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009504:	e9c3 ab00 	strd	sl, fp, [r3]
 8009508:	3f01      	subs	r7, #1
 800950a:	f108 0801 	add.w	r8, r8, #1
 800950e:	e709      	b.n	8009324 <__kernel_rem_pio2+0x2c8>
 8009510:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8009512:	2b02      	cmp	r3, #2
 8009514:	dc09      	bgt.n	800952a <__kernel_rem_pio2+0x4ce>
 8009516:	2b00      	cmp	r3, #0
 8009518:	dc34      	bgt.n	8009584 <__kernel_rem_pio2+0x528>
 800951a:	d05e      	beq.n	80095da <__kernel_rem_pio2+0x57e>
 800951c:	9b07      	ldr	r3, [sp, #28]
 800951e:	f003 0007 	and.w	r0, r3, #7
 8009522:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8009526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800952a:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800952c:	2b03      	cmp	r3, #3
 800952e:	d1f5      	bne.n	800951c <__kernel_rem_pio2+0x4c0>
 8009530:	9a06      	ldr	r2, [sp, #24]
 8009532:	ab48      	add	r3, sp, #288	; 0x120
 8009534:	441a      	add	r2, r3
 8009536:	4615      	mov	r5, r2
 8009538:	4692      	mov	sl, r2
 800953a:	46a3      	mov	fp, r4
 800953c:	f1bb 0f00 	cmp.w	fp, #0
 8009540:	dc7a      	bgt.n	8009638 <__kernel_rem_pio2+0x5dc>
 8009542:	46aa      	mov	sl, r5
 8009544:	46a3      	mov	fp, r4
 8009546:	f1bb 0f01 	cmp.w	fp, #1
 800954a:	f300 8094 	bgt.w	8009676 <__kernel_rem_pio2+0x61a>
 800954e:	2700      	movs	r7, #0
 8009550:	463e      	mov	r6, r7
 8009552:	2c01      	cmp	r4, #1
 8009554:	f300 80ae 	bgt.w	80096b4 <__kernel_rem_pio2+0x658>
 8009558:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800955c:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 8009560:	9b02      	ldr	r3, [sp, #8]
 8009562:	2b00      	cmp	r3, #0
 8009564:	f040 80b0 	bne.w	80096c8 <__kernel_rem_pio2+0x66c>
 8009568:	4603      	mov	r3, r0
 800956a:	462a      	mov	r2, r5
 800956c:	9801      	ldr	r0, [sp, #4]
 800956e:	e9c0 2300 	strd	r2, r3, [r0]
 8009572:	4622      	mov	r2, r4
 8009574:	460b      	mov	r3, r1
 8009576:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800957a:	463a      	mov	r2, r7
 800957c:	4633      	mov	r3, r6
 800957e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8009582:	e7cb      	b.n	800951c <__kernel_rem_pio2+0x4c0>
 8009584:	2000      	movs	r0, #0
 8009586:	9a06      	ldr	r2, [sp, #24]
 8009588:	ab48      	add	r3, sp, #288	; 0x120
 800958a:	441a      	add	r2, r3
 800958c:	4615      	mov	r5, r2
 800958e:	46a0      	mov	r8, r4
 8009590:	4601      	mov	r1, r0
 8009592:	f1b8 0f00 	cmp.w	r8, #0
 8009596:	da3c      	bge.n	8009612 <__kernel_rem_pio2+0x5b6>
 8009598:	9b02      	ldr	r3, [sp, #8]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d040      	beq.n	8009620 <__kernel_rem_pio2+0x5c4>
 800959e:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 80095a2:	4602      	mov	r2, r0
 80095a4:	462b      	mov	r3, r5
 80095a6:	9d01      	ldr	r5, [sp, #4]
 80095a8:	2601      	movs	r6, #1
 80095aa:	e9c5 2300 	strd	r2, r3, [r5]
 80095ae:	460b      	mov	r3, r1
 80095b0:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80095b4:	f7f6 fdd8 	bl	8000168 <__aeabi_dsub>
 80095b8:	4684      	mov	ip, r0
 80095ba:	460f      	mov	r7, r1
 80095bc:	ad48      	add	r5, sp, #288	; 0x120
 80095be:	42b4      	cmp	r4, r6
 80095c0:	f105 0508 	add.w	r5, r5, #8
 80095c4:	da2e      	bge.n	8009624 <__kernel_rem_pio2+0x5c8>
 80095c6:	9b02      	ldr	r3, [sp, #8]
 80095c8:	b10b      	cbz	r3, 80095ce <__kernel_rem_pio2+0x572>
 80095ca:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80095ce:	4662      	mov	r2, ip
 80095d0:	463b      	mov	r3, r7
 80095d2:	9901      	ldr	r1, [sp, #4]
 80095d4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80095d8:	e7a0      	b.n	800951c <__kernel_rem_pio2+0x4c0>
 80095da:	9a06      	ldr	r2, [sp, #24]
 80095dc:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 80095de:	ab48      	add	r3, sp, #288	; 0x120
 80095e0:	441a      	add	r2, r3
 80095e2:	4615      	mov	r5, r2
 80095e4:	4637      	mov	r7, r6
 80095e6:	2c00      	cmp	r4, #0
 80095e8:	da09      	bge.n	80095fe <__kernel_rem_pio2+0x5a2>
 80095ea:	9b02      	ldr	r3, [sp, #8]
 80095ec:	b10b      	cbz	r3, 80095f2 <__kernel_rem_pio2+0x596>
 80095ee:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80095f2:	4632      	mov	r2, r6
 80095f4:	463b      	mov	r3, r7
 80095f6:	9901      	ldr	r1, [sp, #4]
 80095f8:	e9c1 2300 	strd	r2, r3, [r1]
 80095fc:	e78e      	b.n	800951c <__kernel_rem_pio2+0x4c0>
 80095fe:	4630      	mov	r0, r6
 8009600:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8009604:	4639      	mov	r1, r7
 8009606:	f7f6 fdb1 	bl	800016c <__adddf3>
 800960a:	3c01      	subs	r4, #1
 800960c:	4606      	mov	r6, r0
 800960e:	460f      	mov	r7, r1
 8009610:	e7e9      	b.n	80095e6 <__kernel_rem_pio2+0x58a>
 8009612:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8009616:	f7f6 fda9 	bl	800016c <__adddf3>
 800961a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800961e:	e7b8      	b.n	8009592 <__kernel_rem_pio2+0x536>
 8009620:	460d      	mov	r5, r1
 8009622:	e7be      	b.n	80095a2 <__kernel_rem_pio2+0x546>
 8009624:	4660      	mov	r0, ip
 8009626:	e9d5 2300 	ldrd	r2, r3, [r5]
 800962a:	4639      	mov	r1, r7
 800962c:	f7f6 fd9e 	bl	800016c <__adddf3>
 8009630:	3601      	adds	r6, #1
 8009632:	4684      	mov	ip, r0
 8009634:	460f      	mov	r7, r1
 8009636:	e7c2      	b.n	80095be <__kernel_rem_pio2+0x562>
 8009638:	e9da 6700 	ldrd	r6, r7, [sl]
 800963c:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8009640:	4632      	mov	r2, r6
 8009642:	463b      	mov	r3, r7
 8009644:	4640      	mov	r0, r8
 8009646:	4649      	mov	r1, r9
 8009648:	f7f6 fd90 	bl	800016c <__adddf3>
 800964c:	4602      	mov	r2, r0
 800964e:	460b      	mov	r3, r1
 8009650:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009654:	4640      	mov	r0, r8
 8009656:	4649      	mov	r1, r9
 8009658:	f7f6 fd86 	bl	8000168 <__aeabi_dsub>
 800965c:	4632      	mov	r2, r6
 800965e:	463b      	mov	r3, r7
 8009660:	f7f6 fd84 	bl	800016c <__adddf3>
 8009664:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009668:	e86a 0102 	strd	r0, r1, [sl], #-8
 800966c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009670:	e9ca 2300 	strd	r2, r3, [sl]
 8009674:	e762      	b.n	800953c <__kernel_rem_pio2+0x4e0>
 8009676:	e9da 8900 	ldrd	r8, r9, [sl]
 800967a:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800967e:	4642      	mov	r2, r8
 8009680:	464b      	mov	r3, r9
 8009682:	4630      	mov	r0, r6
 8009684:	4639      	mov	r1, r7
 8009686:	f7f6 fd71 	bl	800016c <__adddf3>
 800968a:	4602      	mov	r2, r0
 800968c:	460b      	mov	r3, r1
 800968e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009692:	4630      	mov	r0, r6
 8009694:	4639      	mov	r1, r7
 8009696:	f7f6 fd67 	bl	8000168 <__aeabi_dsub>
 800969a:	4642      	mov	r2, r8
 800969c:	464b      	mov	r3, r9
 800969e:	f7f6 fd65 	bl	800016c <__adddf3>
 80096a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80096a6:	e86a 0102 	strd	r0, r1, [sl], #-8
 80096aa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80096ae:	e9ca 2300 	strd	r2, r3, [sl]
 80096b2:	e748      	b.n	8009546 <__kernel_rem_pio2+0x4ea>
 80096b4:	4638      	mov	r0, r7
 80096b6:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80096ba:	4631      	mov	r1, r6
 80096bc:	f7f6 fd56 	bl	800016c <__adddf3>
 80096c0:	3c01      	subs	r4, #1
 80096c2:	4607      	mov	r7, r0
 80096c4:	460e      	mov	r6, r1
 80096c6:	e744      	b.n	8009552 <__kernel_rem_pio2+0x4f6>
 80096c8:	9b01      	ldr	r3, [sp, #4]
 80096ca:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80096ce:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80096d2:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80096d6:	e9c3 0401 	strd	r0, r4, [r3, #4]
 80096da:	e9c3 1703 	strd	r1, r7, [r3, #12]
 80096de:	601d      	str	r5, [r3, #0]
 80096e0:	615e      	str	r6, [r3, #20]
 80096e2:	e71b      	b.n	800951c <__kernel_rem_pio2+0x4c0>
 80096e4:	41700000 	.word	0x41700000
 80096e8:	3e700000 	.word	0x3e700000
 80096ec:	00000000 	.word	0x00000000

080096f0 <__kernel_sin>:
 80096f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096f4:	b086      	sub	sp, #24
 80096f6:	e9cd 2300 	strd	r2, r3, [sp]
 80096fa:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80096fe:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8009702:	4682      	mov	sl, r0
 8009704:	460c      	mov	r4, r1
 8009706:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8009708:	da03      	bge.n	8009712 <__kernel_sin+0x22>
 800970a:	f7f7 f995 	bl	8000a38 <__aeabi_d2iz>
 800970e:	2800      	cmp	r0, #0
 8009710:	d050      	beq.n	80097b4 <__kernel_sin+0xc4>
 8009712:	4652      	mov	r2, sl
 8009714:	4623      	mov	r3, r4
 8009716:	4650      	mov	r0, sl
 8009718:	4621      	mov	r1, r4
 800971a:	f7f6 fedd 	bl	80004d8 <__aeabi_dmul>
 800971e:	4606      	mov	r6, r0
 8009720:	460f      	mov	r7, r1
 8009722:	4602      	mov	r2, r0
 8009724:	460b      	mov	r3, r1
 8009726:	4650      	mov	r0, sl
 8009728:	4621      	mov	r1, r4
 800972a:	f7f6 fed5 	bl	80004d8 <__aeabi_dmul>
 800972e:	a33e      	add	r3, pc, #248	; (adr r3, 8009828 <__kernel_sin+0x138>)
 8009730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009734:	4680      	mov	r8, r0
 8009736:	4689      	mov	r9, r1
 8009738:	4630      	mov	r0, r6
 800973a:	4639      	mov	r1, r7
 800973c:	f7f6 fecc 	bl	80004d8 <__aeabi_dmul>
 8009740:	a33b      	add	r3, pc, #236	; (adr r3, 8009830 <__kernel_sin+0x140>)
 8009742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009746:	f7f6 fd0f 	bl	8000168 <__aeabi_dsub>
 800974a:	4632      	mov	r2, r6
 800974c:	463b      	mov	r3, r7
 800974e:	f7f6 fec3 	bl	80004d8 <__aeabi_dmul>
 8009752:	a339      	add	r3, pc, #228	; (adr r3, 8009838 <__kernel_sin+0x148>)
 8009754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009758:	f7f6 fd08 	bl	800016c <__adddf3>
 800975c:	4632      	mov	r2, r6
 800975e:	463b      	mov	r3, r7
 8009760:	f7f6 feba 	bl	80004d8 <__aeabi_dmul>
 8009764:	a336      	add	r3, pc, #216	; (adr r3, 8009840 <__kernel_sin+0x150>)
 8009766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800976a:	f7f6 fcfd 	bl	8000168 <__aeabi_dsub>
 800976e:	4632      	mov	r2, r6
 8009770:	463b      	mov	r3, r7
 8009772:	f7f6 feb1 	bl	80004d8 <__aeabi_dmul>
 8009776:	a334      	add	r3, pc, #208	; (adr r3, 8009848 <__kernel_sin+0x158>)
 8009778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800977c:	f7f6 fcf6 	bl	800016c <__adddf3>
 8009780:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009784:	b9dd      	cbnz	r5, 80097be <__kernel_sin+0xce>
 8009786:	4602      	mov	r2, r0
 8009788:	460b      	mov	r3, r1
 800978a:	4630      	mov	r0, r6
 800978c:	4639      	mov	r1, r7
 800978e:	f7f6 fea3 	bl	80004d8 <__aeabi_dmul>
 8009792:	a32f      	add	r3, pc, #188	; (adr r3, 8009850 <__kernel_sin+0x160>)
 8009794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009798:	f7f6 fce6 	bl	8000168 <__aeabi_dsub>
 800979c:	4642      	mov	r2, r8
 800979e:	464b      	mov	r3, r9
 80097a0:	f7f6 fe9a 	bl	80004d8 <__aeabi_dmul>
 80097a4:	4602      	mov	r2, r0
 80097a6:	460b      	mov	r3, r1
 80097a8:	4650      	mov	r0, sl
 80097aa:	4621      	mov	r1, r4
 80097ac:	f7f6 fcde 	bl	800016c <__adddf3>
 80097b0:	4682      	mov	sl, r0
 80097b2:	460c      	mov	r4, r1
 80097b4:	4650      	mov	r0, sl
 80097b6:	4621      	mov	r1, r4
 80097b8:	b006      	add	sp, #24
 80097ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097be:	2200      	movs	r2, #0
 80097c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80097c4:	4b24      	ldr	r3, [pc, #144]	; (8009858 <__kernel_sin+0x168>)
 80097c6:	f7f6 fe87 	bl	80004d8 <__aeabi_dmul>
 80097ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80097ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80097d2:	4640      	mov	r0, r8
 80097d4:	4649      	mov	r1, r9
 80097d6:	f7f6 fe7f 	bl	80004d8 <__aeabi_dmul>
 80097da:	4602      	mov	r2, r0
 80097dc:	460b      	mov	r3, r1
 80097de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80097e2:	f7f6 fcc1 	bl	8000168 <__aeabi_dsub>
 80097e6:	4632      	mov	r2, r6
 80097e8:	463b      	mov	r3, r7
 80097ea:	f7f6 fe75 	bl	80004d8 <__aeabi_dmul>
 80097ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80097f2:	f7f6 fcb9 	bl	8000168 <__aeabi_dsub>
 80097f6:	a316      	add	r3, pc, #88	; (adr r3, 8009850 <__kernel_sin+0x160>)
 80097f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097fc:	4606      	mov	r6, r0
 80097fe:	460f      	mov	r7, r1
 8009800:	4640      	mov	r0, r8
 8009802:	4649      	mov	r1, r9
 8009804:	f7f6 fe68 	bl	80004d8 <__aeabi_dmul>
 8009808:	4602      	mov	r2, r0
 800980a:	460b      	mov	r3, r1
 800980c:	4630      	mov	r0, r6
 800980e:	4639      	mov	r1, r7
 8009810:	f7f6 fcac 	bl	800016c <__adddf3>
 8009814:	4602      	mov	r2, r0
 8009816:	460b      	mov	r3, r1
 8009818:	4650      	mov	r0, sl
 800981a:	4621      	mov	r1, r4
 800981c:	f7f6 fca4 	bl	8000168 <__aeabi_dsub>
 8009820:	e7c6      	b.n	80097b0 <__kernel_sin+0xc0>
 8009822:	bf00      	nop
 8009824:	f3af 8000 	nop.w
 8009828:	5acfd57c 	.word	0x5acfd57c
 800982c:	3de5d93a 	.word	0x3de5d93a
 8009830:	8a2b9ceb 	.word	0x8a2b9ceb
 8009834:	3e5ae5e6 	.word	0x3e5ae5e6
 8009838:	57b1fe7d 	.word	0x57b1fe7d
 800983c:	3ec71de3 	.word	0x3ec71de3
 8009840:	19c161d5 	.word	0x19c161d5
 8009844:	3f2a01a0 	.word	0x3f2a01a0
 8009848:	1110f8a6 	.word	0x1110f8a6
 800984c:	3f811111 	.word	0x3f811111
 8009850:	55555549 	.word	0x55555549
 8009854:	3fc55555 	.word	0x3fc55555
 8009858:	3fe00000 	.word	0x3fe00000
 800985c:	00000000 	.word	0x00000000

08009860 <atan>:
 8009860:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009864:	4bb6      	ldr	r3, [pc, #728]	; (8009b40 <atan+0x2e0>)
 8009866:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800986a:	429e      	cmp	r6, r3
 800986c:	4604      	mov	r4, r0
 800986e:	460d      	mov	r5, r1
 8009870:	468b      	mov	fp, r1
 8009872:	dd17      	ble.n	80098a4 <atan+0x44>
 8009874:	4bb3      	ldr	r3, [pc, #716]	; (8009b44 <atan+0x2e4>)
 8009876:	429e      	cmp	r6, r3
 8009878:	dc01      	bgt.n	800987e <atan+0x1e>
 800987a:	d109      	bne.n	8009890 <atan+0x30>
 800987c:	b140      	cbz	r0, 8009890 <atan+0x30>
 800987e:	4622      	mov	r2, r4
 8009880:	462b      	mov	r3, r5
 8009882:	4620      	mov	r0, r4
 8009884:	4629      	mov	r1, r5
 8009886:	f7f6 fc71 	bl	800016c <__adddf3>
 800988a:	4604      	mov	r4, r0
 800988c:	460d      	mov	r5, r1
 800988e:	e005      	b.n	800989c <atan+0x3c>
 8009890:	f1bb 0f00 	cmp.w	fp, #0
 8009894:	4cac      	ldr	r4, [pc, #688]	; (8009b48 <atan+0x2e8>)
 8009896:	f300 8121 	bgt.w	8009adc <atan+0x27c>
 800989a:	4dac      	ldr	r5, [pc, #688]	; (8009b4c <atan+0x2ec>)
 800989c:	4620      	mov	r0, r4
 800989e:	4629      	mov	r1, r5
 80098a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098a4:	4baa      	ldr	r3, [pc, #680]	; (8009b50 <atan+0x2f0>)
 80098a6:	429e      	cmp	r6, r3
 80098a8:	dc11      	bgt.n	80098ce <atan+0x6e>
 80098aa:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80098ae:	429e      	cmp	r6, r3
 80098b0:	dc0a      	bgt.n	80098c8 <atan+0x68>
 80098b2:	a38b      	add	r3, pc, #556	; (adr r3, 8009ae0 <atan+0x280>)
 80098b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b8:	f7f6 fc58 	bl	800016c <__adddf3>
 80098bc:	2200      	movs	r2, #0
 80098be:	4ba5      	ldr	r3, [pc, #660]	; (8009b54 <atan+0x2f4>)
 80098c0:	f7f7 f89a 	bl	80009f8 <__aeabi_dcmpgt>
 80098c4:	2800      	cmp	r0, #0
 80098c6:	d1e9      	bne.n	800989c <atan+0x3c>
 80098c8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80098cc:	e027      	b.n	800991e <atan+0xbe>
 80098ce:	f000 f951 	bl	8009b74 <fabs>
 80098d2:	4ba1      	ldr	r3, [pc, #644]	; (8009b58 <atan+0x2f8>)
 80098d4:	4604      	mov	r4, r0
 80098d6:	429e      	cmp	r6, r3
 80098d8:	460d      	mov	r5, r1
 80098da:	f300 80b8 	bgt.w	8009a4e <atan+0x1ee>
 80098de:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80098e2:	429e      	cmp	r6, r3
 80098e4:	f300 809c 	bgt.w	8009a20 <atan+0x1c0>
 80098e8:	4602      	mov	r2, r0
 80098ea:	460b      	mov	r3, r1
 80098ec:	f7f6 fc3e 	bl	800016c <__adddf3>
 80098f0:	2200      	movs	r2, #0
 80098f2:	4b98      	ldr	r3, [pc, #608]	; (8009b54 <atan+0x2f4>)
 80098f4:	f7f6 fc38 	bl	8000168 <__aeabi_dsub>
 80098f8:	2200      	movs	r2, #0
 80098fa:	4606      	mov	r6, r0
 80098fc:	460f      	mov	r7, r1
 80098fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009902:	4620      	mov	r0, r4
 8009904:	4629      	mov	r1, r5
 8009906:	f7f6 fc31 	bl	800016c <__adddf3>
 800990a:	4602      	mov	r2, r0
 800990c:	460b      	mov	r3, r1
 800990e:	4630      	mov	r0, r6
 8009910:	4639      	mov	r1, r7
 8009912:	f7f6 ff0b 	bl	800072c <__aeabi_ddiv>
 8009916:	f04f 0a00 	mov.w	sl, #0
 800991a:	4604      	mov	r4, r0
 800991c:	460d      	mov	r5, r1
 800991e:	4622      	mov	r2, r4
 8009920:	462b      	mov	r3, r5
 8009922:	4620      	mov	r0, r4
 8009924:	4629      	mov	r1, r5
 8009926:	f7f6 fdd7 	bl	80004d8 <__aeabi_dmul>
 800992a:	4602      	mov	r2, r0
 800992c:	460b      	mov	r3, r1
 800992e:	4680      	mov	r8, r0
 8009930:	4689      	mov	r9, r1
 8009932:	f7f6 fdd1 	bl	80004d8 <__aeabi_dmul>
 8009936:	a36c      	add	r3, pc, #432	; (adr r3, 8009ae8 <atan+0x288>)
 8009938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800993c:	4606      	mov	r6, r0
 800993e:	460f      	mov	r7, r1
 8009940:	f7f6 fdca 	bl	80004d8 <__aeabi_dmul>
 8009944:	a36a      	add	r3, pc, #424	; (adr r3, 8009af0 <atan+0x290>)
 8009946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800994a:	f7f6 fc0f 	bl	800016c <__adddf3>
 800994e:	4632      	mov	r2, r6
 8009950:	463b      	mov	r3, r7
 8009952:	f7f6 fdc1 	bl	80004d8 <__aeabi_dmul>
 8009956:	a368      	add	r3, pc, #416	; (adr r3, 8009af8 <atan+0x298>)
 8009958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800995c:	f7f6 fc06 	bl	800016c <__adddf3>
 8009960:	4632      	mov	r2, r6
 8009962:	463b      	mov	r3, r7
 8009964:	f7f6 fdb8 	bl	80004d8 <__aeabi_dmul>
 8009968:	a365      	add	r3, pc, #404	; (adr r3, 8009b00 <atan+0x2a0>)
 800996a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800996e:	f7f6 fbfd 	bl	800016c <__adddf3>
 8009972:	4632      	mov	r2, r6
 8009974:	463b      	mov	r3, r7
 8009976:	f7f6 fdaf 	bl	80004d8 <__aeabi_dmul>
 800997a:	a363      	add	r3, pc, #396	; (adr r3, 8009b08 <atan+0x2a8>)
 800997c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009980:	f7f6 fbf4 	bl	800016c <__adddf3>
 8009984:	4632      	mov	r2, r6
 8009986:	463b      	mov	r3, r7
 8009988:	f7f6 fda6 	bl	80004d8 <__aeabi_dmul>
 800998c:	a360      	add	r3, pc, #384	; (adr r3, 8009b10 <atan+0x2b0>)
 800998e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009992:	f7f6 fbeb 	bl	800016c <__adddf3>
 8009996:	4642      	mov	r2, r8
 8009998:	464b      	mov	r3, r9
 800999a:	f7f6 fd9d 	bl	80004d8 <__aeabi_dmul>
 800999e:	a35e      	add	r3, pc, #376	; (adr r3, 8009b18 <atan+0x2b8>)
 80099a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a4:	4680      	mov	r8, r0
 80099a6:	4689      	mov	r9, r1
 80099a8:	4630      	mov	r0, r6
 80099aa:	4639      	mov	r1, r7
 80099ac:	f7f6 fd94 	bl	80004d8 <__aeabi_dmul>
 80099b0:	a35b      	add	r3, pc, #364	; (adr r3, 8009b20 <atan+0x2c0>)
 80099b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b6:	f7f6 fbd7 	bl	8000168 <__aeabi_dsub>
 80099ba:	4632      	mov	r2, r6
 80099bc:	463b      	mov	r3, r7
 80099be:	f7f6 fd8b 	bl	80004d8 <__aeabi_dmul>
 80099c2:	a359      	add	r3, pc, #356	; (adr r3, 8009b28 <atan+0x2c8>)
 80099c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c8:	f7f6 fbce 	bl	8000168 <__aeabi_dsub>
 80099cc:	4632      	mov	r2, r6
 80099ce:	463b      	mov	r3, r7
 80099d0:	f7f6 fd82 	bl	80004d8 <__aeabi_dmul>
 80099d4:	a356      	add	r3, pc, #344	; (adr r3, 8009b30 <atan+0x2d0>)
 80099d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099da:	f7f6 fbc5 	bl	8000168 <__aeabi_dsub>
 80099de:	4632      	mov	r2, r6
 80099e0:	463b      	mov	r3, r7
 80099e2:	f7f6 fd79 	bl	80004d8 <__aeabi_dmul>
 80099e6:	a354      	add	r3, pc, #336	; (adr r3, 8009b38 <atan+0x2d8>)
 80099e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ec:	f7f6 fbbc 	bl	8000168 <__aeabi_dsub>
 80099f0:	4632      	mov	r2, r6
 80099f2:	463b      	mov	r3, r7
 80099f4:	f7f6 fd70 	bl	80004d8 <__aeabi_dmul>
 80099f8:	4602      	mov	r2, r0
 80099fa:	460b      	mov	r3, r1
 80099fc:	4640      	mov	r0, r8
 80099fe:	4649      	mov	r1, r9
 8009a00:	f7f6 fbb4 	bl	800016c <__adddf3>
 8009a04:	4622      	mov	r2, r4
 8009a06:	462b      	mov	r3, r5
 8009a08:	f7f6 fd66 	bl	80004d8 <__aeabi_dmul>
 8009a0c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8009a10:	4602      	mov	r2, r0
 8009a12:	460b      	mov	r3, r1
 8009a14:	d144      	bne.n	8009aa0 <atan+0x240>
 8009a16:	4620      	mov	r0, r4
 8009a18:	4629      	mov	r1, r5
 8009a1a:	f7f6 fba5 	bl	8000168 <__aeabi_dsub>
 8009a1e:	e734      	b.n	800988a <atan+0x2a>
 8009a20:	2200      	movs	r2, #0
 8009a22:	4b4c      	ldr	r3, [pc, #304]	; (8009b54 <atan+0x2f4>)
 8009a24:	f7f6 fba0 	bl	8000168 <__aeabi_dsub>
 8009a28:	2200      	movs	r2, #0
 8009a2a:	4606      	mov	r6, r0
 8009a2c:	460f      	mov	r7, r1
 8009a2e:	4620      	mov	r0, r4
 8009a30:	4629      	mov	r1, r5
 8009a32:	4b48      	ldr	r3, [pc, #288]	; (8009b54 <atan+0x2f4>)
 8009a34:	f7f6 fb9a 	bl	800016c <__adddf3>
 8009a38:	4602      	mov	r2, r0
 8009a3a:	460b      	mov	r3, r1
 8009a3c:	4630      	mov	r0, r6
 8009a3e:	4639      	mov	r1, r7
 8009a40:	f7f6 fe74 	bl	800072c <__aeabi_ddiv>
 8009a44:	f04f 0a01 	mov.w	sl, #1
 8009a48:	4604      	mov	r4, r0
 8009a4a:	460d      	mov	r5, r1
 8009a4c:	e767      	b.n	800991e <atan+0xbe>
 8009a4e:	4b43      	ldr	r3, [pc, #268]	; (8009b5c <atan+0x2fc>)
 8009a50:	429e      	cmp	r6, r3
 8009a52:	da1a      	bge.n	8009a8a <atan+0x22a>
 8009a54:	2200      	movs	r2, #0
 8009a56:	4b42      	ldr	r3, [pc, #264]	; (8009b60 <atan+0x300>)
 8009a58:	f7f6 fb86 	bl	8000168 <__aeabi_dsub>
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	4606      	mov	r6, r0
 8009a60:	460f      	mov	r7, r1
 8009a62:	4620      	mov	r0, r4
 8009a64:	4629      	mov	r1, r5
 8009a66:	4b3e      	ldr	r3, [pc, #248]	; (8009b60 <atan+0x300>)
 8009a68:	f7f6 fd36 	bl	80004d8 <__aeabi_dmul>
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	4b39      	ldr	r3, [pc, #228]	; (8009b54 <atan+0x2f4>)
 8009a70:	f7f6 fb7c 	bl	800016c <__adddf3>
 8009a74:	4602      	mov	r2, r0
 8009a76:	460b      	mov	r3, r1
 8009a78:	4630      	mov	r0, r6
 8009a7a:	4639      	mov	r1, r7
 8009a7c:	f7f6 fe56 	bl	800072c <__aeabi_ddiv>
 8009a80:	f04f 0a02 	mov.w	sl, #2
 8009a84:	4604      	mov	r4, r0
 8009a86:	460d      	mov	r5, r1
 8009a88:	e749      	b.n	800991e <atan+0xbe>
 8009a8a:	4602      	mov	r2, r0
 8009a8c:	460b      	mov	r3, r1
 8009a8e:	2000      	movs	r0, #0
 8009a90:	4934      	ldr	r1, [pc, #208]	; (8009b64 <atan+0x304>)
 8009a92:	f7f6 fe4b 	bl	800072c <__aeabi_ddiv>
 8009a96:	f04f 0a03 	mov.w	sl, #3
 8009a9a:	4604      	mov	r4, r0
 8009a9c:	460d      	mov	r5, r1
 8009a9e:	e73e      	b.n	800991e <atan+0xbe>
 8009aa0:	4b31      	ldr	r3, [pc, #196]	; (8009b68 <atan+0x308>)
 8009aa2:	4e32      	ldr	r6, [pc, #200]	; (8009b6c <atan+0x30c>)
 8009aa4:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009aa8:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8009aac:	e9da 2300 	ldrd	r2, r3, [sl]
 8009ab0:	f7f6 fb5a 	bl	8000168 <__aeabi_dsub>
 8009ab4:	4622      	mov	r2, r4
 8009ab6:	462b      	mov	r3, r5
 8009ab8:	f7f6 fb56 	bl	8000168 <__aeabi_dsub>
 8009abc:	4602      	mov	r2, r0
 8009abe:	460b      	mov	r3, r1
 8009ac0:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009ac4:	f7f6 fb50 	bl	8000168 <__aeabi_dsub>
 8009ac8:	f1bb 0f00 	cmp.w	fp, #0
 8009acc:	4604      	mov	r4, r0
 8009ace:	460d      	mov	r5, r1
 8009ad0:	f6bf aee4 	bge.w	800989c <atan+0x3c>
 8009ad4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009ad8:	461d      	mov	r5, r3
 8009ada:	e6df      	b.n	800989c <atan+0x3c>
 8009adc:	4d24      	ldr	r5, [pc, #144]	; (8009b70 <atan+0x310>)
 8009ade:	e6dd      	b.n	800989c <atan+0x3c>
 8009ae0:	8800759c 	.word	0x8800759c
 8009ae4:	7e37e43c 	.word	0x7e37e43c
 8009ae8:	e322da11 	.word	0xe322da11
 8009aec:	3f90ad3a 	.word	0x3f90ad3a
 8009af0:	24760deb 	.word	0x24760deb
 8009af4:	3fa97b4b 	.word	0x3fa97b4b
 8009af8:	a0d03d51 	.word	0xa0d03d51
 8009afc:	3fb10d66 	.word	0x3fb10d66
 8009b00:	c54c206e 	.word	0xc54c206e
 8009b04:	3fb745cd 	.word	0x3fb745cd
 8009b08:	920083ff 	.word	0x920083ff
 8009b0c:	3fc24924 	.word	0x3fc24924
 8009b10:	5555550d 	.word	0x5555550d
 8009b14:	3fd55555 	.word	0x3fd55555
 8009b18:	2c6a6c2f 	.word	0x2c6a6c2f
 8009b1c:	bfa2b444 	.word	0xbfa2b444
 8009b20:	52defd9a 	.word	0x52defd9a
 8009b24:	3fadde2d 	.word	0x3fadde2d
 8009b28:	af749a6d 	.word	0xaf749a6d
 8009b2c:	3fb3b0f2 	.word	0x3fb3b0f2
 8009b30:	fe231671 	.word	0xfe231671
 8009b34:	3fbc71c6 	.word	0x3fbc71c6
 8009b38:	9998ebc4 	.word	0x9998ebc4
 8009b3c:	3fc99999 	.word	0x3fc99999
 8009b40:	440fffff 	.word	0x440fffff
 8009b44:	7ff00000 	.word	0x7ff00000
 8009b48:	54442d18 	.word	0x54442d18
 8009b4c:	bff921fb 	.word	0xbff921fb
 8009b50:	3fdbffff 	.word	0x3fdbffff
 8009b54:	3ff00000 	.word	0x3ff00000
 8009b58:	3ff2ffff 	.word	0x3ff2ffff
 8009b5c:	40038000 	.word	0x40038000
 8009b60:	3ff80000 	.word	0x3ff80000
 8009b64:	bff00000 	.word	0xbff00000
 8009b68:	0800bed0 	.word	0x0800bed0
 8009b6c:	0800beb0 	.word	0x0800beb0
 8009b70:	3ff921fb 	.word	0x3ff921fb

08009b74 <fabs>:
 8009b74:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009b78:	4770      	bx	lr
 8009b7a:	0000      	movs	r0, r0
 8009b7c:	0000      	movs	r0, r0
	...

08009b80 <floor>:
 8009b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b84:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8009b88:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8009b8c:	2e13      	cmp	r6, #19
 8009b8e:	4602      	mov	r2, r0
 8009b90:	460b      	mov	r3, r1
 8009b92:	4607      	mov	r7, r0
 8009b94:	460c      	mov	r4, r1
 8009b96:	4605      	mov	r5, r0
 8009b98:	dc34      	bgt.n	8009c04 <floor+0x84>
 8009b9a:	2e00      	cmp	r6, #0
 8009b9c:	da15      	bge.n	8009bca <floor+0x4a>
 8009b9e:	a334      	add	r3, pc, #208	; (adr r3, 8009c70 <floor+0xf0>)
 8009ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba4:	f7f6 fae2 	bl	800016c <__adddf3>
 8009ba8:	2200      	movs	r2, #0
 8009baa:	2300      	movs	r3, #0
 8009bac:	f7f6 ff24 	bl	80009f8 <__aeabi_dcmpgt>
 8009bb0:	b140      	cbz	r0, 8009bc4 <floor+0x44>
 8009bb2:	2c00      	cmp	r4, #0
 8009bb4:	da59      	bge.n	8009c6a <floor+0xea>
 8009bb6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8009bba:	ea57 0503 	orrs.w	r5, r7, r3
 8009bbe:	d001      	beq.n	8009bc4 <floor+0x44>
 8009bc0:	2500      	movs	r5, #0
 8009bc2:	4c2d      	ldr	r4, [pc, #180]	; (8009c78 <floor+0xf8>)
 8009bc4:	4623      	mov	r3, r4
 8009bc6:	462f      	mov	r7, r5
 8009bc8:	e025      	b.n	8009c16 <floor+0x96>
 8009bca:	4a2c      	ldr	r2, [pc, #176]	; (8009c7c <floor+0xfc>)
 8009bcc:	fa42 f806 	asr.w	r8, r2, r6
 8009bd0:	ea01 0208 	and.w	r2, r1, r8
 8009bd4:	4302      	orrs	r2, r0
 8009bd6:	d01e      	beq.n	8009c16 <floor+0x96>
 8009bd8:	a325      	add	r3, pc, #148	; (adr r3, 8009c70 <floor+0xf0>)
 8009bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bde:	f7f6 fac5 	bl	800016c <__adddf3>
 8009be2:	2200      	movs	r2, #0
 8009be4:	2300      	movs	r3, #0
 8009be6:	f7f6 ff07 	bl	80009f8 <__aeabi_dcmpgt>
 8009bea:	2800      	cmp	r0, #0
 8009bec:	d0ea      	beq.n	8009bc4 <floor+0x44>
 8009bee:	2c00      	cmp	r4, #0
 8009bf0:	bfbe      	ittt	lt
 8009bf2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009bf6:	fa43 f606 	asrlt.w	r6, r3, r6
 8009bfa:	19a4      	addlt	r4, r4, r6
 8009bfc:	2500      	movs	r5, #0
 8009bfe:	ea24 0408 	bic.w	r4, r4, r8
 8009c02:	e7df      	b.n	8009bc4 <floor+0x44>
 8009c04:	2e33      	cmp	r6, #51	; 0x33
 8009c06:	dd0a      	ble.n	8009c1e <floor+0x9e>
 8009c08:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009c0c:	d103      	bne.n	8009c16 <floor+0x96>
 8009c0e:	f7f6 faad 	bl	800016c <__adddf3>
 8009c12:	4607      	mov	r7, r0
 8009c14:	460b      	mov	r3, r1
 8009c16:	4638      	mov	r0, r7
 8009c18:	4619      	mov	r1, r3
 8009c1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009c22:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8009c26:	fa22 f808 	lsr.w	r8, r2, r8
 8009c2a:	ea18 0f00 	tst.w	r8, r0
 8009c2e:	d0f2      	beq.n	8009c16 <floor+0x96>
 8009c30:	a30f      	add	r3, pc, #60	; (adr r3, 8009c70 <floor+0xf0>)
 8009c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c36:	f7f6 fa99 	bl	800016c <__adddf3>
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	f7f6 fedb 	bl	80009f8 <__aeabi_dcmpgt>
 8009c42:	2800      	cmp	r0, #0
 8009c44:	d0be      	beq.n	8009bc4 <floor+0x44>
 8009c46:	2c00      	cmp	r4, #0
 8009c48:	da02      	bge.n	8009c50 <floor+0xd0>
 8009c4a:	2e14      	cmp	r6, #20
 8009c4c:	d103      	bne.n	8009c56 <floor+0xd6>
 8009c4e:	3401      	adds	r4, #1
 8009c50:	ea25 0508 	bic.w	r5, r5, r8
 8009c54:	e7b6      	b.n	8009bc4 <floor+0x44>
 8009c56:	2301      	movs	r3, #1
 8009c58:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8009c5c:	fa03 f606 	lsl.w	r6, r3, r6
 8009c60:	4435      	add	r5, r6
 8009c62:	42bd      	cmp	r5, r7
 8009c64:	bf38      	it	cc
 8009c66:	18e4      	addcc	r4, r4, r3
 8009c68:	e7f2      	b.n	8009c50 <floor+0xd0>
 8009c6a:	2500      	movs	r5, #0
 8009c6c:	462c      	mov	r4, r5
 8009c6e:	e7a9      	b.n	8009bc4 <floor+0x44>
 8009c70:	8800759c 	.word	0x8800759c
 8009c74:	7e37e43c 	.word	0x7e37e43c
 8009c78:	bff00000 	.word	0xbff00000
 8009c7c:	000fffff 	.word	0x000fffff

08009c80 <scalbn>:
 8009c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c82:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8009c86:	4604      	mov	r4, r0
 8009c88:	460d      	mov	r5, r1
 8009c8a:	4617      	mov	r7, r2
 8009c8c:	460b      	mov	r3, r1
 8009c8e:	b996      	cbnz	r6, 8009cb6 <scalbn+0x36>
 8009c90:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009c94:	4303      	orrs	r3, r0
 8009c96:	d039      	beq.n	8009d0c <scalbn+0x8c>
 8009c98:	4b35      	ldr	r3, [pc, #212]	; (8009d70 <scalbn+0xf0>)
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	f7f6 fc1c 	bl	80004d8 <__aeabi_dmul>
 8009ca0:	4b34      	ldr	r3, [pc, #208]	; (8009d74 <scalbn+0xf4>)
 8009ca2:	4604      	mov	r4, r0
 8009ca4:	429f      	cmp	r7, r3
 8009ca6:	460d      	mov	r5, r1
 8009ca8:	da0f      	bge.n	8009cca <scalbn+0x4a>
 8009caa:	a32d      	add	r3, pc, #180	; (adr r3, 8009d60 <scalbn+0xe0>)
 8009cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb0:	f7f6 fc12 	bl	80004d8 <__aeabi_dmul>
 8009cb4:	e006      	b.n	8009cc4 <scalbn+0x44>
 8009cb6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8009cba:	4296      	cmp	r6, r2
 8009cbc:	d10a      	bne.n	8009cd4 <scalbn+0x54>
 8009cbe:	4602      	mov	r2, r0
 8009cc0:	f7f6 fa54 	bl	800016c <__adddf3>
 8009cc4:	4604      	mov	r4, r0
 8009cc6:	460d      	mov	r5, r1
 8009cc8:	e020      	b.n	8009d0c <scalbn+0x8c>
 8009cca:	460b      	mov	r3, r1
 8009ccc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8009cd0:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8009cd4:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8009cd8:	19b9      	adds	r1, r7, r6
 8009cda:	4291      	cmp	r1, r2
 8009cdc:	dd0e      	ble.n	8009cfc <scalbn+0x7c>
 8009cde:	a322      	add	r3, pc, #136	; (adr r3, 8009d68 <scalbn+0xe8>)
 8009ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ce4:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8009ce8:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8009cec:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8009cf0:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8009cf4:	4820      	ldr	r0, [pc, #128]	; (8009d78 <scalbn+0xf8>)
 8009cf6:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8009cfa:	e7d9      	b.n	8009cb0 <scalbn+0x30>
 8009cfc:	2900      	cmp	r1, #0
 8009cfe:	dd08      	ble.n	8009d12 <scalbn+0x92>
 8009d00:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009d04:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009d08:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8009d0c:	4620      	mov	r0, r4
 8009d0e:	4629      	mov	r1, r5
 8009d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d12:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8009d16:	da16      	bge.n	8009d46 <scalbn+0xc6>
 8009d18:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009d1c:	429f      	cmp	r7, r3
 8009d1e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8009d22:	dd08      	ble.n	8009d36 <scalbn+0xb6>
 8009d24:	4c15      	ldr	r4, [pc, #84]	; (8009d7c <scalbn+0xfc>)
 8009d26:	4814      	ldr	r0, [pc, #80]	; (8009d78 <scalbn+0xf8>)
 8009d28:	f363 74df 	bfi	r4, r3, #31, #1
 8009d2c:	a30e      	add	r3, pc, #56	; (adr r3, 8009d68 <scalbn+0xe8>)
 8009d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d32:	4621      	mov	r1, r4
 8009d34:	e7bc      	b.n	8009cb0 <scalbn+0x30>
 8009d36:	4c12      	ldr	r4, [pc, #72]	; (8009d80 <scalbn+0x100>)
 8009d38:	4812      	ldr	r0, [pc, #72]	; (8009d84 <scalbn+0x104>)
 8009d3a:	f363 74df 	bfi	r4, r3, #31, #1
 8009d3e:	a308      	add	r3, pc, #32	; (adr r3, 8009d60 <scalbn+0xe0>)
 8009d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d44:	e7f5      	b.n	8009d32 <scalbn+0xb2>
 8009d46:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009d4a:	3136      	adds	r1, #54	; 0x36
 8009d4c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009d50:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8009d54:	4620      	mov	r0, r4
 8009d56:	4629      	mov	r1, r5
 8009d58:	2200      	movs	r2, #0
 8009d5a:	4b0b      	ldr	r3, [pc, #44]	; (8009d88 <scalbn+0x108>)
 8009d5c:	e7a8      	b.n	8009cb0 <scalbn+0x30>
 8009d5e:	bf00      	nop
 8009d60:	c2f8f359 	.word	0xc2f8f359
 8009d64:	01a56e1f 	.word	0x01a56e1f
 8009d68:	8800759c 	.word	0x8800759c
 8009d6c:	7e37e43c 	.word	0x7e37e43c
 8009d70:	43500000 	.word	0x43500000
 8009d74:	ffff3cb0 	.word	0xffff3cb0
 8009d78:	8800759c 	.word	0x8800759c
 8009d7c:	7e37e43c 	.word	0x7e37e43c
 8009d80:	01a56e1f 	.word	0x01a56e1f
 8009d84:	c2f8f359 	.word	0xc2f8f359
 8009d88:	3c900000 	.word	0x3c900000

08009d8c <_init>:
 8009d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d8e:	bf00      	nop
 8009d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d92:	bc08      	pop	{r3}
 8009d94:	469e      	mov	lr, r3
 8009d96:	4770      	bx	lr

08009d98 <_fini>:
 8009d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d9a:	bf00      	nop
 8009d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d9e:	bc08      	pop	{r3}
 8009da0:	469e      	mov	lr, r3
 8009da2:	4770      	bx	lr

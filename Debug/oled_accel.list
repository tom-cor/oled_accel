
oled_accel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b5c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002148  08009c70  08009c70  00019c70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bdb8  0800bdb8  00020278  2**0
                  CONTENTS
  4 .ARM          00000000  0800bdb8  0800bdb8  00020278  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bdb8  0800bdb8  00020278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bdb8  0800bdb8  0001bdb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bdbc  0800bdbc  0001bdbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000278  20000000  0800bdc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000086c  20000278  0800c038  00020278  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000ae4  0800c038  00020ae4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001215f  00000000  00000000  000202a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002833  00000000  00000000  00032400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f8  00000000  00000000  00034c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe0  00000000  00000000  00035d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019cd2  00000000  00000000  00036d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001277a  00000000  00000000  000509e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093a41  00000000  00000000  0006315c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f6b9d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ca8  00000000  00000000  000f6bf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000278 	.word	0x20000278
 800012c:	00000000 	.word	0x00000000
 8000130:	08009c54 	.word	0x08009c54

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000027c 	.word	0x2000027c
 800014c:	08009c54 	.word	0x08009c54

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop
 8001024:	0000      	movs	r0, r0
	...

08001028 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800102e:	f001 f8c5 	bl	80021bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001032:	f000 f8c5 	bl	80011c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001036:	f000 fa7f 	bl	8001538 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800103a:	f000 fa53 	bl	80014e4 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800103e:	f000 f9b5 	bl	80013ac <MX_TIM2_Init>
  MX_ADC1_Init();
 8001042:	f000 f919 	bl	8001278 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001046:	f000 f955 	bl	80012f4 <MX_I2C1_Init>
  MX_I2C2_Init();
 800104a:	f000 f981 	bl	8001350 <MX_I2C2_Init>
  MX_TIM3_Init();
 800104e:	f000 f9fb 	bl	8001448 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */




  HAL_I2C_Mem_Write(&hi2c1, (mpu6050_adr<<1) | 0, reg_pwrmngt1, 1, 0x00, 1, 100);
 8001052:	4b4b      	ldr	r3, [pc, #300]	; (8001180 <main+0x158>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	b29b      	uxth	r3, r3
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	b299      	uxth	r1, r3
 800105c:	4b49      	ldr	r3, [pc, #292]	; (8001184 <main+0x15c>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	b29a      	uxth	r2, r3
 8001062:	2364      	movs	r3, #100	; 0x64
 8001064:	9302      	str	r3, [sp, #8]
 8001066:	2301      	movs	r3, #1
 8001068:	9301      	str	r3, [sp, #4]
 800106a:	2300      	movs	r3, #0
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	2301      	movs	r3, #1
 8001070:	4845      	ldr	r0, [pc, #276]	; (8001188 <main+0x160>)
 8001072:	f001 ff21 	bl	8002eb8 <HAL_I2C_Mem_Write>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001076:	2201      	movs	r2, #1
 8001078:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800107c:	4843      	ldr	r0, [pc, #268]	; (800118c <main+0x164>)
 800107e:	f001 fdbf 	bl	8002c00 <HAL_GPIO_WritePin>

  ssd1306_Init();
 8001082:	f004 f85d 	bl	8005140 <ssd1306_Init>

  FIRFilter_Init(&az_filter);
 8001086:	4842      	ldr	r0, [pc, #264]	; (8001190 <main+0x168>)
 8001088:	f003 ffa6 	bl	8004fd8 <FIRFilter_Init>
  FIRFilter_Init(&angle_yx_filter);
 800108c:	4841      	ldr	r0, [pc, #260]	; (8001194 <main+0x16c>)
 800108e:	f003 ffa3 	bl	8004fd8 <FIRFilter_Init>

  HAL_TIM_Base_Start_IT(&htim3);
 8001092:	4841      	ldr	r0, [pc, #260]	; (8001198 <main+0x170>)
 8001094:	f003 faec 	bl	8004670 <HAL_TIM_Base_Start_IT>

  ssd1306_Fill(Black);
 8001098:	2000      	movs	r0, #0
 800109a:	f004 f8bb 	bl	8005214 <ssd1306_Fill>
  ssd1306_SetCursor(1, 1);
 800109e:	2101      	movs	r1, #1
 80010a0:	2001      	movs	r0, #1
 80010a2:	f004 fa1d 	bl	80054e0 <ssd1306_SetCursor>
  ssd1306_WriteString("Proyecto final", Font_7x10, White);
 80010a6:	4a3d      	ldr	r2, [pc, #244]	; (800119c <main+0x174>)
 80010a8:	2301      	movs	r3, #1
 80010aa:	ca06      	ldmia	r2, {r1, r2}
 80010ac:	483c      	ldr	r0, [pc, #240]	; (80011a0 <main+0x178>)
 80010ae:	f004 f9f1 	bl	8005494 <ssd1306_WriteString>
  ssd1306_SetCursor(1, 15);
 80010b2:	210f      	movs	r1, #15
 80010b4:	2001      	movs	r0, #1
 80010b6:	f004 fa13 	bl	80054e0 <ssd1306_SetCursor>
  ssd1306_WriteString("Sistemas Embebidos", Font_7x10, White);
 80010ba:	4a38      	ldr	r2, [pc, #224]	; (800119c <main+0x174>)
 80010bc:	2301      	movs	r3, #1
 80010be:	ca06      	ldmia	r2, {r1, r2}
 80010c0:	4838      	ldr	r0, [pc, #224]	; (80011a4 <main+0x17c>)
 80010c2:	f004 f9e7 	bl	8005494 <ssd1306_WriteString>
  ssd1306_SetCursor(1, 29);
 80010c6:	211d      	movs	r1, #29
 80010c8:	2001      	movs	r0, #1
 80010ca:	f004 fa09 	bl	80054e0 <ssd1306_SetCursor>
  ssd1306_WriteString("Tomas Cornaglia", Font_7x10, White);
 80010ce:	4a33      	ldr	r2, [pc, #204]	; (800119c <main+0x174>)
 80010d0:	2301      	movs	r3, #1
 80010d2:	ca06      	ldmia	r2, {r1, r2}
 80010d4:	4834      	ldr	r0, [pc, #208]	; (80011a8 <main+0x180>)
 80010d6:	f004 f9dd 	bl	8005494 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 80010da:	f004 f8bd 	bl	8005258 <ssd1306_UpdateScreen>

  HAL_Delay(3000);
 80010de:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80010e2:	f001 f8cd 	bl	8002280 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	switch(display_mode)
 80010e6:	4b31      	ldr	r3, [pc, #196]	; (80011ac <main+0x184>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d002      	beq.n	80010f4 <main+0xcc>
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d008      	beq.n	8001104 <main+0xdc>
 80010f2:	e010      	b.n	8001116 <main+0xee>
	{
		case 1:
			bubbleLevel_1d(angle_yx);
 80010f4:	4b2e      	ldr	r3, [pc, #184]	; (80011b0 <main+0x188>)
 80010f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fa:	4610      	mov	r0, r2
 80010fc:	4619      	mov	r1, r3
 80010fe:	f000 fc03 	bl	8001908 <bubbleLevel_1d>
			break;
 8001102:	e008      	b.n	8001116 <main+0xee>

		case 2:
			bubbleLevel_2d(angle_yz, angle_xz);
 8001104:	4b2b      	ldr	r3, [pc, #172]	; (80011b4 <main+0x18c>)
 8001106:	e9d3 0100 	ldrd	r0, r1, [r3]
 800110a:	4b2b      	ldr	r3, [pc, #172]	; (80011b8 <main+0x190>)
 800110c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001110:	f000 fcca 	bl	8001aa8 <bubbleLevel_2d>
			break;
 8001114:	bf00      	nop
	}

	if( (az_filter.out < 0.2) && (display_mode != 1)  )	// Revisar como evaluar que el timer ya está corriendo, cosa de no iniciarlo más de una vez.
 8001116:	4b1e      	ldr	r3, [pc, #120]	; (8001190 <main+0x168>)
 8001118:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff f983 	bl	8000428 <__aeabi_f2d>
 8001122:	a313      	add	r3, pc, #76	; (adr r3, 8001170 <main+0x148>)
 8001124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001128:	f7ff fc48 	bl	80009bc <__aeabi_dcmplt>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d006      	beq.n	8001140 <main+0x118>
 8001132:	4b1e      	ldr	r3, [pc, #120]	; (80011ac <main+0x184>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d002      	beq.n	8001140 <main+0x118>
		HAL_TIM_Base_Start_IT(&htim2);
 800113a:	4820      	ldr	r0, [pc, #128]	; (80011bc <main+0x194>)
 800113c:	f003 fa98 	bl	8004670 <HAL_TIM_Base_Start_IT>

	if( (az_filter.out > 0.8) && (display_mode != 2) )
 8001140:	4b13      	ldr	r3, [pc, #76]	; (8001190 <main+0x168>)
 8001142:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff f96e 	bl	8000428 <__aeabi_f2d>
 800114c:	a30a      	add	r3, pc, #40	; (adr r3, 8001178 <main+0x150>)
 800114e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001152:	f7ff fc51 	bl	80009f8 <__aeabi_dcmpgt>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d006      	beq.n	800116a <main+0x142>
 800115c:	4b13      	ldr	r3, [pc, #76]	; (80011ac <main+0x184>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2b02      	cmp	r3, #2
 8001162:	d0c0      	beq.n	80010e6 <main+0xbe>
		HAL_TIM_Base_Start_IT(&htim2);
 8001164:	4815      	ldr	r0, [pc, #84]	; (80011bc <main+0x194>)
 8001166:	f003 fa83 	bl	8004670 <HAL_TIM_Base_Start_IT>
	switch(display_mode)
 800116a:	e7bc      	b.n	80010e6 <main+0xbe>
 800116c:	f3af 8000 	nop.w
 8001170:	9999999a 	.word	0x9999999a
 8001174:	3fc99999 	.word	0x3fc99999
 8001178:	9999999a 	.word	0x9999999a
 800117c:	3fe99999 	.word	0x3fe99999
 8001180:	20000001 	.word	0x20000001
 8001184:	20000002 	.word	0x20000002
 8001188:	20000780 	.word	0x20000780
 800118c:	40011000 	.word	0x40011000
 8001190:	20000978 	.word	0x20000978
 8001194:	200006f8 	.word	0x200006f8
 8001198:	200008c0 	.word	0x200008c0
 800119c:	20000094 	.word	0x20000094
 80011a0:	08009c70 	.word	0x08009c70
 80011a4:	08009c80 	.word	0x08009c80
 80011a8:	08009c94 	.word	0x08009c94
 80011ac:	20000000 	.word	0x20000000
 80011b0:	20000298 	.word	0x20000298
 80011b4:	200002a8 	.word	0x200002a8
 80011b8:	200002a0 	.word	0x200002a0
 80011bc:	20000a00 	.word	0x20000a00

080011c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b094      	sub	sp, #80	; 0x50
 80011c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011ca:	2228      	movs	r2, #40	; 0x28
 80011cc:	2100      	movs	r1, #0
 80011ce:	4618      	mov	r0, r3
 80011d0:	f004 fb30 	bl	8005834 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d4:	f107 0314 	add.w	r3, r7, #20
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011e4:	1d3b      	adds	r3, r7, #4
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]
 80011ee:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011f0:	2301      	movs	r3, #1
 80011f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80011fa:	2300      	movs	r3, #0
 80011fc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011fe:	2301      	movs	r3, #1
 8001200:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001202:	2302      	movs	r3, #2
 8001204:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001206:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800120a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800120c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001210:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001212:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001216:	4618      	mov	r0, r3
 8001218:	f002 fd0a 	bl	8003c30 <HAL_RCC_OscConfig>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001222:	f000 fd37 	bl	8001c94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001226:	230f      	movs	r3, #15
 8001228:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800122a:	2302      	movs	r3, #2
 800122c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800122e:	2300      	movs	r3, #0
 8001230:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001232:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001236:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001238:	2300      	movs	r3, #0
 800123a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	2102      	movs	r1, #2
 8001242:	4618      	mov	r0, r3
 8001244:	f002 ff74 	bl	8004130 <HAL_RCC_ClockConfig>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800124e:	f000 fd21 	bl	8001c94 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001252:	2302      	movs	r3, #2
 8001254:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001256:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800125a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800125c:	1d3b      	adds	r3, r7, #4
 800125e:	4618      	mov	r0, r3
 8001260:	f003 f900 	bl	8004464 <HAL_RCCEx_PeriphCLKConfig>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800126a:	f000 fd13 	bl	8001c94 <Error_Handler>
  }
}
 800126e:	bf00      	nop
 8001270:	3750      	adds	r7, #80	; 0x50
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800127e:	1d3b      	adds	r3, r7, #4
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001288:	4b18      	ldr	r3, [pc, #96]	; (80012ec <MX_ADC1_Init+0x74>)
 800128a:	4a19      	ldr	r2, [pc, #100]	; (80012f0 <MX_ADC1_Init+0x78>)
 800128c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800128e:	4b17      	ldr	r3, [pc, #92]	; (80012ec <MX_ADC1_Init+0x74>)
 8001290:	2200      	movs	r2, #0
 8001292:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001294:	4b15      	ldr	r3, [pc, #84]	; (80012ec <MX_ADC1_Init+0x74>)
 8001296:	2200      	movs	r2, #0
 8001298:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800129a:	4b14      	ldr	r3, [pc, #80]	; (80012ec <MX_ADC1_Init+0x74>)
 800129c:	2200      	movs	r2, #0
 800129e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012a0:	4b12      	ldr	r3, [pc, #72]	; (80012ec <MX_ADC1_Init+0x74>)
 80012a2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80012a6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012a8:	4b10      	ldr	r3, [pc, #64]	; (80012ec <MX_ADC1_Init+0x74>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80012ae:	4b0f      	ldr	r3, [pc, #60]	; (80012ec <MX_ADC1_Init+0x74>)
 80012b0:	2201      	movs	r2, #1
 80012b2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012b4:	480d      	ldr	r0, [pc, #52]	; (80012ec <MX_ADC1_Init+0x74>)
 80012b6:	f001 f807 	bl	80022c8 <HAL_ADC_Init>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80012c0:	f000 fce8 	bl	8001c94 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80012c4:	2307      	movs	r3, #7
 80012c6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012c8:	2301      	movs	r3, #1
 80012ca:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80012cc:	2300      	movs	r3, #0
 80012ce:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012d0:	1d3b      	adds	r3, r7, #4
 80012d2:	4619      	mov	r1, r3
 80012d4:	4805      	ldr	r0, [pc, #20]	; (80012ec <MX_ADC1_Init+0x74>)
 80012d6:	f001 f8cf 	bl	8002478 <HAL_ADC_ConfigChannel>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80012e0:	f000 fcd8 	bl	8001c94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012e4:	bf00      	nop
 80012e6:	3710      	adds	r7, #16
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20000908 	.word	0x20000908
 80012f0:	40012400 	.word	0x40012400

080012f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012f8:	4b12      	ldr	r3, [pc, #72]	; (8001344 <MX_I2C1_Init+0x50>)
 80012fa:	4a13      	ldr	r2, [pc, #76]	; (8001348 <MX_I2C1_Init+0x54>)
 80012fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012fe:	4b11      	ldr	r3, [pc, #68]	; (8001344 <MX_I2C1_Init+0x50>)
 8001300:	4a12      	ldr	r2, [pc, #72]	; (800134c <MX_I2C1_Init+0x58>)
 8001302:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001304:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <MX_I2C1_Init+0x50>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800130a:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <MX_I2C1_Init+0x50>)
 800130c:	2200      	movs	r2, #0
 800130e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001310:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <MX_I2C1_Init+0x50>)
 8001312:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001316:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001318:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <MX_I2C1_Init+0x50>)
 800131a:	2200      	movs	r2, #0
 800131c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800131e:	4b09      	ldr	r3, [pc, #36]	; (8001344 <MX_I2C1_Init+0x50>)
 8001320:	2200      	movs	r2, #0
 8001322:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001324:	4b07      	ldr	r3, [pc, #28]	; (8001344 <MX_I2C1_Init+0x50>)
 8001326:	2200      	movs	r2, #0
 8001328:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800132a:	4b06      	ldr	r3, [pc, #24]	; (8001344 <MX_I2C1_Init+0x50>)
 800132c:	2200      	movs	r2, #0
 800132e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001330:	4804      	ldr	r0, [pc, #16]	; (8001344 <MX_I2C1_Init+0x50>)
 8001332:	f001 fc7d 	bl	8002c30 <HAL_I2C_Init>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800133c:	f000 fcaa 	bl	8001c94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001340:	bf00      	nop
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20000780 	.word	0x20000780
 8001348:	40005400 	.word	0x40005400
 800134c:	000186a0 	.word	0x000186a0

08001350 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001354:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <MX_I2C2_Init+0x50>)
 8001356:	4a13      	ldr	r2, [pc, #76]	; (80013a4 <MX_I2C2_Init+0x54>)
 8001358:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800135a:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <MX_I2C2_Init+0x50>)
 800135c:	4a12      	ldr	r2, [pc, #72]	; (80013a8 <MX_I2C2_Init+0x58>)
 800135e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001360:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <MX_I2C2_Init+0x50>)
 8001362:	2200      	movs	r2, #0
 8001364:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001366:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <MX_I2C2_Init+0x50>)
 8001368:	2200      	movs	r2, #0
 800136a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800136c:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <MX_I2C2_Init+0x50>)
 800136e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001372:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001374:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <MX_I2C2_Init+0x50>)
 8001376:	2200      	movs	r2, #0
 8001378:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800137a:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <MX_I2C2_Init+0x50>)
 800137c:	2200      	movs	r2, #0
 800137e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001380:	4b07      	ldr	r3, [pc, #28]	; (80013a0 <MX_I2C2_Init+0x50>)
 8001382:	2200      	movs	r2, #0
 8001384:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001386:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <MX_I2C2_Init+0x50>)
 8001388:	2200      	movs	r2, #0
 800138a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800138c:	4804      	ldr	r0, [pc, #16]	; (80013a0 <MX_I2C2_Init+0x50>)
 800138e:	f001 fc4f 	bl	8002c30 <HAL_I2C_Init>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001398:	f000 fc7c 	bl	8001c94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800139c:	bf00      	nop
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	2000085c 	.word	0x2000085c
 80013a4:	40005800 	.word	0x40005800
 80013a8:	000186a0 	.word	0x000186a0

080013ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013b2:	f107 0308 	add.w	r3, r7, #8
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c0:	463b      	mov	r3, r7
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013c8:	4b1e      	ldr	r3, [pc, #120]	; (8001444 <MX_TIM2_Init+0x98>)
 80013ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000;
 80013d0:	4b1c      	ldr	r3, [pc, #112]	; (8001444 <MX_TIM2_Init+0x98>)
 80013d2:	f242 7210 	movw	r2, #10000	; 0x2710
 80013d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d8:	4b1a      	ldr	r3, [pc, #104]	; (8001444 <MX_TIM2_Init+0x98>)
 80013da:	2200      	movs	r2, #0
 80013dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7200;
 80013de:	4b19      	ldr	r3, [pc, #100]	; (8001444 <MX_TIM2_Init+0x98>)
 80013e0:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 80013e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e6:	4b17      	ldr	r3, [pc, #92]	; (8001444 <MX_TIM2_Init+0x98>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013ec:	4b15      	ldr	r3, [pc, #84]	; (8001444 <MX_TIM2_Init+0x98>)
 80013ee:	2280      	movs	r2, #128	; 0x80
 80013f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013f2:	4814      	ldr	r0, [pc, #80]	; (8001444 <MX_TIM2_Init+0x98>)
 80013f4:	f003 f8ec 	bl	80045d0 <HAL_TIM_Base_Init>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80013fe:	f000 fc49 	bl	8001c94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001402:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001406:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001408:	f107 0308 	add.w	r3, r7, #8
 800140c:	4619      	mov	r1, r3
 800140e:	480d      	ldr	r0, [pc, #52]	; (8001444 <MX_TIM2_Init+0x98>)
 8001410:	f003 fab6 	bl	8004980 <HAL_TIM_ConfigClockSource>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800141a:	f000 fc3b 	bl	8001c94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800141e:	2300      	movs	r3, #0
 8001420:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001422:	2300      	movs	r3, #0
 8001424:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001426:	463b      	mov	r3, r7
 8001428:	4619      	mov	r1, r3
 800142a:	4806      	ldr	r0, [pc, #24]	; (8001444 <MX_TIM2_Init+0x98>)
 800142c:	f003 fc88 	bl	8004d40 <HAL_TIMEx_MasterConfigSynchronization>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001436:	f000 fc2d 	bl	8001c94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800143a:	bf00      	nop
 800143c:	3718      	adds	r7, #24
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20000a00 	.word	0x20000a00

08001448 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800144e:	f107 0308 	add.w	r3, r7, #8
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	605a      	str	r2, [r3, #4]
 8001458:	609a      	str	r2, [r3, #8]
 800145a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800145c:	463b      	mov	r3, r7
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001464:	4b1d      	ldr	r3, [pc, #116]	; (80014dc <MX_TIM3_Init+0x94>)
 8001466:	4a1e      	ldr	r2, [pc, #120]	; (80014e0 <MX_TIM3_Init+0x98>)
 8001468:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 720;
 800146a:	4b1c      	ldr	r3, [pc, #112]	; (80014dc <MX_TIM3_Init+0x94>)
 800146c:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8001470:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001472:	4b1a      	ldr	r3, [pc, #104]	; (80014dc <MX_TIM3_Init+0x94>)
 8001474:	2200      	movs	r2, #0
 8001476:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500;
 8001478:	4b18      	ldr	r3, [pc, #96]	; (80014dc <MX_TIM3_Init+0x94>)
 800147a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800147e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001480:	4b16      	ldr	r3, [pc, #88]	; (80014dc <MX_TIM3_Init+0x94>)
 8001482:	2200      	movs	r2, #0
 8001484:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001486:	4b15      	ldr	r3, [pc, #84]	; (80014dc <MX_TIM3_Init+0x94>)
 8001488:	2200      	movs	r2, #0
 800148a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800148c:	4813      	ldr	r0, [pc, #76]	; (80014dc <MX_TIM3_Init+0x94>)
 800148e:	f003 f89f 	bl	80045d0 <HAL_TIM_Base_Init>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001498:	f000 fbfc 	bl	8001c94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800149c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014a2:	f107 0308 	add.w	r3, r7, #8
 80014a6:	4619      	mov	r1, r3
 80014a8:	480c      	ldr	r0, [pc, #48]	; (80014dc <MX_TIM3_Init+0x94>)
 80014aa:	f003 fa69 	bl	8004980 <HAL_TIM_ConfigClockSource>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80014b4:	f000 fbee 	bl	8001c94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014b8:	2300      	movs	r3, #0
 80014ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014bc:	2300      	movs	r3, #0
 80014be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014c0:	463b      	mov	r3, r7
 80014c2:	4619      	mov	r1, r3
 80014c4:	4805      	ldr	r0, [pc, #20]	; (80014dc <MX_TIM3_Init+0x94>)
 80014c6:	f003 fc3b 	bl	8004d40 <HAL_TIMEx_MasterConfigSynchronization>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80014d0:	f000 fbe0 	bl	8001c94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014d4:	bf00      	nop
 80014d6:	3718      	adds	r7, #24
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	200008c0 	.word	0x200008c0
 80014e0:	40000400 	.word	0x40000400

080014e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014e8:	4b11      	ldr	r3, [pc, #68]	; (8001530 <MX_USART1_UART_Init+0x4c>)
 80014ea:	4a12      	ldr	r2, [pc, #72]	; (8001534 <MX_USART1_UART_Init+0x50>)
 80014ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80014ee:	4b10      	ldr	r3, [pc, #64]	; (8001530 <MX_USART1_UART_Init+0x4c>)
 80014f0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80014f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014f6:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <MX_USART1_UART_Init+0x4c>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014fc:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <MX_USART1_UART_Init+0x4c>)
 80014fe:	2200      	movs	r2, #0
 8001500:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001502:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <MX_USART1_UART_Init+0x4c>)
 8001504:	2200      	movs	r2, #0
 8001506:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001508:	4b09      	ldr	r3, [pc, #36]	; (8001530 <MX_USART1_UART_Init+0x4c>)
 800150a:	220c      	movs	r2, #12
 800150c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800150e:	4b08      	ldr	r3, [pc, #32]	; (8001530 <MX_USART1_UART_Init+0x4c>)
 8001510:	2200      	movs	r2, #0
 8001512:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001514:	4b06      	ldr	r3, [pc, #24]	; (8001530 <MX_USART1_UART_Init+0x4c>)
 8001516:	2200      	movs	r2, #0
 8001518:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800151a:	4805      	ldr	r0, [pc, #20]	; (8001530 <MX_USART1_UART_Init+0x4c>)
 800151c:	f003 fc80 	bl	8004e20 <HAL_UART_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001526:	f000 fbb5 	bl	8001c94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000938 	.word	0x20000938
 8001534:	40013800 	.word	0x40013800

08001538 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b088      	sub	sp, #32
 800153c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153e:	f107 0310 	add.w	r3, r7, #16
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	605a      	str	r2, [r3, #4]
 8001548:	609a      	str	r2, [r3, #8]
 800154a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800154c:	4b2a      	ldr	r3, [pc, #168]	; (80015f8 <MX_GPIO_Init+0xc0>)
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	4a29      	ldr	r2, [pc, #164]	; (80015f8 <MX_GPIO_Init+0xc0>)
 8001552:	f043 0310 	orr.w	r3, r3, #16
 8001556:	6193      	str	r3, [r2, #24]
 8001558:	4b27      	ldr	r3, [pc, #156]	; (80015f8 <MX_GPIO_Init+0xc0>)
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	f003 0310 	and.w	r3, r3, #16
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001564:	4b24      	ldr	r3, [pc, #144]	; (80015f8 <MX_GPIO_Init+0xc0>)
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	4a23      	ldr	r2, [pc, #140]	; (80015f8 <MX_GPIO_Init+0xc0>)
 800156a:	f043 0320 	orr.w	r3, r3, #32
 800156e:	6193      	str	r3, [r2, #24]
 8001570:	4b21      	ldr	r3, [pc, #132]	; (80015f8 <MX_GPIO_Init+0xc0>)
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	f003 0320 	and.w	r3, r3, #32
 8001578:	60bb      	str	r3, [r7, #8]
 800157a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800157c:	4b1e      	ldr	r3, [pc, #120]	; (80015f8 <MX_GPIO_Init+0xc0>)
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	4a1d      	ldr	r2, [pc, #116]	; (80015f8 <MX_GPIO_Init+0xc0>)
 8001582:	f043 0304 	orr.w	r3, r3, #4
 8001586:	6193      	str	r3, [r2, #24]
 8001588:	4b1b      	ldr	r3, [pc, #108]	; (80015f8 <MX_GPIO_Init+0xc0>)
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	f003 0304 	and.w	r3, r3, #4
 8001590:	607b      	str	r3, [r7, #4]
 8001592:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001594:	4b18      	ldr	r3, [pc, #96]	; (80015f8 <MX_GPIO_Init+0xc0>)
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	4a17      	ldr	r2, [pc, #92]	; (80015f8 <MX_GPIO_Init+0xc0>)
 800159a:	f043 0308 	orr.w	r3, r3, #8
 800159e:	6193      	str	r3, [r2, #24]
 80015a0:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <MX_GPIO_Init+0xc0>)
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	f003 0308 	and.w	r3, r3, #8
 80015a8:	603b      	str	r3, [r7, #0]
 80015aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80015ac:	2200      	movs	r2, #0
 80015ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015b2:	4812      	ldr	r0, [pc, #72]	; (80015fc <MX_GPIO_Init+0xc4>)
 80015b4:	f001 fb24 	bl	8002c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80015b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015be:	2301      	movs	r3, #1
 80015c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c6:	2302      	movs	r3, #2
 80015c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ca:	f107 0310 	add.w	r3, r7, #16
 80015ce:	4619      	mov	r1, r3
 80015d0:	480a      	ldr	r0, [pc, #40]	; (80015fc <MX_GPIO_Init+0xc4>)
 80015d2:	f001 f991 	bl	80028f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80015d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015e0:	2301      	movs	r3, #1
 80015e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015e4:	f107 0310 	add.w	r3, r7, #16
 80015e8:	4619      	mov	r1, r3
 80015ea:	4804      	ldr	r0, [pc, #16]	; (80015fc <MX_GPIO_Init+0xc4>)
 80015ec:	f001 f984 	bl	80028f8 <HAL_GPIO_Init>

}
 80015f0:	bf00      	nop
 80015f2:	3720      	adds	r7, #32
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40021000 	.word	0x40021000
 80015fc:	40011000 	.word	0x40011000

08001600 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001600:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001604:	b086      	sub	sp, #24
 8001606:	af04      	add	r7, sp, #16
 8001608:	6078      	str	r0, [r7, #4]

//
//	HAL_TIM_Base_Stop_IT(&htim2);

	if(htim->Instance==TIM2)	//	Si interrupcion proviene de TIM2 -> cambio de modo de display
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001612:	d124      	bne.n	800165e <HAL_TIM_PeriodElapsedCallback+0x5e>
	{
		if(az_filter.out > 0.8)
 8001614:	4ba6      	ldr	r3, [pc, #664]	; (80018b0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001616:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800161a:	4618      	mov	r0, r3
 800161c:	f7fe ff04 	bl	8000428 <__aeabi_f2d>
 8001620:	a39d      	add	r3, pc, #628	; (adr r3, 8001898 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001626:	f7ff f9e7 	bl	80009f8 <__aeabi_dcmpgt>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d002      	beq.n	8001636 <HAL_TIM_PeriodElapsedCallback+0x36>
			display_mode = 2;
 8001630:	4ba0      	ldr	r3, [pc, #640]	; (80018b4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001632:	2202      	movs	r2, #2
 8001634:	701a      	strb	r2, [r3, #0]

		if(az_filter.out < 0.2)
 8001636:	4b9e      	ldr	r3, [pc, #632]	; (80018b0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001638:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800163c:	4618      	mov	r0, r3
 800163e:	f7fe fef3 	bl	8000428 <__aeabi_f2d>
 8001642:	a397      	add	r3, pc, #604	; (adr r3, 80018a0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001648:	f7ff f9b8 	bl	80009bc <__aeabi_dcmplt>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d002      	beq.n	8001658 <HAL_TIM_PeriodElapsedCallback+0x58>
			display_mode = 1;
 8001652:	4b98      	ldr	r3, [pc, #608]	; (80018b4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001654:	2201      	movs	r2, #1
 8001656:	701a      	strb	r2, [r3, #0]

		HAL_TIM_Base_Stop_IT(&htim2);
 8001658:	4897      	ldr	r0, [pc, #604]	; (80018b8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800165a:	f003 f85b 	bl	8004714 <HAL_TIM_Base_Stop_IT>
	}

	if(htim->Instance==TIM3)	//	Si intrerrupcion proviene de TIM3 -> lectura de MPU6050
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a96      	ldr	r2, [pc, #600]	; (80018bc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001664:	4293      	cmp	r3, r2
 8001666:	f040 8112 	bne.w	800188e <HAL_TIM_PeriodElapsedCallback+0x28e>
	{
		HAL_I2C_Mem_Read(&hi2c1, (mpu6050_adr<<1) | 0, accel_xout_h_reg, 1, Rec_Data, 6, 1000);
 800166a:	4b95      	ldr	r3, [pc, #596]	; (80018c0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	b29b      	uxth	r3, r3
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	b299      	uxth	r1, r3
 8001674:	4b93      	ldr	r3, [pc, #588]	; (80018c4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	b29a      	uxth	r2, r3
 800167a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800167e:	9302      	str	r3, [sp, #8]
 8001680:	2306      	movs	r3, #6
 8001682:	9301      	str	r3, [sp, #4]
 8001684:	4b90      	ldr	r3, [pc, #576]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	2301      	movs	r3, #1
 800168a:	4890      	ldr	r0, [pc, #576]	; (80018cc <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800168c:	f001 fd0e 	bl	80030ac <HAL_I2C_Mem_Read>

		Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8001690:	4b8d      	ldr	r3, [pc, #564]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	021b      	lsls	r3, r3, #8
 8001696:	b21a      	sxth	r2, r3
 8001698:	4b8b      	ldr	r3, [pc, #556]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800169a:	785b      	ldrb	r3, [r3, #1]
 800169c:	b21b      	sxth	r3, r3
 800169e:	4313      	orrs	r3, r2
 80016a0:	b21a      	sxth	r2, r3
 80016a2:	4b8b      	ldr	r3, [pc, #556]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80016a4:	801a      	strh	r2, [r3, #0]
		Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 80016a6:	4b88      	ldr	r3, [pc, #544]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80016a8:	789b      	ldrb	r3, [r3, #2]
 80016aa:	021b      	lsls	r3, r3, #8
 80016ac:	b21a      	sxth	r2, r3
 80016ae:	4b86      	ldr	r3, [pc, #536]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80016b0:	78db      	ldrb	r3, [r3, #3]
 80016b2:	b21b      	sxth	r3, r3
 80016b4:	4313      	orrs	r3, r2
 80016b6:	b21a      	sxth	r2, r3
 80016b8:	4b86      	ldr	r3, [pc, #536]	; (80018d4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80016ba:	801a      	strh	r2, [r3, #0]
		Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 80016bc:	4b82      	ldr	r3, [pc, #520]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80016be:	791b      	ldrb	r3, [r3, #4]
 80016c0:	021b      	lsls	r3, r3, #8
 80016c2:	b21a      	sxth	r2, r3
 80016c4:	4b80      	ldr	r3, [pc, #512]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80016c6:	795b      	ldrb	r3, [r3, #5]
 80016c8:	b21b      	sxth	r3, r3
 80016ca:	4313      	orrs	r3, r2
 80016cc:	b21a      	sxth	r2, r3
 80016ce:	4b82      	ldr	r3, [pc, #520]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80016d0:	801a      	strh	r2, [r3, #0]

		ax = (float)Accel_X_RAW / 16384.0;
 80016d2:	4b7f      	ldr	r3, [pc, #508]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80016d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff faff 	bl	8000cdc <__aeabi_i2f>
 80016de:	4603      	mov	r3, r0
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7fe fea1 	bl	8000428 <__aeabi_f2d>
 80016e6:	f04f 0200 	mov.w	r2, #0
 80016ea:	4b7c      	ldr	r3, [pc, #496]	; (80018dc <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80016ec:	f7ff f81e 	bl	800072c <__aeabi_ddiv>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	497a      	ldr	r1, [pc, #488]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80016f6:	e9c1 2300 	strd	r2, r3, [r1]
		ay = (float)Accel_Y_RAW / 16384.0;
 80016fa:	4b76      	ldr	r3, [pc, #472]	; (80018d4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80016fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff faeb 	bl	8000cdc <__aeabi_i2f>
 8001706:	4603      	mov	r3, r0
 8001708:	4618      	mov	r0, r3
 800170a:	f7fe fe8d 	bl	8000428 <__aeabi_f2d>
 800170e:	f04f 0200 	mov.w	r2, #0
 8001712:	4b72      	ldr	r3, [pc, #456]	; (80018dc <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001714:	f7ff f80a 	bl	800072c <__aeabi_ddiv>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	4971      	ldr	r1, [pc, #452]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800171e:	e9c1 2300 	strd	r2, r3, [r1]
		az = (float)Accel_Z_RAW / 16384.0;
 8001722:	4b6d      	ldr	r3, [pc, #436]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001724:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff fad7 	bl	8000cdc <__aeabi_i2f>
 800172e:	4603      	mov	r3, r0
 8001730:	4618      	mov	r0, r3
 8001732:	f7fe fe79 	bl	8000428 <__aeabi_f2d>
 8001736:	f04f 0200 	mov.w	r2, #0
 800173a:	4b68      	ldr	r3, [pc, #416]	; (80018dc <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800173c:	f7fe fff6 	bl	800072c <__aeabi_ddiv>
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	4968      	ldr	r1, [pc, #416]	; (80018e8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001746:	e9c1 2300 	strd	r2, r3, [r1]

		FIRFilter_Update(&az_filter, az);
 800174a:	4b67      	ldr	r3, [pc, #412]	; (80018e8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800174c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001750:	4610      	mov	r0, r2
 8001752:	4619      	mov	r1, r3
 8001754:	f7ff f9b8 	bl	8000ac8 <__aeabi_d2f>
 8001758:	4603      	mov	r3, r0
 800175a:	4619      	mov	r1, r3
 800175c:	4854      	ldr	r0, [pc, #336]	; (80018b0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800175e:	f003 fc5d 	bl	800501c <FIRFilter_Update>

		angle_yx = -1*(atan2(ay,ax)*180)/PI;
 8001762:	4b60      	ldr	r3, [pc, #384]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001764:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001768:	4b5d      	ldr	r3, [pc, #372]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800176a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176e:	f006 ff7b 	bl	8008668 <atan2>
 8001772:	f04f 0200 	mov.w	r2, #0
 8001776:	4b5d      	ldr	r3, [pc, #372]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001778:	f7fe feae 	bl	80004d8 <__aeabi_dmul>
 800177c:	4602      	mov	r2, r0
 800177e:	460b      	mov	r3, r1
 8001780:	4690      	mov	r8, r2
 8001782:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8001786:	a348      	add	r3, pc, #288	; (adr r3, 80018a8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178c:	4640      	mov	r0, r8
 800178e:	4649      	mov	r1, r9
 8001790:	f7fe ffcc 	bl	800072c <__aeabi_ddiv>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	4955      	ldr	r1, [pc, #340]	; (80018f0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800179a:	e9c1 2300 	strd	r2, r3, [r1]
		angle_xz = (atan2(ax,az)*180)/PI;
 800179e:	4b50      	ldr	r3, [pc, #320]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80017a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017a4:	4b50      	ldr	r3, [pc, #320]	; (80018e8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80017a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017aa:	f006 ff5d 	bl	8008668 <atan2>
 80017ae:	f04f 0200 	mov.w	r2, #0
 80017b2:	4b4e      	ldr	r3, [pc, #312]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80017b4:	f7fe fe90 	bl	80004d8 <__aeabi_dmul>
 80017b8:	4602      	mov	r2, r0
 80017ba:	460b      	mov	r3, r1
 80017bc:	4610      	mov	r0, r2
 80017be:	4619      	mov	r1, r3
 80017c0:	a339      	add	r3, pc, #228	; (adr r3, 80018a8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80017c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c6:	f7fe ffb1 	bl	800072c <__aeabi_ddiv>
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	4949      	ldr	r1, [pc, #292]	; (80018f4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80017d0:	e9c1 2300 	strd	r2, r3, [r1]
		angle_yz = -1*(atan2(ay,az)*180)/PI;
 80017d4:	4b43      	ldr	r3, [pc, #268]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80017d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017da:	4b43      	ldr	r3, [pc, #268]	; (80018e8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80017dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e0:	f006 ff42 	bl	8008668 <atan2>
 80017e4:	f04f 0200 	mov.w	r2, #0
 80017e8:	4b40      	ldr	r3, [pc, #256]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80017ea:	f7fe fe75 	bl	80004d8 <__aeabi_dmul>
 80017ee:	4602      	mov	r2, r0
 80017f0:	460b      	mov	r3, r1
 80017f2:	4614      	mov	r4, r2
 80017f4:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80017f8:	a32b      	add	r3, pc, #172	; (adr r3, 80018a8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80017fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fe:	4620      	mov	r0, r4
 8001800:	4629      	mov	r1, r5
 8001802:	f7fe ff93 	bl	800072c <__aeabi_ddiv>
 8001806:	4602      	mov	r2, r0
 8001808:	460b      	mov	r3, r1
 800180a:	493b      	ldr	r1, [pc, #236]	; (80018f8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800180c:	e9c1 2300 	strd	r2, r3, [r1]

		angle_yx = FIRFilter_Update(&angle_yx_filter, angle_yx);
 8001810:	4b37      	ldr	r3, [pc, #220]	; (80018f0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001816:	4610      	mov	r0, r2
 8001818:	4619      	mov	r1, r3
 800181a:	f7ff f955 	bl	8000ac8 <__aeabi_d2f>
 800181e:	4603      	mov	r3, r0
 8001820:	4619      	mov	r1, r3
 8001822:	4836      	ldr	r0, [pc, #216]	; (80018fc <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001824:	f003 fbfa 	bl	800501c <FIRFilter_Update>
 8001828:	4603      	mov	r3, r0
 800182a:	4618      	mov	r0, r3
 800182c:	f7fe fdfc 	bl	8000428 <__aeabi_f2d>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	492e      	ldr	r1, [pc, #184]	; (80018f0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001836:	e9c1 2300 	strd	r2, r3, [r1]
		angle_xz = FIRFilter_Update(&angle_xz_filter, angle_xz);
 800183a:	4b2e      	ldr	r3, [pc, #184]	; (80018f4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800183c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001840:	4610      	mov	r0, r2
 8001842:	4619      	mov	r1, r3
 8001844:	f7ff f940 	bl	8000ac8 <__aeabi_d2f>
 8001848:	4603      	mov	r3, r0
 800184a:	4619      	mov	r1, r3
 800184c:	482c      	ldr	r0, [pc, #176]	; (8001900 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800184e:	f003 fbe5 	bl	800501c <FIRFilter_Update>
 8001852:	4603      	mov	r3, r0
 8001854:	4618      	mov	r0, r3
 8001856:	f7fe fde7 	bl	8000428 <__aeabi_f2d>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	4925      	ldr	r1, [pc, #148]	; (80018f4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001860:	e9c1 2300 	strd	r2, r3, [r1]
		angle_yz = FIRFilter_Update(&angle_yz_filter, angle_yz);
 8001864:	4b24      	ldr	r3, [pc, #144]	; (80018f8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186a:	4610      	mov	r0, r2
 800186c:	4619      	mov	r1, r3
 800186e:	f7ff f92b 	bl	8000ac8 <__aeabi_d2f>
 8001872:	4603      	mov	r3, r0
 8001874:	4619      	mov	r1, r3
 8001876:	4823      	ldr	r0, [pc, #140]	; (8001904 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001878:	f003 fbd0 	bl	800501c <FIRFilter_Update>
 800187c:	4603      	mov	r3, r0
 800187e:	4618      	mov	r0, r3
 8001880:	f7fe fdd2 	bl	8000428 <__aeabi_f2d>
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	491b      	ldr	r1, [pc, #108]	; (80018f8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800188a:	e9c1 2300 	strd	r2, r3, [r1]
	}

}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001898:	9999999a 	.word	0x9999999a
 800189c:	3fe99999 	.word	0x3fe99999
 80018a0:	9999999a 	.word	0x9999999a
 80018a4:	3fc99999 	.word	0x3fc99999
 80018a8:	5443d6f4 	.word	0x5443d6f4
 80018ac:	400921fb 	.word	0x400921fb
 80018b0:	20000978 	.word	0x20000978
 80018b4:	20000000 	.word	0x20000000
 80018b8:	20000a00 	.word	0x20000a00
 80018bc:	40000400 	.word	0x40000400
 80018c0:	20000001 	.word	0x20000001
 80018c4:	20000003 	.word	0x20000003
 80018c8:	200008b0 	.word	0x200008b0
 80018cc:	20000780 	.word	0x20000780
 80018d0:	200002b0 	.word	0x200002b0
 80018d4:	200002b2 	.word	0x200002b2
 80018d8:	200002b4 	.word	0x200002b4
 80018dc:	40d00000 	.word	0x40d00000
 80018e0:	200002b8 	.word	0x200002b8
 80018e4:	200002c0 	.word	0x200002c0
 80018e8:	200002c8 	.word	0x200002c8
 80018ec:	40668000 	.word	0x40668000
 80018f0:	20000298 	.word	0x20000298
 80018f4:	200002a0 	.word	0x200002a0
 80018f8:	200002a8 	.word	0x200002a8
 80018fc:	200006f8 	.word	0x200006f8
 8001900:	20000a48 	.word	0x20000a48
 8001904:	200007d4 	.word	0x200007d4

08001908 <bubbleLevel_1d>:
//	ssd1306_UpdateScreen();
//}


static void bubbleLevel_1d(double angle)
{
 8001908:	b5b0      	push	{r4, r5, r7, lr}
 800190a:	b088      	sub	sp, #32
 800190c:	af02      	add	r7, sp, #8
 800190e:	e9c7 0100 	strd	r0, r1, [r7]

	#define COLOR	1

	char  MSG0[7] = "";
 8001912:	2300      	movs	r3, #0
 8001914:	60fb      	str	r3, [r7, #12]
 8001916:	f107 0310 	add.w	r3, r7, #16
 800191a:	2100      	movs	r1, #0
 800191c:	460a      	mov	r2, r1
 800191e:	801a      	strh	r2, [r3, #0]
 8001920:	460a      	mov	r2, r1
 8001922:	709a      	strb	r2, [r3, #2]

	static uint8_t radius = 9;
	static int16_t x0;
	const uint8_t y0 = 52;
 8001924:	2334      	movs	r3, #52	; 0x34
 8001926:	75fb      	strb	r3, [r7, #23]
	const uint8_t x1 = 10;
 8001928:	230a      	movs	r3, #10
 800192a:	75bb      	strb	r3, [r7, #22]
	const uint8_t x2 = 120;
 800192c:	2378      	movs	r3, #120	; 0x78
 800192e:	757b      	strb	r3, [r7, #21]

	//angle = -170;

	//x0 = ((angle + 180)/360.0)*(x2 - x1 - 2*(radius + 1)) + (x1 + radius +1);
	//x0 = (angle/60.0)*45.0 + 65;
	x0 = (angle/60.0)*(x2 - (radius+1) - (x2 + x1)/2) + (x2 + x1)/2;
 8001930:	f04f 0200 	mov.w	r2, #0
 8001934:	4b57      	ldr	r3, [pc, #348]	; (8001a94 <bubbleLevel_1d+0x18c>)
 8001936:	e9d7 0100 	ldrd	r0, r1, [r7]
 800193a:	f7fe fef7 	bl	800072c <__aeabi_ddiv>
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	4614      	mov	r4, r2
 8001944:	461d      	mov	r5, r3
 8001946:	7d7a      	ldrb	r2, [r7, #21]
 8001948:	4b53      	ldr	r3, [pc, #332]	; (8001a98 <bubbleLevel_1d+0x190>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	3301      	adds	r3, #1
 800194e:	1ad2      	subs	r2, r2, r3
 8001950:	7d79      	ldrb	r1, [r7, #21]
 8001952:	7dbb      	ldrb	r3, [r7, #22]
 8001954:	440b      	add	r3, r1
 8001956:	0fd9      	lsrs	r1, r3, #31
 8001958:	440b      	add	r3, r1
 800195a:	105b      	asrs	r3, r3, #1
 800195c:	425b      	negs	r3, r3
 800195e:	4413      	add	r3, r2
 8001960:	4618      	mov	r0, r3
 8001962:	f7fe fd4f 	bl	8000404 <__aeabi_i2d>
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	4620      	mov	r0, r4
 800196c:	4629      	mov	r1, r5
 800196e:	f7fe fdb3 	bl	80004d8 <__aeabi_dmul>
 8001972:	4602      	mov	r2, r0
 8001974:	460b      	mov	r3, r1
 8001976:	4614      	mov	r4, r2
 8001978:	461d      	mov	r5, r3
 800197a:	7d7a      	ldrb	r2, [r7, #21]
 800197c:	7dbb      	ldrb	r3, [r7, #22]
 800197e:	4413      	add	r3, r2
 8001980:	0fda      	lsrs	r2, r3, #31
 8001982:	4413      	add	r3, r2
 8001984:	105b      	asrs	r3, r3, #1
 8001986:	4618      	mov	r0, r3
 8001988:	f7fe fd3c 	bl	8000404 <__aeabi_i2d>
 800198c:	4602      	mov	r2, r0
 800198e:	460b      	mov	r3, r1
 8001990:	4620      	mov	r0, r4
 8001992:	4629      	mov	r1, r5
 8001994:	f7fe fbea 	bl	800016c <__adddf3>
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	4610      	mov	r0, r2
 800199e:	4619      	mov	r1, r3
 80019a0:	f7ff f84a 	bl	8000a38 <__aeabi_d2iz>
 80019a4:	4603      	mov	r3, r0
 80019a6:	b21a      	sxth	r2, r3
 80019a8:	4b3c      	ldr	r3, [pc, #240]	; (8001a9c <bubbleLevel_1d+0x194>)
 80019aa:	801a      	strh	r2, [r3, #0]

	if( (x0 - (radius +1)) <= x1 )
 80019ac:	4b3b      	ldr	r3, [pc, #236]	; (8001a9c <bubbleLevel_1d+0x194>)
 80019ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019b2:	461a      	mov	r2, r3
 80019b4:	4b38      	ldr	r3, [pc, #224]	; (8001a98 <bubbleLevel_1d+0x190>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	3301      	adds	r3, #1
 80019ba:	1ad2      	subs	r2, r2, r3
 80019bc:	7dbb      	ldrb	r3, [r7, #22]
 80019be:	429a      	cmp	r2, r3
 80019c0:	dc0b      	bgt.n	80019da <bubbleLevel_1d+0xd2>
		x0 = x1 + (radius + 1);
 80019c2:	7dbb      	ldrb	r3, [r7, #22]
 80019c4:	b29a      	uxth	r2, r3
 80019c6:	4b34      	ldr	r3, [pc, #208]	; (8001a98 <bubbleLevel_1d+0x190>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	4413      	add	r3, r2
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	3301      	adds	r3, #1
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	b21a      	sxth	r2, r3
 80019d6:	4b31      	ldr	r3, [pc, #196]	; (8001a9c <bubbleLevel_1d+0x194>)
 80019d8:	801a      	strh	r2, [r3, #0]
										//	SON NECESARIOS ESTOS LÍMITES?
	if( (x0 + (radius +1)) >= x2 )
 80019da:	4b30      	ldr	r3, [pc, #192]	; (8001a9c <bubbleLevel_1d+0x194>)
 80019dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019e0:	461a      	mov	r2, r3
 80019e2:	4b2d      	ldr	r3, [pc, #180]	; (8001a98 <bubbleLevel_1d+0x190>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	3301      	adds	r3, #1
 80019e8:	441a      	add	r2, r3
 80019ea:	7d7b      	ldrb	r3, [r7, #21]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	db0b      	blt.n	8001a08 <bubbleLevel_1d+0x100>
		x0 = x2 - (radius + 1);
 80019f0:	7d7b      	ldrb	r3, [r7, #21]
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	4b28      	ldr	r3, [pc, #160]	; (8001a98 <bubbleLevel_1d+0x190>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	3b01      	subs	r3, #1
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	b21a      	sxth	r2, r3
 8001a04:	4b25      	ldr	r3, [pc, #148]	; (8001a9c <bubbleLevel_1d+0x194>)
 8001a06:	801a      	strh	r2, [r3, #0]

	sprintf(MSG0, "%+4.1f", angle);
 8001a08:	f107 000c 	add.w	r0, r7, #12
 8001a0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a10:	4923      	ldr	r1, [pc, #140]	; (8001aa0 <bubbleLevel_1d+0x198>)
 8001a12:	f004 fb77 	bl	8006104 <siprintf>

	ssd1306_Fill(!COLOR);
 8001a16:	2000      	movs	r0, #0
 8001a18:	f003 fbfc 	bl	8005214 <ssd1306_Fill>
	ssd1306_DrawRectangle(x1, y0 - (radius + 1), x2, y0 + (radius +1), COLOR);
 8001a1c:	4b1e      	ldr	r3, [pc, #120]	; (8001a98 <bubbleLevel_1d+0x190>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	7dfa      	ldrb	r2, [r7, #23]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	3b01      	subs	r3, #1
 8001a28:	b2d9      	uxtb	r1, r3
 8001a2a:	4b1b      	ldr	r3, [pc, #108]	; (8001a98 <bubbleLevel_1d+0x190>)
 8001a2c:	781a      	ldrb	r2, [r3, #0]
 8001a2e:	7dfb      	ldrb	r3, [r7, #23]
 8001a30:	4413      	add	r3, r2
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	3301      	adds	r3, #1
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	7d7a      	ldrb	r2, [r7, #21]
 8001a3a:	7db8      	ldrb	r0, [r7, #22]
 8001a3c:	2401      	movs	r4, #1
 8001a3e:	9400      	str	r4, [sp, #0]
 8001a40:	f003 fe58 	bl	80056f4 <ssd1306_DrawRectangle>
	ssd1306_DrawCircle(x0, y0, radius, COLOR);
 8001a44:	4b15      	ldr	r3, [pc, #84]	; (8001a9c <bubbleLevel_1d+0x194>)
 8001a46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a4a:	b2d8      	uxtb	r0, r3
 8001a4c:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <bubbleLevel_1d+0x190>)
 8001a4e:	781a      	ldrb	r2, [r3, #0]
 8001a50:	7df9      	ldrb	r1, [r7, #23]
 8001a52:	2301      	movs	r3, #1
 8001a54:	f003 fdc8 	bl	80055e8 <ssd1306_DrawCircle>
	ssd1306_DrawCircle(x0+3, y0-3, 2, COLOR);
 8001a58:	4b10      	ldr	r3, [pc, #64]	; (8001a9c <bubbleLevel_1d+0x194>)
 8001a5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	3303      	adds	r3, #3
 8001a62:	b2d8      	uxtb	r0, r3
 8001a64:	7dfb      	ldrb	r3, [r7, #23]
 8001a66:	3b03      	subs	r3, #3
 8001a68:	b2d9      	uxtb	r1, r3
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	2202      	movs	r2, #2
 8001a6e:	f003 fdbb 	bl	80055e8 <ssd1306_DrawCircle>
	ssd1306_SetCursor(26, 8);
 8001a72:	2108      	movs	r1, #8
 8001a74:	201a      	movs	r0, #26
 8001a76:	f003 fd33 	bl	80054e0 <ssd1306_SetCursor>
	ssd1306_WriteString(MSG0, Font_16x26, COLOR);
 8001a7a:	4a0a      	ldr	r2, [pc, #40]	; (8001aa4 <bubbleLevel_1d+0x19c>)
 8001a7c:	f107 000c 	add.w	r0, r7, #12
 8001a80:	2301      	movs	r3, #1
 8001a82:	ca06      	ldmia	r2, {r1, r2}
 8001a84:	f003 fd06 	bl	8005494 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001a88:	f003 fbe6 	bl	8005258 <ssd1306_UpdateScreen>

}
 8001a8c:	bf00      	nop
 8001a8e:	3718      	adds	r7, #24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bdb0      	pop	{r4, r5, r7, pc}
 8001a94:	404e0000 	.word	0x404e0000
 8001a98:	20000004 	.word	0x20000004
 8001a9c:	200002d0 	.word	0x200002d0
 8001aa0:	08009ca4 	.word	0x08009ca4
 8001aa4:	2000009c 	.word	0x2000009c

08001aa8 <bubbleLevel_2d>:

static void bubbleLevel_2d(double angle_xz, double angle_yz)
{
 8001aa8:	b5b0      	push	{r4, r5, r7, lr}
 8001aaa:	b090      	sub	sp, #64	; 0x40
 8001aac:	af02      	add	r7, sp, #8
 8001aae:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001ab2:	e9c7 2300 	strd	r2, r3, [r7]

	#define COLOR 	1
	#define FONT	Font_7x10

	char  MSG0[7] = "";
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61bb      	str	r3, [r7, #24]
 8001aba:	f107 031c 	add.w	r3, r7, #28
 8001abe:	2100      	movs	r1, #0
 8001ac0:	460a      	mov	r2, r1
 8001ac2:	801a      	strh	r2, [r3, #0]
 8001ac4:	460a      	mov	r2, r1
 8001ac6:	709a      	strb	r2, [r3, #2]
	char  MSG1[7] = "";
 8001ac8:	2300      	movs	r3, #0
 8001aca:	613b      	str	r3, [r7, #16]
 8001acc:	f107 0314 	add.w	r3, r7, #20
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	460a      	mov	r2, r1
 8001ad4:	801a      	strh	r2, [r3, #0]
 8001ad6:	460a      	mov	r2, r1
 8001ad8:	709a      	strb	r2, [r3, #2]

	sprintf(MSG0, "%+4.1f", angle_xz);
 8001ada:	f107 0018 	add.w	r0, r7, #24
 8001ade:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ae2:	4969      	ldr	r1, [pc, #420]	; (8001c88 <bubbleLevel_2d+0x1e0>)
 8001ae4:	f004 fb0e 	bl	8006104 <siprintf>
	sprintf(MSG1, "%+4.1f", angle_yz);
 8001ae8:	f107 0010 	add.w	r0, r7, #16
 8001aec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001af0:	4965      	ldr	r1, [pc, #404]	; (8001c88 <bubbleLevel_2d+0x1e0>)
 8001af2:	f004 fb07 	bl	8006104 <siprintf>

	uint8_t x0 = 95;
 8001af6:	235f      	movs	r3, #95	; 0x5f
 8001af8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t y0 = 32;
 8001afc:	2320      	movs	r3, #32
 8001afe:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	double radius;
	double theta;

	//radius = sqrt(pow(angle_yz, 2) + pow(angle_xz, 2));
	radius = sqrt(angle_yz*angle_yz + angle_xz*angle_xz);
 8001b02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b0a:	f7fe fce5 	bl	80004d8 <__aeabi_dmul>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	4614      	mov	r4, r2
 8001b14:	461d      	mov	r5, r3
 8001b16:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b1e:	f7fe fcdb 	bl	80004d8 <__aeabi_dmul>
 8001b22:	4602      	mov	r2, r0
 8001b24:	460b      	mov	r3, r1
 8001b26:	4620      	mov	r0, r4
 8001b28:	4629      	mov	r1, r5
 8001b2a:	f7fe fb1f 	bl	800016c <__adddf3>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	460b      	mov	r3, r1
 8001b32:	4610      	mov	r0, r2
 8001b34:	4619      	mov	r1, r3
 8001b36:	f006 fd99 	bl	800866c <sqrt>
 8001b3a:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

	if(radius > 26)
 8001b3e:	f04f 0200 	mov.w	r2, #0
 8001b42:	4b52      	ldr	r3, [pc, #328]	; (8001c8c <bubbleLevel_2d+0x1e4>)
 8001b44:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001b48:	f7fe ff56 	bl	80009f8 <__aeabi_dcmpgt>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d004      	beq.n	8001b5c <bubbleLevel_2d+0xb4>
		radius = 26;
 8001b52:	f04f 0200 	mov.w	r2, #0
 8001b56:	4b4d      	ldr	r3, [pc, #308]	; (8001c8c <bubbleLevel_2d+0x1e4>)
 8001b58:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	theta = atan2(angle_xz, angle_yz);
 8001b5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b60:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b64:	f006 fd80 	bl	8008668 <atan2>
 8001b68:	e9c7 0108 	strd	r0, r1, [r7, #32]

	x0 += radius * sin(theta);
 8001b6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7fe fc47 	bl	8000404 <__aeabi_i2d>
 8001b76:	4604      	mov	r4, r0
 8001b78:	460d      	mov	r5, r1
 8001b7a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b7e:	f006 fd2d 	bl	80085dc <sin>
 8001b82:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001b86:	f7fe fca7 	bl	80004d8 <__aeabi_dmul>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	4620      	mov	r0, r4
 8001b90:	4629      	mov	r1, r5
 8001b92:	f7fe faeb 	bl	800016c <__adddf3>
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	4610      	mov	r0, r2
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	f7fe ff73 	bl	8000a88 <__aeabi_d2uiz>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	y0 -= radius * cos(theta);
 8001ba8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7fe fc29 	bl	8000404 <__aeabi_i2d>
 8001bb2:	4604      	mov	r4, r0
 8001bb4:	460d      	mov	r5, r1
 8001bb6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001bba:	f006 fccd 	bl	8008558 <cos>
 8001bbe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001bc2:	f7fe fc89 	bl	80004d8 <__aeabi_dmul>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
 8001bca:	4620      	mov	r0, r4
 8001bcc:	4629      	mov	r1, r5
 8001bce:	f7fe facb 	bl	8000168 <__aeabi_dsub>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	4610      	mov	r0, r2
 8001bd8:	4619      	mov	r1, r3
 8001bda:	f7fe ff55 	bl	8000a88 <__aeabi_d2uiz>
 8001bde:	4603      	mov	r3, r0
 8001be0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	//	FIN CONVERSION A COORDENADAS POLARES

	ssd1306_Fill(!COLOR);
 8001be4:	2000      	movs	r0, #0
 8001be6:	f003 fb15 	bl	8005214 <ssd1306_Fill>
	ssd1306_DrawCircle(95, 32, 31, White);
 8001bea:	2301      	movs	r3, #1
 8001bec:	221f      	movs	r2, #31
 8001bee:	2120      	movs	r1, #32
 8001bf0:	205f      	movs	r0, #95	; 0x5f
 8001bf2:	f003 fcf9 	bl	80055e8 <ssd1306_DrawCircle>
	//ssd1306_DrawRectangle(63, 1, 126, 63, COLOR);	//	Descomentar en caso de no usar coordenadas polares
	ssd1306_Line(64, 32, 126, 32, COLOR);
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	9300      	str	r3, [sp, #0]
 8001bfa:	2320      	movs	r3, #32
 8001bfc:	227e      	movs	r2, #126	; 0x7e
 8001bfe:	2120      	movs	r1, #32
 8001c00:	2040      	movs	r0, #64	; 0x40
 8001c02:	f003 fc85 	bl	8005510 <ssd1306_Line>
	ssd1306_Line(95, 1, 95, 63, COLOR);
 8001c06:	2301      	movs	r3, #1
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	233f      	movs	r3, #63	; 0x3f
 8001c0c:	225f      	movs	r2, #95	; 0x5f
 8001c0e:	2101      	movs	r1, #1
 8001c10:	205f      	movs	r0, #95	; 0x5f
 8001c12:	f003 fc7d 	bl	8005510 <ssd1306_Line>
	ssd1306_DrawRectangle(89, 26, 101, 38, COLOR);
 8001c16:	2301      	movs	r3, #1
 8001c18:	9300      	str	r3, [sp, #0]
 8001c1a:	2326      	movs	r3, #38	; 0x26
 8001c1c:	2265      	movs	r2, #101	; 0x65
 8001c1e:	211a      	movs	r1, #26
 8001c20:	2059      	movs	r0, #89	; 0x59
 8001c22:	f003 fd67 	bl	80056f4 <ssd1306_DrawRectangle>
	ssd1306_DrawCircle(x0, y0, 5, COLOR);
 8001c26:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8001c2a:	f897 002f 	ldrb.w	r0, [r7, #47]	; 0x2f
 8001c2e:	2301      	movs	r3, #1
 8001c30:	2205      	movs	r2, #5
 8001c32:	f003 fcd9 	bl	80055e8 <ssd1306_DrawCircle>
	ssd1306_DrawCircle(x0+2, y0-2, 1, COLOR);
 8001c36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001c3a:	3302      	adds	r3, #2
 8001c3c:	b2d8      	uxtb	r0, r3
 8001c3e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001c42:	3b02      	subs	r3, #2
 8001c44:	b2d9      	uxtb	r1, r3
 8001c46:	2301      	movs	r3, #1
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f003 fccd 	bl	80055e8 <ssd1306_DrawCircle>
	ssd1306_SetCursor(1, 1);
 8001c4e:	2101      	movs	r1, #1
 8001c50:	2001      	movs	r0, #1
 8001c52:	f003 fc45 	bl	80054e0 <ssd1306_SetCursor>
	ssd1306_WriteString(MSG0, FONT, COLOR);
 8001c56:	4a0e      	ldr	r2, [pc, #56]	; (8001c90 <bubbleLevel_2d+0x1e8>)
 8001c58:	f107 0018 	add.w	r0, r7, #24
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	ca06      	ldmia	r2, {r1, r2}
 8001c60:	f003 fc18 	bl	8005494 <ssd1306_WriteString>
	ssd1306_SetCursor(1, 30);
 8001c64:	211e      	movs	r1, #30
 8001c66:	2001      	movs	r0, #1
 8001c68:	f003 fc3a 	bl	80054e0 <ssd1306_SetCursor>
	ssd1306_WriteString(MSG1, FONT, COLOR);
 8001c6c:	4a08      	ldr	r2, [pc, #32]	; (8001c90 <bubbleLevel_2d+0x1e8>)
 8001c6e:	f107 0010 	add.w	r0, r7, #16
 8001c72:	2301      	movs	r3, #1
 8001c74:	ca06      	ldmia	r2, {r1, r2}
 8001c76:	f003 fc0d 	bl	8005494 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001c7a:	f003 faed 	bl	8005258 <ssd1306_UpdateScreen>

}
 8001c7e:	bf00      	nop
 8001c80:	3738      	adds	r7, #56	; 0x38
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bdb0      	pop	{r4, r5, r7, pc}
 8001c86:	bf00      	nop
 8001c88:	08009ca4 	.word	0x08009ca4
 8001c8c:	403a0000 	.word	0x403a0000
 8001c90:	20000094 	.word	0x20000094

08001c94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c98:	b672      	cpsid	i
}
 8001c9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c9c:	e7fe      	b.n	8001c9c <Error_Handler+0x8>
	...

08001ca0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ca6:	4b15      	ldr	r3, [pc, #84]	; (8001cfc <HAL_MspInit+0x5c>)
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	4a14      	ldr	r2, [pc, #80]	; (8001cfc <HAL_MspInit+0x5c>)
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	6193      	str	r3, [r2, #24]
 8001cb2:	4b12      	ldr	r3, [pc, #72]	; (8001cfc <HAL_MspInit+0x5c>)
 8001cb4:	699b      	ldr	r3, [r3, #24]
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	60bb      	str	r3, [r7, #8]
 8001cbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cbe:	4b0f      	ldr	r3, [pc, #60]	; (8001cfc <HAL_MspInit+0x5c>)
 8001cc0:	69db      	ldr	r3, [r3, #28]
 8001cc2:	4a0e      	ldr	r2, [pc, #56]	; (8001cfc <HAL_MspInit+0x5c>)
 8001cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc8:	61d3      	str	r3, [r2, #28]
 8001cca:	4b0c      	ldr	r3, [pc, #48]	; (8001cfc <HAL_MspInit+0x5c>)
 8001ccc:	69db      	ldr	r3, [r3, #28]
 8001cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd2:	607b      	str	r3, [r7, #4]
 8001cd4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001cd6:	4b0a      	ldr	r3, [pc, #40]	; (8001d00 <HAL_MspInit+0x60>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	4a04      	ldr	r2, [pc, #16]	; (8001d00 <HAL_MspInit+0x60>)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	3714      	adds	r7, #20
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bc80      	pop	{r7}
 8001cfa:	4770      	bx	lr
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	40010000 	.word	0x40010000

08001d04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b088      	sub	sp, #32
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0c:	f107 0310 	add.w	r3, r7, #16
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a14      	ldr	r2, [pc, #80]	; (8001d70 <HAL_ADC_MspInit+0x6c>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d121      	bne.n	8001d68 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d24:	4b13      	ldr	r3, [pc, #76]	; (8001d74 <HAL_ADC_MspInit+0x70>)
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	4a12      	ldr	r2, [pc, #72]	; (8001d74 <HAL_ADC_MspInit+0x70>)
 8001d2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d2e:	6193      	str	r3, [r2, #24]
 8001d30:	4b10      	ldr	r3, [pc, #64]	; (8001d74 <HAL_ADC_MspInit+0x70>)
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d3c:	4b0d      	ldr	r3, [pc, #52]	; (8001d74 <HAL_ADC_MspInit+0x70>)
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	4a0c      	ldr	r2, [pc, #48]	; (8001d74 <HAL_ADC_MspInit+0x70>)
 8001d42:	f043 0304 	orr.w	r3, r3, #4
 8001d46:	6193      	str	r3, [r2, #24]
 8001d48:	4b0a      	ldr	r3, [pc, #40]	; (8001d74 <HAL_ADC_MspInit+0x70>)
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	60bb      	str	r3, [r7, #8]
 8001d52:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d54:	2380      	movs	r3, #128	; 0x80
 8001d56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d5c:	f107 0310 	add.w	r3, r7, #16
 8001d60:	4619      	mov	r1, r3
 8001d62:	4805      	ldr	r0, [pc, #20]	; (8001d78 <HAL_ADC_MspInit+0x74>)
 8001d64:	f000 fdc8 	bl	80028f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d68:	bf00      	nop
 8001d6a:	3720      	adds	r7, #32
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40012400 	.word	0x40012400
 8001d74:	40021000 	.word	0x40021000
 8001d78:	40010800 	.word	0x40010800

08001d7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b08a      	sub	sp, #40	; 0x28
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d84:	f107 0318 	add.w	r3, r7, #24
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a2b      	ldr	r2, [pc, #172]	; (8001e44 <HAL_I2C_MspInit+0xc8>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d124      	bne.n	8001de6 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d9c:	4b2a      	ldr	r3, [pc, #168]	; (8001e48 <HAL_I2C_MspInit+0xcc>)
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	4a29      	ldr	r2, [pc, #164]	; (8001e48 <HAL_I2C_MspInit+0xcc>)
 8001da2:	f043 0308 	orr.w	r3, r3, #8
 8001da6:	6193      	str	r3, [r2, #24]
 8001da8:	4b27      	ldr	r3, [pc, #156]	; (8001e48 <HAL_I2C_MspInit+0xcc>)
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	f003 0308 	and.w	r3, r3, #8
 8001db0:	617b      	str	r3, [r7, #20]
 8001db2:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001db4:	23c0      	movs	r3, #192	; 0xc0
 8001db6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001db8:	2312      	movs	r3, #18
 8001dba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc0:	f107 0318 	add.w	r3, r7, #24
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4821      	ldr	r0, [pc, #132]	; (8001e4c <HAL_I2C_MspInit+0xd0>)
 8001dc8:	f000 fd96 	bl	80028f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dcc:	4b1e      	ldr	r3, [pc, #120]	; (8001e48 <HAL_I2C_MspInit+0xcc>)
 8001dce:	69db      	ldr	r3, [r3, #28]
 8001dd0:	4a1d      	ldr	r2, [pc, #116]	; (8001e48 <HAL_I2C_MspInit+0xcc>)
 8001dd2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001dd6:	61d3      	str	r3, [r2, #28]
 8001dd8:	4b1b      	ldr	r3, [pc, #108]	; (8001e48 <HAL_I2C_MspInit+0xcc>)
 8001dda:	69db      	ldr	r3, [r3, #28]
 8001ddc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001de0:	613b      	str	r3, [r7, #16]
 8001de2:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001de4:	e029      	b.n	8001e3a <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a19      	ldr	r2, [pc, #100]	; (8001e50 <HAL_I2C_MspInit+0xd4>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d124      	bne.n	8001e3a <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df0:	4b15      	ldr	r3, [pc, #84]	; (8001e48 <HAL_I2C_MspInit+0xcc>)
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	4a14      	ldr	r2, [pc, #80]	; (8001e48 <HAL_I2C_MspInit+0xcc>)
 8001df6:	f043 0308 	orr.w	r3, r3, #8
 8001dfa:	6193      	str	r3, [r2, #24]
 8001dfc:	4b12      	ldr	r3, [pc, #72]	; (8001e48 <HAL_I2C_MspInit+0xcc>)
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	f003 0308 	and.w	r3, r3, #8
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001e08:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001e0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e0e:	2312      	movs	r3, #18
 8001e10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e12:	2303      	movs	r3, #3
 8001e14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e16:	f107 0318 	add.w	r3, r7, #24
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	480b      	ldr	r0, [pc, #44]	; (8001e4c <HAL_I2C_MspInit+0xd0>)
 8001e1e:	f000 fd6b 	bl	80028f8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e22:	4b09      	ldr	r3, [pc, #36]	; (8001e48 <HAL_I2C_MspInit+0xcc>)
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	4a08      	ldr	r2, [pc, #32]	; (8001e48 <HAL_I2C_MspInit+0xcc>)
 8001e28:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e2c:	61d3      	str	r3, [r2, #28]
 8001e2e:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <HAL_I2C_MspInit+0xcc>)
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e36:	60bb      	str	r3, [r7, #8]
 8001e38:	68bb      	ldr	r3, [r7, #8]
}
 8001e3a:	bf00      	nop
 8001e3c:	3728      	adds	r7, #40	; 0x28
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40005400 	.word	0x40005400
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	40010c00 	.word	0x40010c00
 8001e50:	40005800 	.word	0x40005800

08001e54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e64:	d114      	bne.n	8001e90 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e66:	4b19      	ldr	r3, [pc, #100]	; (8001ecc <HAL_TIM_Base_MspInit+0x78>)
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	4a18      	ldr	r2, [pc, #96]	; (8001ecc <HAL_TIM_Base_MspInit+0x78>)
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	61d3      	str	r3, [r2, #28]
 8001e72:	4b16      	ldr	r3, [pc, #88]	; (8001ecc <HAL_TIM_Base_MspInit+0x78>)
 8001e74:	69db      	ldr	r3, [r3, #28]
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e7e:	2200      	movs	r2, #0
 8001e80:	2100      	movs	r1, #0
 8001e82:	201c      	movs	r0, #28
 8001e84:	f000 fd01 	bl	800288a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e88:	201c      	movs	r0, #28
 8001e8a:	f000 fd1a 	bl	80028c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e8e:	e018      	b.n	8001ec2 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a0e      	ldr	r2, [pc, #56]	; (8001ed0 <HAL_TIM_Base_MspInit+0x7c>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d113      	bne.n	8001ec2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e9a:	4b0c      	ldr	r3, [pc, #48]	; (8001ecc <HAL_TIM_Base_MspInit+0x78>)
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	4a0b      	ldr	r2, [pc, #44]	; (8001ecc <HAL_TIM_Base_MspInit+0x78>)
 8001ea0:	f043 0302 	orr.w	r3, r3, #2
 8001ea4:	61d3      	str	r3, [r2, #28]
 8001ea6:	4b09      	ldr	r3, [pc, #36]	; (8001ecc <HAL_TIM_Base_MspInit+0x78>)
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	60bb      	str	r3, [r7, #8]
 8001eb0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	201d      	movs	r0, #29
 8001eb8:	f000 fce7 	bl	800288a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ebc:	201d      	movs	r0, #29
 8001ebe:	f000 fd00 	bl	80028c2 <HAL_NVIC_EnableIRQ>
}
 8001ec2:	bf00      	nop
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	40000400 	.word	0x40000400

08001ed4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b088      	sub	sp, #32
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001edc:	f107 0310 	add.w	r3, r7, #16
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	605a      	str	r2, [r3, #4]
 8001ee6:	609a      	str	r2, [r3, #8]
 8001ee8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a1c      	ldr	r2, [pc, #112]	; (8001f60 <HAL_UART_MspInit+0x8c>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d131      	bne.n	8001f58 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ef4:	4b1b      	ldr	r3, [pc, #108]	; (8001f64 <HAL_UART_MspInit+0x90>)
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	4a1a      	ldr	r2, [pc, #104]	; (8001f64 <HAL_UART_MspInit+0x90>)
 8001efa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001efe:	6193      	str	r3, [r2, #24]
 8001f00:	4b18      	ldr	r3, [pc, #96]	; (8001f64 <HAL_UART_MspInit+0x90>)
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f08:	60fb      	str	r3, [r7, #12]
 8001f0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f0c:	4b15      	ldr	r3, [pc, #84]	; (8001f64 <HAL_UART_MspInit+0x90>)
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	4a14      	ldr	r2, [pc, #80]	; (8001f64 <HAL_UART_MspInit+0x90>)
 8001f12:	f043 0304 	orr.w	r3, r3, #4
 8001f16:	6193      	str	r3, [r2, #24]
 8001f18:	4b12      	ldr	r3, [pc, #72]	; (8001f64 <HAL_UART_MspInit+0x90>)
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	f003 0304 	and.w	r3, r3, #4
 8001f20:	60bb      	str	r3, [r7, #8]
 8001f22:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f28:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f32:	f107 0310 	add.w	r3, r7, #16
 8001f36:	4619      	mov	r1, r3
 8001f38:	480b      	ldr	r0, [pc, #44]	; (8001f68 <HAL_UART_MspInit+0x94>)
 8001f3a:	f000 fcdd 	bl	80028f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f4c:	f107 0310 	add.w	r3, r7, #16
 8001f50:	4619      	mov	r1, r3
 8001f52:	4805      	ldr	r0, [pc, #20]	; (8001f68 <HAL_UART_MspInit+0x94>)
 8001f54:	f000 fcd0 	bl	80028f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001f58:	bf00      	nop
 8001f5a:	3720      	adds	r7, #32
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40013800 	.word	0x40013800
 8001f64:	40021000 	.word	0x40021000
 8001f68:	40010800 	.word	0x40010800

08001f6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f70:	e7fe      	b.n	8001f70 <NMI_Handler+0x4>

08001f72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f72:	b480      	push	{r7}
 8001f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f76:	e7fe      	b.n	8001f76 <HardFault_Handler+0x4>

08001f78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f7c:	e7fe      	b.n	8001f7c <MemManage_Handler+0x4>

08001f7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f82:	e7fe      	b.n	8001f82 <BusFault_Handler+0x4>

08001f84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f88:	e7fe      	b.n	8001f88 <UsageFault_Handler+0x4>

08001f8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f8e:	bf00      	nop
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bc80      	pop	{r7}
 8001f94:	4770      	bx	lr

08001f96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f96:	b480      	push	{r7}
 8001f98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bc80      	pop	{r7}
 8001fa0:	4770      	bx	lr

08001fa2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bc80      	pop	{r7}
 8001fac:	4770      	bx	lr

08001fae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fb2:	f000 f949 	bl	8002248 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
	...

08001fbc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001fc0:	4802      	ldr	r0, [pc, #8]	; (8001fcc <TIM2_IRQHandler+0x10>)
 8001fc2:	f002 fbd5 	bl	8004770 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	20000a00 	.word	0x20000a00

08001fd0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001fd4:	4802      	ldr	r0, [pc, #8]	; (8001fe0 <TIM3_IRQHandler+0x10>)
 8001fd6:	f002 fbcb 	bl	8004770 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001fda:	bf00      	nop
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	200008c0 	.word	0x200008c0

08001fe4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
	return 1;
 8001fe8:	2301      	movs	r3, #1
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bc80      	pop	{r7}
 8001ff0:	4770      	bx	lr

08001ff2 <_kill>:

int _kill(int pid, int sig)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b082      	sub	sp, #8
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
 8001ffa:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ffc:	f003 fbe2 	bl	80057c4 <__errno>
 8002000:	4603      	mov	r3, r0
 8002002:	2216      	movs	r2, #22
 8002004:	601a      	str	r2, [r3, #0]
	return -1;
 8002006:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800200a:	4618      	mov	r0, r3
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <_exit>:

void _exit (int status)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	b082      	sub	sp, #8
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800201a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7ff ffe7 	bl	8001ff2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002024:	e7fe      	b.n	8002024 <_exit+0x12>

08002026 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b086      	sub	sp, #24
 800202a:	af00      	add	r7, sp, #0
 800202c:	60f8      	str	r0, [r7, #12]
 800202e:	60b9      	str	r1, [r7, #8]
 8002030:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002032:	2300      	movs	r3, #0
 8002034:	617b      	str	r3, [r7, #20]
 8002036:	e00a      	b.n	800204e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002038:	f3af 8000 	nop.w
 800203c:	4601      	mov	r1, r0
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	1c5a      	adds	r2, r3, #1
 8002042:	60ba      	str	r2, [r7, #8]
 8002044:	b2ca      	uxtb	r2, r1
 8002046:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	3301      	adds	r3, #1
 800204c:	617b      	str	r3, [r7, #20]
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	429a      	cmp	r2, r3
 8002054:	dbf0      	blt.n	8002038 <_read+0x12>
	}

return len;
 8002056:	687b      	ldr	r3, [r7, #4]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3718      	adds	r7, #24
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800206c:	2300      	movs	r3, #0
 800206e:	617b      	str	r3, [r7, #20]
 8002070:	e009      	b.n	8002086 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	1c5a      	adds	r2, r3, #1
 8002076:	60ba      	str	r2, [r7, #8]
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	3301      	adds	r3, #1
 8002084:	617b      	str	r3, [r7, #20]
 8002086:	697a      	ldr	r2, [r7, #20]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	429a      	cmp	r2, r3
 800208c:	dbf1      	blt.n	8002072 <_write+0x12>
	}
	return len;
 800208e:	687b      	ldr	r3, [r7, #4]
}
 8002090:	4618      	mov	r0, r3
 8002092:	3718      	adds	r7, #24
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <_close>:

int _close(int file)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
	return -1;
 80020a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bc80      	pop	{r7}
 80020ac:	4770      	bx	lr

080020ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020ae:	b480      	push	{r7}
 80020b0:	b083      	sub	sp, #12
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
 80020b6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020be:	605a      	str	r2, [r3, #4]
	return 0;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bc80      	pop	{r7}
 80020ca:	4770      	bx	lr

080020cc <_isatty>:

int _isatty(int file)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
	return 1;
 80020d4:	2301      	movs	r3, #1
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	bc80      	pop	{r7}
 80020de:	4770      	bx	lr

080020e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
	return 0;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3714      	adds	r7, #20
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bc80      	pop	{r7}
 80020f6:	4770      	bx	lr

080020f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002100:	4a14      	ldr	r2, [pc, #80]	; (8002154 <_sbrk+0x5c>)
 8002102:	4b15      	ldr	r3, [pc, #84]	; (8002158 <_sbrk+0x60>)
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800210c:	4b13      	ldr	r3, [pc, #76]	; (800215c <_sbrk+0x64>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d102      	bne.n	800211a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002114:	4b11      	ldr	r3, [pc, #68]	; (800215c <_sbrk+0x64>)
 8002116:	4a12      	ldr	r2, [pc, #72]	; (8002160 <_sbrk+0x68>)
 8002118:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800211a:	4b10      	ldr	r3, [pc, #64]	; (800215c <_sbrk+0x64>)
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4413      	add	r3, r2
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	429a      	cmp	r2, r3
 8002126:	d207      	bcs.n	8002138 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002128:	f003 fb4c 	bl	80057c4 <__errno>
 800212c:	4603      	mov	r3, r0
 800212e:	220c      	movs	r2, #12
 8002130:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002132:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002136:	e009      	b.n	800214c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002138:	4b08      	ldr	r3, [pc, #32]	; (800215c <_sbrk+0x64>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800213e:	4b07      	ldr	r3, [pc, #28]	; (800215c <_sbrk+0x64>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4413      	add	r3, r2
 8002146:	4a05      	ldr	r2, [pc, #20]	; (800215c <_sbrk+0x64>)
 8002148:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800214a:	68fb      	ldr	r3, [r7, #12]
}
 800214c:	4618      	mov	r0, r3
 800214e:	3718      	adds	r7, #24
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	20005000 	.word	0x20005000
 8002158:	00000400 	.word	0x00000400
 800215c:	200002d4 	.word	0x200002d4
 8002160:	20000ae8 	.word	0x20000ae8

08002164 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002168:	bf00      	nop
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr

08002170 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002170:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002172:	e003      	b.n	800217c <LoopCopyDataInit>

08002174 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002174:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002176:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002178:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800217a:	3104      	adds	r1, #4

0800217c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800217c:	480a      	ldr	r0, [pc, #40]	; (80021a8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800217e:	4b0b      	ldr	r3, [pc, #44]	; (80021ac <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002180:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002182:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002184:	d3f6      	bcc.n	8002174 <CopyDataInit>
  ldr r2, =_sbss
 8002186:	4a0a      	ldr	r2, [pc, #40]	; (80021b0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002188:	e002      	b.n	8002190 <LoopFillZerobss>

0800218a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800218a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800218c:	f842 3b04 	str.w	r3, [r2], #4

08002190 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002190:	4b08      	ldr	r3, [pc, #32]	; (80021b4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002192:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002194:	d3f9      	bcc.n	800218a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002196:	f7ff ffe5 	bl	8002164 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800219a:	f003 fb19 	bl	80057d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800219e:	f7fe ff43 	bl	8001028 <main>
  bx lr
 80021a2:	4770      	bx	lr
  ldr r3, =_sidata
 80021a4:	0800bdc0 	.word	0x0800bdc0
  ldr r0, =_sdata
 80021a8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80021ac:	20000278 	.word	0x20000278
  ldr r2, =_sbss
 80021b0:	20000278 	.word	0x20000278
  ldr r3, = _ebss
 80021b4:	20000ae4 	.word	0x20000ae4

080021b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021b8:	e7fe      	b.n	80021b8 <ADC1_2_IRQHandler>
	...

080021bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021c0:	4b08      	ldr	r3, [pc, #32]	; (80021e4 <HAL_Init+0x28>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a07      	ldr	r2, [pc, #28]	; (80021e4 <HAL_Init+0x28>)
 80021c6:	f043 0310 	orr.w	r3, r3, #16
 80021ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021cc:	2003      	movs	r0, #3
 80021ce:	f000 fb51 	bl	8002874 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021d2:	2000      	movs	r0, #0
 80021d4:	f000 f808 	bl	80021e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021d8:	f7ff fd62 	bl	8001ca0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40022000 	.word	0x40022000

080021e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021f0:	4b12      	ldr	r3, [pc, #72]	; (800223c <HAL_InitTick+0x54>)
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	4b12      	ldr	r3, [pc, #72]	; (8002240 <HAL_InitTick+0x58>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	4619      	mov	r1, r3
 80021fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002202:	fbb2 f3f3 	udiv	r3, r2, r3
 8002206:	4618      	mov	r0, r3
 8002208:	f000 fb69 	bl	80028de <HAL_SYSTICK_Config>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e00e      	b.n	8002234 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2b0f      	cmp	r3, #15
 800221a:	d80a      	bhi.n	8002232 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800221c:	2200      	movs	r2, #0
 800221e:	6879      	ldr	r1, [r7, #4]
 8002220:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002224:	f000 fb31 	bl	800288a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002228:	4a06      	ldr	r2, [pc, #24]	; (8002244 <HAL_InitTick+0x5c>)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800222e:	2300      	movs	r3, #0
 8002230:	e000      	b.n	8002234 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
}
 8002234:	4618      	mov	r0, r3
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	20000008 	.word	0x20000008
 8002240:	20000010 	.word	0x20000010
 8002244:	2000000c 	.word	0x2000000c

08002248 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800224c:	4b05      	ldr	r3, [pc, #20]	; (8002264 <HAL_IncTick+0x1c>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	461a      	mov	r2, r3
 8002252:	4b05      	ldr	r3, [pc, #20]	; (8002268 <HAL_IncTick+0x20>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4413      	add	r3, r2
 8002258:	4a03      	ldr	r2, [pc, #12]	; (8002268 <HAL_IncTick+0x20>)
 800225a:	6013      	str	r3, [r2, #0]
}
 800225c:	bf00      	nop
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr
 8002264:	20000010 	.word	0x20000010
 8002268:	20000ad0 	.word	0x20000ad0

0800226c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  return uwTick;
 8002270:	4b02      	ldr	r3, [pc, #8]	; (800227c <HAL_GetTick+0x10>)
 8002272:	681b      	ldr	r3, [r3, #0]
}
 8002274:	4618      	mov	r0, r3
 8002276:	46bd      	mov	sp, r7
 8002278:	bc80      	pop	{r7}
 800227a:	4770      	bx	lr
 800227c:	20000ad0 	.word	0x20000ad0

08002280 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002288:	f7ff fff0 	bl	800226c <HAL_GetTick>
 800228c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002298:	d005      	beq.n	80022a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800229a:	4b0a      	ldr	r3, [pc, #40]	; (80022c4 <HAL_Delay+0x44>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	461a      	mov	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	4413      	add	r3, r2
 80022a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022a6:	bf00      	nop
 80022a8:	f7ff ffe0 	bl	800226c <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d8f7      	bhi.n	80022a8 <HAL_Delay+0x28>
  {
  }
}
 80022b8:	bf00      	nop
 80022ba:	bf00      	nop
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	20000010 	.word	0x20000010

080022c8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022d0:	2300      	movs	r3, #0
 80022d2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80022d4:	2300      	movs	r3, #0
 80022d6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80022d8:	2300      	movs	r3, #0
 80022da:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80022dc:	2300      	movs	r3, #0
 80022de:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e0be      	b.n	8002468 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d109      	bne.n	800230c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f7ff fcfc 	bl	8001d04 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f000 f9ab 	bl	8002668 <ADC_ConversionStop_Disable>
 8002312:	4603      	mov	r3, r0
 8002314:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231a:	f003 0310 	and.w	r3, r3, #16
 800231e:	2b00      	cmp	r3, #0
 8002320:	f040 8099 	bne.w	8002456 <HAL_ADC_Init+0x18e>
 8002324:	7dfb      	ldrb	r3, [r7, #23]
 8002326:	2b00      	cmp	r3, #0
 8002328:	f040 8095 	bne.w	8002456 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002330:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002334:	f023 0302 	bic.w	r3, r3, #2
 8002338:	f043 0202 	orr.w	r2, r3, #2
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002348:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	7b1b      	ldrb	r3, [r3, #12]
 800234e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002350:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002352:	68ba      	ldr	r2, [r7, #8]
 8002354:	4313      	orrs	r3, r2
 8002356:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002360:	d003      	beq.n	800236a <HAL_ADC_Init+0xa2>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d102      	bne.n	8002370 <HAL_ADC_Init+0xa8>
 800236a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800236e:	e000      	b.n	8002372 <HAL_ADC_Init+0xaa>
 8002370:	2300      	movs	r3, #0
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	4313      	orrs	r3, r2
 8002376:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	7d1b      	ldrb	r3, [r3, #20]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d119      	bne.n	80023b4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	7b1b      	ldrb	r3, [r3, #12]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d109      	bne.n	800239c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	3b01      	subs	r3, #1
 800238e:	035a      	lsls	r2, r3, #13
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	4313      	orrs	r3, r2
 8002394:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002398:	613b      	str	r3, [r7, #16]
 800239a:	e00b      	b.n	80023b4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a0:	f043 0220 	orr.w	r2, r3, #32
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ac:	f043 0201 	orr.w	r2, r3, #1
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	430a      	orrs	r2, r1
 80023c6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	689a      	ldr	r2, [r3, #8]
 80023ce:	4b28      	ldr	r3, [pc, #160]	; (8002470 <HAL_ADC_Init+0x1a8>)
 80023d0:	4013      	ands	r3, r2
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	6812      	ldr	r2, [r2, #0]
 80023d6:	68b9      	ldr	r1, [r7, #8]
 80023d8:	430b      	orrs	r3, r1
 80023da:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023e4:	d003      	beq.n	80023ee <HAL_ADC_Init+0x126>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d104      	bne.n	80023f8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	3b01      	subs	r3, #1
 80023f4:	051b      	lsls	r3, r3, #20
 80023f6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fe:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	430a      	orrs	r2, r1
 800240a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	689a      	ldr	r2, [r3, #8]
 8002412:	4b18      	ldr	r3, [pc, #96]	; (8002474 <HAL_ADC_Init+0x1ac>)
 8002414:	4013      	ands	r3, r2
 8002416:	68ba      	ldr	r2, [r7, #8]
 8002418:	429a      	cmp	r2, r3
 800241a:	d10b      	bne.n	8002434 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002426:	f023 0303 	bic.w	r3, r3, #3
 800242a:	f043 0201 	orr.w	r2, r3, #1
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002432:	e018      	b.n	8002466 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002438:	f023 0312 	bic.w	r3, r3, #18
 800243c:	f043 0210 	orr.w	r2, r3, #16
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002448:	f043 0201 	orr.w	r2, r3, #1
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002454:	e007      	b.n	8002466 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800245a:	f043 0210 	orr.w	r2, r3, #16
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002466:	7dfb      	ldrb	r3, [r7, #23]
}
 8002468:	4618      	mov	r0, r3
 800246a:	3718      	adds	r7, #24
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	ffe1f7fd 	.word	0xffe1f7fd
 8002474:	ff1f0efe 	.word	0xff1f0efe

08002478 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002482:	2300      	movs	r3, #0
 8002484:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002486:	2300      	movs	r3, #0
 8002488:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002490:	2b01      	cmp	r3, #1
 8002492:	d101      	bne.n	8002498 <HAL_ADC_ConfigChannel+0x20>
 8002494:	2302      	movs	r3, #2
 8002496:	e0dc      	b.n	8002652 <HAL_ADC_ConfigChannel+0x1da>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	2b06      	cmp	r3, #6
 80024a6:	d81c      	bhi.n	80024e2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685a      	ldr	r2, [r3, #4]
 80024b2:	4613      	mov	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	4413      	add	r3, r2
 80024b8:	3b05      	subs	r3, #5
 80024ba:	221f      	movs	r2, #31
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	43db      	mvns	r3, r3
 80024c2:	4019      	ands	r1, r3
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	6818      	ldr	r0, [r3, #0]
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685a      	ldr	r2, [r3, #4]
 80024cc:	4613      	mov	r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	4413      	add	r3, r2
 80024d2:	3b05      	subs	r3, #5
 80024d4:	fa00 f203 	lsl.w	r2, r0, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	430a      	orrs	r2, r1
 80024de:	635a      	str	r2, [r3, #52]	; 0x34
 80024e0:	e03c      	b.n	800255c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	2b0c      	cmp	r3, #12
 80024e8:	d81c      	bhi.n	8002524 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685a      	ldr	r2, [r3, #4]
 80024f4:	4613      	mov	r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	4413      	add	r3, r2
 80024fa:	3b23      	subs	r3, #35	; 0x23
 80024fc:	221f      	movs	r2, #31
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	43db      	mvns	r3, r3
 8002504:	4019      	ands	r1, r3
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	6818      	ldr	r0, [r3, #0]
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685a      	ldr	r2, [r3, #4]
 800250e:	4613      	mov	r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	4413      	add	r3, r2
 8002514:	3b23      	subs	r3, #35	; 0x23
 8002516:	fa00 f203 	lsl.w	r2, r0, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	430a      	orrs	r2, r1
 8002520:	631a      	str	r2, [r3, #48]	; 0x30
 8002522:	e01b      	b.n	800255c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685a      	ldr	r2, [r3, #4]
 800252e:	4613      	mov	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4413      	add	r3, r2
 8002534:	3b41      	subs	r3, #65	; 0x41
 8002536:	221f      	movs	r2, #31
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	43db      	mvns	r3, r3
 800253e:	4019      	ands	r1, r3
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	6818      	ldr	r0, [r3, #0]
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685a      	ldr	r2, [r3, #4]
 8002548:	4613      	mov	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4413      	add	r3, r2
 800254e:	3b41      	subs	r3, #65	; 0x41
 8002550:	fa00 f203 	lsl.w	r2, r0, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	430a      	orrs	r2, r1
 800255a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2b09      	cmp	r3, #9
 8002562:	d91c      	bls.n	800259e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68d9      	ldr	r1, [r3, #12]
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	4613      	mov	r3, r2
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	4413      	add	r3, r2
 8002574:	3b1e      	subs	r3, #30
 8002576:	2207      	movs	r2, #7
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	43db      	mvns	r3, r3
 800257e:	4019      	ands	r1, r3
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	6898      	ldr	r0, [r3, #8]
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	4613      	mov	r3, r2
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	4413      	add	r3, r2
 800258e:	3b1e      	subs	r3, #30
 8002590:	fa00 f203 	lsl.w	r2, r0, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	430a      	orrs	r2, r1
 800259a:	60da      	str	r2, [r3, #12]
 800259c:	e019      	b.n	80025d2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6919      	ldr	r1, [r3, #16]
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	4613      	mov	r3, r2
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	4413      	add	r3, r2
 80025ae:	2207      	movs	r2, #7
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	43db      	mvns	r3, r3
 80025b6:	4019      	ands	r1, r3
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	6898      	ldr	r0, [r3, #8]
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	4613      	mov	r3, r2
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	4413      	add	r3, r2
 80025c6:	fa00 f203 	lsl.w	r2, r0, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	430a      	orrs	r2, r1
 80025d0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2b10      	cmp	r3, #16
 80025d8:	d003      	beq.n	80025e2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80025de:	2b11      	cmp	r3, #17
 80025e0:	d132      	bne.n	8002648 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a1d      	ldr	r2, [pc, #116]	; (800265c <HAL_ADC_ConfigChannel+0x1e4>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d125      	bne.n	8002638 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d126      	bne.n	8002648 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	689a      	ldr	r2, [r3, #8]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002608:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2b10      	cmp	r3, #16
 8002610:	d11a      	bne.n	8002648 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002612:	4b13      	ldr	r3, [pc, #76]	; (8002660 <HAL_ADC_ConfigChannel+0x1e8>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a13      	ldr	r2, [pc, #76]	; (8002664 <HAL_ADC_ConfigChannel+0x1ec>)
 8002618:	fba2 2303 	umull	r2, r3, r2, r3
 800261c:	0c9a      	lsrs	r2, r3, #18
 800261e:	4613      	mov	r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4413      	add	r3, r2
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002628:	e002      	b.n	8002630 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	3b01      	subs	r3, #1
 800262e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1f9      	bne.n	800262a <HAL_ADC_ConfigChannel+0x1b2>
 8002636:	e007      	b.n	8002648 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263c:	f043 0220 	orr.w	r2, r3, #32
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002650:	7bfb      	ldrb	r3, [r7, #15]
}
 8002652:	4618      	mov	r0, r3
 8002654:	3714      	adds	r7, #20
 8002656:	46bd      	mov	sp, r7
 8002658:	bc80      	pop	{r7}
 800265a:	4770      	bx	lr
 800265c:	40012400 	.word	0x40012400
 8002660:	20000008 	.word	0x20000008
 8002664:	431bde83 	.word	0x431bde83

08002668 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002670:	2300      	movs	r3, #0
 8002672:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b01      	cmp	r3, #1
 8002680:	d127      	bne.n	80026d2 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	689a      	ldr	r2, [r3, #8]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f022 0201 	bic.w	r2, r2, #1
 8002690:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002692:	f7ff fdeb 	bl	800226c <HAL_GetTick>
 8002696:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002698:	e014      	b.n	80026c4 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800269a:	f7ff fde7 	bl	800226c <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d90d      	bls.n	80026c4 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ac:	f043 0210 	orr.w	r2, r3, #16
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b8:	f043 0201 	orr.w	r2, r3, #1
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e007      	b.n	80026d4 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d0e3      	beq.n	800269a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f003 0307 	and.w	r3, r3, #7
 80026ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026ec:	4b0c      	ldr	r3, [pc, #48]	; (8002720 <__NVIC_SetPriorityGrouping+0x44>)
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026f2:	68ba      	ldr	r2, [r7, #8]
 80026f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026f8:	4013      	ands	r3, r2
 80026fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002704:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800270c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800270e:	4a04      	ldr	r2, [pc, #16]	; (8002720 <__NVIC_SetPriorityGrouping+0x44>)
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	60d3      	str	r3, [r2, #12]
}
 8002714:	bf00      	nop
 8002716:	3714      	adds	r7, #20
 8002718:	46bd      	mov	sp, r7
 800271a:	bc80      	pop	{r7}
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	e000ed00 	.word	0xe000ed00

08002724 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002728:	4b04      	ldr	r3, [pc, #16]	; (800273c <__NVIC_GetPriorityGrouping+0x18>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	0a1b      	lsrs	r3, r3, #8
 800272e:	f003 0307 	and.w	r3, r3, #7
}
 8002732:	4618      	mov	r0, r3
 8002734:	46bd      	mov	sp, r7
 8002736:	bc80      	pop	{r7}
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	e000ed00 	.word	0xe000ed00

08002740 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	4603      	mov	r3, r0
 8002748:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800274a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274e:	2b00      	cmp	r3, #0
 8002750:	db0b      	blt.n	800276a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002752:	79fb      	ldrb	r3, [r7, #7]
 8002754:	f003 021f 	and.w	r2, r3, #31
 8002758:	4906      	ldr	r1, [pc, #24]	; (8002774 <__NVIC_EnableIRQ+0x34>)
 800275a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275e:	095b      	lsrs	r3, r3, #5
 8002760:	2001      	movs	r0, #1
 8002762:	fa00 f202 	lsl.w	r2, r0, r2
 8002766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800276a:	bf00      	nop
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr
 8002774:	e000e100 	.word	0xe000e100

08002778 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	4603      	mov	r3, r0
 8002780:	6039      	str	r1, [r7, #0]
 8002782:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002788:	2b00      	cmp	r3, #0
 800278a:	db0a      	blt.n	80027a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	b2da      	uxtb	r2, r3
 8002790:	490c      	ldr	r1, [pc, #48]	; (80027c4 <__NVIC_SetPriority+0x4c>)
 8002792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002796:	0112      	lsls	r2, r2, #4
 8002798:	b2d2      	uxtb	r2, r2
 800279a:	440b      	add	r3, r1
 800279c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027a0:	e00a      	b.n	80027b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	b2da      	uxtb	r2, r3
 80027a6:	4908      	ldr	r1, [pc, #32]	; (80027c8 <__NVIC_SetPriority+0x50>)
 80027a8:	79fb      	ldrb	r3, [r7, #7]
 80027aa:	f003 030f 	and.w	r3, r3, #15
 80027ae:	3b04      	subs	r3, #4
 80027b0:	0112      	lsls	r2, r2, #4
 80027b2:	b2d2      	uxtb	r2, r2
 80027b4:	440b      	add	r3, r1
 80027b6:	761a      	strb	r2, [r3, #24]
}
 80027b8:	bf00      	nop
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	bc80      	pop	{r7}
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	e000e100 	.word	0xe000e100
 80027c8:	e000ed00 	.word	0xe000ed00

080027cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b089      	sub	sp, #36	; 0x24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f003 0307 	and.w	r3, r3, #7
 80027de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	f1c3 0307 	rsb	r3, r3, #7
 80027e6:	2b04      	cmp	r3, #4
 80027e8:	bf28      	it	cs
 80027ea:	2304      	movcs	r3, #4
 80027ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	3304      	adds	r3, #4
 80027f2:	2b06      	cmp	r3, #6
 80027f4:	d902      	bls.n	80027fc <NVIC_EncodePriority+0x30>
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	3b03      	subs	r3, #3
 80027fa:	e000      	b.n	80027fe <NVIC_EncodePriority+0x32>
 80027fc:	2300      	movs	r3, #0
 80027fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002800:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	43da      	mvns	r2, r3
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	401a      	ands	r2, r3
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002814:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	fa01 f303 	lsl.w	r3, r1, r3
 800281e:	43d9      	mvns	r1, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002824:	4313      	orrs	r3, r2
         );
}
 8002826:	4618      	mov	r0, r3
 8002828:	3724      	adds	r7, #36	; 0x24
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr

08002830 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	3b01      	subs	r3, #1
 800283c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002840:	d301      	bcc.n	8002846 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002842:	2301      	movs	r3, #1
 8002844:	e00f      	b.n	8002866 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002846:	4a0a      	ldr	r2, [pc, #40]	; (8002870 <SysTick_Config+0x40>)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	3b01      	subs	r3, #1
 800284c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800284e:	210f      	movs	r1, #15
 8002850:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002854:	f7ff ff90 	bl	8002778 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002858:	4b05      	ldr	r3, [pc, #20]	; (8002870 <SysTick_Config+0x40>)
 800285a:	2200      	movs	r2, #0
 800285c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800285e:	4b04      	ldr	r3, [pc, #16]	; (8002870 <SysTick_Config+0x40>)
 8002860:	2207      	movs	r2, #7
 8002862:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	e000e010 	.word	0xe000e010

08002874 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f7ff ff2d 	bl	80026dc <__NVIC_SetPriorityGrouping>
}
 8002882:	bf00      	nop
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800288a:	b580      	push	{r7, lr}
 800288c:	b086      	sub	sp, #24
 800288e:	af00      	add	r7, sp, #0
 8002890:	4603      	mov	r3, r0
 8002892:	60b9      	str	r1, [r7, #8]
 8002894:	607a      	str	r2, [r7, #4]
 8002896:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002898:	2300      	movs	r3, #0
 800289a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800289c:	f7ff ff42 	bl	8002724 <__NVIC_GetPriorityGrouping>
 80028a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	68b9      	ldr	r1, [r7, #8]
 80028a6:	6978      	ldr	r0, [r7, #20]
 80028a8:	f7ff ff90 	bl	80027cc <NVIC_EncodePriority>
 80028ac:	4602      	mov	r2, r0
 80028ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028b2:	4611      	mov	r1, r2
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff ff5f 	bl	8002778 <__NVIC_SetPriority>
}
 80028ba:	bf00      	nop
 80028bc:	3718      	adds	r7, #24
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b082      	sub	sp, #8
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	4603      	mov	r3, r0
 80028ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff ff35 	bl	8002740 <__NVIC_EnableIRQ>
}
 80028d6:	bf00      	nop
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b082      	sub	sp, #8
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7ff ffa2 	bl	8002830 <SysTick_Config>
 80028ec:	4603      	mov	r3, r0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
	...

080028f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b08b      	sub	sp, #44	; 0x2c
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002902:	2300      	movs	r3, #0
 8002904:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002906:	2300      	movs	r3, #0
 8002908:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800290a:	e169      	b.n	8002be0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800290c:	2201      	movs	r2, #1
 800290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	69fa      	ldr	r2, [r7, #28]
 800291c:	4013      	ands	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	429a      	cmp	r2, r3
 8002926:	f040 8158 	bne.w	8002bda <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	4a9a      	ldr	r2, [pc, #616]	; (8002b98 <HAL_GPIO_Init+0x2a0>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d05e      	beq.n	80029f2 <HAL_GPIO_Init+0xfa>
 8002934:	4a98      	ldr	r2, [pc, #608]	; (8002b98 <HAL_GPIO_Init+0x2a0>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d875      	bhi.n	8002a26 <HAL_GPIO_Init+0x12e>
 800293a:	4a98      	ldr	r2, [pc, #608]	; (8002b9c <HAL_GPIO_Init+0x2a4>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d058      	beq.n	80029f2 <HAL_GPIO_Init+0xfa>
 8002940:	4a96      	ldr	r2, [pc, #600]	; (8002b9c <HAL_GPIO_Init+0x2a4>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d86f      	bhi.n	8002a26 <HAL_GPIO_Init+0x12e>
 8002946:	4a96      	ldr	r2, [pc, #600]	; (8002ba0 <HAL_GPIO_Init+0x2a8>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d052      	beq.n	80029f2 <HAL_GPIO_Init+0xfa>
 800294c:	4a94      	ldr	r2, [pc, #592]	; (8002ba0 <HAL_GPIO_Init+0x2a8>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d869      	bhi.n	8002a26 <HAL_GPIO_Init+0x12e>
 8002952:	4a94      	ldr	r2, [pc, #592]	; (8002ba4 <HAL_GPIO_Init+0x2ac>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d04c      	beq.n	80029f2 <HAL_GPIO_Init+0xfa>
 8002958:	4a92      	ldr	r2, [pc, #584]	; (8002ba4 <HAL_GPIO_Init+0x2ac>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d863      	bhi.n	8002a26 <HAL_GPIO_Init+0x12e>
 800295e:	4a92      	ldr	r2, [pc, #584]	; (8002ba8 <HAL_GPIO_Init+0x2b0>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d046      	beq.n	80029f2 <HAL_GPIO_Init+0xfa>
 8002964:	4a90      	ldr	r2, [pc, #576]	; (8002ba8 <HAL_GPIO_Init+0x2b0>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d85d      	bhi.n	8002a26 <HAL_GPIO_Init+0x12e>
 800296a:	2b12      	cmp	r3, #18
 800296c:	d82a      	bhi.n	80029c4 <HAL_GPIO_Init+0xcc>
 800296e:	2b12      	cmp	r3, #18
 8002970:	d859      	bhi.n	8002a26 <HAL_GPIO_Init+0x12e>
 8002972:	a201      	add	r2, pc, #4	; (adr r2, 8002978 <HAL_GPIO_Init+0x80>)
 8002974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002978:	080029f3 	.word	0x080029f3
 800297c:	080029cd 	.word	0x080029cd
 8002980:	080029df 	.word	0x080029df
 8002984:	08002a21 	.word	0x08002a21
 8002988:	08002a27 	.word	0x08002a27
 800298c:	08002a27 	.word	0x08002a27
 8002990:	08002a27 	.word	0x08002a27
 8002994:	08002a27 	.word	0x08002a27
 8002998:	08002a27 	.word	0x08002a27
 800299c:	08002a27 	.word	0x08002a27
 80029a0:	08002a27 	.word	0x08002a27
 80029a4:	08002a27 	.word	0x08002a27
 80029a8:	08002a27 	.word	0x08002a27
 80029ac:	08002a27 	.word	0x08002a27
 80029b0:	08002a27 	.word	0x08002a27
 80029b4:	08002a27 	.word	0x08002a27
 80029b8:	08002a27 	.word	0x08002a27
 80029bc:	080029d5 	.word	0x080029d5
 80029c0:	080029e9 	.word	0x080029e9
 80029c4:	4a79      	ldr	r2, [pc, #484]	; (8002bac <HAL_GPIO_Init+0x2b4>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d013      	beq.n	80029f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80029ca:	e02c      	b.n	8002a26 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	623b      	str	r3, [r7, #32]
          break;
 80029d2:	e029      	b.n	8002a28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	3304      	adds	r3, #4
 80029da:	623b      	str	r3, [r7, #32]
          break;
 80029dc:	e024      	b.n	8002a28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	3308      	adds	r3, #8
 80029e4:	623b      	str	r3, [r7, #32]
          break;
 80029e6:	e01f      	b.n	8002a28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	330c      	adds	r3, #12
 80029ee:	623b      	str	r3, [r7, #32]
          break;
 80029f0:	e01a      	b.n	8002a28 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d102      	bne.n	8002a00 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80029fa:	2304      	movs	r3, #4
 80029fc:	623b      	str	r3, [r7, #32]
          break;
 80029fe:	e013      	b.n	8002a28 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d105      	bne.n	8002a14 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a08:	2308      	movs	r3, #8
 8002a0a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	69fa      	ldr	r2, [r7, #28]
 8002a10:	611a      	str	r2, [r3, #16]
          break;
 8002a12:	e009      	b.n	8002a28 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a14:	2308      	movs	r3, #8
 8002a16:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	69fa      	ldr	r2, [r7, #28]
 8002a1c:	615a      	str	r2, [r3, #20]
          break;
 8002a1e:	e003      	b.n	8002a28 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a20:	2300      	movs	r3, #0
 8002a22:	623b      	str	r3, [r7, #32]
          break;
 8002a24:	e000      	b.n	8002a28 <HAL_GPIO_Init+0x130>
          break;
 8002a26:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	2bff      	cmp	r3, #255	; 0xff
 8002a2c:	d801      	bhi.n	8002a32 <HAL_GPIO_Init+0x13a>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	e001      	b.n	8002a36 <HAL_GPIO_Init+0x13e>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	3304      	adds	r3, #4
 8002a36:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	2bff      	cmp	r3, #255	; 0xff
 8002a3c:	d802      	bhi.n	8002a44 <HAL_GPIO_Init+0x14c>
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	e002      	b.n	8002a4a <HAL_GPIO_Init+0x152>
 8002a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a46:	3b08      	subs	r3, #8
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	210f      	movs	r1, #15
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	fa01 f303 	lsl.w	r3, r1, r3
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	401a      	ands	r2, r3
 8002a5c:	6a39      	ldr	r1, [r7, #32]
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	fa01 f303 	lsl.w	r3, r1, r3
 8002a64:	431a      	orrs	r2, r3
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f000 80b1 	beq.w	8002bda <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a78:	4b4d      	ldr	r3, [pc, #308]	; (8002bb0 <HAL_GPIO_Init+0x2b8>)
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	4a4c      	ldr	r2, [pc, #304]	; (8002bb0 <HAL_GPIO_Init+0x2b8>)
 8002a7e:	f043 0301 	orr.w	r3, r3, #1
 8002a82:	6193      	str	r3, [r2, #24]
 8002a84:	4b4a      	ldr	r3, [pc, #296]	; (8002bb0 <HAL_GPIO_Init+0x2b8>)
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	60bb      	str	r3, [r7, #8]
 8002a8e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a90:	4a48      	ldr	r2, [pc, #288]	; (8002bb4 <HAL_GPIO_Init+0x2bc>)
 8002a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a94:	089b      	lsrs	r3, r3, #2
 8002a96:	3302      	adds	r3, #2
 8002a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a9c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa0:	f003 0303 	and.w	r3, r3, #3
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	220f      	movs	r2, #15
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	43db      	mvns	r3, r3
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a40      	ldr	r2, [pc, #256]	; (8002bb8 <HAL_GPIO_Init+0x2c0>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d013      	beq.n	8002ae4 <HAL_GPIO_Init+0x1ec>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a3f      	ldr	r2, [pc, #252]	; (8002bbc <HAL_GPIO_Init+0x2c4>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d00d      	beq.n	8002ae0 <HAL_GPIO_Init+0x1e8>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a3e      	ldr	r2, [pc, #248]	; (8002bc0 <HAL_GPIO_Init+0x2c8>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d007      	beq.n	8002adc <HAL_GPIO_Init+0x1e4>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a3d      	ldr	r2, [pc, #244]	; (8002bc4 <HAL_GPIO_Init+0x2cc>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d101      	bne.n	8002ad8 <HAL_GPIO_Init+0x1e0>
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e006      	b.n	8002ae6 <HAL_GPIO_Init+0x1ee>
 8002ad8:	2304      	movs	r3, #4
 8002ada:	e004      	b.n	8002ae6 <HAL_GPIO_Init+0x1ee>
 8002adc:	2302      	movs	r3, #2
 8002ade:	e002      	b.n	8002ae6 <HAL_GPIO_Init+0x1ee>
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e000      	b.n	8002ae6 <HAL_GPIO_Init+0x1ee>
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ae8:	f002 0203 	and.w	r2, r2, #3
 8002aec:	0092      	lsls	r2, r2, #2
 8002aee:	4093      	lsls	r3, r2
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002af6:	492f      	ldr	r1, [pc, #188]	; (8002bb4 <HAL_GPIO_Init+0x2bc>)
 8002af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afa:	089b      	lsrs	r3, r3, #2
 8002afc:	3302      	adds	r3, #2
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d006      	beq.n	8002b1e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002b10:	4b2d      	ldr	r3, [pc, #180]	; (8002bc8 <HAL_GPIO_Init+0x2d0>)
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	492c      	ldr	r1, [pc, #176]	; (8002bc8 <HAL_GPIO_Init+0x2d0>)
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	600b      	str	r3, [r1, #0]
 8002b1c:	e006      	b.n	8002b2c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b1e:	4b2a      	ldr	r3, [pc, #168]	; (8002bc8 <HAL_GPIO_Init+0x2d0>)
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	43db      	mvns	r3, r3
 8002b26:	4928      	ldr	r1, [pc, #160]	; (8002bc8 <HAL_GPIO_Init+0x2d0>)
 8002b28:	4013      	ands	r3, r2
 8002b2a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d006      	beq.n	8002b46 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002b38:	4b23      	ldr	r3, [pc, #140]	; (8002bc8 <HAL_GPIO_Init+0x2d0>)
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	4922      	ldr	r1, [pc, #136]	; (8002bc8 <HAL_GPIO_Init+0x2d0>)
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	604b      	str	r3, [r1, #4]
 8002b44:	e006      	b.n	8002b54 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b46:	4b20      	ldr	r3, [pc, #128]	; (8002bc8 <HAL_GPIO_Init+0x2d0>)
 8002b48:	685a      	ldr	r2, [r3, #4]
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	491e      	ldr	r1, [pc, #120]	; (8002bc8 <HAL_GPIO_Init+0x2d0>)
 8002b50:	4013      	ands	r3, r2
 8002b52:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d006      	beq.n	8002b6e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b60:	4b19      	ldr	r3, [pc, #100]	; (8002bc8 <HAL_GPIO_Init+0x2d0>)
 8002b62:	689a      	ldr	r2, [r3, #8]
 8002b64:	4918      	ldr	r1, [pc, #96]	; (8002bc8 <HAL_GPIO_Init+0x2d0>)
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	608b      	str	r3, [r1, #8]
 8002b6c:	e006      	b.n	8002b7c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b6e:	4b16      	ldr	r3, [pc, #88]	; (8002bc8 <HAL_GPIO_Init+0x2d0>)
 8002b70:	689a      	ldr	r2, [r3, #8]
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	43db      	mvns	r3, r3
 8002b76:	4914      	ldr	r1, [pc, #80]	; (8002bc8 <HAL_GPIO_Init+0x2d0>)
 8002b78:	4013      	ands	r3, r2
 8002b7a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d021      	beq.n	8002bcc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b88:	4b0f      	ldr	r3, [pc, #60]	; (8002bc8 <HAL_GPIO_Init+0x2d0>)
 8002b8a:	68da      	ldr	r2, [r3, #12]
 8002b8c:	490e      	ldr	r1, [pc, #56]	; (8002bc8 <HAL_GPIO_Init+0x2d0>)
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	60cb      	str	r3, [r1, #12]
 8002b94:	e021      	b.n	8002bda <HAL_GPIO_Init+0x2e2>
 8002b96:	bf00      	nop
 8002b98:	10320000 	.word	0x10320000
 8002b9c:	10310000 	.word	0x10310000
 8002ba0:	10220000 	.word	0x10220000
 8002ba4:	10210000 	.word	0x10210000
 8002ba8:	10120000 	.word	0x10120000
 8002bac:	10110000 	.word	0x10110000
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	40010000 	.word	0x40010000
 8002bb8:	40010800 	.word	0x40010800
 8002bbc:	40010c00 	.word	0x40010c00
 8002bc0:	40011000 	.word	0x40011000
 8002bc4:	40011400 	.word	0x40011400
 8002bc8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002bcc:	4b0b      	ldr	r3, [pc, #44]	; (8002bfc <HAL_GPIO_Init+0x304>)
 8002bce:	68da      	ldr	r2, [r3, #12]
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	43db      	mvns	r3, r3
 8002bd4:	4909      	ldr	r1, [pc, #36]	; (8002bfc <HAL_GPIO_Init+0x304>)
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bdc:	3301      	adds	r3, #1
 8002bde:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be6:	fa22 f303 	lsr.w	r3, r2, r3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f47f ae8e 	bne.w	800290c <HAL_GPIO_Init+0x14>
  }
}
 8002bf0:	bf00      	nop
 8002bf2:	bf00      	nop
 8002bf4:	372c      	adds	r7, #44	; 0x2c
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bc80      	pop	{r7}
 8002bfa:	4770      	bx	lr
 8002bfc:	40010400 	.word	0x40010400

08002c00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	460b      	mov	r3, r1
 8002c0a:	807b      	strh	r3, [r7, #2]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c10:	787b      	ldrb	r3, [r7, #1]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d003      	beq.n	8002c1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c16:	887a      	ldrh	r2, [r7, #2]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002c1c:	e003      	b.n	8002c26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c1e:	887b      	ldrh	r3, [r7, #2]
 8002c20:	041a      	lsls	r2, r3, #16
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	611a      	str	r2, [r3, #16]
}
 8002c26:	bf00      	nop
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bc80      	pop	{r7}
 8002c2e:	4770      	bx	lr

08002c30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e12b      	b.n	8002e9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d106      	bne.n	8002c5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f7ff f890 	bl	8001d7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2224      	movs	r2, #36	; 0x24
 8002c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f022 0201 	bic.w	r2, r2, #1
 8002c72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c94:	f001 fba0 	bl	80043d8 <HAL_RCC_GetPCLK1Freq>
 8002c98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	4a81      	ldr	r2, [pc, #516]	; (8002ea4 <HAL_I2C_Init+0x274>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d807      	bhi.n	8002cb4 <HAL_I2C_Init+0x84>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	4a80      	ldr	r2, [pc, #512]	; (8002ea8 <HAL_I2C_Init+0x278>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	bf94      	ite	ls
 8002cac:	2301      	movls	r3, #1
 8002cae:	2300      	movhi	r3, #0
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	e006      	b.n	8002cc2 <HAL_I2C_Init+0x92>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	4a7d      	ldr	r2, [pc, #500]	; (8002eac <HAL_I2C_Init+0x27c>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	bf94      	ite	ls
 8002cbc:	2301      	movls	r3, #1
 8002cbe:	2300      	movhi	r3, #0
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e0e7      	b.n	8002e9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	4a78      	ldr	r2, [pc, #480]	; (8002eb0 <HAL_I2C_Init+0x280>)
 8002cce:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd2:	0c9b      	lsrs	r3, r3, #18
 8002cd4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68ba      	ldr	r2, [r7, #8]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	4a6a      	ldr	r2, [pc, #424]	; (8002ea4 <HAL_I2C_Init+0x274>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d802      	bhi.n	8002d04 <HAL_I2C_Init+0xd4>
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	3301      	adds	r3, #1
 8002d02:	e009      	b.n	8002d18 <HAL_I2C_Init+0xe8>
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d0a:	fb02 f303 	mul.w	r3, r2, r3
 8002d0e:	4a69      	ldr	r2, [pc, #420]	; (8002eb4 <HAL_I2C_Init+0x284>)
 8002d10:	fba2 2303 	umull	r2, r3, r2, r3
 8002d14:	099b      	lsrs	r3, r3, #6
 8002d16:	3301      	adds	r3, #1
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	6812      	ldr	r2, [r2, #0]
 8002d1c:	430b      	orrs	r3, r1
 8002d1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	495c      	ldr	r1, [pc, #368]	; (8002ea4 <HAL_I2C_Init+0x274>)
 8002d34:	428b      	cmp	r3, r1
 8002d36:	d819      	bhi.n	8002d6c <HAL_I2C_Init+0x13c>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	1e59      	subs	r1, r3, #1
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d46:	1c59      	adds	r1, r3, #1
 8002d48:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d4c:	400b      	ands	r3, r1
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00a      	beq.n	8002d68 <HAL_I2C_Init+0x138>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	1e59      	subs	r1, r3, #1
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d60:	3301      	adds	r3, #1
 8002d62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d66:	e051      	b.n	8002e0c <HAL_I2C_Init+0x1dc>
 8002d68:	2304      	movs	r3, #4
 8002d6a:	e04f      	b.n	8002e0c <HAL_I2C_Init+0x1dc>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d111      	bne.n	8002d98 <HAL_I2C_Init+0x168>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	1e58      	subs	r0, r3, #1
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6859      	ldr	r1, [r3, #4]
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	440b      	add	r3, r1
 8002d82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d86:	3301      	adds	r3, #1
 8002d88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	bf0c      	ite	eq
 8002d90:	2301      	moveq	r3, #1
 8002d92:	2300      	movne	r3, #0
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	e012      	b.n	8002dbe <HAL_I2C_Init+0x18e>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	1e58      	subs	r0, r3, #1
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6859      	ldr	r1, [r3, #4]
 8002da0:	460b      	mov	r3, r1
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	440b      	add	r3, r1
 8002da6:	0099      	lsls	r1, r3, #2
 8002da8:	440b      	add	r3, r1
 8002daa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dae:	3301      	adds	r3, #1
 8002db0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	bf0c      	ite	eq
 8002db8:	2301      	moveq	r3, #1
 8002dba:	2300      	movne	r3, #0
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <HAL_I2C_Init+0x196>
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e022      	b.n	8002e0c <HAL_I2C_Init+0x1dc>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10e      	bne.n	8002dec <HAL_I2C_Init+0x1bc>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	1e58      	subs	r0, r3, #1
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6859      	ldr	r1, [r3, #4]
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	440b      	add	r3, r1
 8002ddc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002de0:	3301      	adds	r3, #1
 8002de2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002de6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dea:	e00f      	b.n	8002e0c <HAL_I2C_Init+0x1dc>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	1e58      	subs	r0, r3, #1
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6859      	ldr	r1, [r3, #4]
 8002df4:	460b      	mov	r3, r1
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	0099      	lsls	r1, r3, #2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e02:	3301      	adds	r3, #1
 8002e04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e0c:	6879      	ldr	r1, [r7, #4]
 8002e0e:	6809      	ldr	r1, [r1, #0]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	69da      	ldr	r2, [r3, #28]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	431a      	orrs	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	6911      	ldr	r1, [r2, #16]
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	68d2      	ldr	r2, [r2, #12]
 8002e46:	4311      	orrs	r1, r2
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	6812      	ldr	r2, [r2, #0]
 8002e4c:	430b      	orrs	r3, r1
 8002e4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	695a      	ldr	r2, [r3, #20]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	431a      	orrs	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f042 0201 	orr.w	r2, r2, #1
 8002e7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2220      	movs	r2, #32
 8002e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	000186a0 	.word	0x000186a0
 8002ea8:	001e847f 	.word	0x001e847f
 8002eac:	003d08ff 	.word	0x003d08ff
 8002eb0:	431bde83 	.word	0x431bde83
 8002eb4:	10624dd3 	.word	0x10624dd3

08002eb8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b088      	sub	sp, #32
 8002ebc:	af02      	add	r7, sp, #8
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	4608      	mov	r0, r1
 8002ec2:	4611      	mov	r1, r2
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	817b      	strh	r3, [r7, #10]
 8002eca:	460b      	mov	r3, r1
 8002ecc:	813b      	strh	r3, [r7, #8]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ed2:	f7ff f9cb 	bl	800226c <HAL_GetTick>
 8002ed6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b20      	cmp	r3, #32
 8002ee2:	f040 80d9 	bne.w	8003098 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	9300      	str	r3, [sp, #0]
 8002eea:	2319      	movs	r3, #25
 8002eec:	2201      	movs	r2, #1
 8002eee:	496d      	ldr	r1, [pc, #436]	; (80030a4 <HAL_I2C_Mem_Write+0x1ec>)
 8002ef0:	68f8      	ldr	r0, [r7, #12]
 8002ef2:	f000 fcc1 	bl	8003878 <I2C_WaitOnFlagUntilTimeout>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d001      	beq.n	8002f00 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002efc:	2302      	movs	r3, #2
 8002efe:	e0cc      	b.n	800309a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d101      	bne.n	8002f0e <HAL_I2C_Mem_Write+0x56>
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	e0c5      	b.n	800309a <HAL_I2C_Mem_Write+0x1e2>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d007      	beq.n	8002f34 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f042 0201 	orr.w	r2, r2, #1
 8002f32:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f42:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2221      	movs	r2, #33	; 0x21
 8002f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2240      	movs	r2, #64	; 0x40
 8002f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6a3a      	ldr	r2, [r7, #32]
 8002f5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	4a4d      	ldr	r2, [pc, #308]	; (80030a8 <HAL_I2C_Mem_Write+0x1f0>)
 8002f74:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f76:	88f8      	ldrh	r0, [r7, #6]
 8002f78:	893a      	ldrh	r2, [r7, #8]
 8002f7a:	8979      	ldrh	r1, [r7, #10]
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	9301      	str	r3, [sp, #4]
 8002f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f82:	9300      	str	r3, [sp, #0]
 8002f84:	4603      	mov	r3, r0
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f000 faf8 	bl	800357c <I2C_RequestMemoryWrite>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d052      	beq.n	8003038 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e081      	b.n	800309a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f96:	697a      	ldr	r2, [r7, #20]
 8002f98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f000 fd42 	bl	8003a24 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00d      	beq.n	8002fc2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	2b04      	cmp	r3, #4
 8002fac:	d107      	bne.n	8002fbe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fbc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e06b      	b.n	800309a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc6:	781a      	ldrb	r2, [r3, #0]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd2:	1c5a      	adds	r2, r3, #1
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	3b01      	subs	r3, #1
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	695b      	ldr	r3, [r3, #20]
 8002ff8:	f003 0304 	and.w	r3, r3, #4
 8002ffc:	2b04      	cmp	r3, #4
 8002ffe:	d11b      	bne.n	8003038 <HAL_I2C_Mem_Write+0x180>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003004:	2b00      	cmp	r3, #0
 8003006:	d017      	beq.n	8003038 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300c:	781a      	ldrb	r2, [r3, #0]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003018:	1c5a      	adds	r2, r3, #1
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003022:	3b01      	subs	r3, #1
 8003024:	b29a      	uxth	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800302e:	b29b      	uxth	r3, r3
 8003030:	3b01      	subs	r3, #1
 8003032:	b29a      	uxth	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800303c:	2b00      	cmp	r3, #0
 800303e:	d1aa      	bne.n	8002f96 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f000 fd2e 	bl	8003aa6 <I2C_WaitOnBTFFlagUntilTimeout>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00d      	beq.n	800306c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003054:	2b04      	cmp	r3, #4
 8003056:	d107      	bne.n	8003068 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003066:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e016      	b.n	800309a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800307a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2220      	movs	r2, #32
 8003080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003094:	2300      	movs	r3, #0
 8003096:	e000      	b.n	800309a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003098:	2302      	movs	r3, #2
  }
}
 800309a:	4618      	mov	r0, r3
 800309c:	3718      	adds	r7, #24
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	00100002 	.word	0x00100002
 80030a8:	ffff0000 	.word	0xffff0000

080030ac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b08c      	sub	sp, #48	; 0x30
 80030b0:	af02      	add	r7, sp, #8
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	4608      	mov	r0, r1
 80030b6:	4611      	mov	r1, r2
 80030b8:	461a      	mov	r2, r3
 80030ba:	4603      	mov	r3, r0
 80030bc:	817b      	strh	r3, [r7, #10]
 80030be:	460b      	mov	r3, r1
 80030c0:	813b      	strh	r3, [r7, #8]
 80030c2:	4613      	mov	r3, r2
 80030c4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80030c6:	2300      	movs	r3, #0
 80030c8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030ca:	f7ff f8cf 	bl	800226c <HAL_GetTick>
 80030ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	2b20      	cmp	r3, #32
 80030da:	f040 8244 	bne.w	8003566 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e0:	9300      	str	r3, [sp, #0]
 80030e2:	2319      	movs	r3, #25
 80030e4:	2201      	movs	r2, #1
 80030e6:	4982      	ldr	r1, [pc, #520]	; (80032f0 <HAL_I2C_Mem_Read+0x244>)
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f000 fbc5 	bl	8003878 <I2C_WaitOnFlagUntilTimeout>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80030f4:	2302      	movs	r3, #2
 80030f6:	e237      	b.n	8003568 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d101      	bne.n	8003106 <HAL_I2C_Mem_Read+0x5a>
 8003102:	2302      	movs	r3, #2
 8003104:	e230      	b.n	8003568 <HAL_I2C_Mem_Read+0x4bc>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	2b01      	cmp	r3, #1
 800311a:	d007      	beq.n	800312c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f042 0201 	orr.w	r2, r2, #1
 800312a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800313a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2222      	movs	r2, #34	; 0x22
 8003140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2240      	movs	r2, #64	; 0x40
 8003148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2200      	movs	r2, #0
 8003150:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003156:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800315c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003162:	b29a      	uxth	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	4a62      	ldr	r2, [pc, #392]	; (80032f4 <HAL_I2C_Mem_Read+0x248>)
 800316c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800316e:	88f8      	ldrh	r0, [r7, #6]
 8003170:	893a      	ldrh	r2, [r7, #8]
 8003172:	8979      	ldrh	r1, [r7, #10]
 8003174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003176:	9301      	str	r3, [sp, #4]
 8003178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	4603      	mov	r3, r0
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f000 fa92 	bl	80036a8 <I2C_RequestMemoryRead>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e1ec      	b.n	8003568 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003192:	2b00      	cmp	r3, #0
 8003194:	d113      	bne.n	80031be <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003196:	2300      	movs	r3, #0
 8003198:	61fb      	str	r3, [r7, #28]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	61fb      	str	r3, [r7, #28]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	61fb      	str	r3, [r7, #28]
 80031aa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ba:	601a      	str	r2, [r3, #0]
 80031bc:	e1c0      	b.n	8003540 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d11e      	bne.n	8003204 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031d4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80031d6:	b672      	cpsid	i
}
 80031d8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031da:	2300      	movs	r3, #0
 80031dc:	61bb      	str	r3, [r7, #24]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	695b      	ldr	r3, [r3, #20]
 80031e4:	61bb      	str	r3, [r7, #24]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	61bb      	str	r3, [r7, #24]
 80031ee:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031fe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003200:	b662      	cpsie	i
}
 8003202:	e035      	b.n	8003270 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003208:	2b02      	cmp	r3, #2
 800320a:	d11e      	bne.n	800324a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800321a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800321c:	b672      	cpsid	i
}
 800321e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003220:	2300      	movs	r3, #0
 8003222:	617b      	str	r3, [r7, #20]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	617b      	str	r3, [r7, #20]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	617b      	str	r3, [r7, #20]
 8003234:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003244:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003246:	b662      	cpsie	i
}
 8003248:	e012      	b.n	8003270 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003258:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800325a:	2300      	movs	r3, #0
 800325c:	613b      	str	r3, [r7, #16]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	695b      	ldr	r3, [r3, #20]
 8003264:	613b      	str	r3, [r7, #16]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	613b      	str	r3, [r7, #16]
 800326e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003270:	e166      	b.n	8003540 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003276:	2b03      	cmp	r3, #3
 8003278:	f200 811f 	bhi.w	80034ba <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003280:	2b01      	cmp	r3, #1
 8003282:	d123      	bne.n	80032cc <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003286:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003288:	68f8      	ldr	r0, [r7, #12]
 800328a:	f000 fc4d 	bl	8003b28 <I2C_WaitOnRXNEFlagUntilTimeout>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d001      	beq.n	8003298 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e167      	b.n	8003568 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	691a      	ldr	r2, [r3, #16]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a2:	b2d2      	uxtb	r2, r2
 80032a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032aa:	1c5a      	adds	r2, r3, #1
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b4:	3b01      	subs	r3, #1
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	3b01      	subs	r3, #1
 80032c4:	b29a      	uxth	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032ca:	e139      	b.n	8003540 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d152      	bne.n	800337a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d6:	9300      	str	r3, [sp, #0]
 80032d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032da:	2200      	movs	r2, #0
 80032dc:	4906      	ldr	r1, [pc, #24]	; (80032f8 <HAL_I2C_Mem_Read+0x24c>)
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f000 faca 	bl	8003878 <I2C_WaitOnFlagUntilTimeout>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d008      	beq.n	80032fc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e13c      	b.n	8003568 <HAL_I2C_Mem_Read+0x4bc>
 80032ee:	bf00      	nop
 80032f0:	00100002 	.word	0x00100002
 80032f4:	ffff0000 	.word	0xffff0000
 80032f8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80032fc:	b672      	cpsid	i
}
 80032fe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800330e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	691a      	ldr	r2, [r3, #16]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331a:	b2d2      	uxtb	r2, r2
 800331c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003322:	1c5a      	adds	r2, r3, #1
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800332c:	3b01      	subs	r3, #1
 800332e:	b29a      	uxth	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003338:	b29b      	uxth	r3, r3
 800333a:	3b01      	subs	r3, #1
 800333c:	b29a      	uxth	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003342:	b662      	cpsie	i
}
 8003344:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	691a      	ldr	r2, [r3, #16]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003350:	b2d2      	uxtb	r2, r2
 8003352:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003358:	1c5a      	adds	r2, r3, #1
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003362:	3b01      	subs	r3, #1
 8003364:	b29a      	uxth	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800336e:	b29b      	uxth	r3, r3
 8003370:	3b01      	subs	r3, #1
 8003372:	b29a      	uxth	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003378:	e0e2      	b.n	8003540 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800337a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337c:	9300      	str	r3, [sp, #0]
 800337e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003380:	2200      	movs	r2, #0
 8003382:	497b      	ldr	r1, [pc, #492]	; (8003570 <HAL_I2C_Mem_Read+0x4c4>)
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	f000 fa77 	bl	8003878 <I2C_WaitOnFlagUntilTimeout>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e0e9      	b.n	8003568 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033a2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80033a4:	b672      	cpsid	i
}
 80033a6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	691a      	ldr	r2, [r3, #16]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b2:	b2d2      	uxtb	r2, r2
 80033b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ba:	1c5a      	adds	r2, r3, #1
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c4:	3b01      	subs	r3, #1
 80033c6:	b29a      	uxth	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	3b01      	subs	r3, #1
 80033d4:	b29a      	uxth	r2, r3
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80033da:	4b66      	ldr	r3, [pc, #408]	; (8003574 <HAL_I2C_Mem_Read+0x4c8>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	08db      	lsrs	r3, r3, #3
 80033e0:	4a65      	ldr	r2, [pc, #404]	; (8003578 <HAL_I2C_Mem_Read+0x4cc>)
 80033e2:	fba2 2303 	umull	r2, r3, r2, r3
 80033e6:	0a1a      	lsrs	r2, r3, #8
 80033e8:	4613      	mov	r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	4413      	add	r3, r2
 80033ee:	00da      	lsls	r2, r3, #3
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80033f4:	6a3b      	ldr	r3, [r7, #32]
 80033f6:	3b01      	subs	r3, #1
 80033f8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80033fa:	6a3b      	ldr	r3, [r7, #32]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d118      	bne.n	8003432 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2220      	movs	r2, #32
 800340a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	f043 0220 	orr.w	r2, r3, #32
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003422:	b662      	cpsie	i
}
 8003424:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e09a      	b.n	8003568 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	f003 0304 	and.w	r3, r3, #4
 800343c:	2b04      	cmp	r3, #4
 800343e:	d1d9      	bne.n	80033f4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800344e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	691a      	ldr	r2, [r3, #16]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345a:	b2d2      	uxtb	r2, r2
 800345c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003462:	1c5a      	adds	r2, r3, #1
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800346c:	3b01      	subs	r3, #1
 800346e:	b29a      	uxth	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003478:	b29b      	uxth	r3, r3
 800347a:	3b01      	subs	r3, #1
 800347c:	b29a      	uxth	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003482:	b662      	cpsie	i
}
 8003484:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	691a      	ldr	r2, [r3, #16]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003490:	b2d2      	uxtb	r2, r2
 8003492:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003498:	1c5a      	adds	r2, r3, #1
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a2:	3b01      	subs	r3, #1
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	3b01      	subs	r3, #1
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034b8:	e042      	b.n	8003540 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	f000 fb32 	bl	8003b28 <I2C_WaitOnRXNEFlagUntilTimeout>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d001      	beq.n	80034ce <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e04c      	b.n	8003568 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	691a      	ldr	r2, [r3, #16]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d8:	b2d2      	uxtb	r2, r2
 80034da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e0:	1c5a      	adds	r2, r3, #1
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ea:	3b01      	subs	r3, #1
 80034ec:	b29a      	uxth	r2, r3
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	3b01      	subs	r3, #1
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	f003 0304 	and.w	r3, r3, #4
 800350a:	2b04      	cmp	r3, #4
 800350c:	d118      	bne.n	8003540 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	691a      	ldr	r2, [r3, #16]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003518:	b2d2      	uxtb	r2, r2
 800351a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003520:	1c5a      	adds	r2, r3, #1
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800352a:	3b01      	subs	r3, #1
 800352c:	b29a      	uxth	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003536:	b29b      	uxth	r3, r3
 8003538:	3b01      	subs	r3, #1
 800353a:	b29a      	uxth	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003544:	2b00      	cmp	r3, #0
 8003546:	f47f ae94 	bne.w	8003272 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2220      	movs	r2, #32
 800354e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003562:	2300      	movs	r3, #0
 8003564:	e000      	b.n	8003568 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003566:	2302      	movs	r3, #2
  }
}
 8003568:	4618      	mov	r0, r3
 800356a:	3728      	adds	r7, #40	; 0x28
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	00010004 	.word	0x00010004
 8003574:	20000008 	.word	0x20000008
 8003578:	14f8b589 	.word	0x14f8b589

0800357c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b088      	sub	sp, #32
 8003580:	af02      	add	r7, sp, #8
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	4608      	mov	r0, r1
 8003586:	4611      	mov	r1, r2
 8003588:	461a      	mov	r2, r3
 800358a:	4603      	mov	r3, r0
 800358c:	817b      	strh	r3, [r7, #10]
 800358e:	460b      	mov	r3, r1
 8003590:	813b      	strh	r3, [r7, #8]
 8003592:	4613      	mov	r3, r2
 8003594:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a8:	9300      	str	r3, [sp, #0]
 80035aa:	6a3b      	ldr	r3, [r7, #32]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f000 f960 	bl	8003878 <I2C_WaitOnFlagUntilTimeout>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00d      	beq.n	80035da <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035cc:	d103      	bne.n	80035d6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e05f      	b.n	800369a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035da:	897b      	ldrh	r3, [r7, #10]
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	461a      	mov	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80035e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ec:	6a3a      	ldr	r2, [r7, #32]
 80035ee:	492d      	ldr	r1, [pc, #180]	; (80036a4 <I2C_RequestMemoryWrite+0x128>)
 80035f0:	68f8      	ldr	r0, [r7, #12]
 80035f2:	f000 f998 	bl	8003926 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d001      	beq.n	8003600 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e04c      	b.n	800369a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003600:	2300      	movs	r3, #0
 8003602:	617b      	str	r3, [r7, #20]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	617b      	str	r3, [r7, #20]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	617b      	str	r3, [r7, #20]
 8003614:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003618:	6a39      	ldr	r1, [r7, #32]
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f000 fa02 	bl	8003a24 <I2C_WaitOnTXEFlagUntilTimeout>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00d      	beq.n	8003642 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362a:	2b04      	cmp	r3, #4
 800362c:	d107      	bne.n	800363e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800363c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e02b      	b.n	800369a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003642:	88fb      	ldrh	r3, [r7, #6]
 8003644:	2b01      	cmp	r3, #1
 8003646:	d105      	bne.n	8003654 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003648:	893b      	ldrh	r3, [r7, #8]
 800364a:	b2da      	uxtb	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	611a      	str	r2, [r3, #16]
 8003652:	e021      	b.n	8003698 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003654:	893b      	ldrh	r3, [r7, #8]
 8003656:	0a1b      	lsrs	r3, r3, #8
 8003658:	b29b      	uxth	r3, r3
 800365a:	b2da      	uxtb	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003664:	6a39      	ldr	r1, [r7, #32]
 8003666:	68f8      	ldr	r0, [r7, #12]
 8003668:	f000 f9dc 	bl	8003a24 <I2C_WaitOnTXEFlagUntilTimeout>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00d      	beq.n	800368e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	2b04      	cmp	r3, #4
 8003678:	d107      	bne.n	800368a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003688:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e005      	b.n	800369a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800368e:	893b      	ldrh	r3, [r7, #8]
 8003690:	b2da      	uxtb	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3718      	adds	r7, #24
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	00010002 	.word	0x00010002

080036a8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b088      	sub	sp, #32
 80036ac:	af02      	add	r7, sp, #8
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	4608      	mov	r0, r1
 80036b2:	4611      	mov	r1, r2
 80036b4:	461a      	mov	r2, r3
 80036b6:	4603      	mov	r3, r0
 80036b8:	817b      	strh	r3, [r7, #10]
 80036ba:	460b      	mov	r3, r1
 80036bc:	813b      	strh	r3, [r7, #8]
 80036be:	4613      	mov	r3, r2
 80036c0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036d0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e4:	9300      	str	r3, [sp, #0]
 80036e6:	6a3b      	ldr	r3, [r7, #32]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036ee:	68f8      	ldr	r0, [r7, #12]
 80036f0:	f000 f8c2 	bl	8003878 <I2C_WaitOnFlagUntilTimeout>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00d      	beq.n	8003716 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003704:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003708:	d103      	bne.n	8003712 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003710:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e0aa      	b.n	800386c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003716:	897b      	ldrh	r3, [r7, #10]
 8003718:	b2db      	uxtb	r3, r3
 800371a:	461a      	mov	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003724:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003728:	6a3a      	ldr	r2, [r7, #32]
 800372a:	4952      	ldr	r1, [pc, #328]	; (8003874 <I2C_RequestMemoryRead+0x1cc>)
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f000 f8fa 	bl	8003926 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d001      	beq.n	800373c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e097      	b.n	800386c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800373c:	2300      	movs	r3, #0
 800373e:	617b      	str	r3, [r7, #20]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	617b      	str	r3, [r7, #20]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	617b      	str	r3, [r7, #20]
 8003750:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003754:	6a39      	ldr	r1, [r7, #32]
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	f000 f964 	bl	8003a24 <I2C_WaitOnTXEFlagUntilTimeout>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00d      	beq.n	800377e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	2b04      	cmp	r3, #4
 8003768:	d107      	bne.n	800377a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003778:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e076      	b.n	800386c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800377e:	88fb      	ldrh	r3, [r7, #6]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d105      	bne.n	8003790 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003784:	893b      	ldrh	r3, [r7, #8]
 8003786:	b2da      	uxtb	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	611a      	str	r2, [r3, #16]
 800378e:	e021      	b.n	80037d4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003790:	893b      	ldrh	r3, [r7, #8]
 8003792:	0a1b      	lsrs	r3, r3, #8
 8003794:	b29b      	uxth	r3, r3
 8003796:	b2da      	uxtb	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800379e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037a0:	6a39      	ldr	r1, [r7, #32]
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f000 f93e 	bl	8003a24 <I2C_WaitOnTXEFlagUntilTimeout>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00d      	beq.n	80037ca <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	2b04      	cmp	r3, #4
 80037b4:	d107      	bne.n	80037c6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e050      	b.n	800386c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80037ca:	893b      	ldrh	r3, [r7, #8]
 80037cc:	b2da      	uxtb	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037d6:	6a39      	ldr	r1, [r7, #32]
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	f000 f923 	bl	8003a24 <I2C_WaitOnTXEFlagUntilTimeout>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d00d      	beq.n	8003800 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e8:	2b04      	cmp	r3, #4
 80037ea:	d107      	bne.n	80037fc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037fa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e035      	b.n	800386c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800380e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003812:	9300      	str	r3, [sp, #0]
 8003814:	6a3b      	ldr	r3, [r7, #32]
 8003816:	2200      	movs	r2, #0
 8003818:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f000 f82b 	bl	8003878 <I2C_WaitOnFlagUntilTimeout>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00d      	beq.n	8003844 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003832:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003836:	d103      	bne.n	8003840 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800383e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e013      	b.n	800386c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003844:	897b      	ldrh	r3, [r7, #10]
 8003846:	b2db      	uxtb	r3, r3
 8003848:	f043 0301 	orr.w	r3, r3, #1
 800384c:	b2da      	uxtb	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003856:	6a3a      	ldr	r2, [r7, #32]
 8003858:	4906      	ldr	r1, [pc, #24]	; (8003874 <I2C_RequestMemoryRead+0x1cc>)
 800385a:	68f8      	ldr	r0, [r7, #12]
 800385c:	f000 f863 	bl	8003926 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e000      	b.n	800386c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3718      	adds	r7, #24
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	00010002 	.word	0x00010002

08003878 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	603b      	str	r3, [r7, #0]
 8003884:	4613      	mov	r3, r2
 8003886:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003888:	e025      	b.n	80038d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003890:	d021      	beq.n	80038d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003892:	f7fe fceb 	bl	800226c <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	683a      	ldr	r2, [r7, #0]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d302      	bcc.n	80038a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d116      	bne.n	80038d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2220      	movs	r2, #32
 80038b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	f043 0220 	orr.w	r2, r3, #32
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e023      	b.n	800391e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	0c1b      	lsrs	r3, r3, #16
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d10d      	bne.n	80038fc <I2C_WaitOnFlagUntilTimeout+0x84>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	695b      	ldr	r3, [r3, #20]
 80038e6:	43da      	mvns	r2, r3
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	4013      	ands	r3, r2
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	bf0c      	ite	eq
 80038f2:	2301      	moveq	r3, #1
 80038f4:	2300      	movne	r3, #0
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	461a      	mov	r2, r3
 80038fa:	e00c      	b.n	8003916 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	43da      	mvns	r2, r3
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	4013      	ands	r3, r2
 8003908:	b29b      	uxth	r3, r3
 800390a:	2b00      	cmp	r3, #0
 800390c:	bf0c      	ite	eq
 800390e:	2301      	moveq	r3, #1
 8003910:	2300      	movne	r3, #0
 8003912:	b2db      	uxtb	r3, r3
 8003914:	461a      	mov	r2, r3
 8003916:	79fb      	ldrb	r3, [r7, #7]
 8003918:	429a      	cmp	r2, r3
 800391a:	d0b6      	beq.n	800388a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b084      	sub	sp, #16
 800392a:	af00      	add	r7, sp, #0
 800392c:	60f8      	str	r0, [r7, #12]
 800392e:	60b9      	str	r1, [r7, #8]
 8003930:	607a      	str	r2, [r7, #4]
 8003932:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003934:	e051      	b.n	80039da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	695b      	ldr	r3, [r3, #20]
 800393c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003940:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003944:	d123      	bne.n	800398e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003954:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800395e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2200      	movs	r2, #0
 8003964:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2220      	movs	r2, #32
 800396a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	f043 0204 	orr.w	r2, r3, #4
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e046      	b.n	8003a1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003994:	d021      	beq.n	80039da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003996:	f7fe fc69 	bl	800226c <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d302      	bcc.n	80039ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d116      	bne.n	80039da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2220      	movs	r2, #32
 80039b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c6:	f043 0220 	orr.w	r2, r3, #32
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e020      	b.n	8003a1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	0c1b      	lsrs	r3, r3, #16
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d10c      	bne.n	80039fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	43da      	mvns	r2, r3
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	4013      	ands	r3, r2
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	bf14      	ite	ne
 80039f6:	2301      	movne	r3, #1
 80039f8:	2300      	moveq	r3, #0
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	e00b      	b.n	8003a16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	43da      	mvns	r2, r3
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	bf14      	ite	ne
 8003a10:	2301      	movne	r3, #1
 8003a12:	2300      	moveq	r3, #0
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d18d      	bne.n	8003936 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3710      	adds	r7, #16
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a30:	e02d      	b.n	8003a8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f000 f8ce 	bl	8003bd4 <I2C_IsAcknowledgeFailed>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d001      	beq.n	8003a42 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e02d      	b.n	8003a9e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a48:	d021      	beq.n	8003a8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a4a:	f7fe fc0f 	bl	800226c <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	68ba      	ldr	r2, [r7, #8]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d302      	bcc.n	8003a60 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d116      	bne.n	8003a8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2220      	movs	r2, #32
 8003a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7a:	f043 0220 	orr.w	r2, r3, #32
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e007      	b.n	8003a9e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	695b      	ldr	r3, [r3, #20]
 8003a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a98:	2b80      	cmp	r3, #128	; 0x80
 8003a9a:	d1ca      	bne.n	8003a32 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3710      	adds	r7, #16
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b084      	sub	sp, #16
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	60f8      	str	r0, [r7, #12]
 8003aae:	60b9      	str	r1, [r7, #8]
 8003ab0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ab2:	e02d      	b.n	8003b10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ab4:	68f8      	ldr	r0, [r7, #12]
 8003ab6:	f000 f88d 	bl	8003bd4 <I2C_IsAcknowledgeFailed>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d001      	beq.n	8003ac4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e02d      	b.n	8003b20 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003aca:	d021      	beq.n	8003b10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003acc:	f7fe fbce 	bl	800226c <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	68ba      	ldr	r2, [r7, #8]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d302      	bcc.n	8003ae2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d116      	bne.n	8003b10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2220      	movs	r2, #32
 8003aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afc:	f043 0220 	orr.w	r2, r3, #32
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e007      	b.n	8003b20 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	f003 0304 	and.w	r3, r3, #4
 8003b1a:	2b04      	cmp	r3, #4
 8003b1c:	d1ca      	bne.n	8003ab4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3710      	adds	r7, #16
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b34:	e042      	b.n	8003bbc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	f003 0310 	and.w	r3, r3, #16
 8003b40:	2b10      	cmp	r3, #16
 8003b42:	d119      	bne.n	8003b78 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f06f 0210 	mvn.w	r2, #16
 8003b4c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2220      	movs	r2, #32
 8003b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e029      	b.n	8003bcc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b78:	f7fe fb78 	bl	800226c <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	68ba      	ldr	r2, [r7, #8]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d302      	bcc.n	8003b8e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d116      	bne.n	8003bbc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2220      	movs	r2, #32
 8003b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba8:	f043 0220 	orr.w	r2, r3, #32
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e007      	b.n	8003bcc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc6:	2b40      	cmp	r3, #64	; 0x40
 8003bc8:	d1b5      	bne.n	8003b36 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3710      	adds	r7, #16
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003be6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bea:	d11b      	bne.n	8003c24 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003bf4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c10:	f043 0204 	orr.w	r2, r3, #4
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e000      	b.n	8003c26 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	370c      	adds	r7, #12
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bc80      	pop	{r7}
 8003c2e:	4770      	bx	lr

08003c30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e26c      	b.n	800411c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	f000 8087 	beq.w	8003d5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c50:	4b92      	ldr	r3, [pc, #584]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f003 030c 	and.w	r3, r3, #12
 8003c58:	2b04      	cmp	r3, #4
 8003c5a:	d00c      	beq.n	8003c76 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c5c:	4b8f      	ldr	r3, [pc, #572]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f003 030c 	and.w	r3, r3, #12
 8003c64:	2b08      	cmp	r3, #8
 8003c66:	d112      	bne.n	8003c8e <HAL_RCC_OscConfig+0x5e>
 8003c68:	4b8c      	ldr	r3, [pc, #560]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c74:	d10b      	bne.n	8003c8e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c76:	4b89      	ldr	r3, [pc, #548]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d06c      	beq.n	8003d5c <HAL_RCC_OscConfig+0x12c>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d168      	bne.n	8003d5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e246      	b.n	800411c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c96:	d106      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x76>
 8003c98:	4b80      	ldr	r3, [pc, #512]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a7f      	ldr	r2, [pc, #508]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003c9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ca2:	6013      	str	r3, [r2, #0]
 8003ca4:	e02e      	b.n	8003d04 <HAL_RCC_OscConfig+0xd4>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d10c      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x98>
 8003cae:	4b7b      	ldr	r3, [pc, #492]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a7a      	ldr	r2, [pc, #488]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003cb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cb8:	6013      	str	r3, [r2, #0]
 8003cba:	4b78      	ldr	r3, [pc, #480]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a77      	ldr	r2, [pc, #476]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003cc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cc4:	6013      	str	r3, [r2, #0]
 8003cc6:	e01d      	b.n	8003d04 <HAL_RCC_OscConfig+0xd4>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cd0:	d10c      	bne.n	8003cec <HAL_RCC_OscConfig+0xbc>
 8003cd2:	4b72      	ldr	r3, [pc, #456]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a71      	ldr	r2, [pc, #452]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003cd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cdc:	6013      	str	r3, [r2, #0]
 8003cde:	4b6f      	ldr	r3, [pc, #444]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a6e      	ldr	r2, [pc, #440]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ce8:	6013      	str	r3, [r2, #0]
 8003cea:	e00b      	b.n	8003d04 <HAL_RCC_OscConfig+0xd4>
 8003cec:	4b6b      	ldr	r3, [pc, #428]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a6a      	ldr	r2, [pc, #424]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003cf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cf6:	6013      	str	r3, [r2, #0]
 8003cf8:	4b68      	ldr	r3, [pc, #416]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a67      	ldr	r2, [pc, #412]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003cfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d02:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d013      	beq.n	8003d34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d0c:	f7fe faae 	bl	800226c <HAL_GetTick>
 8003d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d12:	e008      	b.n	8003d26 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d14:	f7fe faaa 	bl	800226c <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b64      	cmp	r3, #100	; 0x64
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e1fa      	b.n	800411c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d26:	4b5d      	ldr	r3, [pc, #372]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d0f0      	beq.n	8003d14 <HAL_RCC_OscConfig+0xe4>
 8003d32:	e014      	b.n	8003d5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d34:	f7fe fa9a 	bl	800226c <HAL_GetTick>
 8003d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d3a:	e008      	b.n	8003d4e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d3c:	f7fe fa96 	bl	800226c <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b64      	cmp	r3, #100	; 0x64
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e1e6      	b.n	800411c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d4e:	4b53      	ldr	r3, [pc, #332]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1f0      	bne.n	8003d3c <HAL_RCC_OscConfig+0x10c>
 8003d5a:	e000      	b.n	8003d5e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d063      	beq.n	8003e32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d6a:	4b4c      	ldr	r3, [pc, #304]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f003 030c 	and.w	r3, r3, #12
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00b      	beq.n	8003d8e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003d76:	4b49      	ldr	r3, [pc, #292]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f003 030c 	and.w	r3, r3, #12
 8003d7e:	2b08      	cmp	r3, #8
 8003d80:	d11c      	bne.n	8003dbc <HAL_RCC_OscConfig+0x18c>
 8003d82:	4b46      	ldr	r3, [pc, #280]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d116      	bne.n	8003dbc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d8e:	4b43      	ldr	r3, [pc, #268]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d005      	beq.n	8003da6 <HAL_RCC_OscConfig+0x176>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d001      	beq.n	8003da6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e1ba      	b.n	800411c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003da6:	4b3d      	ldr	r3, [pc, #244]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	00db      	lsls	r3, r3, #3
 8003db4:	4939      	ldr	r1, [pc, #228]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dba:	e03a      	b.n	8003e32 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d020      	beq.n	8003e06 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dc4:	4b36      	ldr	r3, [pc, #216]	; (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dca:	f7fe fa4f 	bl	800226c <HAL_GetTick>
 8003dce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dd0:	e008      	b.n	8003de4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dd2:	f7fe fa4b 	bl	800226c <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d901      	bls.n	8003de4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e19b      	b.n	800411c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003de4:	4b2d      	ldr	r3, [pc, #180]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d0f0      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003df0:	4b2a      	ldr	r3, [pc, #168]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	695b      	ldr	r3, [r3, #20]
 8003dfc:	00db      	lsls	r3, r3, #3
 8003dfe:	4927      	ldr	r1, [pc, #156]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	600b      	str	r3, [r1, #0]
 8003e04:	e015      	b.n	8003e32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e06:	4b26      	ldr	r3, [pc, #152]	; (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e0c:	f7fe fa2e 	bl	800226c <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e12:	e008      	b.n	8003e26 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e14:	f7fe fa2a 	bl	800226c <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e17a      	b.n	800411c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e26:	4b1d      	ldr	r3, [pc, #116]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1f0      	bne.n	8003e14 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0308 	and.w	r3, r3, #8
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d03a      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d019      	beq.n	8003e7a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e46:	4b17      	ldr	r3, [pc, #92]	; (8003ea4 <HAL_RCC_OscConfig+0x274>)
 8003e48:	2201      	movs	r2, #1
 8003e4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e4c:	f7fe fa0e 	bl	800226c <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e54:	f7fe fa0a 	bl	800226c <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e15a      	b.n	800411c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e66:	4b0d      	ldr	r3, [pc, #52]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d0f0      	beq.n	8003e54 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003e72:	2001      	movs	r0, #1
 8003e74:	f000 fad8 	bl	8004428 <RCC_Delay>
 8003e78:	e01c      	b.n	8003eb4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e7a:	4b0a      	ldr	r3, [pc, #40]	; (8003ea4 <HAL_RCC_OscConfig+0x274>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e80:	f7fe f9f4 	bl	800226c <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e86:	e00f      	b.n	8003ea8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e88:	f7fe f9f0 	bl	800226c <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d908      	bls.n	8003ea8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e140      	b.n	800411c <HAL_RCC_OscConfig+0x4ec>
 8003e9a:	bf00      	nop
 8003e9c:	40021000 	.word	0x40021000
 8003ea0:	42420000 	.word	0x42420000
 8003ea4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ea8:	4b9e      	ldr	r3, [pc, #632]	; (8004124 <HAL_RCC_OscConfig+0x4f4>)
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1e9      	bne.n	8003e88 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0304 	and.w	r3, r3, #4
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 80a6 	beq.w	800400e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ec6:	4b97      	ldr	r3, [pc, #604]	; (8004124 <HAL_RCC_OscConfig+0x4f4>)
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10d      	bne.n	8003eee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ed2:	4b94      	ldr	r3, [pc, #592]	; (8004124 <HAL_RCC_OscConfig+0x4f4>)
 8003ed4:	69db      	ldr	r3, [r3, #28]
 8003ed6:	4a93      	ldr	r2, [pc, #588]	; (8004124 <HAL_RCC_OscConfig+0x4f4>)
 8003ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003edc:	61d3      	str	r3, [r2, #28]
 8003ede:	4b91      	ldr	r3, [pc, #580]	; (8004124 <HAL_RCC_OscConfig+0x4f4>)
 8003ee0:	69db      	ldr	r3, [r3, #28]
 8003ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ee6:	60bb      	str	r3, [r7, #8]
 8003ee8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eea:	2301      	movs	r3, #1
 8003eec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eee:	4b8e      	ldr	r3, [pc, #568]	; (8004128 <HAL_RCC_OscConfig+0x4f8>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d118      	bne.n	8003f2c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003efa:	4b8b      	ldr	r3, [pc, #556]	; (8004128 <HAL_RCC_OscConfig+0x4f8>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a8a      	ldr	r2, [pc, #552]	; (8004128 <HAL_RCC_OscConfig+0x4f8>)
 8003f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f06:	f7fe f9b1 	bl	800226c <HAL_GetTick>
 8003f0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f0c:	e008      	b.n	8003f20 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f0e:	f7fe f9ad 	bl	800226c <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	2b64      	cmp	r3, #100	; 0x64
 8003f1a:	d901      	bls.n	8003f20 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e0fd      	b.n	800411c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f20:	4b81      	ldr	r3, [pc, #516]	; (8004128 <HAL_RCC_OscConfig+0x4f8>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d0f0      	beq.n	8003f0e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d106      	bne.n	8003f42 <HAL_RCC_OscConfig+0x312>
 8003f34:	4b7b      	ldr	r3, [pc, #492]	; (8004124 <HAL_RCC_OscConfig+0x4f4>)
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	4a7a      	ldr	r2, [pc, #488]	; (8004124 <HAL_RCC_OscConfig+0x4f4>)
 8003f3a:	f043 0301 	orr.w	r3, r3, #1
 8003f3e:	6213      	str	r3, [r2, #32]
 8003f40:	e02d      	b.n	8003f9e <HAL_RCC_OscConfig+0x36e>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d10c      	bne.n	8003f64 <HAL_RCC_OscConfig+0x334>
 8003f4a:	4b76      	ldr	r3, [pc, #472]	; (8004124 <HAL_RCC_OscConfig+0x4f4>)
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
 8003f4e:	4a75      	ldr	r2, [pc, #468]	; (8004124 <HAL_RCC_OscConfig+0x4f4>)
 8003f50:	f023 0301 	bic.w	r3, r3, #1
 8003f54:	6213      	str	r3, [r2, #32]
 8003f56:	4b73      	ldr	r3, [pc, #460]	; (8004124 <HAL_RCC_OscConfig+0x4f4>)
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	4a72      	ldr	r2, [pc, #456]	; (8004124 <HAL_RCC_OscConfig+0x4f4>)
 8003f5c:	f023 0304 	bic.w	r3, r3, #4
 8003f60:	6213      	str	r3, [r2, #32]
 8003f62:	e01c      	b.n	8003f9e <HAL_RCC_OscConfig+0x36e>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	2b05      	cmp	r3, #5
 8003f6a:	d10c      	bne.n	8003f86 <HAL_RCC_OscConfig+0x356>
 8003f6c:	4b6d      	ldr	r3, [pc, #436]	; (8004124 <HAL_RCC_OscConfig+0x4f4>)
 8003f6e:	6a1b      	ldr	r3, [r3, #32]
 8003f70:	4a6c      	ldr	r2, [pc, #432]	; (8004124 <HAL_RCC_OscConfig+0x4f4>)
 8003f72:	f043 0304 	orr.w	r3, r3, #4
 8003f76:	6213      	str	r3, [r2, #32]
 8003f78:	4b6a      	ldr	r3, [pc, #424]	; (8004124 <HAL_RCC_OscConfig+0x4f4>)
 8003f7a:	6a1b      	ldr	r3, [r3, #32]
 8003f7c:	4a69      	ldr	r2, [pc, #420]	; (8004124 <HAL_RCC_OscConfig+0x4f4>)
 8003f7e:	f043 0301 	orr.w	r3, r3, #1
 8003f82:	6213      	str	r3, [r2, #32]
 8003f84:	e00b      	b.n	8003f9e <HAL_RCC_OscConfig+0x36e>
 8003f86:	4b67      	ldr	r3, [pc, #412]	; (8004124 <HAL_RCC_OscConfig+0x4f4>)
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	4a66      	ldr	r2, [pc, #408]	; (8004124 <HAL_RCC_OscConfig+0x4f4>)
 8003f8c:	f023 0301 	bic.w	r3, r3, #1
 8003f90:	6213      	str	r3, [r2, #32]
 8003f92:	4b64      	ldr	r3, [pc, #400]	; (8004124 <HAL_RCC_OscConfig+0x4f4>)
 8003f94:	6a1b      	ldr	r3, [r3, #32]
 8003f96:	4a63      	ldr	r2, [pc, #396]	; (8004124 <HAL_RCC_OscConfig+0x4f4>)
 8003f98:	f023 0304 	bic.w	r3, r3, #4
 8003f9c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d015      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fa6:	f7fe f961 	bl	800226c <HAL_GetTick>
 8003faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fac:	e00a      	b.n	8003fc4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fae:	f7fe f95d 	bl	800226c <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d901      	bls.n	8003fc4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e0ab      	b.n	800411c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fc4:	4b57      	ldr	r3, [pc, #348]	; (8004124 <HAL_RCC_OscConfig+0x4f4>)
 8003fc6:	6a1b      	ldr	r3, [r3, #32]
 8003fc8:	f003 0302 	and.w	r3, r3, #2
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d0ee      	beq.n	8003fae <HAL_RCC_OscConfig+0x37e>
 8003fd0:	e014      	b.n	8003ffc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fd2:	f7fe f94b 	bl	800226c <HAL_GetTick>
 8003fd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fd8:	e00a      	b.n	8003ff0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fda:	f7fe f947 	bl	800226c <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e095      	b.n	800411c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ff0:	4b4c      	ldr	r3, [pc, #304]	; (8004124 <HAL_RCC_OscConfig+0x4f4>)
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1ee      	bne.n	8003fda <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ffc:	7dfb      	ldrb	r3, [r7, #23]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d105      	bne.n	800400e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004002:	4b48      	ldr	r3, [pc, #288]	; (8004124 <HAL_RCC_OscConfig+0x4f4>)
 8004004:	69db      	ldr	r3, [r3, #28]
 8004006:	4a47      	ldr	r2, [pc, #284]	; (8004124 <HAL_RCC_OscConfig+0x4f4>)
 8004008:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800400c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	69db      	ldr	r3, [r3, #28]
 8004012:	2b00      	cmp	r3, #0
 8004014:	f000 8081 	beq.w	800411a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004018:	4b42      	ldr	r3, [pc, #264]	; (8004124 <HAL_RCC_OscConfig+0x4f4>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f003 030c 	and.w	r3, r3, #12
 8004020:	2b08      	cmp	r3, #8
 8004022:	d061      	beq.n	80040e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	69db      	ldr	r3, [r3, #28]
 8004028:	2b02      	cmp	r3, #2
 800402a:	d146      	bne.n	80040ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800402c:	4b3f      	ldr	r3, [pc, #252]	; (800412c <HAL_RCC_OscConfig+0x4fc>)
 800402e:	2200      	movs	r2, #0
 8004030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004032:	f7fe f91b 	bl	800226c <HAL_GetTick>
 8004036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004038:	e008      	b.n	800404c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800403a:	f7fe f917 	bl	800226c <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	2b02      	cmp	r3, #2
 8004046:	d901      	bls.n	800404c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e067      	b.n	800411c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800404c:	4b35      	ldr	r3, [pc, #212]	; (8004124 <HAL_RCC_OscConfig+0x4f4>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1f0      	bne.n	800403a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a1b      	ldr	r3, [r3, #32]
 800405c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004060:	d108      	bne.n	8004074 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004062:	4b30      	ldr	r3, [pc, #192]	; (8004124 <HAL_RCC_OscConfig+0x4f4>)
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	492d      	ldr	r1, [pc, #180]	; (8004124 <HAL_RCC_OscConfig+0x4f4>)
 8004070:	4313      	orrs	r3, r2
 8004072:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004074:	4b2b      	ldr	r3, [pc, #172]	; (8004124 <HAL_RCC_OscConfig+0x4f4>)
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a19      	ldr	r1, [r3, #32]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004084:	430b      	orrs	r3, r1
 8004086:	4927      	ldr	r1, [pc, #156]	; (8004124 <HAL_RCC_OscConfig+0x4f4>)
 8004088:	4313      	orrs	r3, r2
 800408a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800408c:	4b27      	ldr	r3, [pc, #156]	; (800412c <HAL_RCC_OscConfig+0x4fc>)
 800408e:	2201      	movs	r2, #1
 8004090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004092:	f7fe f8eb 	bl	800226c <HAL_GetTick>
 8004096:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004098:	e008      	b.n	80040ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800409a:	f7fe f8e7 	bl	800226c <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d901      	bls.n	80040ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e037      	b.n	800411c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040ac:	4b1d      	ldr	r3, [pc, #116]	; (8004124 <HAL_RCC_OscConfig+0x4f4>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d0f0      	beq.n	800409a <HAL_RCC_OscConfig+0x46a>
 80040b8:	e02f      	b.n	800411a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ba:	4b1c      	ldr	r3, [pc, #112]	; (800412c <HAL_RCC_OscConfig+0x4fc>)
 80040bc:	2200      	movs	r2, #0
 80040be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c0:	f7fe f8d4 	bl	800226c <HAL_GetTick>
 80040c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040c6:	e008      	b.n	80040da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040c8:	f7fe f8d0 	bl	800226c <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e020      	b.n	800411c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040da:	4b12      	ldr	r3, [pc, #72]	; (8004124 <HAL_RCC_OscConfig+0x4f4>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1f0      	bne.n	80040c8 <HAL_RCC_OscConfig+0x498>
 80040e6:	e018      	b.n	800411a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	69db      	ldr	r3, [r3, #28]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d101      	bne.n	80040f4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e013      	b.n	800411c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80040f4:	4b0b      	ldr	r3, [pc, #44]	; (8004124 <HAL_RCC_OscConfig+0x4f4>)
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a1b      	ldr	r3, [r3, #32]
 8004104:	429a      	cmp	r2, r3
 8004106:	d106      	bne.n	8004116 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004112:	429a      	cmp	r2, r3
 8004114:	d001      	beq.n	800411a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e000      	b.n	800411c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	3718      	adds	r7, #24
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	40021000 	.word	0x40021000
 8004128:	40007000 	.word	0x40007000
 800412c:	42420060 	.word	0x42420060

08004130 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d101      	bne.n	8004144 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e0d0      	b.n	80042e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004144:	4b6a      	ldr	r3, [pc, #424]	; (80042f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0307 	and.w	r3, r3, #7
 800414c:	683a      	ldr	r2, [r7, #0]
 800414e:	429a      	cmp	r2, r3
 8004150:	d910      	bls.n	8004174 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004152:	4b67      	ldr	r3, [pc, #412]	; (80042f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f023 0207 	bic.w	r2, r3, #7
 800415a:	4965      	ldr	r1, [pc, #404]	; (80042f0 <HAL_RCC_ClockConfig+0x1c0>)
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	4313      	orrs	r3, r2
 8004160:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004162:	4b63      	ldr	r3, [pc, #396]	; (80042f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0307 	and.w	r3, r3, #7
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	429a      	cmp	r2, r3
 800416e:	d001      	beq.n	8004174 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e0b8      	b.n	80042e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0302 	and.w	r3, r3, #2
 800417c:	2b00      	cmp	r3, #0
 800417e:	d020      	beq.n	80041c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0304 	and.w	r3, r3, #4
 8004188:	2b00      	cmp	r3, #0
 800418a:	d005      	beq.n	8004198 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800418c:	4b59      	ldr	r3, [pc, #356]	; (80042f4 <HAL_RCC_ClockConfig+0x1c4>)
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	4a58      	ldr	r2, [pc, #352]	; (80042f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004192:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004196:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0308 	and.w	r3, r3, #8
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d005      	beq.n	80041b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041a4:	4b53      	ldr	r3, [pc, #332]	; (80042f4 <HAL_RCC_ClockConfig+0x1c4>)
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	4a52      	ldr	r2, [pc, #328]	; (80042f4 <HAL_RCC_ClockConfig+0x1c4>)
 80041aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80041ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041b0:	4b50      	ldr	r3, [pc, #320]	; (80042f4 <HAL_RCC_ClockConfig+0x1c4>)
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	494d      	ldr	r1, [pc, #308]	; (80042f4 <HAL_RCC_ClockConfig+0x1c4>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d040      	beq.n	8004250 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d107      	bne.n	80041e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041d6:	4b47      	ldr	r3, [pc, #284]	; (80042f4 <HAL_RCC_ClockConfig+0x1c4>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d115      	bne.n	800420e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e07f      	b.n	80042e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d107      	bne.n	80041fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ee:	4b41      	ldr	r3, [pc, #260]	; (80042f4 <HAL_RCC_ClockConfig+0x1c4>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d109      	bne.n	800420e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e073      	b.n	80042e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041fe:	4b3d      	ldr	r3, [pc, #244]	; (80042f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e06b      	b.n	80042e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800420e:	4b39      	ldr	r3, [pc, #228]	; (80042f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f023 0203 	bic.w	r2, r3, #3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	4936      	ldr	r1, [pc, #216]	; (80042f4 <HAL_RCC_ClockConfig+0x1c4>)
 800421c:	4313      	orrs	r3, r2
 800421e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004220:	f7fe f824 	bl	800226c <HAL_GetTick>
 8004224:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004226:	e00a      	b.n	800423e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004228:	f7fe f820 	bl	800226c <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	f241 3288 	movw	r2, #5000	; 0x1388
 8004236:	4293      	cmp	r3, r2
 8004238:	d901      	bls.n	800423e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e053      	b.n	80042e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800423e:	4b2d      	ldr	r3, [pc, #180]	; (80042f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f003 020c 	and.w	r2, r3, #12
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	429a      	cmp	r2, r3
 800424e:	d1eb      	bne.n	8004228 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004250:	4b27      	ldr	r3, [pc, #156]	; (80042f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0307 	and.w	r3, r3, #7
 8004258:	683a      	ldr	r2, [r7, #0]
 800425a:	429a      	cmp	r2, r3
 800425c:	d210      	bcs.n	8004280 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800425e:	4b24      	ldr	r3, [pc, #144]	; (80042f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f023 0207 	bic.w	r2, r3, #7
 8004266:	4922      	ldr	r1, [pc, #136]	; (80042f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	4313      	orrs	r3, r2
 800426c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800426e:	4b20      	ldr	r3, [pc, #128]	; (80042f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0307 	and.w	r3, r3, #7
 8004276:	683a      	ldr	r2, [r7, #0]
 8004278:	429a      	cmp	r2, r3
 800427a:	d001      	beq.n	8004280 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e032      	b.n	80042e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0304 	and.w	r3, r3, #4
 8004288:	2b00      	cmp	r3, #0
 800428a:	d008      	beq.n	800429e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800428c:	4b19      	ldr	r3, [pc, #100]	; (80042f4 <HAL_RCC_ClockConfig+0x1c4>)
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	4916      	ldr	r1, [pc, #88]	; (80042f4 <HAL_RCC_ClockConfig+0x1c4>)
 800429a:	4313      	orrs	r3, r2
 800429c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0308 	and.w	r3, r3, #8
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d009      	beq.n	80042be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80042aa:	4b12      	ldr	r3, [pc, #72]	; (80042f4 <HAL_RCC_ClockConfig+0x1c4>)
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	00db      	lsls	r3, r3, #3
 80042b8:	490e      	ldr	r1, [pc, #56]	; (80042f4 <HAL_RCC_ClockConfig+0x1c4>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80042be:	f000 f821 	bl	8004304 <HAL_RCC_GetSysClockFreq>
 80042c2:	4602      	mov	r2, r0
 80042c4:	4b0b      	ldr	r3, [pc, #44]	; (80042f4 <HAL_RCC_ClockConfig+0x1c4>)
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	091b      	lsrs	r3, r3, #4
 80042ca:	f003 030f 	and.w	r3, r3, #15
 80042ce:	490a      	ldr	r1, [pc, #40]	; (80042f8 <HAL_RCC_ClockConfig+0x1c8>)
 80042d0:	5ccb      	ldrb	r3, [r1, r3]
 80042d2:	fa22 f303 	lsr.w	r3, r2, r3
 80042d6:	4a09      	ldr	r2, [pc, #36]	; (80042fc <HAL_RCC_ClockConfig+0x1cc>)
 80042d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80042da:	4b09      	ldr	r3, [pc, #36]	; (8004300 <HAL_RCC_ClockConfig+0x1d0>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4618      	mov	r0, r3
 80042e0:	f7fd ff82 	bl	80021e8 <HAL_InitTick>

  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	40022000 	.word	0x40022000
 80042f4:	40021000 	.word	0x40021000
 80042f8:	08009cbc 	.word	0x08009cbc
 80042fc:	20000008 	.word	0x20000008
 8004300:	2000000c 	.word	0x2000000c

08004304 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004304:	b490      	push	{r4, r7}
 8004306:	b08a      	sub	sp, #40	; 0x28
 8004308:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800430a:	4b2a      	ldr	r3, [pc, #168]	; (80043b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800430c:	1d3c      	adds	r4, r7, #4
 800430e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004310:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004314:	f240 2301 	movw	r3, #513	; 0x201
 8004318:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800431a:	2300      	movs	r3, #0
 800431c:	61fb      	str	r3, [r7, #28]
 800431e:	2300      	movs	r3, #0
 8004320:	61bb      	str	r3, [r7, #24]
 8004322:	2300      	movs	r3, #0
 8004324:	627b      	str	r3, [r7, #36]	; 0x24
 8004326:	2300      	movs	r3, #0
 8004328:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800432a:	2300      	movs	r3, #0
 800432c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800432e:	4b22      	ldr	r3, [pc, #136]	; (80043b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	f003 030c 	and.w	r3, r3, #12
 800433a:	2b04      	cmp	r3, #4
 800433c:	d002      	beq.n	8004344 <HAL_RCC_GetSysClockFreq+0x40>
 800433e:	2b08      	cmp	r3, #8
 8004340:	d003      	beq.n	800434a <HAL_RCC_GetSysClockFreq+0x46>
 8004342:	e02d      	b.n	80043a0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004344:	4b1d      	ldr	r3, [pc, #116]	; (80043bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004346:	623b      	str	r3, [r7, #32]
      break;
 8004348:	e02d      	b.n	80043a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	0c9b      	lsrs	r3, r3, #18
 800434e:	f003 030f 	and.w	r3, r3, #15
 8004352:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004356:	4413      	add	r3, r2
 8004358:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800435c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d013      	beq.n	8004390 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004368:	4b13      	ldr	r3, [pc, #76]	; (80043b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	0c5b      	lsrs	r3, r3, #17
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004376:	4413      	add	r3, r2
 8004378:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800437c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	4a0e      	ldr	r2, [pc, #56]	; (80043bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004382:	fb02 f203 	mul.w	r2, r2, r3
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	fbb2 f3f3 	udiv	r3, r2, r3
 800438c:	627b      	str	r3, [r7, #36]	; 0x24
 800438e:	e004      	b.n	800439a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	4a0b      	ldr	r2, [pc, #44]	; (80043c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004394:	fb02 f303 	mul.w	r3, r2, r3
 8004398:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800439a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439c:	623b      	str	r3, [r7, #32]
      break;
 800439e:	e002      	b.n	80043a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80043a0:	4b06      	ldr	r3, [pc, #24]	; (80043bc <HAL_RCC_GetSysClockFreq+0xb8>)
 80043a2:	623b      	str	r3, [r7, #32]
      break;
 80043a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043a6:	6a3b      	ldr	r3, [r7, #32]
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3728      	adds	r7, #40	; 0x28
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bc90      	pop	{r4, r7}
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	08009cac 	.word	0x08009cac
 80043b8:	40021000 	.word	0x40021000
 80043bc:	007a1200 	.word	0x007a1200
 80043c0:	003d0900 	.word	0x003d0900

080043c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043c4:	b480      	push	{r7}
 80043c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043c8:	4b02      	ldr	r3, [pc, #8]	; (80043d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80043ca:	681b      	ldr	r3, [r3, #0]
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bc80      	pop	{r7}
 80043d2:	4770      	bx	lr
 80043d4:	20000008 	.word	0x20000008

080043d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80043dc:	f7ff fff2 	bl	80043c4 <HAL_RCC_GetHCLKFreq>
 80043e0:	4602      	mov	r2, r0
 80043e2:	4b05      	ldr	r3, [pc, #20]	; (80043f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	0a1b      	lsrs	r3, r3, #8
 80043e8:	f003 0307 	and.w	r3, r3, #7
 80043ec:	4903      	ldr	r1, [pc, #12]	; (80043fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80043ee:	5ccb      	ldrb	r3, [r1, r3]
 80043f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	40021000 	.word	0x40021000
 80043fc:	08009ccc 	.word	0x08009ccc

08004400 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004404:	f7ff ffde 	bl	80043c4 <HAL_RCC_GetHCLKFreq>
 8004408:	4602      	mov	r2, r0
 800440a:	4b05      	ldr	r3, [pc, #20]	; (8004420 <HAL_RCC_GetPCLK2Freq+0x20>)
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	0adb      	lsrs	r3, r3, #11
 8004410:	f003 0307 	and.w	r3, r3, #7
 8004414:	4903      	ldr	r1, [pc, #12]	; (8004424 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004416:	5ccb      	ldrb	r3, [r1, r3]
 8004418:	fa22 f303 	lsr.w	r3, r2, r3
}
 800441c:	4618      	mov	r0, r3
 800441e:	bd80      	pop	{r7, pc}
 8004420:	40021000 	.word	0x40021000
 8004424:	08009ccc 	.word	0x08009ccc

08004428 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004428:	b480      	push	{r7}
 800442a:	b085      	sub	sp, #20
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004430:	4b0a      	ldr	r3, [pc, #40]	; (800445c <RCC_Delay+0x34>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a0a      	ldr	r2, [pc, #40]	; (8004460 <RCC_Delay+0x38>)
 8004436:	fba2 2303 	umull	r2, r3, r2, r3
 800443a:	0a5b      	lsrs	r3, r3, #9
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	fb02 f303 	mul.w	r3, r2, r3
 8004442:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004444:	bf00      	nop
  }
  while (Delay --);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	1e5a      	subs	r2, r3, #1
 800444a:	60fa      	str	r2, [r7, #12]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1f9      	bne.n	8004444 <RCC_Delay+0x1c>
}
 8004450:	bf00      	nop
 8004452:	bf00      	nop
 8004454:	3714      	adds	r7, #20
 8004456:	46bd      	mov	sp, r7
 8004458:	bc80      	pop	{r7}
 800445a:	4770      	bx	lr
 800445c:	20000008 	.word	0x20000008
 8004460:	10624dd3 	.word	0x10624dd3

08004464 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b086      	sub	sp, #24
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800446c:	2300      	movs	r3, #0
 800446e:	613b      	str	r3, [r7, #16]
 8004470:	2300      	movs	r3, #0
 8004472:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0301 	and.w	r3, r3, #1
 800447c:	2b00      	cmp	r3, #0
 800447e:	d07d      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004480:	2300      	movs	r3, #0
 8004482:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004484:	4b4f      	ldr	r3, [pc, #316]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004486:	69db      	ldr	r3, [r3, #28]
 8004488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d10d      	bne.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004490:	4b4c      	ldr	r3, [pc, #304]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004492:	69db      	ldr	r3, [r3, #28]
 8004494:	4a4b      	ldr	r2, [pc, #300]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004496:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800449a:	61d3      	str	r3, [r2, #28]
 800449c:	4b49      	ldr	r3, [pc, #292]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800449e:	69db      	ldr	r3, [r3, #28]
 80044a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044a4:	60bb      	str	r3, [r7, #8]
 80044a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044a8:	2301      	movs	r3, #1
 80044aa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ac:	4b46      	ldr	r3, [pc, #280]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d118      	bne.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044b8:	4b43      	ldr	r3, [pc, #268]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a42      	ldr	r2, [pc, #264]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044c4:	f7fd fed2 	bl	800226c <HAL_GetTick>
 80044c8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ca:	e008      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044cc:	f7fd fece 	bl	800226c <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	2b64      	cmp	r3, #100	; 0x64
 80044d8:	d901      	bls.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e06d      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044de:	4b3a      	ldr	r3, [pc, #232]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d0f0      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044ea:	4b36      	ldr	r3, [pc, #216]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ec:	6a1b      	ldr	r3, [r3, #32]
 80044ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044f2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d02e      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	429a      	cmp	r2, r3
 8004506:	d027      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004508:	4b2e      	ldr	r3, [pc, #184]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800450a:	6a1b      	ldr	r3, [r3, #32]
 800450c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004510:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004512:	4b2e      	ldr	r3, [pc, #184]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004514:	2201      	movs	r2, #1
 8004516:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004518:	4b2c      	ldr	r3, [pc, #176]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800451a:	2200      	movs	r2, #0
 800451c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800451e:	4a29      	ldr	r2, [pc, #164]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	2b00      	cmp	r3, #0
 800452c:	d014      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800452e:	f7fd fe9d 	bl	800226c <HAL_GetTick>
 8004532:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004534:	e00a      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004536:	f7fd fe99 	bl	800226c <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	f241 3288 	movw	r2, #5000	; 0x1388
 8004544:	4293      	cmp	r3, r2
 8004546:	d901      	bls.n	800454c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e036      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800454c:	4b1d      	ldr	r3, [pc, #116]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800454e:	6a1b      	ldr	r3, [r3, #32]
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b00      	cmp	r3, #0
 8004556:	d0ee      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004558:	4b1a      	ldr	r3, [pc, #104]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800455a:	6a1b      	ldr	r3, [r3, #32]
 800455c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	4917      	ldr	r1, [pc, #92]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004566:	4313      	orrs	r3, r2
 8004568:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800456a:	7dfb      	ldrb	r3, [r7, #23]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d105      	bne.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004570:	4b14      	ldr	r3, [pc, #80]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004572:	69db      	ldr	r3, [r3, #28]
 8004574:	4a13      	ldr	r2, [pc, #76]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004576:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800457a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0302 	and.w	r3, r3, #2
 8004584:	2b00      	cmp	r3, #0
 8004586:	d008      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004588:	4b0e      	ldr	r3, [pc, #56]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	490b      	ldr	r1, [pc, #44]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004596:	4313      	orrs	r3, r2
 8004598:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0310 	and.w	r3, r3, #16
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d008      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045a6:	4b07      	ldr	r3, [pc, #28]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	4904      	ldr	r1, [pc, #16]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3718      	adds	r7, #24
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	40021000 	.word	0x40021000
 80045c8:	40007000 	.word	0x40007000
 80045cc:	42420440 	.word	0x42420440

080045d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d101      	bne.n	80045e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e041      	b.n	8004666 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d106      	bne.n	80045fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f7fd fc2c 	bl	8001e54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2202      	movs	r2, #2
 8004600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	3304      	adds	r3, #4
 800460c:	4619      	mov	r1, r3
 800460e:	4610      	mov	r0, r2
 8004610:	f000 fa9e 	bl	8004b50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3708      	adds	r7, #8
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
	...

08004670 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004670:	b480      	push	{r7}
 8004672:	b085      	sub	sp, #20
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b01      	cmp	r3, #1
 8004682:	d001      	beq.n	8004688 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e03a      	b.n	80046fe <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2202      	movs	r2, #2
 800468c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68da      	ldr	r2, [r3, #12]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f042 0201 	orr.w	r2, r2, #1
 800469e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a18      	ldr	r2, [pc, #96]	; (8004708 <HAL_TIM_Base_Start_IT+0x98>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d00e      	beq.n	80046c8 <HAL_TIM_Base_Start_IT+0x58>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046b2:	d009      	beq.n	80046c8 <HAL_TIM_Base_Start_IT+0x58>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a14      	ldr	r2, [pc, #80]	; (800470c <HAL_TIM_Base_Start_IT+0x9c>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d004      	beq.n	80046c8 <HAL_TIM_Base_Start_IT+0x58>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a13      	ldr	r2, [pc, #76]	; (8004710 <HAL_TIM_Base_Start_IT+0xa0>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d111      	bne.n	80046ec <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f003 0307 	and.w	r3, r3, #7
 80046d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2b06      	cmp	r3, #6
 80046d8:	d010      	beq.n	80046fc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f042 0201 	orr.w	r2, r2, #1
 80046e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046ea:	e007      	b.n	80046fc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f042 0201 	orr.w	r2, r2, #1
 80046fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3714      	adds	r7, #20
 8004702:	46bd      	mov	sp, r7
 8004704:	bc80      	pop	{r7}
 8004706:	4770      	bx	lr
 8004708:	40012c00 	.word	0x40012c00
 800470c:	40000400 	.word	0x40000400
 8004710:	40000800 	.word	0x40000800

08004714 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68da      	ldr	r2, [r3, #12]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f022 0201 	bic.w	r2, r2, #1
 800472a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	6a1a      	ldr	r2, [r3, #32]
 8004732:	f241 1311 	movw	r3, #4369	; 0x1111
 8004736:	4013      	ands	r3, r2
 8004738:	2b00      	cmp	r3, #0
 800473a:	d10f      	bne.n	800475c <HAL_TIM_Base_Stop_IT+0x48>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	6a1a      	ldr	r2, [r3, #32]
 8004742:	f240 4344 	movw	r3, #1092	; 0x444
 8004746:	4013      	ands	r3, r2
 8004748:	2b00      	cmp	r3, #0
 800474a:	d107      	bne.n	800475c <HAL_TIM_Base_Stop_IT+0x48>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f022 0201 	bic.w	r2, r2, #1
 800475a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	370c      	adds	r7, #12
 800476a:	46bd      	mov	sp, r7
 800476c:	bc80      	pop	{r7}
 800476e:	4770      	bx	lr

08004770 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	f003 0302 	and.w	r3, r3, #2
 8004782:	2b02      	cmp	r3, #2
 8004784:	d122      	bne.n	80047cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	f003 0302 	and.w	r3, r3, #2
 8004790:	2b02      	cmp	r3, #2
 8004792:	d11b      	bne.n	80047cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f06f 0202 	mvn.w	r2, #2
 800479c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2201      	movs	r2, #1
 80047a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	f003 0303 	and.w	r3, r3, #3
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d003      	beq.n	80047ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 f9b1 	bl	8004b1a <HAL_TIM_IC_CaptureCallback>
 80047b8:	e005      	b.n	80047c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 f9a4 	bl	8004b08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 f9b3 	bl	8004b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	f003 0304 	and.w	r3, r3, #4
 80047d6:	2b04      	cmp	r3, #4
 80047d8:	d122      	bne.n	8004820 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	f003 0304 	and.w	r3, r3, #4
 80047e4:	2b04      	cmp	r3, #4
 80047e6:	d11b      	bne.n	8004820 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f06f 0204 	mvn.w	r2, #4
 80047f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2202      	movs	r2, #2
 80047f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004802:	2b00      	cmp	r3, #0
 8004804:	d003      	beq.n	800480e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 f987 	bl	8004b1a <HAL_TIM_IC_CaptureCallback>
 800480c:	e005      	b.n	800481a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 f97a 	bl	8004b08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 f989 	bl	8004b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	f003 0308 	and.w	r3, r3, #8
 800482a:	2b08      	cmp	r3, #8
 800482c:	d122      	bne.n	8004874 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	f003 0308 	and.w	r3, r3, #8
 8004838:	2b08      	cmp	r3, #8
 800483a:	d11b      	bne.n	8004874 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f06f 0208 	mvn.w	r2, #8
 8004844:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2204      	movs	r2, #4
 800484a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	69db      	ldr	r3, [r3, #28]
 8004852:	f003 0303 	and.w	r3, r3, #3
 8004856:	2b00      	cmp	r3, #0
 8004858:	d003      	beq.n	8004862 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 f95d 	bl	8004b1a <HAL_TIM_IC_CaptureCallback>
 8004860:	e005      	b.n	800486e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 f950 	bl	8004b08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f000 f95f 	bl	8004b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	f003 0310 	and.w	r3, r3, #16
 800487e:	2b10      	cmp	r3, #16
 8004880:	d122      	bne.n	80048c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	f003 0310 	and.w	r3, r3, #16
 800488c:	2b10      	cmp	r3, #16
 800488e:	d11b      	bne.n	80048c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f06f 0210 	mvn.w	r2, #16
 8004898:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2208      	movs	r2, #8
 800489e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	69db      	ldr	r3, [r3, #28]
 80048a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d003      	beq.n	80048b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f933 	bl	8004b1a <HAL_TIM_IC_CaptureCallback>
 80048b4:	e005      	b.n	80048c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 f926 	bl	8004b08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 f935 	bl	8004b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d10e      	bne.n	80048f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d107      	bne.n	80048f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f06f 0201 	mvn.w	r2, #1
 80048ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f7fc fe86 	bl	8001600 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048fe:	2b80      	cmp	r3, #128	; 0x80
 8004900:	d10e      	bne.n	8004920 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800490c:	2b80      	cmp	r3, #128	; 0x80
 800490e:	d107      	bne.n	8004920 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 fa77 	bl	8004e0e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800492a:	2b40      	cmp	r3, #64	; 0x40
 800492c:	d10e      	bne.n	800494c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004938:	2b40      	cmp	r3, #64	; 0x40
 800493a:	d107      	bne.n	800494c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 f8f9 	bl	8004b3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	f003 0320 	and.w	r3, r3, #32
 8004956:	2b20      	cmp	r3, #32
 8004958:	d10e      	bne.n	8004978 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	f003 0320 	and.w	r3, r3, #32
 8004964:	2b20      	cmp	r3, #32
 8004966:	d107      	bne.n	8004978 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f06f 0220 	mvn.w	r2, #32
 8004970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 fa42 	bl	8004dfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004978:	bf00      	nop
 800497a:	3708      	adds	r7, #8
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004990:	2b01      	cmp	r3, #1
 8004992:	d101      	bne.n	8004998 <HAL_TIM_ConfigClockSource+0x18>
 8004994:	2302      	movs	r3, #2
 8004996:	e0b3      	b.n	8004b00 <HAL_TIM_ConfigClockSource+0x180>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2202      	movs	r2, #2
 80049a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80049b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049be:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049d0:	d03e      	beq.n	8004a50 <HAL_TIM_ConfigClockSource+0xd0>
 80049d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049d6:	f200 8087 	bhi.w	8004ae8 <HAL_TIM_ConfigClockSource+0x168>
 80049da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049de:	f000 8085 	beq.w	8004aec <HAL_TIM_ConfigClockSource+0x16c>
 80049e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049e6:	d87f      	bhi.n	8004ae8 <HAL_TIM_ConfigClockSource+0x168>
 80049e8:	2b70      	cmp	r3, #112	; 0x70
 80049ea:	d01a      	beq.n	8004a22 <HAL_TIM_ConfigClockSource+0xa2>
 80049ec:	2b70      	cmp	r3, #112	; 0x70
 80049ee:	d87b      	bhi.n	8004ae8 <HAL_TIM_ConfigClockSource+0x168>
 80049f0:	2b60      	cmp	r3, #96	; 0x60
 80049f2:	d050      	beq.n	8004a96 <HAL_TIM_ConfigClockSource+0x116>
 80049f4:	2b60      	cmp	r3, #96	; 0x60
 80049f6:	d877      	bhi.n	8004ae8 <HAL_TIM_ConfigClockSource+0x168>
 80049f8:	2b50      	cmp	r3, #80	; 0x50
 80049fa:	d03c      	beq.n	8004a76 <HAL_TIM_ConfigClockSource+0xf6>
 80049fc:	2b50      	cmp	r3, #80	; 0x50
 80049fe:	d873      	bhi.n	8004ae8 <HAL_TIM_ConfigClockSource+0x168>
 8004a00:	2b40      	cmp	r3, #64	; 0x40
 8004a02:	d058      	beq.n	8004ab6 <HAL_TIM_ConfigClockSource+0x136>
 8004a04:	2b40      	cmp	r3, #64	; 0x40
 8004a06:	d86f      	bhi.n	8004ae8 <HAL_TIM_ConfigClockSource+0x168>
 8004a08:	2b30      	cmp	r3, #48	; 0x30
 8004a0a:	d064      	beq.n	8004ad6 <HAL_TIM_ConfigClockSource+0x156>
 8004a0c:	2b30      	cmp	r3, #48	; 0x30
 8004a0e:	d86b      	bhi.n	8004ae8 <HAL_TIM_ConfigClockSource+0x168>
 8004a10:	2b20      	cmp	r3, #32
 8004a12:	d060      	beq.n	8004ad6 <HAL_TIM_ConfigClockSource+0x156>
 8004a14:	2b20      	cmp	r3, #32
 8004a16:	d867      	bhi.n	8004ae8 <HAL_TIM_ConfigClockSource+0x168>
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d05c      	beq.n	8004ad6 <HAL_TIM_ConfigClockSource+0x156>
 8004a1c:	2b10      	cmp	r3, #16
 8004a1e:	d05a      	beq.n	8004ad6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004a20:	e062      	b.n	8004ae8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6818      	ldr	r0, [r3, #0]
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	6899      	ldr	r1, [r3, #8]
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	685a      	ldr	r2, [r3, #4]
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	f000 f966 	bl	8004d02 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a44:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	609a      	str	r2, [r3, #8]
      break;
 8004a4e:	e04e      	b.n	8004aee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6818      	ldr	r0, [r3, #0]
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	6899      	ldr	r1, [r3, #8]
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	685a      	ldr	r2, [r3, #4]
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	f000 f94f 	bl	8004d02 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	689a      	ldr	r2, [r3, #8]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a72:	609a      	str	r2, [r3, #8]
      break;
 8004a74:	e03b      	b.n	8004aee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6818      	ldr	r0, [r3, #0]
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	6859      	ldr	r1, [r3, #4]
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	461a      	mov	r2, r3
 8004a84:	f000 f8c6 	bl	8004c14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2150      	movs	r1, #80	; 0x50
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f000 f91d 	bl	8004cce <TIM_ITRx_SetConfig>
      break;
 8004a94:	e02b      	b.n	8004aee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6818      	ldr	r0, [r3, #0]
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	6859      	ldr	r1, [r3, #4]
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	f000 f8e4 	bl	8004c70 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2160      	movs	r1, #96	; 0x60
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f000 f90d 	bl	8004cce <TIM_ITRx_SetConfig>
      break;
 8004ab4:	e01b      	b.n	8004aee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6818      	ldr	r0, [r3, #0]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	6859      	ldr	r1, [r3, #4]
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	f000 f8a6 	bl	8004c14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2140      	movs	r1, #64	; 0x40
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f000 f8fd 	bl	8004cce <TIM_ITRx_SetConfig>
      break;
 8004ad4:	e00b      	b.n	8004aee <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4619      	mov	r1, r3
 8004ae0:	4610      	mov	r0, r2
 8004ae2:	f000 f8f4 	bl	8004cce <TIM_ITRx_SetConfig>
        break;
 8004ae6:	e002      	b.n	8004aee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004ae8:	bf00      	nop
 8004aea:	e000      	b.n	8004aee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004aec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3710      	adds	r7, #16
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b10:	bf00      	nop
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bc80      	pop	{r7}
 8004b18:	4770      	bx	lr

08004b1a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	b083      	sub	sp, #12
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b22:	bf00      	nop
 8004b24:	370c      	adds	r7, #12
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bc80      	pop	{r7}
 8004b2a:	4770      	bx	lr

08004b2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b34:	bf00      	nop
 8004b36:	370c      	adds	r7, #12
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bc80      	pop	{r7}
 8004b3c:	4770      	bx	lr

08004b3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b3e:	b480      	push	{r7}
 8004b40:	b083      	sub	sp, #12
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b46:	bf00      	nop
 8004b48:	370c      	adds	r7, #12
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bc80      	pop	{r7}
 8004b4e:	4770      	bx	lr

08004b50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a29      	ldr	r2, [pc, #164]	; (8004c08 <TIM_Base_SetConfig+0xb8>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d00b      	beq.n	8004b80 <TIM_Base_SetConfig+0x30>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b6e:	d007      	beq.n	8004b80 <TIM_Base_SetConfig+0x30>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a26      	ldr	r2, [pc, #152]	; (8004c0c <TIM_Base_SetConfig+0xbc>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d003      	beq.n	8004b80 <TIM_Base_SetConfig+0x30>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a25      	ldr	r2, [pc, #148]	; (8004c10 <TIM_Base_SetConfig+0xc0>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d108      	bne.n	8004b92 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a1c      	ldr	r2, [pc, #112]	; (8004c08 <TIM_Base_SetConfig+0xb8>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d00b      	beq.n	8004bb2 <TIM_Base_SetConfig+0x62>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ba0:	d007      	beq.n	8004bb2 <TIM_Base_SetConfig+0x62>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a19      	ldr	r2, [pc, #100]	; (8004c0c <TIM_Base_SetConfig+0xbc>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d003      	beq.n	8004bb2 <TIM_Base_SetConfig+0x62>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a18      	ldr	r2, [pc, #96]	; (8004c10 <TIM_Base_SetConfig+0xc0>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d108      	bne.n	8004bc4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	689a      	ldr	r2, [r3, #8]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a07      	ldr	r2, [pc, #28]	; (8004c08 <TIM_Base_SetConfig+0xb8>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d103      	bne.n	8004bf8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	691a      	ldr	r2, [r3, #16]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	615a      	str	r2, [r3, #20]
}
 8004bfe:	bf00      	nop
 8004c00:	3714      	adds	r7, #20
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bc80      	pop	{r7}
 8004c06:	4770      	bx	lr
 8004c08:	40012c00 	.word	0x40012c00
 8004c0c:	40000400 	.word	0x40000400
 8004c10:	40000800 	.word	0x40000800

08004c14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b087      	sub	sp, #28
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6a1b      	ldr	r3, [r3, #32]
 8004c24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6a1b      	ldr	r3, [r3, #32]
 8004c2a:	f023 0201 	bic.w	r2, r3, #1
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	011b      	lsls	r3, r3, #4
 8004c44:	693a      	ldr	r2, [r7, #16]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	f023 030a 	bic.w	r3, r3, #10
 8004c50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c52:	697a      	ldr	r2, [r7, #20]
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	693a      	ldr	r2, [r7, #16]
 8004c5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	621a      	str	r2, [r3, #32]
}
 8004c66:	bf00      	nop
 8004c68:	371c      	adds	r7, #28
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bc80      	pop	{r7}
 8004c6e:	4770      	bx	lr

08004c70 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b087      	sub	sp, #28
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6a1b      	ldr	r3, [r3, #32]
 8004c80:	f023 0210 	bic.w	r2, r3, #16
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	699b      	ldr	r3, [r3, #24]
 8004c8c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6a1b      	ldr	r3, [r3, #32]
 8004c92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c9a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	031b      	lsls	r3, r3, #12
 8004ca0:	697a      	ldr	r2, [r7, #20]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004cac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	011b      	lsls	r3, r3, #4
 8004cb2:	693a      	ldr	r2, [r7, #16]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	697a      	ldr	r2, [r7, #20]
 8004cbc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	693a      	ldr	r2, [r7, #16]
 8004cc2:	621a      	str	r2, [r3, #32]
}
 8004cc4:	bf00      	nop
 8004cc6:	371c      	adds	r7, #28
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bc80      	pop	{r7}
 8004ccc:	4770      	bx	lr

08004cce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004cce:	b480      	push	{r7}
 8004cd0:	b085      	sub	sp, #20
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
 8004cd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ce4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ce6:	683a      	ldr	r2, [r7, #0]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	f043 0307 	orr.w	r3, r3, #7
 8004cf0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	609a      	str	r2, [r3, #8]
}
 8004cf8:	bf00      	nop
 8004cfa:	3714      	adds	r7, #20
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bc80      	pop	{r7}
 8004d00:	4770      	bx	lr

08004d02 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d02:	b480      	push	{r7}
 8004d04:	b087      	sub	sp, #28
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	60f8      	str	r0, [r7, #12]
 8004d0a:	60b9      	str	r1, [r7, #8]
 8004d0c:	607a      	str	r2, [r7, #4]
 8004d0e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d1c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	021a      	lsls	r2, r3, #8
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	431a      	orrs	r2, r3
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	697a      	ldr	r2, [r7, #20]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	697a      	ldr	r2, [r7, #20]
 8004d34:	609a      	str	r2, [r3, #8]
}
 8004d36:	bf00      	nop
 8004d38:	371c      	adds	r7, #28
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bc80      	pop	{r7}
 8004d3e:	4770      	bx	lr

08004d40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b085      	sub	sp, #20
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d101      	bne.n	8004d58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d54:	2302      	movs	r3, #2
 8004d56:	e046      	b.n	8004de6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2202      	movs	r2, #2
 8004d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68fa      	ldr	r2, [r7, #12]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a16      	ldr	r2, [pc, #88]	; (8004df0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d00e      	beq.n	8004dba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004da4:	d009      	beq.n	8004dba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a12      	ldr	r2, [pc, #72]	; (8004df4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d004      	beq.n	8004dba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a10      	ldr	r2, [pc, #64]	; (8004df8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d10c      	bne.n	8004dd4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	68ba      	ldr	r2, [r7, #8]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68ba      	ldr	r2, [r7, #8]
 8004dd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3714      	adds	r7, #20
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bc80      	pop	{r7}
 8004dee:	4770      	bx	lr
 8004df0:	40012c00 	.word	0x40012c00
 8004df4:	40000400 	.word	0x40000400
 8004df8:	40000800 	.word	0x40000800

08004dfc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e04:	bf00      	nop
 8004e06:	370c      	adds	r7, #12
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bc80      	pop	{r7}
 8004e0c:	4770      	bx	lr

08004e0e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e0e:	b480      	push	{r7}
 8004e10:	b083      	sub	sp, #12
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e16:	bf00      	nop
 8004e18:	370c      	adds	r7, #12
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bc80      	pop	{r7}
 8004e1e:	4770      	bx	lr

08004e20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d101      	bne.n	8004e32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e03f      	b.n	8004eb2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d106      	bne.n	8004e4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f7fd f844 	bl	8001ed4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2224      	movs	r2, #36	; 0x24
 8004e50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68da      	ldr	r2, [r3, #12]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f000 f829 	bl	8004ebc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	691a      	ldr	r2, [r3, #16]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	695a      	ldr	r2, [r3, #20]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68da      	ldr	r2, [r3, #12]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2220      	movs	r2, #32
 8004ea4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2220      	movs	r2, #32
 8004eac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3708      	adds	r7, #8
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
	...

08004ebc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	68da      	ldr	r2, [r3, #12]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	689a      	ldr	r2, [r3, #8]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	431a      	orrs	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	695b      	ldr	r3, [r3, #20]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004ef6:	f023 030c 	bic.w	r3, r3, #12
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	6812      	ldr	r2, [r2, #0]
 8004efe:	68b9      	ldr	r1, [r7, #8]
 8004f00:	430b      	orrs	r3, r1
 8004f02:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	695b      	ldr	r3, [r3, #20]
 8004f0a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	699a      	ldr	r2, [r3, #24]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	430a      	orrs	r2, r1
 8004f18:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a2c      	ldr	r2, [pc, #176]	; (8004fd0 <UART_SetConfig+0x114>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d103      	bne.n	8004f2c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004f24:	f7ff fa6c 	bl	8004400 <HAL_RCC_GetPCLK2Freq>
 8004f28:	60f8      	str	r0, [r7, #12]
 8004f2a:	e002      	b.n	8004f32 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004f2c:	f7ff fa54 	bl	80043d8 <HAL_RCC_GetPCLK1Freq>
 8004f30:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	4613      	mov	r3, r2
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	4413      	add	r3, r2
 8004f3a:	009a      	lsls	r2, r3, #2
 8004f3c:	441a      	add	r2, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f48:	4a22      	ldr	r2, [pc, #136]	; (8004fd4 <UART_SetConfig+0x118>)
 8004f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f4e:	095b      	lsrs	r3, r3, #5
 8004f50:	0119      	lsls	r1, r3, #4
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	4613      	mov	r3, r2
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	4413      	add	r3, r2
 8004f5a:	009a      	lsls	r2, r3, #2
 8004f5c:	441a      	add	r2, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f68:	4b1a      	ldr	r3, [pc, #104]	; (8004fd4 <UART_SetConfig+0x118>)
 8004f6a:	fba3 0302 	umull	r0, r3, r3, r2
 8004f6e:	095b      	lsrs	r3, r3, #5
 8004f70:	2064      	movs	r0, #100	; 0x64
 8004f72:	fb00 f303 	mul.w	r3, r0, r3
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	011b      	lsls	r3, r3, #4
 8004f7a:	3332      	adds	r3, #50	; 0x32
 8004f7c:	4a15      	ldr	r2, [pc, #84]	; (8004fd4 <UART_SetConfig+0x118>)
 8004f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f82:	095b      	lsrs	r3, r3, #5
 8004f84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f88:	4419      	add	r1, r3
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	4413      	add	r3, r2
 8004f92:	009a      	lsls	r2, r3, #2
 8004f94:	441a      	add	r2, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fa0:	4b0c      	ldr	r3, [pc, #48]	; (8004fd4 <UART_SetConfig+0x118>)
 8004fa2:	fba3 0302 	umull	r0, r3, r3, r2
 8004fa6:	095b      	lsrs	r3, r3, #5
 8004fa8:	2064      	movs	r0, #100	; 0x64
 8004faa:	fb00 f303 	mul.w	r3, r0, r3
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	011b      	lsls	r3, r3, #4
 8004fb2:	3332      	adds	r3, #50	; 0x32
 8004fb4:	4a07      	ldr	r2, [pc, #28]	; (8004fd4 <UART_SetConfig+0x118>)
 8004fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8004fba:	095b      	lsrs	r3, r3, #5
 8004fbc:	f003 020f 	and.w	r2, r3, #15
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	440a      	add	r2, r1
 8004fc6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004fc8:	bf00      	nop
 8004fca:	3710      	adds	r7, #16
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	40013800 	.word	0x40013800
 8004fd4:	51eb851f 	.word	0x51eb851f

08004fd8 <FIRFilter_Init>:
};




void FIRFilter_Init(FIRFilter *fir) {
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]

	/* Clear filter buffer */
	for (uint8_t n = 0; n < FIR_FILTER_LENGTH; n++) {
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	73fb      	strb	r3, [r7, #15]
 8004fe4:	e008      	b.n	8004ff8 <FIRFilter_Init+0x20>

		fir->buf[n] = 0.0f;
 8004fe6:	7bfa      	ldrb	r2, [r7, #15]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f04f 0100 	mov.w	r1, #0
 8004fee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (uint8_t n = 0; n < FIR_FILTER_LENGTH; n++) {
 8004ff2:	7bfb      	ldrb	r3, [r7, #15]
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	73fb      	strb	r3, [r7, #15]
 8004ff8:	7bfb      	ldrb	r3, [r7, #15]
 8004ffa:	2b1f      	cmp	r3, #31
 8004ffc:	d9f3      	bls.n	8004fe6 <FIRFilter_Init+0xe>

	}

	/* Reset buffer index */
	fir->bufIndex = 0;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	/* Clear filter output */
	fir->out = 0.0f;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f04f 0200 	mov.w	r2, #0
 800500c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

}
 8005010:	bf00      	nop
 8005012:	3714      	adds	r7, #20
 8005014:	46bd      	mov	sp, r7
 8005016:	bc80      	pop	{r7}
 8005018:	4770      	bx	lr
	...

0800501c <FIRFilter_Update>:

float FIRFilter_Update(FIRFilter *fir, float inp) {
 800501c:	b590      	push	{r4, r7, lr}
 800501e:	b085      	sub	sp, #20
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]

	/* Store latest sample in buffer */
	fir->buf[fir->bufIndex] = inp;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800502c:	4619      	mov	r1, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	683a      	ldr	r2, [r7, #0]
 8005032:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	/* Increment buffer index and wrap around if necessary */
	fir->bufIndex++;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800503c:	3301      	adds	r3, #1
 800503e:	b2da      	uxtb	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	if (fir->bufIndex == FIR_FILTER_LENGTH) {
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800504c:	2b20      	cmp	r3, #32
 800504e:	d103      	bne.n	8005058 <FIRFilter_Update+0x3c>

		fir->bufIndex = 0;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	}

	/* Compute new output sample (via convolution) */
	fir->out = 0.0f;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f04f 0200 	mov.w	r2, #0
 800505e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

	uint8_t sumIndex = fir->bufIndex;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005068:	73fb      	strb	r3, [r7, #15]

	for (uint8_t n = 0; n < FIR_FILTER_LENGTH; n++) {
 800506a:	2300      	movs	r3, #0
 800506c:	73bb      	strb	r3, [r7, #14]
 800506e:	e023      	b.n	80050b8 <FIRFilter_Update+0x9c>

		/* Decrement index and wrap if necessary */
		if (sumIndex > 0) {
 8005070:	7bfb      	ldrb	r3, [r7, #15]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d003      	beq.n	800507e <FIRFilter_Update+0x62>

			sumIndex--;
 8005076:	7bfb      	ldrb	r3, [r7, #15]
 8005078:	3b01      	subs	r3, #1
 800507a:	73fb      	strb	r3, [r7, #15]
 800507c:	e001      	b.n	8005082 <FIRFilter_Update+0x66>

		} else {

			sumIndex = FIR_FILTER_LENGTH - 1;
 800507e:	231f      	movs	r3, #31
 8005080:	73fb      	strb	r3, [r7, #15]

		}

		/* Multiply impulse response with shifted input sample and add to output */
		fir->out += FIR_IMPULSE_RESPONSE[n] * fir->buf[sumIndex];
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8005088:	7bbb      	ldrb	r3, [r7, #14]
 800508a:	4a10      	ldr	r2, [pc, #64]	; (80050cc <FIRFilter_Update+0xb0>)
 800508c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005090:	7bfa      	ldrb	r2, [r7, #15]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005098:	4619      	mov	r1, r3
 800509a:	f7fb fe73 	bl	8000d84 <__aeabi_fmul>
 800509e:	4603      	mov	r3, r0
 80050a0:	4619      	mov	r1, r3
 80050a2:	4620      	mov	r0, r4
 80050a4:	f7fb fd66 	bl	8000b74 <__addsf3>
 80050a8:	4603      	mov	r3, r0
 80050aa:	461a      	mov	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	for (uint8_t n = 0; n < FIR_FILTER_LENGTH; n++) {
 80050b2:	7bbb      	ldrb	r3, [r7, #14]
 80050b4:	3301      	adds	r3, #1
 80050b6:	73bb      	strb	r3, [r7, #14]
 80050b8:	7bbb      	ldrb	r3, [r7, #14]
 80050ba:	2b1f      	cmp	r3, #31
 80050bc:	d9d8      	bls.n	8005070 <FIRFilter_Update+0x54>

	}

	/* Return filtered output */
	return fir->out;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84

}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3714      	adds	r7, #20
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd90      	pop	{r4, r7, pc}
 80050cc:	20000014 	.word	0x20000014

080050d0 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80050d0:	b480      	push	{r7}
 80050d2:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80050d4:	bf00      	nop
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bc80      	pop	{r7}
 80050da:	4770      	bx	lr

080050dc <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80050dc:	b580      	push	{r7, lr}
 80050de:	b086      	sub	sp, #24
 80050e0:	af04      	add	r7, sp, #16
 80050e2:	4603      	mov	r3, r0
 80050e4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80050e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80050ea:	9302      	str	r3, [sp, #8]
 80050ec:	2301      	movs	r3, #1
 80050ee:	9301      	str	r3, [sp, #4]
 80050f0:	1dfb      	adds	r3, r7, #7
 80050f2:	9300      	str	r3, [sp, #0]
 80050f4:	2301      	movs	r3, #1
 80050f6:	2200      	movs	r2, #0
 80050f8:	2178      	movs	r1, #120	; 0x78
 80050fa:	4803      	ldr	r0, [pc, #12]	; (8005108 <ssd1306_WriteCommand+0x2c>)
 80050fc:	f7fd fedc 	bl	8002eb8 <HAL_I2C_Mem_Write>
}
 8005100:	bf00      	nop
 8005102:	3708      	adds	r7, #8
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	2000085c 	.word	0x2000085c

0800510c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800510c:	b580      	push	{r7, lr}
 800510e:	b086      	sub	sp, #24
 8005110:	af04      	add	r7, sp, #16
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	b29b      	uxth	r3, r3
 800511a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800511e:	9202      	str	r2, [sp, #8]
 8005120:	9301      	str	r3, [sp, #4]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	9300      	str	r3, [sp, #0]
 8005126:	2301      	movs	r3, #1
 8005128:	2240      	movs	r2, #64	; 0x40
 800512a:	2178      	movs	r1, #120	; 0x78
 800512c:	4803      	ldr	r0, [pc, #12]	; (800513c <ssd1306_WriteData+0x30>)
 800512e:	f7fd fec3 	bl	8002eb8 <HAL_I2C_Mem_Write>
}
 8005132:	bf00      	nop
 8005134:	3708      	adds	r7, #8
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	2000085c 	.word	0x2000085c

08005140 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8005140:	b580      	push	{r7, lr}
 8005142:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8005144:	f7ff ffc4 	bl	80050d0 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8005148:	2064      	movs	r0, #100	; 0x64
 800514a:	f7fd f899 	bl	8002280 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800514e:	2000      	movs	r0, #0
 8005150:	f000 fb1a 	bl	8005788 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8005154:	2020      	movs	r0, #32
 8005156:	f7ff ffc1 	bl	80050dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800515a:	2000      	movs	r0, #0
 800515c:	f7ff ffbe 	bl	80050dc <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8005160:	20b0      	movs	r0, #176	; 0xb0
 8005162:	f7ff ffbb 	bl	80050dc <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8005166:	20c8      	movs	r0, #200	; 0xc8
 8005168:	f7ff ffb8 	bl	80050dc <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800516c:	2000      	movs	r0, #0
 800516e:	f7ff ffb5 	bl	80050dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8005172:	2010      	movs	r0, #16
 8005174:	f7ff ffb2 	bl	80050dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8005178:	2040      	movs	r0, #64	; 0x40
 800517a:	f7ff ffaf 	bl	80050dc <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800517e:	20ff      	movs	r0, #255	; 0xff
 8005180:	f000 faef 	bl	8005762 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8005184:	20a1      	movs	r0, #161	; 0xa1
 8005186:	f7ff ffa9 	bl	80050dc <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800518a:	20a6      	movs	r0, #166	; 0xa6
 800518c:	f7ff ffa6 	bl	80050dc <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8005190:	20a8      	movs	r0, #168	; 0xa8
 8005192:	f7ff ffa3 	bl	80050dc <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8005196:	203f      	movs	r0, #63	; 0x3f
 8005198:	f7ff ffa0 	bl	80050dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800519c:	20a4      	movs	r0, #164	; 0xa4
 800519e:	f7ff ff9d 	bl	80050dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80051a2:	20d3      	movs	r0, #211	; 0xd3
 80051a4:	f7ff ff9a 	bl	80050dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80051a8:	2000      	movs	r0, #0
 80051aa:	f7ff ff97 	bl	80050dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80051ae:	20d5      	movs	r0, #213	; 0xd5
 80051b0:	f7ff ff94 	bl	80050dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80051b4:	20f0      	movs	r0, #240	; 0xf0
 80051b6:	f7ff ff91 	bl	80050dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80051ba:	20d9      	movs	r0, #217	; 0xd9
 80051bc:	f7ff ff8e 	bl	80050dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80051c0:	2022      	movs	r0, #34	; 0x22
 80051c2:	f7ff ff8b 	bl	80050dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80051c6:	20da      	movs	r0, #218	; 0xda
 80051c8:	f7ff ff88 	bl	80050dc <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80051cc:	2012      	movs	r0, #18
 80051ce:	f7ff ff85 	bl	80050dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80051d2:	20db      	movs	r0, #219	; 0xdb
 80051d4:	f7ff ff82 	bl	80050dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80051d8:	2020      	movs	r0, #32
 80051da:	f7ff ff7f 	bl	80050dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80051de:	208d      	movs	r0, #141	; 0x8d
 80051e0:	f7ff ff7c 	bl	80050dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80051e4:	2014      	movs	r0, #20
 80051e6:	f7ff ff79 	bl	80050dc <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80051ea:	2001      	movs	r0, #1
 80051ec:	f000 facc 	bl	8005788 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80051f0:	2000      	movs	r0, #0
 80051f2:	f000 f80f 	bl	8005214 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80051f6:	f000 f82f 	bl	8005258 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80051fa:	4b05      	ldr	r3, [pc, #20]	; (8005210 <ssd1306_Init+0xd0>)
 80051fc:	2200      	movs	r2, #0
 80051fe:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8005200:	4b03      	ldr	r3, [pc, #12]	; (8005210 <ssd1306_Init+0xd0>)
 8005202:	2200      	movs	r2, #0
 8005204:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8005206:	4b02      	ldr	r3, [pc, #8]	; (8005210 <ssd1306_Init+0xd0>)
 8005208:	2201      	movs	r2, #1
 800520a:	715a      	strb	r2, [r3, #5]
}
 800520c:	bf00      	nop
 800520e:	bd80      	pop	{r7, pc}
 8005210:	200006e8 	.word	0x200006e8

08005214 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8005214:	b480      	push	{r7}
 8005216:	b085      	sub	sp, #20
 8005218:	af00      	add	r7, sp, #0
 800521a:	4603      	mov	r3, r0
 800521c:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800521e:	2300      	movs	r3, #0
 8005220:	60fb      	str	r3, [r7, #12]
 8005222:	e00d      	b.n	8005240 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8005224:	79fb      	ldrb	r3, [r7, #7]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d101      	bne.n	800522e <ssd1306_Fill+0x1a>
 800522a:	2100      	movs	r1, #0
 800522c:	e000      	b.n	8005230 <ssd1306_Fill+0x1c>
 800522e:	21ff      	movs	r1, #255	; 0xff
 8005230:	4a08      	ldr	r2, [pc, #32]	; (8005254 <ssd1306_Fill+0x40>)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	4413      	add	r3, r2
 8005236:	460a      	mov	r2, r1
 8005238:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	3301      	adds	r3, #1
 800523e:	60fb      	str	r3, [r7, #12]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 8005246:	d3ed      	bcc.n	8005224 <ssd1306_Fill+0x10>
    }
}
 8005248:	bf00      	nop
 800524a:	bf00      	nop
 800524c:	3714      	adds	r7, #20
 800524e:	46bd      	mov	sp, r7
 8005250:	bc80      	pop	{r7}
 8005252:	4770      	bx	lr
 8005254:	200002d8 	.word	0x200002d8

08005258 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8005258:	b580      	push	{r7, lr}
 800525a:	b082      	sub	sp, #8
 800525c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800525e:	2300      	movs	r3, #0
 8005260:	71fb      	strb	r3, [r7, #7]
 8005262:	e01a      	b.n	800529a <ssd1306_UpdateScreen+0x42>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8005264:	79fb      	ldrb	r3, [r7, #7]
 8005266:	3b50      	subs	r3, #80	; 0x50
 8005268:	b2db      	uxtb	r3, r3
 800526a:	4618      	mov	r0, r3
 800526c:	f7ff ff36 	bl	80050dc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8005270:	2000      	movs	r0, #0
 8005272:	f7ff ff33 	bl	80050dc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8005276:	2010      	movs	r0, #16
 8005278:	f7ff ff30 	bl	80050dc <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800527c:	79fa      	ldrb	r2, [r7, #7]
 800527e:	4613      	mov	r3, r2
 8005280:	019b      	lsls	r3, r3, #6
 8005282:	4413      	add	r3, r2
 8005284:	005b      	lsls	r3, r3, #1
 8005286:	461a      	mov	r2, r3
 8005288:	4b08      	ldr	r3, [pc, #32]	; (80052ac <ssd1306_UpdateScreen+0x54>)
 800528a:	4413      	add	r3, r2
 800528c:	2182      	movs	r1, #130	; 0x82
 800528e:	4618      	mov	r0, r3
 8005290:	f7ff ff3c 	bl	800510c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8005294:	79fb      	ldrb	r3, [r7, #7]
 8005296:	3301      	adds	r3, #1
 8005298:	71fb      	strb	r3, [r7, #7]
 800529a:	79fb      	ldrb	r3, [r7, #7]
 800529c:	2b07      	cmp	r3, #7
 800529e:	d9e1      	bls.n	8005264 <ssd1306_UpdateScreen+0xc>
    }
}
 80052a0:	bf00      	nop
 80052a2:	bf00      	nop
 80052a4:	3708      	adds	r7, #8
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	200002d8 	.word	0x200002d8

080052b0 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80052b0:	b490      	push	{r4, r7}
 80052b2:	b082      	sub	sp, #8
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	4603      	mov	r3, r0
 80052b8:	71fb      	strb	r3, [r7, #7]
 80052ba:	460b      	mov	r3, r1
 80052bc:	71bb      	strb	r3, [r7, #6]
 80052be:	4613      	mov	r3, r2
 80052c0:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80052c2:	79fb      	ldrb	r3, [r7, #7]
 80052c4:	2b81      	cmp	r3, #129	; 0x81
 80052c6:	d854      	bhi.n	8005372 <ssd1306_DrawPixel+0xc2>
 80052c8:	79bb      	ldrb	r3, [r7, #6]
 80052ca:	2b3f      	cmp	r3, #63	; 0x3f
 80052cc:	d851      	bhi.n	8005372 <ssd1306_DrawPixel+0xc2>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 80052ce:	4b2b      	ldr	r3, [pc, #172]	; (800537c <ssd1306_DrawPixel+0xcc>)
 80052d0:	791b      	ldrb	r3, [r3, #4]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d006      	beq.n	80052e4 <ssd1306_DrawPixel+0x34>
        color = (SSD1306_COLOR)!color;
 80052d6:	797b      	ldrb	r3, [r7, #5]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	bf0c      	ite	eq
 80052dc:	2301      	moveq	r3, #1
 80052de:	2300      	movne	r3, #0
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 80052e4:	797b      	ldrb	r3, [r7, #5]
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d120      	bne.n	800532c <ssd1306_DrawPixel+0x7c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80052ea:	79fa      	ldrb	r2, [r7, #7]
 80052ec:	79bb      	ldrb	r3, [r7, #6]
 80052ee:	08db      	lsrs	r3, r3, #3
 80052f0:	b2d8      	uxtb	r0, r3
 80052f2:	4601      	mov	r1, r0
 80052f4:	460b      	mov	r3, r1
 80052f6:	019b      	lsls	r3, r3, #6
 80052f8:	440b      	add	r3, r1
 80052fa:	005b      	lsls	r3, r3, #1
 80052fc:	4413      	add	r3, r2
 80052fe:	4a20      	ldr	r2, [pc, #128]	; (8005380 <ssd1306_DrawPixel+0xd0>)
 8005300:	5cd3      	ldrb	r3, [r2, r3]
 8005302:	b25a      	sxtb	r2, r3
 8005304:	79bb      	ldrb	r3, [r7, #6]
 8005306:	f003 0307 	and.w	r3, r3, #7
 800530a:	2101      	movs	r1, #1
 800530c:	fa01 f303 	lsl.w	r3, r1, r3
 8005310:	b25b      	sxtb	r3, r3
 8005312:	4313      	orrs	r3, r2
 8005314:	b25c      	sxtb	r4, r3
 8005316:	79fa      	ldrb	r2, [r7, #7]
 8005318:	4601      	mov	r1, r0
 800531a:	460b      	mov	r3, r1
 800531c:	019b      	lsls	r3, r3, #6
 800531e:	440b      	add	r3, r1
 8005320:	005b      	lsls	r3, r3, #1
 8005322:	4413      	add	r3, r2
 8005324:	b2e1      	uxtb	r1, r4
 8005326:	4a16      	ldr	r2, [pc, #88]	; (8005380 <ssd1306_DrawPixel+0xd0>)
 8005328:	54d1      	strb	r1, [r2, r3]
 800532a:	e023      	b.n	8005374 <ssd1306_DrawPixel+0xc4>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800532c:	79fa      	ldrb	r2, [r7, #7]
 800532e:	79bb      	ldrb	r3, [r7, #6]
 8005330:	08db      	lsrs	r3, r3, #3
 8005332:	b2d8      	uxtb	r0, r3
 8005334:	4601      	mov	r1, r0
 8005336:	460b      	mov	r3, r1
 8005338:	019b      	lsls	r3, r3, #6
 800533a:	440b      	add	r3, r1
 800533c:	005b      	lsls	r3, r3, #1
 800533e:	4413      	add	r3, r2
 8005340:	4a0f      	ldr	r2, [pc, #60]	; (8005380 <ssd1306_DrawPixel+0xd0>)
 8005342:	5cd3      	ldrb	r3, [r2, r3]
 8005344:	b25a      	sxtb	r2, r3
 8005346:	79bb      	ldrb	r3, [r7, #6]
 8005348:	f003 0307 	and.w	r3, r3, #7
 800534c:	2101      	movs	r1, #1
 800534e:	fa01 f303 	lsl.w	r3, r1, r3
 8005352:	b25b      	sxtb	r3, r3
 8005354:	43db      	mvns	r3, r3
 8005356:	b25b      	sxtb	r3, r3
 8005358:	4013      	ands	r3, r2
 800535a:	b25c      	sxtb	r4, r3
 800535c:	79fa      	ldrb	r2, [r7, #7]
 800535e:	4601      	mov	r1, r0
 8005360:	460b      	mov	r3, r1
 8005362:	019b      	lsls	r3, r3, #6
 8005364:	440b      	add	r3, r1
 8005366:	005b      	lsls	r3, r3, #1
 8005368:	4413      	add	r3, r2
 800536a:	b2e1      	uxtb	r1, r4
 800536c:	4a04      	ldr	r2, [pc, #16]	; (8005380 <ssd1306_DrawPixel+0xd0>)
 800536e:	54d1      	strb	r1, [r2, r3]
 8005370:	e000      	b.n	8005374 <ssd1306_DrawPixel+0xc4>
        return;
 8005372:	bf00      	nop
    }
}
 8005374:	3708      	adds	r7, #8
 8005376:	46bd      	mov	sp, r7
 8005378:	bc90      	pop	{r4, r7}
 800537a:	4770      	bx	lr
 800537c:	200006e8 	.word	0x200006e8
 8005380:	200002d8 	.word	0x200002d8

08005384 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8005384:	b590      	push	{r4, r7, lr}
 8005386:	b089      	sub	sp, #36	; 0x24
 8005388:	af00      	add	r7, sp, #0
 800538a:	4604      	mov	r4, r0
 800538c:	1d38      	adds	r0, r7, #4
 800538e:	e880 0006 	stmia.w	r0, {r1, r2}
 8005392:	461a      	mov	r2, r3
 8005394:	4623      	mov	r3, r4
 8005396:	73fb      	strb	r3, [r7, #15]
 8005398:	4613      	mov	r3, r2
 800539a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800539c:	7bfb      	ldrb	r3, [r7, #15]
 800539e:	2b1f      	cmp	r3, #31
 80053a0:	d902      	bls.n	80053a8 <ssd1306_WriteChar+0x24>
 80053a2:	7bfb      	ldrb	r3, [r7, #15]
 80053a4:	2b7e      	cmp	r3, #126	; 0x7e
 80053a6:	d901      	bls.n	80053ac <ssd1306_WriteChar+0x28>
        return 0;
 80053a8:	2300      	movs	r3, #0
 80053aa:	e06d      	b.n	8005488 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80053ac:	4b38      	ldr	r3, [pc, #224]	; (8005490 <ssd1306_WriteChar+0x10c>)
 80053ae:	881b      	ldrh	r3, [r3, #0]
 80053b0:	461a      	mov	r2, r3
 80053b2:	793b      	ldrb	r3, [r7, #4]
 80053b4:	4413      	add	r3, r2
 80053b6:	2b82      	cmp	r3, #130	; 0x82
 80053b8:	dc06      	bgt.n	80053c8 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80053ba:	4b35      	ldr	r3, [pc, #212]	; (8005490 <ssd1306_WriteChar+0x10c>)
 80053bc:	885b      	ldrh	r3, [r3, #2]
 80053be:	461a      	mov	r2, r3
 80053c0:	797b      	ldrb	r3, [r7, #5]
 80053c2:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80053c4:	2b40      	cmp	r3, #64	; 0x40
 80053c6:	dd01      	ble.n	80053cc <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80053c8:	2300      	movs	r3, #0
 80053ca:	e05d      	b.n	8005488 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80053cc:	2300      	movs	r3, #0
 80053ce:	61fb      	str	r3, [r7, #28]
 80053d0:	e04c      	b.n	800546c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80053d2:	68ba      	ldr	r2, [r7, #8]
 80053d4:	7bfb      	ldrb	r3, [r7, #15]
 80053d6:	3b20      	subs	r3, #32
 80053d8:	7979      	ldrb	r1, [r7, #5]
 80053da:	fb01 f303 	mul.w	r3, r1, r3
 80053de:	4619      	mov	r1, r3
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	440b      	add	r3, r1
 80053e4:	005b      	lsls	r3, r3, #1
 80053e6:	4413      	add	r3, r2
 80053e8:	881b      	ldrh	r3, [r3, #0]
 80053ea:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80053ec:	2300      	movs	r3, #0
 80053ee:	61bb      	str	r3, [r7, #24]
 80053f0:	e034      	b.n	800545c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	fa02 f303 	lsl.w	r3, r2, r3
 80053fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d012      	beq.n	8005428 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8005402:	4b23      	ldr	r3, [pc, #140]	; (8005490 <ssd1306_WriteChar+0x10c>)
 8005404:	881b      	ldrh	r3, [r3, #0]
 8005406:	b2da      	uxtb	r2, r3
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	b2db      	uxtb	r3, r3
 800540c:	4413      	add	r3, r2
 800540e:	b2d8      	uxtb	r0, r3
 8005410:	4b1f      	ldr	r3, [pc, #124]	; (8005490 <ssd1306_WriteChar+0x10c>)
 8005412:	885b      	ldrh	r3, [r3, #2]
 8005414:	b2da      	uxtb	r2, r3
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	b2db      	uxtb	r3, r3
 800541a:	4413      	add	r3, r2
 800541c:	b2db      	uxtb	r3, r3
 800541e:	7bba      	ldrb	r2, [r7, #14]
 8005420:	4619      	mov	r1, r3
 8005422:	f7ff ff45 	bl	80052b0 <ssd1306_DrawPixel>
 8005426:	e016      	b.n	8005456 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8005428:	4b19      	ldr	r3, [pc, #100]	; (8005490 <ssd1306_WriteChar+0x10c>)
 800542a:	881b      	ldrh	r3, [r3, #0]
 800542c:	b2da      	uxtb	r2, r3
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	b2db      	uxtb	r3, r3
 8005432:	4413      	add	r3, r2
 8005434:	b2d8      	uxtb	r0, r3
 8005436:	4b16      	ldr	r3, [pc, #88]	; (8005490 <ssd1306_WriteChar+0x10c>)
 8005438:	885b      	ldrh	r3, [r3, #2]
 800543a:	b2da      	uxtb	r2, r3
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	b2db      	uxtb	r3, r3
 8005440:	4413      	add	r3, r2
 8005442:	b2d9      	uxtb	r1, r3
 8005444:	7bbb      	ldrb	r3, [r7, #14]
 8005446:	2b00      	cmp	r3, #0
 8005448:	bf0c      	ite	eq
 800544a:	2301      	moveq	r3, #1
 800544c:	2300      	movne	r3, #0
 800544e:	b2db      	uxtb	r3, r3
 8005450:	461a      	mov	r2, r3
 8005452:	f7ff ff2d 	bl	80052b0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	3301      	adds	r3, #1
 800545a:	61bb      	str	r3, [r7, #24]
 800545c:	793b      	ldrb	r3, [r7, #4]
 800545e:	461a      	mov	r2, r3
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	4293      	cmp	r3, r2
 8005464:	d3c5      	bcc.n	80053f2 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	3301      	adds	r3, #1
 800546a:	61fb      	str	r3, [r7, #28]
 800546c:	797b      	ldrb	r3, [r7, #5]
 800546e:	461a      	mov	r2, r3
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	4293      	cmp	r3, r2
 8005474:	d3ad      	bcc.n	80053d2 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8005476:	4b06      	ldr	r3, [pc, #24]	; (8005490 <ssd1306_WriteChar+0x10c>)
 8005478:	881a      	ldrh	r2, [r3, #0]
 800547a:	793b      	ldrb	r3, [r7, #4]
 800547c:	b29b      	uxth	r3, r3
 800547e:	4413      	add	r3, r2
 8005480:	b29a      	uxth	r2, r3
 8005482:	4b03      	ldr	r3, [pc, #12]	; (8005490 <ssd1306_WriteChar+0x10c>)
 8005484:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8005486:	7bfb      	ldrb	r3, [r7, #15]
}
 8005488:	4618      	mov	r0, r3
 800548a:	3724      	adds	r7, #36	; 0x24
 800548c:	46bd      	mov	sp, r7
 800548e:	bd90      	pop	{r4, r7, pc}
 8005490:	200006e8 	.word	0x200006e8

08005494 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	1d38      	adds	r0, r7, #4
 800549e:	e880 0006 	stmia.w	r0, {r1, r2}
 80054a2:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 80054a4:	e012      	b.n	80054cc <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	7818      	ldrb	r0, [r3, #0]
 80054aa:	78fb      	ldrb	r3, [r7, #3]
 80054ac:	1d3a      	adds	r2, r7, #4
 80054ae:	ca06      	ldmia	r2, {r1, r2}
 80054b0:	f7ff ff68 	bl	8005384 <ssd1306_WriteChar>
 80054b4:	4603      	mov	r3, r0
 80054b6:	461a      	mov	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d002      	beq.n	80054c6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	e008      	b.n	80054d8 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	3301      	adds	r3, #1
 80054ca:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d1e8      	bne.n	80054a6 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	781b      	ldrb	r3, [r3, #0]
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3710      	adds	r7, #16
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	4603      	mov	r3, r0
 80054e8:	460a      	mov	r2, r1
 80054ea:	71fb      	strb	r3, [r7, #7]
 80054ec:	4613      	mov	r3, r2
 80054ee:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80054f0:	79fb      	ldrb	r3, [r7, #7]
 80054f2:	b29a      	uxth	r2, r3
 80054f4:	4b05      	ldr	r3, [pc, #20]	; (800550c <ssd1306_SetCursor+0x2c>)
 80054f6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80054f8:	79bb      	ldrb	r3, [r7, #6]
 80054fa:	b29a      	uxth	r2, r3
 80054fc:	4b03      	ldr	r3, [pc, #12]	; (800550c <ssd1306_SetCursor+0x2c>)
 80054fe:	805a      	strh	r2, [r3, #2]
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	bc80      	pop	{r7}
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	200006e8 	.word	0x200006e8

08005510 <ssd1306_Line>:

// Draw line by Bresenhem's algorithm
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8005510:	b590      	push	{r4, r7, lr}
 8005512:	b089      	sub	sp, #36	; 0x24
 8005514:	af00      	add	r7, sp, #0
 8005516:	4604      	mov	r4, r0
 8005518:	4608      	mov	r0, r1
 800551a:	4611      	mov	r1, r2
 800551c:	461a      	mov	r2, r3
 800551e:	4623      	mov	r3, r4
 8005520:	71fb      	strb	r3, [r7, #7]
 8005522:	4603      	mov	r3, r0
 8005524:	71bb      	strb	r3, [r7, #6]
 8005526:	460b      	mov	r3, r1
 8005528:	717b      	strb	r3, [r7, #5]
 800552a:	4613      	mov	r3, r2
 800552c:	713b      	strb	r3, [r7, #4]
  int32_t deltaX = abs(x2 - x1);
 800552e:	797a      	ldrb	r2, [r7, #5]
 8005530:	79fb      	ldrb	r3, [r7, #7]
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	2b00      	cmp	r3, #0
 8005536:	bfb8      	it	lt
 8005538:	425b      	neglt	r3, r3
 800553a:	61bb      	str	r3, [r7, #24]
  int32_t deltaY = abs(y2 - y1);
 800553c:	793a      	ldrb	r2, [r7, #4]
 800553e:	79bb      	ldrb	r3, [r7, #6]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	2b00      	cmp	r3, #0
 8005544:	bfb8      	it	lt
 8005546:	425b      	neglt	r3, r3
 8005548:	617b      	str	r3, [r7, #20]
  int32_t signX = ((x1 < x2) ? 1 : -1);
 800554a:	79fa      	ldrb	r2, [r7, #7]
 800554c:	797b      	ldrb	r3, [r7, #5]
 800554e:	429a      	cmp	r2, r3
 8005550:	d201      	bcs.n	8005556 <ssd1306_Line+0x46>
 8005552:	2301      	movs	r3, #1
 8005554:	e001      	b.n	800555a <ssd1306_Line+0x4a>
 8005556:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800555a:	613b      	str	r3, [r7, #16]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 800555c:	79ba      	ldrb	r2, [r7, #6]
 800555e:	793b      	ldrb	r3, [r7, #4]
 8005560:	429a      	cmp	r2, r3
 8005562:	d201      	bcs.n	8005568 <ssd1306_Line+0x58>
 8005564:	2301      	movs	r3, #1
 8005566:	e001      	b.n	800556c <ssd1306_Line+0x5c>
 8005568:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800556c:	60fb      	str	r3, [r7, #12]
  int32_t error = deltaX - deltaY;
 800556e:	69ba      	ldr	r2, [r7, #24]
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	61fb      	str	r3, [r7, #28]
  int32_t error2;
    
  ssd1306_DrawPixel(x2, y2, color);
 8005576:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800557a:	7939      	ldrb	r1, [r7, #4]
 800557c:	797b      	ldrb	r3, [r7, #5]
 800557e:	4618      	mov	r0, r3
 8005580:	f7ff fe96 	bl	80052b0 <ssd1306_DrawPixel>
    while((x1 != x2) || (y1 != y2))
 8005584:	e024      	b.n	80055d0 <ssd1306_Line+0xc0>
    {
    ssd1306_DrawPixel(x1, y1, color);
 8005586:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800558a:	79b9      	ldrb	r1, [r7, #6]
 800558c:	79fb      	ldrb	r3, [r7, #7]
 800558e:	4618      	mov	r0, r3
 8005590:	f7ff fe8e 	bl	80052b0 <ssd1306_DrawPixel>
    error2 = error * 2;
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	005b      	lsls	r3, r3, #1
 8005598:	60bb      	str	r3, [r7, #8]
    if(error2 > -deltaY)
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	425b      	negs	r3, r3
 800559e:	68ba      	ldr	r2, [r7, #8]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	dd08      	ble.n	80055b6 <ssd1306_Line+0xa6>
    {
      error -= deltaY;
 80055a4:	69fa      	ldr	r2, [r7, #28]
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	61fb      	str	r3, [r7, #28]
      x1 += signX;
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	b2da      	uxtb	r2, r3
 80055b0:	79fb      	ldrb	r3, [r7, #7]
 80055b2:	4413      	add	r3, r2
 80055b4:	71fb      	strb	r3, [r7, #7]
    else
    {
    /*nothing to do*/
    }
        
    if(error2 < deltaX)
 80055b6:	68ba      	ldr	r2, [r7, #8]
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	da08      	bge.n	80055d0 <ssd1306_Line+0xc0>
    {
      error += deltaX;
 80055be:	69fa      	ldr	r2, [r7, #28]
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	4413      	add	r3, r2
 80055c4:	61fb      	str	r3, [r7, #28]
      y1 += signY;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	b2da      	uxtb	r2, r3
 80055ca:	79bb      	ldrb	r3, [r7, #6]
 80055cc:	4413      	add	r3, r2
 80055ce:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2))
 80055d0:	79fa      	ldrb	r2, [r7, #7]
 80055d2:	797b      	ldrb	r3, [r7, #5]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d1d6      	bne.n	8005586 <ssd1306_Line+0x76>
 80055d8:	79ba      	ldrb	r2, [r7, #6]
 80055da:	793b      	ldrb	r3, [r7, #4]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d1d2      	bne.n	8005586 <ssd1306_Line+0x76>
    else
    {
    /*nothing to do*/
    }
  }
  return;
 80055e0:	bf00      	nop
}
 80055e2:	3724      	adds	r7, #36	; 0x24
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd90      	pop	{r4, r7, pc}

080055e8 <ssd1306_DrawCircle>:
    }
    
    return;
}
//Draw circle by Bresenhem's algorithm
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 80055e8:	b590      	push	{r4, r7, lr}
 80055ea:	b087      	sub	sp, #28
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	4604      	mov	r4, r0
 80055f0:	4608      	mov	r0, r1
 80055f2:	4611      	mov	r1, r2
 80055f4:	461a      	mov	r2, r3
 80055f6:	4623      	mov	r3, r4
 80055f8:	71fb      	strb	r3, [r7, #7]
 80055fa:	4603      	mov	r3, r0
 80055fc:	71bb      	strb	r3, [r7, #6]
 80055fe:	460b      	mov	r3, r1
 8005600:	717b      	strb	r3, [r7, #5]
 8005602:	4613      	mov	r3, r2
 8005604:	713b      	strb	r3, [r7, #4]
  int32_t x = -par_r;
 8005606:	797b      	ldrb	r3, [r7, #5]
 8005608:	425b      	negs	r3, r3
 800560a:	617b      	str	r3, [r7, #20]
  int32_t y = 0;
 800560c:	2300      	movs	r3, #0
 800560e:	613b      	str	r3, [r7, #16]
  int32_t err = 2 - 2 * par_r;
 8005610:	797b      	ldrb	r3, [r7, #5]
 8005612:	f1c3 0301 	rsb	r3, r3, #1
 8005616:	005b      	lsls	r3, r3, #1
 8005618:	60fb      	str	r3, [r7, #12]
  int32_t e2;

  if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 800561a:	79fb      	ldrb	r3, [r7, #7]
 800561c:	2b81      	cmp	r3, #129	; 0x81
 800561e:	d865      	bhi.n	80056ec <ssd1306_DrawCircle+0x104>
 8005620:	79bb      	ldrb	r3, [r7, #6]
 8005622:	2b3f      	cmp	r3, #63	; 0x3f
 8005624:	d862      	bhi.n	80056ec <ssd1306_DrawCircle+0x104>
    return;
  }

    do {
      ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	b2db      	uxtb	r3, r3
 800562a:	79fa      	ldrb	r2, [r7, #7]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	b2d8      	uxtb	r0, r3
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	b2da      	uxtb	r2, r3
 8005634:	79bb      	ldrb	r3, [r7, #6]
 8005636:	4413      	add	r3, r2
 8005638:	b2db      	uxtb	r3, r3
 800563a:	793a      	ldrb	r2, [r7, #4]
 800563c:	4619      	mov	r1, r3
 800563e:	f7ff fe37 	bl	80052b0 <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	b2da      	uxtb	r2, r3
 8005646:	79fb      	ldrb	r3, [r7, #7]
 8005648:	4413      	add	r3, r2
 800564a:	b2d8      	uxtb	r0, r3
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	b2da      	uxtb	r2, r3
 8005650:	79bb      	ldrb	r3, [r7, #6]
 8005652:	4413      	add	r3, r2
 8005654:	b2db      	uxtb	r3, r3
 8005656:	793a      	ldrb	r2, [r7, #4]
 8005658:	4619      	mov	r1, r3
 800565a:	f7ff fe29 	bl	80052b0 <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	b2da      	uxtb	r2, r3
 8005662:	79fb      	ldrb	r3, [r7, #7]
 8005664:	4413      	add	r3, r2
 8005666:	b2d8      	uxtb	r0, r3
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	b2db      	uxtb	r3, r3
 800566c:	79ba      	ldrb	r2, [r7, #6]
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	b2db      	uxtb	r3, r3
 8005672:	793a      	ldrb	r2, [r7, #4]
 8005674:	4619      	mov	r1, r3
 8005676:	f7ff fe1b 	bl	80052b0 <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	b2db      	uxtb	r3, r3
 800567e:	79fa      	ldrb	r2, [r7, #7]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	b2d8      	uxtb	r0, r3
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	b2db      	uxtb	r3, r3
 8005688:	79ba      	ldrb	r2, [r7, #6]
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	b2db      	uxtb	r3, r3
 800568e:	793a      	ldrb	r2, [r7, #4]
 8005690:	4619      	mov	r1, r3
 8005692:	f7ff fe0d 	bl	80052b0 <ssd1306_DrawPixel>
        e2 = err;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	60bb      	str	r3, [r7, #8]
        if (e2 <= y) {
 800569a:	68ba      	ldr	r2, [r7, #8]
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	429a      	cmp	r2, r3
 80056a0:	dc13      	bgt.n	80056ca <ssd1306_DrawCircle+0xe2>
            y++;
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	3301      	adds	r3, #1
 80056a6:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	005b      	lsls	r3, r3, #1
 80056ac:	3301      	adds	r3, #1
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	4413      	add	r3, r2
 80056b2:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	425b      	negs	r3, r3
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d105      	bne.n	80056ca <ssd1306_DrawCircle+0xe2>
 80056be:	68ba      	ldr	r2, [r7, #8]
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	429a      	cmp	r2, r3
 80056c4:	dc01      	bgt.n	80056ca <ssd1306_DrawCircle+0xe2>
              e2 = 0;
 80056c6:	2300      	movs	r3, #0
 80056c8:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          /*nothing to do*/
        }
        if(e2 > x) {
 80056ca:	68ba      	ldr	r2, [r7, #8]
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	dd08      	ble.n	80056e4 <ssd1306_DrawCircle+0xfc>
          x++;
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	3301      	adds	r3, #1
 80056d6:	617b      	str	r3, [r7, #20]
          err = err + (x * 2 + 1);
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	005b      	lsls	r3, r3, #1
 80056dc:	3301      	adds	r3, #1
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	4413      	add	r3, r2
 80056e2:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          /*nothing to do*/
        }
    } while(x <= 0);
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	dd9d      	ble.n	8005626 <ssd1306_DrawCircle+0x3e>

    return;
 80056ea:	e000      	b.n	80056ee <ssd1306_DrawCircle+0x106>
    return;
 80056ec:	bf00      	nop
}
 80056ee:	371c      	adds	r7, #28
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd90      	pop	{r4, r7, pc}

080056f4 <ssd1306_DrawRectangle>:

//Draw rectangle
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80056f4:	b590      	push	{r4, r7, lr}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af02      	add	r7, sp, #8
 80056fa:	4604      	mov	r4, r0
 80056fc:	4608      	mov	r0, r1
 80056fe:	4611      	mov	r1, r2
 8005700:	461a      	mov	r2, r3
 8005702:	4623      	mov	r3, r4
 8005704:	71fb      	strb	r3, [r7, #7]
 8005706:	4603      	mov	r3, r0
 8005708:	71bb      	strb	r3, [r7, #6]
 800570a:	460b      	mov	r3, r1
 800570c:	717b      	strb	r3, [r7, #5]
 800570e:	4613      	mov	r3, r2
 8005710:	713b      	strb	r3, [r7, #4]
  ssd1306_Line(x1,y1,x2,y1,color);
 8005712:	79bc      	ldrb	r4, [r7, #6]
 8005714:	797a      	ldrb	r2, [r7, #5]
 8005716:	79b9      	ldrb	r1, [r7, #6]
 8005718:	79f8      	ldrb	r0, [r7, #7]
 800571a:	7e3b      	ldrb	r3, [r7, #24]
 800571c:	9300      	str	r3, [sp, #0]
 800571e:	4623      	mov	r3, r4
 8005720:	f7ff fef6 	bl	8005510 <ssd1306_Line>
  ssd1306_Line(x2,y1,x2,y2,color);
 8005724:	793c      	ldrb	r4, [r7, #4]
 8005726:	797a      	ldrb	r2, [r7, #5]
 8005728:	79b9      	ldrb	r1, [r7, #6]
 800572a:	7978      	ldrb	r0, [r7, #5]
 800572c:	7e3b      	ldrb	r3, [r7, #24]
 800572e:	9300      	str	r3, [sp, #0]
 8005730:	4623      	mov	r3, r4
 8005732:	f7ff feed 	bl	8005510 <ssd1306_Line>
  ssd1306_Line(x2,y2,x1,y2,color);
 8005736:	793c      	ldrb	r4, [r7, #4]
 8005738:	79fa      	ldrb	r2, [r7, #7]
 800573a:	7939      	ldrb	r1, [r7, #4]
 800573c:	7978      	ldrb	r0, [r7, #5]
 800573e:	7e3b      	ldrb	r3, [r7, #24]
 8005740:	9300      	str	r3, [sp, #0]
 8005742:	4623      	mov	r3, r4
 8005744:	f7ff fee4 	bl	8005510 <ssd1306_Line>
  ssd1306_Line(x1,y2,x1,y1,color);
 8005748:	79bc      	ldrb	r4, [r7, #6]
 800574a:	79fa      	ldrb	r2, [r7, #7]
 800574c:	7939      	ldrb	r1, [r7, #4]
 800574e:	79f8      	ldrb	r0, [r7, #7]
 8005750:	7e3b      	ldrb	r3, [r7, #24]
 8005752:	9300      	str	r3, [sp, #0]
 8005754:	4623      	mov	r3, r4
 8005756:	f7ff fedb 	bl	8005510 <ssd1306_Line>

  return;
 800575a:	bf00      	nop
}
 800575c:	370c      	adds	r7, #12
 800575e:	46bd      	mov	sp, r7
 8005760:	bd90      	pop	{r4, r7, pc}

08005762 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8005762:	b580      	push	{r7, lr}
 8005764:	b084      	sub	sp, #16
 8005766:	af00      	add	r7, sp, #0
 8005768:	4603      	mov	r3, r0
 800576a:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800576c:	2381      	movs	r3, #129	; 0x81
 800576e:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8005770:	7bfb      	ldrb	r3, [r7, #15]
 8005772:	4618      	mov	r0, r3
 8005774:	f7ff fcb2 	bl	80050dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8005778:	79fb      	ldrb	r3, [r7, #7]
 800577a:	4618      	mov	r0, r3
 800577c:	f7ff fcae 	bl	80050dc <ssd1306_WriteCommand>
}
 8005780:	bf00      	nop
 8005782:	3710      	adds	r7, #16
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	4603      	mov	r3, r0
 8005790:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8005792:	79fb      	ldrb	r3, [r7, #7]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d005      	beq.n	80057a4 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8005798:	23af      	movs	r3, #175	; 0xaf
 800579a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 800579c:	4b08      	ldr	r3, [pc, #32]	; (80057c0 <ssd1306_SetDisplayOn+0x38>)
 800579e:	2201      	movs	r2, #1
 80057a0:	719a      	strb	r2, [r3, #6]
 80057a2:	e004      	b.n	80057ae <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80057a4:	23ae      	movs	r3, #174	; 0xae
 80057a6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80057a8:	4b05      	ldr	r3, [pc, #20]	; (80057c0 <ssd1306_SetDisplayOn+0x38>)
 80057aa:	2200      	movs	r2, #0
 80057ac:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 80057ae:	7bfb      	ldrb	r3, [r7, #15]
 80057b0:	4618      	mov	r0, r3
 80057b2:	f7ff fc93 	bl	80050dc <ssd1306_WriteCommand>
}
 80057b6:	bf00      	nop
 80057b8:	3710      	adds	r7, #16
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	200006e8 	.word	0x200006e8

080057c4 <__errno>:
 80057c4:	4b01      	ldr	r3, [pc, #4]	; (80057cc <__errno+0x8>)
 80057c6:	6818      	ldr	r0, [r3, #0]
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop
 80057cc:	200000a4 	.word	0x200000a4

080057d0 <__libc_init_array>:
 80057d0:	b570      	push	{r4, r5, r6, lr}
 80057d2:	2600      	movs	r6, #0
 80057d4:	4d0c      	ldr	r5, [pc, #48]	; (8005808 <__libc_init_array+0x38>)
 80057d6:	4c0d      	ldr	r4, [pc, #52]	; (800580c <__libc_init_array+0x3c>)
 80057d8:	1b64      	subs	r4, r4, r5
 80057da:	10a4      	asrs	r4, r4, #2
 80057dc:	42a6      	cmp	r6, r4
 80057de:	d109      	bne.n	80057f4 <__libc_init_array+0x24>
 80057e0:	f004 fa38 	bl	8009c54 <_init>
 80057e4:	2600      	movs	r6, #0
 80057e6:	4d0a      	ldr	r5, [pc, #40]	; (8005810 <__libc_init_array+0x40>)
 80057e8:	4c0a      	ldr	r4, [pc, #40]	; (8005814 <__libc_init_array+0x44>)
 80057ea:	1b64      	subs	r4, r4, r5
 80057ec:	10a4      	asrs	r4, r4, #2
 80057ee:	42a6      	cmp	r6, r4
 80057f0:	d105      	bne.n	80057fe <__libc_init_array+0x2e>
 80057f2:	bd70      	pop	{r4, r5, r6, pc}
 80057f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80057f8:	4798      	blx	r3
 80057fa:	3601      	adds	r6, #1
 80057fc:	e7ee      	b.n	80057dc <__libc_init_array+0xc>
 80057fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005802:	4798      	blx	r3
 8005804:	3601      	adds	r6, #1
 8005806:	e7f2      	b.n	80057ee <__libc_init_array+0x1e>
 8005808:	0800bdb8 	.word	0x0800bdb8
 800580c:	0800bdb8 	.word	0x0800bdb8
 8005810:	0800bdb8 	.word	0x0800bdb8
 8005814:	0800bdbc 	.word	0x0800bdbc

08005818 <memcpy>:
 8005818:	440a      	add	r2, r1
 800581a:	4291      	cmp	r1, r2
 800581c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005820:	d100      	bne.n	8005824 <memcpy+0xc>
 8005822:	4770      	bx	lr
 8005824:	b510      	push	{r4, lr}
 8005826:	f811 4b01 	ldrb.w	r4, [r1], #1
 800582a:	4291      	cmp	r1, r2
 800582c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005830:	d1f9      	bne.n	8005826 <memcpy+0xe>
 8005832:	bd10      	pop	{r4, pc}

08005834 <memset>:
 8005834:	4603      	mov	r3, r0
 8005836:	4402      	add	r2, r0
 8005838:	4293      	cmp	r3, r2
 800583a:	d100      	bne.n	800583e <memset+0xa>
 800583c:	4770      	bx	lr
 800583e:	f803 1b01 	strb.w	r1, [r3], #1
 8005842:	e7f9      	b.n	8005838 <memset+0x4>

08005844 <__cvt>:
 8005844:	2b00      	cmp	r3, #0
 8005846:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800584a:	461f      	mov	r7, r3
 800584c:	bfbb      	ittet	lt
 800584e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005852:	461f      	movlt	r7, r3
 8005854:	2300      	movge	r3, #0
 8005856:	232d      	movlt	r3, #45	; 0x2d
 8005858:	b088      	sub	sp, #32
 800585a:	4614      	mov	r4, r2
 800585c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800585e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005860:	7013      	strb	r3, [r2, #0]
 8005862:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005864:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005868:	f023 0820 	bic.w	r8, r3, #32
 800586c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005870:	d005      	beq.n	800587e <__cvt+0x3a>
 8005872:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005876:	d100      	bne.n	800587a <__cvt+0x36>
 8005878:	3501      	adds	r5, #1
 800587a:	2302      	movs	r3, #2
 800587c:	e000      	b.n	8005880 <__cvt+0x3c>
 800587e:	2303      	movs	r3, #3
 8005880:	aa07      	add	r2, sp, #28
 8005882:	9204      	str	r2, [sp, #16]
 8005884:	aa06      	add	r2, sp, #24
 8005886:	e9cd a202 	strd	sl, r2, [sp, #8]
 800588a:	e9cd 3500 	strd	r3, r5, [sp]
 800588e:	4622      	mov	r2, r4
 8005890:	463b      	mov	r3, r7
 8005892:	f000 fce5 	bl	8006260 <_dtoa_r>
 8005896:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800589a:	4606      	mov	r6, r0
 800589c:	d102      	bne.n	80058a4 <__cvt+0x60>
 800589e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80058a0:	07db      	lsls	r3, r3, #31
 80058a2:	d522      	bpl.n	80058ea <__cvt+0xa6>
 80058a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80058a8:	eb06 0905 	add.w	r9, r6, r5
 80058ac:	d110      	bne.n	80058d0 <__cvt+0x8c>
 80058ae:	7833      	ldrb	r3, [r6, #0]
 80058b0:	2b30      	cmp	r3, #48	; 0x30
 80058b2:	d10a      	bne.n	80058ca <__cvt+0x86>
 80058b4:	2200      	movs	r2, #0
 80058b6:	2300      	movs	r3, #0
 80058b8:	4620      	mov	r0, r4
 80058ba:	4639      	mov	r1, r7
 80058bc:	f7fb f874 	bl	80009a8 <__aeabi_dcmpeq>
 80058c0:	b918      	cbnz	r0, 80058ca <__cvt+0x86>
 80058c2:	f1c5 0501 	rsb	r5, r5, #1
 80058c6:	f8ca 5000 	str.w	r5, [sl]
 80058ca:	f8da 3000 	ldr.w	r3, [sl]
 80058ce:	4499      	add	r9, r3
 80058d0:	2200      	movs	r2, #0
 80058d2:	2300      	movs	r3, #0
 80058d4:	4620      	mov	r0, r4
 80058d6:	4639      	mov	r1, r7
 80058d8:	f7fb f866 	bl	80009a8 <__aeabi_dcmpeq>
 80058dc:	b108      	cbz	r0, 80058e2 <__cvt+0x9e>
 80058de:	f8cd 901c 	str.w	r9, [sp, #28]
 80058e2:	2230      	movs	r2, #48	; 0x30
 80058e4:	9b07      	ldr	r3, [sp, #28]
 80058e6:	454b      	cmp	r3, r9
 80058e8:	d307      	bcc.n	80058fa <__cvt+0xb6>
 80058ea:	4630      	mov	r0, r6
 80058ec:	9b07      	ldr	r3, [sp, #28]
 80058ee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80058f0:	1b9b      	subs	r3, r3, r6
 80058f2:	6013      	str	r3, [r2, #0]
 80058f4:	b008      	add	sp, #32
 80058f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058fa:	1c59      	adds	r1, r3, #1
 80058fc:	9107      	str	r1, [sp, #28]
 80058fe:	701a      	strb	r2, [r3, #0]
 8005900:	e7f0      	b.n	80058e4 <__cvt+0xa0>

08005902 <__exponent>:
 8005902:	4603      	mov	r3, r0
 8005904:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005906:	2900      	cmp	r1, #0
 8005908:	f803 2b02 	strb.w	r2, [r3], #2
 800590c:	bfb6      	itet	lt
 800590e:	222d      	movlt	r2, #45	; 0x2d
 8005910:	222b      	movge	r2, #43	; 0x2b
 8005912:	4249      	neglt	r1, r1
 8005914:	2909      	cmp	r1, #9
 8005916:	7042      	strb	r2, [r0, #1]
 8005918:	dd2b      	ble.n	8005972 <__exponent+0x70>
 800591a:	f10d 0407 	add.w	r4, sp, #7
 800591e:	46a4      	mov	ip, r4
 8005920:	270a      	movs	r7, #10
 8005922:	fb91 f6f7 	sdiv	r6, r1, r7
 8005926:	460a      	mov	r2, r1
 8005928:	46a6      	mov	lr, r4
 800592a:	fb07 1516 	mls	r5, r7, r6, r1
 800592e:	2a63      	cmp	r2, #99	; 0x63
 8005930:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005934:	4631      	mov	r1, r6
 8005936:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800593a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800593e:	dcf0      	bgt.n	8005922 <__exponent+0x20>
 8005940:	3130      	adds	r1, #48	; 0x30
 8005942:	f1ae 0502 	sub.w	r5, lr, #2
 8005946:	f804 1c01 	strb.w	r1, [r4, #-1]
 800594a:	4629      	mov	r1, r5
 800594c:	1c44      	adds	r4, r0, #1
 800594e:	4561      	cmp	r1, ip
 8005950:	d30a      	bcc.n	8005968 <__exponent+0x66>
 8005952:	f10d 0209 	add.w	r2, sp, #9
 8005956:	eba2 020e 	sub.w	r2, r2, lr
 800595a:	4565      	cmp	r5, ip
 800595c:	bf88      	it	hi
 800595e:	2200      	movhi	r2, #0
 8005960:	4413      	add	r3, r2
 8005962:	1a18      	subs	r0, r3, r0
 8005964:	b003      	add	sp, #12
 8005966:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005968:	f811 2b01 	ldrb.w	r2, [r1], #1
 800596c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005970:	e7ed      	b.n	800594e <__exponent+0x4c>
 8005972:	2330      	movs	r3, #48	; 0x30
 8005974:	3130      	adds	r1, #48	; 0x30
 8005976:	7083      	strb	r3, [r0, #2]
 8005978:	70c1      	strb	r1, [r0, #3]
 800597a:	1d03      	adds	r3, r0, #4
 800597c:	e7f1      	b.n	8005962 <__exponent+0x60>
	...

08005980 <_printf_float>:
 8005980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005984:	b091      	sub	sp, #68	; 0x44
 8005986:	460c      	mov	r4, r1
 8005988:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800598c:	4616      	mov	r6, r2
 800598e:	461f      	mov	r7, r3
 8005990:	4605      	mov	r5, r0
 8005992:	f001 fa53 	bl	8006e3c <_localeconv_r>
 8005996:	6803      	ldr	r3, [r0, #0]
 8005998:	4618      	mov	r0, r3
 800599a:	9309      	str	r3, [sp, #36]	; 0x24
 800599c:	f7fa fbd8 	bl	8000150 <strlen>
 80059a0:	2300      	movs	r3, #0
 80059a2:	930e      	str	r3, [sp, #56]	; 0x38
 80059a4:	f8d8 3000 	ldr.w	r3, [r8]
 80059a8:	900a      	str	r0, [sp, #40]	; 0x28
 80059aa:	3307      	adds	r3, #7
 80059ac:	f023 0307 	bic.w	r3, r3, #7
 80059b0:	f103 0208 	add.w	r2, r3, #8
 80059b4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80059b8:	f8d4 b000 	ldr.w	fp, [r4]
 80059bc:	f8c8 2000 	str.w	r2, [r8]
 80059c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80059c8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80059cc:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80059d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80059d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80059d6:	4640      	mov	r0, r8
 80059d8:	4b9c      	ldr	r3, [pc, #624]	; (8005c4c <_printf_float+0x2cc>)
 80059da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80059dc:	f7fb f816 	bl	8000a0c <__aeabi_dcmpun>
 80059e0:	bb70      	cbnz	r0, 8005a40 <_printf_float+0xc0>
 80059e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80059e6:	4640      	mov	r0, r8
 80059e8:	4b98      	ldr	r3, [pc, #608]	; (8005c4c <_printf_float+0x2cc>)
 80059ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80059ec:	f7fa fff0 	bl	80009d0 <__aeabi_dcmple>
 80059f0:	bb30      	cbnz	r0, 8005a40 <_printf_float+0xc0>
 80059f2:	2200      	movs	r2, #0
 80059f4:	2300      	movs	r3, #0
 80059f6:	4640      	mov	r0, r8
 80059f8:	4651      	mov	r1, sl
 80059fa:	f7fa ffdf 	bl	80009bc <__aeabi_dcmplt>
 80059fe:	b110      	cbz	r0, 8005a06 <_printf_float+0x86>
 8005a00:	232d      	movs	r3, #45	; 0x2d
 8005a02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a06:	4b92      	ldr	r3, [pc, #584]	; (8005c50 <_printf_float+0x2d0>)
 8005a08:	4892      	ldr	r0, [pc, #584]	; (8005c54 <_printf_float+0x2d4>)
 8005a0a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005a0e:	bf94      	ite	ls
 8005a10:	4698      	movls	r8, r3
 8005a12:	4680      	movhi	r8, r0
 8005a14:	2303      	movs	r3, #3
 8005a16:	f04f 0a00 	mov.w	sl, #0
 8005a1a:	6123      	str	r3, [r4, #16]
 8005a1c:	f02b 0304 	bic.w	r3, fp, #4
 8005a20:	6023      	str	r3, [r4, #0]
 8005a22:	4633      	mov	r3, r6
 8005a24:	4621      	mov	r1, r4
 8005a26:	4628      	mov	r0, r5
 8005a28:	9700      	str	r7, [sp, #0]
 8005a2a:	aa0f      	add	r2, sp, #60	; 0x3c
 8005a2c:	f000 f9d4 	bl	8005dd8 <_printf_common>
 8005a30:	3001      	adds	r0, #1
 8005a32:	f040 8090 	bne.w	8005b56 <_printf_float+0x1d6>
 8005a36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a3a:	b011      	add	sp, #68	; 0x44
 8005a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a40:	4642      	mov	r2, r8
 8005a42:	4653      	mov	r3, sl
 8005a44:	4640      	mov	r0, r8
 8005a46:	4651      	mov	r1, sl
 8005a48:	f7fa ffe0 	bl	8000a0c <__aeabi_dcmpun>
 8005a4c:	b148      	cbz	r0, 8005a62 <_printf_float+0xe2>
 8005a4e:	f1ba 0f00 	cmp.w	sl, #0
 8005a52:	bfb8      	it	lt
 8005a54:	232d      	movlt	r3, #45	; 0x2d
 8005a56:	4880      	ldr	r0, [pc, #512]	; (8005c58 <_printf_float+0x2d8>)
 8005a58:	bfb8      	it	lt
 8005a5a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005a5e:	4b7f      	ldr	r3, [pc, #508]	; (8005c5c <_printf_float+0x2dc>)
 8005a60:	e7d3      	b.n	8005a0a <_printf_float+0x8a>
 8005a62:	6863      	ldr	r3, [r4, #4]
 8005a64:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005a68:	1c5a      	adds	r2, r3, #1
 8005a6a:	d142      	bne.n	8005af2 <_printf_float+0x172>
 8005a6c:	2306      	movs	r3, #6
 8005a6e:	6063      	str	r3, [r4, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	9206      	str	r2, [sp, #24]
 8005a74:	aa0e      	add	r2, sp, #56	; 0x38
 8005a76:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005a7a:	aa0d      	add	r2, sp, #52	; 0x34
 8005a7c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005a80:	9203      	str	r2, [sp, #12]
 8005a82:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005a86:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005a8a:	6023      	str	r3, [r4, #0]
 8005a8c:	6863      	ldr	r3, [r4, #4]
 8005a8e:	4642      	mov	r2, r8
 8005a90:	9300      	str	r3, [sp, #0]
 8005a92:	4628      	mov	r0, r5
 8005a94:	4653      	mov	r3, sl
 8005a96:	910b      	str	r1, [sp, #44]	; 0x2c
 8005a98:	f7ff fed4 	bl	8005844 <__cvt>
 8005a9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005a9e:	4680      	mov	r8, r0
 8005aa0:	2947      	cmp	r1, #71	; 0x47
 8005aa2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005aa4:	d108      	bne.n	8005ab8 <_printf_float+0x138>
 8005aa6:	1cc8      	adds	r0, r1, #3
 8005aa8:	db02      	blt.n	8005ab0 <_printf_float+0x130>
 8005aaa:	6863      	ldr	r3, [r4, #4]
 8005aac:	4299      	cmp	r1, r3
 8005aae:	dd40      	ble.n	8005b32 <_printf_float+0x1b2>
 8005ab0:	f1a9 0902 	sub.w	r9, r9, #2
 8005ab4:	fa5f f989 	uxtb.w	r9, r9
 8005ab8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005abc:	d81f      	bhi.n	8005afe <_printf_float+0x17e>
 8005abe:	464a      	mov	r2, r9
 8005ac0:	3901      	subs	r1, #1
 8005ac2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005ac6:	910d      	str	r1, [sp, #52]	; 0x34
 8005ac8:	f7ff ff1b 	bl	8005902 <__exponent>
 8005acc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ace:	4682      	mov	sl, r0
 8005ad0:	1813      	adds	r3, r2, r0
 8005ad2:	2a01      	cmp	r2, #1
 8005ad4:	6123      	str	r3, [r4, #16]
 8005ad6:	dc02      	bgt.n	8005ade <_printf_float+0x15e>
 8005ad8:	6822      	ldr	r2, [r4, #0]
 8005ada:	07d2      	lsls	r2, r2, #31
 8005adc:	d501      	bpl.n	8005ae2 <_printf_float+0x162>
 8005ade:	3301      	adds	r3, #1
 8005ae0:	6123      	str	r3, [r4, #16]
 8005ae2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d09b      	beq.n	8005a22 <_printf_float+0xa2>
 8005aea:	232d      	movs	r3, #45	; 0x2d
 8005aec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005af0:	e797      	b.n	8005a22 <_printf_float+0xa2>
 8005af2:	2947      	cmp	r1, #71	; 0x47
 8005af4:	d1bc      	bne.n	8005a70 <_printf_float+0xf0>
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d1ba      	bne.n	8005a70 <_printf_float+0xf0>
 8005afa:	2301      	movs	r3, #1
 8005afc:	e7b7      	b.n	8005a6e <_printf_float+0xee>
 8005afe:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005b02:	d118      	bne.n	8005b36 <_printf_float+0x1b6>
 8005b04:	2900      	cmp	r1, #0
 8005b06:	6863      	ldr	r3, [r4, #4]
 8005b08:	dd0b      	ble.n	8005b22 <_printf_float+0x1a2>
 8005b0a:	6121      	str	r1, [r4, #16]
 8005b0c:	b913      	cbnz	r3, 8005b14 <_printf_float+0x194>
 8005b0e:	6822      	ldr	r2, [r4, #0]
 8005b10:	07d0      	lsls	r0, r2, #31
 8005b12:	d502      	bpl.n	8005b1a <_printf_float+0x19a>
 8005b14:	3301      	adds	r3, #1
 8005b16:	440b      	add	r3, r1
 8005b18:	6123      	str	r3, [r4, #16]
 8005b1a:	f04f 0a00 	mov.w	sl, #0
 8005b1e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005b20:	e7df      	b.n	8005ae2 <_printf_float+0x162>
 8005b22:	b913      	cbnz	r3, 8005b2a <_printf_float+0x1aa>
 8005b24:	6822      	ldr	r2, [r4, #0]
 8005b26:	07d2      	lsls	r2, r2, #31
 8005b28:	d501      	bpl.n	8005b2e <_printf_float+0x1ae>
 8005b2a:	3302      	adds	r3, #2
 8005b2c:	e7f4      	b.n	8005b18 <_printf_float+0x198>
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e7f2      	b.n	8005b18 <_printf_float+0x198>
 8005b32:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005b36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b38:	4299      	cmp	r1, r3
 8005b3a:	db05      	blt.n	8005b48 <_printf_float+0x1c8>
 8005b3c:	6823      	ldr	r3, [r4, #0]
 8005b3e:	6121      	str	r1, [r4, #16]
 8005b40:	07d8      	lsls	r0, r3, #31
 8005b42:	d5ea      	bpl.n	8005b1a <_printf_float+0x19a>
 8005b44:	1c4b      	adds	r3, r1, #1
 8005b46:	e7e7      	b.n	8005b18 <_printf_float+0x198>
 8005b48:	2900      	cmp	r1, #0
 8005b4a:	bfcc      	ite	gt
 8005b4c:	2201      	movgt	r2, #1
 8005b4e:	f1c1 0202 	rsble	r2, r1, #2
 8005b52:	4413      	add	r3, r2
 8005b54:	e7e0      	b.n	8005b18 <_printf_float+0x198>
 8005b56:	6823      	ldr	r3, [r4, #0]
 8005b58:	055a      	lsls	r2, r3, #21
 8005b5a:	d407      	bmi.n	8005b6c <_printf_float+0x1ec>
 8005b5c:	6923      	ldr	r3, [r4, #16]
 8005b5e:	4642      	mov	r2, r8
 8005b60:	4631      	mov	r1, r6
 8005b62:	4628      	mov	r0, r5
 8005b64:	47b8      	blx	r7
 8005b66:	3001      	adds	r0, #1
 8005b68:	d12b      	bne.n	8005bc2 <_printf_float+0x242>
 8005b6a:	e764      	b.n	8005a36 <_printf_float+0xb6>
 8005b6c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005b70:	f240 80dd 	bls.w	8005d2e <_printf_float+0x3ae>
 8005b74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b78:	2200      	movs	r2, #0
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	f7fa ff14 	bl	80009a8 <__aeabi_dcmpeq>
 8005b80:	2800      	cmp	r0, #0
 8005b82:	d033      	beq.n	8005bec <_printf_float+0x26c>
 8005b84:	2301      	movs	r3, #1
 8005b86:	4631      	mov	r1, r6
 8005b88:	4628      	mov	r0, r5
 8005b8a:	4a35      	ldr	r2, [pc, #212]	; (8005c60 <_printf_float+0x2e0>)
 8005b8c:	47b8      	blx	r7
 8005b8e:	3001      	adds	r0, #1
 8005b90:	f43f af51 	beq.w	8005a36 <_printf_float+0xb6>
 8005b94:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	db02      	blt.n	8005ba2 <_printf_float+0x222>
 8005b9c:	6823      	ldr	r3, [r4, #0]
 8005b9e:	07d8      	lsls	r0, r3, #31
 8005ba0:	d50f      	bpl.n	8005bc2 <_printf_float+0x242>
 8005ba2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ba6:	4631      	mov	r1, r6
 8005ba8:	4628      	mov	r0, r5
 8005baa:	47b8      	blx	r7
 8005bac:	3001      	adds	r0, #1
 8005bae:	f43f af42 	beq.w	8005a36 <_printf_float+0xb6>
 8005bb2:	f04f 0800 	mov.w	r8, #0
 8005bb6:	f104 091a 	add.w	r9, r4, #26
 8005bba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005bbc:	3b01      	subs	r3, #1
 8005bbe:	4543      	cmp	r3, r8
 8005bc0:	dc09      	bgt.n	8005bd6 <_printf_float+0x256>
 8005bc2:	6823      	ldr	r3, [r4, #0]
 8005bc4:	079b      	lsls	r3, r3, #30
 8005bc6:	f100 8102 	bmi.w	8005dce <_printf_float+0x44e>
 8005bca:	68e0      	ldr	r0, [r4, #12]
 8005bcc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005bce:	4298      	cmp	r0, r3
 8005bd0:	bfb8      	it	lt
 8005bd2:	4618      	movlt	r0, r3
 8005bd4:	e731      	b.n	8005a3a <_printf_float+0xba>
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	464a      	mov	r2, r9
 8005bda:	4631      	mov	r1, r6
 8005bdc:	4628      	mov	r0, r5
 8005bde:	47b8      	blx	r7
 8005be0:	3001      	adds	r0, #1
 8005be2:	f43f af28 	beq.w	8005a36 <_printf_float+0xb6>
 8005be6:	f108 0801 	add.w	r8, r8, #1
 8005bea:	e7e6      	b.n	8005bba <_printf_float+0x23a>
 8005bec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	dc38      	bgt.n	8005c64 <_printf_float+0x2e4>
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	4631      	mov	r1, r6
 8005bf6:	4628      	mov	r0, r5
 8005bf8:	4a19      	ldr	r2, [pc, #100]	; (8005c60 <_printf_float+0x2e0>)
 8005bfa:	47b8      	blx	r7
 8005bfc:	3001      	adds	r0, #1
 8005bfe:	f43f af1a 	beq.w	8005a36 <_printf_float+0xb6>
 8005c02:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005c06:	4313      	orrs	r3, r2
 8005c08:	d102      	bne.n	8005c10 <_printf_float+0x290>
 8005c0a:	6823      	ldr	r3, [r4, #0]
 8005c0c:	07d9      	lsls	r1, r3, #31
 8005c0e:	d5d8      	bpl.n	8005bc2 <_printf_float+0x242>
 8005c10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c14:	4631      	mov	r1, r6
 8005c16:	4628      	mov	r0, r5
 8005c18:	47b8      	blx	r7
 8005c1a:	3001      	adds	r0, #1
 8005c1c:	f43f af0b 	beq.w	8005a36 <_printf_float+0xb6>
 8005c20:	f04f 0900 	mov.w	r9, #0
 8005c24:	f104 0a1a 	add.w	sl, r4, #26
 8005c28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c2a:	425b      	negs	r3, r3
 8005c2c:	454b      	cmp	r3, r9
 8005c2e:	dc01      	bgt.n	8005c34 <_printf_float+0x2b4>
 8005c30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c32:	e794      	b.n	8005b5e <_printf_float+0x1de>
 8005c34:	2301      	movs	r3, #1
 8005c36:	4652      	mov	r2, sl
 8005c38:	4631      	mov	r1, r6
 8005c3a:	4628      	mov	r0, r5
 8005c3c:	47b8      	blx	r7
 8005c3e:	3001      	adds	r0, #1
 8005c40:	f43f aef9 	beq.w	8005a36 <_printf_float+0xb6>
 8005c44:	f109 0901 	add.w	r9, r9, #1
 8005c48:	e7ee      	b.n	8005c28 <_printf_float+0x2a8>
 8005c4a:	bf00      	nop
 8005c4c:	7fefffff 	.word	0x7fefffff
 8005c50:	0800b790 	.word	0x0800b790
 8005c54:	0800b794 	.word	0x0800b794
 8005c58:	0800b79c 	.word	0x0800b79c
 8005c5c:	0800b798 	.word	0x0800b798
 8005c60:	0800b7a0 	.word	0x0800b7a0
 8005c64:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c66:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	bfa8      	it	ge
 8005c6c:	461a      	movge	r2, r3
 8005c6e:	2a00      	cmp	r2, #0
 8005c70:	4691      	mov	r9, r2
 8005c72:	dc37      	bgt.n	8005ce4 <_printf_float+0x364>
 8005c74:	f04f 0b00 	mov.w	fp, #0
 8005c78:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c7c:	f104 021a 	add.w	r2, r4, #26
 8005c80:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005c84:	ebaa 0309 	sub.w	r3, sl, r9
 8005c88:	455b      	cmp	r3, fp
 8005c8a:	dc33      	bgt.n	8005cf4 <_printf_float+0x374>
 8005c8c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005c90:	429a      	cmp	r2, r3
 8005c92:	db3b      	blt.n	8005d0c <_printf_float+0x38c>
 8005c94:	6823      	ldr	r3, [r4, #0]
 8005c96:	07da      	lsls	r2, r3, #31
 8005c98:	d438      	bmi.n	8005d0c <_printf_float+0x38c>
 8005c9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c9c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005c9e:	eba2 030a 	sub.w	r3, r2, sl
 8005ca2:	eba2 0901 	sub.w	r9, r2, r1
 8005ca6:	4599      	cmp	r9, r3
 8005ca8:	bfa8      	it	ge
 8005caa:	4699      	movge	r9, r3
 8005cac:	f1b9 0f00 	cmp.w	r9, #0
 8005cb0:	dc34      	bgt.n	8005d1c <_printf_float+0x39c>
 8005cb2:	f04f 0800 	mov.w	r8, #0
 8005cb6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005cba:	f104 0a1a 	add.w	sl, r4, #26
 8005cbe:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005cc2:	1a9b      	subs	r3, r3, r2
 8005cc4:	eba3 0309 	sub.w	r3, r3, r9
 8005cc8:	4543      	cmp	r3, r8
 8005cca:	f77f af7a 	ble.w	8005bc2 <_printf_float+0x242>
 8005cce:	2301      	movs	r3, #1
 8005cd0:	4652      	mov	r2, sl
 8005cd2:	4631      	mov	r1, r6
 8005cd4:	4628      	mov	r0, r5
 8005cd6:	47b8      	blx	r7
 8005cd8:	3001      	adds	r0, #1
 8005cda:	f43f aeac 	beq.w	8005a36 <_printf_float+0xb6>
 8005cde:	f108 0801 	add.w	r8, r8, #1
 8005ce2:	e7ec      	b.n	8005cbe <_printf_float+0x33e>
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	4631      	mov	r1, r6
 8005ce8:	4642      	mov	r2, r8
 8005cea:	4628      	mov	r0, r5
 8005cec:	47b8      	blx	r7
 8005cee:	3001      	adds	r0, #1
 8005cf0:	d1c0      	bne.n	8005c74 <_printf_float+0x2f4>
 8005cf2:	e6a0      	b.n	8005a36 <_printf_float+0xb6>
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	4631      	mov	r1, r6
 8005cf8:	4628      	mov	r0, r5
 8005cfa:	920b      	str	r2, [sp, #44]	; 0x2c
 8005cfc:	47b8      	blx	r7
 8005cfe:	3001      	adds	r0, #1
 8005d00:	f43f ae99 	beq.w	8005a36 <_printf_float+0xb6>
 8005d04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005d06:	f10b 0b01 	add.w	fp, fp, #1
 8005d0a:	e7b9      	b.n	8005c80 <_printf_float+0x300>
 8005d0c:	4631      	mov	r1, r6
 8005d0e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d12:	4628      	mov	r0, r5
 8005d14:	47b8      	blx	r7
 8005d16:	3001      	adds	r0, #1
 8005d18:	d1bf      	bne.n	8005c9a <_printf_float+0x31a>
 8005d1a:	e68c      	b.n	8005a36 <_printf_float+0xb6>
 8005d1c:	464b      	mov	r3, r9
 8005d1e:	4631      	mov	r1, r6
 8005d20:	4628      	mov	r0, r5
 8005d22:	eb08 020a 	add.w	r2, r8, sl
 8005d26:	47b8      	blx	r7
 8005d28:	3001      	adds	r0, #1
 8005d2a:	d1c2      	bne.n	8005cb2 <_printf_float+0x332>
 8005d2c:	e683      	b.n	8005a36 <_printf_float+0xb6>
 8005d2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d30:	2a01      	cmp	r2, #1
 8005d32:	dc01      	bgt.n	8005d38 <_printf_float+0x3b8>
 8005d34:	07db      	lsls	r3, r3, #31
 8005d36:	d537      	bpl.n	8005da8 <_printf_float+0x428>
 8005d38:	2301      	movs	r3, #1
 8005d3a:	4642      	mov	r2, r8
 8005d3c:	4631      	mov	r1, r6
 8005d3e:	4628      	mov	r0, r5
 8005d40:	47b8      	blx	r7
 8005d42:	3001      	adds	r0, #1
 8005d44:	f43f ae77 	beq.w	8005a36 <_printf_float+0xb6>
 8005d48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d4c:	4631      	mov	r1, r6
 8005d4e:	4628      	mov	r0, r5
 8005d50:	47b8      	blx	r7
 8005d52:	3001      	adds	r0, #1
 8005d54:	f43f ae6f 	beq.w	8005a36 <_printf_float+0xb6>
 8005d58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	2300      	movs	r3, #0
 8005d60:	f7fa fe22 	bl	80009a8 <__aeabi_dcmpeq>
 8005d64:	b9d8      	cbnz	r0, 8005d9e <_printf_float+0x41e>
 8005d66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d68:	f108 0201 	add.w	r2, r8, #1
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	4631      	mov	r1, r6
 8005d70:	4628      	mov	r0, r5
 8005d72:	47b8      	blx	r7
 8005d74:	3001      	adds	r0, #1
 8005d76:	d10e      	bne.n	8005d96 <_printf_float+0x416>
 8005d78:	e65d      	b.n	8005a36 <_printf_float+0xb6>
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	464a      	mov	r2, r9
 8005d7e:	4631      	mov	r1, r6
 8005d80:	4628      	mov	r0, r5
 8005d82:	47b8      	blx	r7
 8005d84:	3001      	adds	r0, #1
 8005d86:	f43f ae56 	beq.w	8005a36 <_printf_float+0xb6>
 8005d8a:	f108 0801 	add.w	r8, r8, #1
 8005d8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d90:	3b01      	subs	r3, #1
 8005d92:	4543      	cmp	r3, r8
 8005d94:	dcf1      	bgt.n	8005d7a <_printf_float+0x3fa>
 8005d96:	4653      	mov	r3, sl
 8005d98:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005d9c:	e6e0      	b.n	8005b60 <_printf_float+0x1e0>
 8005d9e:	f04f 0800 	mov.w	r8, #0
 8005da2:	f104 091a 	add.w	r9, r4, #26
 8005da6:	e7f2      	b.n	8005d8e <_printf_float+0x40e>
 8005da8:	2301      	movs	r3, #1
 8005daa:	4642      	mov	r2, r8
 8005dac:	e7df      	b.n	8005d6e <_printf_float+0x3ee>
 8005dae:	2301      	movs	r3, #1
 8005db0:	464a      	mov	r2, r9
 8005db2:	4631      	mov	r1, r6
 8005db4:	4628      	mov	r0, r5
 8005db6:	47b8      	blx	r7
 8005db8:	3001      	adds	r0, #1
 8005dba:	f43f ae3c 	beq.w	8005a36 <_printf_float+0xb6>
 8005dbe:	f108 0801 	add.w	r8, r8, #1
 8005dc2:	68e3      	ldr	r3, [r4, #12]
 8005dc4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005dc6:	1a5b      	subs	r3, r3, r1
 8005dc8:	4543      	cmp	r3, r8
 8005dca:	dcf0      	bgt.n	8005dae <_printf_float+0x42e>
 8005dcc:	e6fd      	b.n	8005bca <_printf_float+0x24a>
 8005dce:	f04f 0800 	mov.w	r8, #0
 8005dd2:	f104 0919 	add.w	r9, r4, #25
 8005dd6:	e7f4      	b.n	8005dc2 <_printf_float+0x442>

08005dd8 <_printf_common>:
 8005dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ddc:	4616      	mov	r6, r2
 8005dde:	4699      	mov	r9, r3
 8005de0:	688a      	ldr	r2, [r1, #8]
 8005de2:	690b      	ldr	r3, [r1, #16]
 8005de4:	4607      	mov	r7, r0
 8005de6:	4293      	cmp	r3, r2
 8005de8:	bfb8      	it	lt
 8005dea:	4613      	movlt	r3, r2
 8005dec:	6033      	str	r3, [r6, #0]
 8005dee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005df2:	460c      	mov	r4, r1
 8005df4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005df8:	b10a      	cbz	r2, 8005dfe <_printf_common+0x26>
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	6033      	str	r3, [r6, #0]
 8005dfe:	6823      	ldr	r3, [r4, #0]
 8005e00:	0699      	lsls	r1, r3, #26
 8005e02:	bf42      	ittt	mi
 8005e04:	6833      	ldrmi	r3, [r6, #0]
 8005e06:	3302      	addmi	r3, #2
 8005e08:	6033      	strmi	r3, [r6, #0]
 8005e0a:	6825      	ldr	r5, [r4, #0]
 8005e0c:	f015 0506 	ands.w	r5, r5, #6
 8005e10:	d106      	bne.n	8005e20 <_printf_common+0x48>
 8005e12:	f104 0a19 	add.w	sl, r4, #25
 8005e16:	68e3      	ldr	r3, [r4, #12]
 8005e18:	6832      	ldr	r2, [r6, #0]
 8005e1a:	1a9b      	subs	r3, r3, r2
 8005e1c:	42ab      	cmp	r3, r5
 8005e1e:	dc28      	bgt.n	8005e72 <_printf_common+0x9a>
 8005e20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e24:	1e13      	subs	r3, r2, #0
 8005e26:	6822      	ldr	r2, [r4, #0]
 8005e28:	bf18      	it	ne
 8005e2a:	2301      	movne	r3, #1
 8005e2c:	0692      	lsls	r2, r2, #26
 8005e2e:	d42d      	bmi.n	8005e8c <_printf_common+0xb4>
 8005e30:	4649      	mov	r1, r9
 8005e32:	4638      	mov	r0, r7
 8005e34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e38:	47c0      	blx	r8
 8005e3a:	3001      	adds	r0, #1
 8005e3c:	d020      	beq.n	8005e80 <_printf_common+0xa8>
 8005e3e:	6823      	ldr	r3, [r4, #0]
 8005e40:	68e5      	ldr	r5, [r4, #12]
 8005e42:	f003 0306 	and.w	r3, r3, #6
 8005e46:	2b04      	cmp	r3, #4
 8005e48:	bf18      	it	ne
 8005e4a:	2500      	movne	r5, #0
 8005e4c:	6832      	ldr	r2, [r6, #0]
 8005e4e:	f04f 0600 	mov.w	r6, #0
 8005e52:	68a3      	ldr	r3, [r4, #8]
 8005e54:	bf08      	it	eq
 8005e56:	1aad      	subeq	r5, r5, r2
 8005e58:	6922      	ldr	r2, [r4, #16]
 8005e5a:	bf08      	it	eq
 8005e5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e60:	4293      	cmp	r3, r2
 8005e62:	bfc4      	itt	gt
 8005e64:	1a9b      	subgt	r3, r3, r2
 8005e66:	18ed      	addgt	r5, r5, r3
 8005e68:	341a      	adds	r4, #26
 8005e6a:	42b5      	cmp	r5, r6
 8005e6c:	d11a      	bne.n	8005ea4 <_printf_common+0xcc>
 8005e6e:	2000      	movs	r0, #0
 8005e70:	e008      	b.n	8005e84 <_printf_common+0xac>
 8005e72:	2301      	movs	r3, #1
 8005e74:	4652      	mov	r2, sl
 8005e76:	4649      	mov	r1, r9
 8005e78:	4638      	mov	r0, r7
 8005e7a:	47c0      	blx	r8
 8005e7c:	3001      	adds	r0, #1
 8005e7e:	d103      	bne.n	8005e88 <_printf_common+0xb0>
 8005e80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e88:	3501      	adds	r5, #1
 8005e8a:	e7c4      	b.n	8005e16 <_printf_common+0x3e>
 8005e8c:	2030      	movs	r0, #48	; 0x30
 8005e8e:	18e1      	adds	r1, r4, r3
 8005e90:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e94:	1c5a      	adds	r2, r3, #1
 8005e96:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e9a:	4422      	add	r2, r4
 8005e9c:	3302      	adds	r3, #2
 8005e9e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ea2:	e7c5      	b.n	8005e30 <_printf_common+0x58>
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	4622      	mov	r2, r4
 8005ea8:	4649      	mov	r1, r9
 8005eaa:	4638      	mov	r0, r7
 8005eac:	47c0      	blx	r8
 8005eae:	3001      	adds	r0, #1
 8005eb0:	d0e6      	beq.n	8005e80 <_printf_common+0xa8>
 8005eb2:	3601      	adds	r6, #1
 8005eb4:	e7d9      	b.n	8005e6a <_printf_common+0x92>
	...

08005eb8 <_printf_i>:
 8005eb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ebc:	460c      	mov	r4, r1
 8005ebe:	7e27      	ldrb	r7, [r4, #24]
 8005ec0:	4691      	mov	r9, r2
 8005ec2:	2f78      	cmp	r7, #120	; 0x78
 8005ec4:	4680      	mov	r8, r0
 8005ec6:	469a      	mov	sl, r3
 8005ec8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005eca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ece:	d807      	bhi.n	8005ee0 <_printf_i+0x28>
 8005ed0:	2f62      	cmp	r7, #98	; 0x62
 8005ed2:	d80a      	bhi.n	8005eea <_printf_i+0x32>
 8005ed4:	2f00      	cmp	r7, #0
 8005ed6:	f000 80d9 	beq.w	800608c <_printf_i+0x1d4>
 8005eda:	2f58      	cmp	r7, #88	; 0x58
 8005edc:	f000 80a4 	beq.w	8006028 <_printf_i+0x170>
 8005ee0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005ee4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ee8:	e03a      	b.n	8005f60 <_printf_i+0xa8>
 8005eea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005eee:	2b15      	cmp	r3, #21
 8005ef0:	d8f6      	bhi.n	8005ee0 <_printf_i+0x28>
 8005ef2:	a001      	add	r0, pc, #4	; (adr r0, 8005ef8 <_printf_i+0x40>)
 8005ef4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005ef8:	08005f51 	.word	0x08005f51
 8005efc:	08005f65 	.word	0x08005f65
 8005f00:	08005ee1 	.word	0x08005ee1
 8005f04:	08005ee1 	.word	0x08005ee1
 8005f08:	08005ee1 	.word	0x08005ee1
 8005f0c:	08005ee1 	.word	0x08005ee1
 8005f10:	08005f65 	.word	0x08005f65
 8005f14:	08005ee1 	.word	0x08005ee1
 8005f18:	08005ee1 	.word	0x08005ee1
 8005f1c:	08005ee1 	.word	0x08005ee1
 8005f20:	08005ee1 	.word	0x08005ee1
 8005f24:	08006073 	.word	0x08006073
 8005f28:	08005f95 	.word	0x08005f95
 8005f2c:	08006055 	.word	0x08006055
 8005f30:	08005ee1 	.word	0x08005ee1
 8005f34:	08005ee1 	.word	0x08005ee1
 8005f38:	08006095 	.word	0x08006095
 8005f3c:	08005ee1 	.word	0x08005ee1
 8005f40:	08005f95 	.word	0x08005f95
 8005f44:	08005ee1 	.word	0x08005ee1
 8005f48:	08005ee1 	.word	0x08005ee1
 8005f4c:	0800605d 	.word	0x0800605d
 8005f50:	680b      	ldr	r3, [r1, #0]
 8005f52:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005f56:	1d1a      	adds	r2, r3, #4
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	600a      	str	r2, [r1, #0]
 8005f5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f60:	2301      	movs	r3, #1
 8005f62:	e0a4      	b.n	80060ae <_printf_i+0x1f6>
 8005f64:	6825      	ldr	r5, [r4, #0]
 8005f66:	6808      	ldr	r0, [r1, #0]
 8005f68:	062e      	lsls	r6, r5, #24
 8005f6a:	f100 0304 	add.w	r3, r0, #4
 8005f6e:	d50a      	bpl.n	8005f86 <_printf_i+0xce>
 8005f70:	6805      	ldr	r5, [r0, #0]
 8005f72:	600b      	str	r3, [r1, #0]
 8005f74:	2d00      	cmp	r5, #0
 8005f76:	da03      	bge.n	8005f80 <_printf_i+0xc8>
 8005f78:	232d      	movs	r3, #45	; 0x2d
 8005f7a:	426d      	negs	r5, r5
 8005f7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f80:	230a      	movs	r3, #10
 8005f82:	485e      	ldr	r0, [pc, #376]	; (80060fc <_printf_i+0x244>)
 8005f84:	e019      	b.n	8005fba <_printf_i+0x102>
 8005f86:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005f8a:	6805      	ldr	r5, [r0, #0]
 8005f8c:	600b      	str	r3, [r1, #0]
 8005f8e:	bf18      	it	ne
 8005f90:	b22d      	sxthne	r5, r5
 8005f92:	e7ef      	b.n	8005f74 <_printf_i+0xbc>
 8005f94:	680b      	ldr	r3, [r1, #0]
 8005f96:	6825      	ldr	r5, [r4, #0]
 8005f98:	1d18      	adds	r0, r3, #4
 8005f9a:	6008      	str	r0, [r1, #0]
 8005f9c:	0628      	lsls	r0, r5, #24
 8005f9e:	d501      	bpl.n	8005fa4 <_printf_i+0xec>
 8005fa0:	681d      	ldr	r5, [r3, #0]
 8005fa2:	e002      	b.n	8005faa <_printf_i+0xf2>
 8005fa4:	0669      	lsls	r1, r5, #25
 8005fa6:	d5fb      	bpl.n	8005fa0 <_printf_i+0xe8>
 8005fa8:	881d      	ldrh	r5, [r3, #0]
 8005faa:	2f6f      	cmp	r7, #111	; 0x6f
 8005fac:	bf0c      	ite	eq
 8005fae:	2308      	moveq	r3, #8
 8005fb0:	230a      	movne	r3, #10
 8005fb2:	4852      	ldr	r0, [pc, #328]	; (80060fc <_printf_i+0x244>)
 8005fb4:	2100      	movs	r1, #0
 8005fb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005fba:	6866      	ldr	r6, [r4, #4]
 8005fbc:	2e00      	cmp	r6, #0
 8005fbe:	bfa8      	it	ge
 8005fc0:	6821      	ldrge	r1, [r4, #0]
 8005fc2:	60a6      	str	r6, [r4, #8]
 8005fc4:	bfa4      	itt	ge
 8005fc6:	f021 0104 	bicge.w	r1, r1, #4
 8005fca:	6021      	strge	r1, [r4, #0]
 8005fcc:	b90d      	cbnz	r5, 8005fd2 <_printf_i+0x11a>
 8005fce:	2e00      	cmp	r6, #0
 8005fd0:	d04d      	beq.n	800606e <_printf_i+0x1b6>
 8005fd2:	4616      	mov	r6, r2
 8005fd4:	fbb5 f1f3 	udiv	r1, r5, r3
 8005fd8:	fb03 5711 	mls	r7, r3, r1, r5
 8005fdc:	5dc7      	ldrb	r7, [r0, r7]
 8005fde:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005fe2:	462f      	mov	r7, r5
 8005fe4:	42bb      	cmp	r3, r7
 8005fe6:	460d      	mov	r5, r1
 8005fe8:	d9f4      	bls.n	8005fd4 <_printf_i+0x11c>
 8005fea:	2b08      	cmp	r3, #8
 8005fec:	d10b      	bne.n	8006006 <_printf_i+0x14e>
 8005fee:	6823      	ldr	r3, [r4, #0]
 8005ff0:	07df      	lsls	r7, r3, #31
 8005ff2:	d508      	bpl.n	8006006 <_printf_i+0x14e>
 8005ff4:	6923      	ldr	r3, [r4, #16]
 8005ff6:	6861      	ldr	r1, [r4, #4]
 8005ff8:	4299      	cmp	r1, r3
 8005ffa:	bfde      	ittt	le
 8005ffc:	2330      	movle	r3, #48	; 0x30
 8005ffe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006002:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8006006:	1b92      	subs	r2, r2, r6
 8006008:	6122      	str	r2, [r4, #16]
 800600a:	464b      	mov	r3, r9
 800600c:	4621      	mov	r1, r4
 800600e:	4640      	mov	r0, r8
 8006010:	f8cd a000 	str.w	sl, [sp]
 8006014:	aa03      	add	r2, sp, #12
 8006016:	f7ff fedf 	bl	8005dd8 <_printf_common>
 800601a:	3001      	adds	r0, #1
 800601c:	d14c      	bne.n	80060b8 <_printf_i+0x200>
 800601e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006022:	b004      	add	sp, #16
 8006024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006028:	4834      	ldr	r0, [pc, #208]	; (80060fc <_printf_i+0x244>)
 800602a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800602e:	680e      	ldr	r6, [r1, #0]
 8006030:	6823      	ldr	r3, [r4, #0]
 8006032:	f856 5b04 	ldr.w	r5, [r6], #4
 8006036:	061f      	lsls	r7, r3, #24
 8006038:	600e      	str	r6, [r1, #0]
 800603a:	d514      	bpl.n	8006066 <_printf_i+0x1ae>
 800603c:	07d9      	lsls	r1, r3, #31
 800603e:	bf44      	itt	mi
 8006040:	f043 0320 	orrmi.w	r3, r3, #32
 8006044:	6023      	strmi	r3, [r4, #0]
 8006046:	b91d      	cbnz	r5, 8006050 <_printf_i+0x198>
 8006048:	6823      	ldr	r3, [r4, #0]
 800604a:	f023 0320 	bic.w	r3, r3, #32
 800604e:	6023      	str	r3, [r4, #0]
 8006050:	2310      	movs	r3, #16
 8006052:	e7af      	b.n	8005fb4 <_printf_i+0xfc>
 8006054:	6823      	ldr	r3, [r4, #0]
 8006056:	f043 0320 	orr.w	r3, r3, #32
 800605a:	6023      	str	r3, [r4, #0]
 800605c:	2378      	movs	r3, #120	; 0x78
 800605e:	4828      	ldr	r0, [pc, #160]	; (8006100 <_printf_i+0x248>)
 8006060:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006064:	e7e3      	b.n	800602e <_printf_i+0x176>
 8006066:	065e      	lsls	r6, r3, #25
 8006068:	bf48      	it	mi
 800606a:	b2ad      	uxthmi	r5, r5
 800606c:	e7e6      	b.n	800603c <_printf_i+0x184>
 800606e:	4616      	mov	r6, r2
 8006070:	e7bb      	b.n	8005fea <_printf_i+0x132>
 8006072:	680b      	ldr	r3, [r1, #0]
 8006074:	6826      	ldr	r6, [r4, #0]
 8006076:	1d1d      	adds	r5, r3, #4
 8006078:	6960      	ldr	r0, [r4, #20]
 800607a:	600d      	str	r5, [r1, #0]
 800607c:	0635      	lsls	r5, r6, #24
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	d501      	bpl.n	8006086 <_printf_i+0x1ce>
 8006082:	6018      	str	r0, [r3, #0]
 8006084:	e002      	b.n	800608c <_printf_i+0x1d4>
 8006086:	0671      	lsls	r1, r6, #25
 8006088:	d5fb      	bpl.n	8006082 <_printf_i+0x1ca>
 800608a:	8018      	strh	r0, [r3, #0]
 800608c:	2300      	movs	r3, #0
 800608e:	4616      	mov	r6, r2
 8006090:	6123      	str	r3, [r4, #16]
 8006092:	e7ba      	b.n	800600a <_printf_i+0x152>
 8006094:	680b      	ldr	r3, [r1, #0]
 8006096:	1d1a      	adds	r2, r3, #4
 8006098:	600a      	str	r2, [r1, #0]
 800609a:	681e      	ldr	r6, [r3, #0]
 800609c:	2100      	movs	r1, #0
 800609e:	4630      	mov	r0, r6
 80060a0:	6862      	ldr	r2, [r4, #4]
 80060a2:	f000 fed7 	bl	8006e54 <memchr>
 80060a6:	b108      	cbz	r0, 80060ac <_printf_i+0x1f4>
 80060a8:	1b80      	subs	r0, r0, r6
 80060aa:	6060      	str	r0, [r4, #4]
 80060ac:	6863      	ldr	r3, [r4, #4]
 80060ae:	6123      	str	r3, [r4, #16]
 80060b0:	2300      	movs	r3, #0
 80060b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060b6:	e7a8      	b.n	800600a <_printf_i+0x152>
 80060b8:	4632      	mov	r2, r6
 80060ba:	4649      	mov	r1, r9
 80060bc:	4640      	mov	r0, r8
 80060be:	6923      	ldr	r3, [r4, #16]
 80060c0:	47d0      	blx	sl
 80060c2:	3001      	adds	r0, #1
 80060c4:	d0ab      	beq.n	800601e <_printf_i+0x166>
 80060c6:	6823      	ldr	r3, [r4, #0]
 80060c8:	079b      	lsls	r3, r3, #30
 80060ca:	d413      	bmi.n	80060f4 <_printf_i+0x23c>
 80060cc:	68e0      	ldr	r0, [r4, #12]
 80060ce:	9b03      	ldr	r3, [sp, #12]
 80060d0:	4298      	cmp	r0, r3
 80060d2:	bfb8      	it	lt
 80060d4:	4618      	movlt	r0, r3
 80060d6:	e7a4      	b.n	8006022 <_printf_i+0x16a>
 80060d8:	2301      	movs	r3, #1
 80060da:	4632      	mov	r2, r6
 80060dc:	4649      	mov	r1, r9
 80060de:	4640      	mov	r0, r8
 80060e0:	47d0      	blx	sl
 80060e2:	3001      	adds	r0, #1
 80060e4:	d09b      	beq.n	800601e <_printf_i+0x166>
 80060e6:	3501      	adds	r5, #1
 80060e8:	68e3      	ldr	r3, [r4, #12]
 80060ea:	9903      	ldr	r1, [sp, #12]
 80060ec:	1a5b      	subs	r3, r3, r1
 80060ee:	42ab      	cmp	r3, r5
 80060f0:	dcf2      	bgt.n	80060d8 <_printf_i+0x220>
 80060f2:	e7eb      	b.n	80060cc <_printf_i+0x214>
 80060f4:	2500      	movs	r5, #0
 80060f6:	f104 0619 	add.w	r6, r4, #25
 80060fa:	e7f5      	b.n	80060e8 <_printf_i+0x230>
 80060fc:	0800b7a2 	.word	0x0800b7a2
 8006100:	0800b7b3 	.word	0x0800b7b3

08006104 <siprintf>:
 8006104:	b40e      	push	{r1, r2, r3}
 8006106:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800610a:	b500      	push	{lr}
 800610c:	b09c      	sub	sp, #112	; 0x70
 800610e:	ab1d      	add	r3, sp, #116	; 0x74
 8006110:	9002      	str	r0, [sp, #8]
 8006112:	9006      	str	r0, [sp, #24]
 8006114:	9107      	str	r1, [sp, #28]
 8006116:	9104      	str	r1, [sp, #16]
 8006118:	4808      	ldr	r0, [pc, #32]	; (800613c <siprintf+0x38>)
 800611a:	4909      	ldr	r1, [pc, #36]	; (8006140 <siprintf+0x3c>)
 800611c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006120:	9105      	str	r1, [sp, #20]
 8006122:	6800      	ldr	r0, [r0, #0]
 8006124:	a902      	add	r1, sp, #8
 8006126:	9301      	str	r3, [sp, #4]
 8006128:	f001 fb34 	bl	8007794 <_svfiprintf_r>
 800612c:	2200      	movs	r2, #0
 800612e:	9b02      	ldr	r3, [sp, #8]
 8006130:	701a      	strb	r2, [r3, #0]
 8006132:	b01c      	add	sp, #112	; 0x70
 8006134:	f85d eb04 	ldr.w	lr, [sp], #4
 8006138:	b003      	add	sp, #12
 800613a:	4770      	bx	lr
 800613c:	200000a4 	.word	0x200000a4
 8006140:	ffff0208 	.word	0xffff0208

08006144 <quorem>:
 8006144:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006148:	6903      	ldr	r3, [r0, #16]
 800614a:	690c      	ldr	r4, [r1, #16]
 800614c:	4607      	mov	r7, r0
 800614e:	42a3      	cmp	r3, r4
 8006150:	f2c0 8083 	blt.w	800625a <quorem+0x116>
 8006154:	3c01      	subs	r4, #1
 8006156:	f100 0514 	add.w	r5, r0, #20
 800615a:	f101 0814 	add.w	r8, r1, #20
 800615e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006162:	9301      	str	r3, [sp, #4]
 8006164:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006168:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800616c:	3301      	adds	r3, #1
 800616e:	429a      	cmp	r2, r3
 8006170:	fbb2 f6f3 	udiv	r6, r2, r3
 8006174:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006178:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800617c:	d332      	bcc.n	80061e4 <quorem+0xa0>
 800617e:	f04f 0e00 	mov.w	lr, #0
 8006182:	4640      	mov	r0, r8
 8006184:	46ac      	mov	ip, r5
 8006186:	46f2      	mov	sl, lr
 8006188:	f850 2b04 	ldr.w	r2, [r0], #4
 800618c:	b293      	uxth	r3, r2
 800618e:	fb06 e303 	mla	r3, r6, r3, lr
 8006192:	0c12      	lsrs	r2, r2, #16
 8006194:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006198:	fb06 e202 	mla	r2, r6, r2, lr
 800619c:	b29b      	uxth	r3, r3
 800619e:	ebaa 0303 	sub.w	r3, sl, r3
 80061a2:	f8dc a000 	ldr.w	sl, [ip]
 80061a6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80061aa:	fa1f fa8a 	uxth.w	sl, sl
 80061ae:	4453      	add	r3, sl
 80061b0:	fa1f fa82 	uxth.w	sl, r2
 80061b4:	f8dc 2000 	ldr.w	r2, [ip]
 80061b8:	4581      	cmp	r9, r0
 80061ba:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80061be:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80061c8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80061cc:	f84c 3b04 	str.w	r3, [ip], #4
 80061d0:	d2da      	bcs.n	8006188 <quorem+0x44>
 80061d2:	f855 300b 	ldr.w	r3, [r5, fp]
 80061d6:	b92b      	cbnz	r3, 80061e4 <quorem+0xa0>
 80061d8:	9b01      	ldr	r3, [sp, #4]
 80061da:	3b04      	subs	r3, #4
 80061dc:	429d      	cmp	r5, r3
 80061de:	461a      	mov	r2, r3
 80061e0:	d32f      	bcc.n	8006242 <quorem+0xfe>
 80061e2:	613c      	str	r4, [r7, #16]
 80061e4:	4638      	mov	r0, r7
 80061e6:	f001 f8bd 	bl	8007364 <__mcmp>
 80061ea:	2800      	cmp	r0, #0
 80061ec:	db25      	blt.n	800623a <quorem+0xf6>
 80061ee:	4628      	mov	r0, r5
 80061f0:	f04f 0c00 	mov.w	ip, #0
 80061f4:	3601      	adds	r6, #1
 80061f6:	f858 1b04 	ldr.w	r1, [r8], #4
 80061fa:	f8d0 e000 	ldr.w	lr, [r0]
 80061fe:	b28b      	uxth	r3, r1
 8006200:	ebac 0303 	sub.w	r3, ip, r3
 8006204:	fa1f f28e 	uxth.w	r2, lr
 8006208:	4413      	add	r3, r2
 800620a:	0c0a      	lsrs	r2, r1, #16
 800620c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006210:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006214:	b29b      	uxth	r3, r3
 8006216:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800621a:	45c1      	cmp	r9, r8
 800621c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006220:	f840 3b04 	str.w	r3, [r0], #4
 8006224:	d2e7      	bcs.n	80061f6 <quorem+0xb2>
 8006226:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800622a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800622e:	b922      	cbnz	r2, 800623a <quorem+0xf6>
 8006230:	3b04      	subs	r3, #4
 8006232:	429d      	cmp	r5, r3
 8006234:	461a      	mov	r2, r3
 8006236:	d30a      	bcc.n	800624e <quorem+0x10a>
 8006238:	613c      	str	r4, [r7, #16]
 800623a:	4630      	mov	r0, r6
 800623c:	b003      	add	sp, #12
 800623e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006242:	6812      	ldr	r2, [r2, #0]
 8006244:	3b04      	subs	r3, #4
 8006246:	2a00      	cmp	r2, #0
 8006248:	d1cb      	bne.n	80061e2 <quorem+0x9e>
 800624a:	3c01      	subs	r4, #1
 800624c:	e7c6      	b.n	80061dc <quorem+0x98>
 800624e:	6812      	ldr	r2, [r2, #0]
 8006250:	3b04      	subs	r3, #4
 8006252:	2a00      	cmp	r2, #0
 8006254:	d1f0      	bne.n	8006238 <quorem+0xf4>
 8006256:	3c01      	subs	r4, #1
 8006258:	e7eb      	b.n	8006232 <quorem+0xee>
 800625a:	2000      	movs	r0, #0
 800625c:	e7ee      	b.n	800623c <quorem+0xf8>
	...

08006260 <_dtoa_r>:
 8006260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006264:	4616      	mov	r6, r2
 8006266:	461f      	mov	r7, r3
 8006268:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800626a:	b099      	sub	sp, #100	; 0x64
 800626c:	4605      	mov	r5, r0
 800626e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006272:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006276:	b974      	cbnz	r4, 8006296 <_dtoa_r+0x36>
 8006278:	2010      	movs	r0, #16
 800627a:	f000 fde3 	bl	8006e44 <malloc>
 800627e:	4602      	mov	r2, r0
 8006280:	6268      	str	r0, [r5, #36]	; 0x24
 8006282:	b920      	cbnz	r0, 800628e <_dtoa_r+0x2e>
 8006284:	21ea      	movs	r1, #234	; 0xea
 8006286:	4bae      	ldr	r3, [pc, #696]	; (8006540 <_dtoa_r+0x2e0>)
 8006288:	48ae      	ldr	r0, [pc, #696]	; (8006544 <_dtoa_r+0x2e4>)
 800628a:	f001 fb93 	bl	80079b4 <__assert_func>
 800628e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006292:	6004      	str	r4, [r0, #0]
 8006294:	60c4      	str	r4, [r0, #12]
 8006296:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006298:	6819      	ldr	r1, [r3, #0]
 800629a:	b151      	cbz	r1, 80062b2 <_dtoa_r+0x52>
 800629c:	685a      	ldr	r2, [r3, #4]
 800629e:	2301      	movs	r3, #1
 80062a0:	4093      	lsls	r3, r2
 80062a2:	604a      	str	r2, [r1, #4]
 80062a4:	608b      	str	r3, [r1, #8]
 80062a6:	4628      	mov	r0, r5
 80062a8:	f000 fe22 	bl	8006ef0 <_Bfree>
 80062ac:	2200      	movs	r2, #0
 80062ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80062b0:	601a      	str	r2, [r3, #0]
 80062b2:	1e3b      	subs	r3, r7, #0
 80062b4:	bfaf      	iteee	ge
 80062b6:	2300      	movge	r3, #0
 80062b8:	2201      	movlt	r2, #1
 80062ba:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80062be:	9305      	strlt	r3, [sp, #20]
 80062c0:	bfa8      	it	ge
 80062c2:	f8c8 3000 	strge.w	r3, [r8]
 80062c6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80062ca:	4b9f      	ldr	r3, [pc, #636]	; (8006548 <_dtoa_r+0x2e8>)
 80062cc:	bfb8      	it	lt
 80062ce:	f8c8 2000 	strlt.w	r2, [r8]
 80062d2:	ea33 0309 	bics.w	r3, r3, r9
 80062d6:	d119      	bne.n	800630c <_dtoa_r+0xac>
 80062d8:	f242 730f 	movw	r3, #9999	; 0x270f
 80062dc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80062de:	6013      	str	r3, [r2, #0]
 80062e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80062e4:	4333      	orrs	r3, r6
 80062e6:	f000 8580 	beq.w	8006dea <_dtoa_r+0xb8a>
 80062ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80062ec:	b953      	cbnz	r3, 8006304 <_dtoa_r+0xa4>
 80062ee:	4b97      	ldr	r3, [pc, #604]	; (800654c <_dtoa_r+0x2ec>)
 80062f0:	e022      	b.n	8006338 <_dtoa_r+0xd8>
 80062f2:	4b97      	ldr	r3, [pc, #604]	; (8006550 <_dtoa_r+0x2f0>)
 80062f4:	9308      	str	r3, [sp, #32]
 80062f6:	3308      	adds	r3, #8
 80062f8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80062fa:	6013      	str	r3, [r2, #0]
 80062fc:	9808      	ldr	r0, [sp, #32]
 80062fe:	b019      	add	sp, #100	; 0x64
 8006300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006304:	4b91      	ldr	r3, [pc, #580]	; (800654c <_dtoa_r+0x2ec>)
 8006306:	9308      	str	r3, [sp, #32]
 8006308:	3303      	adds	r3, #3
 800630a:	e7f5      	b.n	80062f8 <_dtoa_r+0x98>
 800630c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006310:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006314:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006318:	2200      	movs	r2, #0
 800631a:	2300      	movs	r3, #0
 800631c:	f7fa fb44 	bl	80009a8 <__aeabi_dcmpeq>
 8006320:	4680      	mov	r8, r0
 8006322:	b158      	cbz	r0, 800633c <_dtoa_r+0xdc>
 8006324:	2301      	movs	r3, #1
 8006326:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006328:	6013      	str	r3, [r2, #0]
 800632a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800632c:	2b00      	cmp	r3, #0
 800632e:	f000 8559 	beq.w	8006de4 <_dtoa_r+0xb84>
 8006332:	4888      	ldr	r0, [pc, #544]	; (8006554 <_dtoa_r+0x2f4>)
 8006334:	6018      	str	r0, [r3, #0]
 8006336:	1e43      	subs	r3, r0, #1
 8006338:	9308      	str	r3, [sp, #32]
 800633a:	e7df      	b.n	80062fc <_dtoa_r+0x9c>
 800633c:	ab16      	add	r3, sp, #88	; 0x58
 800633e:	9301      	str	r3, [sp, #4]
 8006340:	ab17      	add	r3, sp, #92	; 0x5c
 8006342:	9300      	str	r3, [sp, #0]
 8006344:	4628      	mov	r0, r5
 8006346:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800634a:	f001 f8b7 	bl	80074bc <__d2b>
 800634e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006352:	4682      	mov	sl, r0
 8006354:	2c00      	cmp	r4, #0
 8006356:	d07e      	beq.n	8006456 <_dtoa_r+0x1f6>
 8006358:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800635c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800635e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006362:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006366:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800636a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800636e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006372:	2200      	movs	r2, #0
 8006374:	4b78      	ldr	r3, [pc, #480]	; (8006558 <_dtoa_r+0x2f8>)
 8006376:	f7f9 fef7 	bl	8000168 <__aeabi_dsub>
 800637a:	a36b      	add	r3, pc, #428	; (adr r3, 8006528 <_dtoa_r+0x2c8>)
 800637c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006380:	f7fa f8aa 	bl	80004d8 <__aeabi_dmul>
 8006384:	a36a      	add	r3, pc, #424	; (adr r3, 8006530 <_dtoa_r+0x2d0>)
 8006386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800638a:	f7f9 feef 	bl	800016c <__adddf3>
 800638e:	4606      	mov	r6, r0
 8006390:	4620      	mov	r0, r4
 8006392:	460f      	mov	r7, r1
 8006394:	f7fa f836 	bl	8000404 <__aeabi_i2d>
 8006398:	a367      	add	r3, pc, #412	; (adr r3, 8006538 <_dtoa_r+0x2d8>)
 800639a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800639e:	f7fa f89b 	bl	80004d8 <__aeabi_dmul>
 80063a2:	4602      	mov	r2, r0
 80063a4:	460b      	mov	r3, r1
 80063a6:	4630      	mov	r0, r6
 80063a8:	4639      	mov	r1, r7
 80063aa:	f7f9 fedf 	bl	800016c <__adddf3>
 80063ae:	4606      	mov	r6, r0
 80063b0:	460f      	mov	r7, r1
 80063b2:	f7fa fb41 	bl	8000a38 <__aeabi_d2iz>
 80063b6:	2200      	movs	r2, #0
 80063b8:	4681      	mov	r9, r0
 80063ba:	2300      	movs	r3, #0
 80063bc:	4630      	mov	r0, r6
 80063be:	4639      	mov	r1, r7
 80063c0:	f7fa fafc 	bl	80009bc <__aeabi_dcmplt>
 80063c4:	b148      	cbz	r0, 80063da <_dtoa_r+0x17a>
 80063c6:	4648      	mov	r0, r9
 80063c8:	f7fa f81c 	bl	8000404 <__aeabi_i2d>
 80063cc:	4632      	mov	r2, r6
 80063ce:	463b      	mov	r3, r7
 80063d0:	f7fa faea 	bl	80009a8 <__aeabi_dcmpeq>
 80063d4:	b908      	cbnz	r0, 80063da <_dtoa_r+0x17a>
 80063d6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80063da:	f1b9 0f16 	cmp.w	r9, #22
 80063de:	d857      	bhi.n	8006490 <_dtoa_r+0x230>
 80063e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80063e4:	4b5d      	ldr	r3, [pc, #372]	; (800655c <_dtoa_r+0x2fc>)
 80063e6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80063ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ee:	f7fa fae5 	bl	80009bc <__aeabi_dcmplt>
 80063f2:	2800      	cmp	r0, #0
 80063f4:	d04e      	beq.n	8006494 <_dtoa_r+0x234>
 80063f6:	2300      	movs	r3, #0
 80063f8:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80063fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80063fe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006400:	1b1c      	subs	r4, r3, r4
 8006402:	1e63      	subs	r3, r4, #1
 8006404:	9309      	str	r3, [sp, #36]	; 0x24
 8006406:	bf49      	itett	mi
 8006408:	f1c4 0301 	rsbmi	r3, r4, #1
 800640c:	2300      	movpl	r3, #0
 800640e:	9306      	strmi	r3, [sp, #24]
 8006410:	2300      	movmi	r3, #0
 8006412:	bf54      	ite	pl
 8006414:	9306      	strpl	r3, [sp, #24]
 8006416:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006418:	f1b9 0f00 	cmp.w	r9, #0
 800641c:	db3c      	blt.n	8006498 <_dtoa_r+0x238>
 800641e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006420:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006424:	444b      	add	r3, r9
 8006426:	9309      	str	r3, [sp, #36]	; 0x24
 8006428:	2300      	movs	r3, #0
 800642a:	930a      	str	r3, [sp, #40]	; 0x28
 800642c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800642e:	2b09      	cmp	r3, #9
 8006430:	d86c      	bhi.n	800650c <_dtoa_r+0x2ac>
 8006432:	2b05      	cmp	r3, #5
 8006434:	bfc4      	itt	gt
 8006436:	3b04      	subgt	r3, #4
 8006438:	9322      	strgt	r3, [sp, #136]	; 0x88
 800643a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800643c:	bfc8      	it	gt
 800643e:	2400      	movgt	r4, #0
 8006440:	f1a3 0302 	sub.w	r3, r3, #2
 8006444:	bfd8      	it	le
 8006446:	2401      	movle	r4, #1
 8006448:	2b03      	cmp	r3, #3
 800644a:	f200 808b 	bhi.w	8006564 <_dtoa_r+0x304>
 800644e:	e8df f003 	tbb	[pc, r3]
 8006452:	4f2d      	.short	0x4f2d
 8006454:	5b4d      	.short	0x5b4d
 8006456:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800645a:	441c      	add	r4, r3
 800645c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006460:	2b20      	cmp	r3, #32
 8006462:	bfc3      	ittte	gt
 8006464:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006468:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800646c:	fa09 f303 	lslgt.w	r3, r9, r3
 8006470:	f1c3 0320 	rsble	r3, r3, #32
 8006474:	bfc6      	itte	gt
 8006476:	fa26 f000 	lsrgt.w	r0, r6, r0
 800647a:	4318      	orrgt	r0, r3
 800647c:	fa06 f003 	lslle.w	r0, r6, r3
 8006480:	f7f9 ffb0 	bl	80003e4 <__aeabi_ui2d>
 8006484:	2301      	movs	r3, #1
 8006486:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800648a:	3c01      	subs	r4, #1
 800648c:	9313      	str	r3, [sp, #76]	; 0x4c
 800648e:	e770      	b.n	8006372 <_dtoa_r+0x112>
 8006490:	2301      	movs	r3, #1
 8006492:	e7b3      	b.n	80063fc <_dtoa_r+0x19c>
 8006494:	900f      	str	r0, [sp, #60]	; 0x3c
 8006496:	e7b2      	b.n	80063fe <_dtoa_r+0x19e>
 8006498:	9b06      	ldr	r3, [sp, #24]
 800649a:	eba3 0309 	sub.w	r3, r3, r9
 800649e:	9306      	str	r3, [sp, #24]
 80064a0:	f1c9 0300 	rsb	r3, r9, #0
 80064a4:	930a      	str	r3, [sp, #40]	; 0x28
 80064a6:	2300      	movs	r3, #0
 80064a8:	930e      	str	r3, [sp, #56]	; 0x38
 80064aa:	e7bf      	b.n	800642c <_dtoa_r+0x1cc>
 80064ac:	2300      	movs	r3, #0
 80064ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80064b0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	dc59      	bgt.n	800656a <_dtoa_r+0x30a>
 80064b6:	f04f 0b01 	mov.w	fp, #1
 80064ba:	465b      	mov	r3, fp
 80064bc:	f8cd b008 	str.w	fp, [sp, #8]
 80064c0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80064c4:	2200      	movs	r2, #0
 80064c6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80064c8:	6042      	str	r2, [r0, #4]
 80064ca:	2204      	movs	r2, #4
 80064cc:	f102 0614 	add.w	r6, r2, #20
 80064d0:	429e      	cmp	r6, r3
 80064d2:	6841      	ldr	r1, [r0, #4]
 80064d4:	d94f      	bls.n	8006576 <_dtoa_r+0x316>
 80064d6:	4628      	mov	r0, r5
 80064d8:	f000 fcca 	bl	8006e70 <_Balloc>
 80064dc:	9008      	str	r0, [sp, #32]
 80064de:	2800      	cmp	r0, #0
 80064e0:	d14d      	bne.n	800657e <_dtoa_r+0x31e>
 80064e2:	4602      	mov	r2, r0
 80064e4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80064e8:	4b1d      	ldr	r3, [pc, #116]	; (8006560 <_dtoa_r+0x300>)
 80064ea:	e6cd      	b.n	8006288 <_dtoa_r+0x28>
 80064ec:	2301      	movs	r3, #1
 80064ee:	e7de      	b.n	80064ae <_dtoa_r+0x24e>
 80064f0:	2300      	movs	r3, #0
 80064f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80064f4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80064f6:	eb09 0b03 	add.w	fp, r9, r3
 80064fa:	f10b 0301 	add.w	r3, fp, #1
 80064fe:	2b01      	cmp	r3, #1
 8006500:	9302      	str	r3, [sp, #8]
 8006502:	bfb8      	it	lt
 8006504:	2301      	movlt	r3, #1
 8006506:	e7dd      	b.n	80064c4 <_dtoa_r+0x264>
 8006508:	2301      	movs	r3, #1
 800650a:	e7f2      	b.n	80064f2 <_dtoa_r+0x292>
 800650c:	2401      	movs	r4, #1
 800650e:	2300      	movs	r3, #0
 8006510:	940b      	str	r4, [sp, #44]	; 0x2c
 8006512:	9322      	str	r3, [sp, #136]	; 0x88
 8006514:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8006518:	2200      	movs	r2, #0
 800651a:	2312      	movs	r3, #18
 800651c:	f8cd b008 	str.w	fp, [sp, #8]
 8006520:	9223      	str	r2, [sp, #140]	; 0x8c
 8006522:	e7cf      	b.n	80064c4 <_dtoa_r+0x264>
 8006524:	f3af 8000 	nop.w
 8006528:	636f4361 	.word	0x636f4361
 800652c:	3fd287a7 	.word	0x3fd287a7
 8006530:	8b60c8b3 	.word	0x8b60c8b3
 8006534:	3fc68a28 	.word	0x3fc68a28
 8006538:	509f79fb 	.word	0x509f79fb
 800653c:	3fd34413 	.word	0x3fd34413
 8006540:	0800b7d1 	.word	0x0800b7d1
 8006544:	0800b7e8 	.word	0x0800b7e8
 8006548:	7ff00000 	.word	0x7ff00000
 800654c:	0800b7cd 	.word	0x0800b7cd
 8006550:	0800b7c4 	.word	0x0800b7c4
 8006554:	0800b7a1 	.word	0x0800b7a1
 8006558:	3ff80000 	.word	0x3ff80000
 800655c:	0800b8e0 	.word	0x0800b8e0
 8006560:	0800b847 	.word	0x0800b847
 8006564:	2301      	movs	r3, #1
 8006566:	930b      	str	r3, [sp, #44]	; 0x2c
 8006568:	e7d4      	b.n	8006514 <_dtoa_r+0x2b4>
 800656a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800656e:	465b      	mov	r3, fp
 8006570:	f8cd b008 	str.w	fp, [sp, #8]
 8006574:	e7a6      	b.n	80064c4 <_dtoa_r+0x264>
 8006576:	3101      	adds	r1, #1
 8006578:	6041      	str	r1, [r0, #4]
 800657a:	0052      	lsls	r2, r2, #1
 800657c:	e7a6      	b.n	80064cc <_dtoa_r+0x26c>
 800657e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006580:	9a08      	ldr	r2, [sp, #32]
 8006582:	601a      	str	r2, [r3, #0]
 8006584:	9b02      	ldr	r3, [sp, #8]
 8006586:	2b0e      	cmp	r3, #14
 8006588:	f200 80a8 	bhi.w	80066dc <_dtoa_r+0x47c>
 800658c:	2c00      	cmp	r4, #0
 800658e:	f000 80a5 	beq.w	80066dc <_dtoa_r+0x47c>
 8006592:	f1b9 0f00 	cmp.w	r9, #0
 8006596:	dd34      	ble.n	8006602 <_dtoa_r+0x3a2>
 8006598:	4a9a      	ldr	r2, [pc, #616]	; (8006804 <_dtoa_r+0x5a4>)
 800659a:	f009 030f 	and.w	r3, r9, #15
 800659e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80065a2:	f419 7f80 	tst.w	r9, #256	; 0x100
 80065a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80065aa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80065ae:	ea4f 1429 	mov.w	r4, r9, asr #4
 80065b2:	d016      	beq.n	80065e2 <_dtoa_r+0x382>
 80065b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80065b8:	4b93      	ldr	r3, [pc, #588]	; (8006808 <_dtoa_r+0x5a8>)
 80065ba:	2703      	movs	r7, #3
 80065bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80065c0:	f7fa f8b4 	bl	800072c <__aeabi_ddiv>
 80065c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80065c8:	f004 040f 	and.w	r4, r4, #15
 80065cc:	4e8e      	ldr	r6, [pc, #568]	; (8006808 <_dtoa_r+0x5a8>)
 80065ce:	b954      	cbnz	r4, 80065e6 <_dtoa_r+0x386>
 80065d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80065d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80065d8:	f7fa f8a8 	bl	800072c <__aeabi_ddiv>
 80065dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80065e0:	e029      	b.n	8006636 <_dtoa_r+0x3d6>
 80065e2:	2702      	movs	r7, #2
 80065e4:	e7f2      	b.n	80065cc <_dtoa_r+0x36c>
 80065e6:	07e1      	lsls	r1, r4, #31
 80065e8:	d508      	bpl.n	80065fc <_dtoa_r+0x39c>
 80065ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80065ee:	e9d6 2300 	ldrd	r2, r3, [r6]
 80065f2:	f7f9 ff71 	bl	80004d8 <__aeabi_dmul>
 80065f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80065fa:	3701      	adds	r7, #1
 80065fc:	1064      	asrs	r4, r4, #1
 80065fe:	3608      	adds	r6, #8
 8006600:	e7e5      	b.n	80065ce <_dtoa_r+0x36e>
 8006602:	f000 80a5 	beq.w	8006750 <_dtoa_r+0x4f0>
 8006606:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800660a:	f1c9 0400 	rsb	r4, r9, #0
 800660e:	4b7d      	ldr	r3, [pc, #500]	; (8006804 <_dtoa_r+0x5a4>)
 8006610:	f004 020f 	and.w	r2, r4, #15
 8006614:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800661c:	f7f9 ff5c 	bl	80004d8 <__aeabi_dmul>
 8006620:	2702      	movs	r7, #2
 8006622:	2300      	movs	r3, #0
 8006624:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006628:	4e77      	ldr	r6, [pc, #476]	; (8006808 <_dtoa_r+0x5a8>)
 800662a:	1124      	asrs	r4, r4, #4
 800662c:	2c00      	cmp	r4, #0
 800662e:	f040 8084 	bne.w	800673a <_dtoa_r+0x4da>
 8006632:	2b00      	cmp	r3, #0
 8006634:	d1d2      	bne.n	80065dc <_dtoa_r+0x37c>
 8006636:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006638:	2b00      	cmp	r3, #0
 800663a:	f000 808b 	beq.w	8006754 <_dtoa_r+0x4f4>
 800663e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006642:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006646:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800664a:	2200      	movs	r2, #0
 800664c:	4b6f      	ldr	r3, [pc, #444]	; (800680c <_dtoa_r+0x5ac>)
 800664e:	f7fa f9b5 	bl	80009bc <__aeabi_dcmplt>
 8006652:	2800      	cmp	r0, #0
 8006654:	d07e      	beq.n	8006754 <_dtoa_r+0x4f4>
 8006656:	9b02      	ldr	r3, [sp, #8]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d07b      	beq.n	8006754 <_dtoa_r+0x4f4>
 800665c:	f1bb 0f00 	cmp.w	fp, #0
 8006660:	dd38      	ble.n	80066d4 <_dtoa_r+0x474>
 8006662:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006666:	2200      	movs	r2, #0
 8006668:	4b69      	ldr	r3, [pc, #420]	; (8006810 <_dtoa_r+0x5b0>)
 800666a:	f7f9 ff35 	bl	80004d8 <__aeabi_dmul>
 800666e:	465c      	mov	r4, fp
 8006670:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006674:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
 8006678:	3701      	adds	r7, #1
 800667a:	4638      	mov	r0, r7
 800667c:	f7f9 fec2 	bl	8000404 <__aeabi_i2d>
 8006680:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006684:	f7f9 ff28 	bl	80004d8 <__aeabi_dmul>
 8006688:	2200      	movs	r2, #0
 800668a:	4b62      	ldr	r3, [pc, #392]	; (8006814 <_dtoa_r+0x5b4>)
 800668c:	f7f9 fd6e 	bl	800016c <__adddf3>
 8006690:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006694:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006698:	9611      	str	r6, [sp, #68]	; 0x44
 800669a:	2c00      	cmp	r4, #0
 800669c:	d15d      	bne.n	800675a <_dtoa_r+0x4fa>
 800669e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066a2:	2200      	movs	r2, #0
 80066a4:	4b5c      	ldr	r3, [pc, #368]	; (8006818 <_dtoa_r+0x5b8>)
 80066a6:	f7f9 fd5f 	bl	8000168 <__aeabi_dsub>
 80066aa:	4602      	mov	r2, r0
 80066ac:	460b      	mov	r3, r1
 80066ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80066b2:	4633      	mov	r3, r6
 80066b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80066b6:	f7fa f99f 	bl	80009f8 <__aeabi_dcmpgt>
 80066ba:	2800      	cmp	r0, #0
 80066bc:	f040 829e 	bne.w	8006bfc <_dtoa_r+0x99c>
 80066c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80066c6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80066ca:	f7fa f977 	bl	80009bc <__aeabi_dcmplt>
 80066ce:	2800      	cmp	r0, #0
 80066d0:	f040 8292 	bne.w	8006bf8 <_dtoa_r+0x998>
 80066d4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80066d8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80066dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80066de:	2b00      	cmp	r3, #0
 80066e0:	f2c0 8153 	blt.w	800698a <_dtoa_r+0x72a>
 80066e4:	f1b9 0f0e 	cmp.w	r9, #14
 80066e8:	f300 814f 	bgt.w	800698a <_dtoa_r+0x72a>
 80066ec:	4b45      	ldr	r3, [pc, #276]	; (8006804 <_dtoa_r+0x5a4>)
 80066ee:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80066f2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80066f6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80066fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f280 80db 	bge.w	80068b8 <_dtoa_r+0x658>
 8006702:	9b02      	ldr	r3, [sp, #8]
 8006704:	2b00      	cmp	r3, #0
 8006706:	f300 80d7 	bgt.w	80068b8 <_dtoa_r+0x658>
 800670a:	f040 8274 	bne.w	8006bf6 <_dtoa_r+0x996>
 800670e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006712:	2200      	movs	r2, #0
 8006714:	4b40      	ldr	r3, [pc, #256]	; (8006818 <_dtoa_r+0x5b8>)
 8006716:	f7f9 fedf 	bl	80004d8 <__aeabi_dmul>
 800671a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800671e:	f7fa f961 	bl	80009e4 <__aeabi_dcmpge>
 8006722:	9c02      	ldr	r4, [sp, #8]
 8006724:	4626      	mov	r6, r4
 8006726:	2800      	cmp	r0, #0
 8006728:	f040 824a 	bne.w	8006bc0 <_dtoa_r+0x960>
 800672c:	2331      	movs	r3, #49	; 0x31
 800672e:	9f08      	ldr	r7, [sp, #32]
 8006730:	f109 0901 	add.w	r9, r9, #1
 8006734:	f807 3b01 	strb.w	r3, [r7], #1
 8006738:	e246      	b.n	8006bc8 <_dtoa_r+0x968>
 800673a:	07e2      	lsls	r2, r4, #31
 800673c:	d505      	bpl.n	800674a <_dtoa_r+0x4ea>
 800673e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006742:	f7f9 fec9 	bl	80004d8 <__aeabi_dmul>
 8006746:	2301      	movs	r3, #1
 8006748:	3701      	adds	r7, #1
 800674a:	1064      	asrs	r4, r4, #1
 800674c:	3608      	adds	r6, #8
 800674e:	e76d      	b.n	800662c <_dtoa_r+0x3cc>
 8006750:	2702      	movs	r7, #2
 8006752:	e770      	b.n	8006636 <_dtoa_r+0x3d6>
 8006754:	46c8      	mov	r8, r9
 8006756:	9c02      	ldr	r4, [sp, #8]
 8006758:	e78f      	b.n	800667a <_dtoa_r+0x41a>
 800675a:	9908      	ldr	r1, [sp, #32]
 800675c:	4b29      	ldr	r3, [pc, #164]	; (8006804 <_dtoa_r+0x5a4>)
 800675e:	4421      	add	r1, r4
 8006760:	9112      	str	r1, [sp, #72]	; 0x48
 8006762:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006764:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006768:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800676c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006770:	2900      	cmp	r1, #0
 8006772:	d055      	beq.n	8006820 <_dtoa_r+0x5c0>
 8006774:	2000      	movs	r0, #0
 8006776:	4929      	ldr	r1, [pc, #164]	; (800681c <_dtoa_r+0x5bc>)
 8006778:	f7f9 ffd8 	bl	800072c <__aeabi_ddiv>
 800677c:	463b      	mov	r3, r7
 800677e:	4632      	mov	r2, r6
 8006780:	f7f9 fcf2 	bl	8000168 <__aeabi_dsub>
 8006784:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006788:	9f08      	ldr	r7, [sp, #32]
 800678a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800678e:	f7fa f953 	bl	8000a38 <__aeabi_d2iz>
 8006792:	4604      	mov	r4, r0
 8006794:	f7f9 fe36 	bl	8000404 <__aeabi_i2d>
 8006798:	4602      	mov	r2, r0
 800679a:	460b      	mov	r3, r1
 800679c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067a0:	f7f9 fce2 	bl	8000168 <__aeabi_dsub>
 80067a4:	4602      	mov	r2, r0
 80067a6:	460b      	mov	r3, r1
 80067a8:	3430      	adds	r4, #48	; 0x30
 80067aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80067ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80067b2:	f807 4b01 	strb.w	r4, [r7], #1
 80067b6:	f7fa f901 	bl	80009bc <__aeabi_dcmplt>
 80067ba:	2800      	cmp	r0, #0
 80067bc:	d174      	bne.n	80068a8 <_dtoa_r+0x648>
 80067be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067c2:	2000      	movs	r0, #0
 80067c4:	4911      	ldr	r1, [pc, #68]	; (800680c <_dtoa_r+0x5ac>)
 80067c6:	f7f9 fccf 	bl	8000168 <__aeabi_dsub>
 80067ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80067ce:	f7fa f8f5 	bl	80009bc <__aeabi_dcmplt>
 80067d2:	2800      	cmp	r0, #0
 80067d4:	f040 80b6 	bne.w	8006944 <_dtoa_r+0x6e4>
 80067d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80067da:	429f      	cmp	r7, r3
 80067dc:	f43f af7a 	beq.w	80066d4 <_dtoa_r+0x474>
 80067e0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80067e4:	2200      	movs	r2, #0
 80067e6:	4b0a      	ldr	r3, [pc, #40]	; (8006810 <_dtoa_r+0x5b0>)
 80067e8:	f7f9 fe76 	bl	80004d8 <__aeabi_dmul>
 80067ec:	2200      	movs	r2, #0
 80067ee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80067f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067f6:	4b06      	ldr	r3, [pc, #24]	; (8006810 <_dtoa_r+0x5b0>)
 80067f8:	f7f9 fe6e 	bl	80004d8 <__aeabi_dmul>
 80067fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006800:	e7c3      	b.n	800678a <_dtoa_r+0x52a>
 8006802:	bf00      	nop
 8006804:	0800b8e0 	.word	0x0800b8e0
 8006808:	0800b8b8 	.word	0x0800b8b8
 800680c:	3ff00000 	.word	0x3ff00000
 8006810:	40240000 	.word	0x40240000
 8006814:	401c0000 	.word	0x401c0000
 8006818:	40140000 	.word	0x40140000
 800681c:	3fe00000 	.word	0x3fe00000
 8006820:	4630      	mov	r0, r6
 8006822:	4639      	mov	r1, r7
 8006824:	f7f9 fe58 	bl	80004d8 <__aeabi_dmul>
 8006828:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800682a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800682e:	9c08      	ldr	r4, [sp, #32]
 8006830:	9314      	str	r3, [sp, #80]	; 0x50
 8006832:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006836:	f7fa f8ff 	bl	8000a38 <__aeabi_d2iz>
 800683a:	9015      	str	r0, [sp, #84]	; 0x54
 800683c:	f7f9 fde2 	bl	8000404 <__aeabi_i2d>
 8006840:	4602      	mov	r2, r0
 8006842:	460b      	mov	r3, r1
 8006844:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006848:	f7f9 fc8e 	bl	8000168 <__aeabi_dsub>
 800684c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800684e:	4606      	mov	r6, r0
 8006850:	3330      	adds	r3, #48	; 0x30
 8006852:	f804 3b01 	strb.w	r3, [r4], #1
 8006856:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006858:	460f      	mov	r7, r1
 800685a:	429c      	cmp	r4, r3
 800685c:	f04f 0200 	mov.w	r2, #0
 8006860:	d124      	bne.n	80068ac <_dtoa_r+0x64c>
 8006862:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006866:	4bb3      	ldr	r3, [pc, #716]	; (8006b34 <_dtoa_r+0x8d4>)
 8006868:	f7f9 fc80 	bl	800016c <__adddf3>
 800686c:	4602      	mov	r2, r0
 800686e:	460b      	mov	r3, r1
 8006870:	4630      	mov	r0, r6
 8006872:	4639      	mov	r1, r7
 8006874:	f7fa f8c0 	bl	80009f8 <__aeabi_dcmpgt>
 8006878:	2800      	cmp	r0, #0
 800687a:	d162      	bne.n	8006942 <_dtoa_r+0x6e2>
 800687c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006880:	2000      	movs	r0, #0
 8006882:	49ac      	ldr	r1, [pc, #688]	; (8006b34 <_dtoa_r+0x8d4>)
 8006884:	f7f9 fc70 	bl	8000168 <__aeabi_dsub>
 8006888:	4602      	mov	r2, r0
 800688a:	460b      	mov	r3, r1
 800688c:	4630      	mov	r0, r6
 800688e:	4639      	mov	r1, r7
 8006890:	f7fa f894 	bl	80009bc <__aeabi_dcmplt>
 8006894:	2800      	cmp	r0, #0
 8006896:	f43f af1d 	beq.w	80066d4 <_dtoa_r+0x474>
 800689a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800689c:	1e7b      	subs	r3, r7, #1
 800689e:	9314      	str	r3, [sp, #80]	; 0x50
 80068a0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80068a4:	2b30      	cmp	r3, #48	; 0x30
 80068a6:	d0f8      	beq.n	800689a <_dtoa_r+0x63a>
 80068a8:	46c1      	mov	r9, r8
 80068aa:	e03a      	b.n	8006922 <_dtoa_r+0x6c2>
 80068ac:	4ba2      	ldr	r3, [pc, #648]	; (8006b38 <_dtoa_r+0x8d8>)
 80068ae:	f7f9 fe13 	bl	80004d8 <__aeabi_dmul>
 80068b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80068b6:	e7bc      	b.n	8006832 <_dtoa_r+0x5d2>
 80068b8:	9f08      	ldr	r7, [sp, #32]
 80068ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80068be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068c2:	f7f9 ff33 	bl	800072c <__aeabi_ddiv>
 80068c6:	f7fa f8b7 	bl	8000a38 <__aeabi_d2iz>
 80068ca:	4604      	mov	r4, r0
 80068cc:	f7f9 fd9a 	bl	8000404 <__aeabi_i2d>
 80068d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80068d4:	f7f9 fe00 	bl	80004d8 <__aeabi_dmul>
 80068d8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80068dc:	460b      	mov	r3, r1
 80068de:	4602      	mov	r2, r0
 80068e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068e4:	f7f9 fc40 	bl	8000168 <__aeabi_dsub>
 80068e8:	f807 6b01 	strb.w	r6, [r7], #1
 80068ec:	9e08      	ldr	r6, [sp, #32]
 80068ee:	9b02      	ldr	r3, [sp, #8]
 80068f0:	1bbe      	subs	r6, r7, r6
 80068f2:	42b3      	cmp	r3, r6
 80068f4:	d13a      	bne.n	800696c <_dtoa_r+0x70c>
 80068f6:	4602      	mov	r2, r0
 80068f8:	460b      	mov	r3, r1
 80068fa:	f7f9 fc37 	bl	800016c <__adddf3>
 80068fe:	4602      	mov	r2, r0
 8006900:	460b      	mov	r3, r1
 8006902:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006906:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800690a:	f7fa f875 	bl	80009f8 <__aeabi_dcmpgt>
 800690e:	bb58      	cbnz	r0, 8006968 <_dtoa_r+0x708>
 8006910:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006914:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006918:	f7fa f846 	bl	80009a8 <__aeabi_dcmpeq>
 800691c:	b108      	cbz	r0, 8006922 <_dtoa_r+0x6c2>
 800691e:	07e1      	lsls	r1, r4, #31
 8006920:	d422      	bmi.n	8006968 <_dtoa_r+0x708>
 8006922:	4628      	mov	r0, r5
 8006924:	4651      	mov	r1, sl
 8006926:	f000 fae3 	bl	8006ef0 <_Bfree>
 800692a:	2300      	movs	r3, #0
 800692c:	703b      	strb	r3, [r7, #0]
 800692e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006930:	f109 0001 	add.w	r0, r9, #1
 8006934:	6018      	str	r0, [r3, #0]
 8006936:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006938:	2b00      	cmp	r3, #0
 800693a:	f43f acdf 	beq.w	80062fc <_dtoa_r+0x9c>
 800693e:	601f      	str	r7, [r3, #0]
 8006940:	e4dc      	b.n	80062fc <_dtoa_r+0x9c>
 8006942:	4627      	mov	r7, r4
 8006944:	463b      	mov	r3, r7
 8006946:	461f      	mov	r7, r3
 8006948:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800694c:	2a39      	cmp	r2, #57	; 0x39
 800694e:	d107      	bne.n	8006960 <_dtoa_r+0x700>
 8006950:	9a08      	ldr	r2, [sp, #32]
 8006952:	429a      	cmp	r2, r3
 8006954:	d1f7      	bne.n	8006946 <_dtoa_r+0x6e6>
 8006956:	2230      	movs	r2, #48	; 0x30
 8006958:	9908      	ldr	r1, [sp, #32]
 800695a:	f108 0801 	add.w	r8, r8, #1
 800695e:	700a      	strb	r2, [r1, #0]
 8006960:	781a      	ldrb	r2, [r3, #0]
 8006962:	3201      	adds	r2, #1
 8006964:	701a      	strb	r2, [r3, #0]
 8006966:	e79f      	b.n	80068a8 <_dtoa_r+0x648>
 8006968:	46c8      	mov	r8, r9
 800696a:	e7eb      	b.n	8006944 <_dtoa_r+0x6e4>
 800696c:	2200      	movs	r2, #0
 800696e:	4b72      	ldr	r3, [pc, #456]	; (8006b38 <_dtoa_r+0x8d8>)
 8006970:	f7f9 fdb2 	bl	80004d8 <__aeabi_dmul>
 8006974:	4602      	mov	r2, r0
 8006976:	460b      	mov	r3, r1
 8006978:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800697c:	2200      	movs	r2, #0
 800697e:	2300      	movs	r3, #0
 8006980:	f7fa f812 	bl	80009a8 <__aeabi_dcmpeq>
 8006984:	2800      	cmp	r0, #0
 8006986:	d098      	beq.n	80068ba <_dtoa_r+0x65a>
 8006988:	e7cb      	b.n	8006922 <_dtoa_r+0x6c2>
 800698a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800698c:	2a00      	cmp	r2, #0
 800698e:	f000 80cd 	beq.w	8006b2c <_dtoa_r+0x8cc>
 8006992:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006994:	2a01      	cmp	r2, #1
 8006996:	f300 80af 	bgt.w	8006af8 <_dtoa_r+0x898>
 800699a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800699c:	2a00      	cmp	r2, #0
 800699e:	f000 80a7 	beq.w	8006af0 <_dtoa_r+0x890>
 80069a2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80069a6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80069a8:	9f06      	ldr	r7, [sp, #24]
 80069aa:	9a06      	ldr	r2, [sp, #24]
 80069ac:	2101      	movs	r1, #1
 80069ae:	441a      	add	r2, r3
 80069b0:	9206      	str	r2, [sp, #24]
 80069b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069b4:	4628      	mov	r0, r5
 80069b6:	441a      	add	r2, r3
 80069b8:	9209      	str	r2, [sp, #36]	; 0x24
 80069ba:	f000 fb53 	bl	8007064 <__i2b>
 80069be:	4606      	mov	r6, r0
 80069c0:	2f00      	cmp	r7, #0
 80069c2:	dd0c      	ble.n	80069de <_dtoa_r+0x77e>
 80069c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	dd09      	ble.n	80069de <_dtoa_r+0x77e>
 80069ca:	42bb      	cmp	r3, r7
 80069cc:	bfa8      	it	ge
 80069ce:	463b      	movge	r3, r7
 80069d0:	9a06      	ldr	r2, [sp, #24]
 80069d2:	1aff      	subs	r7, r7, r3
 80069d4:	1ad2      	subs	r2, r2, r3
 80069d6:	9206      	str	r2, [sp, #24]
 80069d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069da:	1ad3      	subs	r3, r2, r3
 80069dc:	9309      	str	r3, [sp, #36]	; 0x24
 80069de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069e0:	b1f3      	cbz	r3, 8006a20 <_dtoa_r+0x7c0>
 80069e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	f000 80a9 	beq.w	8006b3c <_dtoa_r+0x8dc>
 80069ea:	2c00      	cmp	r4, #0
 80069ec:	dd10      	ble.n	8006a10 <_dtoa_r+0x7b0>
 80069ee:	4631      	mov	r1, r6
 80069f0:	4622      	mov	r2, r4
 80069f2:	4628      	mov	r0, r5
 80069f4:	f000 fbf0 	bl	80071d8 <__pow5mult>
 80069f8:	4652      	mov	r2, sl
 80069fa:	4601      	mov	r1, r0
 80069fc:	4606      	mov	r6, r0
 80069fe:	4628      	mov	r0, r5
 8006a00:	f000 fb46 	bl	8007090 <__multiply>
 8006a04:	4680      	mov	r8, r0
 8006a06:	4651      	mov	r1, sl
 8006a08:	4628      	mov	r0, r5
 8006a0a:	f000 fa71 	bl	8006ef0 <_Bfree>
 8006a0e:	46c2      	mov	sl, r8
 8006a10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a12:	1b1a      	subs	r2, r3, r4
 8006a14:	d004      	beq.n	8006a20 <_dtoa_r+0x7c0>
 8006a16:	4651      	mov	r1, sl
 8006a18:	4628      	mov	r0, r5
 8006a1a:	f000 fbdd 	bl	80071d8 <__pow5mult>
 8006a1e:	4682      	mov	sl, r0
 8006a20:	2101      	movs	r1, #1
 8006a22:	4628      	mov	r0, r5
 8006a24:	f000 fb1e 	bl	8007064 <__i2b>
 8006a28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a2a:	4604      	mov	r4, r0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	f340 8087 	ble.w	8006b40 <_dtoa_r+0x8e0>
 8006a32:	461a      	mov	r2, r3
 8006a34:	4601      	mov	r1, r0
 8006a36:	4628      	mov	r0, r5
 8006a38:	f000 fbce 	bl	80071d8 <__pow5mult>
 8006a3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a3e:	4604      	mov	r4, r0
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	f340 8080 	ble.w	8006b46 <_dtoa_r+0x8e6>
 8006a46:	f04f 0800 	mov.w	r8, #0
 8006a4a:	6923      	ldr	r3, [r4, #16]
 8006a4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006a50:	6918      	ldr	r0, [r3, #16]
 8006a52:	f000 fab9 	bl	8006fc8 <__hi0bits>
 8006a56:	f1c0 0020 	rsb	r0, r0, #32
 8006a5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a5c:	4418      	add	r0, r3
 8006a5e:	f010 001f 	ands.w	r0, r0, #31
 8006a62:	f000 8092 	beq.w	8006b8a <_dtoa_r+0x92a>
 8006a66:	f1c0 0320 	rsb	r3, r0, #32
 8006a6a:	2b04      	cmp	r3, #4
 8006a6c:	f340 808a 	ble.w	8006b84 <_dtoa_r+0x924>
 8006a70:	f1c0 001c 	rsb	r0, r0, #28
 8006a74:	9b06      	ldr	r3, [sp, #24]
 8006a76:	4407      	add	r7, r0
 8006a78:	4403      	add	r3, r0
 8006a7a:	9306      	str	r3, [sp, #24]
 8006a7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a7e:	4403      	add	r3, r0
 8006a80:	9309      	str	r3, [sp, #36]	; 0x24
 8006a82:	9b06      	ldr	r3, [sp, #24]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	dd05      	ble.n	8006a94 <_dtoa_r+0x834>
 8006a88:	4651      	mov	r1, sl
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	4628      	mov	r0, r5
 8006a8e:	f000 fbfd 	bl	800728c <__lshift>
 8006a92:	4682      	mov	sl, r0
 8006a94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	dd05      	ble.n	8006aa6 <_dtoa_r+0x846>
 8006a9a:	4621      	mov	r1, r4
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	4628      	mov	r0, r5
 8006aa0:	f000 fbf4 	bl	800728c <__lshift>
 8006aa4:	4604      	mov	r4, r0
 8006aa6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d070      	beq.n	8006b8e <_dtoa_r+0x92e>
 8006aac:	4621      	mov	r1, r4
 8006aae:	4650      	mov	r0, sl
 8006ab0:	f000 fc58 	bl	8007364 <__mcmp>
 8006ab4:	2800      	cmp	r0, #0
 8006ab6:	da6a      	bge.n	8006b8e <_dtoa_r+0x92e>
 8006ab8:	2300      	movs	r3, #0
 8006aba:	4651      	mov	r1, sl
 8006abc:	220a      	movs	r2, #10
 8006abe:	4628      	mov	r0, r5
 8006ac0:	f000 fa38 	bl	8006f34 <__multadd>
 8006ac4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ac6:	4682      	mov	sl, r0
 8006ac8:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	f000 8193 	beq.w	8006df8 <_dtoa_r+0xb98>
 8006ad2:	4631      	mov	r1, r6
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	220a      	movs	r2, #10
 8006ad8:	4628      	mov	r0, r5
 8006ada:	f000 fa2b 	bl	8006f34 <__multadd>
 8006ade:	f1bb 0f00 	cmp.w	fp, #0
 8006ae2:	4606      	mov	r6, r0
 8006ae4:	f300 8093 	bgt.w	8006c0e <_dtoa_r+0x9ae>
 8006ae8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006aea:	2b02      	cmp	r3, #2
 8006aec:	dc57      	bgt.n	8006b9e <_dtoa_r+0x93e>
 8006aee:	e08e      	b.n	8006c0e <_dtoa_r+0x9ae>
 8006af0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006af2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006af6:	e756      	b.n	80069a6 <_dtoa_r+0x746>
 8006af8:	9b02      	ldr	r3, [sp, #8]
 8006afa:	1e5c      	subs	r4, r3, #1
 8006afc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006afe:	42a3      	cmp	r3, r4
 8006b00:	bfb7      	itett	lt
 8006b02:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006b04:	1b1c      	subge	r4, r3, r4
 8006b06:	1ae2      	sublt	r2, r4, r3
 8006b08:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006b0a:	bfbe      	ittt	lt
 8006b0c:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006b0e:	189b      	addlt	r3, r3, r2
 8006b10:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006b12:	9b02      	ldr	r3, [sp, #8]
 8006b14:	bfb8      	it	lt
 8006b16:	2400      	movlt	r4, #0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	bfbb      	ittet	lt
 8006b1c:	9b06      	ldrlt	r3, [sp, #24]
 8006b1e:	9a02      	ldrlt	r2, [sp, #8]
 8006b20:	9f06      	ldrge	r7, [sp, #24]
 8006b22:	1a9f      	sublt	r7, r3, r2
 8006b24:	bfac      	ite	ge
 8006b26:	9b02      	ldrge	r3, [sp, #8]
 8006b28:	2300      	movlt	r3, #0
 8006b2a:	e73e      	b.n	80069aa <_dtoa_r+0x74a>
 8006b2c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006b2e:	9f06      	ldr	r7, [sp, #24]
 8006b30:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006b32:	e745      	b.n	80069c0 <_dtoa_r+0x760>
 8006b34:	3fe00000 	.word	0x3fe00000
 8006b38:	40240000 	.word	0x40240000
 8006b3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b3e:	e76a      	b.n	8006a16 <_dtoa_r+0x7b6>
 8006b40:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	dc19      	bgt.n	8006b7a <_dtoa_r+0x91a>
 8006b46:	9b04      	ldr	r3, [sp, #16]
 8006b48:	b9bb      	cbnz	r3, 8006b7a <_dtoa_r+0x91a>
 8006b4a:	9b05      	ldr	r3, [sp, #20]
 8006b4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b50:	b99b      	cbnz	r3, 8006b7a <_dtoa_r+0x91a>
 8006b52:	9b05      	ldr	r3, [sp, #20]
 8006b54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b58:	0d1b      	lsrs	r3, r3, #20
 8006b5a:	051b      	lsls	r3, r3, #20
 8006b5c:	b183      	cbz	r3, 8006b80 <_dtoa_r+0x920>
 8006b5e:	f04f 0801 	mov.w	r8, #1
 8006b62:	9b06      	ldr	r3, [sp, #24]
 8006b64:	3301      	adds	r3, #1
 8006b66:	9306      	str	r3, [sp, #24]
 8006b68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	9309      	str	r3, [sp, #36]	; 0x24
 8006b6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	f47f af6a 	bne.w	8006a4a <_dtoa_r+0x7ea>
 8006b76:	2001      	movs	r0, #1
 8006b78:	e76f      	b.n	8006a5a <_dtoa_r+0x7fa>
 8006b7a:	f04f 0800 	mov.w	r8, #0
 8006b7e:	e7f6      	b.n	8006b6e <_dtoa_r+0x90e>
 8006b80:	4698      	mov	r8, r3
 8006b82:	e7f4      	b.n	8006b6e <_dtoa_r+0x90e>
 8006b84:	f43f af7d 	beq.w	8006a82 <_dtoa_r+0x822>
 8006b88:	4618      	mov	r0, r3
 8006b8a:	301c      	adds	r0, #28
 8006b8c:	e772      	b.n	8006a74 <_dtoa_r+0x814>
 8006b8e:	9b02      	ldr	r3, [sp, #8]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	dc36      	bgt.n	8006c02 <_dtoa_r+0x9a2>
 8006b94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b96:	2b02      	cmp	r3, #2
 8006b98:	dd33      	ble.n	8006c02 <_dtoa_r+0x9a2>
 8006b9a:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006b9e:	f1bb 0f00 	cmp.w	fp, #0
 8006ba2:	d10d      	bne.n	8006bc0 <_dtoa_r+0x960>
 8006ba4:	4621      	mov	r1, r4
 8006ba6:	465b      	mov	r3, fp
 8006ba8:	2205      	movs	r2, #5
 8006baa:	4628      	mov	r0, r5
 8006bac:	f000 f9c2 	bl	8006f34 <__multadd>
 8006bb0:	4601      	mov	r1, r0
 8006bb2:	4604      	mov	r4, r0
 8006bb4:	4650      	mov	r0, sl
 8006bb6:	f000 fbd5 	bl	8007364 <__mcmp>
 8006bba:	2800      	cmp	r0, #0
 8006bbc:	f73f adb6 	bgt.w	800672c <_dtoa_r+0x4cc>
 8006bc0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006bc2:	9f08      	ldr	r7, [sp, #32]
 8006bc4:	ea6f 0903 	mvn.w	r9, r3
 8006bc8:	f04f 0800 	mov.w	r8, #0
 8006bcc:	4621      	mov	r1, r4
 8006bce:	4628      	mov	r0, r5
 8006bd0:	f000 f98e 	bl	8006ef0 <_Bfree>
 8006bd4:	2e00      	cmp	r6, #0
 8006bd6:	f43f aea4 	beq.w	8006922 <_dtoa_r+0x6c2>
 8006bda:	f1b8 0f00 	cmp.w	r8, #0
 8006bde:	d005      	beq.n	8006bec <_dtoa_r+0x98c>
 8006be0:	45b0      	cmp	r8, r6
 8006be2:	d003      	beq.n	8006bec <_dtoa_r+0x98c>
 8006be4:	4641      	mov	r1, r8
 8006be6:	4628      	mov	r0, r5
 8006be8:	f000 f982 	bl	8006ef0 <_Bfree>
 8006bec:	4631      	mov	r1, r6
 8006bee:	4628      	mov	r0, r5
 8006bf0:	f000 f97e 	bl	8006ef0 <_Bfree>
 8006bf4:	e695      	b.n	8006922 <_dtoa_r+0x6c2>
 8006bf6:	2400      	movs	r4, #0
 8006bf8:	4626      	mov	r6, r4
 8006bfa:	e7e1      	b.n	8006bc0 <_dtoa_r+0x960>
 8006bfc:	46c1      	mov	r9, r8
 8006bfe:	4626      	mov	r6, r4
 8006c00:	e594      	b.n	800672c <_dtoa_r+0x4cc>
 8006c02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c04:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	f000 80fc 	beq.w	8006e06 <_dtoa_r+0xba6>
 8006c0e:	2f00      	cmp	r7, #0
 8006c10:	dd05      	ble.n	8006c1e <_dtoa_r+0x9be>
 8006c12:	4631      	mov	r1, r6
 8006c14:	463a      	mov	r2, r7
 8006c16:	4628      	mov	r0, r5
 8006c18:	f000 fb38 	bl	800728c <__lshift>
 8006c1c:	4606      	mov	r6, r0
 8006c1e:	f1b8 0f00 	cmp.w	r8, #0
 8006c22:	d05c      	beq.n	8006cde <_dtoa_r+0xa7e>
 8006c24:	4628      	mov	r0, r5
 8006c26:	6871      	ldr	r1, [r6, #4]
 8006c28:	f000 f922 	bl	8006e70 <_Balloc>
 8006c2c:	4607      	mov	r7, r0
 8006c2e:	b928      	cbnz	r0, 8006c3c <_dtoa_r+0x9dc>
 8006c30:	4602      	mov	r2, r0
 8006c32:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006c36:	4b7e      	ldr	r3, [pc, #504]	; (8006e30 <_dtoa_r+0xbd0>)
 8006c38:	f7ff bb26 	b.w	8006288 <_dtoa_r+0x28>
 8006c3c:	6932      	ldr	r2, [r6, #16]
 8006c3e:	f106 010c 	add.w	r1, r6, #12
 8006c42:	3202      	adds	r2, #2
 8006c44:	0092      	lsls	r2, r2, #2
 8006c46:	300c      	adds	r0, #12
 8006c48:	f7fe fde6 	bl	8005818 <memcpy>
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	4639      	mov	r1, r7
 8006c50:	4628      	mov	r0, r5
 8006c52:	f000 fb1b 	bl	800728c <__lshift>
 8006c56:	46b0      	mov	r8, r6
 8006c58:	4606      	mov	r6, r0
 8006c5a:	9b08      	ldr	r3, [sp, #32]
 8006c5c:	3301      	adds	r3, #1
 8006c5e:	9302      	str	r3, [sp, #8]
 8006c60:	9b08      	ldr	r3, [sp, #32]
 8006c62:	445b      	add	r3, fp
 8006c64:	930a      	str	r3, [sp, #40]	; 0x28
 8006c66:	9b04      	ldr	r3, [sp, #16]
 8006c68:	f003 0301 	and.w	r3, r3, #1
 8006c6c:	9309      	str	r3, [sp, #36]	; 0x24
 8006c6e:	9b02      	ldr	r3, [sp, #8]
 8006c70:	4621      	mov	r1, r4
 8006c72:	4650      	mov	r0, sl
 8006c74:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8006c78:	f7ff fa64 	bl	8006144 <quorem>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	4641      	mov	r1, r8
 8006c80:	3330      	adds	r3, #48	; 0x30
 8006c82:	9004      	str	r0, [sp, #16]
 8006c84:	4650      	mov	r0, sl
 8006c86:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c88:	f000 fb6c 	bl	8007364 <__mcmp>
 8006c8c:	4632      	mov	r2, r6
 8006c8e:	9006      	str	r0, [sp, #24]
 8006c90:	4621      	mov	r1, r4
 8006c92:	4628      	mov	r0, r5
 8006c94:	f000 fb82 	bl	800739c <__mdiff>
 8006c98:	68c2      	ldr	r2, [r0, #12]
 8006c9a:	4607      	mov	r7, r0
 8006c9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c9e:	bb02      	cbnz	r2, 8006ce2 <_dtoa_r+0xa82>
 8006ca0:	4601      	mov	r1, r0
 8006ca2:	4650      	mov	r0, sl
 8006ca4:	f000 fb5e 	bl	8007364 <__mcmp>
 8006ca8:	4602      	mov	r2, r0
 8006caa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cac:	4639      	mov	r1, r7
 8006cae:	4628      	mov	r0, r5
 8006cb0:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006cb4:	f000 f91c 	bl	8006ef0 <_Bfree>
 8006cb8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006cba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006cbc:	9f02      	ldr	r7, [sp, #8]
 8006cbe:	ea43 0102 	orr.w	r1, r3, r2
 8006cc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cc4:	430b      	orrs	r3, r1
 8006cc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cc8:	d10d      	bne.n	8006ce6 <_dtoa_r+0xa86>
 8006cca:	2b39      	cmp	r3, #57	; 0x39
 8006ccc:	d027      	beq.n	8006d1e <_dtoa_r+0xabe>
 8006cce:	9a06      	ldr	r2, [sp, #24]
 8006cd0:	2a00      	cmp	r2, #0
 8006cd2:	dd01      	ble.n	8006cd8 <_dtoa_r+0xa78>
 8006cd4:	9b04      	ldr	r3, [sp, #16]
 8006cd6:	3331      	adds	r3, #49	; 0x31
 8006cd8:	f88b 3000 	strb.w	r3, [fp]
 8006cdc:	e776      	b.n	8006bcc <_dtoa_r+0x96c>
 8006cde:	4630      	mov	r0, r6
 8006ce0:	e7b9      	b.n	8006c56 <_dtoa_r+0x9f6>
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	e7e2      	b.n	8006cac <_dtoa_r+0xa4c>
 8006ce6:	9906      	ldr	r1, [sp, #24]
 8006ce8:	2900      	cmp	r1, #0
 8006cea:	db04      	blt.n	8006cf6 <_dtoa_r+0xa96>
 8006cec:	9822      	ldr	r0, [sp, #136]	; 0x88
 8006cee:	4301      	orrs	r1, r0
 8006cf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006cf2:	4301      	orrs	r1, r0
 8006cf4:	d120      	bne.n	8006d38 <_dtoa_r+0xad8>
 8006cf6:	2a00      	cmp	r2, #0
 8006cf8:	ddee      	ble.n	8006cd8 <_dtoa_r+0xa78>
 8006cfa:	4651      	mov	r1, sl
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	4628      	mov	r0, r5
 8006d00:	9302      	str	r3, [sp, #8]
 8006d02:	f000 fac3 	bl	800728c <__lshift>
 8006d06:	4621      	mov	r1, r4
 8006d08:	4682      	mov	sl, r0
 8006d0a:	f000 fb2b 	bl	8007364 <__mcmp>
 8006d0e:	2800      	cmp	r0, #0
 8006d10:	9b02      	ldr	r3, [sp, #8]
 8006d12:	dc02      	bgt.n	8006d1a <_dtoa_r+0xaba>
 8006d14:	d1e0      	bne.n	8006cd8 <_dtoa_r+0xa78>
 8006d16:	07da      	lsls	r2, r3, #31
 8006d18:	d5de      	bpl.n	8006cd8 <_dtoa_r+0xa78>
 8006d1a:	2b39      	cmp	r3, #57	; 0x39
 8006d1c:	d1da      	bne.n	8006cd4 <_dtoa_r+0xa74>
 8006d1e:	2339      	movs	r3, #57	; 0x39
 8006d20:	f88b 3000 	strb.w	r3, [fp]
 8006d24:	463b      	mov	r3, r7
 8006d26:	461f      	mov	r7, r3
 8006d28:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006d2c:	3b01      	subs	r3, #1
 8006d2e:	2a39      	cmp	r2, #57	; 0x39
 8006d30:	d050      	beq.n	8006dd4 <_dtoa_r+0xb74>
 8006d32:	3201      	adds	r2, #1
 8006d34:	701a      	strb	r2, [r3, #0]
 8006d36:	e749      	b.n	8006bcc <_dtoa_r+0x96c>
 8006d38:	2a00      	cmp	r2, #0
 8006d3a:	dd03      	ble.n	8006d44 <_dtoa_r+0xae4>
 8006d3c:	2b39      	cmp	r3, #57	; 0x39
 8006d3e:	d0ee      	beq.n	8006d1e <_dtoa_r+0xabe>
 8006d40:	3301      	adds	r3, #1
 8006d42:	e7c9      	b.n	8006cd8 <_dtoa_r+0xa78>
 8006d44:	9a02      	ldr	r2, [sp, #8]
 8006d46:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006d48:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006d4c:	428a      	cmp	r2, r1
 8006d4e:	d02a      	beq.n	8006da6 <_dtoa_r+0xb46>
 8006d50:	4651      	mov	r1, sl
 8006d52:	2300      	movs	r3, #0
 8006d54:	220a      	movs	r2, #10
 8006d56:	4628      	mov	r0, r5
 8006d58:	f000 f8ec 	bl	8006f34 <__multadd>
 8006d5c:	45b0      	cmp	r8, r6
 8006d5e:	4682      	mov	sl, r0
 8006d60:	f04f 0300 	mov.w	r3, #0
 8006d64:	f04f 020a 	mov.w	r2, #10
 8006d68:	4641      	mov	r1, r8
 8006d6a:	4628      	mov	r0, r5
 8006d6c:	d107      	bne.n	8006d7e <_dtoa_r+0xb1e>
 8006d6e:	f000 f8e1 	bl	8006f34 <__multadd>
 8006d72:	4680      	mov	r8, r0
 8006d74:	4606      	mov	r6, r0
 8006d76:	9b02      	ldr	r3, [sp, #8]
 8006d78:	3301      	adds	r3, #1
 8006d7a:	9302      	str	r3, [sp, #8]
 8006d7c:	e777      	b.n	8006c6e <_dtoa_r+0xa0e>
 8006d7e:	f000 f8d9 	bl	8006f34 <__multadd>
 8006d82:	4631      	mov	r1, r6
 8006d84:	4680      	mov	r8, r0
 8006d86:	2300      	movs	r3, #0
 8006d88:	220a      	movs	r2, #10
 8006d8a:	4628      	mov	r0, r5
 8006d8c:	f000 f8d2 	bl	8006f34 <__multadd>
 8006d90:	4606      	mov	r6, r0
 8006d92:	e7f0      	b.n	8006d76 <_dtoa_r+0xb16>
 8006d94:	f1bb 0f00 	cmp.w	fp, #0
 8006d98:	bfcc      	ite	gt
 8006d9a:	465f      	movgt	r7, fp
 8006d9c:	2701      	movle	r7, #1
 8006d9e:	f04f 0800 	mov.w	r8, #0
 8006da2:	9a08      	ldr	r2, [sp, #32]
 8006da4:	4417      	add	r7, r2
 8006da6:	4651      	mov	r1, sl
 8006da8:	2201      	movs	r2, #1
 8006daa:	4628      	mov	r0, r5
 8006dac:	9302      	str	r3, [sp, #8]
 8006dae:	f000 fa6d 	bl	800728c <__lshift>
 8006db2:	4621      	mov	r1, r4
 8006db4:	4682      	mov	sl, r0
 8006db6:	f000 fad5 	bl	8007364 <__mcmp>
 8006dba:	2800      	cmp	r0, #0
 8006dbc:	dcb2      	bgt.n	8006d24 <_dtoa_r+0xac4>
 8006dbe:	d102      	bne.n	8006dc6 <_dtoa_r+0xb66>
 8006dc0:	9b02      	ldr	r3, [sp, #8]
 8006dc2:	07db      	lsls	r3, r3, #31
 8006dc4:	d4ae      	bmi.n	8006d24 <_dtoa_r+0xac4>
 8006dc6:	463b      	mov	r3, r7
 8006dc8:	461f      	mov	r7, r3
 8006dca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006dce:	2a30      	cmp	r2, #48	; 0x30
 8006dd0:	d0fa      	beq.n	8006dc8 <_dtoa_r+0xb68>
 8006dd2:	e6fb      	b.n	8006bcc <_dtoa_r+0x96c>
 8006dd4:	9a08      	ldr	r2, [sp, #32]
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d1a5      	bne.n	8006d26 <_dtoa_r+0xac6>
 8006dda:	2331      	movs	r3, #49	; 0x31
 8006ddc:	f109 0901 	add.w	r9, r9, #1
 8006de0:	7013      	strb	r3, [r2, #0]
 8006de2:	e6f3      	b.n	8006bcc <_dtoa_r+0x96c>
 8006de4:	4b13      	ldr	r3, [pc, #76]	; (8006e34 <_dtoa_r+0xbd4>)
 8006de6:	f7ff baa7 	b.w	8006338 <_dtoa_r+0xd8>
 8006dea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	f47f aa80 	bne.w	80062f2 <_dtoa_r+0x92>
 8006df2:	4b11      	ldr	r3, [pc, #68]	; (8006e38 <_dtoa_r+0xbd8>)
 8006df4:	f7ff baa0 	b.w	8006338 <_dtoa_r+0xd8>
 8006df8:	f1bb 0f00 	cmp.w	fp, #0
 8006dfc:	dc03      	bgt.n	8006e06 <_dtoa_r+0xba6>
 8006dfe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e00:	2b02      	cmp	r3, #2
 8006e02:	f73f aecc 	bgt.w	8006b9e <_dtoa_r+0x93e>
 8006e06:	9f08      	ldr	r7, [sp, #32]
 8006e08:	4621      	mov	r1, r4
 8006e0a:	4650      	mov	r0, sl
 8006e0c:	f7ff f99a 	bl	8006144 <quorem>
 8006e10:	9a08      	ldr	r2, [sp, #32]
 8006e12:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006e16:	f807 3b01 	strb.w	r3, [r7], #1
 8006e1a:	1aba      	subs	r2, r7, r2
 8006e1c:	4593      	cmp	fp, r2
 8006e1e:	ddb9      	ble.n	8006d94 <_dtoa_r+0xb34>
 8006e20:	4651      	mov	r1, sl
 8006e22:	2300      	movs	r3, #0
 8006e24:	220a      	movs	r2, #10
 8006e26:	4628      	mov	r0, r5
 8006e28:	f000 f884 	bl	8006f34 <__multadd>
 8006e2c:	4682      	mov	sl, r0
 8006e2e:	e7eb      	b.n	8006e08 <_dtoa_r+0xba8>
 8006e30:	0800b847 	.word	0x0800b847
 8006e34:	0800b7a0 	.word	0x0800b7a0
 8006e38:	0800b7c4 	.word	0x0800b7c4

08006e3c <_localeconv_r>:
 8006e3c:	4800      	ldr	r0, [pc, #0]	; (8006e40 <_localeconv_r+0x4>)
 8006e3e:	4770      	bx	lr
 8006e40:	200001f8 	.word	0x200001f8

08006e44 <malloc>:
 8006e44:	4b02      	ldr	r3, [pc, #8]	; (8006e50 <malloc+0xc>)
 8006e46:	4601      	mov	r1, r0
 8006e48:	6818      	ldr	r0, [r3, #0]
 8006e4a:	f000 bbed 	b.w	8007628 <_malloc_r>
 8006e4e:	bf00      	nop
 8006e50:	200000a4 	.word	0x200000a4

08006e54 <memchr>:
 8006e54:	4603      	mov	r3, r0
 8006e56:	b510      	push	{r4, lr}
 8006e58:	b2c9      	uxtb	r1, r1
 8006e5a:	4402      	add	r2, r0
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	4618      	mov	r0, r3
 8006e60:	d101      	bne.n	8006e66 <memchr+0x12>
 8006e62:	2000      	movs	r0, #0
 8006e64:	e003      	b.n	8006e6e <memchr+0x1a>
 8006e66:	7804      	ldrb	r4, [r0, #0]
 8006e68:	3301      	adds	r3, #1
 8006e6a:	428c      	cmp	r4, r1
 8006e6c:	d1f6      	bne.n	8006e5c <memchr+0x8>
 8006e6e:	bd10      	pop	{r4, pc}

08006e70 <_Balloc>:
 8006e70:	b570      	push	{r4, r5, r6, lr}
 8006e72:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006e74:	4604      	mov	r4, r0
 8006e76:	460d      	mov	r5, r1
 8006e78:	b976      	cbnz	r6, 8006e98 <_Balloc+0x28>
 8006e7a:	2010      	movs	r0, #16
 8006e7c:	f7ff ffe2 	bl	8006e44 <malloc>
 8006e80:	4602      	mov	r2, r0
 8006e82:	6260      	str	r0, [r4, #36]	; 0x24
 8006e84:	b920      	cbnz	r0, 8006e90 <_Balloc+0x20>
 8006e86:	2166      	movs	r1, #102	; 0x66
 8006e88:	4b17      	ldr	r3, [pc, #92]	; (8006ee8 <_Balloc+0x78>)
 8006e8a:	4818      	ldr	r0, [pc, #96]	; (8006eec <_Balloc+0x7c>)
 8006e8c:	f000 fd92 	bl	80079b4 <__assert_func>
 8006e90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e94:	6006      	str	r6, [r0, #0]
 8006e96:	60c6      	str	r6, [r0, #12]
 8006e98:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006e9a:	68f3      	ldr	r3, [r6, #12]
 8006e9c:	b183      	cbz	r3, 8006ec0 <_Balloc+0x50>
 8006e9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006ea6:	b9b8      	cbnz	r0, 8006ed8 <_Balloc+0x68>
 8006ea8:	2101      	movs	r1, #1
 8006eaa:	fa01 f605 	lsl.w	r6, r1, r5
 8006eae:	1d72      	adds	r2, r6, #5
 8006eb0:	4620      	mov	r0, r4
 8006eb2:	0092      	lsls	r2, r2, #2
 8006eb4:	f000 fb5e 	bl	8007574 <_calloc_r>
 8006eb8:	b160      	cbz	r0, 8006ed4 <_Balloc+0x64>
 8006eba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006ebe:	e00e      	b.n	8006ede <_Balloc+0x6e>
 8006ec0:	2221      	movs	r2, #33	; 0x21
 8006ec2:	2104      	movs	r1, #4
 8006ec4:	4620      	mov	r0, r4
 8006ec6:	f000 fb55 	bl	8007574 <_calloc_r>
 8006eca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ecc:	60f0      	str	r0, [r6, #12]
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d1e4      	bne.n	8006e9e <_Balloc+0x2e>
 8006ed4:	2000      	movs	r0, #0
 8006ed6:	bd70      	pop	{r4, r5, r6, pc}
 8006ed8:	6802      	ldr	r2, [r0, #0]
 8006eda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006ede:	2300      	movs	r3, #0
 8006ee0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006ee4:	e7f7      	b.n	8006ed6 <_Balloc+0x66>
 8006ee6:	bf00      	nop
 8006ee8:	0800b7d1 	.word	0x0800b7d1
 8006eec:	0800b858 	.word	0x0800b858

08006ef0 <_Bfree>:
 8006ef0:	b570      	push	{r4, r5, r6, lr}
 8006ef2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006ef4:	4605      	mov	r5, r0
 8006ef6:	460c      	mov	r4, r1
 8006ef8:	b976      	cbnz	r6, 8006f18 <_Bfree+0x28>
 8006efa:	2010      	movs	r0, #16
 8006efc:	f7ff ffa2 	bl	8006e44 <malloc>
 8006f00:	4602      	mov	r2, r0
 8006f02:	6268      	str	r0, [r5, #36]	; 0x24
 8006f04:	b920      	cbnz	r0, 8006f10 <_Bfree+0x20>
 8006f06:	218a      	movs	r1, #138	; 0x8a
 8006f08:	4b08      	ldr	r3, [pc, #32]	; (8006f2c <_Bfree+0x3c>)
 8006f0a:	4809      	ldr	r0, [pc, #36]	; (8006f30 <_Bfree+0x40>)
 8006f0c:	f000 fd52 	bl	80079b4 <__assert_func>
 8006f10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f14:	6006      	str	r6, [r0, #0]
 8006f16:	60c6      	str	r6, [r0, #12]
 8006f18:	b13c      	cbz	r4, 8006f2a <_Bfree+0x3a>
 8006f1a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006f1c:	6862      	ldr	r2, [r4, #4]
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006f24:	6021      	str	r1, [r4, #0]
 8006f26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006f2a:	bd70      	pop	{r4, r5, r6, pc}
 8006f2c:	0800b7d1 	.word	0x0800b7d1
 8006f30:	0800b858 	.word	0x0800b858

08006f34 <__multadd>:
 8006f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f38:	4698      	mov	r8, r3
 8006f3a:	460c      	mov	r4, r1
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	690e      	ldr	r6, [r1, #16]
 8006f40:	4607      	mov	r7, r0
 8006f42:	f101 0014 	add.w	r0, r1, #20
 8006f46:	6805      	ldr	r5, [r0, #0]
 8006f48:	3301      	adds	r3, #1
 8006f4a:	b2a9      	uxth	r1, r5
 8006f4c:	fb02 8101 	mla	r1, r2, r1, r8
 8006f50:	0c2d      	lsrs	r5, r5, #16
 8006f52:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006f56:	fb02 c505 	mla	r5, r2, r5, ip
 8006f5a:	b289      	uxth	r1, r1
 8006f5c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006f60:	429e      	cmp	r6, r3
 8006f62:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006f66:	f840 1b04 	str.w	r1, [r0], #4
 8006f6a:	dcec      	bgt.n	8006f46 <__multadd+0x12>
 8006f6c:	f1b8 0f00 	cmp.w	r8, #0
 8006f70:	d022      	beq.n	8006fb8 <__multadd+0x84>
 8006f72:	68a3      	ldr	r3, [r4, #8]
 8006f74:	42b3      	cmp	r3, r6
 8006f76:	dc19      	bgt.n	8006fac <__multadd+0x78>
 8006f78:	6861      	ldr	r1, [r4, #4]
 8006f7a:	4638      	mov	r0, r7
 8006f7c:	3101      	adds	r1, #1
 8006f7e:	f7ff ff77 	bl	8006e70 <_Balloc>
 8006f82:	4605      	mov	r5, r0
 8006f84:	b928      	cbnz	r0, 8006f92 <__multadd+0x5e>
 8006f86:	4602      	mov	r2, r0
 8006f88:	21b5      	movs	r1, #181	; 0xb5
 8006f8a:	4b0d      	ldr	r3, [pc, #52]	; (8006fc0 <__multadd+0x8c>)
 8006f8c:	480d      	ldr	r0, [pc, #52]	; (8006fc4 <__multadd+0x90>)
 8006f8e:	f000 fd11 	bl	80079b4 <__assert_func>
 8006f92:	6922      	ldr	r2, [r4, #16]
 8006f94:	f104 010c 	add.w	r1, r4, #12
 8006f98:	3202      	adds	r2, #2
 8006f9a:	0092      	lsls	r2, r2, #2
 8006f9c:	300c      	adds	r0, #12
 8006f9e:	f7fe fc3b 	bl	8005818 <memcpy>
 8006fa2:	4621      	mov	r1, r4
 8006fa4:	4638      	mov	r0, r7
 8006fa6:	f7ff ffa3 	bl	8006ef0 <_Bfree>
 8006faa:	462c      	mov	r4, r5
 8006fac:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006fb0:	3601      	adds	r6, #1
 8006fb2:	f8c3 8014 	str.w	r8, [r3, #20]
 8006fb6:	6126      	str	r6, [r4, #16]
 8006fb8:	4620      	mov	r0, r4
 8006fba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fbe:	bf00      	nop
 8006fc0:	0800b847 	.word	0x0800b847
 8006fc4:	0800b858 	.word	0x0800b858

08006fc8 <__hi0bits>:
 8006fc8:	0c02      	lsrs	r2, r0, #16
 8006fca:	0412      	lsls	r2, r2, #16
 8006fcc:	4603      	mov	r3, r0
 8006fce:	b9ca      	cbnz	r2, 8007004 <__hi0bits+0x3c>
 8006fd0:	0403      	lsls	r3, r0, #16
 8006fd2:	2010      	movs	r0, #16
 8006fd4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006fd8:	bf04      	itt	eq
 8006fda:	021b      	lsleq	r3, r3, #8
 8006fdc:	3008      	addeq	r0, #8
 8006fde:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006fe2:	bf04      	itt	eq
 8006fe4:	011b      	lsleq	r3, r3, #4
 8006fe6:	3004      	addeq	r0, #4
 8006fe8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006fec:	bf04      	itt	eq
 8006fee:	009b      	lsleq	r3, r3, #2
 8006ff0:	3002      	addeq	r0, #2
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	db05      	blt.n	8007002 <__hi0bits+0x3a>
 8006ff6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006ffa:	f100 0001 	add.w	r0, r0, #1
 8006ffe:	bf08      	it	eq
 8007000:	2020      	moveq	r0, #32
 8007002:	4770      	bx	lr
 8007004:	2000      	movs	r0, #0
 8007006:	e7e5      	b.n	8006fd4 <__hi0bits+0xc>

08007008 <__lo0bits>:
 8007008:	6803      	ldr	r3, [r0, #0]
 800700a:	4602      	mov	r2, r0
 800700c:	f013 0007 	ands.w	r0, r3, #7
 8007010:	d00b      	beq.n	800702a <__lo0bits+0x22>
 8007012:	07d9      	lsls	r1, r3, #31
 8007014:	d422      	bmi.n	800705c <__lo0bits+0x54>
 8007016:	0798      	lsls	r0, r3, #30
 8007018:	bf49      	itett	mi
 800701a:	085b      	lsrmi	r3, r3, #1
 800701c:	089b      	lsrpl	r3, r3, #2
 800701e:	2001      	movmi	r0, #1
 8007020:	6013      	strmi	r3, [r2, #0]
 8007022:	bf5c      	itt	pl
 8007024:	2002      	movpl	r0, #2
 8007026:	6013      	strpl	r3, [r2, #0]
 8007028:	4770      	bx	lr
 800702a:	b299      	uxth	r1, r3
 800702c:	b909      	cbnz	r1, 8007032 <__lo0bits+0x2a>
 800702e:	2010      	movs	r0, #16
 8007030:	0c1b      	lsrs	r3, r3, #16
 8007032:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007036:	bf04      	itt	eq
 8007038:	0a1b      	lsreq	r3, r3, #8
 800703a:	3008      	addeq	r0, #8
 800703c:	0719      	lsls	r1, r3, #28
 800703e:	bf04      	itt	eq
 8007040:	091b      	lsreq	r3, r3, #4
 8007042:	3004      	addeq	r0, #4
 8007044:	0799      	lsls	r1, r3, #30
 8007046:	bf04      	itt	eq
 8007048:	089b      	lsreq	r3, r3, #2
 800704a:	3002      	addeq	r0, #2
 800704c:	07d9      	lsls	r1, r3, #31
 800704e:	d403      	bmi.n	8007058 <__lo0bits+0x50>
 8007050:	085b      	lsrs	r3, r3, #1
 8007052:	f100 0001 	add.w	r0, r0, #1
 8007056:	d003      	beq.n	8007060 <__lo0bits+0x58>
 8007058:	6013      	str	r3, [r2, #0]
 800705a:	4770      	bx	lr
 800705c:	2000      	movs	r0, #0
 800705e:	4770      	bx	lr
 8007060:	2020      	movs	r0, #32
 8007062:	4770      	bx	lr

08007064 <__i2b>:
 8007064:	b510      	push	{r4, lr}
 8007066:	460c      	mov	r4, r1
 8007068:	2101      	movs	r1, #1
 800706a:	f7ff ff01 	bl	8006e70 <_Balloc>
 800706e:	4602      	mov	r2, r0
 8007070:	b928      	cbnz	r0, 800707e <__i2b+0x1a>
 8007072:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007076:	4b04      	ldr	r3, [pc, #16]	; (8007088 <__i2b+0x24>)
 8007078:	4804      	ldr	r0, [pc, #16]	; (800708c <__i2b+0x28>)
 800707a:	f000 fc9b 	bl	80079b4 <__assert_func>
 800707e:	2301      	movs	r3, #1
 8007080:	6144      	str	r4, [r0, #20]
 8007082:	6103      	str	r3, [r0, #16]
 8007084:	bd10      	pop	{r4, pc}
 8007086:	bf00      	nop
 8007088:	0800b847 	.word	0x0800b847
 800708c:	0800b858 	.word	0x0800b858

08007090 <__multiply>:
 8007090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007094:	4614      	mov	r4, r2
 8007096:	690a      	ldr	r2, [r1, #16]
 8007098:	6923      	ldr	r3, [r4, #16]
 800709a:	460d      	mov	r5, r1
 800709c:	429a      	cmp	r2, r3
 800709e:	bfbe      	ittt	lt
 80070a0:	460b      	movlt	r3, r1
 80070a2:	4625      	movlt	r5, r4
 80070a4:	461c      	movlt	r4, r3
 80070a6:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80070aa:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80070ae:	68ab      	ldr	r3, [r5, #8]
 80070b0:	6869      	ldr	r1, [r5, #4]
 80070b2:	eb0a 0709 	add.w	r7, sl, r9
 80070b6:	42bb      	cmp	r3, r7
 80070b8:	b085      	sub	sp, #20
 80070ba:	bfb8      	it	lt
 80070bc:	3101      	addlt	r1, #1
 80070be:	f7ff fed7 	bl	8006e70 <_Balloc>
 80070c2:	b930      	cbnz	r0, 80070d2 <__multiply+0x42>
 80070c4:	4602      	mov	r2, r0
 80070c6:	f240 115d 	movw	r1, #349	; 0x15d
 80070ca:	4b41      	ldr	r3, [pc, #260]	; (80071d0 <__multiply+0x140>)
 80070cc:	4841      	ldr	r0, [pc, #260]	; (80071d4 <__multiply+0x144>)
 80070ce:	f000 fc71 	bl	80079b4 <__assert_func>
 80070d2:	f100 0614 	add.w	r6, r0, #20
 80070d6:	4633      	mov	r3, r6
 80070d8:	2200      	movs	r2, #0
 80070da:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80070de:	4543      	cmp	r3, r8
 80070e0:	d31e      	bcc.n	8007120 <__multiply+0x90>
 80070e2:	f105 0c14 	add.w	ip, r5, #20
 80070e6:	f104 0314 	add.w	r3, r4, #20
 80070ea:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80070ee:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80070f2:	9202      	str	r2, [sp, #8]
 80070f4:	ebac 0205 	sub.w	r2, ip, r5
 80070f8:	3a15      	subs	r2, #21
 80070fa:	f022 0203 	bic.w	r2, r2, #3
 80070fe:	3204      	adds	r2, #4
 8007100:	f105 0115 	add.w	r1, r5, #21
 8007104:	458c      	cmp	ip, r1
 8007106:	bf38      	it	cc
 8007108:	2204      	movcc	r2, #4
 800710a:	9201      	str	r2, [sp, #4]
 800710c:	9a02      	ldr	r2, [sp, #8]
 800710e:	9303      	str	r3, [sp, #12]
 8007110:	429a      	cmp	r2, r3
 8007112:	d808      	bhi.n	8007126 <__multiply+0x96>
 8007114:	2f00      	cmp	r7, #0
 8007116:	dc55      	bgt.n	80071c4 <__multiply+0x134>
 8007118:	6107      	str	r7, [r0, #16]
 800711a:	b005      	add	sp, #20
 800711c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007120:	f843 2b04 	str.w	r2, [r3], #4
 8007124:	e7db      	b.n	80070de <__multiply+0x4e>
 8007126:	f8b3 a000 	ldrh.w	sl, [r3]
 800712a:	f1ba 0f00 	cmp.w	sl, #0
 800712e:	d020      	beq.n	8007172 <__multiply+0xe2>
 8007130:	46b1      	mov	r9, r6
 8007132:	2200      	movs	r2, #0
 8007134:	f105 0e14 	add.w	lr, r5, #20
 8007138:	f85e 4b04 	ldr.w	r4, [lr], #4
 800713c:	f8d9 b000 	ldr.w	fp, [r9]
 8007140:	b2a1      	uxth	r1, r4
 8007142:	fa1f fb8b 	uxth.w	fp, fp
 8007146:	fb0a b101 	mla	r1, sl, r1, fp
 800714a:	4411      	add	r1, r2
 800714c:	f8d9 2000 	ldr.w	r2, [r9]
 8007150:	0c24      	lsrs	r4, r4, #16
 8007152:	0c12      	lsrs	r2, r2, #16
 8007154:	fb0a 2404 	mla	r4, sl, r4, r2
 8007158:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800715c:	b289      	uxth	r1, r1
 800715e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007162:	45f4      	cmp	ip, lr
 8007164:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007168:	f849 1b04 	str.w	r1, [r9], #4
 800716c:	d8e4      	bhi.n	8007138 <__multiply+0xa8>
 800716e:	9901      	ldr	r1, [sp, #4]
 8007170:	5072      	str	r2, [r6, r1]
 8007172:	9a03      	ldr	r2, [sp, #12]
 8007174:	3304      	adds	r3, #4
 8007176:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800717a:	f1b9 0f00 	cmp.w	r9, #0
 800717e:	d01f      	beq.n	80071c0 <__multiply+0x130>
 8007180:	46b6      	mov	lr, r6
 8007182:	f04f 0a00 	mov.w	sl, #0
 8007186:	6834      	ldr	r4, [r6, #0]
 8007188:	f105 0114 	add.w	r1, r5, #20
 800718c:	880a      	ldrh	r2, [r1, #0]
 800718e:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007192:	b2a4      	uxth	r4, r4
 8007194:	fb09 b202 	mla	r2, r9, r2, fp
 8007198:	4492      	add	sl, r2
 800719a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800719e:	f84e 4b04 	str.w	r4, [lr], #4
 80071a2:	f851 4b04 	ldr.w	r4, [r1], #4
 80071a6:	f8be 2000 	ldrh.w	r2, [lr]
 80071aa:	0c24      	lsrs	r4, r4, #16
 80071ac:	fb09 2404 	mla	r4, r9, r4, r2
 80071b0:	458c      	cmp	ip, r1
 80071b2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80071b6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80071ba:	d8e7      	bhi.n	800718c <__multiply+0xfc>
 80071bc:	9a01      	ldr	r2, [sp, #4]
 80071be:	50b4      	str	r4, [r6, r2]
 80071c0:	3604      	adds	r6, #4
 80071c2:	e7a3      	b.n	800710c <__multiply+0x7c>
 80071c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d1a5      	bne.n	8007118 <__multiply+0x88>
 80071cc:	3f01      	subs	r7, #1
 80071ce:	e7a1      	b.n	8007114 <__multiply+0x84>
 80071d0:	0800b847 	.word	0x0800b847
 80071d4:	0800b858 	.word	0x0800b858

080071d8 <__pow5mult>:
 80071d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071dc:	4615      	mov	r5, r2
 80071de:	f012 0203 	ands.w	r2, r2, #3
 80071e2:	4606      	mov	r6, r0
 80071e4:	460f      	mov	r7, r1
 80071e6:	d007      	beq.n	80071f8 <__pow5mult+0x20>
 80071e8:	4c25      	ldr	r4, [pc, #148]	; (8007280 <__pow5mult+0xa8>)
 80071ea:	3a01      	subs	r2, #1
 80071ec:	2300      	movs	r3, #0
 80071ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80071f2:	f7ff fe9f 	bl	8006f34 <__multadd>
 80071f6:	4607      	mov	r7, r0
 80071f8:	10ad      	asrs	r5, r5, #2
 80071fa:	d03d      	beq.n	8007278 <__pow5mult+0xa0>
 80071fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80071fe:	b97c      	cbnz	r4, 8007220 <__pow5mult+0x48>
 8007200:	2010      	movs	r0, #16
 8007202:	f7ff fe1f 	bl	8006e44 <malloc>
 8007206:	4602      	mov	r2, r0
 8007208:	6270      	str	r0, [r6, #36]	; 0x24
 800720a:	b928      	cbnz	r0, 8007218 <__pow5mult+0x40>
 800720c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007210:	4b1c      	ldr	r3, [pc, #112]	; (8007284 <__pow5mult+0xac>)
 8007212:	481d      	ldr	r0, [pc, #116]	; (8007288 <__pow5mult+0xb0>)
 8007214:	f000 fbce 	bl	80079b4 <__assert_func>
 8007218:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800721c:	6004      	str	r4, [r0, #0]
 800721e:	60c4      	str	r4, [r0, #12]
 8007220:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007224:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007228:	b94c      	cbnz	r4, 800723e <__pow5mult+0x66>
 800722a:	f240 2171 	movw	r1, #625	; 0x271
 800722e:	4630      	mov	r0, r6
 8007230:	f7ff ff18 	bl	8007064 <__i2b>
 8007234:	2300      	movs	r3, #0
 8007236:	4604      	mov	r4, r0
 8007238:	f8c8 0008 	str.w	r0, [r8, #8]
 800723c:	6003      	str	r3, [r0, #0]
 800723e:	f04f 0900 	mov.w	r9, #0
 8007242:	07eb      	lsls	r3, r5, #31
 8007244:	d50a      	bpl.n	800725c <__pow5mult+0x84>
 8007246:	4639      	mov	r1, r7
 8007248:	4622      	mov	r2, r4
 800724a:	4630      	mov	r0, r6
 800724c:	f7ff ff20 	bl	8007090 <__multiply>
 8007250:	4680      	mov	r8, r0
 8007252:	4639      	mov	r1, r7
 8007254:	4630      	mov	r0, r6
 8007256:	f7ff fe4b 	bl	8006ef0 <_Bfree>
 800725a:	4647      	mov	r7, r8
 800725c:	106d      	asrs	r5, r5, #1
 800725e:	d00b      	beq.n	8007278 <__pow5mult+0xa0>
 8007260:	6820      	ldr	r0, [r4, #0]
 8007262:	b938      	cbnz	r0, 8007274 <__pow5mult+0x9c>
 8007264:	4622      	mov	r2, r4
 8007266:	4621      	mov	r1, r4
 8007268:	4630      	mov	r0, r6
 800726a:	f7ff ff11 	bl	8007090 <__multiply>
 800726e:	6020      	str	r0, [r4, #0]
 8007270:	f8c0 9000 	str.w	r9, [r0]
 8007274:	4604      	mov	r4, r0
 8007276:	e7e4      	b.n	8007242 <__pow5mult+0x6a>
 8007278:	4638      	mov	r0, r7
 800727a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800727e:	bf00      	nop
 8007280:	0800b9a8 	.word	0x0800b9a8
 8007284:	0800b7d1 	.word	0x0800b7d1
 8007288:	0800b858 	.word	0x0800b858

0800728c <__lshift>:
 800728c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007290:	460c      	mov	r4, r1
 8007292:	4607      	mov	r7, r0
 8007294:	4691      	mov	r9, r2
 8007296:	6923      	ldr	r3, [r4, #16]
 8007298:	6849      	ldr	r1, [r1, #4]
 800729a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800729e:	68a3      	ldr	r3, [r4, #8]
 80072a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80072a4:	f108 0601 	add.w	r6, r8, #1
 80072a8:	42b3      	cmp	r3, r6
 80072aa:	db0b      	blt.n	80072c4 <__lshift+0x38>
 80072ac:	4638      	mov	r0, r7
 80072ae:	f7ff fddf 	bl	8006e70 <_Balloc>
 80072b2:	4605      	mov	r5, r0
 80072b4:	b948      	cbnz	r0, 80072ca <__lshift+0x3e>
 80072b6:	4602      	mov	r2, r0
 80072b8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80072bc:	4b27      	ldr	r3, [pc, #156]	; (800735c <__lshift+0xd0>)
 80072be:	4828      	ldr	r0, [pc, #160]	; (8007360 <__lshift+0xd4>)
 80072c0:	f000 fb78 	bl	80079b4 <__assert_func>
 80072c4:	3101      	adds	r1, #1
 80072c6:	005b      	lsls	r3, r3, #1
 80072c8:	e7ee      	b.n	80072a8 <__lshift+0x1c>
 80072ca:	2300      	movs	r3, #0
 80072cc:	f100 0114 	add.w	r1, r0, #20
 80072d0:	f100 0210 	add.w	r2, r0, #16
 80072d4:	4618      	mov	r0, r3
 80072d6:	4553      	cmp	r3, sl
 80072d8:	db33      	blt.n	8007342 <__lshift+0xb6>
 80072da:	6920      	ldr	r0, [r4, #16]
 80072dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80072e0:	f104 0314 	add.w	r3, r4, #20
 80072e4:	f019 091f 	ands.w	r9, r9, #31
 80072e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80072ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80072f0:	d02b      	beq.n	800734a <__lshift+0xbe>
 80072f2:	468a      	mov	sl, r1
 80072f4:	2200      	movs	r2, #0
 80072f6:	f1c9 0e20 	rsb	lr, r9, #32
 80072fa:	6818      	ldr	r0, [r3, #0]
 80072fc:	fa00 f009 	lsl.w	r0, r0, r9
 8007300:	4302      	orrs	r2, r0
 8007302:	f84a 2b04 	str.w	r2, [sl], #4
 8007306:	f853 2b04 	ldr.w	r2, [r3], #4
 800730a:	459c      	cmp	ip, r3
 800730c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007310:	d8f3      	bhi.n	80072fa <__lshift+0x6e>
 8007312:	ebac 0304 	sub.w	r3, ip, r4
 8007316:	3b15      	subs	r3, #21
 8007318:	f023 0303 	bic.w	r3, r3, #3
 800731c:	3304      	adds	r3, #4
 800731e:	f104 0015 	add.w	r0, r4, #21
 8007322:	4584      	cmp	ip, r0
 8007324:	bf38      	it	cc
 8007326:	2304      	movcc	r3, #4
 8007328:	50ca      	str	r2, [r1, r3]
 800732a:	b10a      	cbz	r2, 8007330 <__lshift+0xa4>
 800732c:	f108 0602 	add.w	r6, r8, #2
 8007330:	3e01      	subs	r6, #1
 8007332:	4638      	mov	r0, r7
 8007334:	4621      	mov	r1, r4
 8007336:	612e      	str	r6, [r5, #16]
 8007338:	f7ff fdda 	bl	8006ef0 <_Bfree>
 800733c:	4628      	mov	r0, r5
 800733e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007342:	f842 0f04 	str.w	r0, [r2, #4]!
 8007346:	3301      	adds	r3, #1
 8007348:	e7c5      	b.n	80072d6 <__lshift+0x4a>
 800734a:	3904      	subs	r1, #4
 800734c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007350:	459c      	cmp	ip, r3
 8007352:	f841 2f04 	str.w	r2, [r1, #4]!
 8007356:	d8f9      	bhi.n	800734c <__lshift+0xc0>
 8007358:	e7ea      	b.n	8007330 <__lshift+0xa4>
 800735a:	bf00      	nop
 800735c:	0800b847 	.word	0x0800b847
 8007360:	0800b858 	.word	0x0800b858

08007364 <__mcmp>:
 8007364:	4603      	mov	r3, r0
 8007366:	690a      	ldr	r2, [r1, #16]
 8007368:	6900      	ldr	r0, [r0, #16]
 800736a:	b530      	push	{r4, r5, lr}
 800736c:	1a80      	subs	r0, r0, r2
 800736e:	d10d      	bne.n	800738c <__mcmp+0x28>
 8007370:	3314      	adds	r3, #20
 8007372:	3114      	adds	r1, #20
 8007374:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007378:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800737c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007380:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007384:	4295      	cmp	r5, r2
 8007386:	d002      	beq.n	800738e <__mcmp+0x2a>
 8007388:	d304      	bcc.n	8007394 <__mcmp+0x30>
 800738a:	2001      	movs	r0, #1
 800738c:	bd30      	pop	{r4, r5, pc}
 800738e:	42a3      	cmp	r3, r4
 8007390:	d3f4      	bcc.n	800737c <__mcmp+0x18>
 8007392:	e7fb      	b.n	800738c <__mcmp+0x28>
 8007394:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007398:	e7f8      	b.n	800738c <__mcmp+0x28>
	...

0800739c <__mdiff>:
 800739c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073a0:	460c      	mov	r4, r1
 80073a2:	4606      	mov	r6, r0
 80073a4:	4611      	mov	r1, r2
 80073a6:	4620      	mov	r0, r4
 80073a8:	4692      	mov	sl, r2
 80073aa:	f7ff ffdb 	bl	8007364 <__mcmp>
 80073ae:	1e05      	subs	r5, r0, #0
 80073b0:	d111      	bne.n	80073d6 <__mdiff+0x3a>
 80073b2:	4629      	mov	r1, r5
 80073b4:	4630      	mov	r0, r6
 80073b6:	f7ff fd5b 	bl	8006e70 <_Balloc>
 80073ba:	4602      	mov	r2, r0
 80073bc:	b928      	cbnz	r0, 80073ca <__mdiff+0x2e>
 80073be:	f240 2132 	movw	r1, #562	; 0x232
 80073c2:	4b3c      	ldr	r3, [pc, #240]	; (80074b4 <__mdiff+0x118>)
 80073c4:	483c      	ldr	r0, [pc, #240]	; (80074b8 <__mdiff+0x11c>)
 80073c6:	f000 faf5 	bl	80079b4 <__assert_func>
 80073ca:	2301      	movs	r3, #1
 80073cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80073d0:	4610      	mov	r0, r2
 80073d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073d6:	bfa4      	itt	ge
 80073d8:	4653      	movge	r3, sl
 80073da:	46a2      	movge	sl, r4
 80073dc:	4630      	mov	r0, r6
 80073de:	f8da 1004 	ldr.w	r1, [sl, #4]
 80073e2:	bfa6      	itte	ge
 80073e4:	461c      	movge	r4, r3
 80073e6:	2500      	movge	r5, #0
 80073e8:	2501      	movlt	r5, #1
 80073ea:	f7ff fd41 	bl	8006e70 <_Balloc>
 80073ee:	4602      	mov	r2, r0
 80073f0:	b918      	cbnz	r0, 80073fa <__mdiff+0x5e>
 80073f2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80073f6:	4b2f      	ldr	r3, [pc, #188]	; (80074b4 <__mdiff+0x118>)
 80073f8:	e7e4      	b.n	80073c4 <__mdiff+0x28>
 80073fa:	f100 0814 	add.w	r8, r0, #20
 80073fe:	f8da 7010 	ldr.w	r7, [sl, #16]
 8007402:	60c5      	str	r5, [r0, #12]
 8007404:	f04f 0c00 	mov.w	ip, #0
 8007408:	f10a 0514 	add.w	r5, sl, #20
 800740c:	f10a 0010 	add.w	r0, sl, #16
 8007410:	46c2      	mov	sl, r8
 8007412:	6926      	ldr	r6, [r4, #16]
 8007414:	f104 0914 	add.w	r9, r4, #20
 8007418:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800741c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007420:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8007424:	f859 3b04 	ldr.w	r3, [r9], #4
 8007428:	fa1f f18b 	uxth.w	r1, fp
 800742c:	4461      	add	r1, ip
 800742e:	fa1f fc83 	uxth.w	ip, r3
 8007432:	0c1b      	lsrs	r3, r3, #16
 8007434:	eba1 010c 	sub.w	r1, r1, ip
 8007438:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800743c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007440:	b289      	uxth	r1, r1
 8007442:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007446:	454e      	cmp	r6, r9
 8007448:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800744c:	f84a 3b04 	str.w	r3, [sl], #4
 8007450:	d8e6      	bhi.n	8007420 <__mdiff+0x84>
 8007452:	1b33      	subs	r3, r6, r4
 8007454:	3b15      	subs	r3, #21
 8007456:	f023 0303 	bic.w	r3, r3, #3
 800745a:	3415      	adds	r4, #21
 800745c:	3304      	adds	r3, #4
 800745e:	42a6      	cmp	r6, r4
 8007460:	bf38      	it	cc
 8007462:	2304      	movcc	r3, #4
 8007464:	441d      	add	r5, r3
 8007466:	4443      	add	r3, r8
 8007468:	461e      	mov	r6, r3
 800746a:	462c      	mov	r4, r5
 800746c:	4574      	cmp	r4, lr
 800746e:	d30e      	bcc.n	800748e <__mdiff+0xf2>
 8007470:	f10e 0103 	add.w	r1, lr, #3
 8007474:	1b49      	subs	r1, r1, r5
 8007476:	f021 0103 	bic.w	r1, r1, #3
 800747a:	3d03      	subs	r5, #3
 800747c:	45ae      	cmp	lr, r5
 800747e:	bf38      	it	cc
 8007480:	2100      	movcc	r1, #0
 8007482:	4419      	add	r1, r3
 8007484:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007488:	b18b      	cbz	r3, 80074ae <__mdiff+0x112>
 800748a:	6117      	str	r7, [r2, #16]
 800748c:	e7a0      	b.n	80073d0 <__mdiff+0x34>
 800748e:	f854 8b04 	ldr.w	r8, [r4], #4
 8007492:	fa1f f188 	uxth.w	r1, r8
 8007496:	4461      	add	r1, ip
 8007498:	1408      	asrs	r0, r1, #16
 800749a:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800749e:	b289      	uxth	r1, r1
 80074a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80074a4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80074a8:	f846 1b04 	str.w	r1, [r6], #4
 80074ac:	e7de      	b.n	800746c <__mdiff+0xd0>
 80074ae:	3f01      	subs	r7, #1
 80074b0:	e7e8      	b.n	8007484 <__mdiff+0xe8>
 80074b2:	bf00      	nop
 80074b4:	0800b847 	.word	0x0800b847
 80074b8:	0800b858 	.word	0x0800b858

080074bc <__d2b>:
 80074bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80074c0:	2101      	movs	r1, #1
 80074c2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80074c6:	4690      	mov	r8, r2
 80074c8:	461d      	mov	r5, r3
 80074ca:	f7ff fcd1 	bl	8006e70 <_Balloc>
 80074ce:	4604      	mov	r4, r0
 80074d0:	b930      	cbnz	r0, 80074e0 <__d2b+0x24>
 80074d2:	4602      	mov	r2, r0
 80074d4:	f240 310a 	movw	r1, #778	; 0x30a
 80074d8:	4b24      	ldr	r3, [pc, #144]	; (800756c <__d2b+0xb0>)
 80074da:	4825      	ldr	r0, [pc, #148]	; (8007570 <__d2b+0xb4>)
 80074dc:	f000 fa6a 	bl	80079b4 <__assert_func>
 80074e0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80074e4:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80074e8:	bb2d      	cbnz	r5, 8007536 <__d2b+0x7a>
 80074ea:	9301      	str	r3, [sp, #4]
 80074ec:	f1b8 0300 	subs.w	r3, r8, #0
 80074f0:	d026      	beq.n	8007540 <__d2b+0x84>
 80074f2:	4668      	mov	r0, sp
 80074f4:	9300      	str	r3, [sp, #0]
 80074f6:	f7ff fd87 	bl	8007008 <__lo0bits>
 80074fa:	9900      	ldr	r1, [sp, #0]
 80074fc:	b1f0      	cbz	r0, 800753c <__d2b+0x80>
 80074fe:	9a01      	ldr	r2, [sp, #4]
 8007500:	f1c0 0320 	rsb	r3, r0, #32
 8007504:	fa02 f303 	lsl.w	r3, r2, r3
 8007508:	430b      	orrs	r3, r1
 800750a:	40c2      	lsrs	r2, r0
 800750c:	6163      	str	r3, [r4, #20]
 800750e:	9201      	str	r2, [sp, #4]
 8007510:	9b01      	ldr	r3, [sp, #4]
 8007512:	2b00      	cmp	r3, #0
 8007514:	bf14      	ite	ne
 8007516:	2102      	movne	r1, #2
 8007518:	2101      	moveq	r1, #1
 800751a:	61a3      	str	r3, [r4, #24]
 800751c:	6121      	str	r1, [r4, #16]
 800751e:	b1c5      	cbz	r5, 8007552 <__d2b+0x96>
 8007520:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007524:	4405      	add	r5, r0
 8007526:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800752a:	603d      	str	r5, [r7, #0]
 800752c:	6030      	str	r0, [r6, #0]
 800752e:	4620      	mov	r0, r4
 8007530:	b002      	add	sp, #8
 8007532:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007536:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800753a:	e7d6      	b.n	80074ea <__d2b+0x2e>
 800753c:	6161      	str	r1, [r4, #20]
 800753e:	e7e7      	b.n	8007510 <__d2b+0x54>
 8007540:	a801      	add	r0, sp, #4
 8007542:	f7ff fd61 	bl	8007008 <__lo0bits>
 8007546:	2101      	movs	r1, #1
 8007548:	9b01      	ldr	r3, [sp, #4]
 800754a:	6121      	str	r1, [r4, #16]
 800754c:	6163      	str	r3, [r4, #20]
 800754e:	3020      	adds	r0, #32
 8007550:	e7e5      	b.n	800751e <__d2b+0x62>
 8007552:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007556:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800755a:	6038      	str	r0, [r7, #0]
 800755c:	6918      	ldr	r0, [r3, #16]
 800755e:	f7ff fd33 	bl	8006fc8 <__hi0bits>
 8007562:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007566:	6031      	str	r1, [r6, #0]
 8007568:	e7e1      	b.n	800752e <__d2b+0x72>
 800756a:	bf00      	nop
 800756c:	0800b847 	.word	0x0800b847
 8007570:	0800b858 	.word	0x0800b858

08007574 <_calloc_r>:
 8007574:	b538      	push	{r3, r4, r5, lr}
 8007576:	fb02 f501 	mul.w	r5, r2, r1
 800757a:	4629      	mov	r1, r5
 800757c:	f000 f854 	bl	8007628 <_malloc_r>
 8007580:	4604      	mov	r4, r0
 8007582:	b118      	cbz	r0, 800758c <_calloc_r+0x18>
 8007584:	462a      	mov	r2, r5
 8007586:	2100      	movs	r1, #0
 8007588:	f7fe f954 	bl	8005834 <memset>
 800758c:	4620      	mov	r0, r4
 800758e:	bd38      	pop	{r3, r4, r5, pc}

08007590 <_free_r>:
 8007590:	b538      	push	{r3, r4, r5, lr}
 8007592:	4605      	mov	r5, r0
 8007594:	2900      	cmp	r1, #0
 8007596:	d043      	beq.n	8007620 <_free_r+0x90>
 8007598:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800759c:	1f0c      	subs	r4, r1, #4
 800759e:	2b00      	cmp	r3, #0
 80075a0:	bfb8      	it	lt
 80075a2:	18e4      	addlt	r4, r4, r3
 80075a4:	f000 fa62 	bl	8007a6c <__malloc_lock>
 80075a8:	4a1e      	ldr	r2, [pc, #120]	; (8007624 <_free_r+0x94>)
 80075aa:	6813      	ldr	r3, [r2, #0]
 80075ac:	4610      	mov	r0, r2
 80075ae:	b933      	cbnz	r3, 80075be <_free_r+0x2e>
 80075b0:	6063      	str	r3, [r4, #4]
 80075b2:	6014      	str	r4, [r2, #0]
 80075b4:	4628      	mov	r0, r5
 80075b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075ba:	f000 ba5d 	b.w	8007a78 <__malloc_unlock>
 80075be:	42a3      	cmp	r3, r4
 80075c0:	d90a      	bls.n	80075d8 <_free_r+0x48>
 80075c2:	6821      	ldr	r1, [r4, #0]
 80075c4:	1862      	adds	r2, r4, r1
 80075c6:	4293      	cmp	r3, r2
 80075c8:	bf01      	itttt	eq
 80075ca:	681a      	ldreq	r2, [r3, #0]
 80075cc:	685b      	ldreq	r3, [r3, #4]
 80075ce:	1852      	addeq	r2, r2, r1
 80075d0:	6022      	streq	r2, [r4, #0]
 80075d2:	6063      	str	r3, [r4, #4]
 80075d4:	6004      	str	r4, [r0, #0]
 80075d6:	e7ed      	b.n	80075b4 <_free_r+0x24>
 80075d8:	461a      	mov	r2, r3
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	b10b      	cbz	r3, 80075e2 <_free_r+0x52>
 80075de:	42a3      	cmp	r3, r4
 80075e0:	d9fa      	bls.n	80075d8 <_free_r+0x48>
 80075e2:	6811      	ldr	r1, [r2, #0]
 80075e4:	1850      	adds	r0, r2, r1
 80075e6:	42a0      	cmp	r0, r4
 80075e8:	d10b      	bne.n	8007602 <_free_r+0x72>
 80075ea:	6820      	ldr	r0, [r4, #0]
 80075ec:	4401      	add	r1, r0
 80075ee:	1850      	adds	r0, r2, r1
 80075f0:	4283      	cmp	r3, r0
 80075f2:	6011      	str	r1, [r2, #0]
 80075f4:	d1de      	bne.n	80075b4 <_free_r+0x24>
 80075f6:	6818      	ldr	r0, [r3, #0]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	4401      	add	r1, r0
 80075fc:	6011      	str	r1, [r2, #0]
 80075fe:	6053      	str	r3, [r2, #4]
 8007600:	e7d8      	b.n	80075b4 <_free_r+0x24>
 8007602:	d902      	bls.n	800760a <_free_r+0x7a>
 8007604:	230c      	movs	r3, #12
 8007606:	602b      	str	r3, [r5, #0]
 8007608:	e7d4      	b.n	80075b4 <_free_r+0x24>
 800760a:	6820      	ldr	r0, [r4, #0]
 800760c:	1821      	adds	r1, r4, r0
 800760e:	428b      	cmp	r3, r1
 8007610:	bf01      	itttt	eq
 8007612:	6819      	ldreq	r1, [r3, #0]
 8007614:	685b      	ldreq	r3, [r3, #4]
 8007616:	1809      	addeq	r1, r1, r0
 8007618:	6021      	streq	r1, [r4, #0]
 800761a:	6063      	str	r3, [r4, #4]
 800761c:	6054      	str	r4, [r2, #4]
 800761e:	e7c9      	b.n	80075b4 <_free_r+0x24>
 8007620:	bd38      	pop	{r3, r4, r5, pc}
 8007622:	bf00      	nop
 8007624:	200006f0 	.word	0x200006f0

08007628 <_malloc_r>:
 8007628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800762a:	1ccd      	adds	r5, r1, #3
 800762c:	f025 0503 	bic.w	r5, r5, #3
 8007630:	3508      	adds	r5, #8
 8007632:	2d0c      	cmp	r5, #12
 8007634:	bf38      	it	cc
 8007636:	250c      	movcc	r5, #12
 8007638:	2d00      	cmp	r5, #0
 800763a:	4606      	mov	r6, r0
 800763c:	db01      	blt.n	8007642 <_malloc_r+0x1a>
 800763e:	42a9      	cmp	r1, r5
 8007640:	d903      	bls.n	800764a <_malloc_r+0x22>
 8007642:	230c      	movs	r3, #12
 8007644:	6033      	str	r3, [r6, #0]
 8007646:	2000      	movs	r0, #0
 8007648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800764a:	f000 fa0f 	bl	8007a6c <__malloc_lock>
 800764e:	4921      	ldr	r1, [pc, #132]	; (80076d4 <_malloc_r+0xac>)
 8007650:	680a      	ldr	r2, [r1, #0]
 8007652:	4614      	mov	r4, r2
 8007654:	b99c      	cbnz	r4, 800767e <_malloc_r+0x56>
 8007656:	4f20      	ldr	r7, [pc, #128]	; (80076d8 <_malloc_r+0xb0>)
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	b923      	cbnz	r3, 8007666 <_malloc_r+0x3e>
 800765c:	4621      	mov	r1, r4
 800765e:	4630      	mov	r0, r6
 8007660:	f000 f998 	bl	8007994 <_sbrk_r>
 8007664:	6038      	str	r0, [r7, #0]
 8007666:	4629      	mov	r1, r5
 8007668:	4630      	mov	r0, r6
 800766a:	f000 f993 	bl	8007994 <_sbrk_r>
 800766e:	1c43      	adds	r3, r0, #1
 8007670:	d123      	bne.n	80076ba <_malloc_r+0x92>
 8007672:	230c      	movs	r3, #12
 8007674:	4630      	mov	r0, r6
 8007676:	6033      	str	r3, [r6, #0]
 8007678:	f000 f9fe 	bl	8007a78 <__malloc_unlock>
 800767c:	e7e3      	b.n	8007646 <_malloc_r+0x1e>
 800767e:	6823      	ldr	r3, [r4, #0]
 8007680:	1b5b      	subs	r3, r3, r5
 8007682:	d417      	bmi.n	80076b4 <_malloc_r+0x8c>
 8007684:	2b0b      	cmp	r3, #11
 8007686:	d903      	bls.n	8007690 <_malloc_r+0x68>
 8007688:	6023      	str	r3, [r4, #0]
 800768a:	441c      	add	r4, r3
 800768c:	6025      	str	r5, [r4, #0]
 800768e:	e004      	b.n	800769a <_malloc_r+0x72>
 8007690:	6863      	ldr	r3, [r4, #4]
 8007692:	42a2      	cmp	r2, r4
 8007694:	bf0c      	ite	eq
 8007696:	600b      	streq	r3, [r1, #0]
 8007698:	6053      	strne	r3, [r2, #4]
 800769a:	4630      	mov	r0, r6
 800769c:	f000 f9ec 	bl	8007a78 <__malloc_unlock>
 80076a0:	f104 000b 	add.w	r0, r4, #11
 80076a4:	1d23      	adds	r3, r4, #4
 80076a6:	f020 0007 	bic.w	r0, r0, #7
 80076aa:	1ac2      	subs	r2, r0, r3
 80076ac:	d0cc      	beq.n	8007648 <_malloc_r+0x20>
 80076ae:	1a1b      	subs	r3, r3, r0
 80076b0:	50a3      	str	r3, [r4, r2]
 80076b2:	e7c9      	b.n	8007648 <_malloc_r+0x20>
 80076b4:	4622      	mov	r2, r4
 80076b6:	6864      	ldr	r4, [r4, #4]
 80076b8:	e7cc      	b.n	8007654 <_malloc_r+0x2c>
 80076ba:	1cc4      	adds	r4, r0, #3
 80076bc:	f024 0403 	bic.w	r4, r4, #3
 80076c0:	42a0      	cmp	r0, r4
 80076c2:	d0e3      	beq.n	800768c <_malloc_r+0x64>
 80076c4:	1a21      	subs	r1, r4, r0
 80076c6:	4630      	mov	r0, r6
 80076c8:	f000 f964 	bl	8007994 <_sbrk_r>
 80076cc:	3001      	adds	r0, #1
 80076ce:	d1dd      	bne.n	800768c <_malloc_r+0x64>
 80076d0:	e7cf      	b.n	8007672 <_malloc_r+0x4a>
 80076d2:	bf00      	nop
 80076d4:	200006f0 	.word	0x200006f0
 80076d8:	200006f4 	.word	0x200006f4

080076dc <__ssputs_r>:
 80076dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076e0:	688e      	ldr	r6, [r1, #8]
 80076e2:	4682      	mov	sl, r0
 80076e4:	429e      	cmp	r6, r3
 80076e6:	460c      	mov	r4, r1
 80076e8:	4690      	mov	r8, r2
 80076ea:	461f      	mov	r7, r3
 80076ec:	d838      	bhi.n	8007760 <__ssputs_r+0x84>
 80076ee:	898a      	ldrh	r2, [r1, #12]
 80076f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80076f4:	d032      	beq.n	800775c <__ssputs_r+0x80>
 80076f6:	6825      	ldr	r5, [r4, #0]
 80076f8:	6909      	ldr	r1, [r1, #16]
 80076fa:	3301      	adds	r3, #1
 80076fc:	eba5 0901 	sub.w	r9, r5, r1
 8007700:	6965      	ldr	r5, [r4, #20]
 8007702:	444b      	add	r3, r9
 8007704:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007708:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800770c:	106d      	asrs	r5, r5, #1
 800770e:	429d      	cmp	r5, r3
 8007710:	bf38      	it	cc
 8007712:	461d      	movcc	r5, r3
 8007714:	0553      	lsls	r3, r2, #21
 8007716:	d531      	bpl.n	800777c <__ssputs_r+0xa0>
 8007718:	4629      	mov	r1, r5
 800771a:	f7ff ff85 	bl	8007628 <_malloc_r>
 800771e:	4606      	mov	r6, r0
 8007720:	b950      	cbnz	r0, 8007738 <__ssputs_r+0x5c>
 8007722:	230c      	movs	r3, #12
 8007724:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007728:	f8ca 3000 	str.w	r3, [sl]
 800772c:	89a3      	ldrh	r3, [r4, #12]
 800772e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007732:	81a3      	strh	r3, [r4, #12]
 8007734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007738:	464a      	mov	r2, r9
 800773a:	6921      	ldr	r1, [r4, #16]
 800773c:	f7fe f86c 	bl	8005818 <memcpy>
 8007740:	89a3      	ldrh	r3, [r4, #12]
 8007742:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800774a:	81a3      	strh	r3, [r4, #12]
 800774c:	6126      	str	r6, [r4, #16]
 800774e:	444e      	add	r6, r9
 8007750:	6026      	str	r6, [r4, #0]
 8007752:	463e      	mov	r6, r7
 8007754:	6165      	str	r5, [r4, #20]
 8007756:	eba5 0509 	sub.w	r5, r5, r9
 800775a:	60a5      	str	r5, [r4, #8]
 800775c:	42be      	cmp	r6, r7
 800775e:	d900      	bls.n	8007762 <__ssputs_r+0x86>
 8007760:	463e      	mov	r6, r7
 8007762:	4632      	mov	r2, r6
 8007764:	4641      	mov	r1, r8
 8007766:	6820      	ldr	r0, [r4, #0]
 8007768:	f000 f966 	bl	8007a38 <memmove>
 800776c:	68a3      	ldr	r3, [r4, #8]
 800776e:	6822      	ldr	r2, [r4, #0]
 8007770:	1b9b      	subs	r3, r3, r6
 8007772:	4432      	add	r2, r6
 8007774:	2000      	movs	r0, #0
 8007776:	60a3      	str	r3, [r4, #8]
 8007778:	6022      	str	r2, [r4, #0]
 800777a:	e7db      	b.n	8007734 <__ssputs_r+0x58>
 800777c:	462a      	mov	r2, r5
 800777e:	f000 f981 	bl	8007a84 <_realloc_r>
 8007782:	4606      	mov	r6, r0
 8007784:	2800      	cmp	r0, #0
 8007786:	d1e1      	bne.n	800774c <__ssputs_r+0x70>
 8007788:	4650      	mov	r0, sl
 800778a:	6921      	ldr	r1, [r4, #16]
 800778c:	f7ff ff00 	bl	8007590 <_free_r>
 8007790:	e7c7      	b.n	8007722 <__ssputs_r+0x46>
	...

08007794 <_svfiprintf_r>:
 8007794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007798:	4698      	mov	r8, r3
 800779a:	898b      	ldrh	r3, [r1, #12]
 800779c:	4607      	mov	r7, r0
 800779e:	061b      	lsls	r3, r3, #24
 80077a0:	460d      	mov	r5, r1
 80077a2:	4614      	mov	r4, r2
 80077a4:	b09d      	sub	sp, #116	; 0x74
 80077a6:	d50e      	bpl.n	80077c6 <_svfiprintf_r+0x32>
 80077a8:	690b      	ldr	r3, [r1, #16]
 80077aa:	b963      	cbnz	r3, 80077c6 <_svfiprintf_r+0x32>
 80077ac:	2140      	movs	r1, #64	; 0x40
 80077ae:	f7ff ff3b 	bl	8007628 <_malloc_r>
 80077b2:	6028      	str	r0, [r5, #0]
 80077b4:	6128      	str	r0, [r5, #16]
 80077b6:	b920      	cbnz	r0, 80077c2 <_svfiprintf_r+0x2e>
 80077b8:	230c      	movs	r3, #12
 80077ba:	603b      	str	r3, [r7, #0]
 80077bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077c0:	e0d1      	b.n	8007966 <_svfiprintf_r+0x1d2>
 80077c2:	2340      	movs	r3, #64	; 0x40
 80077c4:	616b      	str	r3, [r5, #20]
 80077c6:	2300      	movs	r3, #0
 80077c8:	9309      	str	r3, [sp, #36]	; 0x24
 80077ca:	2320      	movs	r3, #32
 80077cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80077d0:	2330      	movs	r3, #48	; 0x30
 80077d2:	f04f 0901 	mov.w	r9, #1
 80077d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80077da:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007980 <_svfiprintf_r+0x1ec>
 80077de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80077e2:	4623      	mov	r3, r4
 80077e4:	469a      	mov	sl, r3
 80077e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077ea:	b10a      	cbz	r2, 80077f0 <_svfiprintf_r+0x5c>
 80077ec:	2a25      	cmp	r2, #37	; 0x25
 80077ee:	d1f9      	bne.n	80077e4 <_svfiprintf_r+0x50>
 80077f0:	ebba 0b04 	subs.w	fp, sl, r4
 80077f4:	d00b      	beq.n	800780e <_svfiprintf_r+0x7a>
 80077f6:	465b      	mov	r3, fp
 80077f8:	4622      	mov	r2, r4
 80077fa:	4629      	mov	r1, r5
 80077fc:	4638      	mov	r0, r7
 80077fe:	f7ff ff6d 	bl	80076dc <__ssputs_r>
 8007802:	3001      	adds	r0, #1
 8007804:	f000 80aa 	beq.w	800795c <_svfiprintf_r+0x1c8>
 8007808:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800780a:	445a      	add	r2, fp
 800780c:	9209      	str	r2, [sp, #36]	; 0x24
 800780e:	f89a 3000 	ldrb.w	r3, [sl]
 8007812:	2b00      	cmp	r3, #0
 8007814:	f000 80a2 	beq.w	800795c <_svfiprintf_r+0x1c8>
 8007818:	2300      	movs	r3, #0
 800781a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800781e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007822:	f10a 0a01 	add.w	sl, sl, #1
 8007826:	9304      	str	r3, [sp, #16]
 8007828:	9307      	str	r3, [sp, #28]
 800782a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800782e:	931a      	str	r3, [sp, #104]	; 0x68
 8007830:	4654      	mov	r4, sl
 8007832:	2205      	movs	r2, #5
 8007834:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007838:	4851      	ldr	r0, [pc, #324]	; (8007980 <_svfiprintf_r+0x1ec>)
 800783a:	f7ff fb0b 	bl	8006e54 <memchr>
 800783e:	9a04      	ldr	r2, [sp, #16]
 8007840:	b9d8      	cbnz	r0, 800787a <_svfiprintf_r+0xe6>
 8007842:	06d0      	lsls	r0, r2, #27
 8007844:	bf44      	itt	mi
 8007846:	2320      	movmi	r3, #32
 8007848:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800784c:	0711      	lsls	r1, r2, #28
 800784e:	bf44      	itt	mi
 8007850:	232b      	movmi	r3, #43	; 0x2b
 8007852:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007856:	f89a 3000 	ldrb.w	r3, [sl]
 800785a:	2b2a      	cmp	r3, #42	; 0x2a
 800785c:	d015      	beq.n	800788a <_svfiprintf_r+0xf6>
 800785e:	4654      	mov	r4, sl
 8007860:	2000      	movs	r0, #0
 8007862:	f04f 0c0a 	mov.w	ip, #10
 8007866:	9a07      	ldr	r2, [sp, #28]
 8007868:	4621      	mov	r1, r4
 800786a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800786e:	3b30      	subs	r3, #48	; 0x30
 8007870:	2b09      	cmp	r3, #9
 8007872:	d94e      	bls.n	8007912 <_svfiprintf_r+0x17e>
 8007874:	b1b0      	cbz	r0, 80078a4 <_svfiprintf_r+0x110>
 8007876:	9207      	str	r2, [sp, #28]
 8007878:	e014      	b.n	80078a4 <_svfiprintf_r+0x110>
 800787a:	eba0 0308 	sub.w	r3, r0, r8
 800787e:	fa09 f303 	lsl.w	r3, r9, r3
 8007882:	4313      	orrs	r3, r2
 8007884:	46a2      	mov	sl, r4
 8007886:	9304      	str	r3, [sp, #16]
 8007888:	e7d2      	b.n	8007830 <_svfiprintf_r+0x9c>
 800788a:	9b03      	ldr	r3, [sp, #12]
 800788c:	1d19      	adds	r1, r3, #4
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	9103      	str	r1, [sp, #12]
 8007892:	2b00      	cmp	r3, #0
 8007894:	bfbb      	ittet	lt
 8007896:	425b      	neglt	r3, r3
 8007898:	f042 0202 	orrlt.w	r2, r2, #2
 800789c:	9307      	strge	r3, [sp, #28]
 800789e:	9307      	strlt	r3, [sp, #28]
 80078a0:	bfb8      	it	lt
 80078a2:	9204      	strlt	r2, [sp, #16]
 80078a4:	7823      	ldrb	r3, [r4, #0]
 80078a6:	2b2e      	cmp	r3, #46	; 0x2e
 80078a8:	d10c      	bne.n	80078c4 <_svfiprintf_r+0x130>
 80078aa:	7863      	ldrb	r3, [r4, #1]
 80078ac:	2b2a      	cmp	r3, #42	; 0x2a
 80078ae:	d135      	bne.n	800791c <_svfiprintf_r+0x188>
 80078b0:	9b03      	ldr	r3, [sp, #12]
 80078b2:	3402      	adds	r4, #2
 80078b4:	1d1a      	adds	r2, r3, #4
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	9203      	str	r2, [sp, #12]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	bfb8      	it	lt
 80078be:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80078c2:	9305      	str	r3, [sp, #20]
 80078c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007990 <_svfiprintf_r+0x1fc>
 80078c8:	2203      	movs	r2, #3
 80078ca:	4650      	mov	r0, sl
 80078cc:	7821      	ldrb	r1, [r4, #0]
 80078ce:	f7ff fac1 	bl	8006e54 <memchr>
 80078d2:	b140      	cbz	r0, 80078e6 <_svfiprintf_r+0x152>
 80078d4:	2340      	movs	r3, #64	; 0x40
 80078d6:	eba0 000a 	sub.w	r0, r0, sl
 80078da:	fa03 f000 	lsl.w	r0, r3, r0
 80078de:	9b04      	ldr	r3, [sp, #16]
 80078e0:	3401      	adds	r4, #1
 80078e2:	4303      	orrs	r3, r0
 80078e4:	9304      	str	r3, [sp, #16]
 80078e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078ea:	2206      	movs	r2, #6
 80078ec:	4825      	ldr	r0, [pc, #148]	; (8007984 <_svfiprintf_r+0x1f0>)
 80078ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80078f2:	f7ff faaf 	bl	8006e54 <memchr>
 80078f6:	2800      	cmp	r0, #0
 80078f8:	d038      	beq.n	800796c <_svfiprintf_r+0x1d8>
 80078fa:	4b23      	ldr	r3, [pc, #140]	; (8007988 <_svfiprintf_r+0x1f4>)
 80078fc:	bb1b      	cbnz	r3, 8007946 <_svfiprintf_r+0x1b2>
 80078fe:	9b03      	ldr	r3, [sp, #12]
 8007900:	3307      	adds	r3, #7
 8007902:	f023 0307 	bic.w	r3, r3, #7
 8007906:	3308      	adds	r3, #8
 8007908:	9303      	str	r3, [sp, #12]
 800790a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800790c:	4433      	add	r3, r6
 800790e:	9309      	str	r3, [sp, #36]	; 0x24
 8007910:	e767      	b.n	80077e2 <_svfiprintf_r+0x4e>
 8007912:	460c      	mov	r4, r1
 8007914:	2001      	movs	r0, #1
 8007916:	fb0c 3202 	mla	r2, ip, r2, r3
 800791a:	e7a5      	b.n	8007868 <_svfiprintf_r+0xd4>
 800791c:	2300      	movs	r3, #0
 800791e:	f04f 0c0a 	mov.w	ip, #10
 8007922:	4619      	mov	r1, r3
 8007924:	3401      	adds	r4, #1
 8007926:	9305      	str	r3, [sp, #20]
 8007928:	4620      	mov	r0, r4
 800792a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800792e:	3a30      	subs	r2, #48	; 0x30
 8007930:	2a09      	cmp	r2, #9
 8007932:	d903      	bls.n	800793c <_svfiprintf_r+0x1a8>
 8007934:	2b00      	cmp	r3, #0
 8007936:	d0c5      	beq.n	80078c4 <_svfiprintf_r+0x130>
 8007938:	9105      	str	r1, [sp, #20]
 800793a:	e7c3      	b.n	80078c4 <_svfiprintf_r+0x130>
 800793c:	4604      	mov	r4, r0
 800793e:	2301      	movs	r3, #1
 8007940:	fb0c 2101 	mla	r1, ip, r1, r2
 8007944:	e7f0      	b.n	8007928 <_svfiprintf_r+0x194>
 8007946:	ab03      	add	r3, sp, #12
 8007948:	9300      	str	r3, [sp, #0]
 800794a:	462a      	mov	r2, r5
 800794c:	4638      	mov	r0, r7
 800794e:	4b0f      	ldr	r3, [pc, #60]	; (800798c <_svfiprintf_r+0x1f8>)
 8007950:	a904      	add	r1, sp, #16
 8007952:	f7fe f815 	bl	8005980 <_printf_float>
 8007956:	1c42      	adds	r2, r0, #1
 8007958:	4606      	mov	r6, r0
 800795a:	d1d6      	bne.n	800790a <_svfiprintf_r+0x176>
 800795c:	89ab      	ldrh	r3, [r5, #12]
 800795e:	065b      	lsls	r3, r3, #25
 8007960:	f53f af2c 	bmi.w	80077bc <_svfiprintf_r+0x28>
 8007964:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007966:	b01d      	add	sp, #116	; 0x74
 8007968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800796c:	ab03      	add	r3, sp, #12
 800796e:	9300      	str	r3, [sp, #0]
 8007970:	462a      	mov	r2, r5
 8007972:	4638      	mov	r0, r7
 8007974:	4b05      	ldr	r3, [pc, #20]	; (800798c <_svfiprintf_r+0x1f8>)
 8007976:	a904      	add	r1, sp, #16
 8007978:	f7fe fa9e 	bl	8005eb8 <_printf_i>
 800797c:	e7eb      	b.n	8007956 <_svfiprintf_r+0x1c2>
 800797e:	bf00      	nop
 8007980:	0800b9b4 	.word	0x0800b9b4
 8007984:	0800b9be 	.word	0x0800b9be
 8007988:	08005981 	.word	0x08005981
 800798c:	080076dd 	.word	0x080076dd
 8007990:	0800b9ba 	.word	0x0800b9ba

08007994 <_sbrk_r>:
 8007994:	b538      	push	{r3, r4, r5, lr}
 8007996:	2300      	movs	r3, #0
 8007998:	4d05      	ldr	r5, [pc, #20]	; (80079b0 <_sbrk_r+0x1c>)
 800799a:	4604      	mov	r4, r0
 800799c:	4608      	mov	r0, r1
 800799e:	602b      	str	r3, [r5, #0]
 80079a0:	f7fa fbaa 	bl	80020f8 <_sbrk>
 80079a4:	1c43      	adds	r3, r0, #1
 80079a6:	d102      	bne.n	80079ae <_sbrk_r+0x1a>
 80079a8:	682b      	ldr	r3, [r5, #0]
 80079aa:	b103      	cbz	r3, 80079ae <_sbrk_r+0x1a>
 80079ac:	6023      	str	r3, [r4, #0]
 80079ae:	bd38      	pop	{r3, r4, r5, pc}
 80079b0:	20000ad4 	.word	0x20000ad4

080079b4 <__assert_func>:
 80079b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80079b6:	4614      	mov	r4, r2
 80079b8:	461a      	mov	r2, r3
 80079ba:	4b09      	ldr	r3, [pc, #36]	; (80079e0 <__assert_func+0x2c>)
 80079bc:	4605      	mov	r5, r0
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	68d8      	ldr	r0, [r3, #12]
 80079c2:	b14c      	cbz	r4, 80079d8 <__assert_func+0x24>
 80079c4:	4b07      	ldr	r3, [pc, #28]	; (80079e4 <__assert_func+0x30>)
 80079c6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80079ca:	9100      	str	r1, [sp, #0]
 80079cc:	462b      	mov	r3, r5
 80079ce:	4906      	ldr	r1, [pc, #24]	; (80079e8 <__assert_func+0x34>)
 80079d0:	f000 f80e 	bl	80079f0 <fiprintf>
 80079d4:	f000 faa2 	bl	8007f1c <abort>
 80079d8:	4b04      	ldr	r3, [pc, #16]	; (80079ec <__assert_func+0x38>)
 80079da:	461c      	mov	r4, r3
 80079dc:	e7f3      	b.n	80079c6 <__assert_func+0x12>
 80079de:	bf00      	nop
 80079e0:	200000a4 	.word	0x200000a4
 80079e4:	0800b9c5 	.word	0x0800b9c5
 80079e8:	0800b9d2 	.word	0x0800b9d2
 80079ec:	0800ba00 	.word	0x0800ba00

080079f0 <fiprintf>:
 80079f0:	b40e      	push	{r1, r2, r3}
 80079f2:	b503      	push	{r0, r1, lr}
 80079f4:	4601      	mov	r1, r0
 80079f6:	ab03      	add	r3, sp, #12
 80079f8:	4805      	ldr	r0, [pc, #20]	; (8007a10 <fiprintf+0x20>)
 80079fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80079fe:	6800      	ldr	r0, [r0, #0]
 8007a00:	9301      	str	r3, [sp, #4]
 8007a02:	f000 f88d 	bl	8007b20 <_vfiprintf_r>
 8007a06:	b002      	add	sp, #8
 8007a08:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a0c:	b003      	add	sp, #12
 8007a0e:	4770      	bx	lr
 8007a10:	200000a4 	.word	0x200000a4

08007a14 <__ascii_mbtowc>:
 8007a14:	b082      	sub	sp, #8
 8007a16:	b901      	cbnz	r1, 8007a1a <__ascii_mbtowc+0x6>
 8007a18:	a901      	add	r1, sp, #4
 8007a1a:	b142      	cbz	r2, 8007a2e <__ascii_mbtowc+0x1a>
 8007a1c:	b14b      	cbz	r3, 8007a32 <__ascii_mbtowc+0x1e>
 8007a1e:	7813      	ldrb	r3, [r2, #0]
 8007a20:	600b      	str	r3, [r1, #0]
 8007a22:	7812      	ldrb	r2, [r2, #0]
 8007a24:	1e10      	subs	r0, r2, #0
 8007a26:	bf18      	it	ne
 8007a28:	2001      	movne	r0, #1
 8007a2a:	b002      	add	sp, #8
 8007a2c:	4770      	bx	lr
 8007a2e:	4610      	mov	r0, r2
 8007a30:	e7fb      	b.n	8007a2a <__ascii_mbtowc+0x16>
 8007a32:	f06f 0001 	mvn.w	r0, #1
 8007a36:	e7f8      	b.n	8007a2a <__ascii_mbtowc+0x16>

08007a38 <memmove>:
 8007a38:	4288      	cmp	r0, r1
 8007a3a:	b510      	push	{r4, lr}
 8007a3c:	eb01 0402 	add.w	r4, r1, r2
 8007a40:	d902      	bls.n	8007a48 <memmove+0x10>
 8007a42:	4284      	cmp	r4, r0
 8007a44:	4623      	mov	r3, r4
 8007a46:	d807      	bhi.n	8007a58 <memmove+0x20>
 8007a48:	1e43      	subs	r3, r0, #1
 8007a4a:	42a1      	cmp	r1, r4
 8007a4c:	d008      	beq.n	8007a60 <memmove+0x28>
 8007a4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a52:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a56:	e7f8      	b.n	8007a4a <memmove+0x12>
 8007a58:	4601      	mov	r1, r0
 8007a5a:	4402      	add	r2, r0
 8007a5c:	428a      	cmp	r2, r1
 8007a5e:	d100      	bne.n	8007a62 <memmove+0x2a>
 8007a60:	bd10      	pop	{r4, pc}
 8007a62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007a6a:	e7f7      	b.n	8007a5c <memmove+0x24>

08007a6c <__malloc_lock>:
 8007a6c:	4801      	ldr	r0, [pc, #4]	; (8007a74 <__malloc_lock+0x8>)
 8007a6e:	f000 bc15 	b.w	800829c <__retarget_lock_acquire_recursive>
 8007a72:	bf00      	nop
 8007a74:	20000adc 	.word	0x20000adc

08007a78 <__malloc_unlock>:
 8007a78:	4801      	ldr	r0, [pc, #4]	; (8007a80 <__malloc_unlock+0x8>)
 8007a7a:	f000 bc10 	b.w	800829e <__retarget_lock_release_recursive>
 8007a7e:	bf00      	nop
 8007a80:	20000adc 	.word	0x20000adc

08007a84 <_realloc_r>:
 8007a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a86:	4607      	mov	r7, r0
 8007a88:	4614      	mov	r4, r2
 8007a8a:	460e      	mov	r6, r1
 8007a8c:	b921      	cbnz	r1, 8007a98 <_realloc_r+0x14>
 8007a8e:	4611      	mov	r1, r2
 8007a90:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007a94:	f7ff bdc8 	b.w	8007628 <_malloc_r>
 8007a98:	b922      	cbnz	r2, 8007aa4 <_realloc_r+0x20>
 8007a9a:	f7ff fd79 	bl	8007590 <_free_r>
 8007a9e:	4625      	mov	r5, r4
 8007aa0:	4628      	mov	r0, r5
 8007aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007aa4:	f000 fc60 	bl	8008368 <_malloc_usable_size_r>
 8007aa8:	42a0      	cmp	r0, r4
 8007aaa:	d20f      	bcs.n	8007acc <_realloc_r+0x48>
 8007aac:	4621      	mov	r1, r4
 8007aae:	4638      	mov	r0, r7
 8007ab0:	f7ff fdba 	bl	8007628 <_malloc_r>
 8007ab4:	4605      	mov	r5, r0
 8007ab6:	2800      	cmp	r0, #0
 8007ab8:	d0f2      	beq.n	8007aa0 <_realloc_r+0x1c>
 8007aba:	4631      	mov	r1, r6
 8007abc:	4622      	mov	r2, r4
 8007abe:	f7fd feab 	bl	8005818 <memcpy>
 8007ac2:	4631      	mov	r1, r6
 8007ac4:	4638      	mov	r0, r7
 8007ac6:	f7ff fd63 	bl	8007590 <_free_r>
 8007aca:	e7e9      	b.n	8007aa0 <_realloc_r+0x1c>
 8007acc:	4635      	mov	r5, r6
 8007ace:	e7e7      	b.n	8007aa0 <_realloc_r+0x1c>

08007ad0 <__sfputc_r>:
 8007ad0:	6893      	ldr	r3, [r2, #8]
 8007ad2:	b410      	push	{r4}
 8007ad4:	3b01      	subs	r3, #1
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	6093      	str	r3, [r2, #8]
 8007ada:	da07      	bge.n	8007aec <__sfputc_r+0x1c>
 8007adc:	6994      	ldr	r4, [r2, #24]
 8007ade:	42a3      	cmp	r3, r4
 8007ae0:	db01      	blt.n	8007ae6 <__sfputc_r+0x16>
 8007ae2:	290a      	cmp	r1, #10
 8007ae4:	d102      	bne.n	8007aec <__sfputc_r+0x1c>
 8007ae6:	bc10      	pop	{r4}
 8007ae8:	f000 b94a 	b.w	8007d80 <__swbuf_r>
 8007aec:	6813      	ldr	r3, [r2, #0]
 8007aee:	1c58      	adds	r0, r3, #1
 8007af0:	6010      	str	r0, [r2, #0]
 8007af2:	7019      	strb	r1, [r3, #0]
 8007af4:	4608      	mov	r0, r1
 8007af6:	bc10      	pop	{r4}
 8007af8:	4770      	bx	lr

08007afa <__sfputs_r>:
 8007afa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007afc:	4606      	mov	r6, r0
 8007afe:	460f      	mov	r7, r1
 8007b00:	4614      	mov	r4, r2
 8007b02:	18d5      	adds	r5, r2, r3
 8007b04:	42ac      	cmp	r4, r5
 8007b06:	d101      	bne.n	8007b0c <__sfputs_r+0x12>
 8007b08:	2000      	movs	r0, #0
 8007b0a:	e007      	b.n	8007b1c <__sfputs_r+0x22>
 8007b0c:	463a      	mov	r2, r7
 8007b0e:	4630      	mov	r0, r6
 8007b10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b14:	f7ff ffdc 	bl	8007ad0 <__sfputc_r>
 8007b18:	1c43      	adds	r3, r0, #1
 8007b1a:	d1f3      	bne.n	8007b04 <__sfputs_r+0xa>
 8007b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007b20 <_vfiprintf_r>:
 8007b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b24:	460d      	mov	r5, r1
 8007b26:	4614      	mov	r4, r2
 8007b28:	4698      	mov	r8, r3
 8007b2a:	4606      	mov	r6, r0
 8007b2c:	b09d      	sub	sp, #116	; 0x74
 8007b2e:	b118      	cbz	r0, 8007b38 <_vfiprintf_r+0x18>
 8007b30:	6983      	ldr	r3, [r0, #24]
 8007b32:	b90b      	cbnz	r3, 8007b38 <_vfiprintf_r+0x18>
 8007b34:	f000 fb14 	bl	8008160 <__sinit>
 8007b38:	4b89      	ldr	r3, [pc, #548]	; (8007d60 <_vfiprintf_r+0x240>)
 8007b3a:	429d      	cmp	r5, r3
 8007b3c:	d11b      	bne.n	8007b76 <_vfiprintf_r+0x56>
 8007b3e:	6875      	ldr	r5, [r6, #4]
 8007b40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b42:	07d9      	lsls	r1, r3, #31
 8007b44:	d405      	bmi.n	8007b52 <_vfiprintf_r+0x32>
 8007b46:	89ab      	ldrh	r3, [r5, #12]
 8007b48:	059a      	lsls	r2, r3, #22
 8007b4a:	d402      	bmi.n	8007b52 <_vfiprintf_r+0x32>
 8007b4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b4e:	f000 fba5 	bl	800829c <__retarget_lock_acquire_recursive>
 8007b52:	89ab      	ldrh	r3, [r5, #12]
 8007b54:	071b      	lsls	r3, r3, #28
 8007b56:	d501      	bpl.n	8007b5c <_vfiprintf_r+0x3c>
 8007b58:	692b      	ldr	r3, [r5, #16]
 8007b5a:	b9eb      	cbnz	r3, 8007b98 <_vfiprintf_r+0x78>
 8007b5c:	4629      	mov	r1, r5
 8007b5e:	4630      	mov	r0, r6
 8007b60:	f000 f96e 	bl	8007e40 <__swsetup_r>
 8007b64:	b1c0      	cbz	r0, 8007b98 <_vfiprintf_r+0x78>
 8007b66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b68:	07dc      	lsls	r4, r3, #31
 8007b6a:	d50e      	bpl.n	8007b8a <_vfiprintf_r+0x6a>
 8007b6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b70:	b01d      	add	sp, #116	; 0x74
 8007b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b76:	4b7b      	ldr	r3, [pc, #492]	; (8007d64 <_vfiprintf_r+0x244>)
 8007b78:	429d      	cmp	r5, r3
 8007b7a:	d101      	bne.n	8007b80 <_vfiprintf_r+0x60>
 8007b7c:	68b5      	ldr	r5, [r6, #8]
 8007b7e:	e7df      	b.n	8007b40 <_vfiprintf_r+0x20>
 8007b80:	4b79      	ldr	r3, [pc, #484]	; (8007d68 <_vfiprintf_r+0x248>)
 8007b82:	429d      	cmp	r5, r3
 8007b84:	bf08      	it	eq
 8007b86:	68f5      	ldreq	r5, [r6, #12]
 8007b88:	e7da      	b.n	8007b40 <_vfiprintf_r+0x20>
 8007b8a:	89ab      	ldrh	r3, [r5, #12]
 8007b8c:	0598      	lsls	r0, r3, #22
 8007b8e:	d4ed      	bmi.n	8007b6c <_vfiprintf_r+0x4c>
 8007b90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b92:	f000 fb84 	bl	800829e <__retarget_lock_release_recursive>
 8007b96:	e7e9      	b.n	8007b6c <_vfiprintf_r+0x4c>
 8007b98:	2300      	movs	r3, #0
 8007b9a:	9309      	str	r3, [sp, #36]	; 0x24
 8007b9c:	2320      	movs	r3, #32
 8007b9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ba2:	2330      	movs	r3, #48	; 0x30
 8007ba4:	f04f 0901 	mov.w	r9, #1
 8007ba8:	f8cd 800c 	str.w	r8, [sp, #12]
 8007bac:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007d6c <_vfiprintf_r+0x24c>
 8007bb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007bb4:	4623      	mov	r3, r4
 8007bb6:	469a      	mov	sl, r3
 8007bb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007bbc:	b10a      	cbz	r2, 8007bc2 <_vfiprintf_r+0xa2>
 8007bbe:	2a25      	cmp	r2, #37	; 0x25
 8007bc0:	d1f9      	bne.n	8007bb6 <_vfiprintf_r+0x96>
 8007bc2:	ebba 0b04 	subs.w	fp, sl, r4
 8007bc6:	d00b      	beq.n	8007be0 <_vfiprintf_r+0xc0>
 8007bc8:	465b      	mov	r3, fp
 8007bca:	4622      	mov	r2, r4
 8007bcc:	4629      	mov	r1, r5
 8007bce:	4630      	mov	r0, r6
 8007bd0:	f7ff ff93 	bl	8007afa <__sfputs_r>
 8007bd4:	3001      	adds	r0, #1
 8007bd6:	f000 80aa 	beq.w	8007d2e <_vfiprintf_r+0x20e>
 8007bda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007bdc:	445a      	add	r2, fp
 8007bde:	9209      	str	r2, [sp, #36]	; 0x24
 8007be0:	f89a 3000 	ldrb.w	r3, [sl]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	f000 80a2 	beq.w	8007d2e <_vfiprintf_r+0x20e>
 8007bea:	2300      	movs	r3, #0
 8007bec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007bf0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007bf4:	f10a 0a01 	add.w	sl, sl, #1
 8007bf8:	9304      	str	r3, [sp, #16]
 8007bfa:	9307      	str	r3, [sp, #28]
 8007bfc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c00:	931a      	str	r3, [sp, #104]	; 0x68
 8007c02:	4654      	mov	r4, sl
 8007c04:	2205      	movs	r2, #5
 8007c06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c0a:	4858      	ldr	r0, [pc, #352]	; (8007d6c <_vfiprintf_r+0x24c>)
 8007c0c:	f7ff f922 	bl	8006e54 <memchr>
 8007c10:	9a04      	ldr	r2, [sp, #16]
 8007c12:	b9d8      	cbnz	r0, 8007c4c <_vfiprintf_r+0x12c>
 8007c14:	06d1      	lsls	r1, r2, #27
 8007c16:	bf44      	itt	mi
 8007c18:	2320      	movmi	r3, #32
 8007c1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c1e:	0713      	lsls	r3, r2, #28
 8007c20:	bf44      	itt	mi
 8007c22:	232b      	movmi	r3, #43	; 0x2b
 8007c24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c28:	f89a 3000 	ldrb.w	r3, [sl]
 8007c2c:	2b2a      	cmp	r3, #42	; 0x2a
 8007c2e:	d015      	beq.n	8007c5c <_vfiprintf_r+0x13c>
 8007c30:	4654      	mov	r4, sl
 8007c32:	2000      	movs	r0, #0
 8007c34:	f04f 0c0a 	mov.w	ip, #10
 8007c38:	9a07      	ldr	r2, [sp, #28]
 8007c3a:	4621      	mov	r1, r4
 8007c3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c40:	3b30      	subs	r3, #48	; 0x30
 8007c42:	2b09      	cmp	r3, #9
 8007c44:	d94e      	bls.n	8007ce4 <_vfiprintf_r+0x1c4>
 8007c46:	b1b0      	cbz	r0, 8007c76 <_vfiprintf_r+0x156>
 8007c48:	9207      	str	r2, [sp, #28]
 8007c4a:	e014      	b.n	8007c76 <_vfiprintf_r+0x156>
 8007c4c:	eba0 0308 	sub.w	r3, r0, r8
 8007c50:	fa09 f303 	lsl.w	r3, r9, r3
 8007c54:	4313      	orrs	r3, r2
 8007c56:	46a2      	mov	sl, r4
 8007c58:	9304      	str	r3, [sp, #16]
 8007c5a:	e7d2      	b.n	8007c02 <_vfiprintf_r+0xe2>
 8007c5c:	9b03      	ldr	r3, [sp, #12]
 8007c5e:	1d19      	adds	r1, r3, #4
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	9103      	str	r1, [sp, #12]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	bfbb      	ittet	lt
 8007c68:	425b      	neglt	r3, r3
 8007c6a:	f042 0202 	orrlt.w	r2, r2, #2
 8007c6e:	9307      	strge	r3, [sp, #28]
 8007c70:	9307      	strlt	r3, [sp, #28]
 8007c72:	bfb8      	it	lt
 8007c74:	9204      	strlt	r2, [sp, #16]
 8007c76:	7823      	ldrb	r3, [r4, #0]
 8007c78:	2b2e      	cmp	r3, #46	; 0x2e
 8007c7a:	d10c      	bne.n	8007c96 <_vfiprintf_r+0x176>
 8007c7c:	7863      	ldrb	r3, [r4, #1]
 8007c7e:	2b2a      	cmp	r3, #42	; 0x2a
 8007c80:	d135      	bne.n	8007cee <_vfiprintf_r+0x1ce>
 8007c82:	9b03      	ldr	r3, [sp, #12]
 8007c84:	3402      	adds	r4, #2
 8007c86:	1d1a      	adds	r2, r3, #4
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	9203      	str	r2, [sp, #12]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	bfb8      	it	lt
 8007c90:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007c94:	9305      	str	r3, [sp, #20]
 8007c96:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007d7c <_vfiprintf_r+0x25c>
 8007c9a:	2203      	movs	r2, #3
 8007c9c:	4650      	mov	r0, sl
 8007c9e:	7821      	ldrb	r1, [r4, #0]
 8007ca0:	f7ff f8d8 	bl	8006e54 <memchr>
 8007ca4:	b140      	cbz	r0, 8007cb8 <_vfiprintf_r+0x198>
 8007ca6:	2340      	movs	r3, #64	; 0x40
 8007ca8:	eba0 000a 	sub.w	r0, r0, sl
 8007cac:	fa03 f000 	lsl.w	r0, r3, r0
 8007cb0:	9b04      	ldr	r3, [sp, #16]
 8007cb2:	3401      	adds	r4, #1
 8007cb4:	4303      	orrs	r3, r0
 8007cb6:	9304      	str	r3, [sp, #16]
 8007cb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cbc:	2206      	movs	r2, #6
 8007cbe:	482c      	ldr	r0, [pc, #176]	; (8007d70 <_vfiprintf_r+0x250>)
 8007cc0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007cc4:	f7ff f8c6 	bl	8006e54 <memchr>
 8007cc8:	2800      	cmp	r0, #0
 8007cca:	d03f      	beq.n	8007d4c <_vfiprintf_r+0x22c>
 8007ccc:	4b29      	ldr	r3, [pc, #164]	; (8007d74 <_vfiprintf_r+0x254>)
 8007cce:	bb1b      	cbnz	r3, 8007d18 <_vfiprintf_r+0x1f8>
 8007cd0:	9b03      	ldr	r3, [sp, #12]
 8007cd2:	3307      	adds	r3, #7
 8007cd4:	f023 0307 	bic.w	r3, r3, #7
 8007cd8:	3308      	adds	r3, #8
 8007cda:	9303      	str	r3, [sp, #12]
 8007cdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cde:	443b      	add	r3, r7
 8007ce0:	9309      	str	r3, [sp, #36]	; 0x24
 8007ce2:	e767      	b.n	8007bb4 <_vfiprintf_r+0x94>
 8007ce4:	460c      	mov	r4, r1
 8007ce6:	2001      	movs	r0, #1
 8007ce8:	fb0c 3202 	mla	r2, ip, r2, r3
 8007cec:	e7a5      	b.n	8007c3a <_vfiprintf_r+0x11a>
 8007cee:	2300      	movs	r3, #0
 8007cf0:	f04f 0c0a 	mov.w	ip, #10
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	3401      	adds	r4, #1
 8007cf8:	9305      	str	r3, [sp, #20]
 8007cfa:	4620      	mov	r0, r4
 8007cfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d00:	3a30      	subs	r2, #48	; 0x30
 8007d02:	2a09      	cmp	r2, #9
 8007d04:	d903      	bls.n	8007d0e <_vfiprintf_r+0x1ee>
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d0c5      	beq.n	8007c96 <_vfiprintf_r+0x176>
 8007d0a:	9105      	str	r1, [sp, #20]
 8007d0c:	e7c3      	b.n	8007c96 <_vfiprintf_r+0x176>
 8007d0e:	4604      	mov	r4, r0
 8007d10:	2301      	movs	r3, #1
 8007d12:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d16:	e7f0      	b.n	8007cfa <_vfiprintf_r+0x1da>
 8007d18:	ab03      	add	r3, sp, #12
 8007d1a:	9300      	str	r3, [sp, #0]
 8007d1c:	462a      	mov	r2, r5
 8007d1e:	4630      	mov	r0, r6
 8007d20:	4b15      	ldr	r3, [pc, #84]	; (8007d78 <_vfiprintf_r+0x258>)
 8007d22:	a904      	add	r1, sp, #16
 8007d24:	f7fd fe2c 	bl	8005980 <_printf_float>
 8007d28:	4607      	mov	r7, r0
 8007d2a:	1c78      	adds	r0, r7, #1
 8007d2c:	d1d6      	bne.n	8007cdc <_vfiprintf_r+0x1bc>
 8007d2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d30:	07d9      	lsls	r1, r3, #31
 8007d32:	d405      	bmi.n	8007d40 <_vfiprintf_r+0x220>
 8007d34:	89ab      	ldrh	r3, [r5, #12]
 8007d36:	059a      	lsls	r2, r3, #22
 8007d38:	d402      	bmi.n	8007d40 <_vfiprintf_r+0x220>
 8007d3a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d3c:	f000 faaf 	bl	800829e <__retarget_lock_release_recursive>
 8007d40:	89ab      	ldrh	r3, [r5, #12]
 8007d42:	065b      	lsls	r3, r3, #25
 8007d44:	f53f af12 	bmi.w	8007b6c <_vfiprintf_r+0x4c>
 8007d48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d4a:	e711      	b.n	8007b70 <_vfiprintf_r+0x50>
 8007d4c:	ab03      	add	r3, sp, #12
 8007d4e:	9300      	str	r3, [sp, #0]
 8007d50:	462a      	mov	r2, r5
 8007d52:	4630      	mov	r0, r6
 8007d54:	4b08      	ldr	r3, [pc, #32]	; (8007d78 <_vfiprintf_r+0x258>)
 8007d56:	a904      	add	r1, sp, #16
 8007d58:	f7fe f8ae 	bl	8005eb8 <_printf_i>
 8007d5c:	e7e4      	b.n	8007d28 <_vfiprintf_r+0x208>
 8007d5e:	bf00      	nop
 8007d60:	0800bb2c 	.word	0x0800bb2c
 8007d64:	0800bb4c 	.word	0x0800bb4c
 8007d68:	0800bb0c 	.word	0x0800bb0c
 8007d6c:	0800b9b4 	.word	0x0800b9b4
 8007d70:	0800b9be 	.word	0x0800b9be
 8007d74:	08005981 	.word	0x08005981
 8007d78:	08007afb 	.word	0x08007afb
 8007d7c:	0800b9ba 	.word	0x0800b9ba

08007d80 <__swbuf_r>:
 8007d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d82:	460e      	mov	r6, r1
 8007d84:	4614      	mov	r4, r2
 8007d86:	4605      	mov	r5, r0
 8007d88:	b118      	cbz	r0, 8007d92 <__swbuf_r+0x12>
 8007d8a:	6983      	ldr	r3, [r0, #24]
 8007d8c:	b90b      	cbnz	r3, 8007d92 <__swbuf_r+0x12>
 8007d8e:	f000 f9e7 	bl	8008160 <__sinit>
 8007d92:	4b21      	ldr	r3, [pc, #132]	; (8007e18 <__swbuf_r+0x98>)
 8007d94:	429c      	cmp	r4, r3
 8007d96:	d12b      	bne.n	8007df0 <__swbuf_r+0x70>
 8007d98:	686c      	ldr	r4, [r5, #4]
 8007d9a:	69a3      	ldr	r3, [r4, #24]
 8007d9c:	60a3      	str	r3, [r4, #8]
 8007d9e:	89a3      	ldrh	r3, [r4, #12]
 8007da0:	071a      	lsls	r2, r3, #28
 8007da2:	d52f      	bpl.n	8007e04 <__swbuf_r+0x84>
 8007da4:	6923      	ldr	r3, [r4, #16]
 8007da6:	b36b      	cbz	r3, 8007e04 <__swbuf_r+0x84>
 8007da8:	6923      	ldr	r3, [r4, #16]
 8007daa:	6820      	ldr	r0, [r4, #0]
 8007dac:	b2f6      	uxtb	r6, r6
 8007dae:	1ac0      	subs	r0, r0, r3
 8007db0:	6963      	ldr	r3, [r4, #20]
 8007db2:	4637      	mov	r7, r6
 8007db4:	4283      	cmp	r3, r0
 8007db6:	dc04      	bgt.n	8007dc2 <__swbuf_r+0x42>
 8007db8:	4621      	mov	r1, r4
 8007dba:	4628      	mov	r0, r5
 8007dbc:	f000 f93c 	bl	8008038 <_fflush_r>
 8007dc0:	bb30      	cbnz	r0, 8007e10 <__swbuf_r+0x90>
 8007dc2:	68a3      	ldr	r3, [r4, #8]
 8007dc4:	3001      	adds	r0, #1
 8007dc6:	3b01      	subs	r3, #1
 8007dc8:	60a3      	str	r3, [r4, #8]
 8007dca:	6823      	ldr	r3, [r4, #0]
 8007dcc:	1c5a      	adds	r2, r3, #1
 8007dce:	6022      	str	r2, [r4, #0]
 8007dd0:	701e      	strb	r6, [r3, #0]
 8007dd2:	6963      	ldr	r3, [r4, #20]
 8007dd4:	4283      	cmp	r3, r0
 8007dd6:	d004      	beq.n	8007de2 <__swbuf_r+0x62>
 8007dd8:	89a3      	ldrh	r3, [r4, #12]
 8007dda:	07db      	lsls	r3, r3, #31
 8007ddc:	d506      	bpl.n	8007dec <__swbuf_r+0x6c>
 8007dde:	2e0a      	cmp	r6, #10
 8007de0:	d104      	bne.n	8007dec <__swbuf_r+0x6c>
 8007de2:	4621      	mov	r1, r4
 8007de4:	4628      	mov	r0, r5
 8007de6:	f000 f927 	bl	8008038 <_fflush_r>
 8007dea:	b988      	cbnz	r0, 8007e10 <__swbuf_r+0x90>
 8007dec:	4638      	mov	r0, r7
 8007dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007df0:	4b0a      	ldr	r3, [pc, #40]	; (8007e1c <__swbuf_r+0x9c>)
 8007df2:	429c      	cmp	r4, r3
 8007df4:	d101      	bne.n	8007dfa <__swbuf_r+0x7a>
 8007df6:	68ac      	ldr	r4, [r5, #8]
 8007df8:	e7cf      	b.n	8007d9a <__swbuf_r+0x1a>
 8007dfa:	4b09      	ldr	r3, [pc, #36]	; (8007e20 <__swbuf_r+0xa0>)
 8007dfc:	429c      	cmp	r4, r3
 8007dfe:	bf08      	it	eq
 8007e00:	68ec      	ldreq	r4, [r5, #12]
 8007e02:	e7ca      	b.n	8007d9a <__swbuf_r+0x1a>
 8007e04:	4621      	mov	r1, r4
 8007e06:	4628      	mov	r0, r5
 8007e08:	f000 f81a 	bl	8007e40 <__swsetup_r>
 8007e0c:	2800      	cmp	r0, #0
 8007e0e:	d0cb      	beq.n	8007da8 <__swbuf_r+0x28>
 8007e10:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007e14:	e7ea      	b.n	8007dec <__swbuf_r+0x6c>
 8007e16:	bf00      	nop
 8007e18:	0800bb2c 	.word	0x0800bb2c
 8007e1c:	0800bb4c 	.word	0x0800bb4c
 8007e20:	0800bb0c 	.word	0x0800bb0c

08007e24 <__ascii_wctomb>:
 8007e24:	4603      	mov	r3, r0
 8007e26:	4608      	mov	r0, r1
 8007e28:	b141      	cbz	r1, 8007e3c <__ascii_wctomb+0x18>
 8007e2a:	2aff      	cmp	r2, #255	; 0xff
 8007e2c:	d904      	bls.n	8007e38 <__ascii_wctomb+0x14>
 8007e2e:	228a      	movs	r2, #138	; 0x8a
 8007e30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e34:	601a      	str	r2, [r3, #0]
 8007e36:	4770      	bx	lr
 8007e38:	2001      	movs	r0, #1
 8007e3a:	700a      	strb	r2, [r1, #0]
 8007e3c:	4770      	bx	lr
	...

08007e40 <__swsetup_r>:
 8007e40:	4b32      	ldr	r3, [pc, #200]	; (8007f0c <__swsetup_r+0xcc>)
 8007e42:	b570      	push	{r4, r5, r6, lr}
 8007e44:	681d      	ldr	r5, [r3, #0]
 8007e46:	4606      	mov	r6, r0
 8007e48:	460c      	mov	r4, r1
 8007e4a:	b125      	cbz	r5, 8007e56 <__swsetup_r+0x16>
 8007e4c:	69ab      	ldr	r3, [r5, #24]
 8007e4e:	b913      	cbnz	r3, 8007e56 <__swsetup_r+0x16>
 8007e50:	4628      	mov	r0, r5
 8007e52:	f000 f985 	bl	8008160 <__sinit>
 8007e56:	4b2e      	ldr	r3, [pc, #184]	; (8007f10 <__swsetup_r+0xd0>)
 8007e58:	429c      	cmp	r4, r3
 8007e5a:	d10f      	bne.n	8007e7c <__swsetup_r+0x3c>
 8007e5c:	686c      	ldr	r4, [r5, #4]
 8007e5e:	89a3      	ldrh	r3, [r4, #12]
 8007e60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e64:	0719      	lsls	r1, r3, #28
 8007e66:	d42c      	bmi.n	8007ec2 <__swsetup_r+0x82>
 8007e68:	06dd      	lsls	r5, r3, #27
 8007e6a:	d411      	bmi.n	8007e90 <__swsetup_r+0x50>
 8007e6c:	2309      	movs	r3, #9
 8007e6e:	6033      	str	r3, [r6, #0]
 8007e70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007e74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e78:	81a3      	strh	r3, [r4, #12]
 8007e7a:	e03e      	b.n	8007efa <__swsetup_r+0xba>
 8007e7c:	4b25      	ldr	r3, [pc, #148]	; (8007f14 <__swsetup_r+0xd4>)
 8007e7e:	429c      	cmp	r4, r3
 8007e80:	d101      	bne.n	8007e86 <__swsetup_r+0x46>
 8007e82:	68ac      	ldr	r4, [r5, #8]
 8007e84:	e7eb      	b.n	8007e5e <__swsetup_r+0x1e>
 8007e86:	4b24      	ldr	r3, [pc, #144]	; (8007f18 <__swsetup_r+0xd8>)
 8007e88:	429c      	cmp	r4, r3
 8007e8a:	bf08      	it	eq
 8007e8c:	68ec      	ldreq	r4, [r5, #12]
 8007e8e:	e7e6      	b.n	8007e5e <__swsetup_r+0x1e>
 8007e90:	0758      	lsls	r0, r3, #29
 8007e92:	d512      	bpl.n	8007eba <__swsetup_r+0x7a>
 8007e94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e96:	b141      	cbz	r1, 8007eaa <__swsetup_r+0x6a>
 8007e98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e9c:	4299      	cmp	r1, r3
 8007e9e:	d002      	beq.n	8007ea6 <__swsetup_r+0x66>
 8007ea0:	4630      	mov	r0, r6
 8007ea2:	f7ff fb75 	bl	8007590 <_free_r>
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	6363      	str	r3, [r4, #52]	; 0x34
 8007eaa:	89a3      	ldrh	r3, [r4, #12]
 8007eac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007eb0:	81a3      	strh	r3, [r4, #12]
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	6063      	str	r3, [r4, #4]
 8007eb6:	6923      	ldr	r3, [r4, #16]
 8007eb8:	6023      	str	r3, [r4, #0]
 8007eba:	89a3      	ldrh	r3, [r4, #12]
 8007ebc:	f043 0308 	orr.w	r3, r3, #8
 8007ec0:	81a3      	strh	r3, [r4, #12]
 8007ec2:	6923      	ldr	r3, [r4, #16]
 8007ec4:	b94b      	cbnz	r3, 8007eda <__swsetup_r+0x9a>
 8007ec6:	89a3      	ldrh	r3, [r4, #12]
 8007ec8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007ecc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ed0:	d003      	beq.n	8007eda <__swsetup_r+0x9a>
 8007ed2:	4621      	mov	r1, r4
 8007ed4:	4630      	mov	r0, r6
 8007ed6:	f000 fa07 	bl	80082e8 <__smakebuf_r>
 8007eda:	89a0      	ldrh	r0, [r4, #12]
 8007edc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ee0:	f010 0301 	ands.w	r3, r0, #1
 8007ee4:	d00a      	beq.n	8007efc <__swsetup_r+0xbc>
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	60a3      	str	r3, [r4, #8]
 8007eea:	6963      	ldr	r3, [r4, #20]
 8007eec:	425b      	negs	r3, r3
 8007eee:	61a3      	str	r3, [r4, #24]
 8007ef0:	6923      	ldr	r3, [r4, #16]
 8007ef2:	b943      	cbnz	r3, 8007f06 <__swsetup_r+0xc6>
 8007ef4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007ef8:	d1ba      	bne.n	8007e70 <__swsetup_r+0x30>
 8007efa:	bd70      	pop	{r4, r5, r6, pc}
 8007efc:	0781      	lsls	r1, r0, #30
 8007efe:	bf58      	it	pl
 8007f00:	6963      	ldrpl	r3, [r4, #20]
 8007f02:	60a3      	str	r3, [r4, #8]
 8007f04:	e7f4      	b.n	8007ef0 <__swsetup_r+0xb0>
 8007f06:	2000      	movs	r0, #0
 8007f08:	e7f7      	b.n	8007efa <__swsetup_r+0xba>
 8007f0a:	bf00      	nop
 8007f0c:	200000a4 	.word	0x200000a4
 8007f10:	0800bb2c 	.word	0x0800bb2c
 8007f14:	0800bb4c 	.word	0x0800bb4c
 8007f18:	0800bb0c 	.word	0x0800bb0c

08007f1c <abort>:
 8007f1c:	2006      	movs	r0, #6
 8007f1e:	b508      	push	{r3, lr}
 8007f20:	f000 fa52 	bl	80083c8 <raise>
 8007f24:	2001      	movs	r0, #1
 8007f26:	f7fa f874 	bl	8002012 <_exit>
	...

08007f2c <__sflush_r>:
 8007f2c:	898a      	ldrh	r2, [r1, #12]
 8007f2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f32:	4605      	mov	r5, r0
 8007f34:	0710      	lsls	r0, r2, #28
 8007f36:	460c      	mov	r4, r1
 8007f38:	d458      	bmi.n	8007fec <__sflush_r+0xc0>
 8007f3a:	684b      	ldr	r3, [r1, #4]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	dc05      	bgt.n	8007f4c <__sflush_r+0x20>
 8007f40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	dc02      	bgt.n	8007f4c <__sflush_r+0x20>
 8007f46:	2000      	movs	r0, #0
 8007f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f4e:	2e00      	cmp	r6, #0
 8007f50:	d0f9      	beq.n	8007f46 <__sflush_r+0x1a>
 8007f52:	2300      	movs	r3, #0
 8007f54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007f58:	682f      	ldr	r7, [r5, #0]
 8007f5a:	602b      	str	r3, [r5, #0]
 8007f5c:	d032      	beq.n	8007fc4 <__sflush_r+0x98>
 8007f5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007f60:	89a3      	ldrh	r3, [r4, #12]
 8007f62:	075a      	lsls	r2, r3, #29
 8007f64:	d505      	bpl.n	8007f72 <__sflush_r+0x46>
 8007f66:	6863      	ldr	r3, [r4, #4]
 8007f68:	1ac0      	subs	r0, r0, r3
 8007f6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f6c:	b10b      	cbz	r3, 8007f72 <__sflush_r+0x46>
 8007f6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f70:	1ac0      	subs	r0, r0, r3
 8007f72:	2300      	movs	r3, #0
 8007f74:	4602      	mov	r2, r0
 8007f76:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f78:	4628      	mov	r0, r5
 8007f7a:	6a21      	ldr	r1, [r4, #32]
 8007f7c:	47b0      	blx	r6
 8007f7e:	1c43      	adds	r3, r0, #1
 8007f80:	89a3      	ldrh	r3, [r4, #12]
 8007f82:	d106      	bne.n	8007f92 <__sflush_r+0x66>
 8007f84:	6829      	ldr	r1, [r5, #0]
 8007f86:	291d      	cmp	r1, #29
 8007f88:	d82c      	bhi.n	8007fe4 <__sflush_r+0xb8>
 8007f8a:	4a2a      	ldr	r2, [pc, #168]	; (8008034 <__sflush_r+0x108>)
 8007f8c:	40ca      	lsrs	r2, r1
 8007f8e:	07d6      	lsls	r6, r2, #31
 8007f90:	d528      	bpl.n	8007fe4 <__sflush_r+0xb8>
 8007f92:	2200      	movs	r2, #0
 8007f94:	6062      	str	r2, [r4, #4]
 8007f96:	6922      	ldr	r2, [r4, #16]
 8007f98:	04d9      	lsls	r1, r3, #19
 8007f9a:	6022      	str	r2, [r4, #0]
 8007f9c:	d504      	bpl.n	8007fa8 <__sflush_r+0x7c>
 8007f9e:	1c42      	adds	r2, r0, #1
 8007fa0:	d101      	bne.n	8007fa6 <__sflush_r+0x7a>
 8007fa2:	682b      	ldr	r3, [r5, #0]
 8007fa4:	b903      	cbnz	r3, 8007fa8 <__sflush_r+0x7c>
 8007fa6:	6560      	str	r0, [r4, #84]	; 0x54
 8007fa8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007faa:	602f      	str	r7, [r5, #0]
 8007fac:	2900      	cmp	r1, #0
 8007fae:	d0ca      	beq.n	8007f46 <__sflush_r+0x1a>
 8007fb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007fb4:	4299      	cmp	r1, r3
 8007fb6:	d002      	beq.n	8007fbe <__sflush_r+0x92>
 8007fb8:	4628      	mov	r0, r5
 8007fba:	f7ff fae9 	bl	8007590 <_free_r>
 8007fbe:	2000      	movs	r0, #0
 8007fc0:	6360      	str	r0, [r4, #52]	; 0x34
 8007fc2:	e7c1      	b.n	8007f48 <__sflush_r+0x1c>
 8007fc4:	6a21      	ldr	r1, [r4, #32]
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	4628      	mov	r0, r5
 8007fca:	47b0      	blx	r6
 8007fcc:	1c41      	adds	r1, r0, #1
 8007fce:	d1c7      	bne.n	8007f60 <__sflush_r+0x34>
 8007fd0:	682b      	ldr	r3, [r5, #0]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d0c4      	beq.n	8007f60 <__sflush_r+0x34>
 8007fd6:	2b1d      	cmp	r3, #29
 8007fd8:	d001      	beq.n	8007fde <__sflush_r+0xb2>
 8007fda:	2b16      	cmp	r3, #22
 8007fdc:	d101      	bne.n	8007fe2 <__sflush_r+0xb6>
 8007fde:	602f      	str	r7, [r5, #0]
 8007fe0:	e7b1      	b.n	8007f46 <__sflush_r+0x1a>
 8007fe2:	89a3      	ldrh	r3, [r4, #12]
 8007fe4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fe8:	81a3      	strh	r3, [r4, #12]
 8007fea:	e7ad      	b.n	8007f48 <__sflush_r+0x1c>
 8007fec:	690f      	ldr	r7, [r1, #16]
 8007fee:	2f00      	cmp	r7, #0
 8007ff0:	d0a9      	beq.n	8007f46 <__sflush_r+0x1a>
 8007ff2:	0793      	lsls	r3, r2, #30
 8007ff4:	bf18      	it	ne
 8007ff6:	2300      	movne	r3, #0
 8007ff8:	680e      	ldr	r6, [r1, #0]
 8007ffa:	bf08      	it	eq
 8007ffc:	694b      	ldreq	r3, [r1, #20]
 8007ffe:	eba6 0807 	sub.w	r8, r6, r7
 8008002:	600f      	str	r7, [r1, #0]
 8008004:	608b      	str	r3, [r1, #8]
 8008006:	f1b8 0f00 	cmp.w	r8, #0
 800800a:	dd9c      	ble.n	8007f46 <__sflush_r+0x1a>
 800800c:	4643      	mov	r3, r8
 800800e:	463a      	mov	r2, r7
 8008010:	4628      	mov	r0, r5
 8008012:	6a21      	ldr	r1, [r4, #32]
 8008014:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008016:	47b0      	blx	r6
 8008018:	2800      	cmp	r0, #0
 800801a:	dc06      	bgt.n	800802a <__sflush_r+0xfe>
 800801c:	89a3      	ldrh	r3, [r4, #12]
 800801e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008022:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008026:	81a3      	strh	r3, [r4, #12]
 8008028:	e78e      	b.n	8007f48 <__sflush_r+0x1c>
 800802a:	4407      	add	r7, r0
 800802c:	eba8 0800 	sub.w	r8, r8, r0
 8008030:	e7e9      	b.n	8008006 <__sflush_r+0xda>
 8008032:	bf00      	nop
 8008034:	20400001 	.word	0x20400001

08008038 <_fflush_r>:
 8008038:	b538      	push	{r3, r4, r5, lr}
 800803a:	690b      	ldr	r3, [r1, #16]
 800803c:	4605      	mov	r5, r0
 800803e:	460c      	mov	r4, r1
 8008040:	b913      	cbnz	r3, 8008048 <_fflush_r+0x10>
 8008042:	2500      	movs	r5, #0
 8008044:	4628      	mov	r0, r5
 8008046:	bd38      	pop	{r3, r4, r5, pc}
 8008048:	b118      	cbz	r0, 8008052 <_fflush_r+0x1a>
 800804a:	6983      	ldr	r3, [r0, #24]
 800804c:	b90b      	cbnz	r3, 8008052 <_fflush_r+0x1a>
 800804e:	f000 f887 	bl	8008160 <__sinit>
 8008052:	4b14      	ldr	r3, [pc, #80]	; (80080a4 <_fflush_r+0x6c>)
 8008054:	429c      	cmp	r4, r3
 8008056:	d11b      	bne.n	8008090 <_fflush_r+0x58>
 8008058:	686c      	ldr	r4, [r5, #4]
 800805a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d0ef      	beq.n	8008042 <_fflush_r+0xa>
 8008062:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008064:	07d0      	lsls	r0, r2, #31
 8008066:	d404      	bmi.n	8008072 <_fflush_r+0x3a>
 8008068:	0599      	lsls	r1, r3, #22
 800806a:	d402      	bmi.n	8008072 <_fflush_r+0x3a>
 800806c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800806e:	f000 f915 	bl	800829c <__retarget_lock_acquire_recursive>
 8008072:	4628      	mov	r0, r5
 8008074:	4621      	mov	r1, r4
 8008076:	f7ff ff59 	bl	8007f2c <__sflush_r>
 800807a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800807c:	4605      	mov	r5, r0
 800807e:	07da      	lsls	r2, r3, #31
 8008080:	d4e0      	bmi.n	8008044 <_fflush_r+0xc>
 8008082:	89a3      	ldrh	r3, [r4, #12]
 8008084:	059b      	lsls	r3, r3, #22
 8008086:	d4dd      	bmi.n	8008044 <_fflush_r+0xc>
 8008088:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800808a:	f000 f908 	bl	800829e <__retarget_lock_release_recursive>
 800808e:	e7d9      	b.n	8008044 <_fflush_r+0xc>
 8008090:	4b05      	ldr	r3, [pc, #20]	; (80080a8 <_fflush_r+0x70>)
 8008092:	429c      	cmp	r4, r3
 8008094:	d101      	bne.n	800809a <_fflush_r+0x62>
 8008096:	68ac      	ldr	r4, [r5, #8]
 8008098:	e7df      	b.n	800805a <_fflush_r+0x22>
 800809a:	4b04      	ldr	r3, [pc, #16]	; (80080ac <_fflush_r+0x74>)
 800809c:	429c      	cmp	r4, r3
 800809e:	bf08      	it	eq
 80080a0:	68ec      	ldreq	r4, [r5, #12]
 80080a2:	e7da      	b.n	800805a <_fflush_r+0x22>
 80080a4:	0800bb2c 	.word	0x0800bb2c
 80080a8:	0800bb4c 	.word	0x0800bb4c
 80080ac:	0800bb0c 	.word	0x0800bb0c

080080b0 <std>:
 80080b0:	2300      	movs	r3, #0
 80080b2:	b510      	push	{r4, lr}
 80080b4:	4604      	mov	r4, r0
 80080b6:	e9c0 3300 	strd	r3, r3, [r0]
 80080ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80080be:	6083      	str	r3, [r0, #8]
 80080c0:	8181      	strh	r1, [r0, #12]
 80080c2:	6643      	str	r3, [r0, #100]	; 0x64
 80080c4:	81c2      	strh	r2, [r0, #14]
 80080c6:	6183      	str	r3, [r0, #24]
 80080c8:	4619      	mov	r1, r3
 80080ca:	2208      	movs	r2, #8
 80080cc:	305c      	adds	r0, #92	; 0x5c
 80080ce:	f7fd fbb1 	bl	8005834 <memset>
 80080d2:	4b05      	ldr	r3, [pc, #20]	; (80080e8 <std+0x38>)
 80080d4:	6224      	str	r4, [r4, #32]
 80080d6:	6263      	str	r3, [r4, #36]	; 0x24
 80080d8:	4b04      	ldr	r3, [pc, #16]	; (80080ec <std+0x3c>)
 80080da:	62a3      	str	r3, [r4, #40]	; 0x28
 80080dc:	4b04      	ldr	r3, [pc, #16]	; (80080f0 <std+0x40>)
 80080de:	62e3      	str	r3, [r4, #44]	; 0x2c
 80080e0:	4b04      	ldr	r3, [pc, #16]	; (80080f4 <std+0x44>)
 80080e2:	6323      	str	r3, [r4, #48]	; 0x30
 80080e4:	bd10      	pop	{r4, pc}
 80080e6:	bf00      	nop
 80080e8:	08008401 	.word	0x08008401
 80080ec:	08008423 	.word	0x08008423
 80080f0:	0800845b 	.word	0x0800845b
 80080f4:	0800847f 	.word	0x0800847f

080080f8 <_cleanup_r>:
 80080f8:	4901      	ldr	r1, [pc, #4]	; (8008100 <_cleanup_r+0x8>)
 80080fa:	f000 b8af 	b.w	800825c <_fwalk_reent>
 80080fe:	bf00      	nop
 8008100:	08008039 	.word	0x08008039

08008104 <__sfmoreglue>:
 8008104:	b570      	push	{r4, r5, r6, lr}
 8008106:	2568      	movs	r5, #104	; 0x68
 8008108:	1e4a      	subs	r2, r1, #1
 800810a:	4355      	muls	r5, r2
 800810c:	460e      	mov	r6, r1
 800810e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008112:	f7ff fa89 	bl	8007628 <_malloc_r>
 8008116:	4604      	mov	r4, r0
 8008118:	b140      	cbz	r0, 800812c <__sfmoreglue+0x28>
 800811a:	2100      	movs	r1, #0
 800811c:	e9c0 1600 	strd	r1, r6, [r0]
 8008120:	300c      	adds	r0, #12
 8008122:	60a0      	str	r0, [r4, #8]
 8008124:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008128:	f7fd fb84 	bl	8005834 <memset>
 800812c:	4620      	mov	r0, r4
 800812e:	bd70      	pop	{r4, r5, r6, pc}

08008130 <__sfp_lock_acquire>:
 8008130:	4801      	ldr	r0, [pc, #4]	; (8008138 <__sfp_lock_acquire+0x8>)
 8008132:	f000 b8b3 	b.w	800829c <__retarget_lock_acquire_recursive>
 8008136:	bf00      	nop
 8008138:	20000ae0 	.word	0x20000ae0

0800813c <__sfp_lock_release>:
 800813c:	4801      	ldr	r0, [pc, #4]	; (8008144 <__sfp_lock_release+0x8>)
 800813e:	f000 b8ae 	b.w	800829e <__retarget_lock_release_recursive>
 8008142:	bf00      	nop
 8008144:	20000ae0 	.word	0x20000ae0

08008148 <__sinit_lock_acquire>:
 8008148:	4801      	ldr	r0, [pc, #4]	; (8008150 <__sinit_lock_acquire+0x8>)
 800814a:	f000 b8a7 	b.w	800829c <__retarget_lock_acquire_recursive>
 800814e:	bf00      	nop
 8008150:	20000adb 	.word	0x20000adb

08008154 <__sinit_lock_release>:
 8008154:	4801      	ldr	r0, [pc, #4]	; (800815c <__sinit_lock_release+0x8>)
 8008156:	f000 b8a2 	b.w	800829e <__retarget_lock_release_recursive>
 800815a:	bf00      	nop
 800815c:	20000adb 	.word	0x20000adb

08008160 <__sinit>:
 8008160:	b510      	push	{r4, lr}
 8008162:	4604      	mov	r4, r0
 8008164:	f7ff fff0 	bl	8008148 <__sinit_lock_acquire>
 8008168:	69a3      	ldr	r3, [r4, #24]
 800816a:	b11b      	cbz	r3, 8008174 <__sinit+0x14>
 800816c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008170:	f7ff bff0 	b.w	8008154 <__sinit_lock_release>
 8008174:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008178:	6523      	str	r3, [r4, #80]	; 0x50
 800817a:	4b13      	ldr	r3, [pc, #76]	; (80081c8 <__sinit+0x68>)
 800817c:	4a13      	ldr	r2, [pc, #76]	; (80081cc <__sinit+0x6c>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	62a2      	str	r2, [r4, #40]	; 0x28
 8008182:	42a3      	cmp	r3, r4
 8008184:	bf08      	it	eq
 8008186:	2301      	moveq	r3, #1
 8008188:	4620      	mov	r0, r4
 800818a:	bf08      	it	eq
 800818c:	61a3      	streq	r3, [r4, #24]
 800818e:	f000 f81f 	bl	80081d0 <__sfp>
 8008192:	6060      	str	r0, [r4, #4]
 8008194:	4620      	mov	r0, r4
 8008196:	f000 f81b 	bl	80081d0 <__sfp>
 800819a:	60a0      	str	r0, [r4, #8]
 800819c:	4620      	mov	r0, r4
 800819e:	f000 f817 	bl	80081d0 <__sfp>
 80081a2:	2200      	movs	r2, #0
 80081a4:	2104      	movs	r1, #4
 80081a6:	60e0      	str	r0, [r4, #12]
 80081a8:	6860      	ldr	r0, [r4, #4]
 80081aa:	f7ff ff81 	bl	80080b0 <std>
 80081ae:	2201      	movs	r2, #1
 80081b0:	2109      	movs	r1, #9
 80081b2:	68a0      	ldr	r0, [r4, #8]
 80081b4:	f7ff ff7c 	bl	80080b0 <std>
 80081b8:	2202      	movs	r2, #2
 80081ba:	2112      	movs	r1, #18
 80081bc:	68e0      	ldr	r0, [r4, #12]
 80081be:	f7ff ff77 	bl	80080b0 <std>
 80081c2:	2301      	movs	r3, #1
 80081c4:	61a3      	str	r3, [r4, #24]
 80081c6:	e7d1      	b.n	800816c <__sinit+0xc>
 80081c8:	0800b78c 	.word	0x0800b78c
 80081cc:	080080f9 	.word	0x080080f9

080081d0 <__sfp>:
 80081d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081d2:	4607      	mov	r7, r0
 80081d4:	f7ff ffac 	bl	8008130 <__sfp_lock_acquire>
 80081d8:	4b1e      	ldr	r3, [pc, #120]	; (8008254 <__sfp+0x84>)
 80081da:	681e      	ldr	r6, [r3, #0]
 80081dc:	69b3      	ldr	r3, [r6, #24]
 80081de:	b913      	cbnz	r3, 80081e6 <__sfp+0x16>
 80081e0:	4630      	mov	r0, r6
 80081e2:	f7ff ffbd 	bl	8008160 <__sinit>
 80081e6:	3648      	adds	r6, #72	; 0x48
 80081e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80081ec:	3b01      	subs	r3, #1
 80081ee:	d503      	bpl.n	80081f8 <__sfp+0x28>
 80081f0:	6833      	ldr	r3, [r6, #0]
 80081f2:	b30b      	cbz	r3, 8008238 <__sfp+0x68>
 80081f4:	6836      	ldr	r6, [r6, #0]
 80081f6:	e7f7      	b.n	80081e8 <__sfp+0x18>
 80081f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80081fc:	b9d5      	cbnz	r5, 8008234 <__sfp+0x64>
 80081fe:	4b16      	ldr	r3, [pc, #88]	; (8008258 <__sfp+0x88>)
 8008200:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008204:	60e3      	str	r3, [r4, #12]
 8008206:	6665      	str	r5, [r4, #100]	; 0x64
 8008208:	f000 f847 	bl	800829a <__retarget_lock_init_recursive>
 800820c:	f7ff ff96 	bl	800813c <__sfp_lock_release>
 8008210:	2208      	movs	r2, #8
 8008212:	4629      	mov	r1, r5
 8008214:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008218:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800821c:	6025      	str	r5, [r4, #0]
 800821e:	61a5      	str	r5, [r4, #24]
 8008220:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008224:	f7fd fb06 	bl	8005834 <memset>
 8008228:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800822c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008230:	4620      	mov	r0, r4
 8008232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008234:	3468      	adds	r4, #104	; 0x68
 8008236:	e7d9      	b.n	80081ec <__sfp+0x1c>
 8008238:	2104      	movs	r1, #4
 800823a:	4638      	mov	r0, r7
 800823c:	f7ff ff62 	bl	8008104 <__sfmoreglue>
 8008240:	4604      	mov	r4, r0
 8008242:	6030      	str	r0, [r6, #0]
 8008244:	2800      	cmp	r0, #0
 8008246:	d1d5      	bne.n	80081f4 <__sfp+0x24>
 8008248:	f7ff ff78 	bl	800813c <__sfp_lock_release>
 800824c:	230c      	movs	r3, #12
 800824e:	603b      	str	r3, [r7, #0]
 8008250:	e7ee      	b.n	8008230 <__sfp+0x60>
 8008252:	bf00      	nop
 8008254:	0800b78c 	.word	0x0800b78c
 8008258:	ffff0001 	.word	0xffff0001

0800825c <_fwalk_reent>:
 800825c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008260:	4606      	mov	r6, r0
 8008262:	4688      	mov	r8, r1
 8008264:	2700      	movs	r7, #0
 8008266:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800826a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800826e:	f1b9 0901 	subs.w	r9, r9, #1
 8008272:	d505      	bpl.n	8008280 <_fwalk_reent+0x24>
 8008274:	6824      	ldr	r4, [r4, #0]
 8008276:	2c00      	cmp	r4, #0
 8008278:	d1f7      	bne.n	800826a <_fwalk_reent+0xe>
 800827a:	4638      	mov	r0, r7
 800827c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008280:	89ab      	ldrh	r3, [r5, #12]
 8008282:	2b01      	cmp	r3, #1
 8008284:	d907      	bls.n	8008296 <_fwalk_reent+0x3a>
 8008286:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800828a:	3301      	adds	r3, #1
 800828c:	d003      	beq.n	8008296 <_fwalk_reent+0x3a>
 800828e:	4629      	mov	r1, r5
 8008290:	4630      	mov	r0, r6
 8008292:	47c0      	blx	r8
 8008294:	4307      	orrs	r7, r0
 8008296:	3568      	adds	r5, #104	; 0x68
 8008298:	e7e9      	b.n	800826e <_fwalk_reent+0x12>

0800829a <__retarget_lock_init_recursive>:
 800829a:	4770      	bx	lr

0800829c <__retarget_lock_acquire_recursive>:
 800829c:	4770      	bx	lr

0800829e <__retarget_lock_release_recursive>:
 800829e:	4770      	bx	lr

080082a0 <__swhatbuf_r>:
 80082a0:	b570      	push	{r4, r5, r6, lr}
 80082a2:	460e      	mov	r6, r1
 80082a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082a8:	4614      	mov	r4, r2
 80082aa:	2900      	cmp	r1, #0
 80082ac:	461d      	mov	r5, r3
 80082ae:	b096      	sub	sp, #88	; 0x58
 80082b0:	da07      	bge.n	80082c2 <__swhatbuf_r+0x22>
 80082b2:	2300      	movs	r3, #0
 80082b4:	602b      	str	r3, [r5, #0]
 80082b6:	89b3      	ldrh	r3, [r6, #12]
 80082b8:	061a      	lsls	r2, r3, #24
 80082ba:	d410      	bmi.n	80082de <__swhatbuf_r+0x3e>
 80082bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082c0:	e00e      	b.n	80082e0 <__swhatbuf_r+0x40>
 80082c2:	466a      	mov	r2, sp
 80082c4:	f000 f902 	bl	80084cc <_fstat_r>
 80082c8:	2800      	cmp	r0, #0
 80082ca:	dbf2      	blt.n	80082b2 <__swhatbuf_r+0x12>
 80082cc:	9a01      	ldr	r2, [sp, #4]
 80082ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80082d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80082d6:	425a      	negs	r2, r3
 80082d8:	415a      	adcs	r2, r3
 80082da:	602a      	str	r2, [r5, #0]
 80082dc:	e7ee      	b.n	80082bc <__swhatbuf_r+0x1c>
 80082de:	2340      	movs	r3, #64	; 0x40
 80082e0:	2000      	movs	r0, #0
 80082e2:	6023      	str	r3, [r4, #0]
 80082e4:	b016      	add	sp, #88	; 0x58
 80082e6:	bd70      	pop	{r4, r5, r6, pc}

080082e8 <__smakebuf_r>:
 80082e8:	898b      	ldrh	r3, [r1, #12]
 80082ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80082ec:	079d      	lsls	r5, r3, #30
 80082ee:	4606      	mov	r6, r0
 80082f0:	460c      	mov	r4, r1
 80082f2:	d507      	bpl.n	8008304 <__smakebuf_r+0x1c>
 80082f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80082f8:	6023      	str	r3, [r4, #0]
 80082fa:	6123      	str	r3, [r4, #16]
 80082fc:	2301      	movs	r3, #1
 80082fe:	6163      	str	r3, [r4, #20]
 8008300:	b002      	add	sp, #8
 8008302:	bd70      	pop	{r4, r5, r6, pc}
 8008304:	466a      	mov	r2, sp
 8008306:	ab01      	add	r3, sp, #4
 8008308:	f7ff ffca 	bl	80082a0 <__swhatbuf_r>
 800830c:	9900      	ldr	r1, [sp, #0]
 800830e:	4605      	mov	r5, r0
 8008310:	4630      	mov	r0, r6
 8008312:	f7ff f989 	bl	8007628 <_malloc_r>
 8008316:	b948      	cbnz	r0, 800832c <__smakebuf_r+0x44>
 8008318:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800831c:	059a      	lsls	r2, r3, #22
 800831e:	d4ef      	bmi.n	8008300 <__smakebuf_r+0x18>
 8008320:	f023 0303 	bic.w	r3, r3, #3
 8008324:	f043 0302 	orr.w	r3, r3, #2
 8008328:	81a3      	strh	r3, [r4, #12]
 800832a:	e7e3      	b.n	80082f4 <__smakebuf_r+0xc>
 800832c:	4b0d      	ldr	r3, [pc, #52]	; (8008364 <__smakebuf_r+0x7c>)
 800832e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008330:	89a3      	ldrh	r3, [r4, #12]
 8008332:	6020      	str	r0, [r4, #0]
 8008334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008338:	81a3      	strh	r3, [r4, #12]
 800833a:	9b00      	ldr	r3, [sp, #0]
 800833c:	6120      	str	r0, [r4, #16]
 800833e:	6163      	str	r3, [r4, #20]
 8008340:	9b01      	ldr	r3, [sp, #4]
 8008342:	b15b      	cbz	r3, 800835c <__smakebuf_r+0x74>
 8008344:	4630      	mov	r0, r6
 8008346:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800834a:	f000 f8d1 	bl	80084f0 <_isatty_r>
 800834e:	b128      	cbz	r0, 800835c <__smakebuf_r+0x74>
 8008350:	89a3      	ldrh	r3, [r4, #12]
 8008352:	f023 0303 	bic.w	r3, r3, #3
 8008356:	f043 0301 	orr.w	r3, r3, #1
 800835a:	81a3      	strh	r3, [r4, #12]
 800835c:	89a0      	ldrh	r0, [r4, #12]
 800835e:	4305      	orrs	r5, r0
 8008360:	81a5      	strh	r5, [r4, #12]
 8008362:	e7cd      	b.n	8008300 <__smakebuf_r+0x18>
 8008364:	080080f9 	.word	0x080080f9

08008368 <_malloc_usable_size_r>:
 8008368:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800836c:	1f18      	subs	r0, r3, #4
 800836e:	2b00      	cmp	r3, #0
 8008370:	bfbc      	itt	lt
 8008372:	580b      	ldrlt	r3, [r1, r0]
 8008374:	18c0      	addlt	r0, r0, r3
 8008376:	4770      	bx	lr

08008378 <_raise_r>:
 8008378:	291f      	cmp	r1, #31
 800837a:	b538      	push	{r3, r4, r5, lr}
 800837c:	4604      	mov	r4, r0
 800837e:	460d      	mov	r5, r1
 8008380:	d904      	bls.n	800838c <_raise_r+0x14>
 8008382:	2316      	movs	r3, #22
 8008384:	6003      	str	r3, [r0, #0]
 8008386:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800838a:	bd38      	pop	{r3, r4, r5, pc}
 800838c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800838e:	b112      	cbz	r2, 8008396 <_raise_r+0x1e>
 8008390:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008394:	b94b      	cbnz	r3, 80083aa <_raise_r+0x32>
 8008396:	4620      	mov	r0, r4
 8008398:	f000 f830 	bl	80083fc <_getpid_r>
 800839c:	462a      	mov	r2, r5
 800839e:	4601      	mov	r1, r0
 80083a0:	4620      	mov	r0, r4
 80083a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083a6:	f000 b817 	b.w	80083d8 <_kill_r>
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	d00a      	beq.n	80083c4 <_raise_r+0x4c>
 80083ae:	1c59      	adds	r1, r3, #1
 80083b0:	d103      	bne.n	80083ba <_raise_r+0x42>
 80083b2:	2316      	movs	r3, #22
 80083b4:	6003      	str	r3, [r0, #0]
 80083b6:	2001      	movs	r0, #1
 80083b8:	e7e7      	b.n	800838a <_raise_r+0x12>
 80083ba:	2400      	movs	r4, #0
 80083bc:	4628      	mov	r0, r5
 80083be:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80083c2:	4798      	blx	r3
 80083c4:	2000      	movs	r0, #0
 80083c6:	e7e0      	b.n	800838a <_raise_r+0x12>

080083c8 <raise>:
 80083c8:	4b02      	ldr	r3, [pc, #8]	; (80083d4 <raise+0xc>)
 80083ca:	4601      	mov	r1, r0
 80083cc:	6818      	ldr	r0, [r3, #0]
 80083ce:	f7ff bfd3 	b.w	8008378 <_raise_r>
 80083d2:	bf00      	nop
 80083d4:	200000a4 	.word	0x200000a4

080083d8 <_kill_r>:
 80083d8:	b538      	push	{r3, r4, r5, lr}
 80083da:	2300      	movs	r3, #0
 80083dc:	4d06      	ldr	r5, [pc, #24]	; (80083f8 <_kill_r+0x20>)
 80083de:	4604      	mov	r4, r0
 80083e0:	4608      	mov	r0, r1
 80083e2:	4611      	mov	r1, r2
 80083e4:	602b      	str	r3, [r5, #0]
 80083e6:	f7f9 fe04 	bl	8001ff2 <_kill>
 80083ea:	1c43      	adds	r3, r0, #1
 80083ec:	d102      	bne.n	80083f4 <_kill_r+0x1c>
 80083ee:	682b      	ldr	r3, [r5, #0]
 80083f0:	b103      	cbz	r3, 80083f4 <_kill_r+0x1c>
 80083f2:	6023      	str	r3, [r4, #0]
 80083f4:	bd38      	pop	{r3, r4, r5, pc}
 80083f6:	bf00      	nop
 80083f8:	20000ad4 	.word	0x20000ad4

080083fc <_getpid_r>:
 80083fc:	f7f9 bdf2 	b.w	8001fe4 <_getpid>

08008400 <__sread>:
 8008400:	b510      	push	{r4, lr}
 8008402:	460c      	mov	r4, r1
 8008404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008408:	f000 f894 	bl	8008534 <_read_r>
 800840c:	2800      	cmp	r0, #0
 800840e:	bfab      	itete	ge
 8008410:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008412:	89a3      	ldrhlt	r3, [r4, #12]
 8008414:	181b      	addge	r3, r3, r0
 8008416:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800841a:	bfac      	ite	ge
 800841c:	6563      	strge	r3, [r4, #84]	; 0x54
 800841e:	81a3      	strhlt	r3, [r4, #12]
 8008420:	bd10      	pop	{r4, pc}

08008422 <__swrite>:
 8008422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008426:	461f      	mov	r7, r3
 8008428:	898b      	ldrh	r3, [r1, #12]
 800842a:	4605      	mov	r5, r0
 800842c:	05db      	lsls	r3, r3, #23
 800842e:	460c      	mov	r4, r1
 8008430:	4616      	mov	r6, r2
 8008432:	d505      	bpl.n	8008440 <__swrite+0x1e>
 8008434:	2302      	movs	r3, #2
 8008436:	2200      	movs	r2, #0
 8008438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800843c:	f000 f868 	bl	8008510 <_lseek_r>
 8008440:	89a3      	ldrh	r3, [r4, #12]
 8008442:	4632      	mov	r2, r6
 8008444:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008448:	81a3      	strh	r3, [r4, #12]
 800844a:	4628      	mov	r0, r5
 800844c:	463b      	mov	r3, r7
 800844e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008452:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008456:	f000 b817 	b.w	8008488 <_write_r>

0800845a <__sseek>:
 800845a:	b510      	push	{r4, lr}
 800845c:	460c      	mov	r4, r1
 800845e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008462:	f000 f855 	bl	8008510 <_lseek_r>
 8008466:	1c43      	adds	r3, r0, #1
 8008468:	89a3      	ldrh	r3, [r4, #12]
 800846a:	bf15      	itete	ne
 800846c:	6560      	strne	r0, [r4, #84]	; 0x54
 800846e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008472:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008476:	81a3      	strheq	r3, [r4, #12]
 8008478:	bf18      	it	ne
 800847a:	81a3      	strhne	r3, [r4, #12]
 800847c:	bd10      	pop	{r4, pc}

0800847e <__sclose>:
 800847e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008482:	f000 b813 	b.w	80084ac <_close_r>
	...

08008488 <_write_r>:
 8008488:	b538      	push	{r3, r4, r5, lr}
 800848a:	4604      	mov	r4, r0
 800848c:	4608      	mov	r0, r1
 800848e:	4611      	mov	r1, r2
 8008490:	2200      	movs	r2, #0
 8008492:	4d05      	ldr	r5, [pc, #20]	; (80084a8 <_write_r+0x20>)
 8008494:	602a      	str	r2, [r5, #0]
 8008496:	461a      	mov	r2, r3
 8008498:	f7f9 fde2 	bl	8002060 <_write>
 800849c:	1c43      	adds	r3, r0, #1
 800849e:	d102      	bne.n	80084a6 <_write_r+0x1e>
 80084a0:	682b      	ldr	r3, [r5, #0]
 80084a2:	b103      	cbz	r3, 80084a6 <_write_r+0x1e>
 80084a4:	6023      	str	r3, [r4, #0]
 80084a6:	bd38      	pop	{r3, r4, r5, pc}
 80084a8:	20000ad4 	.word	0x20000ad4

080084ac <_close_r>:
 80084ac:	b538      	push	{r3, r4, r5, lr}
 80084ae:	2300      	movs	r3, #0
 80084b0:	4d05      	ldr	r5, [pc, #20]	; (80084c8 <_close_r+0x1c>)
 80084b2:	4604      	mov	r4, r0
 80084b4:	4608      	mov	r0, r1
 80084b6:	602b      	str	r3, [r5, #0]
 80084b8:	f7f9 fdee 	bl	8002098 <_close>
 80084bc:	1c43      	adds	r3, r0, #1
 80084be:	d102      	bne.n	80084c6 <_close_r+0x1a>
 80084c0:	682b      	ldr	r3, [r5, #0]
 80084c2:	b103      	cbz	r3, 80084c6 <_close_r+0x1a>
 80084c4:	6023      	str	r3, [r4, #0]
 80084c6:	bd38      	pop	{r3, r4, r5, pc}
 80084c8:	20000ad4 	.word	0x20000ad4

080084cc <_fstat_r>:
 80084cc:	b538      	push	{r3, r4, r5, lr}
 80084ce:	2300      	movs	r3, #0
 80084d0:	4d06      	ldr	r5, [pc, #24]	; (80084ec <_fstat_r+0x20>)
 80084d2:	4604      	mov	r4, r0
 80084d4:	4608      	mov	r0, r1
 80084d6:	4611      	mov	r1, r2
 80084d8:	602b      	str	r3, [r5, #0]
 80084da:	f7f9 fde8 	bl	80020ae <_fstat>
 80084de:	1c43      	adds	r3, r0, #1
 80084e0:	d102      	bne.n	80084e8 <_fstat_r+0x1c>
 80084e2:	682b      	ldr	r3, [r5, #0]
 80084e4:	b103      	cbz	r3, 80084e8 <_fstat_r+0x1c>
 80084e6:	6023      	str	r3, [r4, #0]
 80084e8:	bd38      	pop	{r3, r4, r5, pc}
 80084ea:	bf00      	nop
 80084ec:	20000ad4 	.word	0x20000ad4

080084f0 <_isatty_r>:
 80084f0:	b538      	push	{r3, r4, r5, lr}
 80084f2:	2300      	movs	r3, #0
 80084f4:	4d05      	ldr	r5, [pc, #20]	; (800850c <_isatty_r+0x1c>)
 80084f6:	4604      	mov	r4, r0
 80084f8:	4608      	mov	r0, r1
 80084fa:	602b      	str	r3, [r5, #0]
 80084fc:	f7f9 fde6 	bl	80020cc <_isatty>
 8008500:	1c43      	adds	r3, r0, #1
 8008502:	d102      	bne.n	800850a <_isatty_r+0x1a>
 8008504:	682b      	ldr	r3, [r5, #0]
 8008506:	b103      	cbz	r3, 800850a <_isatty_r+0x1a>
 8008508:	6023      	str	r3, [r4, #0]
 800850a:	bd38      	pop	{r3, r4, r5, pc}
 800850c:	20000ad4 	.word	0x20000ad4

08008510 <_lseek_r>:
 8008510:	b538      	push	{r3, r4, r5, lr}
 8008512:	4604      	mov	r4, r0
 8008514:	4608      	mov	r0, r1
 8008516:	4611      	mov	r1, r2
 8008518:	2200      	movs	r2, #0
 800851a:	4d05      	ldr	r5, [pc, #20]	; (8008530 <_lseek_r+0x20>)
 800851c:	602a      	str	r2, [r5, #0]
 800851e:	461a      	mov	r2, r3
 8008520:	f7f9 fdde 	bl	80020e0 <_lseek>
 8008524:	1c43      	adds	r3, r0, #1
 8008526:	d102      	bne.n	800852e <_lseek_r+0x1e>
 8008528:	682b      	ldr	r3, [r5, #0]
 800852a:	b103      	cbz	r3, 800852e <_lseek_r+0x1e>
 800852c:	6023      	str	r3, [r4, #0]
 800852e:	bd38      	pop	{r3, r4, r5, pc}
 8008530:	20000ad4 	.word	0x20000ad4

08008534 <_read_r>:
 8008534:	b538      	push	{r3, r4, r5, lr}
 8008536:	4604      	mov	r4, r0
 8008538:	4608      	mov	r0, r1
 800853a:	4611      	mov	r1, r2
 800853c:	2200      	movs	r2, #0
 800853e:	4d05      	ldr	r5, [pc, #20]	; (8008554 <_read_r+0x20>)
 8008540:	602a      	str	r2, [r5, #0]
 8008542:	461a      	mov	r2, r3
 8008544:	f7f9 fd6f 	bl	8002026 <_read>
 8008548:	1c43      	adds	r3, r0, #1
 800854a:	d102      	bne.n	8008552 <_read_r+0x1e>
 800854c:	682b      	ldr	r3, [r5, #0]
 800854e:	b103      	cbz	r3, 8008552 <_read_r+0x1e>
 8008550:	6023      	str	r3, [r4, #0]
 8008552:	bd38      	pop	{r3, r4, r5, pc}
 8008554:	20000ad4 	.word	0x20000ad4

08008558 <cos>:
 8008558:	b530      	push	{r4, r5, lr}
 800855a:	4a1e      	ldr	r2, [pc, #120]	; (80085d4 <cos+0x7c>)
 800855c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008560:	4293      	cmp	r3, r2
 8008562:	b087      	sub	sp, #28
 8008564:	dc04      	bgt.n	8008570 <cos+0x18>
 8008566:	2200      	movs	r2, #0
 8008568:	2300      	movs	r3, #0
 800856a:	f000 fc1d 	bl	8008da8 <__kernel_cos>
 800856e:	e006      	b.n	800857e <cos+0x26>
 8008570:	4a19      	ldr	r2, [pc, #100]	; (80085d8 <cos+0x80>)
 8008572:	4293      	cmp	r3, r2
 8008574:	dd05      	ble.n	8008582 <cos+0x2a>
 8008576:	4602      	mov	r2, r0
 8008578:	460b      	mov	r3, r1
 800857a:	f7f7 fdf5 	bl	8000168 <__aeabi_dsub>
 800857e:	b007      	add	sp, #28
 8008580:	bd30      	pop	{r4, r5, pc}
 8008582:	aa02      	add	r2, sp, #8
 8008584:	f000 f974 	bl	8008870 <__ieee754_rem_pio2>
 8008588:	f000 0003 	and.w	r0, r0, #3
 800858c:	2801      	cmp	r0, #1
 800858e:	d007      	beq.n	80085a0 <cos+0x48>
 8008590:	2802      	cmp	r0, #2
 8008592:	d00f      	beq.n	80085b4 <cos+0x5c>
 8008594:	b9a8      	cbnz	r0, 80085c2 <cos+0x6a>
 8008596:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800859a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800859e:	e7e4      	b.n	800856a <cos+0x12>
 80085a0:	9000      	str	r0, [sp, #0]
 80085a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085aa:	f001 f805 	bl	80095b8 <__kernel_sin>
 80085ae:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80085b2:	e7e4      	b.n	800857e <cos+0x26>
 80085b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085bc:	f000 fbf4 	bl	8008da8 <__kernel_cos>
 80085c0:	e7f5      	b.n	80085ae <cos+0x56>
 80085c2:	2301      	movs	r3, #1
 80085c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085c8:	9300      	str	r3, [sp, #0]
 80085ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085ce:	f000 fff3 	bl	80095b8 <__kernel_sin>
 80085d2:	e7d4      	b.n	800857e <cos+0x26>
 80085d4:	3fe921fb 	.word	0x3fe921fb
 80085d8:	7fefffff 	.word	0x7fefffff

080085dc <sin>:
 80085dc:	b530      	push	{r4, r5, lr}
 80085de:	4a20      	ldr	r2, [pc, #128]	; (8008660 <sin+0x84>)
 80085e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80085e4:	4293      	cmp	r3, r2
 80085e6:	b087      	sub	sp, #28
 80085e8:	dc06      	bgt.n	80085f8 <sin+0x1c>
 80085ea:	2300      	movs	r3, #0
 80085ec:	2200      	movs	r2, #0
 80085ee:	9300      	str	r3, [sp, #0]
 80085f0:	2300      	movs	r3, #0
 80085f2:	f000 ffe1 	bl	80095b8 <__kernel_sin>
 80085f6:	e006      	b.n	8008606 <sin+0x2a>
 80085f8:	4a1a      	ldr	r2, [pc, #104]	; (8008664 <sin+0x88>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	dd05      	ble.n	800860a <sin+0x2e>
 80085fe:	4602      	mov	r2, r0
 8008600:	460b      	mov	r3, r1
 8008602:	f7f7 fdb1 	bl	8000168 <__aeabi_dsub>
 8008606:	b007      	add	sp, #28
 8008608:	bd30      	pop	{r4, r5, pc}
 800860a:	aa02      	add	r2, sp, #8
 800860c:	f000 f930 	bl	8008870 <__ieee754_rem_pio2>
 8008610:	f000 0003 	and.w	r0, r0, #3
 8008614:	2801      	cmp	r0, #1
 8008616:	d009      	beq.n	800862c <sin+0x50>
 8008618:	2802      	cmp	r0, #2
 800861a:	d00e      	beq.n	800863a <sin+0x5e>
 800861c:	b9c0      	cbnz	r0, 8008650 <sin+0x74>
 800861e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008622:	2301      	movs	r3, #1
 8008624:	9300      	str	r3, [sp, #0]
 8008626:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800862a:	e7e2      	b.n	80085f2 <sin+0x16>
 800862c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008630:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008634:	f000 fbb8 	bl	8008da8 <__kernel_cos>
 8008638:	e7e5      	b.n	8008606 <sin+0x2a>
 800863a:	2301      	movs	r3, #1
 800863c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008640:	9300      	str	r3, [sp, #0]
 8008642:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008646:	f000 ffb7 	bl	80095b8 <__kernel_sin>
 800864a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800864e:	e7da      	b.n	8008606 <sin+0x2a>
 8008650:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008654:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008658:	f000 fba6 	bl	8008da8 <__kernel_cos>
 800865c:	e7f5      	b.n	800864a <sin+0x6e>
 800865e:	bf00      	nop
 8008660:	3fe921fb 	.word	0x3fe921fb
 8008664:	7fefffff 	.word	0x7fefffff

08008668 <atan2>:
 8008668:	f000 b82e 	b.w	80086c8 <__ieee754_atan2>

0800866c <sqrt>:
 800866c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800866e:	4606      	mov	r6, r0
 8008670:	460f      	mov	r7, r1
 8008672:	f000 faed 	bl	8008c50 <__ieee754_sqrt>
 8008676:	4b12      	ldr	r3, [pc, #72]	; (80086c0 <sqrt+0x54>)
 8008678:	4604      	mov	r4, r0
 800867a:	f993 3000 	ldrsb.w	r3, [r3]
 800867e:	460d      	mov	r5, r1
 8008680:	3301      	adds	r3, #1
 8008682:	d019      	beq.n	80086b8 <sqrt+0x4c>
 8008684:	4632      	mov	r2, r6
 8008686:	463b      	mov	r3, r7
 8008688:	4630      	mov	r0, r6
 800868a:	4639      	mov	r1, r7
 800868c:	f7f8 f9be 	bl	8000a0c <__aeabi_dcmpun>
 8008690:	b990      	cbnz	r0, 80086b8 <sqrt+0x4c>
 8008692:	2200      	movs	r2, #0
 8008694:	2300      	movs	r3, #0
 8008696:	4630      	mov	r0, r6
 8008698:	4639      	mov	r1, r7
 800869a:	f7f8 f98f 	bl	80009bc <__aeabi_dcmplt>
 800869e:	b158      	cbz	r0, 80086b8 <sqrt+0x4c>
 80086a0:	f7fd f890 	bl	80057c4 <__errno>
 80086a4:	2321      	movs	r3, #33	; 0x21
 80086a6:	2200      	movs	r2, #0
 80086a8:	6003      	str	r3, [r0, #0]
 80086aa:	2300      	movs	r3, #0
 80086ac:	4610      	mov	r0, r2
 80086ae:	4619      	mov	r1, r3
 80086b0:	f7f8 f83c 	bl	800072c <__aeabi_ddiv>
 80086b4:	4604      	mov	r4, r0
 80086b6:	460d      	mov	r5, r1
 80086b8:	4620      	mov	r0, r4
 80086ba:	4629      	mov	r1, r5
 80086bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086be:	bf00      	nop
 80086c0:	20000274 	.word	0x20000274
 80086c4:	00000000 	.word	0x00000000

080086c8 <__ieee754_atan2>:
 80086c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086cc:	4692      	mov	sl, r2
 80086ce:	4699      	mov	r9, r3
 80086d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80086d4:	461f      	mov	r7, r3
 80086d6:	f1ca 0300 	rsb	r3, sl, #0
 80086da:	f8df e18c 	ldr.w	lr, [pc, #396]	; 8008868 <__ieee754_atan2+0x1a0>
 80086de:	ea43 030a 	orr.w	r3, r3, sl
 80086e2:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80086e6:	4573      	cmp	r3, lr
 80086e8:	4604      	mov	r4, r0
 80086ea:	460d      	mov	r5, r1
 80086ec:	d808      	bhi.n	8008700 <__ieee754_atan2+0x38>
 80086ee:	4246      	negs	r6, r0
 80086f0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80086f4:	4306      	orrs	r6, r0
 80086f6:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 80086fa:	4576      	cmp	r6, lr
 80086fc:	468c      	mov	ip, r1
 80086fe:	d908      	bls.n	8008712 <__ieee754_atan2+0x4a>
 8008700:	4652      	mov	r2, sl
 8008702:	464b      	mov	r3, r9
 8008704:	4620      	mov	r0, r4
 8008706:	4629      	mov	r1, r5
 8008708:	f7f7 fd30 	bl	800016c <__adddf3>
 800870c:	4604      	mov	r4, r0
 800870e:	460d      	mov	r5, r1
 8008710:	e019      	b.n	8008746 <__ieee754_atan2+0x7e>
 8008712:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 8008716:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800871a:	ea56 060a 	orrs.w	r6, r6, sl
 800871e:	d103      	bne.n	8008728 <__ieee754_atan2+0x60>
 8008720:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008724:	f001 b800 	b.w	8009728 <atan>
 8008728:	17be      	asrs	r6, r7, #30
 800872a:	f006 0602 	and.w	r6, r6, #2
 800872e:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8008732:	ea53 0100 	orrs.w	r1, r3, r0
 8008736:	d10a      	bne.n	800874e <__ieee754_atan2+0x86>
 8008738:	2e02      	cmp	r6, #2
 800873a:	d067      	beq.n	800880c <__ieee754_atan2+0x144>
 800873c:	2e03      	cmp	r6, #3
 800873e:	d102      	bne.n	8008746 <__ieee754_atan2+0x7e>
 8008740:	a53b      	add	r5, pc, #236	; (adr r5, 8008830 <__ieee754_atan2+0x168>)
 8008742:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008746:	4620      	mov	r0, r4
 8008748:	4629      	mov	r1, r5
 800874a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800874e:	ea52 010a 	orrs.w	r1, r2, sl
 8008752:	d106      	bne.n	8008762 <__ieee754_atan2+0x9a>
 8008754:	f1bc 0f00 	cmp.w	ip, #0
 8008758:	da63      	bge.n	8008822 <__ieee754_atan2+0x15a>
 800875a:	a537      	add	r5, pc, #220	; (adr r5, 8008838 <__ieee754_atan2+0x170>)
 800875c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008760:	e7f1      	b.n	8008746 <__ieee754_atan2+0x7e>
 8008762:	4572      	cmp	r2, lr
 8008764:	d10f      	bne.n	8008786 <__ieee754_atan2+0xbe>
 8008766:	4293      	cmp	r3, r2
 8008768:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 800876c:	d107      	bne.n	800877e <__ieee754_atan2+0xb6>
 800876e:	2e02      	cmp	r6, #2
 8008770:	d850      	bhi.n	8008814 <__ieee754_atan2+0x14c>
 8008772:	4b3b      	ldr	r3, [pc, #236]	; (8008860 <__ieee754_atan2+0x198>)
 8008774:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008778:	e9d6 4500 	ldrd	r4, r5, [r6]
 800877c:	e7e3      	b.n	8008746 <__ieee754_atan2+0x7e>
 800877e:	2e02      	cmp	r6, #2
 8008780:	d84c      	bhi.n	800881c <__ieee754_atan2+0x154>
 8008782:	4b38      	ldr	r3, [pc, #224]	; (8008864 <__ieee754_atan2+0x19c>)
 8008784:	e7f6      	b.n	8008774 <__ieee754_atan2+0xac>
 8008786:	4573      	cmp	r3, lr
 8008788:	d0e4      	beq.n	8008754 <__ieee754_atan2+0x8c>
 800878a:	1a9b      	subs	r3, r3, r2
 800878c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8008790:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008794:	da20      	bge.n	80087d8 <__ieee754_atan2+0x110>
 8008796:	2f00      	cmp	r7, #0
 8008798:	da01      	bge.n	800879e <__ieee754_atan2+0xd6>
 800879a:	323c      	adds	r2, #60	; 0x3c
 800879c:	db20      	blt.n	80087e0 <__ieee754_atan2+0x118>
 800879e:	4652      	mov	r2, sl
 80087a0:	464b      	mov	r3, r9
 80087a2:	4620      	mov	r0, r4
 80087a4:	4629      	mov	r1, r5
 80087a6:	f7f7 ffc1 	bl	800072c <__aeabi_ddiv>
 80087aa:	f001 f947 	bl	8009a3c <fabs>
 80087ae:	f000 ffbb 	bl	8009728 <atan>
 80087b2:	4604      	mov	r4, r0
 80087b4:	460d      	mov	r5, r1
 80087b6:	2e01      	cmp	r6, #1
 80087b8:	d015      	beq.n	80087e6 <__ieee754_atan2+0x11e>
 80087ba:	2e02      	cmp	r6, #2
 80087bc:	d017      	beq.n	80087ee <__ieee754_atan2+0x126>
 80087be:	2e00      	cmp	r6, #0
 80087c0:	d0c1      	beq.n	8008746 <__ieee754_atan2+0x7e>
 80087c2:	a31f      	add	r3, pc, #124	; (adr r3, 8008840 <__ieee754_atan2+0x178>)
 80087c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c8:	4620      	mov	r0, r4
 80087ca:	4629      	mov	r1, r5
 80087cc:	f7f7 fccc 	bl	8000168 <__aeabi_dsub>
 80087d0:	a31d      	add	r3, pc, #116	; (adr r3, 8008848 <__ieee754_atan2+0x180>)
 80087d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d6:	e016      	b.n	8008806 <__ieee754_atan2+0x13e>
 80087d8:	a51d      	add	r5, pc, #116	; (adr r5, 8008850 <__ieee754_atan2+0x188>)
 80087da:	e9d5 4500 	ldrd	r4, r5, [r5]
 80087de:	e7ea      	b.n	80087b6 <__ieee754_atan2+0xee>
 80087e0:	2400      	movs	r4, #0
 80087e2:	2500      	movs	r5, #0
 80087e4:	e7e7      	b.n	80087b6 <__ieee754_atan2+0xee>
 80087e6:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80087ea:	461d      	mov	r5, r3
 80087ec:	e7ab      	b.n	8008746 <__ieee754_atan2+0x7e>
 80087ee:	a314      	add	r3, pc, #80	; (adr r3, 8008840 <__ieee754_atan2+0x178>)
 80087f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f4:	4620      	mov	r0, r4
 80087f6:	4629      	mov	r1, r5
 80087f8:	f7f7 fcb6 	bl	8000168 <__aeabi_dsub>
 80087fc:	4602      	mov	r2, r0
 80087fe:	460b      	mov	r3, r1
 8008800:	a111      	add	r1, pc, #68	; (adr r1, 8008848 <__ieee754_atan2+0x180>)
 8008802:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008806:	f7f7 fcaf 	bl	8000168 <__aeabi_dsub>
 800880a:	e77f      	b.n	800870c <__ieee754_atan2+0x44>
 800880c:	a50e      	add	r5, pc, #56	; (adr r5, 8008848 <__ieee754_atan2+0x180>)
 800880e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008812:	e798      	b.n	8008746 <__ieee754_atan2+0x7e>
 8008814:	a510      	add	r5, pc, #64	; (adr r5, 8008858 <__ieee754_atan2+0x190>)
 8008816:	e9d5 4500 	ldrd	r4, r5, [r5]
 800881a:	e794      	b.n	8008746 <__ieee754_atan2+0x7e>
 800881c:	2400      	movs	r4, #0
 800881e:	2500      	movs	r5, #0
 8008820:	e791      	b.n	8008746 <__ieee754_atan2+0x7e>
 8008822:	a50b      	add	r5, pc, #44	; (adr r5, 8008850 <__ieee754_atan2+0x188>)
 8008824:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008828:	e78d      	b.n	8008746 <__ieee754_atan2+0x7e>
 800882a:	bf00      	nop
 800882c:	f3af 8000 	nop.w
 8008830:	54442d18 	.word	0x54442d18
 8008834:	c00921fb 	.word	0xc00921fb
 8008838:	54442d18 	.word	0x54442d18
 800883c:	bff921fb 	.word	0xbff921fb
 8008840:	33145c07 	.word	0x33145c07
 8008844:	3ca1a626 	.word	0x3ca1a626
 8008848:	54442d18 	.word	0x54442d18
 800884c:	400921fb 	.word	0x400921fb
 8008850:	54442d18 	.word	0x54442d18
 8008854:	3ff921fb 	.word	0x3ff921fb
 8008858:	54442d18 	.word	0x54442d18
 800885c:	3fe921fb 	.word	0x3fe921fb
 8008860:	0800bb70 	.word	0x0800bb70
 8008864:	0800bb88 	.word	0x0800bb88
 8008868:	7ff00000 	.word	0x7ff00000
 800886c:	00000000 	.word	0x00000000

08008870 <__ieee754_rem_pio2>:
 8008870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008874:	4614      	mov	r4, r2
 8008876:	4ac4      	ldr	r2, [pc, #784]	; (8008b88 <__ieee754_rem_pio2+0x318>)
 8008878:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800887c:	b08d      	sub	sp, #52	; 0x34
 800887e:	4592      	cmp	sl, r2
 8008880:	9104      	str	r1, [sp, #16]
 8008882:	dc07      	bgt.n	8008894 <__ieee754_rem_pio2+0x24>
 8008884:	2200      	movs	r2, #0
 8008886:	2300      	movs	r3, #0
 8008888:	e9c4 0100 	strd	r0, r1, [r4]
 800888c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8008890:	2500      	movs	r5, #0
 8008892:	e024      	b.n	80088de <__ieee754_rem_pio2+0x6e>
 8008894:	4abd      	ldr	r2, [pc, #756]	; (8008b8c <__ieee754_rem_pio2+0x31c>)
 8008896:	4592      	cmp	sl, r2
 8008898:	dc72      	bgt.n	8008980 <__ieee754_rem_pio2+0x110>
 800889a:	9b04      	ldr	r3, [sp, #16]
 800889c:	4dbc      	ldr	r5, [pc, #752]	; (8008b90 <__ieee754_rem_pio2+0x320>)
 800889e:	2b00      	cmp	r3, #0
 80088a0:	a3ab      	add	r3, pc, #684	; (adr r3, 8008b50 <__ieee754_rem_pio2+0x2e0>)
 80088a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a6:	dd36      	ble.n	8008916 <__ieee754_rem_pio2+0xa6>
 80088a8:	f7f7 fc5e 	bl	8000168 <__aeabi_dsub>
 80088ac:	45aa      	cmp	sl, r5
 80088ae:	4606      	mov	r6, r0
 80088b0:	460f      	mov	r7, r1
 80088b2:	d018      	beq.n	80088e6 <__ieee754_rem_pio2+0x76>
 80088b4:	a3a8      	add	r3, pc, #672	; (adr r3, 8008b58 <__ieee754_rem_pio2+0x2e8>)
 80088b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ba:	f7f7 fc55 	bl	8000168 <__aeabi_dsub>
 80088be:	4602      	mov	r2, r0
 80088c0:	460b      	mov	r3, r1
 80088c2:	4630      	mov	r0, r6
 80088c4:	e9c4 2300 	strd	r2, r3, [r4]
 80088c8:	4639      	mov	r1, r7
 80088ca:	f7f7 fc4d 	bl	8000168 <__aeabi_dsub>
 80088ce:	a3a2      	add	r3, pc, #648	; (adr r3, 8008b58 <__ieee754_rem_pio2+0x2e8>)
 80088d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d4:	f7f7 fc48 	bl	8000168 <__aeabi_dsub>
 80088d8:	2501      	movs	r5, #1
 80088da:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80088de:	4628      	mov	r0, r5
 80088e0:	b00d      	add	sp, #52	; 0x34
 80088e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088e6:	a39e      	add	r3, pc, #632	; (adr r3, 8008b60 <__ieee754_rem_pio2+0x2f0>)
 80088e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ec:	f7f7 fc3c 	bl	8000168 <__aeabi_dsub>
 80088f0:	a39d      	add	r3, pc, #628	; (adr r3, 8008b68 <__ieee754_rem_pio2+0x2f8>)
 80088f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f6:	4606      	mov	r6, r0
 80088f8:	460f      	mov	r7, r1
 80088fa:	f7f7 fc35 	bl	8000168 <__aeabi_dsub>
 80088fe:	4602      	mov	r2, r0
 8008900:	460b      	mov	r3, r1
 8008902:	4630      	mov	r0, r6
 8008904:	e9c4 2300 	strd	r2, r3, [r4]
 8008908:	4639      	mov	r1, r7
 800890a:	f7f7 fc2d 	bl	8000168 <__aeabi_dsub>
 800890e:	a396      	add	r3, pc, #600	; (adr r3, 8008b68 <__ieee754_rem_pio2+0x2f8>)
 8008910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008914:	e7de      	b.n	80088d4 <__ieee754_rem_pio2+0x64>
 8008916:	f7f7 fc29 	bl	800016c <__adddf3>
 800891a:	45aa      	cmp	sl, r5
 800891c:	4606      	mov	r6, r0
 800891e:	460f      	mov	r7, r1
 8008920:	d016      	beq.n	8008950 <__ieee754_rem_pio2+0xe0>
 8008922:	a38d      	add	r3, pc, #564	; (adr r3, 8008b58 <__ieee754_rem_pio2+0x2e8>)
 8008924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008928:	f7f7 fc20 	bl	800016c <__adddf3>
 800892c:	4602      	mov	r2, r0
 800892e:	460b      	mov	r3, r1
 8008930:	4630      	mov	r0, r6
 8008932:	e9c4 2300 	strd	r2, r3, [r4]
 8008936:	4639      	mov	r1, r7
 8008938:	f7f7 fc16 	bl	8000168 <__aeabi_dsub>
 800893c:	a386      	add	r3, pc, #536	; (adr r3, 8008b58 <__ieee754_rem_pio2+0x2e8>)
 800893e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008942:	f7f7 fc13 	bl	800016c <__adddf3>
 8008946:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800894a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800894e:	e7c6      	b.n	80088de <__ieee754_rem_pio2+0x6e>
 8008950:	a383      	add	r3, pc, #524	; (adr r3, 8008b60 <__ieee754_rem_pio2+0x2f0>)
 8008952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008956:	f7f7 fc09 	bl	800016c <__adddf3>
 800895a:	a383      	add	r3, pc, #524	; (adr r3, 8008b68 <__ieee754_rem_pio2+0x2f8>)
 800895c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008960:	4606      	mov	r6, r0
 8008962:	460f      	mov	r7, r1
 8008964:	f7f7 fc02 	bl	800016c <__adddf3>
 8008968:	4602      	mov	r2, r0
 800896a:	460b      	mov	r3, r1
 800896c:	4630      	mov	r0, r6
 800896e:	e9c4 2300 	strd	r2, r3, [r4]
 8008972:	4639      	mov	r1, r7
 8008974:	f7f7 fbf8 	bl	8000168 <__aeabi_dsub>
 8008978:	a37b      	add	r3, pc, #492	; (adr r3, 8008b68 <__ieee754_rem_pio2+0x2f8>)
 800897a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800897e:	e7e0      	b.n	8008942 <__ieee754_rem_pio2+0xd2>
 8008980:	4a84      	ldr	r2, [pc, #528]	; (8008b94 <__ieee754_rem_pio2+0x324>)
 8008982:	4592      	cmp	sl, r2
 8008984:	f300 80d5 	bgt.w	8008b32 <__ieee754_rem_pio2+0x2c2>
 8008988:	f001 f858 	bl	8009a3c <fabs>
 800898c:	a378      	add	r3, pc, #480	; (adr r3, 8008b70 <__ieee754_rem_pio2+0x300>)
 800898e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008992:	4606      	mov	r6, r0
 8008994:	460f      	mov	r7, r1
 8008996:	f7f7 fd9f 	bl	80004d8 <__aeabi_dmul>
 800899a:	2200      	movs	r2, #0
 800899c:	4b7e      	ldr	r3, [pc, #504]	; (8008b98 <__ieee754_rem_pio2+0x328>)
 800899e:	f7f7 fbe5 	bl	800016c <__adddf3>
 80089a2:	f7f8 f849 	bl	8000a38 <__aeabi_d2iz>
 80089a6:	4605      	mov	r5, r0
 80089a8:	f7f7 fd2c 	bl	8000404 <__aeabi_i2d>
 80089ac:	4602      	mov	r2, r0
 80089ae:	460b      	mov	r3, r1
 80089b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80089b4:	a366      	add	r3, pc, #408	; (adr r3, 8008b50 <__ieee754_rem_pio2+0x2e0>)
 80089b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ba:	f7f7 fd8d 	bl	80004d8 <__aeabi_dmul>
 80089be:	4602      	mov	r2, r0
 80089c0:	460b      	mov	r3, r1
 80089c2:	4630      	mov	r0, r6
 80089c4:	4639      	mov	r1, r7
 80089c6:	f7f7 fbcf 	bl	8000168 <__aeabi_dsub>
 80089ca:	a363      	add	r3, pc, #396	; (adr r3, 8008b58 <__ieee754_rem_pio2+0x2e8>)
 80089cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d0:	4680      	mov	r8, r0
 80089d2:	4689      	mov	r9, r1
 80089d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089d8:	f7f7 fd7e 	bl	80004d8 <__aeabi_dmul>
 80089dc:	2d1f      	cmp	r5, #31
 80089de:	4606      	mov	r6, r0
 80089e0:	460f      	mov	r7, r1
 80089e2:	dc0e      	bgt.n	8008a02 <__ieee754_rem_pio2+0x192>
 80089e4:	4b6d      	ldr	r3, [pc, #436]	; (8008b9c <__ieee754_rem_pio2+0x32c>)
 80089e6:	1e6a      	subs	r2, r5, #1
 80089e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089ec:	4553      	cmp	r3, sl
 80089ee:	d008      	beq.n	8008a02 <__ieee754_rem_pio2+0x192>
 80089f0:	4632      	mov	r2, r6
 80089f2:	463b      	mov	r3, r7
 80089f4:	4640      	mov	r0, r8
 80089f6:	4649      	mov	r1, r9
 80089f8:	f7f7 fbb6 	bl	8000168 <__aeabi_dsub>
 80089fc:	e9c4 0100 	strd	r0, r1, [r4]
 8008a00:	e013      	b.n	8008a2a <__ieee754_rem_pio2+0x1ba>
 8008a02:	463b      	mov	r3, r7
 8008a04:	4632      	mov	r2, r6
 8008a06:	4640      	mov	r0, r8
 8008a08:	4649      	mov	r1, r9
 8008a0a:	f7f7 fbad 	bl	8000168 <__aeabi_dsub>
 8008a0e:	ea4f 532a 	mov.w	r3, sl, asr #20
 8008a12:	9305      	str	r3, [sp, #20]
 8008a14:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008a18:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 8008a1c:	f1ba 0f10 	cmp.w	sl, #16
 8008a20:	dc1f      	bgt.n	8008a62 <__ieee754_rem_pio2+0x1f2>
 8008a22:	4602      	mov	r2, r0
 8008a24:	460b      	mov	r3, r1
 8008a26:	e9c4 2300 	strd	r2, r3, [r4]
 8008a2a:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8008a2e:	4640      	mov	r0, r8
 8008a30:	4653      	mov	r3, sl
 8008a32:	4649      	mov	r1, r9
 8008a34:	f7f7 fb98 	bl	8000168 <__aeabi_dsub>
 8008a38:	4632      	mov	r2, r6
 8008a3a:	463b      	mov	r3, r7
 8008a3c:	f7f7 fb94 	bl	8000168 <__aeabi_dsub>
 8008a40:	460b      	mov	r3, r1
 8008a42:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008a46:	9904      	ldr	r1, [sp, #16]
 8008a48:	4602      	mov	r2, r0
 8008a4a:	2900      	cmp	r1, #0
 8008a4c:	f6bf af47 	bge.w	80088de <__ieee754_rem_pio2+0x6e>
 8008a50:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 8008a54:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8008a58:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008a5c:	60e3      	str	r3, [r4, #12]
 8008a5e:	426d      	negs	r5, r5
 8008a60:	e73d      	b.n	80088de <__ieee754_rem_pio2+0x6e>
 8008a62:	a33f      	add	r3, pc, #252	; (adr r3, 8008b60 <__ieee754_rem_pio2+0x2f0>)
 8008a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a6c:	f7f7 fd34 	bl	80004d8 <__aeabi_dmul>
 8008a70:	4606      	mov	r6, r0
 8008a72:	460f      	mov	r7, r1
 8008a74:	4602      	mov	r2, r0
 8008a76:	460b      	mov	r3, r1
 8008a78:	4640      	mov	r0, r8
 8008a7a:	4649      	mov	r1, r9
 8008a7c:	f7f7 fb74 	bl	8000168 <__aeabi_dsub>
 8008a80:	4602      	mov	r2, r0
 8008a82:	460b      	mov	r3, r1
 8008a84:	4682      	mov	sl, r0
 8008a86:	468b      	mov	fp, r1
 8008a88:	4640      	mov	r0, r8
 8008a8a:	4649      	mov	r1, r9
 8008a8c:	f7f7 fb6c 	bl	8000168 <__aeabi_dsub>
 8008a90:	4632      	mov	r2, r6
 8008a92:	463b      	mov	r3, r7
 8008a94:	f7f7 fb68 	bl	8000168 <__aeabi_dsub>
 8008a98:	a333      	add	r3, pc, #204	; (adr r3, 8008b68 <__ieee754_rem_pio2+0x2f8>)
 8008a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a9e:	4606      	mov	r6, r0
 8008aa0:	460f      	mov	r7, r1
 8008aa2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008aa6:	f7f7 fd17 	bl	80004d8 <__aeabi_dmul>
 8008aaa:	4632      	mov	r2, r6
 8008aac:	463b      	mov	r3, r7
 8008aae:	f7f7 fb5b 	bl	8000168 <__aeabi_dsub>
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	4606      	mov	r6, r0
 8008ab8:	460f      	mov	r7, r1
 8008aba:	4650      	mov	r0, sl
 8008abc:	4659      	mov	r1, fp
 8008abe:	f7f7 fb53 	bl	8000168 <__aeabi_dsub>
 8008ac2:	9a05      	ldr	r2, [sp, #20]
 8008ac4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008ac8:	1ad3      	subs	r3, r2, r3
 8008aca:	2b31      	cmp	r3, #49	; 0x31
 8008acc:	dc06      	bgt.n	8008adc <__ieee754_rem_pio2+0x26c>
 8008ace:	4602      	mov	r2, r0
 8008ad0:	460b      	mov	r3, r1
 8008ad2:	46d0      	mov	r8, sl
 8008ad4:	46d9      	mov	r9, fp
 8008ad6:	e9c4 2300 	strd	r2, r3, [r4]
 8008ada:	e7a6      	b.n	8008a2a <__ieee754_rem_pio2+0x1ba>
 8008adc:	a326      	add	r3, pc, #152	; (adr r3, 8008b78 <__ieee754_rem_pio2+0x308>)
 8008ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ae6:	f7f7 fcf7 	bl	80004d8 <__aeabi_dmul>
 8008aea:	4606      	mov	r6, r0
 8008aec:	460f      	mov	r7, r1
 8008aee:	4602      	mov	r2, r0
 8008af0:	460b      	mov	r3, r1
 8008af2:	4650      	mov	r0, sl
 8008af4:	4659      	mov	r1, fp
 8008af6:	f7f7 fb37 	bl	8000168 <__aeabi_dsub>
 8008afa:	4602      	mov	r2, r0
 8008afc:	460b      	mov	r3, r1
 8008afe:	4680      	mov	r8, r0
 8008b00:	4689      	mov	r9, r1
 8008b02:	4650      	mov	r0, sl
 8008b04:	4659      	mov	r1, fp
 8008b06:	f7f7 fb2f 	bl	8000168 <__aeabi_dsub>
 8008b0a:	4632      	mov	r2, r6
 8008b0c:	463b      	mov	r3, r7
 8008b0e:	f7f7 fb2b 	bl	8000168 <__aeabi_dsub>
 8008b12:	a31b      	add	r3, pc, #108	; (adr r3, 8008b80 <__ieee754_rem_pio2+0x310>)
 8008b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b18:	4606      	mov	r6, r0
 8008b1a:	460f      	mov	r7, r1
 8008b1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b20:	f7f7 fcda 	bl	80004d8 <__aeabi_dmul>
 8008b24:	4632      	mov	r2, r6
 8008b26:	463b      	mov	r3, r7
 8008b28:	f7f7 fb1e 	bl	8000168 <__aeabi_dsub>
 8008b2c:	4606      	mov	r6, r0
 8008b2e:	460f      	mov	r7, r1
 8008b30:	e75e      	b.n	80089f0 <__ieee754_rem_pio2+0x180>
 8008b32:	4a1b      	ldr	r2, [pc, #108]	; (8008ba0 <__ieee754_rem_pio2+0x330>)
 8008b34:	4592      	cmp	sl, r2
 8008b36:	dd35      	ble.n	8008ba4 <__ieee754_rem_pio2+0x334>
 8008b38:	4602      	mov	r2, r0
 8008b3a:	460b      	mov	r3, r1
 8008b3c:	f7f7 fb14 	bl	8000168 <__aeabi_dsub>
 8008b40:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008b44:	e9c4 0100 	strd	r0, r1, [r4]
 8008b48:	e6a2      	b.n	8008890 <__ieee754_rem_pio2+0x20>
 8008b4a:	bf00      	nop
 8008b4c:	f3af 8000 	nop.w
 8008b50:	54400000 	.word	0x54400000
 8008b54:	3ff921fb 	.word	0x3ff921fb
 8008b58:	1a626331 	.word	0x1a626331
 8008b5c:	3dd0b461 	.word	0x3dd0b461
 8008b60:	1a600000 	.word	0x1a600000
 8008b64:	3dd0b461 	.word	0x3dd0b461
 8008b68:	2e037073 	.word	0x2e037073
 8008b6c:	3ba3198a 	.word	0x3ba3198a
 8008b70:	6dc9c883 	.word	0x6dc9c883
 8008b74:	3fe45f30 	.word	0x3fe45f30
 8008b78:	2e000000 	.word	0x2e000000
 8008b7c:	3ba3198a 	.word	0x3ba3198a
 8008b80:	252049c1 	.word	0x252049c1
 8008b84:	397b839a 	.word	0x397b839a
 8008b88:	3fe921fb 	.word	0x3fe921fb
 8008b8c:	4002d97b 	.word	0x4002d97b
 8008b90:	3ff921fb 	.word	0x3ff921fb
 8008b94:	413921fb 	.word	0x413921fb
 8008b98:	3fe00000 	.word	0x3fe00000
 8008b9c:	0800bba0 	.word	0x0800bba0
 8008ba0:	7fefffff 	.word	0x7fefffff
 8008ba4:	ea4f 552a 	mov.w	r5, sl, asr #20
 8008ba8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8008bac:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8008bb0:	460f      	mov	r7, r1
 8008bb2:	4606      	mov	r6, r0
 8008bb4:	f7f7 ff40 	bl	8000a38 <__aeabi_d2iz>
 8008bb8:	f7f7 fc24 	bl	8000404 <__aeabi_i2d>
 8008bbc:	4602      	mov	r2, r0
 8008bbe:	460b      	mov	r3, r1
 8008bc0:	4630      	mov	r0, r6
 8008bc2:	4639      	mov	r1, r7
 8008bc4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008bc8:	f7f7 face 	bl	8000168 <__aeabi_dsub>
 8008bcc:	2200      	movs	r2, #0
 8008bce:	4b1e      	ldr	r3, [pc, #120]	; (8008c48 <__ieee754_rem_pio2+0x3d8>)
 8008bd0:	f7f7 fc82 	bl	80004d8 <__aeabi_dmul>
 8008bd4:	460f      	mov	r7, r1
 8008bd6:	4606      	mov	r6, r0
 8008bd8:	f7f7 ff2e 	bl	8000a38 <__aeabi_d2iz>
 8008bdc:	f7f7 fc12 	bl	8000404 <__aeabi_i2d>
 8008be0:	4602      	mov	r2, r0
 8008be2:	460b      	mov	r3, r1
 8008be4:	4630      	mov	r0, r6
 8008be6:	4639      	mov	r1, r7
 8008be8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008bec:	f7f7 fabc 	bl	8000168 <__aeabi_dsub>
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	4b15      	ldr	r3, [pc, #84]	; (8008c48 <__ieee754_rem_pio2+0x3d8>)
 8008bf4:	f7f7 fc70 	bl	80004d8 <__aeabi_dmul>
 8008bf8:	f04f 0803 	mov.w	r8, #3
 8008bfc:	2600      	movs	r6, #0
 8008bfe:	2700      	movs	r7, #0
 8008c00:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008c04:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8008c08:	4632      	mov	r2, r6
 8008c0a:	e879 0102 	ldrd	r0, r1, [r9], #-8
 8008c0e:	463b      	mov	r3, r7
 8008c10:	46c2      	mov	sl, r8
 8008c12:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8008c16:	f7f7 fec7 	bl	80009a8 <__aeabi_dcmpeq>
 8008c1a:	2800      	cmp	r0, #0
 8008c1c:	d1f4      	bne.n	8008c08 <__ieee754_rem_pio2+0x398>
 8008c1e:	4b0b      	ldr	r3, [pc, #44]	; (8008c4c <__ieee754_rem_pio2+0x3dc>)
 8008c20:	462a      	mov	r2, r5
 8008c22:	9301      	str	r3, [sp, #4]
 8008c24:	2302      	movs	r3, #2
 8008c26:	4621      	mov	r1, r4
 8008c28:	9300      	str	r3, [sp, #0]
 8008c2a:	a806      	add	r0, sp, #24
 8008c2c:	4653      	mov	r3, sl
 8008c2e:	f000 f979 	bl	8008f24 <__kernel_rem_pio2>
 8008c32:	9b04      	ldr	r3, [sp, #16]
 8008c34:	4605      	mov	r5, r0
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	f6bf ae51 	bge.w	80088de <__ieee754_rem_pio2+0x6e>
 8008c3c:	6863      	ldr	r3, [r4, #4]
 8008c3e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008c42:	6063      	str	r3, [r4, #4]
 8008c44:	68e3      	ldr	r3, [r4, #12]
 8008c46:	e707      	b.n	8008a58 <__ieee754_rem_pio2+0x1e8>
 8008c48:	41700000 	.word	0x41700000
 8008c4c:	0800bc20 	.word	0x0800bc20

08008c50 <__ieee754_sqrt>:
 8008c50:	f8df c150 	ldr.w	ip, [pc, #336]	; 8008da4 <__ieee754_sqrt+0x154>
 8008c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c58:	ea3c 0c01 	bics.w	ip, ip, r1
 8008c5c:	460b      	mov	r3, r1
 8008c5e:	4606      	mov	r6, r0
 8008c60:	460d      	mov	r5, r1
 8008c62:	460a      	mov	r2, r1
 8008c64:	4607      	mov	r7, r0
 8008c66:	4604      	mov	r4, r0
 8008c68:	d10e      	bne.n	8008c88 <__ieee754_sqrt+0x38>
 8008c6a:	4602      	mov	r2, r0
 8008c6c:	f7f7 fc34 	bl	80004d8 <__aeabi_dmul>
 8008c70:	4602      	mov	r2, r0
 8008c72:	460b      	mov	r3, r1
 8008c74:	4630      	mov	r0, r6
 8008c76:	4629      	mov	r1, r5
 8008c78:	f7f7 fa78 	bl	800016c <__adddf3>
 8008c7c:	4606      	mov	r6, r0
 8008c7e:	460d      	mov	r5, r1
 8008c80:	4630      	mov	r0, r6
 8008c82:	4629      	mov	r1, r5
 8008c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c88:	2900      	cmp	r1, #0
 8008c8a:	dc0d      	bgt.n	8008ca8 <__ieee754_sqrt+0x58>
 8008c8c:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8008c90:	ea5c 0707 	orrs.w	r7, ip, r7
 8008c94:	d0f4      	beq.n	8008c80 <__ieee754_sqrt+0x30>
 8008c96:	b139      	cbz	r1, 8008ca8 <__ieee754_sqrt+0x58>
 8008c98:	4602      	mov	r2, r0
 8008c9a:	f7f7 fa65 	bl	8000168 <__aeabi_dsub>
 8008c9e:	4602      	mov	r2, r0
 8008ca0:	460b      	mov	r3, r1
 8008ca2:	f7f7 fd43 	bl	800072c <__aeabi_ddiv>
 8008ca6:	e7e9      	b.n	8008c7c <__ieee754_sqrt+0x2c>
 8008ca8:	1512      	asrs	r2, r2, #20
 8008caa:	d074      	beq.n	8008d96 <__ieee754_sqrt+0x146>
 8008cac:	2000      	movs	r0, #0
 8008cae:	07d5      	lsls	r5, r2, #31
 8008cb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008cb4:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 8008cb8:	bf5e      	ittt	pl
 8008cba:	0fe3      	lsrpl	r3, r4, #31
 8008cbc:	0064      	lslpl	r4, r4, #1
 8008cbe:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 8008cc2:	0fe3      	lsrs	r3, r4, #31
 8008cc4:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8008cc8:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8008ccc:	2516      	movs	r5, #22
 8008cce:	4601      	mov	r1, r0
 8008cd0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008cd4:	1076      	asrs	r6, r6, #1
 8008cd6:	0064      	lsls	r4, r4, #1
 8008cd8:	188f      	adds	r7, r1, r2
 8008cda:	429f      	cmp	r7, r3
 8008cdc:	bfde      	ittt	le
 8008cde:	1bdb      	suble	r3, r3, r7
 8008ce0:	18b9      	addle	r1, r7, r2
 8008ce2:	1880      	addle	r0, r0, r2
 8008ce4:	005b      	lsls	r3, r3, #1
 8008ce6:	3d01      	subs	r5, #1
 8008ce8:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8008cec:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8008cf0:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8008cf4:	d1f0      	bne.n	8008cd8 <__ieee754_sqrt+0x88>
 8008cf6:	462a      	mov	r2, r5
 8008cf8:	f04f 0e20 	mov.w	lr, #32
 8008cfc:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8008d00:	428b      	cmp	r3, r1
 8008d02:	eb07 0c05 	add.w	ip, r7, r5
 8008d06:	dc02      	bgt.n	8008d0e <__ieee754_sqrt+0xbe>
 8008d08:	d113      	bne.n	8008d32 <__ieee754_sqrt+0xe2>
 8008d0a:	45a4      	cmp	ip, r4
 8008d0c:	d811      	bhi.n	8008d32 <__ieee754_sqrt+0xe2>
 8008d0e:	f1bc 0f00 	cmp.w	ip, #0
 8008d12:	eb0c 0507 	add.w	r5, ip, r7
 8008d16:	da43      	bge.n	8008da0 <__ieee754_sqrt+0x150>
 8008d18:	2d00      	cmp	r5, #0
 8008d1a:	db41      	blt.n	8008da0 <__ieee754_sqrt+0x150>
 8008d1c:	f101 0801 	add.w	r8, r1, #1
 8008d20:	1a5b      	subs	r3, r3, r1
 8008d22:	4641      	mov	r1, r8
 8008d24:	45a4      	cmp	ip, r4
 8008d26:	bf88      	it	hi
 8008d28:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 8008d2c:	eba4 040c 	sub.w	r4, r4, ip
 8008d30:	443a      	add	r2, r7
 8008d32:	005b      	lsls	r3, r3, #1
 8008d34:	f1be 0e01 	subs.w	lr, lr, #1
 8008d38:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8008d3c:	ea4f 0757 	mov.w	r7, r7, lsr #1
 8008d40:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8008d44:	d1dc      	bne.n	8008d00 <__ieee754_sqrt+0xb0>
 8008d46:	4323      	orrs	r3, r4
 8008d48:	d006      	beq.n	8008d58 <__ieee754_sqrt+0x108>
 8008d4a:	1c54      	adds	r4, r2, #1
 8008d4c:	bf0b      	itete	eq
 8008d4e:	4672      	moveq	r2, lr
 8008d50:	3201      	addne	r2, #1
 8008d52:	3001      	addeq	r0, #1
 8008d54:	f022 0201 	bicne.w	r2, r2, #1
 8008d58:	1043      	asrs	r3, r0, #1
 8008d5a:	07c1      	lsls	r1, r0, #31
 8008d5c:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8008d60:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008d64:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008d68:	bf48      	it	mi
 8008d6a:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8008d6e:	4610      	mov	r0, r2
 8008d70:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8008d74:	e782      	b.n	8008c7c <__ieee754_sqrt+0x2c>
 8008d76:	0ae3      	lsrs	r3, r4, #11
 8008d78:	3915      	subs	r1, #21
 8008d7a:	0564      	lsls	r4, r4, #21
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d0fa      	beq.n	8008d76 <__ieee754_sqrt+0x126>
 8008d80:	02de      	lsls	r6, r3, #11
 8008d82:	d50a      	bpl.n	8008d9a <__ieee754_sqrt+0x14a>
 8008d84:	f1c2 0020 	rsb	r0, r2, #32
 8008d88:	fa24 f000 	lsr.w	r0, r4, r0
 8008d8c:	1e55      	subs	r5, r2, #1
 8008d8e:	4094      	lsls	r4, r2
 8008d90:	4303      	orrs	r3, r0
 8008d92:	1b4a      	subs	r2, r1, r5
 8008d94:	e78a      	b.n	8008cac <__ieee754_sqrt+0x5c>
 8008d96:	4611      	mov	r1, r2
 8008d98:	e7f0      	b.n	8008d7c <__ieee754_sqrt+0x12c>
 8008d9a:	005b      	lsls	r3, r3, #1
 8008d9c:	3201      	adds	r2, #1
 8008d9e:	e7ef      	b.n	8008d80 <__ieee754_sqrt+0x130>
 8008da0:	4688      	mov	r8, r1
 8008da2:	e7bd      	b.n	8008d20 <__ieee754_sqrt+0xd0>
 8008da4:	7ff00000 	.word	0x7ff00000

08008da8 <__kernel_cos>:
 8008da8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dac:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008db0:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8008db4:	4680      	mov	r8, r0
 8008db6:	460f      	mov	r7, r1
 8008db8:	e9cd 2300 	strd	r2, r3, [sp]
 8008dbc:	da04      	bge.n	8008dc8 <__kernel_cos+0x20>
 8008dbe:	f7f7 fe3b 	bl	8000a38 <__aeabi_d2iz>
 8008dc2:	2800      	cmp	r0, #0
 8008dc4:	f000 8086 	beq.w	8008ed4 <__kernel_cos+0x12c>
 8008dc8:	4642      	mov	r2, r8
 8008dca:	463b      	mov	r3, r7
 8008dcc:	4640      	mov	r0, r8
 8008dce:	4639      	mov	r1, r7
 8008dd0:	f7f7 fb82 	bl	80004d8 <__aeabi_dmul>
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	4b4e      	ldr	r3, [pc, #312]	; (8008f10 <__kernel_cos+0x168>)
 8008dd8:	4604      	mov	r4, r0
 8008dda:	460d      	mov	r5, r1
 8008ddc:	f7f7 fb7c 	bl	80004d8 <__aeabi_dmul>
 8008de0:	a33f      	add	r3, pc, #252	; (adr r3, 8008ee0 <__kernel_cos+0x138>)
 8008de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de6:	4682      	mov	sl, r0
 8008de8:	468b      	mov	fp, r1
 8008dea:	4620      	mov	r0, r4
 8008dec:	4629      	mov	r1, r5
 8008dee:	f7f7 fb73 	bl	80004d8 <__aeabi_dmul>
 8008df2:	a33d      	add	r3, pc, #244	; (adr r3, 8008ee8 <__kernel_cos+0x140>)
 8008df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df8:	f7f7 f9b8 	bl	800016c <__adddf3>
 8008dfc:	4622      	mov	r2, r4
 8008dfe:	462b      	mov	r3, r5
 8008e00:	f7f7 fb6a 	bl	80004d8 <__aeabi_dmul>
 8008e04:	a33a      	add	r3, pc, #232	; (adr r3, 8008ef0 <__kernel_cos+0x148>)
 8008e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e0a:	f7f7 f9ad 	bl	8000168 <__aeabi_dsub>
 8008e0e:	4622      	mov	r2, r4
 8008e10:	462b      	mov	r3, r5
 8008e12:	f7f7 fb61 	bl	80004d8 <__aeabi_dmul>
 8008e16:	a338      	add	r3, pc, #224	; (adr r3, 8008ef8 <__kernel_cos+0x150>)
 8008e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e1c:	f7f7 f9a6 	bl	800016c <__adddf3>
 8008e20:	4622      	mov	r2, r4
 8008e22:	462b      	mov	r3, r5
 8008e24:	f7f7 fb58 	bl	80004d8 <__aeabi_dmul>
 8008e28:	a335      	add	r3, pc, #212	; (adr r3, 8008f00 <__kernel_cos+0x158>)
 8008e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e2e:	f7f7 f99b 	bl	8000168 <__aeabi_dsub>
 8008e32:	4622      	mov	r2, r4
 8008e34:	462b      	mov	r3, r5
 8008e36:	f7f7 fb4f 	bl	80004d8 <__aeabi_dmul>
 8008e3a:	a333      	add	r3, pc, #204	; (adr r3, 8008f08 <__kernel_cos+0x160>)
 8008e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e40:	f7f7 f994 	bl	800016c <__adddf3>
 8008e44:	4622      	mov	r2, r4
 8008e46:	462b      	mov	r3, r5
 8008e48:	f7f7 fb46 	bl	80004d8 <__aeabi_dmul>
 8008e4c:	4622      	mov	r2, r4
 8008e4e:	462b      	mov	r3, r5
 8008e50:	f7f7 fb42 	bl	80004d8 <__aeabi_dmul>
 8008e54:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e58:	4604      	mov	r4, r0
 8008e5a:	460d      	mov	r5, r1
 8008e5c:	4640      	mov	r0, r8
 8008e5e:	4639      	mov	r1, r7
 8008e60:	f7f7 fb3a 	bl	80004d8 <__aeabi_dmul>
 8008e64:	460b      	mov	r3, r1
 8008e66:	4602      	mov	r2, r0
 8008e68:	4629      	mov	r1, r5
 8008e6a:	4620      	mov	r0, r4
 8008e6c:	f7f7 f97c 	bl	8000168 <__aeabi_dsub>
 8008e70:	4b28      	ldr	r3, [pc, #160]	; (8008f14 <__kernel_cos+0x16c>)
 8008e72:	4680      	mov	r8, r0
 8008e74:	429e      	cmp	r6, r3
 8008e76:	4689      	mov	r9, r1
 8008e78:	dc0e      	bgt.n	8008e98 <__kernel_cos+0xf0>
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	460b      	mov	r3, r1
 8008e7e:	4650      	mov	r0, sl
 8008e80:	4659      	mov	r1, fp
 8008e82:	f7f7 f971 	bl	8000168 <__aeabi_dsub>
 8008e86:	4602      	mov	r2, r0
 8008e88:	2000      	movs	r0, #0
 8008e8a:	460b      	mov	r3, r1
 8008e8c:	4922      	ldr	r1, [pc, #136]	; (8008f18 <__kernel_cos+0x170>)
 8008e8e:	f7f7 f96b 	bl	8000168 <__aeabi_dsub>
 8008e92:	b003      	add	sp, #12
 8008e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e98:	2400      	movs	r4, #0
 8008e9a:	4b20      	ldr	r3, [pc, #128]	; (8008f1c <__kernel_cos+0x174>)
 8008e9c:	4622      	mov	r2, r4
 8008e9e:	429e      	cmp	r6, r3
 8008ea0:	bfcc      	ite	gt
 8008ea2:	4d1f      	ldrgt	r5, [pc, #124]	; (8008f20 <__kernel_cos+0x178>)
 8008ea4:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8008ea8:	462b      	mov	r3, r5
 8008eaa:	2000      	movs	r0, #0
 8008eac:	491a      	ldr	r1, [pc, #104]	; (8008f18 <__kernel_cos+0x170>)
 8008eae:	f7f7 f95b 	bl	8000168 <__aeabi_dsub>
 8008eb2:	4622      	mov	r2, r4
 8008eb4:	4606      	mov	r6, r0
 8008eb6:	460f      	mov	r7, r1
 8008eb8:	462b      	mov	r3, r5
 8008eba:	4650      	mov	r0, sl
 8008ebc:	4659      	mov	r1, fp
 8008ebe:	f7f7 f953 	bl	8000168 <__aeabi_dsub>
 8008ec2:	4642      	mov	r2, r8
 8008ec4:	464b      	mov	r3, r9
 8008ec6:	f7f7 f94f 	bl	8000168 <__aeabi_dsub>
 8008eca:	4602      	mov	r2, r0
 8008ecc:	460b      	mov	r3, r1
 8008ece:	4630      	mov	r0, r6
 8008ed0:	4639      	mov	r1, r7
 8008ed2:	e7dc      	b.n	8008e8e <__kernel_cos+0xe6>
 8008ed4:	2000      	movs	r0, #0
 8008ed6:	4910      	ldr	r1, [pc, #64]	; (8008f18 <__kernel_cos+0x170>)
 8008ed8:	e7db      	b.n	8008e92 <__kernel_cos+0xea>
 8008eda:	bf00      	nop
 8008edc:	f3af 8000 	nop.w
 8008ee0:	be8838d4 	.word	0xbe8838d4
 8008ee4:	bda8fae9 	.word	0xbda8fae9
 8008ee8:	bdb4b1c4 	.word	0xbdb4b1c4
 8008eec:	3e21ee9e 	.word	0x3e21ee9e
 8008ef0:	809c52ad 	.word	0x809c52ad
 8008ef4:	3e927e4f 	.word	0x3e927e4f
 8008ef8:	19cb1590 	.word	0x19cb1590
 8008efc:	3efa01a0 	.word	0x3efa01a0
 8008f00:	16c15177 	.word	0x16c15177
 8008f04:	3f56c16c 	.word	0x3f56c16c
 8008f08:	5555554c 	.word	0x5555554c
 8008f0c:	3fa55555 	.word	0x3fa55555
 8008f10:	3fe00000 	.word	0x3fe00000
 8008f14:	3fd33332 	.word	0x3fd33332
 8008f18:	3ff00000 	.word	0x3ff00000
 8008f1c:	3fe90000 	.word	0x3fe90000
 8008f20:	3fd20000 	.word	0x3fd20000

08008f24 <__kernel_rem_pio2>:
 8008f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f28:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8008f2c:	9308      	str	r3, [sp, #32]
 8008f2e:	9101      	str	r1, [sp, #4]
 8008f30:	4bc0      	ldr	r3, [pc, #768]	; (8009234 <__kernel_rem_pio2+0x310>)
 8008f32:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8008f34:	f112 0f14 	cmn.w	r2, #20
 8008f38:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008f3c:	bfa8      	it	ge
 8008f3e:	1ed4      	subge	r4, r2, #3
 8008f40:	9304      	str	r3, [sp, #16]
 8008f42:	9b08      	ldr	r3, [sp, #32]
 8008f44:	bfb8      	it	lt
 8008f46:	2400      	movlt	r4, #0
 8008f48:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8008f4c:	9306      	str	r3, [sp, #24]
 8008f4e:	bfa4      	itt	ge
 8008f50:	2318      	movge	r3, #24
 8008f52:	fb94 f4f3 	sdivge	r4, r4, r3
 8008f56:	f06f 0317 	mvn.w	r3, #23
 8008f5a:	fb04 3303 	mla	r3, r4, r3, r3
 8008f5e:	eb03 0a02 	add.w	sl, r3, r2
 8008f62:	9a06      	ldr	r2, [sp, #24]
 8008f64:	9b04      	ldr	r3, [sp, #16]
 8008f66:	1aa7      	subs	r7, r4, r2
 8008f68:	eb03 0802 	add.w	r8, r3, r2
 8008f6c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8008f6e:	2500      	movs	r5, #0
 8008f70:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008f74:	2200      	movs	r2, #0
 8008f76:	2300      	movs	r3, #0
 8008f78:	9009      	str	r0, [sp, #36]	; 0x24
 8008f7a:	ae20      	add	r6, sp, #128	; 0x80
 8008f7c:	4545      	cmp	r5, r8
 8008f7e:	dd19      	ble.n	8008fb4 <__kernel_rem_pio2+0x90>
 8008f80:	9b08      	ldr	r3, [sp, #32]
 8008f82:	aa20      	add	r2, sp, #128	; 0x80
 8008f84:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8008f88:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8008f8c:	f1c3 0301 	rsb	r3, r3, #1
 8008f90:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8008f94:	9307      	str	r3, [sp, #28]
 8008f96:	9b07      	ldr	r3, [sp, #28]
 8008f98:	9a04      	ldr	r2, [sp, #16]
 8008f9a:	4443      	add	r3, r8
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	db35      	blt.n	800900c <__kernel_rem_pio2+0xe8>
 8008fa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	f1a3 0908 	sub.w	r9, r3, #8
 8008fa8:	2300      	movs	r3, #0
 8008faa:	462f      	mov	r7, r5
 8008fac:	2600      	movs	r6, #0
 8008fae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008fb2:	e01f      	b.n	8008ff4 <__kernel_rem_pio2+0xd0>
 8008fb4:	42ef      	cmn	r7, r5
 8008fb6:	d40b      	bmi.n	8008fd0 <__kernel_rem_pio2+0xac>
 8008fb8:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008fbc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008fc0:	f7f7 fa20 	bl	8000404 <__aeabi_i2d>
 8008fc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008fc8:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008fcc:	3501      	adds	r5, #1
 8008fce:	e7d5      	b.n	8008f7c <__kernel_rem_pio2+0x58>
 8008fd0:	4610      	mov	r0, r2
 8008fd2:	4619      	mov	r1, r3
 8008fd4:	e7f8      	b.n	8008fc8 <__kernel_rem_pio2+0xa4>
 8008fd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fda:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8008fde:	f7f7 fa7b 	bl	80004d8 <__aeabi_dmul>
 8008fe2:	4602      	mov	r2, r0
 8008fe4:	460b      	mov	r3, r1
 8008fe6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fea:	f7f7 f8bf 	bl	800016c <__adddf3>
 8008fee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ff2:	3601      	adds	r6, #1
 8008ff4:	9b06      	ldr	r3, [sp, #24]
 8008ff6:	3f08      	subs	r7, #8
 8008ff8:	429e      	cmp	r6, r3
 8008ffa:	ddec      	ble.n	8008fd6 <__kernel_rem_pio2+0xb2>
 8008ffc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009000:	3508      	adds	r5, #8
 8009002:	e8eb 2302 	strd	r2, r3, [fp], #8
 8009006:	f108 0801 	add.w	r8, r8, #1
 800900a:	e7c4      	b.n	8008f96 <__kernel_rem_pio2+0x72>
 800900c:	9b04      	ldr	r3, [sp, #16]
 800900e:	aa0c      	add	r2, sp, #48	; 0x30
 8009010:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009014:	930b      	str	r3, [sp, #44]	; 0x2c
 8009016:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8009018:	9f04      	ldr	r7, [sp, #16]
 800901a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800901e:	930a      	str	r3, [sp, #40]	; 0x28
 8009020:	463e      	mov	r6, r7
 8009022:	ab98      	add	r3, sp, #608	; 0x260
 8009024:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8009028:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800902c:	f8cd b008 	str.w	fp, [sp, #8]
 8009030:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8009034:	2e00      	cmp	r6, #0
 8009036:	dc71      	bgt.n	800911c <__kernel_rem_pio2+0x1f8>
 8009038:	4652      	mov	r2, sl
 800903a:	4620      	mov	r0, r4
 800903c:	4629      	mov	r1, r5
 800903e:	f000 fd83 	bl	8009b48 <scalbn>
 8009042:	2200      	movs	r2, #0
 8009044:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8009048:	4604      	mov	r4, r0
 800904a:	460d      	mov	r5, r1
 800904c:	f7f7 fa44 	bl	80004d8 <__aeabi_dmul>
 8009050:	f000 fcfa 	bl	8009a48 <floor>
 8009054:	2200      	movs	r2, #0
 8009056:	4b78      	ldr	r3, [pc, #480]	; (8009238 <__kernel_rem_pio2+0x314>)
 8009058:	f7f7 fa3e 	bl	80004d8 <__aeabi_dmul>
 800905c:	4602      	mov	r2, r0
 800905e:	460b      	mov	r3, r1
 8009060:	4620      	mov	r0, r4
 8009062:	4629      	mov	r1, r5
 8009064:	f7f7 f880 	bl	8000168 <__aeabi_dsub>
 8009068:	460d      	mov	r5, r1
 800906a:	4604      	mov	r4, r0
 800906c:	f7f7 fce4 	bl	8000a38 <__aeabi_d2iz>
 8009070:	9007      	str	r0, [sp, #28]
 8009072:	f7f7 f9c7 	bl	8000404 <__aeabi_i2d>
 8009076:	4602      	mov	r2, r0
 8009078:	460b      	mov	r3, r1
 800907a:	4620      	mov	r0, r4
 800907c:	4629      	mov	r1, r5
 800907e:	f7f7 f873 	bl	8000168 <__aeabi_dsub>
 8009082:	f1ba 0f00 	cmp.w	sl, #0
 8009086:	4680      	mov	r8, r0
 8009088:	4689      	mov	r9, r1
 800908a:	dd70      	ble.n	800916e <__kernel_rem_pio2+0x24a>
 800908c:	1e7a      	subs	r2, r7, #1
 800908e:	ab0c      	add	r3, sp, #48	; 0x30
 8009090:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009094:	9c07      	ldr	r4, [sp, #28]
 8009096:	f1ca 0118 	rsb	r1, sl, #24
 800909a:	fa40 f301 	asr.w	r3, r0, r1
 800909e:	441c      	add	r4, r3
 80090a0:	408b      	lsls	r3, r1
 80090a2:	1ac0      	subs	r0, r0, r3
 80090a4:	ab0c      	add	r3, sp, #48	; 0x30
 80090a6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80090aa:	f1ca 0317 	rsb	r3, sl, #23
 80090ae:	9407      	str	r4, [sp, #28]
 80090b0:	fa40 f303 	asr.w	r3, r0, r3
 80090b4:	9302      	str	r3, [sp, #8]
 80090b6:	9b02      	ldr	r3, [sp, #8]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	dd66      	ble.n	800918a <__kernel_rem_pio2+0x266>
 80090bc:	2200      	movs	r2, #0
 80090be:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80090c2:	4614      	mov	r4, r2
 80090c4:	9b07      	ldr	r3, [sp, #28]
 80090c6:	3301      	adds	r3, #1
 80090c8:	9307      	str	r3, [sp, #28]
 80090ca:	4297      	cmp	r7, r2
 80090cc:	f300 809f 	bgt.w	800920e <__kernel_rem_pio2+0x2ea>
 80090d0:	f1ba 0f00 	cmp.w	sl, #0
 80090d4:	dd07      	ble.n	80090e6 <__kernel_rem_pio2+0x1c2>
 80090d6:	f1ba 0f01 	cmp.w	sl, #1
 80090da:	f000 80b9 	beq.w	8009250 <__kernel_rem_pio2+0x32c>
 80090de:	f1ba 0f02 	cmp.w	sl, #2
 80090e2:	f000 80bf 	beq.w	8009264 <__kernel_rem_pio2+0x340>
 80090e6:	9b02      	ldr	r3, [sp, #8]
 80090e8:	2b02      	cmp	r3, #2
 80090ea:	d14e      	bne.n	800918a <__kernel_rem_pio2+0x266>
 80090ec:	4642      	mov	r2, r8
 80090ee:	464b      	mov	r3, r9
 80090f0:	2000      	movs	r0, #0
 80090f2:	4952      	ldr	r1, [pc, #328]	; (800923c <__kernel_rem_pio2+0x318>)
 80090f4:	f7f7 f838 	bl	8000168 <__aeabi_dsub>
 80090f8:	4680      	mov	r8, r0
 80090fa:	4689      	mov	r9, r1
 80090fc:	2c00      	cmp	r4, #0
 80090fe:	d044      	beq.n	800918a <__kernel_rem_pio2+0x266>
 8009100:	4652      	mov	r2, sl
 8009102:	2000      	movs	r0, #0
 8009104:	494d      	ldr	r1, [pc, #308]	; (800923c <__kernel_rem_pio2+0x318>)
 8009106:	f000 fd1f 	bl	8009b48 <scalbn>
 800910a:	4602      	mov	r2, r0
 800910c:	460b      	mov	r3, r1
 800910e:	4640      	mov	r0, r8
 8009110:	4649      	mov	r1, r9
 8009112:	f7f7 f829 	bl	8000168 <__aeabi_dsub>
 8009116:	4680      	mov	r8, r0
 8009118:	4689      	mov	r9, r1
 800911a:	e036      	b.n	800918a <__kernel_rem_pio2+0x266>
 800911c:	2200      	movs	r2, #0
 800911e:	4b48      	ldr	r3, [pc, #288]	; (8009240 <__kernel_rem_pio2+0x31c>)
 8009120:	4620      	mov	r0, r4
 8009122:	4629      	mov	r1, r5
 8009124:	f7f7 f9d8 	bl	80004d8 <__aeabi_dmul>
 8009128:	f7f7 fc86 	bl	8000a38 <__aeabi_d2iz>
 800912c:	f7f7 f96a 	bl	8000404 <__aeabi_i2d>
 8009130:	2200      	movs	r2, #0
 8009132:	4b44      	ldr	r3, [pc, #272]	; (8009244 <__kernel_rem_pio2+0x320>)
 8009134:	4680      	mov	r8, r0
 8009136:	4689      	mov	r9, r1
 8009138:	f7f7 f9ce 	bl	80004d8 <__aeabi_dmul>
 800913c:	4602      	mov	r2, r0
 800913e:	460b      	mov	r3, r1
 8009140:	4620      	mov	r0, r4
 8009142:	4629      	mov	r1, r5
 8009144:	f7f7 f810 	bl	8000168 <__aeabi_dsub>
 8009148:	f7f7 fc76 	bl	8000a38 <__aeabi_d2iz>
 800914c:	9b02      	ldr	r3, [sp, #8]
 800914e:	3e01      	subs	r6, #1
 8009150:	f843 0b04 	str.w	r0, [r3], #4
 8009154:	9302      	str	r3, [sp, #8]
 8009156:	ab70      	add	r3, sp, #448	; 0x1c0
 8009158:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800915c:	4640      	mov	r0, r8
 800915e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009162:	4649      	mov	r1, r9
 8009164:	f7f7 f802 	bl	800016c <__adddf3>
 8009168:	4604      	mov	r4, r0
 800916a:	460d      	mov	r5, r1
 800916c:	e762      	b.n	8009034 <__kernel_rem_pio2+0x110>
 800916e:	d105      	bne.n	800917c <__kernel_rem_pio2+0x258>
 8009170:	1e7b      	subs	r3, r7, #1
 8009172:	aa0c      	add	r2, sp, #48	; 0x30
 8009174:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009178:	15c3      	asrs	r3, r0, #23
 800917a:	e79b      	b.n	80090b4 <__kernel_rem_pio2+0x190>
 800917c:	2200      	movs	r2, #0
 800917e:	4b32      	ldr	r3, [pc, #200]	; (8009248 <__kernel_rem_pio2+0x324>)
 8009180:	f7f7 fc30 	bl	80009e4 <__aeabi_dcmpge>
 8009184:	2800      	cmp	r0, #0
 8009186:	d13f      	bne.n	8009208 <__kernel_rem_pio2+0x2e4>
 8009188:	9002      	str	r0, [sp, #8]
 800918a:	2200      	movs	r2, #0
 800918c:	2300      	movs	r3, #0
 800918e:	4640      	mov	r0, r8
 8009190:	4649      	mov	r1, r9
 8009192:	f7f7 fc09 	bl	80009a8 <__aeabi_dcmpeq>
 8009196:	2800      	cmp	r0, #0
 8009198:	f000 80b5 	beq.w	8009306 <__kernel_rem_pio2+0x3e2>
 800919c:	1e7c      	subs	r4, r7, #1
 800919e:	4623      	mov	r3, r4
 80091a0:	2200      	movs	r2, #0
 80091a2:	9904      	ldr	r1, [sp, #16]
 80091a4:	428b      	cmp	r3, r1
 80091a6:	da64      	bge.n	8009272 <__kernel_rem_pio2+0x34e>
 80091a8:	2a00      	cmp	r2, #0
 80091aa:	d078      	beq.n	800929e <__kernel_rem_pio2+0x37a>
 80091ac:	ab0c      	add	r3, sp, #48	; 0x30
 80091ae:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80091b2:	f1aa 0a18 	sub.w	sl, sl, #24
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	f000 80a3 	beq.w	8009302 <__kernel_rem_pio2+0x3de>
 80091bc:	4652      	mov	r2, sl
 80091be:	2000      	movs	r0, #0
 80091c0:	491e      	ldr	r1, [pc, #120]	; (800923c <__kernel_rem_pio2+0x318>)
 80091c2:	f000 fcc1 	bl	8009b48 <scalbn>
 80091c6:	46a2      	mov	sl, r4
 80091c8:	4606      	mov	r6, r0
 80091ca:	460f      	mov	r7, r1
 80091cc:	f04f 0800 	mov.w	r8, #0
 80091d0:	00e3      	lsls	r3, r4, #3
 80091d2:	9306      	str	r3, [sp, #24]
 80091d4:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8009240 <__kernel_rem_pio2+0x31c>
 80091d8:	ab70      	add	r3, sp, #448	; 0x1c0
 80091da:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 80091de:	f1ba 0f00 	cmp.w	sl, #0
 80091e2:	f280 80c6 	bge.w	8009372 <__kernel_rem_pio2+0x44e>
 80091e6:	4627      	mov	r7, r4
 80091e8:	f04f 0800 	mov.w	r8, #0
 80091ec:	2f00      	cmp	r7, #0
 80091ee:	f2c0 80f3 	blt.w	80093d8 <__kernel_rem_pio2+0x4b4>
 80091f2:	4b16      	ldr	r3, [pc, #88]	; (800924c <__kernel_rem_pio2+0x328>)
 80091f4:	f04f 0a00 	mov.w	sl, #0
 80091f8:	461d      	mov	r5, r3
 80091fa:	ab70      	add	r3, sp, #448	; 0x1c0
 80091fc:	f04f 0b00 	mov.w	fp, #0
 8009200:	2600      	movs	r6, #0
 8009202:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8009206:	e0d9      	b.n	80093bc <__kernel_rem_pio2+0x498>
 8009208:	2302      	movs	r3, #2
 800920a:	9302      	str	r3, [sp, #8]
 800920c:	e756      	b.n	80090bc <__kernel_rem_pio2+0x198>
 800920e:	f8db 3000 	ldr.w	r3, [fp]
 8009212:	b954      	cbnz	r4, 800922a <__kernel_rem_pio2+0x306>
 8009214:	b123      	cbz	r3, 8009220 <__kernel_rem_pio2+0x2fc>
 8009216:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800921a:	f8cb 3000 	str.w	r3, [fp]
 800921e:	2301      	movs	r3, #1
 8009220:	461c      	mov	r4, r3
 8009222:	3201      	adds	r2, #1
 8009224:	f10b 0b04 	add.w	fp, fp, #4
 8009228:	e74f      	b.n	80090ca <__kernel_rem_pio2+0x1a6>
 800922a:	1acb      	subs	r3, r1, r3
 800922c:	f8cb 3000 	str.w	r3, [fp]
 8009230:	4623      	mov	r3, r4
 8009232:	e7f5      	b.n	8009220 <__kernel_rem_pio2+0x2fc>
 8009234:	0800bd68 	.word	0x0800bd68
 8009238:	40200000 	.word	0x40200000
 800923c:	3ff00000 	.word	0x3ff00000
 8009240:	3e700000 	.word	0x3e700000
 8009244:	41700000 	.word	0x41700000
 8009248:	3fe00000 	.word	0x3fe00000
 800924c:	0800bd28 	.word	0x0800bd28
 8009250:	1e7a      	subs	r2, r7, #1
 8009252:	ab0c      	add	r3, sp, #48	; 0x30
 8009254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009258:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800925c:	a90c      	add	r1, sp, #48	; 0x30
 800925e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009262:	e740      	b.n	80090e6 <__kernel_rem_pio2+0x1c2>
 8009264:	1e7a      	subs	r2, r7, #1
 8009266:	ab0c      	add	r3, sp, #48	; 0x30
 8009268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800926c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009270:	e7f4      	b.n	800925c <__kernel_rem_pio2+0x338>
 8009272:	a90c      	add	r1, sp, #48	; 0x30
 8009274:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009278:	3b01      	subs	r3, #1
 800927a:	430a      	orrs	r2, r1
 800927c:	e791      	b.n	80091a2 <__kernel_rem_pio2+0x27e>
 800927e:	3401      	adds	r4, #1
 8009280:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009284:	2a00      	cmp	r2, #0
 8009286:	d0fa      	beq.n	800927e <__kernel_rem_pio2+0x35a>
 8009288:	9b08      	ldr	r3, [sp, #32]
 800928a:	1c7e      	adds	r6, r7, #1
 800928c:	18fd      	adds	r5, r7, r3
 800928e:	ab20      	add	r3, sp, #128	; 0x80
 8009290:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009294:	443c      	add	r4, r7
 8009296:	42b4      	cmp	r4, r6
 8009298:	da04      	bge.n	80092a4 <__kernel_rem_pio2+0x380>
 800929a:	4627      	mov	r7, r4
 800929c:	e6c0      	b.n	8009020 <__kernel_rem_pio2+0xfc>
 800929e:	2401      	movs	r4, #1
 80092a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092a2:	e7ed      	b.n	8009280 <__kernel_rem_pio2+0x35c>
 80092a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092a6:	462f      	mov	r7, r5
 80092a8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80092ac:	f7f7 f8aa 	bl	8000404 <__aeabi_i2d>
 80092b0:	f04f 0b00 	mov.w	fp, #0
 80092b4:	f04f 0800 	mov.w	r8, #0
 80092b8:	f04f 0900 	mov.w	r9, #0
 80092bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092be:	e8e7 0102 	strd	r0, r1, [r7], #8
 80092c2:	3b08      	subs	r3, #8
 80092c4:	9302      	str	r3, [sp, #8]
 80092c6:	9b06      	ldr	r3, [sp, #24]
 80092c8:	459b      	cmp	fp, r3
 80092ca:	dd07      	ble.n	80092dc <__kernel_rem_pio2+0x3b8>
 80092cc:	ab70      	add	r3, sp, #448	; 0x1c0
 80092ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80092d2:	463d      	mov	r5, r7
 80092d4:	e9c3 8900 	strd	r8, r9, [r3]
 80092d8:	3601      	adds	r6, #1
 80092da:	e7dc      	b.n	8009296 <__kernel_rem_pio2+0x372>
 80092dc:	9902      	ldr	r1, [sp, #8]
 80092de:	f10b 0b01 	add.w	fp, fp, #1
 80092e2:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 80092e6:	9102      	str	r1, [sp, #8]
 80092e8:	e875 0102 	ldrd	r0, r1, [r5], #-8
 80092ec:	f7f7 f8f4 	bl	80004d8 <__aeabi_dmul>
 80092f0:	4602      	mov	r2, r0
 80092f2:	460b      	mov	r3, r1
 80092f4:	4640      	mov	r0, r8
 80092f6:	4649      	mov	r1, r9
 80092f8:	f7f6 ff38 	bl	800016c <__adddf3>
 80092fc:	4680      	mov	r8, r0
 80092fe:	4689      	mov	r9, r1
 8009300:	e7e1      	b.n	80092c6 <__kernel_rem_pio2+0x3a2>
 8009302:	3c01      	subs	r4, #1
 8009304:	e752      	b.n	80091ac <__kernel_rem_pio2+0x288>
 8009306:	f1ca 0200 	rsb	r2, sl, #0
 800930a:	4640      	mov	r0, r8
 800930c:	4649      	mov	r1, r9
 800930e:	f000 fc1b 	bl	8009b48 <scalbn>
 8009312:	2200      	movs	r2, #0
 8009314:	4ba5      	ldr	r3, [pc, #660]	; (80095ac <__kernel_rem_pio2+0x688>)
 8009316:	4604      	mov	r4, r0
 8009318:	460d      	mov	r5, r1
 800931a:	f7f7 fb63 	bl	80009e4 <__aeabi_dcmpge>
 800931e:	b1f8      	cbz	r0, 8009360 <__kernel_rem_pio2+0x43c>
 8009320:	2200      	movs	r2, #0
 8009322:	4ba3      	ldr	r3, [pc, #652]	; (80095b0 <__kernel_rem_pio2+0x68c>)
 8009324:	4620      	mov	r0, r4
 8009326:	4629      	mov	r1, r5
 8009328:	f7f7 f8d6 	bl	80004d8 <__aeabi_dmul>
 800932c:	f7f7 fb84 	bl	8000a38 <__aeabi_d2iz>
 8009330:	4606      	mov	r6, r0
 8009332:	f7f7 f867 	bl	8000404 <__aeabi_i2d>
 8009336:	2200      	movs	r2, #0
 8009338:	4b9c      	ldr	r3, [pc, #624]	; (80095ac <__kernel_rem_pio2+0x688>)
 800933a:	f7f7 f8cd 	bl	80004d8 <__aeabi_dmul>
 800933e:	460b      	mov	r3, r1
 8009340:	4602      	mov	r2, r0
 8009342:	4629      	mov	r1, r5
 8009344:	4620      	mov	r0, r4
 8009346:	f7f6 ff0f 	bl	8000168 <__aeabi_dsub>
 800934a:	f7f7 fb75 	bl	8000a38 <__aeabi_d2iz>
 800934e:	1c7c      	adds	r4, r7, #1
 8009350:	ab0c      	add	r3, sp, #48	; 0x30
 8009352:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8009356:	f10a 0a18 	add.w	sl, sl, #24
 800935a:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800935e:	e72d      	b.n	80091bc <__kernel_rem_pio2+0x298>
 8009360:	4620      	mov	r0, r4
 8009362:	4629      	mov	r1, r5
 8009364:	f7f7 fb68 	bl	8000a38 <__aeabi_d2iz>
 8009368:	ab0c      	add	r3, sp, #48	; 0x30
 800936a:	463c      	mov	r4, r7
 800936c:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8009370:	e724      	b.n	80091bc <__kernel_rem_pio2+0x298>
 8009372:	ab0c      	add	r3, sp, #48	; 0x30
 8009374:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8009378:	f7f7 f844 	bl	8000404 <__aeabi_i2d>
 800937c:	4632      	mov	r2, r6
 800937e:	463b      	mov	r3, r7
 8009380:	f7f7 f8aa 	bl	80004d8 <__aeabi_dmul>
 8009384:	4642      	mov	r2, r8
 8009386:	e86b 0102 	strd	r0, r1, [fp], #-8
 800938a:	464b      	mov	r3, r9
 800938c:	4630      	mov	r0, r6
 800938e:	4639      	mov	r1, r7
 8009390:	f7f7 f8a2 	bl	80004d8 <__aeabi_dmul>
 8009394:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009398:	4606      	mov	r6, r0
 800939a:	460f      	mov	r7, r1
 800939c:	e71f      	b.n	80091de <__kernel_rem_pio2+0x2ba>
 800939e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80093a2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80093a6:	f7f7 f897 	bl	80004d8 <__aeabi_dmul>
 80093aa:	4602      	mov	r2, r0
 80093ac:	460b      	mov	r3, r1
 80093ae:	4650      	mov	r0, sl
 80093b0:	4659      	mov	r1, fp
 80093b2:	f7f6 fedb 	bl	800016c <__adddf3>
 80093b6:	4682      	mov	sl, r0
 80093b8:	468b      	mov	fp, r1
 80093ba:	3601      	adds	r6, #1
 80093bc:	9b04      	ldr	r3, [sp, #16]
 80093be:	429e      	cmp	r6, r3
 80093c0:	dc01      	bgt.n	80093c6 <__kernel_rem_pio2+0x4a2>
 80093c2:	45b0      	cmp	r8, r6
 80093c4:	daeb      	bge.n	800939e <__kernel_rem_pio2+0x47a>
 80093c6:	ab48      	add	r3, sp, #288	; 0x120
 80093c8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80093cc:	e9c3 ab00 	strd	sl, fp, [r3]
 80093d0:	3f01      	subs	r7, #1
 80093d2:	f108 0801 	add.w	r8, r8, #1
 80093d6:	e709      	b.n	80091ec <__kernel_rem_pio2+0x2c8>
 80093d8:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80093da:	2b02      	cmp	r3, #2
 80093dc:	dc09      	bgt.n	80093f2 <__kernel_rem_pio2+0x4ce>
 80093de:	2b00      	cmp	r3, #0
 80093e0:	dc34      	bgt.n	800944c <__kernel_rem_pio2+0x528>
 80093e2:	d05e      	beq.n	80094a2 <__kernel_rem_pio2+0x57e>
 80093e4:	9b07      	ldr	r3, [sp, #28]
 80093e6:	f003 0007 	and.w	r0, r3, #7
 80093ea:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80093ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093f2:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80093f4:	2b03      	cmp	r3, #3
 80093f6:	d1f5      	bne.n	80093e4 <__kernel_rem_pio2+0x4c0>
 80093f8:	9a06      	ldr	r2, [sp, #24]
 80093fa:	ab48      	add	r3, sp, #288	; 0x120
 80093fc:	441a      	add	r2, r3
 80093fe:	4615      	mov	r5, r2
 8009400:	4692      	mov	sl, r2
 8009402:	46a3      	mov	fp, r4
 8009404:	f1bb 0f00 	cmp.w	fp, #0
 8009408:	dc7a      	bgt.n	8009500 <__kernel_rem_pio2+0x5dc>
 800940a:	46aa      	mov	sl, r5
 800940c:	46a3      	mov	fp, r4
 800940e:	f1bb 0f01 	cmp.w	fp, #1
 8009412:	f300 8094 	bgt.w	800953e <__kernel_rem_pio2+0x61a>
 8009416:	2700      	movs	r7, #0
 8009418:	463e      	mov	r6, r7
 800941a:	2c01      	cmp	r4, #1
 800941c:	f300 80ae 	bgt.w	800957c <__kernel_rem_pio2+0x658>
 8009420:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 8009424:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 8009428:	9b02      	ldr	r3, [sp, #8]
 800942a:	2b00      	cmp	r3, #0
 800942c:	f040 80b0 	bne.w	8009590 <__kernel_rem_pio2+0x66c>
 8009430:	4603      	mov	r3, r0
 8009432:	462a      	mov	r2, r5
 8009434:	9801      	ldr	r0, [sp, #4]
 8009436:	e9c0 2300 	strd	r2, r3, [r0]
 800943a:	4622      	mov	r2, r4
 800943c:	460b      	mov	r3, r1
 800943e:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009442:	463a      	mov	r2, r7
 8009444:	4633      	mov	r3, r6
 8009446:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800944a:	e7cb      	b.n	80093e4 <__kernel_rem_pio2+0x4c0>
 800944c:	2000      	movs	r0, #0
 800944e:	9a06      	ldr	r2, [sp, #24]
 8009450:	ab48      	add	r3, sp, #288	; 0x120
 8009452:	441a      	add	r2, r3
 8009454:	4615      	mov	r5, r2
 8009456:	46a0      	mov	r8, r4
 8009458:	4601      	mov	r1, r0
 800945a:	f1b8 0f00 	cmp.w	r8, #0
 800945e:	da3c      	bge.n	80094da <__kernel_rem_pio2+0x5b6>
 8009460:	9b02      	ldr	r3, [sp, #8]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d040      	beq.n	80094e8 <__kernel_rem_pio2+0x5c4>
 8009466:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800946a:	4602      	mov	r2, r0
 800946c:	462b      	mov	r3, r5
 800946e:	9d01      	ldr	r5, [sp, #4]
 8009470:	2601      	movs	r6, #1
 8009472:	e9c5 2300 	strd	r2, r3, [r5]
 8009476:	460b      	mov	r3, r1
 8009478:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800947c:	f7f6 fe74 	bl	8000168 <__aeabi_dsub>
 8009480:	4684      	mov	ip, r0
 8009482:	460f      	mov	r7, r1
 8009484:	ad48      	add	r5, sp, #288	; 0x120
 8009486:	42b4      	cmp	r4, r6
 8009488:	f105 0508 	add.w	r5, r5, #8
 800948c:	da2e      	bge.n	80094ec <__kernel_rem_pio2+0x5c8>
 800948e:	9b02      	ldr	r3, [sp, #8]
 8009490:	b10b      	cbz	r3, 8009496 <__kernel_rem_pio2+0x572>
 8009492:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8009496:	4662      	mov	r2, ip
 8009498:	463b      	mov	r3, r7
 800949a:	9901      	ldr	r1, [sp, #4]
 800949c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80094a0:	e7a0      	b.n	80093e4 <__kernel_rem_pio2+0x4c0>
 80094a2:	9a06      	ldr	r2, [sp, #24]
 80094a4:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 80094a6:	ab48      	add	r3, sp, #288	; 0x120
 80094a8:	441a      	add	r2, r3
 80094aa:	4615      	mov	r5, r2
 80094ac:	4637      	mov	r7, r6
 80094ae:	2c00      	cmp	r4, #0
 80094b0:	da09      	bge.n	80094c6 <__kernel_rem_pio2+0x5a2>
 80094b2:	9b02      	ldr	r3, [sp, #8]
 80094b4:	b10b      	cbz	r3, 80094ba <__kernel_rem_pio2+0x596>
 80094b6:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80094ba:	4632      	mov	r2, r6
 80094bc:	463b      	mov	r3, r7
 80094be:	9901      	ldr	r1, [sp, #4]
 80094c0:	e9c1 2300 	strd	r2, r3, [r1]
 80094c4:	e78e      	b.n	80093e4 <__kernel_rem_pio2+0x4c0>
 80094c6:	4630      	mov	r0, r6
 80094c8:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80094cc:	4639      	mov	r1, r7
 80094ce:	f7f6 fe4d 	bl	800016c <__adddf3>
 80094d2:	3c01      	subs	r4, #1
 80094d4:	4606      	mov	r6, r0
 80094d6:	460f      	mov	r7, r1
 80094d8:	e7e9      	b.n	80094ae <__kernel_rem_pio2+0x58a>
 80094da:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80094de:	f7f6 fe45 	bl	800016c <__adddf3>
 80094e2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80094e6:	e7b8      	b.n	800945a <__kernel_rem_pio2+0x536>
 80094e8:	460d      	mov	r5, r1
 80094ea:	e7be      	b.n	800946a <__kernel_rem_pio2+0x546>
 80094ec:	4660      	mov	r0, ip
 80094ee:	e9d5 2300 	ldrd	r2, r3, [r5]
 80094f2:	4639      	mov	r1, r7
 80094f4:	f7f6 fe3a 	bl	800016c <__adddf3>
 80094f8:	3601      	adds	r6, #1
 80094fa:	4684      	mov	ip, r0
 80094fc:	460f      	mov	r7, r1
 80094fe:	e7c2      	b.n	8009486 <__kernel_rem_pio2+0x562>
 8009500:	e9da 6700 	ldrd	r6, r7, [sl]
 8009504:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8009508:	4632      	mov	r2, r6
 800950a:	463b      	mov	r3, r7
 800950c:	4640      	mov	r0, r8
 800950e:	4649      	mov	r1, r9
 8009510:	f7f6 fe2c 	bl	800016c <__adddf3>
 8009514:	4602      	mov	r2, r0
 8009516:	460b      	mov	r3, r1
 8009518:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800951c:	4640      	mov	r0, r8
 800951e:	4649      	mov	r1, r9
 8009520:	f7f6 fe22 	bl	8000168 <__aeabi_dsub>
 8009524:	4632      	mov	r2, r6
 8009526:	463b      	mov	r3, r7
 8009528:	f7f6 fe20 	bl	800016c <__adddf3>
 800952c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009530:	e86a 0102 	strd	r0, r1, [sl], #-8
 8009534:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009538:	e9ca 2300 	strd	r2, r3, [sl]
 800953c:	e762      	b.n	8009404 <__kernel_rem_pio2+0x4e0>
 800953e:	e9da 8900 	ldrd	r8, r9, [sl]
 8009542:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8009546:	4642      	mov	r2, r8
 8009548:	464b      	mov	r3, r9
 800954a:	4630      	mov	r0, r6
 800954c:	4639      	mov	r1, r7
 800954e:	f7f6 fe0d 	bl	800016c <__adddf3>
 8009552:	4602      	mov	r2, r0
 8009554:	460b      	mov	r3, r1
 8009556:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800955a:	4630      	mov	r0, r6
 800955c:	4639      	mov	r1, r7
 800955e:	f7f6 fe03 	bl	8000168 <__aeabi_dsub>
 8009562:	4642      	mov	r2, r8
 8009564:	464b      	mov	r3, r9
 8009566:	f7f6 fe01 	bl	800016c <__adddf3>
 800956a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800956e:	e86a 0102 	strd	r0, r1, [sl], #-8
 8009572:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009576:	e9ca 2300 	strd	r2, r3, [sl]
 800957a:	e748      	b.n	800940e <__kernel_rem_pio2+0x4ea>
 800957c:	4638      	mov	r0, r7
 800957e:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8009582:	4631      	mov	r1, r6
 8009584:	f7f6 fdf2 	bl	800016c <__adddf3>
 8009588:	3c01      	subs	r4, #1
 800958a:	4607      	mov	r7, r0
 800958c:	460e      	mov	r6, r1
 800958e:	e744      	b.n	800941a <__kernel_rem_pio2+0x4f6>
 8009590:	9b01      	ldr	r3, [sp, #4]
 8009592:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8009596:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800959a:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800959e:	e9c3 0401 	strd	r0, r4, [r3, #4]
 80095a2:	e9c3 1703 	strd	r1, r7, [r3, #12]
 80095a6:	601d      	str	r5, [r3, #0]
 80095a8:	615e      	str	r6, [r3, #20]
 80095aa:	e71b      	b.n	80093e4 <__kernel_rem_pio2+0x4c0>
 80095ac:	41700000 	.word	0x41700000
 80095b0:	3e700000 	.word	0x3e700000
 80095b4:	00000000 	.word	0x00000000

080095b8 <__kernel_sin>:
 80095b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095bc:	b086      	sub	sp, #24
 80095be:	e9cd 2300 	strd	r2, r3, [sp]
 80095c2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80095c6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80095ca:	4682      	mov	sl, r0
 80095cc:	460c      	mov	r4, r1
 80095ce:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80095d0:	da03      	bge.n	80095da <__kernel_sin+0x22>
 80095d2:	f7f7 fa31 	bl	8000a38 <__aeabi_d2iz>
 80095d6:	2800      	cmp	r0, #0
 80095d8:	d050      	beq.n	800967c <__kernel_sin+0xc4>
 80095da:	4652      	mov	r2, sl
 80095dc:	4623      	mov	r3, r4
 80095de:	4650      	mov	r0, sl
 80095e0:	4621      	mov	r1, r4
 80095e2:	f7f6 ff79 	bl	80004d8 <__aeabi_dmul>
 80095e6:	4606      	mov	r6, r0
 80095e8:	460f      	mov	r7, r1
 80095ea:	4602      	mov	r2, r0
 80095ec:	460b      	mov	r3, r1
 80095ee:	4650      	mov	r0, sl
 80095f0:	4621      	mov	r1, r4
 80095f2:	f7f6 ff71 	bl	80004d8 <__aeabi_dmul>
 80095f6:	a33e      	add	r3, pc, #248	; (adr r3, 80096f0 <__kernel_sin+0x138>)
 80095f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095fc:	4680      	mov	r8, r0
 80095fe:	4689      	mov	r9, r1
 8009600:	4630      	mov	r0, r6
 8009602:	4639      	mov	r1, r7
 8009604:	f7f6 ff68 	bl	80004d8 <__aeabi_dmul>
 8009608:	a33b      	add	r3, pc, #236	; (adr r3, 80096f8 <__kernel_sin+0x140>)
 800960a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800960e:	f7f6 fdab 	bl	8000168 <__aeabi_dsub>
 8009612:	4632      	mov	r2, r6
 8009614:	463b      	mov	r3, r7
 8009616:	f7f6 ff5f 	bl	80004d8 <__aeabi_dmul>
 800961a:	a339      	add	r3, pc, #228	; (adr r3, 8009700 <__kernel_sin+0x148>)
 800961c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009620:	f7f6 fda4 	bl	800016c <__adddf3>
 8009624:	4632      	mov	r2, r6
 8009626:	463b      	mov	r3, r7
 8009628:	f7f6 ff56 	bl	80004d8 <__aeabi_dmul>
 800962c:	a336      	add	r3, pc, #216	; (adr r3, 8009708 <__kernel_sin+0x150>)
 800962e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009632:	f7f6 fd99 	bl	8000168 <__aeabi_dsub>
 8009636:	4632      	mov	r2, r6
 8009638:	463b      	mov	r3, r7
 800963a:	f7f6 ff4d 	bl	80004d8 <__aeabi_dmul>
 800963e:	a334      	add	r3, pc, #208	; (adr r3, 8009710 <__kernel_sin+0x158>)
 8009640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009644:	f7f6 fd92 	bl	800016c <__adddf3>
 8009648:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800964c:	b9dd      	cbnz	r5, 8009686 <__kernel_sin+0xce>
 800964e:	4602      	mov	r2, r0
 8009650:	460b      	mov	r3, r1
 8009652:	4630      	mov	r0, r6
 8009654:	4639      	mov	r1, r7
 8009656:	f7f6 ff3f 	bl	80004d8 <__aeabi_dmul>
 800965a:	a32f      	add	r3, pc, #188	; (adr r3, 8009718 <__kernel_sin+0x160>)
 800965c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009660:	f7f6 fd82 	bl	8000168 <__aeabi_dsub>
 8009664:	4642      	mov	r2, r8
 8009666:	464b      	mov	r3, r9
 8009668:	f7f6 ff36 	bl	80004d8 <__aeabi_dmul>
 800966c:	4602      	mov	r2, r0
 800966e:	460b      	mov	r3, r1
 8009670:	4650      	mov	r0, sl
 8009672:	4621      	mov	r1, r4
 8009674:	f7f6 fd7a 	bl	800016c <__adddf3>
 8009678:	4682      	mov	sl, r0
 800967a:	460c      	mov	r4, r1
 800967c:	4650      	mov	r0, sl
 800967e:	4621      	mov	r1, r4
 8009680:	b006      	add	sp, #24
 8009682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009686:	2200      	movs	r2, #0
 8009688:	e9dd 0100 	ldrd	r0, r1, [sp]
 800968c:	4b24      	ldr	r3, [pc, #144]	; (8009720 <__kernel_sin+0x168>)
 800968e:	f7f6 ff23 	bl	80004d8 <__aeabi_dmul>
 8009692:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009696:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800969a:	4640      	mov	r0, r8
 800969c:	4649      	mov	r1, r9
 800969e:	f7f6 ff1b 	bl	80004d8 <__aeabi_dmul>
 80096a2:	4602      	mov	r2, r0
 80096a4:	460b      	mov	r3, r1
 80096a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80096aa:	f7f6 fd5d 	bl	8000168 <__aeabi_dsub>
 80096ae:	4632      	mov	r2, r6
 80096b0:	463b      	mov	r3, r7
 80096b2:	f7f6 ff11 	bl	80004d8 <__aeabi_dmul>
 80096b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80096ba:	f7f6 fd55 	bl	8000168 <__aeabi_dsub>
 80096be:	a316      	add	r3, pc, #88	; (adr r3, 8009718 <__kernel_sin+0x160>)
 80096c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c4:	4606      	mov	r6, r0
 80096c6:	460f      	mov	r7, r1
 80096c8:	4640      	mov	r0, r8
 80096ca:	4649      	mov	r1, r9
 80096cc:	f7f6 ff04 	bl	80004d8 <__aeabi_dmul>
 80096d0:	4602      	mov	r2, r0
 80096d2:	460b      	mov	r3, r1
 80096d4:	4630      	mov	r0, r6
 80096d6:	4639      	mov	r1, r7
 80096d8:	f7f6 fd48 	bl	800016c <__adddf3>
 80096dc:	4602      	mov	r2, r0
 80096de:	460b      	mov	r3, r1
 80096e0:	4650      	mov	r0, sl
 80096e2:	4621      	mov	r1, r4
 80096e4:	f7f6 fd40 	bl	8000168 <__aeabi_dsub>
 80096e8:	e7c6      	b.n	8009678 <__kernel_sin+0xc0>
 80096ea:	bf00      	nop
 80096ec:	f3af 8000 	nop.w
 80096f0:	5acfd57c 	.word	0x5acfd57c
 80096f4:	3de5d93a 	.word	0x3de5d93a
 80096f8:	8a2b9ceb 	.word	0x8a2b9ceb
 80096fc:	3e5ae5e6 	.word	0x3e5ae5e6
 8009700:	57b1fe7d 	.word	0x57b1fe7d
 8009704:	3ec71de3 	.word	0x3ec71de3
 8009708:	19c161d5 	.word	0x19c161d5
 800970c:	3f2a01a0 	.word	0x3f2a01a0
 8009710:	1110f8a6 	.word	0x1110f8a6
 8009714:	3f811111 	.word	0x3f811111
 8009718:	55555549 	.word	0x55555549
 800971c:	3fc55555 	.word	0x3fc55555
 8009720:	3fe00000 	.word	0x3fe00000
 8009724:	00000000 	.word	0x00000000

08009728 <atan>:
 8009728:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800972c:	4bb6      	ldr	r3, [pc, #728]	; (8009a08 <atan+0x2e0>)
 800972e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009732:	429e      	cmp	r6, r3
 8009734:	4604      	mov	r4, r0
 8009736:	460d      	mov	r5, r1
 8009738:	468b      	mov	fp, r1
 800973a:	dd17      	ble.n	800976c <atan+0x44>
 800973c:	4bb3      	ldr	r3, [pc, #716]	; (8009a0c <atan+0x2e4>)
 800973e:	429e      	cmp	r6, r3
 8009740:	dc01      	bgt.n	8009746 <atan+0x1e>
 8009742:	d109      	bne.n	8009758 <atan+0x30>
 8009744:	b140      	cbz	r0, 8009758 <atan+0x30>
 8009746:	4622      	mov	r2, r4
 8009748:	462b      	mov	r3, r5
 800974a:	4620      	mov	r0, r4
 800974c:	4629      	mov	r1, r5
 800974e:	f7f6 fd0d 	bl	800016c <__adddf3>
 8009752:	4604      	mov	r4, r0
 8009754:	460d      	mov	r5, r1
 8009756:	e005      	b.n	8009764 <atan+0x3c>
 8009758:	f1bb 0f00 	cmp.w	fp, #0
 800975c:	4cac      	ldr	r4, [pc, #688]	; (8009a10 <atan+0x2e8>)
 800975e:	f300 8121 	bgt.w	80099a4 <atan+0x27c>
 8009762:	4dac      	ldr	r5, [pc, #688]	; (8009a14 <atan+0x2ec>)
 8009764:	4620      	mov	r0, r4
 8009766:	4629      	mov	r1, r5
 8009768:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800976c:	4baa      	ldr	r3, [pc, #680]	; (8009a18 <atan+0x2f0>)
 800976e:	429e      	cmp	r6, r3
 8009770:	dc11      	bgt.n	8009796 <atan+0x6e>
 8009772:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009776:	429e      	cmp	r6, r3
 8009778:	dc0a      	bgt.n	8009790 <atan+0x68>
 800977a:	a38b      	add	r3, pc, #556	; (adr r3, 80099a8 <atan+0x280>)
 800977c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009780:	f7f6 fcf4 	bl	800016c <__adddf3>
 8009784:	2200      	movs	r2, #0
 8009786:	4ba5      	ldr	r3, [pc, #660]	; (8009a1c <atan+0x2f4>)
 8009788:	f7f7 f936 	bl	80009f8 <__aeabi_dcmpgt>
 800978c:	2800      	cmp	r0, #0
 800978e:	d1e9      	bne.n	8009764 <atan+0x3c>
 8009790:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8009794:	e027      	b.n	80097e6 <atan+0xbe>
 8009796:	f000 f951 	bl	8009a3c <fabs>
 800979a:	4ba1      	ldr	r3, [pc, #644]	; (8009a20 <atan+0x2f8>)
 800979c:	4604      	mov	r4, r0
 800979e:	429e      	cmp	r6, r3
 80097a0:	460d      	mov	r5, r1
 80097a2:	f300 80b8 	bgt.w	8009916 <atan+0x1ee>
 80097a6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80097aa:	429e      	cmp	r6, r3
 80097ac:	f300 809c 	bgt.w	80098e8 <atan+0x1c0>
 80097b0:	4602      	mov	r2, r0
 80097b2:	460b      	mov	r3, r1
 80097b4:	f7f6 fcda 	bl	800016c <__adddf3>
 80097b8:	2200      	movs	r2, #0
 80097ba:	4b98      	ldr	r3, [pc, #608]	; (8009a1c <atan+0x2f4>)
 80097bc:	f7f6 fcd4 	bl	8000168 <__aeabi_dsub>
 80097c0:	2200      	movs	r2, #0
 80097c2:	4606      	mov	r6, r0
 80097c4:	460f      	mov	r7, r1
 80097c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80097ca:	4620      	mov	r0, r4
 80097cc:	4629      	mov	r1, r5
 80097ce:	f7f6 fccd 	bl	800016c <__adddf3>
 80097d2:	4602      	mov	r2, r0
 80097d4:	460b      	mov	r3, r1
 80097d6:	4630      	mov	r0, r6
 80097d8:	4639      	mov	r1, r7
 80097da:	f7f6 ffa7 	bl	800072c <__aeabi_ddiv>
 80097de:	f04f 0a00 	mov.w	sl, #0
 80097e2:	4604      	mov	r4, r0
 80097e4:	460d      	mov	r5, r1
 80097e6:	4622      	mov	r2, r4
 80097e8:	462b      	mov	r3, r5
 80097ea:	4620      	mov	r0, r4
 80097ec:	4629      	mov	r1, r5
 80097ee:	f7f6 fe73 	bl	80004d8 <__aeabi_dmul>
 80097f2:	4602      	mov	r2, r0
 80097f4:	460b      	mov	r3, r1
 80097f6:	4680      	mov	r8, r0
 80097f8:	4689      	mov	r9, r1
 80097fa:	f7f6 fe6d 	bl	80004d8 <__aeabi_dmul>
 80097fe:	a36c      	add	r3, pc, #432	; (adr r3, 80099b0 <atan+0x288>)
 8009800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009804:	4606      	mov	r6, r0
 8009806:	460f      	mov	r7, r1
 8009808:	f7f6 fe66 	bl	80004d8 <__aeabi_dmul>
 800980c:	a36a      	add	r3, pc, #424	; (adr r3, 80099b8 <atan+0x290>)
 800980e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009812:	f7f6 fcab 	bl	800016c <__adddf3>
 8009816:	4632      	mov	r2, r6
 8009818:	463b      	mov	r3, r7
 800981a:	f7f6 fe5d 	bl	80004d8 <__aeabi_dmul>
 800981e:	a368      	add	r3, pc, #416	; (adr r3, 80099c0 <atan+0x298>)
 8009820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009824:	f7f6 fca2 	bl	800016c <__adddf3>
 8009828:	4632      	mov	r2, r6
 800982a:	463b      	mov	r3, r7
 800982c:	f7f6 fe54 	bl	80004d8 <__aeabi_dmul>
 8009830:	a365      	add	r3, pc, #404	; (adr r3, 80099c8 <atan+0x2a0>)
 8009832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009836:	f7f6 fc99 	bl	800016c <__adddf3>
 800983a:	4632      	mov	r2, r6
 800983c:	463b      	mov	r3, r7
 800983e:	f7f6 fe4b 	bl	80004d8 <__aeabi_dmul>
 8009842:	a363      	add	r3, pc, #396	; (adr r3, 80099d0 <atan+0x2a8>)
 8009844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009848:	f7f6 fc90 	bl	800016c <__adddf3>
 800984c:	4632      	mov	r2, r6
 800984e:	463b      	mov	r3, r7
 8009850:	f7f6 fe42 	bl	80004d8 <__aeabi_dmul>
 8009854:	a360      	add	r3, pc, #384	; (adr r3, 80099d8 <atan+0x2b0>)
 8009856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800985a:	f7f6 fc87 	bl	800016c <__adddf3>
 800985e:	4642      	mov	r2, r8
 8009860:	464b      	mov	r3, r9
 8009862:	f7f6 fe39 	bl	80004d8 <__aeabi_dmul>
 8009866:	a35e      	add	r3, pc, #376	; (adr r3, 80099e0 <atan+0x2b8>)
 8009868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800986c:	4680      	mov	r8, r0
 800986e:	4689      	mov	r9, r1
 8009870:	4630      	mov	r0, r6
 8009872:	4639      	mov	r1, r7
 8009874:	f7f6 fe30 	bl	80004d8 <__aeabi_dmul>
 8009878:	a35b      	add	r3, pc, #364	; (adr r3, 80099e8 <atan+0x2c0>)
 800987a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800987e:	f7f6 fc73 	bl	8000168 <__aeabi_dsub>
 8009882:	4632      	mov	r2, r6
 8009884:	463b      	mov	r3, r7
 8009886:	f7f6 fe27 	bl	80004d8 <__aeabi_dmul>
 800988a:	a359      	add	r3, pc, #356	; (adr r3, 80099f0 <atan+0x2c8>)
 800988c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009890:	f7f6 fc6a 	bl	8000168 <__aeabi_dsub>
 8009894:	4632      	mov	r2, r6
 8009896:	463b      	mov	r3, r7
 8009898:	f7f6 fe1e 	bl	80004d8 <__aeabi_dmul>
 800989c:	a356      	add	r3, pc, #344	; (adr r3, 80099f8 <atan+0x2d0>)
 800989e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a2:	f7f6 fc61 	bl	8000168 <__aeabi_dsub>
 80098a6:	4632      	mov	r2, r6
 80098a8:	463b      	mov	r3, r7
 80098aa:	f7f6 fe15 	bl	80004d8 <__aeabi_dmul>
 80098ae:	a354      	add	r3, pc, #336	; (adr r3, 8009a00 <atan+0x2d8>)
 80098b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b4:	f7f6 fc58 	bl	8000168 <__aeabi_dsub>
 80098b8:	4632      	mov	r2, r6
 80098ba:	463b      	mov	r3, r7
 80098bc:	f7f6 fe0c 	bl	80004d8 <__aeabi_dmul>
 80098c0:	4602      	mov	r2, r0
 80098c2:	460b      	mov	r3, r1
 80098c4:	4640      	mov	r0, r8
 80098c6:	4649      	mov	r1, r9
 80098c8:	f7f6 fc50 	bl	800016c <__adddf3>
 80098cc:	4622      	mov	r2, r4
 80098ce:	462b      	mov	r3, r5
 80098d0:	f7f6 fe02 	bl	80004d8 <__aeabi_dmul>
 80098d4:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 80098d8:	4602      	mov	r2, r0
 80098da:	460b      	mov	r3, r1
 80098dc:	d144      	bne.n	8009968 <atan+0x240>
 80098de:	4620      	mov	r0, r4
 80098e0:	4629      	mov	r1, r5
 80098e2:	f7f6 fc41 	bl	8000168 <__aeabi_dsub>
 80098e6:	e734      	b.n	8009752 <atan+0x2a>
 80098e8:	2200      	movs	r2, #0
 80098ea:	4b4c      	ldr	r3, [pc, #304]	; (8009a1c <atan+0x2f4>)
 80098ec:	f7f6 fc3c 	bl	8000168 <__aeabi_dsub>
 80098f0:	2200      	movs	r2, #0
 80098f2:	4606      	mov	r6, r0
 80098f4:	460f      	mov	r7, r1
 80098f6:	4620      	mov	r0, r4
 80098f8:	4629      	mov	r1, r5
 80098fa:	4b48      	ldr	r3, [pc, #288]	; (8009a1c <atan+0x2f4>)
 80098fc:	f7f6 fc36 	bl	800016c <__adddf3>
 8009900:	4602      	mov	r2, r0
 8009902:	460b      	mov	r3, r1
 8009904:	4630      	mov	r0, r6
 8009906:	4639      	mov	r1, r7
 8009908:	f7f6 ff10 	bl	800072c <__aeabi_ddiv>
 800990c:	f04f 0a01 	mov.w	sl, #1
 8009910:	4604      	mov	r4, r0
 8009912:	460d      	mov	r5, r1
 8009914:	e767      	b.n	80097e6 <atan+0xbe>
 8009916:	4b43      	ldr	r3, [pc, #268]	; (8009a24 <atan+0x2fc>)
 8009918:	429e      	cmp	r6, r3
 800991a:	da1a      	bge.n	8009952 <atan+0x22a>
 800991c:	2200      	movs	r2, #0
 800991e:	4b42      	ldr	r3, [pc, #264]	; (8009a28 <atan+0x300>)
 8009920:	f7f6 fc22 	bl	8000168 <__aeabi_dsub>
 8009924:	2200      	movs	r2, #0
 8009926:	4606      	mov	r6, r0
 8009928:	460f      	mov	r7, r1
 800992a:	4620      	mov	r0, r4
 800992c:	4629      	mov	r1, r5
 800992e:	4b3e      	ldr	r3, [pc, #248]	; (8009a28 <atan+0x300>)
 8009930:	f7f6 fdd2 	bl	80004d8 <__aeabi_dmul>
 8009934:	2200      	movs	r2, #0
 8009936:	4b39      	ldr	r3, [pc, #228]	; (8009a1c <atan+0x2f4>)
 8009938:	f7f6 fc18 	bl	800016c <__adddf3>
 800993c:	4602      	mov	r2, r0
 800993e:	460b      	mov	r3, r1
 8009940:	4630      	mov	r0, r6
 8009942:	4639      	mov	r1, r7
 8009944:	f7f6 fef2 	bl	800072c <__aeabi_ddiv>
 8009948:	f04f 0a02 	mov.w	sl, #2
 800994c:	4604      	mov	r4, r0
 800994e:	460d      	mov	r5, r1
 8009950:	e749      	b.n	80097e6 <atan+0xbe>
 8009952:	4602      	mov	r2, r0
 8009954:	460b      	mov	r3, r1
 8009956:	2000      	movs	r0, #0
 8009958:	4934      	ldr	r1, [pc, #208]	; (8009a2c <atan+0x304>)
 800995a:	f7f6 fee7 	bl	800072c <__aeabi_ddiv>
 800995e:	f04f 0a03 	mov.w	sl, #3
 8009962:	4604      	mov	r4, r0
 8009964:	460d      	mov	r5, r1
 8009966:	e73e      	b.n	80097e6 <atan+0xbe>
 8009968:	4b31      	ldr	r3, [pc, #196]	; (8009a30 <atan+0x308>)
 800996a:	4e32      	ldr	r6, [pc, #200]	; (8009a34 <atan+0x30c>)
 800996c:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009970:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8009974:	e9da 2300 	ldrd	r2, r3, [sl]
 8009978:	f7f6 fbf6 	bl	8000168 <__aeabi_dsub>
 800997c:	4622      	mov	r2, r4
 800997e:	462b      	mov	r3, r5
 8009980:	f7f6 fbf2 	bl	8000168 <__aeabi_dsub>
 8009984:	4602      	mov	r2, r0
 8009986:	460b      	mov	r3, r1
 8009988:	e9d6 0100 	ldrd	r0, r1, [r6]
 800998c:	f7f6 fbec 	bl	8000168 <__aeabi_dsub>
 8009990:	f1bb 0f00 	cmp.w	fp, #0
 8009994:	4604      	mov	r4, r0
 8009996:	460d      	mov	r5, r1
 8009998:	f6bf aee4 	bge.w	8009764 <atan+0x3c>
 800999c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80099a0:	461d      	mov	r5, r3
 80099a2:	e6df      	b.n	8009764 <atan+0x3c>
 80099a4:	4d24      	ldr	r5, [pc, #144]	; (8009a38 <atan+0x310>)
 80099a6:	e6dd      	b.n	8009764 <atan+0x3c>
 80099a8:	8800759c 	.word	0x8800759c
 80099ac:	7e37e43c 	.word	0x7e37e43c
 80099b0:	e322da11 	.word	0xe322da11
 80099b4:	3f90ad3a 	.word	0x3f90ad3a
 80099b8:	24760deb 	.word	0x24760deb
 80099bc:	3fa97b4b 	.word	0x3fa97b4b
 80099c0:	a0d03d51 	.word	0xa0d03d51
 80099c4:	3fb10d66 	.word	0x3fb10d66
 80099c8:	c54c206e 	.word	0xc54c206e
 80099cc:	3fb745cd 	.word	0x3fb745cd
 80099d0:	920083ff 	.word	0x920083ff
 80099d4:	3fc24924 	.word	0x3fc24924
 80099d8:	5555550d 	.word	0x5555550d
 80099dc:	3fd55555 	.word	0x3fd55555
 80099e0:	2c6a6c2f 	.word	0x2c6a6c2f
 80099e4:	bfa2b444 	.word	0xbfa2b444
 80099e8:	52defd9a 	.word	0x52defd9a
 80099ec:	3fadde2d 	.word	0x3fadde2d
 80099f0:	af749a6d 	.word	0xaf749a6d
 80099f4:	3fb3b0f2 	.word	0x3fb3b0f2
 80099f8:	fe231671 	.word	0xfe231671
 80099fc:	3fbc71c6 	.word	0x3fbc71c6
 8009a00:	9998ebc4 	.word	0x9998ebc4
 8009a04:	3fc99999 	.word	0x3fc99999
 8009a08:	440fffff 	.word	0x440fffff
 8009a0c:	7ff00000 	.word	0x7ff00000
 8009a10:	54442d18 	.word	0x54442d18
 8009a14:	bff921fb 	.word	0xbff921fb
 8009a18:	3fdbffff 	.word	0x3fdbffff
 8009a1c:	3ff00000 	.word	0x3ff00000
 8009a20:	3ff2ffff 	.word	0x3ff2ffff
 8009a24:	40038000 	.word	0x40038000
 8009a28:	3ff80000 	.word	0x3ff80000
 8009a2c:	bff00000 	.word	0xbff00000
 8009a30:	0800bd98 	.word	0x0800bd98
 8009a34:	0800bd78 	.word	0x0800bd78
 8009a38:	3ff921fb 	.word	0x3ff921fb

08009a3c <fabs>:
 8009a3c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009a40:	4770      	bx	lr
 8009a42:	0000      	movs	r0, r0
 8009a44:	0000      	movs	r0, r0
	...

08009a48 <floor>:
 8009a48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a4c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8009a50:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8009a54:	2e13      	cmp	r6, #19
 8009a56:	4602      	mov	r2, r0
 8009a58:	460b      	mov	r3, r1
 8009a5a:	4607      	mov	r7, r0
 8009a5c:	460c      	mov	r4, r1
 8009a5e:	4605      	mov	r5, r0
 8009a60:	dc34      	bgt.n	8009acc <floor+0x84>
 8009a62:	2e00      	cmp	r6, #0
 8009a64:	da15      	bge.n	8009a92 <floor+0x4a>
 8009a66:	a334      	add	r3, pc, #208	; (adr r3, 8009b38 <floor+0xf0>)
 8009a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a6c:	f7f6 fb7e 	bl	800016c <__adddf3>
 8009a70:	2200      	movs	r2, #0
 8009a72:	2300      	movs	r3, #0
 8009a74:	f7f6 ffc0 	bl	80009f8 <__aeabi_dcmpgt>
 8009a78:	b140      	cbz	r0, 8009a8c <floor+0x44>
 8009a7a:	2c00      	cmp	r4, #0
 8009a7c:	da59      	bge.n	8009b32 <floor+0xea>
 8009a7e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8009a82:	ea57 0503 	orrs.w	r5, r7, r3
 8009a86:	d001      	beq.n	8009a8c <floor+0x44>
 8009a88:	2500      	movs	r5, #0
 8009a8a:	4c2d      	ldr	r4, [pc, #180]	; (8009b40 <floor+0xf8>)
 8009a8c:	4623      	mov	r3, r4
 8009a8e:	462f      	mov	r7, r5
 8009a90:	e025      	b.n	8009ade <floor+0x96>
 8009a92:	4a2c      	ldr	r2, [pc, #176]	; (8009b44 <floor+0xfc>)
 8009a94:	fa42 f806 	asr.w	r8, r2, r6
 8009a98:	ea01 0208 	and.w	r2, r1, r8
 8009a9c:	4302      	orrs	r2, r0
 8009a9e:	d01e      	beq.n	8009ade <floor+0x96>
 8009aa0:	a325      	add	r3, pc, #148	; (adr r3, 8009b38 <floor+0xf0>)
 8009aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa6:	f7f6 fb61 	bl	800016c <__adddf3>
 8009aaa:	2200      	movs	r2, #0
 8009aac:	2300      	movs	r3, #0
 8009aae:	f7f6 ffa3 	bl	80009f8 <__aeabi_dcmpgt>
 8009ab2:	2800      	cmp	r0, #0
 8009ab4:	d0ea      	beq.n	8009a8c <floor+0x44>
 8009ab6:	2c00      	cmp	r4, #0
 8009ab8:	bfbe      	ittt	lt
 8009aba:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009abe:	fa43 f606 	asrlt.w	r6, r3, r6
 8009ac2:	19a4      	addlt	r4, r4, r6
 8009ac4:	2500      	movs	r5, #0
 8009ac6:	ea24 0408 	bic.w	r4, r4, r8
 8009aca:	e7df      	b.n	8009a8c <floor+0x44>
 8009acc:	2e33      	cmp	r6, #51	; 0x33
 8009ace:	dd0a      	ble.n	8009ae6 <floor+0x9e>
 8009ad0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009ad4:	d103      	bne.n	8009ade <floor+0x96>
 8009ad6:	f7f6 fb49 	bl	800016c <__adddf3>
 8009ada:	4607      	mov	r7, r0
 8009adc:	460b      	mov	r3, r1
 8009ade:	4638      	mov	r0, r7
 8009ae0:	4619      	mov	r1, r3
 8009ae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ae6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009aea:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8009aee:	fa22 f808 	lsr.w	r8, r2, r8
 8009af2:	ea18 0f00 	tst.w	r8, r0
 8009af6:	d0f2      	beq.n	8009ade <floor+0x96>
 8009af8:	a30f      	add	r3, pc, #60	; (adr r3, 8009b38 <floor+0xf0>)
 8009afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009afe:	f7f6 fb35 	bl	800016c <__adddf3>
 8009b02:	2200      	movs	r2, #0
 8009b04:	2300      	movs	r3, #0
 8009b06:	f7f6 ff77 	bl	80009f8 <__aeabi_dcmpgt>
 8009b0a:	2800      	cmp	r0, #0
 8009b0c:	d0be      	beq.n	8009a8c <floor+0x44>
 8009b0e:	2c00      	cmp	r4, #0
 8009b10:	da02      	bge.n	8009b18 <floor+0xd0>
 8009b12:	2e14      	cmp	r6, #20
 8009b14:	d103      	bne.n	8009b1e <floor+0xd6>
 8009b16:	3401      	adds	r4, #1
 8009b18:	ea25 0508 	bic.w	r5, r5, r8
 8009b1c:	e7b6      	b.n	8009a8c <floor+0x44>
 8009b1e:	2301      	movs	r3, #1
 8009b20:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8009b24:	fa03 f606 	lsl.w	r6, r3, r6
 8009b28:	4435      	add	r5, r6
 8009b2a:	42bd      	cmp	r5, r7
 8009b2c:	bf38      	it	cc
 8009b2e:	18e4      	addcc	r4, r4, r3
 8009b30:	e7f2      	b.n	8009b18 <floor+0xd0>
 8009b32:	2500      	movs	r5, #0
 8009b34:	462c      	mov	r4, r5
 8009b36:	e7a9      	b.n	8009a8c <floor+0x44>
 8009b38:	8800759c 	.word	0x8800759c
 8009b3c:	7e37e43c 	.word	0x7e37e43c
 8009b40:	bff00000 	.word	0xbff00000
 8009b44:	000fffff 	.word	0x000fffff

08009b48 <scalbn>:
 8009b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b4a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8009b4e:	4604      	mov	r4, r0
 8009b50:	460d      	mov	r5, r1
 8009b52:	4617      	mov	r7, r2
 8009b54:	460b      	mov	r3, r1
 8009b56:	b996      	cbnz	r6, 8009b7e <scalbn+0x36>
 8009b58:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009b5c:	4303      	orrs	r3, r0
 8009b5e:	d039      	beq.n	8009bd4 <scalbn+0x8c>
 8009b60:	4b35      	ldr	r3, [pc, #212]	; (8009c38 <scalbn+0xf0>)
 8009b62:	2200      	movs	r2, #0
 8009b64:	f7f6 fcb8 	bl	80004d8 <__aeabi_dmul>
 8009b68:	4b34      	ldr	r3, [pc, #208]	; (8009c3c <scalbn+0xf4>)
 8009b6a:	4604      	mov	r4, r0
 8009b6c:	429f      	cmp	r7, r3
 8009b6e:	460d      	mov	r5, r1
 8009b70:	da0f      	bge.n	8009b92 <scalbn+0x4a>
 8009b72:	a32d      	add	r3, pc, #180	; (adr r3, 8009c28 <scalbn+0xe0>)
 8009b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b78:	f7f6 fcae 	bl	80004d8 <__aeabi_dmul>
 8009b7c:	e006      	b.n	8009b8c <scalbn+0x44>
 8009b7e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8009b82:	4296      	cmp	r6, r2
 8009b84:	d10a      	bne.n	8009b9c <scalbn+0x54>
 8009b86:	4602      	mov	r2, r0
 8009b88:	f7f6 faf0 	bl	800016c <__adddf3>
 8009b8c:	4604      	mov	r4, r0
 8009b8e:	460d      	mov	r5, r1
 8009b90:	e020      	b.n	8009bd4 <scalbn+0x8c>
 8009b92:	460b      	mov	r3, r1
 8009b94:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8009b98:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8009b9c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8009ba0:	19b9      	adds	r1, r7, r6
 8009ba2:	4291      	cmp	r1, r2
 8009ba4:	dd0e      	ble.n	8009bc4 <scalbn+0x7c>
 8009ba6:	a322      	add	r3, pc, #136	; (adr r3, 8009c30 <scalbn+0xe8>)
 8009ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bac:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8009bb0:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8009bb4:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8009bb8:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8009bbc:	4820      	ldr	r0, [pc, #128]	; (8009c40 <scalbn+0xf8>)
 8009bbe:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8009bc2:	e7d9      	b.n	8009b78 <scalbn+0x30>
 8009bc4:	2900      	cmp	r1, #0
 8009bc6:	dd08      	ble.n	8009bda <scalbn+0x92>
 8009bc8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009bcc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009bd0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8009bd4:	4620      	mov	r0, r4
 8009bd6:	4629      	mov	r1, r5
 8009bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bda:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8009bde:	da16      	bge.n	8009c0e <scalbn+0xc6>
 8009be0:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009be4:	429f      	cmp	r7, r3
 8009be6:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8009bea:	dd08      	ble.n	8009bfe <scalbn+0xb6>
 8009bec:	4c15      	ldr	r4, [pc, #84]	; (8009c44 <scalbn+0xfc>)
 8009bee:	4814      	ldr	r0, [pc, #80]	; (8009c40 <scalbn+0xf8>)
 8009bf0:	f363 74df 	bfi	r4, r3, #31, #1
 8009bf4:	a30e      	add	r3, pc, #56	; (adr r3, 8009c30 <scalbn+0xe8>)
 8009bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bfa:	4621      	mov	r1, r4
 8009bfc:	e7bc      	b.n	8009b78 <scalbn+0x30>
 8009bfe:	4c12      	ldr	r4, [pc, #72]	; (8009c48 <scalbn+0x100>)
 8009c00:	4812      	ldr	r0, [pc, #72]	; (8009c4c <scalbn+0x104>)
 8009c02:	f363 74df 	bfi	r4, r3, #31, #1
 8009c06:	a308      	add	r3, pc, #32	; (adr r3, 8009c28 <scalbn+0xe0>)
 8009c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c0c:	e7f5      	b.n	8009bfa <scalbn+0xb2>
 8009c0e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009c12:	3136      	adds	r1, #54	; 0x36
 8009c14:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009c18:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8009c1c:	4620      	mov	r0, r4
 8009c1e:	4629      	mov	r1, r5
 8009c20:	2200      	movs	r2, #0
 8009c22:	4b0b      	ldr	r3, [pc, #44]	; (8009c50 <scalbn+0x108>)
 8009c24:	e7a8      	b.n	8009b78 <scalbn+0x30>
 8009c26:	bf00      	nop
 8009c28:	c2f8f359 	.word	0xc2f8f359
 8009c2c:	01a56e1f 	.word	0x01a56e1f
 8009c30:	8800759c 	.word	0x8800759c
 8009c34:	7e37e43c 	.word	0x7e37e43c
 8009c38:	43500000 	.word	0x43500000
 8009c3c:	ffff3cb0 	.word	0xffff3cb0
 8009c40:	8800759c 	.word	0x8800759c
 8009c44:	7e37e43c 	.word	0x7e37e43c
 8009c48:	01a56e1f 	.word	0x01a56e1f
 8009c4c:	c2f8f359 	.word	0xc2f8f359
 8009c50:	3c900000 	.word	0x3c900000

08009c54 <_init>:
 8009c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c56:	bf00      	nop
 8009c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c5a:	bc08      	pop	{r3}
 8009c5c:	469e      	mov	lr, r3
 8009c5e:	4770      	bx	lr

08009c60 <_fini>:
 8009c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c62:	bf00      	nop
 8009c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c66:	bc08      	pop	{r3}
 8009c68:	469e      	mov	lr, r3
 8009c6a:	4770      	bx	lr

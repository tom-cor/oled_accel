
oled_accel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094e4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002770  080095f8  080095f8  000195f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd68  0800bd68  0002027c  2**0
                  CONTENTS
  4 .ARM          00000000  0800bd68  0800bd68  0002027c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bd68  0800bd68  0002027c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd68  0800bd68  0001bd68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd6c  0800bd6c  0001bd6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000027c  20000000  0800bd70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000924  2000027c  0800bfec  0002027c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ba0  0800bfec  00020ba0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002027c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011c41  00000000  00000000  000202a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027ce  00000000  00000000  00031ee6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e50  00000000  00000000  000346b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d38  00000000  00000000  00035508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019869  00000000  00000000  00036240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010c56  00000000  00000000  0004faa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c9cc  00000000  00000000  000606ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ed0cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050e0  00000000  00000000  000ed120  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000027c 	.word	0x2000027c
 800012c:	00000000 	.word	0x00000000
 8000130:	080095dc 	.word	0x080095dc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000280 	.word	0x20000280
 800014c:	080095dc 	.word	0x080095dc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <HAL_TIM_PeriodElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]

//
//	HAL_TIM_Base_Stop_IT(&htim2);

	if(htim->Instance==TIM2)	//	Si interrupcion proviene de TIM2 -> cambio de modo de display
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001120:	d124      	bne.n	800116c <HAL_TIM_PeriodElapsedCallback+0x5c>
	{
		if(az_filter.out > 0.8)
 8001122:	4b1f      	ldr	r3, [pc, #124]	; (80011a0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001124:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff f97d 	bl	8000428 <__aeabi_f2d>
 800112e:	a318      	add	r3, pc, #96	; (adr r3, 8001190 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001134:	f7ff fc60 	bl	80009f8 <__aeabi_dcmpgt>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d002      	beq.n	8001144 <HAL_TIM_PeriodElapsedCallback+0x34>
			display_mode = 2;
 800113e:	4b19      	ldr	r3, [pc, #100]	; (80011a4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001140:	2202      	movs	r2, #2
 8001142:	701a      	strb	r2, [r3, #0]

		if(az_filter.out < 0.2)
 8001144:	4b16      	ldr	r3, [pc, #88]	; (80011a0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001146:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff f96c 	bl	8000428 <__aeabi_f2d>
 8001150:	a311      	add	r3, pc, #68	; (adr r3, 8001198 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001156:	f7ff fc31 	bl	80009bc <__aeabi_dcmplt>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d002      	beq.n	8001166 <HAL_TIM_PeriodElapsedCallback+0x56>
			display_mode = 1;
 8001160:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001162:	2201      	movs	r2, #1
 8001164:	701a      	strb	r2, [r3, #0]

		HAL_TIM_Base_Stop_IT(&htim2);
 8001166:	4810      	ldr	r0, [pc, #64]	; (80011a8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001168:	f002 fc9c 	bl	8003aa4 <HAL_TIM_Base_Stop_IT>
	}

	if(htim->Instance==TIM3)	//	Si intrerrupcion proviene de TIM3 -> lectura de MPU6050
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a0e      	ldr	r2, [pc, #56]	; (80011ac <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d106      	bne.n	8001184 <HAL_TIM_PeriodElapsedCallback+0x74>
	{
		mpu6050_Get_Accel_Temp(&mpu6050);
 8001176:	480e      	ldr	r0, [pc, #56]	; (80011b0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001178:	f003 fbce 	bl	8004918 <mpu6050_Get_Accel_Temp>

		angles_update(&mpu6050, &angles);
 800117c:	490d      	ldr	r1, [pc, #52]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800117e:	480c      	ldr	r0, [pc, #48]	; (80011b0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001180:	f003 f892 	bl	80042a8 <angles_update>
	}

}
 8001184:	bf00      	nop
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	f3af 8000 	nop.w
 8001190:	9999999a 	.word	0x9999999a
 8001194:	3fe99999 	.word	0x3fe99999
 8001198:	9999999a 	.word	0x9999999a
 800119c:	3fc99999 	.word	0x3fc99999
 80011a0:	20000914 	.word	0x20000914
 80011a4:	20000298 	.word	0x20000298
 80011a8:	20000a24 	.word	0x20000a24
 80011ac:	40000400 	.word	0x40000400
 80011b0:	2000029c 	.word	0x2000029c
 80011b4:	200002b8 	.word	0x200002b8

080011b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011bc:	f000 fc9a 	bl	8001af4 <HAL_Init>

  /* USER CODE BEGIN Init */


  FIRFilter_Init(&az_filter);
 80011c0:	486d      	ldr	r0, [pc, #436]	; (8001378 <main+0x1c0>)
 80011c2:	f002 fff5 	bl	80041b0 <FIRFilter_Init>
  FIRFilter_Init(&angle_yx_filter);
 80011c6:	486d      	ldr	r0, [pc, #436]	; (800137c <main+0x1c4>)
 80011c8:	f002 fff2 	bl	80041b0 <FIRFilter_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011cc:	f000 f8e4 	bl	8001398 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011d0:	f000 fa20 	bl	8001614 <MX_GPIO_Init>
  MX_TIM2_Init();
 80011d4:	f000 f982 	bl	80014dc <MX_TIM2_Init>
  MX_I2C1_Init();
 80011d8:	f000 f924 	bl	8001424 <MX_I2C1_Init>
  MX_I2C2_Init();
 80011dc:	f000 f950 	bl	8001480 <MX_I2C2_Init>
  MX_TIM3_Init();
 80011e0:	f000 f9ca 	bl	8001578 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */


  mpu6050_Init(&mpu6050);
 80011e4:	4866      	ldr	r0, [pc, #408]	; (8001380 <main+0x1c8>)
 80011e6:	f003 fb5d 	bl	80048a4 <mpu6050_Init>
  ssd1306_Init();
 80011ea:	f003 fc6d 	bl	8004ac8 <ssd1306_Init>
  gui_Init();
 80011ee:	f003 f91b 	bl	8004428 <gui_Init>

  gui_WelcomeScreen();
 80011f2:	f003 f91f 	bl	8004434 <gui_WelcomeScreen>
  //HAL_Delay(3000);
  HAL_Delay(500);
 80011f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011fa:	f000 fcdd 	bl	8001bb8 <HAL_Delay>

  HAL_TIM_Base_Start_IT(&htim3);
 80011fe:	4861      	ldr	r0, [pc, #388]	; (8001384 <main+0x1cc>)
 8001200:	f002 fbfe 	bl	8003a00 <HAL_TIM_Base_Start_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	switch(display_mode)
 8001204:	4b60      	ldr	r3, [pc, #384]	; (8001388 <main+0x1d0>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d002      	beq.n	8001212 <main+0x5a>
 800120c:	2b02      	cmp	r3, #2
 800120e:	d030      	beq.n	8001272 <main+0xba>
 8001210:	e07a      	b.n	8001308 <main+0x150>
	{
		case 1:

			if((angles.yx > -0.3) && (angles.yx < 0.3) )
 8001212:	4b5e      	ldr	r3, [pc, #376]	; (800138c <main+0x1d4>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff f906 	bl	8000428 <__aeabi_f2d>
 800121c:	a350      	add	r3, pc, #320	; (adr r3, 8001360 <main+0x1a8>)
 800121e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001222:	f7ff fbe9 	bl	80009f8 <__aeabi_dcmpgt>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d013      	beq.n	8001254 <main+0x9c>
 800122c:	4b57      	ldr	r3, [pc, #348]	; (800138c <main+0x1d4>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff f8f9 	bl	8000428 <__aeabi_f2d>
 8001236:	a34c      	add	r3, pc, #304	; (adr r3, 8001368 <main+0x1b0>)
 8001238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123c:	f7ff fbbe 	bl	80009bc <__aeabi_dcmplt>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d006      	beq.n	8001254 <main+0x9c>
				HAL_GPIO_WritePin(GPIOC, LED_Pin, 0);
 8001246:	2200      	movs	r2, #0
 8001248:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800124c:	4850      	ldr	r0, [pc, #320]	; (8001390 <main+0x1d8>)
 800124e:	f000 ff69 	bl	8002124 <HAL_GPIO_WritePin>
 8001252:	e005      	b.n	8001260 <main+0xa8>
			else
				HAL_GPIO_WritePin(GPIOC, LED_Pin, 1);
 8001254:	2201      	movs	r2, #1
 8001256:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800125a:	484d      	ldr	r0, [pc, #308]	; (8001390 <main+0x1d8>)
 800125c:	f000 ff62 	bl	8002124 <HAL_GPIO_WritePin>

			gui_Bubble_1d(angles.yx, mpu6050.temp);
 8001260:	4b4a      	ldr	r3, [pc, #296]	; (800138c <main+0x1d4>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a46      	ldr	r2, [pc, #280]	; (8001380 <main+0x1c8>)
 8001266:	68d2      	ldr	r2, [r2, #12]
 8001268:	4611      	mov	r1, r2
 800126a:	4618      	mov	r0, r3
 800126c:	f003 f91e 	bl	80044ac <gui_Bubble_1d>
			break;
 8001270:	e04a      	b.n	8001308 <main+0x150>

		case 2:

			if((angles.yz > -0.3) && (angles.yz < 0.3) && (angles.xz > -0.3) && (angles.xz < 0.3) )
 8001272:	4b46      	ldr	r3, [pc, #280]	; (800138c <main+0x1d4>)
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff f8d6 	bl	8000428 <__aeabi_f2d>
 800127c:	a338      	add	r3, pc, #224	; (adr r3, 8001360 <main+0x1a8>)
 800127e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001282:	f7ff fbb9 	bl	80009f8 <__aeabi_dcmpgt>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d02d      	beq.n	80012e8 <main+0x130>
 800128c:	4b3f      	ldr	r3, [pc, #252]	; (800138c <main+0x1d4>)
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff f8c9 	bl	8000428 <__aeabi_f2d>
 8001296:	a334      	add	r3, pc, #208	; (adr r3, 8001368 <main+0x1b0>)
 8001298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129c:	f7ff fb8e 	bl	80009bc <__aeabi_dcmplt>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d020      	beq.n	80012e8 <main+0x130>
 80012a6:	4b39      	ldr	r3, [pc, #228]	; (800138c <main+0x1d4>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff f8bc 	bl	8000428 <__aeabi_f2d>
 80012b0:	a32b      	add	r3, pc, #172	; (adr r3, 8001360 <main+0x1a8>)
 80012b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b6:	f7ff fb9f 	bl	80009f8 <__aeabi_dcmpgt>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d013      	beq.n	80012e8 <main+0x130>
 80012c0:	4b32      	ldr	r3, [pc, #200]	; (800138c <main+0x1d4>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff f8af 	bl	8000428 <__aeabi_f2d>
 80012ca:	a327      	add	r3, pc, #156	; (adr r3, 8001368 <main+0x1b0>)
 80012cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d0:	f7ff fb74 	bl	80009bc <__aeabi_dcmplt>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d006      	beq.n	80012e8 <main+0x130>
				HAL_GPIO_WritePin(GPIOC, LED_Pin, 0);
 80012da:	2200      	movs	r2, #0
 80012dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012e0:	482b      	ldr	r0, [pc, #172]	; (8001390 <main+0x1d8>)
 80012e2:	f000 ff1f 	bl	8002124 <HAL_GPIO_WritePin>
 80012e6:	e005      	b.n	80012f4 <main+0x13c>
			else
				HAL_GPIO_WritePin(GPIOC, LED_Pin, 1);
 80012e8:	2201      	movs	r2, #1
 80012ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012ee:	4828      	ldr	r0, [pc, #160]	; (8001390 <main+0x1d8>)
 80012f0:	f000 ff18 	bl	8002124 <HAL_GPIO_WritePin>

			gui_Bubble_2d(angles.yz, angles.xz, mpu6050.temp);
 80012f4:	4b25      	ldr	r3, [pc, #148]	; (800138c <main+0x1d4>)
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	4a24      	ldr	r2, [pc, #144]	; (800138c <main+0x1d4>)
 80012fa:	6851      	ldr	r1, [r2, #4]
 80012fc:	4a20      	ldr	r2, [pc, #128]	; (8001380 <main+0x1c8>)
 80012fe:	68d2      	ldr	r2, [r2, #12]
 8001300:	4618      	mov	r0, r3
 8001302:	f003 f9b5 	bl	8004670 <gui_Bubble_2d>
			break;
 8001306:	bf00      	nop
	}

	if( (az_filter.out < 0.3) && (display_mode != 1)  )	// Revisar como evaluar que el timer ya está corriendo, cosa de no iniciarlo más de una vez.
 8001308:	4b1b      	ldr	r3, [pc, #108]	; (8001378 <main+0x1c0>)
 800130a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff f88a 	bl	8000428 <__aeabi_f2d>
 8001314:	a314      	add	r3, pc, #80	; (adr r3, 8001368 <main+0x1b0>)
 8001316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131a:	f7ff fb4f 	bl	80009bc <__aeabi_dcmplt>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d006      	beq.n	8001332 <main+0x17a>
 8001324:	4b18      	ldr	r3, [pc, #96]	; (8001388 <main+0x1d0>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d002      	beq.n	8001332 <main+0x17a>
		HAL_TIM_Base_Start_IT(&htim2);
 800132c:	4819      	ldr	r0, [pc, #100]	; (8001394 <main+0x1dc>)
 800132e:	f002 fb67 	bl	8003a00 <HAL_TIM_Base_Start_IT>

	if( (az_filter.out > 0.7) && (display_mode != 2) )
 8001332:	4b11      	ldr	r3, [pc, #68]	; (8001378 <main+0x1c0>)
 8001334:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff f875 	bl	8000428 <__aeabi_f2d>
 800133e:	a30c      	add	r3, pc, #48	; (adr r3, 8001370 <main+0x1b8>)
 8001340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001344:	f7ff fb58 	bl	80009f8 <__aeabi_dcmpgt>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d007      	beq.n	800135e <main+0x1a6>
 800134e:	4b0e      	ldr	r3, [pc, #56]	; (8001388 <main+0x1d0>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b02      	cmp	r3, #2
 8001354:	f43f af56 	beq.w	8001204 <main+0x4c>
		HAL_TIM_Base_Start_IT(&htim2);
 8001358:	480e      	ldr	r0, [pc, #56]	; (8001394 <main+0x1dc>)
 800135a:	f002 fb51 	bl	8003a00 <HAL_TIM_Base_Start_IT>
	switch(display_mode)
 800135e:	e751      	b.n	8001204 <main+0x4c>
 8001360:	33333333 	.word	0x33333333
 8001364:	bfd33333 	.word	0xbfd33333
 8001368:	33333333 	.word	0x33333333
 800136c:	3fd33333 	.word	0x3fd33333
 8001370:	66666666 	.word	0x66666666
 8001374:	3fe66666 	.word	0x3fe66666
 8001378:	20000914 	.word	0x20000914
 800137c:	20000704 	.word	0x20000704
 8001380:	2000029c 	.word	0x2000029c
 8001384:	200008cc 	.word	0x200008cc
 8001388:	20000298 	.word	0x20000298
 800138c:	200002b8 	.word	0x200002b8
 8001390:	40011000 	.word	0x40011000
 8001394:	20000a24 	.word	0x20000a24

08001398 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b090      	sub	sp, #64	; 0x40
 800139c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800139e:	f107 0318 	add.w	r3, r7, #24
 80013a2:	2228      	movs	r2, #40	; 0x28
 80013a4:	2100      	movs	r1, #0
 80013a6:	4618      	mov	r0, r3
 80013a8:	f003 ff08 	bl	80051bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013ac:	1d3b      	adds	r3, r7, #4
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]
 80013b8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013ba:	2301      	movs	r3, #1
 80013bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013c4:	2300      	movs	r3, #0
 80013c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013c8:	2301      	movs	r3, #1
 80013ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013cc:	2302      	movs	r3, #2
 80013ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013d6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80013da:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013dc:	f107 0318 	add.w	r3, r7, #24
 80013e0:	4618      	mov	r0, r3
 80013e2:	f001 feb7 	bl	8003154 <HAL_RCC_OscConfig>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80013ec:	f000 f976 	bl	80016dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013f0:	230f      	movs	r3, #15
 80013f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013f4:	2302      	movs	r3, #2
 80013f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013f8:	2300      	movs	r3, #0
 80013fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001400:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001402:	2300      	movs	r3, #0
 8001404:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001406:	1d3b      	adds	r3, r7, #4
 8001408:	2102      	movs	r1, #2
 800140a:	4618      	mov	r0, r3
 800140c:	f002 f922 	bl	8003654 <HAL_RCC_ClockConfig>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001416:	f000 f961 	bl	80016dc <Error_Handler>
  }
}
 800141a:	bf00      	nop
 800141c:	3740      	adds	r7, #64	; 0x40
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
	...

08001424 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001428:	4b12      	ldr	r3, [pc, #72]	; (8001474 <MX_I2C1_Init+0x50>)
 800142a:	4a13      	ldr	r2, [pc, #76]	; (8001478 <MX_I2C1_Init+0x54>)
 800142c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800142e:	4b11      	ldr	r3, [pc, #68]	; (8001474 <MX_I2C1_Init+0x50>)
 8001430:	4a12      	ldr	r2, [pc, #72]	; (800147c <MX_I2C1_Init+0x58>)
 8001432:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001434:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <MX_I2C1_Init+0x50>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800143a:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <MX_I2C1_Init+0x50>)
 800143c:	2200      	movs	r2, #0
 800143e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001440:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <MX_I2C1_Init+0x50>)
 8001442:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001446:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001448:	4b0a      	ldr	r3, [pc, #40]	; (8001474 <MX_I2C1_Init+0x50>)
 800144a:	2200      	movs	r2, #0
 800144c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800144e:	4b09      	ldr	r3, [pc, #36]	; (8001474 <MX_I2C1_Init+0x50>)
 8001450:	2200      	movs	r2, #0
 8001452:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001454:	4b07      	ldr	r3, [pc, #28]	; (8001474 <MX_I2C1_Init+0x50>)
 8001456:	2200      	movs	r2, #0
 8001458:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800145a:	4b06      	ldr	r3, [pc, #24]	; (8001474 <MX_I2C1_Init+0x50>)
 800145c:	2200      	movs	r2, #0
 800145e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001460:	4804      	ldr	r0, [pc, #16]	; (8001474 <MX_I2C1_Init+0x50>)
 8001462:	f000 fe77 	bl	8002154 <HAL_I2C_Init>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800146c:	f000 f936 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001470:	bf00      	nop
 8001472:	bd80      	pop	{r7, pc}
 8001474:	2000078c 	.word	0x2000078c
 8001478:	40005400 	.word	0x40005400
 800147c:	000186a0 	.word	0x000186a0

08001480 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001484:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <MX_I2C2_Init+0x50>)
 8001486:	4a13      	ldr	r2, [pc, #76]	; (80014d4 <MX_I2C2_Init+0x54>)
 8001488:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800148a:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <MX_I2C2_Init+0x50>)
 800148c:	4a12      	ldr	r2, [pc, #72]	; (80014d8 <MX_I2C2_Init+0x58>)
 800148e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001490:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <MX_I2C2_Init+0x50>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001496:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <MX_I2C2_Init+0x50>)
 8001498:	2200      	movs	r2, #0
 800149a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800149c:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <MX_I2C2_Init+0x50>)
 800149e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014a2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014a4:	4b0a      	ldr	r3, [pc, #40]	; (80014d0 <MX_I2C2_Init+0x50>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80014aa:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <MX_I2C2_Init+0x50>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014b0:	4b07      	ldr	r3, [pc, #28]	; (80014d0 <MX_I2C2_Init+0x50>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014b6:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <MX_I2C2_Init+0x50>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80014bc:	4804      	ldr	r0, [pc, #16]	; (80014d0 <MX_I2C2_Init+0x50>)
 80014be:	f000 fe49 	bl	8002154 <HAL_I2C_Init>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80014c8:	f000 f908 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80014cc:	bf00      	nop
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20000868 	.word	0x20000868
 80014d4:	40005800 	.word	0x40005800
 80014d8:	000186a0 	.word	0x000186a0

080014dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014e2:	f107 0308 	add.w	r3, r7, #8
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f0:	463b      	mov	r3, r7
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014f8:	4b1e      	ldr	r3, [pc, #120]	; (8001574 <MX_TIM2_Init+0x98>)
 80014fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000;
 8001500:	4b1c      	ldr	r3, [pc, #112]	; (8001574 <MX_TIM2_Init+0x98>)
 8001502:	f242 7210 	movw	r2, #10000	; 0x2710
 8001506:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001508:	4b1a      	ldr	r3, [pc, #104]	; (8001574 <MX_TIM2_Init+0x98>)
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7200;
 800150e:	4b19      	ldr	r3, [pc, #100]	; (8001574 <MX_TIM2_Init+0x98>)
 8001510:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8001514:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001516:	4b17      	ldr	r3, [pc, #92]	; (8001574 <MX_TIM2_Init+0x98>)
 8001518:	2200      	movs	r2, #0
 800151a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800151c:	4b15      	ldr	r3, [pc, #84]	; (8001574 <MX_TIM2_Init+0x98>)
 800151e:	2280      	movs	r2, #128	; 0x80
 8001520:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001522:	4814      	ldr	r0, [pc, #80]	; (8001574 <MX_TIM2_Init+0x98>)
 8001524:	f002 fa1c 	bl	8003960 <HAL_TIM_Base_Init>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800152e:	f000 f8d5 	bl	80016dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001532:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001536:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001538:	f107 0308 	add.w	r3, r7, #8
 800153c:	4619      	mov	r1, r3
 800153e:	480d      	ldr	r0, [pc, #52]	; (8001574 <MX_TIM2_Init+0x98>)
 8001540:	f002 fbe6 	bl	8003d10 <HAL_TIM_ConfigClockSource>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800154a:	f000 f8c7 	bl	80016dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800154e:	2300      	movs	r3, #0
 8001550:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001552:	2300      	movs	r3, #0
 8001554:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001556:	463b      	mov	r3, r7
 8001558:	4619      	mov	r1, r3
 800155a:	4806      	ldr	r0, [pc, #24]	; (8001574 <MX_TIM2_Init+0x98>)
 800155c:	f002 fdb8 	bl	80040d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001566:	f000 f8b9 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800156a:	bf00      	nop
 800156c:	3718      	adds	r7, #24
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20000a24 	.word	0x20000a24

08001578 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800157e:	f107 0308 	add.w	r3, r7, #8
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800158c:	463b      	mov	r3, r7
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001594:	4b1d      	ldr	r3, [pc, #116]	; (800160c <MX_TIM3_Init+0x94>)
 8001596:	4a1e      	ldr	r2, [pc, #120]	; (8001610 <MX_TIM3_Init+0x98>)
 8001598:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 720;
 800159a:	4b1c      	ldr	r3, [pc, #112]	; (800160c <MX_TIM3_Init+0x94>)
 800159c:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 80015a0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a2:	4b1a      	ldr	r3, [pc, #104]	; (800160c <MX_TIM3_Init+0x94>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500;
 80015a8:	4b18      	ldr	r3, [pc, #96]	; (800160c <MX_TIM3_Init+0x94>)
 80015aa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80015ae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015b0:	4b16      	ldr	r3, [pc, #88]	; (800160c <MX_TIM3_Init+0x94>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b6:	4b15      	ldr	r3, [pc, #84]	; (800160c <MX_TIM3_Init+0x94>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015bc:	4813      	ldr	r0, [pc, #76]	; (800160c <MX_TIM3_Init+0x94>)
 80015be:	f002 f9cf 	bl	8003960 <HAL_TIM_Base_Init>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80015c8:	f000 f888 	bl	80016dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015d2:	f107 0308 	add.w	r3, r7, #8
 80015d6:	4619      	mov	r1, r3
 80015d8:	480c      	ldr	r0, [pc, #48]	; (800160c <MX_TIM3_Init+0x94>)
 80015da:	f002 fb99 	bl	8003d10 <HAL_TIM_ConfigClockSource>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80015e4:	f000 f87a 	bl	80016dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015e8:	2300      	movs	r3, #0
 80015ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ec:	2300      	movs	r3, #0
 80015ee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015f0:	463b      	mov	r3, r7
 80015f2:	4619      	mov	r1, r3
 80015f4:	4805      	ldr	r0, [pc, #20]	; (800160c <MX_TIM3_Init+0x94>)
 80015f6:	f002 fd6b 	bl	80040d0 <HAL_TIMEx_MasterConfigSynchronization>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001600:	f000 f86c 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001604:	bf00      	nop
 8001606:	3718      	adds	r7, #24
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	200008cc 	.word	0x200008cc
 8001610:	40000400 	.word	0x40000400

08001614 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b088      	sub	sp, #32
 8001618:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161a:	f107 0310 	add.w	r3, r7, #16
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	605a      	str	r2, [r3, #4]
 8001624:	609a      	str	r2, [r3, #8]
 8001626:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001628:	4b2a      	ldr	r3, [pc, #168]	; (80016d4 <MX_GPIO_Init+0xc0>)
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	4a29      	ldr	r2, [pc, #164]	; (80016d4 <MX_GPIO_Init+0xc0>)
 800162e:	f043 0310 	orr.w	r3, r3, #16
 8001632:	6193      	str	r3, [r2, #24]
 8001634:	4b27      	ldr	r3, [pc, #156]	; (80016d4 <MX_GPIO_Init+0xc0>)
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	f003 0310 	and.w	r3, r3, #16
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001640:	4b24      	ldr	r3, [pc, #144]	; (80016d4 <MX_GPIO_Init+0xc0>)
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	4a23      	ldr	r2, [pc, #140]	; (80016d4 <MX_GPIO_Init+0xc0>)
 8001646:	f043 0320 	orr.w	r3, r3, #32
 800164a:	6193      	str	r3, [r2, #24]
 800164c:	4b21      	ldr	r3, [pc, #132]	; (80016d4 <MX_GPIO_Init+0xc0>)
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	f003 0320 	and.w	r3, r3, #32
 8001654:	60bb      	str	r3, [r7, #8]
 8001656:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001658:	4b1e      	ldr	r3, [pc, #120]	; (80016d4 <MX_GPIO_Init+0xc0>)
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	4a1d      	ldr	r2, [pc, #116]	; (80016d4 <MX_GPIO_Init+0xc0>)
 800165e:	f043 0308 	orr.w	r3, r3, #8
 8001662:	6193      	str	r3, [r2, #24]
 8001664:	4b1b      	ldr	r3, [pc, #108]	; (80016d4 <MX_GPIO_Init+0xc0>)
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	f003 0308 	and.w	r3, r3, #8
 800166c:	607b      	str	r3, [r7, #4]
 800166e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001670:	4b18      	ldr	r3, [pc, #96]	; (80016d4 <MX_GPIO_Init+0xc0>)
 8001672:	699b      	ldr	r3, [r3, #24]
 8001674:	4a17      	ldr	r2, [pc, #92]	; (80016d4 <MX_GPIO_Init+0xc0>)
 8001676:	f043 0304 	orr.w	r3, r3, #4
 800167a:	6193      	str	r3, [r2, #24]
 800167c:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <MX_GPIO_Init+0xc0>)
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	f003 0304 	and.w	r3, r3, #4
 8001684:	603b      	str	r3, [r7, #0]
 8001686:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001688:	2201      	movs	r2, #1
 800168a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800168e:	4812      	ldr	r0, [pc, #72]	; (80016d8 <MX_GPIO_Init+0xc4>)
 8001690:	f000 fd48 	bl	8002124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001694:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001698:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800169a:	2301      	movs	r3, #1
 800169c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a2:	2302      	movs	r3, #2
 80016a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80016a6:	f107 0310 	add.w	r3, r7, #16
 80016aa:	4619      	mov	r1, r3
 80016ac:	480a      	ldr	r0, [pc, #40]	; (80016d8 <MX_GPIO_Init+0xc4>)
 80016ae:	f000 fbb5 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 80016b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016bc:	2301      	movs	r3, #1
 80016be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80016c0:	f107 0310 	add.w	r3, r7, #16
 80016c4:	4619      	mov	r1, r3
 80016c6:	4804      	ldr	r0, [pc, #16]	; (80016d8 <MX_GPIO_Init+0xc4>)
 80016c8:	f000 fba8 	bl	8001e1c <HAL_GPIO_Init>

}
 80016cc:	bf00      	nop
 80016ce:	3720      	adds	r7, #32
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40021000 	.word	0x40021000
 80016d8:	40011000 	.word	0x40011000

080016dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016e0:	b672      	cpsid	i
}
 80016e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016e4:	e7fe      	b.n	80016e4 <Error_Handler+0x8>
	...

080016e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016ee:	4b15      	ldr	r3, [pc, #84]	; (8001744 <HAL_MspInit+0x5c>)
 80016f0:	699b      	ldr	r3, [r3, #24]
 80016f2:	4a14      	ldr	r2, [pc, #80]	; (8001744 <HAL_MspInit+0x5c>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	6193      	str	r3, [r2, #24]
 80016fa:	4b12      	ldr	r3, [pc, #72]	; (8001744 <HAL_MspInit+0x5c>)
 80016fc:	699b      	ldr	r3, [r3, #24]
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	60bb      	str	r3, [r7, #8]
 8001704:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001706:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <HAL_MspInit+0x5c>)
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	4a0e      	ldr	r2, [pc, #56]	; (8001744 <HAL_MspInit+0x5c>)
 800170c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001710:	61d3      	str	r3, [r2, #28]
 8001712:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <HAL_MspInit+0x5c>)
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171a:	607b      	str	r3, [r7, #4]
 800171c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800171e:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <HAL_MspInit+0x60>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	4a04      	ldr	r2, [pc, #16]	; (8001748 <HAL_MspInit+0x60>)
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800173a:	bf00      	nop
 800173c:	3714      	adds	r7, #20
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr
 8001744:	40021000 	.word	0x40021000
 8001748:	40010000 	.word	0x40010000

0800174c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b08a      	sub	sp, #40	; 0x28
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001754:	f107 0318 	add.w	r3, r7, #24
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a2b      	ldr	r2, [pc, #172]	; (8001814 <HAL_I2C_MspInit+0xc8>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d124      	bne.n	80017b6 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800176c:	4b2a      	ldr	r3, [pc, #168]	; (8001818 <HAL_I2C_MspInit+0xcc>)
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	4a29      	ldr	r2, [pc, #164]	; (8001818 <HAL_I2C_MspInit+0xcc>)
 8001772:	f043 0308 	orr.w	r3, r3, #8
 8001776:	6193      	str	r3, [r2, #24]
 8001778:	4b27      	ldr	r3, [pc, #156]	; (8001818 <HAL_I2C_MspInit+0xcc>)
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	f003 0308 	and.w	r3, r3, #8
 8001780:	617b      	str	r3, [r7, #20]
 8001782:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001784:	23c0      	movs	r3, #192	; 0xc0
 8001786:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001788:	2312      	movs	r3, #18
 800178a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800178c:	2303      	movs	r3, #3
 800178e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001790:	f107 0318 	add.w	r3, r7, #24
 8001794:	4619      	mov	r1, r3
 8001796:	4821      	ldr	r0, [pc, #132]	; (800181c <HAL_I2C_MspInit+0xd0>)
 8001798:	f000 fb40 	bl	8001e1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800179c:	4b1e      	ldr	r3, [pc, #120]	; (8001818 <HAL_I2C_MspInit+0xcc>)
 800179e:	69db      	ldr	r3, [r3, #28]
 80017a0:	4a1d      	ldr	r2, [pc, #116]	; (8001818 <HAL_I2C_MspInit+0xcc>)
 80017a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017a6:	61d3      	str	r3, [r2, #28]
 80017a8:	4b1b      	ldr	r3, [pc, #108]	; (8001818 <HAL_I2C_MspInit+0xcc>)
 80017aa:	69db      	ldr	r3, [r3, #28]
 80017ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017b0:	613b      	str	r3, [r7, #16]
 80017b2:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80017b4:	e029      	b.n	800180a <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a19      	ldr	r2, [pc, #100]	; (8001820 <HAL_I2C_MspInit+0xd4>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d124      	bne.n	800180a <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c0:	4b15      	ldr	r3, [pc, #84]	; (8001818 <HAL_I2C_MspInit+0xcc>)
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	4a14      	ldr	r2, [pc, #80]	; (8001818 <HAL_I2C_MspInit+0xcc>)
 80017c6:	f043 0308 	orr.w	r3, r3, #8
 80017ca:	6193      	str	r3, [r2, #24]
 80017cc:	4b12      	ldr	r3, [pc, #72]	; (8001818 <HAL_I2C_MspInit+0xcc>)
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	f003 0308 	and.w	r3, r3, #8
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80017d8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80017dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017de:	2312      	movs	r3, #18
 80017e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017e2:	2303      	movs	r3, #3
 80017e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e6:	f107 0318 	add.w	r3, r7, #24
 80017ea:	4619      	mov	r1, r3
 80017ec:	480b      	ldr	r0, [pc, #44]	; (800181c <HAL_I2C_MspInit+0xd0>)
 80017ee:	f000 fb15 	bl	8001e1c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80017f2:	4b09      	ldr	r3, [pc, #36]	; (8001818 <HAL_I2C_MspInit+0xcc>)
 80017f4:	69db      	ldr	r3, [r3, #28]
 80017f6:	4a08      	ldr	r2, [pc, #32]	; (8001818 <HAL_I2C_MspInit+0xcc>)
 80017f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017fc:	61d3      	str	r3, [r2, #28]
 80017fe:	4b06      	ldr	r3, [pc, #24]	; (8001818 <HAL_I2C_MspInit+0xcc>)
 8001800:	69db      	ldr	r3, [r3, #28]
 8001802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001806:	60bb      	str	r3, [r7, #8]
 8001808:	68bb      	ldr	r3, [r7, #8]
}
 800180a:	bf00      	nop
 800180c:	3728      	adds	r7, #40	; 0x28
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40005400 	.word	0x40005400
 8001818:	40021000 	.word	0x40021000
 800181c:	40010c00 	.word	0x40010c00
 8001820:	40005800 	.word	0x40005800

08001824 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001834:	d114      	bne.n	8001860 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001836:	4b19      	ldr	r3, [pc, #100]	; (800189c <HAL_TIM_Base_MspInit+0x78>)
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	4a18      	ldr	r2, [pc, #96]	; (800189c <HAL_TIM_Base_MspInit+0x78>)
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	61d3      	str	r3, [r2, #28]
 8001842:	4b16      	ldr	r3, [pc, #88]	; (800189c <HAL_TIM_Base_MspInit+0x78>)
 8001844:	69db      	ldr	r3, [r3, #28]
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800184e:	2200      	movs	r2, #0
 8001850:	2100      	movs	r1, #0
 8001852:	201c      	movs	r0, #28
 8001854:	f000 faab 	bl	8001dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001858:	201c      	movs	r0, #28
 800185a:	f000 fac4 	bl	8001de6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800185e:	e018      	b.n	8001892 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a0e      	ldr	r2, [pc, #56]	; (80018a0 <HAL_TIM_Base_MspInit+0x7c>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d113      	bne.n	8001892 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800186a:	4b0c      	ldr	r3, [pc, #48]	; (800189c <HAL_TIM_Base_MspInit+0x78>)
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	4a0b      	ldr	r2, [pc, #44]	; (800189c <HAL_TIM_Base_MspInit+0x78>)
 8001870:	f043 0302 	orr.w	r3, r3, #2
 8001874:	61d3      	str	r3, [r2, #28]
 8001876:	4b09      	ldr	r3, [pc, #36]	; (800189c <HAL_TIM_Base_MspInit+0x78>)
 8001878:	69db      	ldr	r3, [r3, #28]
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	60bb      	str	r3, [r7, #8]
 8001880:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001882:	2200      	movs	r2, #0
 8001884:	2100      	movs	r1, #0
 8001886:	201d      	movs	r0, #29
 8001888:	f000 fa91 	bl	8001dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800188c:	201d      	movs	r0, #29
 800188e:	f000 faaa 	bl	8001de6 <HAL_NVIC_EnableIRQ>
}
 8001892:	bf00      	nop
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40021000 	.word	0x40021000
 80018a0:	40000400 	.word	0x40000400

080018a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018a8:	e7fe      	b.n	80018a8 <NMI_Handler+0x4>

080018aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ae:	e7fe      	b.n	80018ae <HardFault_Handler+0x4>

080018b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018b4:	e7fe      	b.n	80018b4 <MemManage_Handler+0x4>

080018b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ba:	e7fe      	b.n	80018ba <BusFault_Handler+0x4>

080018bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018c0:	e7fe      	b.n	80018c0 <UsageFault_Handler+0x4>

080018c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bc80      	pop	{r7}
 80018cc:	4770      	bx	lr

080018ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ce:	b480      	push	{r7}
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc80      	pop	{r7}
 80018d8:	4770      	bx	lr

080018da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc80      	pop	{r7}
 80018e4:	4770      	bx	lr

080018e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018ea:	f000 f949 	bl	8001b80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
	...

080018f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018f8:	4802      	ldr	r0, [pc, #8]	; (8001904 <TIM2_IRQHandler+0x10>)
 80018fa:	f002 f901 	bl	8003b00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	20000a24 	.word	0x20000a24

08001908 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800190c:	4802      	ldr	r0, [pc, #8]	; (8001918 <TIM3_IRQHandler+0x10>)
 800190e:	f002 f8f7 	bl	8003b00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	200008cc 	.word	0x200008cc

0800191c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
	return 1;
 8001920:	2301      	movs	r3, #1
}
 8001922:	4618      	mov	r0, r3
 8001924:	46bd      	mov	sp, r7
 8001926:	bc80      	pop	{r7}
 8001928:	4770      	bx	lr

0800192a <_kill>:

int _kill(int pid, int sig)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b082      	sub	sp, #8
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
 8001932:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001934:	f003 fc0a 	bl	800514c <__errno>
 8001938:	4603      	mov	r3, r0
 800193a:	2216      	movs	r2, #22
 800193c:	601a      	str	r2, [r3, #0]
	return -1;
 800193e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001942:	4618      	mov	r0, r3
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <_exit>:

void _exit (int status)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b082      	sub	sp, #8
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001952:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f7ff ffe7 	bl	800192a <_kill>
	while (1) {}		/* Make sure we hang here */
 800195c:	e7fe      	b.n	800195c <_exit+0x12>

0800195e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b086      	sub	sp, #24
 8001962:	af00      	add	r7, sp, #0
 8001964:	60f8      	str	r0, [r7, #12]
 8001966:	60b9      	str	r1, [r7, #8]
 8001968:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800196a:	2300      	movs	r3, #0
 800196c:	617b      	str	r3, [r7, #20]
 800196e:	e00a      	b.n	8001986 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001970:	f3af 8000 	nop.w
 8001974:	4601      	mov	r1, r0
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	1c5a      	adds	r2, r3, #1
 800197a:	60ba      	str	r2, [r7, #8]
 800197c:	b2ca      	uxtb	r2, r1
 800197e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	3301      	adds	r3, #1
 8001984:	617b      	str	r3, [r7, #20]
 8001986:	697a      	ldr	r2, [r7, #20]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	429a      	cmp	r2, r3
 800198c:	dbf0      	blt.n	8001970 <_read+0x12>
	}

return len;
 800198e:	687b      	ldr	r3, [r7, #4]
}
 8001990:	4618      	mov	r0, r3
 8001992:	3718      	adds	r7, #24
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]
 80019a8:	e009      	b.n	80019be <_write+0x26>
	{
		__io_putchar(*ptr++);
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	1c5a      	adds	r2, r3, #1
 80019ae:	60ba      	str	r2, [r7, #8]
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	3301      	adds	r3, #1
 80019bc:	617b      	str	r3, [r7, #20]
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	dbf1      	blt.n	80019aa <_write+0x12>
	}
	return len;
 80019c6:	687b      	ldr	r3, [r7, #4]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3718      	adds	r7, #24
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <_close>:

int _close(int file)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
	return -1;
 80019d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80019dc:	4618      	mov	r0, r3
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr

080019e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019e6:	b480      	push	{r7}
 80019e8:	b083      	sub	sp, #12
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
 80019ee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019f6:	605a      	str	r2, [r3, #4]
	return 0;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr

08001a04 <_isatty>:

int _isatty(int file)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
	return 1;
 8001a0c:	2301      	movs	r3, #1
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bc80      	pop	{r7}
 8001a16:	4770      	bx	lr

08001a18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
	return 0;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3714      	adds	r7, #20
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr

08001a30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a38:	4a14      	ldr	r2, [pc, #80]	; (8001a8c <_sbrk+0x5c>)
 8001a3a:	4b15      	ldr	r3, [pc, #84]	; (8001a90 <_sbrk+0x60>)
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a44:	4b13      	ldr	r3, [pc, #76]	; (8001a94 <_sbrk+0x64>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d102      	bne.n	8001a52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a4c:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <_sbrk+0x64>)
 8001a4e:	4a12      	ldr	r2, [pc, #72]	; (8001a98 <_sbrk+0x68>)
 8001a50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a52:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <_sbrk+0x64>)
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4413      	add	r3, r2
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d207      	bcs.n	8001a70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a60:	f003 fb74 	bl	800514c <__errno>
 8001a64:	4603      	mov	r3, r0
 8001a66:	220c      	movs	r2, #12
 8001a68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a6e:	e009      	b.n	8001a84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a70:	4b08      	ldr	r3, [pc, #32]	; (8001a94 <_sbrk+0x64>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a76:	4b07      	ldr	r3, [pc, #28]	; (8001a94 <_sbrk+0x64>)
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	4a05      	ldr	r2, [pc, #20]	; (8001a94 <_sbrk+0x64>)
 8001a80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a82:	68fb      	ldr	r3, [r7, #12]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3718      	adds	r7, #24
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	20005000 	.word	0x20005000
 8001a90:	00000400 	.word	0x00000400
 8001a94:	200002d0 	.word	0x200002d0
 8001a98:	20000ba0 	.word	0x20000ba0

08001a9c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bc80      	pop	{r7}
 8001aa6:	4770      	bx	lr

08001aa8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001aa8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001aaa:	e003      	b.n	8001ab4 <LoopCopyDataInit>

08001aac <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001aac:	4b0b      	ldr	r3, [pc, #44]	; (8001adc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001aae:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001ab0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001ab2:	3104      	adds	r1, #4

08001ab4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001ab4:	480a      	ldr	r0, [pc, #40]	; (8001ae0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001ab6:	4b0b      	ldr	r3, [pc, #44]	; (8001ae4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001ab8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001aba:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001abc:	d3f6      	bcc.n	8001aac <CopyDataInit>
  ldr r2, =_sbss
 8001abe:	4a0a      	ldr	r2, [pc, #40]	; (8001ae8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001ac0:	e002      	b.n	8001ac8 <LoopFillZerobss>

08001ac2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001ac2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001ac4:	f842 3b04 	str.w	r3, [r2], #4

08001ac8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001ac8:	4b08      	ldr	r3, [pc, #32]	; (8001aec <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001aca:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001acc:	d3f9      	bcc.n	8001ac2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ace:	f7ff ffe5 	bl	8001a9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ad2:	f003 fb41 	bl	8005158 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ad6:	f7ff fb6f 	bl	80011b8 <main>
  bx lr
 8001ada:	4770      	bx	lr
  ldr r3, =_sidata
 8001adc:	0800bd70 	.word	0x0800bd70
  ldr r0, =_sdata
 8001ae0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001ae4:	2000027c 	.word	0x2000027c
  ldr r2, =_sbss
 8001ae8:	2000027c 	.word	0x2000027c
  ldr r3, = _ebss
 8001aec:	20000ba0 	.word	0x20000ba0

08001af0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001af0:	e7fe      	b.n	8001af0 <ADC1_2_IRQHandler>
	...

08001af4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001af8:	4b08      	ldr	r3, [pc, #32]	; (8001b1c <HAL_Init+0x28>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a07      	ldr	r2, [pc, #28]	; (8001b1c <HAL_Init+0x28>)
 8001afe:	f043 0310 	orr.w	r3, r3, #16
 8001b02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b04:	2003      	movs	r0, #3
 8001b06:	f000 f947 	bl	8001d98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b0a:	2000      	movs	r0, #0
 8001b0c:	f000 f808 	bl	8001b20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b10:	f7ff fdea 	bl	80016e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40022000 	.word	0x40022000

08001b20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b28:	4b12      	ldr	r3, [pc, #72]	; (8001b74 <HAL_InitTick+0x54>)
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <HAL_InitTick+0x58>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	4619      	mov	r1, r3
 8001b32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f000 f95f 	bl	8001e02 <HAL_SYSTICK_Config>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e00e      	b.n	8001b6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2b0f      	cmp	r3, #15
 8001b52:	d80a      	bhi.n	8001b6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b54:	2200      	movs	r2, #0
 8001b56:	6879      	ldr	r1, [r7, #4]
 8001b58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b5c:	f000 f927 	bl	8001dae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b60:	4a06      	ldr	r2, [pc, #24]	; (8001b7c <HAL_InitTick+0x5c>)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b66:	2300      	movs	r3, #0
 8001b68:	e000      	b.n	8001b6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	20000000 	.word	0x20000000
 8001b78:	20000008 	.word	0x20000008
 8001b7c:	20000004 	.word	0x20000004

08001b80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b84:	4b05      	ldr	r3, [pc, #20]	; (8001b9c <HAL_IncTick+0x1c>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	461a      	mov	r2, r3
 8001b8a:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <HAL_IncTick+0x20>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4413      	add	r3, r2
 8001b90:	4a03      	ldr	r2, [pc, #12]	; (8001ba0 <HAL_IncTick+0x20>)
 8001b92:	6013      	str	r3, [r2, #0]
}
 8001b94:	bf00      	nop
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr
 8001b9c:	20000008 	.word	0x20000008
 8001ba0:	20000b7c 	.word	0x20000b7c

08001ba4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ba8:	4b02      	ldr	r3, [pc, #8]	; (8001bb4 <HAL_GetTick+0x10>)
 8001baa:	681b      	ldr	r3, [r3, #0]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr
 8001bb4:	20000b7c 	.word	0x20000b7c

08001bb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bc0:	f7ff fff0 	bl	8001ba4 <HAL_GetTick>
 8001bc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bd0:	d005      	beq.n	8001bde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bd2:	4b0a      	ldr	r3, [pc, #40]	; (8001bfc <HAL_Delay+0x44>)
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	4413      	add	r3, r2
 8001bdc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bde:	bf00      	nop
 8001be0:	f7ff ffe0 	bl	8001ba4 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d8f7      	bhi.n	8001be0 <HAL_Delay+0x28>
  {
  }
}
 8001bf0:	bf00      	nop
 8001bf2:	bf00      	nop
 8001bf4:	3710      	adds	r7, #16
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20000008 	.word	0x20000008

08001c00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f003 0307 	and.w	r3, r3, #7
 8001c0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c10:	4b0c      	ldr	r3, [pc, #48]	; (8001c44 <__NVIC_SetPriorityGrouping+0x44>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c16:	68ba      	ldr	r2, [r7, #8]
 8001c18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c32:	4a04      	ldr	r2, [pc, #16]	; (8001c44 <__NVIC_SetPriorityGrouping+0x44>)
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	60d3      	str	r3, [r2, #12]
}
 8001c38:	bf00      	nop
 8001c3a:	3714      	adds	r7, #20
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bc80      	pop	{r7}
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	e000ed00 	.word	0xe000ed00

08001c48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c4c:	4b04      	ldr	r3, [pc, #16]	; (8001c60 <__NVIC_GetPriorityGrouping+0x18>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	0a1b      	lsrs	r3, r3, #8
 8001c52:	f003 0307 	and.w	r3, r3, #7
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bc80      	pop	{r7}
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	e000ed00 	.word	0xe000ed00

08001c64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	db0b      	blt.n	8001c8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c76:	79fb      	ldrb	r3, [r7, #7]
 8001c78:	f003 021f 	and.w	r2, r3, #31
 8001c7c:	4906      	ldr	r1, [pc, #24]	; (8001c98 <__NVIC_EnableIRQ+0x34>)
 8001c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c82:	095b      	lsrs	r3, r3, #5
 8001c84:	2001      	movs	r0, #1
 8001c86:	fa00 f202 	lsl.w	r2, r0, r2
 8001c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bc80      	pop	{r7}
 8001c96:	4770      	bx	lr
 8001c98:	e000e100 	.word	0xe000e100

08001c9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	6039      	str	r1, [r7, #0]
 8001ca6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	db0a      	blt.n	8001cc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	b2da      	uxtb	r2, r3
 8001cb4:	490c      	ldr	r1, [pc, #48]	; (8001ce8 <__NVIC_SetPriority+0x4c>)
 8001cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cba:	0112      	lsls	r2, r2, #4
 8001cbc:	b2d2      	uxtb	r2, r2
 8001cbe:	440b      	add	r3, r1
 8001cc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cc4:	e00a      	b.n	8001cdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	4908      	ldr	r1, [pc, #32]	; (8001cec <__NVIC_SetPriority+0x50>)
 8001ccc:	79fb      	ldrb	r3, [r7, #7]
 8001cce:	f003 030f 	and.w	r3, r3, #15
 8001cd2:	3b04      	subs	r3, #4
 8001cd4:	0112      	lsls	r2, r2, #4
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	440b      	add	r3, r1
 8001cda:	761a      	strb	r2, [r3, #24]
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bc80      	pop	{r7}
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	e000e100 	.word	0xe000e100
 8001cec:	e000ed00 	.word	0xe000ed00

08001cf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b089      	sub	sp, #36	; 0x24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	f1c3 0307 	rsb	r3, r3, #7
 8001d0a:	2b04      	cmp	r3, #4
 8001d0c:	bf28      	it	cs
 8001d0e:	2304      	movcs	r3, #4
 8001d10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	3304      	adds	r3, #4
 8001d16:	2b06      	cmp	r3, #6
 8001d18:	d902      	bls.n	8001d20 <NVIC_EncodePriority+0x30>
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	3b03      	subs	r3, #3
 8001d1e:	e000      	b.n	8001d22 <NVIC_EncodePriority+0x32>
 8001d20:	2300      	movs	r3, #0
 8001d22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	43da      	mvns	r2, r3
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	401a      	ands	r2, r3
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d42:	43d9      	mvns	r1, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d48:	4313      	orrs	r3, r2
         );
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3724      	adds	r7, #36	; 0x24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc80      	pop	{r7}
 8001d52:	4770      	bx	lr

08001d54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d64:	d301      	bcc.n	8001d6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d66:	2301      	movs	r3, #1
 8001d68:	e00f      	b.n	8001d8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d6a:	4a0a      	ldr	r2, [pc, #40]	; (8001d94 <SysTick_Config+0x40>)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d72:	210f      	movs	r1, #15
 8001d74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d78:	f7ff ff90 	bl	8001c9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d7c:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <SysTick_Config+0x40>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d82:	4b04      	ldr	r3, [pc, #16]	; (8001d94 <SysTick_Config+0x40>)
 8001d84:	2207      	movs	r2, #7
 8001d86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	e000e010 	.word	0xe000e010

08001d98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f7ff ff2d 	bl	8001c00 <__NVIC_SetPriorityGrouping>
}
 8001da6:	bf00      	nop
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b086      	sub	sp, #24
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	4603      	mov	r3, r0
 8001db6:	60b9      	str	r1, [r7, #8]
 8001db8:	607a      	str	r2, [r7, #4]
 8001dba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dc0:	f7ff ff42 	bl	8001c48 <__NVIC_GetPriorityGrouping>
 8001dc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	68b9      	ldr	r1, [r7, #8]
 8001dca:	6978      	ldr	r0, [r7, #20]
 8001dcc:	f7ff ff90 	bl	8001cf0 <NVIC_EncodePriority>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dd6:	4611      	mov	r1, r2
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff ff5f 	bl	8001c9c <__NVIC_SetPriority>
}
 8001dde:	bf00      	nop
 8001de0:	3718      	adds	r7, #24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b082      	sub	sp, #8
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	4603      	mov	r3, r0
 8001dee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff ff35 	bl	8001c64 <__NVIC_EnableIRQ>
}
 8001dfa:	bf00      	nop
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b082      	sub	sp, #8
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7ff ffa2 	bl	8001d54 <SysTick_Config>
 8001e10:	4603      	mov	r3, r0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
	...

08001e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b08b      	sub	sp, #44	; 0x2c
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e26:	2300      	movs	r3, #0
 8001e28:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e2e:	e169      	b.n	8002104 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e30:	2201      	movs	r2, #1
 8001e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	69fa      	ldr	r2, [r7, #28]
 8001e40:	4013      	ands	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	f040 8158 	bne.w	80020fe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	4a9a      	ldr	r2, [pc, #616]	; (80020bc <HAL_GPIO_Init+0x2a0>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d05e      	beq.n	8001f16 <HAL_GPIO_Init+0xfa>
 8001e58:	4a98      	ldr	r2, [pc, #608]	; (80020bc <HAL_GPIO_Init+0x2a0>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d875      	bhi.n	8001f4a <HAL_GPIO_Init+0x12e>
 8001e5e:	4a98      	ldr	r2, [pc, #608]	; (80020c0 <HAL_GPIO_Init+0x2a4>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d058      	beq.n	8001f16 <HAL_GPIO_Init+0xfa>
 8001e64:	4a96      	ldr	r2, [pc, #600]	; (80020c0 <HAL_GPIO_Init+0x2a4>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d86f      	bhi.n	8001f4a <HAL_GPIO_Init+0x12e>
 8001e6a:	4a96      	ldr	r2, [pc, #600]	; (80020c4 <HAL_GPIO_Init+0x2a8>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d052      	beq.n	8001f16 <HAL_GPIO_Init+0xfa>
 8001e70:	4a94      	ldr	r2, [pc, #592]	; (80020c4 <HAL_GPIO_Init+0x2a8>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d869      	bhi.n	8001f4a <HAL_GPIO_Init+0x12e>
 8001e76:	4a94      	ldr	r2, [pc, #592]	; (80020c8 <HAL_GPIO_Init+0x2ac>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d04c      	beq.n	8001f16 <HAL_GPIO_Init+0xfa>
 8001e7c:	4a92      	ldr	r2, [pc, #584]	; (80020c8 <HAL_GPIO_Init+0x2ac>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d863      	bhi.n	8001f4a <HAL_GPIO_Init+0x12e>
 8001e82:	4a92      	ldr	r2, [pc, #584]	; (80020cc <HAL_GPIO_Init+0x2b0>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d046      	beq.n	8001f16 <HAL_GPIO_Init+0xfa>
 8001e88:	4a90      	ldr	r2, [pc, #576]	; (80020cc <HAL_GPIO_Init+0x2b0>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d85d      	bhi.n	8001f4a <HAL_GPIO_Init+0x12e>
 8001e8e:	2b12      	cmp	r3, #18
 8001e90:	d82a      	bhi.n	8001ee8 <HAL_GPIO_Init+0xcc>
 8001e92:	2b12      	cmp	r3, #18
 8001e94:	d859      	bhi.n	8001f4a <HAL_GPIO_Init+0x12e>
 8001e96:	a201      	add	r2, pc, #4	; (adr r2, 8001e9c <HAL_GPIO_Init+0x80>)
 8001e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e9c:	08001f17 	.word	0x08001f17
 8001ea0:	08001ef1 	.word	0x08001ef1
 8001ea4:	08001f03 	.word	0x08001f03
 8001ea8:	08001f45 	.word	0x08001f45
 8001eac:	08001f4b 	.word	0x08001f4b
 8001eb0:	08001f4b 	.word	0x08001f4b
 8001eb4:	08001f4b 	.word	0x08001f4b
 8001eb8:	08001f4b 	.word	0x08001f4b
 8001ebc:	08001f4b 	.word	0x08001f4b
 8001ec0:	08001f4b 	.word	0x08001f4b
 8001ec4:	08001f4b 	.word	0x08001f4b
 8001ec8:	08001f4b 	.word	0x08001f4b
 8001ecc:	08001f4b 	.word	0x08001f4b
 8001ed0:	08001f4b 	.word	0x08001f4b
 8001ed4:	08001f4b 	.word	0x08001f4b
 8001ed8:	08001f4b 	.word	0x08001f4b
 8001edc:	08001f4b 	.word	0x08001f4b
 8001ee0:	08001ef9 	.word	0x08001ef9
 8001ee4:	08001f0d 	.word	0x08001f0d
 8001ee8:	4a79      	ldr	r2, [pc, #484]	; (80020d0 <HAL_GPIO_Init+0x2b4>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d013      	beq.n	8001f16 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001eee:	e02c      	b.n	8001f4a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	623b      	str	r3, [r7, #32]
          break;
 8001ef6:	e029      	b.n	8001f4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	3304      	adds	r3, #4
 8001efe:	623b      	str	r3, [r7, #32]
          break;
 8001f00:	e024      	b.n	8001f4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	3308      	adds	r3, #8
 8001f08:	623b      	str	r3, [r7, #32]
          break;
 8001f0a:	e01f      	b.n	8001f4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	330c      	adds	r3, #12
 8001f12:	623b      	str	r3, [r7, #32]
          break;
 8001f14:	e01a      	b.n	8001f4c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d102      	bne.n	8001f24 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f1e:	2304      	movs	r3, #4
 8001f20:	623b      	str	r3, [r7, #32]
          break;
 8001f22:	e013      	b.n	8001f4c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d105      	bne.n	8001f38 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f2c:	2308      	movs	r3, #8
 8001f2e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	69fa      	ldr	r2, [r7, #28]
 8001f34:	611a      	str	r2, [r3, #16]
          break;
 8001f36:	e009      	b.n	8001f4c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f38:	2308      	movs	r3, #8
 8001f3a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	69fa      	ldr	r2, [r7, #28]
 8001f40:	615a      	str	r2, [r3, #20]
          break;
 8001f42:	e003      	b.n	8001f4c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f44:	2300      	movs	r3, #0
 8001f46:	623b      	str	r3, [r7, #32]
          break;
 8001f48:	e000      	b.n	8001f4c <HAL_GPIO_Init+0x130>
          break;
 8001f4a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	2bff      	cmp	r3, #255	; 0xff
 8001f50:	d801      	bhi.n	8001f56 <HAL_GPIO_Init+0x13a>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	e001      	b.n	8001f5a <HAL_GPIO_Init+0x13e>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	3304      	adds	r3, #4
 8001f5a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	2bff      	cmp	r3, #255	; 0xff
 8001f60:	d802      	bhi.n	8001f68 <HAL_GPIO_Init+0x14c>
 8001f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	e002      	b.n	8001f6e <HAL_GPIO_Init+0x152>
 8001f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6a:	3b08      	subs	r3, #8
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	210f      	movs	r1, #15
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	401a      	ands	r2, r3
 8001f80:	6a39      	ldr	r1, [r7, #32]
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	fa01 f303 	lsl.w	r3, r1, r3
 8001f88:	431a      	orrs	r2, r3
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f000 80b1 	beq.w	80020fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f9c:	4b4d      	ldr	r3, [pc, #308]	; (80020d4 <HAL_GPIO_Init+0x2b8>)
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	4a4c      	ldr	r2, [pc, #304]	; (80020d4 <HAL_GPIO_Init+0x2b8>)
 8001fa2:	f043 0301 	orr.w	r3, r3, #1
 8001fa6:	6193      	str	r3, [r2, #24]
 8001fa8:	4b4a      	ldr	r3, [pc, #296]	; (80020d4 <HAL_GPIO_Init+0x2b8>)
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	60bb      	str	r3, [r7, #8]
 8001fb2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fb4:	4a48      	ldr	r2, [pc, #288]	; (80020d8 <HAL_GPIO_Init+0x2bc>)
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb8:	089b      	lsrs	r3, r3, #2
 8001fba:	3302      	adds	r3, #2
 8001fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fc0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc4:	f003 0303 	and.w	r3, r3, #3
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	220f      	movs	r2, #15
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a40      	ldr	r2, [pc, #256]	; (80020dc <HAL_GPIO_Init+0x2c0>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d013      	beq.n	8002008 <HAL_GPIO_Init+0x1ec>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a3f      	ldr	r2, [pc, #252]	; (80020e0 <HAL_GPIO_Init+0x2c4>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d00d      	beq.n	8002004 <HAL_GPIO_Init+0x1e8>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a3e      	ldr	r2, [pc, #248]	; (80020e4 <HAL_GPIO_Init+0x2c8>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d007      	beq.n	8002000 <HAL_GPIO_Init+0x1e4>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a3d      	ldr	r2, [pc, #244]	; (80020e8 <HAL_GPIO_Init+0x2cc>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d101      	bne.n	8001ffc <HAL_GPIO_Init+0x1e0>
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e006      	b.n	800200a <HAL_GPIO_Init+0x1ee>
 8001ffc:	2304      	movs	r3, #4
 8001ffe:	e004      	b.n	800200a <HAL_GPIO_Init+0x1ee>
 8002000:	2302      	movs	r3, #2
 8002002:	e002      	b.n	800200a <HAL_GPIO_Init+0x1ee>
 8002004:	2301      	movs	r3, #1
 8002006:	e000      	b.n	800200a <HAL_GPIO_Init+0x1ee>
 8002008:	2300      	movs	r3, #0
 800200a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800200c:	f002 0203 	and.w	r2, r2, #3
 8002010:	0092      	lsls	r2, r2, #2
 8002012:	4093      	lsls	r3, r2
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	4313      	orrs	r3, r2
 8002018:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800201a:	492f      	ldr	r1, [pc, #188]	; (80020d8 <HAL_GPIO_Init+0x2bc>)
 800201c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201e:	089b      	lsrs	r3, r3, #2
 8002020:	3302      	adds	r3, #2
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d006      	beq.n	8002042 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002034:	4b2d      	ldr	r3, [pc, #180]	; (80020ec <HAL_GPIO_Init+0x2d0>)
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	492c      	ldr	r1, [pc, #176]	; (80020ec <HAL_GPIO_Init+0x2d0>)
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	4313      	orrs	r3, r2
 800203e:	600b      	str	r3, [r1, #0]
 8002040:	e006      	b.n	8002050 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002042:	4b2a      	ldr	r3, [pc, #168]	; (80020ec <HAL_GPIO_Init+0x2d0>)
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	43db      	mvns	r3, r3
 800204a:	4928      	ldr	r1, [pc, #160]	; (80020ec <HAL_GPIO_Init+0x2d0>)
 800204c:	4013      	ands	r3, r2
 800204e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d006      	beq.n	800206a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800205c:	4b23      	ldr	r3, [pc, #140]	; (80020ec <HAL_GPIO_Init+0x2d0>)
 800205e:	685a      	ldr	r2, [r3, #4]
 8002060:	4922      	ldr	r1, [pc, #136]	; (80020ec <HAL_GPIO_Init+0x2d0>)
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	4313      	orrs	r3, r2
 8002066:	604b      	str	r3, [r1, #4]
 8002068:	e006      	b.n	8002078 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800206a:	4b20      	ldr	r3, [pc, #128]	; (80020ec <HAL_GPIO_Init+0x2d0>)
 800206c:	685a      	ldr	r2, [r3, #4]
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	43db      	mvns	r3, r3
 8002072:	491e      	ldr	r1, [pc, #120]	; (80020ec <HAL_GPIO_Init+0x2d0>)
 8002074:	4013      	ands	r3, r2
 8002076:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d006      	beq.n	8002092 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002084:	4b19      	ldr	r3, [pc, #100]	; (80020ec <HAL_GPIO_Init+0x2d0>)
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	4918      	ldr	r1, [pc, #96]	; (80020ec <HAL_GPIO_Init+0x2d0>)
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	4313      	orrs	r3, r2
 800208e:	608b      	str	r3, [r1, #8]
 8002090:	e006      	b.n	80020a0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002092:	4b16      	ldr	r3, [pc, #88]	; (80020ec <HAL_GPIO_Init+0x2d0>)
 8002094:	689a      	ldr	r2, [r3, #8]
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	43db      	mvns	r3, r3
 800209a:	4914      	ldr	r1, [pc, #80]	; (80020ec <HAL_GPIO_Init+0x2d0>)
 800209c:	4013      	ands	r3, r2
 800209e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d021      	beq.n	80020f0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020ac:	4b0f      	ldr	r3, [pc, #60]	; (80020ec <HAL_GPIO_Init+0x2d0>)
 80020ae:	68da      	ldr	r2, [r3, #12]
 80020b0:	490e      	ldr	r1, [pc, #56]	; (80020ec <HAL_GPIO_Init+0x2d0>)
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	60cb      	str	r3, [r1, #12]
 80020b8:	e021      	b.n	80020fe <HAL_GPIO_Init+0x2e2>
 80020ba:	bf00      	nop
 80020bc:	10320000 	.word	0x10320000
 80020c0:	10310000 	.word	0x10310000
 80020c4:	10220000 	.word	0x10220000
 80020c8:	10210000 	.word	0x10210000
 80020cc:	10120000 	.word	0x10120000
 80020d0:	10110000 	.word	0x10110000
 80020d4:	40021000 	.word	0x40021000
 80020d8:	40010000 	.word	0x40010000
 80020dc:	40010800 	.word	0x40010800
 80020e0:	40010c00 	.word	0x40010c00
 80020e4:	40011000 	.word	0x40011000
 80020e8:	40011400 	.word	0x40011400
 80020ec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020f0:	4b0b      	ldr	r3, [pc, #44]	; (8002120 <HAL_GPIO_Init+0x304>)
 80020f2:	68da      	ldr	r2, [r3, #12]
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	43db      	mvns	r3, r3
 80020f8:	4909      	ldr	r1, [pc, #36]	; (8002120 <HAL_GPIO_Init+0x304>)
 80020fa:	4013      	ands	r3, r2
 80020fc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80020fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002100:	3301      	adds	r3, #1
 8002102:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210a:	fa22 f303 	lsr.w	r3, r2, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	f47f ae8e 	bne.w	8001e30 <HAL_GPIO_Init+0x14>
  }
}
 8002114:	bf00      	nop
 8002116:	bf00      	nop
 8002118:	372c      	adds	r7, #44	; 0x2c
 800211a:	46bd      	mov	sp, r7
 800211c:	bc80      	pop	{r7}
 800211e:	4770      	bx	lr
 8002120:	40010400 	.word	0x40010400

08002124 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	460b      	mov	r3, r1
 800212e:	807b      	strh	r3, [r7, #2]
 8002130:	4613      	mov	r3, r2
 8002132:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002134:	787b      	ldrb	r3, [r7, #1]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d003      	beq.n	8002142 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800213a:	887a      	ldrh	r2, [r7, #2]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002140:	e003      	b.n	800214a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002142:	887b      	ldrh	r3, [r7, #2]
 8002144:	041a      	lsls	r2, r3, #16
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	611a      	str	r2, [r3, #16]
}
 800214a:	bf00      	nop
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	bc80      	pop	{r7}
 8002152:	4770      	bx	lr

08002154 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e12b      	b.n	80023be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d106      	bne.n	8002180 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f7ff fae6 	bl	800174c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2224      	movs	r2, #36	; 0x24
 8002184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f022 0201 	bic.w	r2, r2, #1
 8002196:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021b8:	f001 fba0 	bl	80038fc <HAL_RCC_GetPCLK1Freq>
 80021bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	4a81      	ldr	r2, [pc, #516]	; (80023c8 <HAL_I2C_Init+0x274>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d807      	bhi.n	80021d8 <HAL_I2C_Init+0x84>
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	4a80      	ldr	r2, [pc, #512]	; (80023cc <HAL_I2C_Init+0x278>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	bf94      	ite	ls
 80021d0:	2301      	movls	r3, #1
 80021d2:	2300      	movhi	r3, #0
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	e006      	b.n	80021e6 <HAL_I2C_Init+0x92>
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	4a7d      	ldr	r2, [pc, #500]	; (80023d0 <HAL_I2C_Init+0x27c>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	bf94      	ite	ls
 80021e0:	2301      	movls	r3, #1
 80021e2:	2300      	movhi	r3, #0
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e0e7      	b.n	80023be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	4a78      	ldr	r2, [pc, #480]	; (80023d4 <HAL_I2C_Init+0x280>)
 80021f2:	fba2 2303 	umull	r2, r3, r2, r3
 80021f6:	0c9b      	lsrs	r3, r3, #18
 80021f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	68ba      	ldr	r2, [r7, #8]
 800220a:	430a      	orrs	r2, r1
 800220c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6a1b      	ldr	r3, [r3, #32]
 8002214:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	4a6a      	ldr	r2, [pc, #424]	; (80023c8 <HAL_I2C_Init+0x274>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d802      	bhi.n	8002228 <HAL_I2C_Init+0xd4>
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	3301      	adds	r3, #1
 8002226:	e009      	b.n	800223c <HAL_I2C_Init+0xe8>
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800222e:	fb02 f303 	mul.w	r3, r2, r3
 8002232:	4a69      	ldr	r2, [pc, #420]	; (80023d8 <HAL_I2C_Init+0x284>)
 8002234:	fba2 2303 	umull	r2, r3, r2, r3
 8002238:	099b      	lsrs	r3, r3, #6
 800223a:	3301      	adds	r3, #1
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	6812      	ldr	r2, [r2, #0]
 8002240:	430b      	orrs	r3, r1
 8002242:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	69db      	ldr	r3, [r3, #28]
 800224a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800224e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	495c      	ldr	r1, [pc, #368]	; (80023c8 <HAL_I2C_Init+0x274>)
 8002258:	428b      	cmp	r3, r1
 800225a:	d819      	bhi.n	8002290 <HAL_I2C_Init+0x13c>
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	1e59      	subs	r1, r3, #1
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	fbb1 f3f3 	udiv	r3, r1, r3
 800226a:	1c59      	adds	r1, r3, #1
 800226c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002270:	400b      	ands	r3, r1
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00a      	beq.n	800228c <HAL_I2C_Init+0x138>
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	1e59      	subs	r1, r3, #1
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	fbb1 f3f3 	udiv	r3, r1, r3
 8002284:	3301      	adds	r3, #1
 8002286:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800228a:	e051      	b.n	8002330 <HAL_I2C_Init+0x1dc>
 800228c:	2304      	movs	r3, #4
 800228e:	e04f      	b.n	8002330 <HAL_I2C_Init+0x1dc>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d111      	bne.n	80022bc <HAL_I2C_Init+0x168>
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	1e58      	subs	r0, r3, #1
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6859      	ldr	r1, [r3, #4]
 80022a0:	460b      	mov	r3, r1
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	440b      	add	r3, r1
 80022a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80022aa:	3301      	adds	r3, #1
 80022ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	bf0c      	ite	eq
 80022b4:	2301      	moveq	r3, #1
 80022b6:	2300      	movne	r3, #0
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	e012      	b.n	80022e2 <HAL_I2C_Init+0x18e>
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	1e58      	subs	r0, r3, #1
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6859      	ldr	r1, [r3, #4]
 80022c4:	460b      	mov	r3, r1
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	440b      	add	r3, r1
 80022ca:	0099      	lsls	r1, r3, #2
 80022cc:	440b      	add	r3, r1
 80022ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80022d2:	3301      	adds	r3, #1
 80022d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022d8:	2b00      	cmp	r3, #0
 80022da:	bf0c      	ite	eq
 80022dc:	2301      	moveq	r3, #1
 80022de:	2300      	movne	r3, #0
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <HAL_I2C_Init+0x196>
 80022e6:	2301      	movs	r3, #1
 80022e8:	e022      	b.n	8002330 <HAL_I2C_Init+0x1dc>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d10e      	bne.n	8002310 <HAL_I2C_Init+0x1bc>
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	1e58      	subs	r0, r3, #1
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6859      	ldr	r1, [r3, #4]
 80022fa:	460b      	mov	r3, r1
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	440b      	add	r3, r1
 8002300:	fbb0 f3f3 	udiv	r3, r0, r3
 8002304:	3301      	adds	r3, #1
 8002306:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800230a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800230e:	e00f      	b.n	8002330 <HAL_I2C_Init+0x1dc>
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	1e58      	subs	r0, r3, #1
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6859      	ldr	r1, [r3, #4]
 8002318:	460b      	mov	r3, r1
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	440b      	add	r3, r1
 800231e:	0099      	lsls	r1, r3, #2
 8002320:	440b      	add	r3, r1
 8002322:	fbb0 f3f3 	udiv	r3, r0, r3
 8002326:	3301      	adds	r3, #1
 8002328:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800232c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002330:	6879      	ldr	r1, [r7, #4]
 8002332:	6809      	ldr	r1, [r1, #0]
 8002334:	4313      	orrs	r3, r2
 8002336:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	69da      	ldr	r2, [r3, #28]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a1b      	ldr	r3, [r3, #32]
 800234a:	431a      	orrs	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	430a      	orrs	r2, r1
 8002352:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800235e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	6911      	ldr	r1, [r2, #16]
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	68d2      	ldr	r2, [r2, #12]
 800236a:	4311      	orrs	r1, r2
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	6812      	ldr	r2, [r2, #0]
 8002370:	430b      	orrs	r3, r1
 8002372:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	695a      	ldr	r2, [r3, #20]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	431a      	orrs	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	430a      	orrs	r2, r1
 800238e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f042 0201 	orr.w	r2, r2, #1
 800239e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2220      	movs	r2, #32
 80023aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	000186a0 	.word	0x000186a0
 80023cc:	001e847f 	.word	0x001e847f
 80023d0:	003d08ff 	.word	0x003d08ff
 80023d4:	431bde83 	.word	0x431bde83
 80023d8:	10624dd3 	.word	0x10624dd3

080023dc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b088      	sub	sp, #32
 80023e0:	af02      	add	r7, sp, #8
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	4608      	mov	r0, r1
 80023e6:	4611      	mov	r1, r2
 80023e8:	461a      	mov	r2, r3
 80023ea:	4603      	mov	r3, r0
 80023ec:	817b      	strh	r3, [r7, #10]
 80023ee:	460b      	mov	r3, r1
 80023f0:	813b      	strh	r3, [r7, #8]
 80023f2:	4613      	mov	r3, r2
 80023f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023f6:	f7ff fbd5 	bl	8001ba4 <HAL_GetTick>
 80023fa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002402:	b2db      	uxtb	r3, r3
 8002404:	2b20      	cmp	r3, #32
 8002406:	f040 80d9 	bne.w	80025bc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	9300      	str	r3, [sp, #0]
 800240e:	2319      	movs	r3, #25
 8002410:	2201      	movs	r2, #1
 8002412:	496d      	ldr	r1, [pc, #436]	; (80025c8 <HAL_I2C_Mem_Write+0x1ec>)
 8002414:	68f8      	ldr	r0, [r7, #12]
 8002416:	f000 fcc1 	bl	8002d9c <I2C_WaitOnFlagUntilTimeout>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002420:	2302      	movs	r3, #2
 8002422:	e0cc      	b.n	80025be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800242a:	2b01      	cmp	r3, #1
 800242c:	d101      	bne.n	8002432 <HAL_I2C_Mem_Write+0x56>
 800242e:	2302      	movs	r3, #2
 8002430:	e0c5      	b.n	80025be <HAL_I2C_Mem_Write+0x1e2>
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	2b01      	cmp	r3, #1
 8002446:	d007      	beq.n	8002458 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f042 0201 	orr.w	r2, r2, #1
 8002456:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002466:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2221      	movs	r2, #33	; 0x21
 800246c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2240      	movs	r2, #64	; 0x40
 8002474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2200      	movs	r2, #0
 800247c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6a3a      	ldr	r2, [r7, #32]
 8002482:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002488:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800248e:	b29a      	uxth	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	4a4d      	ldr	r2, [pc, #308]	; (80025cc <HAL_I2C_Mem_Write+0x1f0>)
 8002498:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800249a:	88f8      	ldrh	r0, [r7, #6]
 800249c:	893a      	ldrh	r2, [r7, #8]
 800249e:	8979      	ldrh	r1, [r7, #10]
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	9301      	str	r3, [sp, #4]
 80024a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a6:	9300      	str	r3, [sp, #0]
 80024a8:	4603      	mov	r3, r0
 80024aa:	68f8      	ldr	r0, [r7, #12]
 80024ac:	f000 faf8 	bl	8002aa0 <I2C_RequestMemoryWrite>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d052      	beq.n	800255c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e081      	b.n	80025be <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f000 fd42 	bl	8002f48 <I2C_WaitOnTXEFlagUntilTimeout>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00d      	beq.n	80024e6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	2b04      	cmp	r3, #4
 80024d0:	d107      	bne.n	80024e2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e06b      	b.n	80025be <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ea:	781a      	ldrb	r2, [r3, #0]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f6:	1c5a      	adds	r2, r3, #1
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002500:	3b01      	subs	r3, #1
 8002502:	b29a      	uxth	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800250c:	b29b      	uxth	r3, r3
 800250e:	3b01      	subs	r3, #1
 8002510:	b29a      	uxth	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	695b      	ldr	r3, [r3, #20]
 800251c:	f003 0304 	and.w	r3, r3, #4
 8002520:	2b04      	cmp	r3, #4
 8002522:	d11b      	bne.n	800255c <HAL_I2C_Mem_Write+0x180>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002528:	2b00      	cmp	r3, #0
 800252a:	d017      	beq.n	800255c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002530:	781a      	ldrb	r2, [r3, #0]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253c:	1c5a      	adds	r2, r3, #1
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002546:	3b01      	subs	r3, #1
 8002548:	b29a      	uxth	r2, r3
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002552:	b29b      	uxth	r3, r3
 8002554:	3b01      	subs	r3, #1
 8002556:	b29a      	uxth	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1aa      	bne.n	80024ba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002564:	697a      	ldr	r2, [r7, #20]
 8002566:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f000 fd2e 	bl	8002fca <I2C_WaitOnBTFFlagUntilTimeout>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00d      	beq.n	8002590 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002578:	2b04      	cmp	r3, #4
 800257a:	d107      	bne.n	800258c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800258a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e016      	b.n	80025be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800259e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2220      	movs	r2, #32
 80025a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025b8:	2300      	movs	r3, #0
 80025ba:	e000      	b.n	80025be <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80025bc:	2302      	movs	r3, #2
  }
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3718      	adds	r7, #24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	00100002 	.word	0x00100002
 80025cc:	ffff0000 	.word	0xffff0000

080025d0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b08c      	sub	sp, #48	; 0x30
 80025d4:	af02      	add	r7, sp, #8
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	4608      	mov	r0, r1
 80025da:	4611      	mov	r1, r2
 80025dc:	461a      	mov	r2, r3
 80025de:	4603      	mov	r3, r0
 80025e0:	817b      	strh	r3, [r7, #10]
 80025e2:	460b      	mov	r3, r1
 80025e4:	813b      	strh	r3, [r7, #8]
 80025e6:	4613      	mov	r3, r2
 80025e8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80025ea:	2300      	movs	r3, #0
 80025ec:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025ee:	f7ff fad9 	bl	8001ba4 <HAL_GetTick>
 80025f2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2b20      	cmp	r3, #32
 80025fe:	f040 8244 	bne.w	8002a8a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002604:	9300      	str	r3, [sp, #0]
 8002606:	2319      	movs	r3, #25
 8002608:	2201      	movs	r2, #1
 800260a:	4982      	ldr	r1, [pc, #520]	; (8002814 <HAL_I2C_Mem_Read+0x244>)
 800260c:	68f8      	ldr	r0, [r7, #12]
 800260e:	f000 fbc5 	bl	8002d9c <I2C_WaitOnFlagUntilTimeout>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002618:	2302      	movs	r3, #2
 800261a:	e237      	b.n	8002a8c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002622:	2b01      	cmp	r3, #1
 8002624:	d101      	bne.n	800262a <HAL_I2C_Mem_Read+0x5a>
 8002626:	2302      	movs	r3, #2
 8002628:	e230      	b.n	8002a8c <HAL_I2C_Mem_Read+0x4bc>
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2201      	movs	r2, #1
 800262e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	2b01      	cmp	r3, #1
 800263e:	d007      	beq.n	8002650 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f042 0201 	orr.w	r2, r2, #1
 800264e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800265e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2222      	movs	r2, #34	; 0x22
 8002664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2240      	movs	r2, #64	; 0x40
 800266c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800267a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002680:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002686:	b29a      	uxth	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	4a62      	ldr	r2, [pc, #392]	; (8002818 <HAL_I2C_Mem_Read+0x248>)
 8002690:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002692:	88f8      	ldrh	r0, [r7, #6]
 8002694:	893a      	ldrh	r2, [r7, #8]
 8002696:	8979      	ldrh	r1, [r7, #10]
 8002698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269a:	9301      	str	r3, [sp, #4]
 800269c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800269e:	9300      	str	r3, [sp, #0]
 80026a0:	4603      	mov	r3, r0
 80026a2:	68f8      	ldr	r0, [r7, #12]
 80026a4:	f000 fa92 	bl	8002bcc <I2C_RequestMemoryRead>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e1ec      	b.n	8002a8c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d113      	bne.n	80026e2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026ba:	2300      	movs	r3, #0
 80026bc:	61fb      	str	r3, [r7, #28]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	695b      	ldr	r3, [r3, #20]
 80026c4:	61fb      	str	r3, [r7, #28]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	61fb      	str	r3, [r7, #28]
 80026ce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	e1c0      	b.n	8002a64 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d11e      	bne.n	8002728 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026f8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80026fa:	b672      	cpsid	i
}
 80026fc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026fe:	2300      	movs	r3, #0
 8002700:	61bb      	str	r3, [r7, #24]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	695b      	ldr	r3, [r3, #20]
 8002708:	61bb      	str	r3, [r7, #24]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	61bb      	str	r3, [r7, #24]
 8002712:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002722:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002724:	b662      	cpsie	i
}
 8002726:	e035      	b.n	8002794 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800272c:	2b02      	cmp	r3, #2
 800272e:	d11e      	bne.n	800276e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800273e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002740:	b672      	cpsid	i
}
 8002742:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002744:	2300      	movs	r3, #0
 8002746:	617b      	str	r3, [r7, #20]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	617b      	str	r3, [r7, #20]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	617b      	str	r3, [r7, #20]
 8002758:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002768:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800276a:	b662      	cpsie	i
}
 800276c:	e012      	b.n	8002794 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800277c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800277e:	2300      	movs	r3, #0
 8002780:	613b      	str	r3, [r7, #16]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	695b      	ldr	r3, [r3, #20]
 8002788:	613b      	str	r3, [r7, #16]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	613b      	str	r3, [r7, #16]
 8002792:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002794:	e166      	b.n	8002a64 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800279a:	2b03      	cmp	r3, #3
 800279c:	f200 811f 	bhi.w	80029de <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d123      	bne.n	80027f0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f000 fc4d 	bl	800304c <I2C_WaitOnRXNEFlagUntilTimeout>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e167      	b.n	8002a8c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	691a      	ldr	r2, [r3, #16]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c6:	b2d2      	uxtb	r2, r2
 80027c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ce:	1c5a      	adds	r2, r3, #1
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d8:	3b01      	subs	r3, #1
 80027da:	b29a      	uxth	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	3b01      	subs	r3, #1
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027ee:	e139      	b.n	8002a64 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d152      	bne.n	800289e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fa:	9300      	str	r3, [sp, #0]
 80027fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027fe:	2200      	movs	r2, #0
 8002800:	4906      	ldr	r1, [pc, #24]	; (800281c <HAL_I2C_Mem_Read+0x24c>)
 8002802:	68f8      	ldr	r0, [r7, #12]
 8002804:	f000 faca 	bl	8002d9c <I2C_WaitOnFlagUntilTimeout>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d008      	beq.n	8002820 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e13c      	b.n	8002a8c <HAL_I2C_Mem_Read+0x4bc>
 8002812:	bf00      	nop
 8002814:	00100002 	.word	0x00100002
 8002818:	ffff0000 	.word	0xffff0000
 800281c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002820:	b672      	cpsid	i
}
 8002822:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002832:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	691a      	ldr	r2, [r3, #16]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002846:	1c5a      	adds	r2, r3, #1
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002850:	3b01      	subs	r3, #1
 8002852:	b29a      	uxth	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800285c:	b29b      	uxth	r3, r3
 800285e:	3b01      	subs	r3, #1
 8002860:	b29a      	uxth	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002866:	b662      	cpsie	i
}
 8002868:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	691a      	ldr	r2, [r3, #16]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002874:	b2d2      	uxtb	r2, r2
 8002876:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287c:	1c5a      	adds	r2, r3, #1
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002886:	3b01      	subs	r3, #1
 8002888:	b29a      	uxth	r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002892:	b29b      	uxth	r3, r3
 8002894:	3b01      	subs	r3, #1
 8002896:	b29a      	uxth	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800289c:	e0e2      	b.n	8002a64 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800289e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a0:	9300      	str	r3, [sp, #0]
 80028a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a4:	2200      	movs	r2, #0
 80028a6:	497b      	ldr	r1, [pc, #492]	; (8002a94 <HAL_I2C_Mem_Read+0x4c4>)
 80028a8:	68f8      	ldr	r0, [r7, #12]
 80028aa:	f000 fa77 	bl	8002d9c <I2C_WaitOnFlagUntilTimeout>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e0e9      	b.n	8002a8c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028c6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80028c8:	b672      	cpsid	i
}
 80028ca:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	691a      	ldr	r2, [r3, #16]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d6:	b2d2      	uxtb	r2, r2
 80028d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028de:	1c5a      	adds	r2, r3, #1
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e8:	3b01      	subs	r3, #1
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	3b01      	subs	r3, #1
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80028fe:	4b66      	ldr	r3, [pc, #408]	; (8002a98 <HAL_I2C_Mem_Read+0x4c8>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	08db      	lsrs	r3, r3, #3
 8002904:	4a65      	ldr	r2, [pc, #404]	; (8002a9c <HAL_I2C_Mem_Read+0x4cc>)
 8002906:	fba2 2303 	umull	r2, r3, r2, r3
 800290a:	0a1a      	lsrs	r2, r3, #8
 800290c:	4613      	mov	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4413      	add	r3, r2
 8002912:	00da      	lsls	r2, r3, #3
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002918:	6a3b      	ldr	r3, [r7, #32]
 800291a:	3b01      	subs	r3, #1
 800291c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800291e:	6a3b      	ldr	r3, [r7, #32]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d118      	bne.n	8002956 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2220      	movs	r2, #32
 800292e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	f043 0220 	orr.w	r2, r3, #32
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002946:	b662      	cpsie	i
}
 8002948:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e09a      	b.n	8002a8c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	695b      	ldr	r3, [r3, #20]
 800295c:	f003 0304 	and.w	r3, r3, #4
 8002960:	2b04      	cmp	r3, #4
 8002962:	d1d9      	bne.n	8002918 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002972:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	691a      	ldr	r2, [r3, #16]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297e:	b2d2      	uxtb	r2, r2
 8002980:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002986:	1c5a      	adds	r2, r3, #1
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002990:	3b01      	subs	r3, #1
 8002992:	b29a      	uxth	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800299c:	b29b      	uxth	r3, r3
 800299e:	3b01      	subs	r3, #1
 80029a0:	b29a      	uxth	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80029a6:	b662      	cpsie	i
}
 80029a8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	691a      	ldr	r2, [r3, #16]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b4:	b2d2      	uxtb	r2, r2
 80029b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029bc:	1c5a      	adds	r2, r3, #1
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c6:	3b01      	subs	r3, #1
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	3b01      	subs	r3, #1
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029dc:	e042      	b.n	8002a64 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80029e2:	68f8      	ldr	r0, [r7, #12]
 80029e4:	f000 fb32 	bl	800304c <I2C_WaitOnRXNEFlagUntilTimeout>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e04c      	b.n	8002a8c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	691a      	ldr	r2, [r3, #16]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fc:	b2d2      	uxtb	r2, r2
 80029fe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a04:	1c5a      	adds	r2, r3, #1
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	f003 0304 	and.w	r3, r3, #4
 8002a2e:	2b04      	cmp	r3, #4
 8002a30:	d118      	bne.n	8002a64 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	691a      	ldr	r2, [r3, #16]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3c:	b2d2      	uxtb	r2, r2
 8002a3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a44:	1c5a      	adds	r2, r3, #1
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	b29a      	uxth	r2, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f47f ae94 	bne.w	8002796 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2220      	movs	r2, #32
 8002a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a86:	2300      	movs	r3, #0
 8002a88:	e000      	b.n	8002a8c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002a8a:	2302      	movs	r3, #2
  }
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3728      	adds	r7, #40	; 0x28
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	00010004 	.word	0x00010004
 8002a98:	20000000 	.word	0x20000000
 8002a9c:	14f8b589 	.word	0x14f8b589

08002aa0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b088      	sub	sp, #32
 8002aa4:	af02      	add	r7, sp, #8
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	4608      	mov	r0, r1
 8002aaa:	4611      	mov	r1, r2
 8002aac:	461a      	mov	r2, r3
 8002aae:	4603      	mov	r3, r0
 8002ab0:	817b      	strh	r3, [r7, #10]
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	813b      	strh	r3, [r7, #8]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ac8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002acc:	9300      	str	r3, [sp, #0]
 8002ace:	6a3b      	ldr	r3, [r7, #32]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ad6:	68f8      	ldr	r0, [r7, #12]
 8002ad8:	f000 f960 	bl	8002d9c <I2C_WaitOnFlagUntilTimeout>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00d      	beq.n	8002afe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002af0:	d103      	bne.n	8002afa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002af8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e05f      	b.n	8002bbe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002afe:	897b      	ldrh	r3, [r7, #10]
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	461a      	mov	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b0c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b10:	6a3a      	ldr	r2, [r7, #32]
 8002b12:	492d      	ldr	r1, [pc, #180]	; (8002bc8 <I2C_RequestMemoryWrite+0x128>)
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f000 f998 	bl	8002e4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e04c      	b.n	8002bbe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b24:	2300      	movs	r3, #0
 8002b26:	617b      	str	r3, [r7, #20]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	617b      	str	r3, [r7, #20]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	617b      	str	r3, [r7, #20]
 8002b38:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b3c:	6a39      	ldr	r1, [r7, #32]
 8002b3e:	68f8      	ldr	r0, [r7, #12]
 8002b40:	f000 fa02 	bl	8002f48 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00d      	beq.n	8002b66 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	2b04      	cmp	r3, #4
 8002b50:	d107      	bne.n	8002b62 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b60:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e02b      	b.n	8002bbe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b66:	88fb      	ldrh	r3, [r7, #6]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d105      	bne.n	8002b78 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b6c:	893b      	ldrh	r3, [r7, #8]
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	611a      	str	r2, [r3, #16]
 8002b76:	e021      	b.n	8002bbc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b78:	893b      	ldrh	r3, [r7, #8]
 8002b7a:	0a1b      	lsrs	r3, r3, #8
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	b2da      	uxtb	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b88:	6a39      	ldr	r1, [r7, #32]
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f000 f9dc 	bl	8002f48 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00d      	beq.n	8002bb2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	2b04      	cmp	r3, #4
 8002b9c:	d107      	bne.n	8002bae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e005      	b.n	8002bbe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bb2:	893b      	ldrh	r3, [r7, #8]
 8002bb4:	b2da      	uxtb	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3718      	adds	r7, #24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	00010002 	.word	0x00010002

08002bcc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b088      	sub	sp, #32
 8002bd0:	af02      	add	r7, sp, #8
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	4608      	mov	r0, r1
 8002bd6:	4611      	mov	r1, r2
 8002bd8:	461a      	mov	r2, r3
 8002bda:	4603      	mov	r3, r0
 8002bdc:	817b      	strh	r3, [r7, #10]
 8002bde:	460b      	mov	r3, r1
 8002be0:	813b      	strh	r3, [r7, #8]
 8002be2:	4613      	mov	r3, r2
 8002be4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002bf4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c04:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c08:	9300      	str	r3, [sp, #0]
 8002c0a:	6a3b      	ldr	r3, [r7, #32]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f000 f8c2 	bl	8002d9c <I2C_WaitOnFlagUntilTimeout>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00d      	beq.n	8002c3a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c2c:	d103      	bne.n	8002c36 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c34:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e0aa      	b.n	8002d90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c3a:	897b      	ldrh	r3, [r7, #10]
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	461a      	mov	r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c48:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4c:	6a3a      	ldr	r2, [r7, #32]
 8002c4e:	4952      	ldr	r1, [pc, #328]	; (8002d98 <I2C_RequestMemoryRead+0x1cc>)
 8002c50:	68f8      	ldr	r0, [r7, #12]
 8002c52:	f000 f8fa 	bl	8002e4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e097      	b.n	8002d90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c60:	2300      	movs	r3, #0
 8002c62:	617b      	str	r3, [r7, #20]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	617b      	str	r3, [r7, #20]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	617b      	str	r3, [r7, #20]
 8002c74:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c78:	6a39      	ldr	r1, [r7, #32]
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f000 f964 	bl	8002f48 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00d      	beq.n	8002ca2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	2b04      	cmp	r3, #4
 8002c8c:	d107      	bne.n	8002c9e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c9c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e076      	b.n	8002d90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ca2:	88fb      	ldrh	r3, [r7, #6]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d105      	bne.n	8002cb4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ca8:	893b      	ldrh	r3, [r7, #8]
 8002caa:	b2da      	uxtb	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	611a      	str	r2, [r3, #16]
 8002cb2:	e021      	b.n	8002cf8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002cb4:	893b      	ldrh	r3, [r7, #8]
 8002cb6:	0a1b      	lsrs	r3, r3, #8
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	b2da      	uxtb	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cc4:	6a39      	ldr	r1, [r7, #32]
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f000 f93e 	bl	8002f48 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00d      	beq.n	8002cee <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd6:	2b04      	cmp	r3, #4
 8002cd8:	d107      	bne.n	8002cea <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ce8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e050      	b.n	8002d90 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002cee:	893b      	ldrh	r3, [r7, #8]
 8002cf0:	b2da      	uxtb	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cfa:	6a39      	ldr	r1, [r7, #32]
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f000 f923 	bl	8002f48 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00d      	beq.n	8002d24 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0c:	2b04      	cmp	r3, #4
 8002d0e:	d107      	bne.n	8002d20 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d1e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e035      	b.n	8002d90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d32:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d36:	9300      	str	r3, [sp, #0]
 8002d38:	6a3b      	ldr	r3, [r7, #32]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f000 f82b 	bl	8002d9c <I2C_WaitOnFlagUntilTimeout>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00d      	beq.n	8002d68 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d5a:	d103      	bne.n	8002d64 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d62:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e013      	b.n	8002d90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002d68:	897b      	ldrh	r3, [r7, #10]
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	f043 0301 	orr.w	r3, r3, #1
 8002d70:	b2da      	uxtb	r2, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7a:	6a3a      	ldr	r2, [r7, #32]
 8002d7c:	4906      	ldr	r1, [pc, #24]	; (8002d98 <I2C_RequestMemoryRead+0x1cc>)
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f000 f863 	bl	8002e4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e000      	b.n	8002d90 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3718      	adds	r7, #24
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	00010002 	.word	0x00010002

08002d9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	603b      	str	r3, [r7, #0]
 8002da8:	4613      	mov	r3, r2
 8002daa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dac:	e025      	b.n	8002dfa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002db4:	d021      	beq.n	8002dfa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002db6:	f7fe fef5 	bl	8001ba4 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	683a      	ldr	r2, [r7, #0]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d302      	bcc.n	8002dcc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d116      	bne.n	8002dfa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2220      	movs	r2, #32
 8002dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	f043 0220 	orr.w	r2, r3, #32
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e023      	b.n	8002e42 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	0c1b      	lsrs	r3, r3, #16
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d10d      	bne.n	8002e20 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	43da      	mvns	r2, r3
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	bf0c      	ite	eq
 8002e16:	2301      	moveq	r3, #1
 8002e18:	2300      	movne	r3, #0
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	e00c      	b.n	8002e3a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	43da      	mvns	r2, r3
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	bf0c      	ite	eq
 8002e32:	2301      	moveq	r3, #1
 8002e34:	2300      	movne	r3, #0
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	461a      	mov	r2, r3
 8002e3a:	79fb      	ldrb	r3, [r7, #7]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d0b6      	beq.n	8002dae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b084      	sub	sp, #16
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	60f8      	str	r0, [r7, #12]
 8002e52:	60b9      	str	r1, [r7, #8]
 8002e54:	607a      	str	r2, [r7, #4]
 8002e56:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e58:	e051      	b.n	8002efe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	695b      	ldr	r3, [r3, #20]
 8002e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e68:	d123      	bne.n	8002eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e78:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e82:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2220      	movs	r2, #32
 8002e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	f043 0204 	orr.w	r2, r3, #4
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e046      	b.n	8002f40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002eb8:	d021      	beq.n	8002efe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eba:	f7fe fe73 	bl	8001ba4 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d302      	bcc.n	8002ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d116      	bne.n	8002efe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2220      	movs	r2, #32
 8002eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eea:	f043 0220 	orr.w	r2, r3, #32
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e020      	b.n	8002f40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	0c1b      	lsrs	r3, r3, #16
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d10c      	bne.n	8002f22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	43da      	mvns	r2, r3
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	4013      	ands	r3, r2
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	bf14      	ite	ne
 8002f1a:	2301      	movne	r3, #1
 8002f1c:	2300      	moveq	r3, #0
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	e00b      	b.n	8002f3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	43da      	mvns	r2, r3
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	bf14      	ite	ne
 8002f34:	2301      	movne	r3, #1
 8002f36:	2300      	moveq	r3, #0
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d18d      	bne.n	8002e5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3710      	adds	r7, #16
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f54:	e02d      	b.n	8002fb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f000 f8ce 	bl	80030f8 <I2C_IsAcknowledgeFailed>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e02d      	b.n	8002fc2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f6c:	d021      	beq.n	8002fb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f6e:	f7fe fe19 	bl	8001ba4 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	68ba      	ldr	r2, [r7, #8]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d302      	bcc.n	8002f84 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d116      	bne.n	8002fb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2200      	movs	r2, #0
 8002f88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2220      	movs	r2, #32
 8002f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	f043 0220 	orr.w	r2, r3, #32
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e007      	b.n	8002fc2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fbc:	2b80      	cmp	r3, #128	; 0x80
 8002fbe:	d1ca      	bne.n	8002f56 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3710      	adds	r7, #16
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b084      	sub	sp, #16
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	60f8      	str	r0, [r7, #12]
 8002fd2:	60b9      	str	r1, [r7, #8]
 8002fd4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fd6:	e02d      	b.n	8003034 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f000 f88d 	bl	80030f8 <I2C_IsAcknowledgeFailed>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e02d      	b.n	8003044 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fee:	d021      	beq.n	8003034 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ff0:	f7fe fdd8 	bl	8001ba4 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	68ba      	ldr	r2, [r7, #8]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d302      	bcc.n	8003006 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d116      	bne.n	8003034 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2220      	movs	r2, #32
 8003010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003020:	f043 0220 	orr.w	r2, r3, #32
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e007      	b.n	8003044 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	f003 0304 	and.w	r3, r3, #4
 800303e:	2b04      	cmp	r3, #4
 8003040:	d1ca      	bne.n	8002fd8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003058:	e042      	b.n	80030e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	f003 0310 	and.w	r3, r3, #16
 8003064:	2b10      	cmp	r3, #16
 8003066:	d119      	bne.n	800309c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f06f 0210 	mvn.w	r2, #16
 8003070:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2220      	movs	r2, #32
 800307c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e029      	b.n	80030f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800309c:	f7fe fd82 	bl	8001ba4 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	68ba      	ldr	r2, [r7, #8]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d302      	bcc.n	80030b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d116      	bne.n	80030e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2220      	movs	r2, #32
 80030bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030cc:	f043 0220 	orr.w	r2, r3, #32
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e007      	b.n	80030f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ea:	2b40      	cmp	r3, #64	; 0x40
 80030ec:	d1b5      	bne.n	800305a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3710      	adds	r7, #16
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800310a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800310e:	d11b      	bne.n	8003148 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003118:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2220      	movs	r2, #32
 8003124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003134:	f043 0204 	orr.w	r2, r3, #4
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e000      	b.n	800314a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	bc80      	pop	{r7}
 8003152:	4770      	bx	lr

08003154 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e26c      	b.n	8003640 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b00      	cmp	r3, #0
 8003170:	f000 8087 	beq.w	8003282 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003174:	4b92      	ldr	r3, [pc, #584]	; (80033c0 <HAL_RCC_OscConfig+0x26c>)
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f003 030c 	and.w	r3, r3, #12
 800317c:	2b04      	cmp	r3, #4
 800317e:	d00c      	beq.n	800319a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003180:	4b8f      	ldr	r3, [pc, #572]	; (80033c0 <HAL_RCC_OscConfig+0x26c>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f003 030c 	and.w	r3, r3, #12
 8003188:	2b08      	cmp	r3, #8
 800318a:	d112      	bne.n	80031b2 <HAL_RCC_OscConfig+0x5e>
 800318c:	4b8c      	ldr	r3, [pc, #560]	; (80033c0 <HAL_RCC_OscConfig+0x26c>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003198:	d10b      	bne.n	80031b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800319a:	4b89      	ldr	r3, [pc, #548]	; (80033c0 <HAL_RCC_OscConfig+0x26c>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d06c      	beq.n	8003280 <HAL_RCC_OscConfig+0x12c>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d168      	bne.n	8003280 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e246      	b.n	8003640 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ba:	d106      	bne.n	80031ca <HAL_RCC_OscConfig+0x76>
 80031bc:	4b80      	ldr	r3, [pc, #512]	; (80033c0 <HAL_RCC_OscConfig+0x26c>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a7f      	ldr	r2, [pc, #508]	; (80033c0 <HAL_RCC_OscConfig+0x26c>)
 80031c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031c6:	6013      	str	r3, [r2, #0]
 80031c8:	e02e      	b.n	8003228 <HAL_RCC_OscConfig+0xd4>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10c      	bne.n	80031ec <HAL_RCC_OscConfig+0x98>
 80031d2:	4b7b      	ldr	r3, [pc, #492]	; (80033c0 <HAL_RCC_OscConfig+0x26c>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a7a      	ldr	r2, [pc, #488]	; (80033c0 <HAL_RCC_OscConfig+0x26c>)
 80031d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031dc:	6013      	str	r3, [r2, #0]
 80031de:	4b78      	ldr	r3, [pc, #480]	; (80033c0 <HAL_RCC_OscConfig+0x26c>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a77      	ldr	r2, [pc, #476]	; (80033c0 <HAL_RCC_OscConfig+0x26c>)
 80031e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031e8:	6013      	str	r3, [r2, #0]
 80031ea:	e01d      	b.n	8003228 <HAL_RCC_OscConfig+0xd4>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031f4:	d10c      	bne.n	8003210 <HAL_RCC_OscConfig+0xbc>
 80031f6:	4b72      	ldr	r3, [pc, #456]	; (80033c0 <HAL_RCC_OscConfig+0x26c>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a71      	ldr	r2, [pc, #452]	; (80033c0 <HAL_RCC_OscConfig+0x26c>)
 80031fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003200:	6013      	str	r3, [r2, #0]
 8003202:	4b6f      	ldr	r3, [pc, #444]	; (80033c0 <HAL_RCC_OscConfig+0x26c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a6e      	ldr	r2, [pc, #440]	; (80033c0 <HAL_RCC_OscConfig+0x26c>)
 8003208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800320c:	6013      	str	r3, [r2, #0]
 800320e:	e00b      	b.n	8003228 <HAL_RCC_OscConfig+0xd4>
 8003210:	4b6b      	ldr	r3, [pc, #428]	; (80033c0 <HAL_RCC_OscConfig+0x26c>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a6a      	ldr	r2, [pc, #424]	; (80033c0 <HAL_RCC_OscConfig+0x26c>)
 8003216:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800321a:	6013      	str	r3, [r2, #0]
 800321c:	4b68      	ldr	r3, [pc, #416]	; (80033c0 <HAL_RCC_OscConfig+0x26c>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a67      	ldr	r2, [pc, #412]	; (80033c0 <HAL_RCC_OscConfig+0x26c>)
 8003222:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003226:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d013      	beq.n	8003258 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003230:	f7fe fcb8 	bl	8001ba4 <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003238:	f7fe fcb4 	bl	8001ba4 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b64      	cmp	r3, #100	; 0x64
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e1fa      	b.n	8003640 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800324a:	4b5d      	ldr	r3, [pc, #372]	; (80033c0 <HAL_RCC_OscConfig+0x26c>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d0f0      	beq.n	8003238 <HAL_RCC_OscConfig+0xe4>
 8003256:	e014      	b.n	8003282 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003258:	f7fe fca4 	bl	8001ba4 <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003260:	f7fe fca0 	bl	8001ba4 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b64      	cmp	r3, #100	; 0x64
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e1e6      	b.n	8003640 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003272:	4b53      	ldr	r3, [pc, #332]	; (80033c0 <HAL_RCC_OscConfig+0x26c>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1f0      	bne.n	8003260 <HAL_RCC_OscConfig+0x10c>
 800327e:	e000      	b.n	8003282 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003280:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d063      	beq.n	8003356 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800328e:	4b4c      	ldr	r3, [pc, #304]	; (80033c0 <HAL_RCC_OscConfig+0x26c>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f003 030c 	and.w	r3, r3, #12
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00b      	beq.n	80032b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800329a:	4b49      	ldr	r3, [pc, #292]	; (80033c0 <HAL_RCC_OscConfig+0x26c>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f003 030c 	and.w	r3, r3, #12
 80032a2:	2b08      	cmp	r3, #8
 80032a4:	d11c      	bne.n	80032e0 <HAL_RCC_OscConfig+0x18c>
 80032a6:	4b46      	ldr	r3, [pc, #280]	; (80033c0 <HAL_RCC_OscConfig+0x26c>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d116      	bne.n	80032e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032b2:	4b43      	ldr	r3, [pc, #268]	; (80033c0 <HAL_RCC_OscConfig+0x26c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d005      	beq.n	80032ca <HAL_RCC_OscConfig+0x176>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d001      	beq.n	80032ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e1ba      	b.n	8003640 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ca:	4b3d      	ldr	r3, [pc, #244]	; (80033c0 <HAL_RCC_OscConfig+0x26c>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	4939      	ldr	r1, [pc, #228]	; (80033c0 <HAL_RCC_OscConfig+0x26c>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032de:	e03a      	b.n	8003356 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d020      	beq.n	800332a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032e8:	4b36      	ldr	r3, [pc, #216]	; (80033c4 <HAL_RCC_OscConfig+0x270>)
 80032ea:	2201      	movs	r2, #1
 80032ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ee:	f7fe fc59 	bl	8001ba4 <HAL_GetTick>
 80032f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032f4:	e008      	b.n	8003308 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032f6:	f7fe fc55 	bl	8001ba4 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d901      	bls.n	8003308 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e19b      	b.n	8003640 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003308:	4b2d      	ldr	r3, [pc, #180]	; (80033c0 <HAL_RCC_OscConfig+0x26c>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d0f0      	beq.n	80032f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003314:	4b2a      	ldr	r3, [pc, #168]	; (80033c0 <HAL_RCC_OscConfig+0x26c>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	695b      	ldr	r3, [r3, #20]
 8003320:	00db      	lsls	r3, r3, #3
 8003322:	4927      	ldr	r1, [pc, #156]	; (80033c0 <HAL_RCC_OscConfig+0x26c>)
 8003324:	4313      	orrs	r3, r2
 8003326:	600b      	str	r3, [r1, #0]
 8003328:	e015      	b.n	8003356 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800332a:	4b26      	ldr	r3, [pc, #152]	; (80033c4 <HAL_RCC_OscConfig+0x270>)
 800332c:	2200      	movs	r2, #0
 800332e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003330:	f7fe fc38 	bl	8001ba4 <HAL_GetTick>
 8003334:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003336:	e008      	b.n	800334a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003338:	f7fe fc34 	bl	8001ba4 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e17a      	b.n	8003640 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800334a:	4b1d      	ldr	r3, [pc, #116]	; (80033c0 <HAL_RCC_OscConfig+0x26c>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1f0      	bne.n	8003338 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0308 	and.w	r3, r3, #8
 800335e:	2b00      	cmp	r3, #0
 8003360:	d03a      	beq.n	80033d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d019      	beq.n	800339e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800336a:	4b17      	ldr	r3, [pc, #92]	; (80033c8 <HAL_RCC_OscConfig+0x274>)
 800336c:	2201      	movs	r2, #1
 800336e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003370:	f7fe fc18 	bl	8001ba4 <HAL_GetTick>
 8003374:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003376:	e008      	b.n	800338a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003378:	f7fe fc14 	bl	8001ba4 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b02      	cmp	r3, #2
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e15a      	b.n	8003640 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800338a:	4b0d      	ldr	r3, [pc, #52]	; (80033c0 <HAL_RCC_OscConfig+0x26c>)
 800338c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d0f0      	beq.n	8003378 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003396:	2001      	movs	r0, #1
 8003398:	f000 fac4 	bl	8003924 <RCC_Delay>
 800339c:	e01c      	b.n	80033d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800339e:	4b0a      	ldr	r3, [pc, #40]	; (80033c8 <HAL_RCC_OscConfig+0x274>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033a4:	f7fe fbfe 	bl	8001ba4 <HAL_GetTick>
 80033a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033aa:	e00f      	b.n	80033cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033ac:	f7fe fbfa 	bl	8001ba4 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d908      	bls.n	80033cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e140      	b.n	8003640 <HAL_RCC_OscConfig+0x4ec>
 80033be:	bf00      	nop
 80033c0:	40021000 	.word	0x40021000
 80033c4:	42420000 	.word	0x42420000
 80033c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033cc:	4b9e      	ldr	r3, [pc, #632]	; (8003648 <HAL_RCC_OscConfig+0x4f4>)
 80033ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d0:	f003 0302 	and.w	r3, r3, #2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d1e9      	bne.n	80033ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0304 	and.w	r3, r3, #4
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f000 80a6 	beq.w	8003532 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033e6:	2300      	movs	r3, #0
 80033e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033ea:	4b97      	ldr	r3, [pc, #604]	; (8003648 <HAL_RCC_OscConfig+0x4f4>)
 80033ec:	69db      	ldr	r3, [r3, #28]
 80033ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d10d      	bne.n	8003412 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033f6:	4b94      	ldr	r3, [pc, #592]	; (8003648 <HAL_RCC_OscConfig+0x4f4>)
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	4a93      	ldr	r2, [pc, #588]	; (8003648 <HAL_RCC_OscConfig+0x4f4>)
 80033fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003400:	61d3      	str	r3, [r2, #28]
 8003402:	4b91      	ldr	r3, [pc, #580]	; (8003648 <HAL_RCC_OscConfig+0x4f4>)
 8003404:	69db      	ldr	r3, [r3, #28]
 8003406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800340a:	60bb      	str	r3, [r7, #8]
 800340c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800340e:	2301      	movs	r3, #1
 8003410:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003412:	4b8e      	ldr	r3, [pc, #568]	; (800364c <HAL_RCC_OscConfig+0x4f8>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800341a:	2b00      	cmp	r3, #0
 800341c:	d118      	bne.n	8003450 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800341e:	4b8b      	ldr	r3, [pc, #556]	; (800364c <HAL_RCC_OscConfig+0x4f8>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a8a      	ldr	r2, [pc, #552]	; (800364c <HAL_RCC_OscConfig+0x4f8>)
 8003424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003428:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800342a:	f7fe fbbb 	bl	8001ba4 <HAL_GetTick>
 800342e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003430:	e008      	b.n	8003444 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003432:	f7fe fbb7 	bl	8001ba4 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b64      	cmp	r3, #100	; 0x64
 800343e:	d901      	bls.n	8003444 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e0fd      	b.n	8003640 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003444:	4b81      	ldr	r3, [pc, #516]	; (800364c <HAL_RCC_OscConfig+0x4f8>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800344c:	2b00      	cmp	r3, #0
 800344e:	d0f0      	beq.n	8003432 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d106      	bne.n	8003466 <HAL_RCC_OscConfig+0x312>
 8003458:	4b7b      	ldr	r3, [pc, #492]	; (8003648 <HAL_RCC_OscConfig+0x4f4>)
 800345a:	6a1b      	ldr	r3, [r3, #32]
 800345c:	4a7a      	ldr	r2, [pc, #488]	; (8003648 <HAL_RCC_OscConfig+0x4f4>)
 800345e:	f043 0301 	orr.w	r3, r3, #1
 8003462:	6213      	str	r3, [r2, #32]
 8003464:	e02d      	b.n	80034c2 <HAL_RCC_OscConfig+0x36e>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10c      	bne.n	8003488 <HAL_RCC_OscConfig+0x334>
 800346e:	4b76      	ldr	r3, [pc, #472]	; (8003648 <HAL_RCC_OscConfig+0x4f4>)
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	4a75      	ldr	r2, [pc, #468]	; (8003648 <HAL_RCC_OscConfig+0x4f4>)
 8003474:	f023 0301 	bic.w	r3, r3, #1
 8003478:	6213      	str	r3, [r2, #32]
 800347a:	4b73      	ldr	r3, [pc, #460]	; (8003648 <HAL_RCC_OscConfig+0x4f4>)
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	4a72      	ldr	r2, [pc, #456]	; (8003648 <HAL_RCC_OscConfig+0x4f4>)
 8003480:	f023 0304 	bic.w	r3, r3, #4
 8003484:	6213      	str	r3, [r2, #32]
 8003486:	e01c      	b.n	80034c2 <HAL_RCC_OscConfig+0x36e>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	2b05      	cmp	r3, #5
 800348e:	d10c      	bne.n	80034aa <HAL_RCC_OscConfig+0x356>
 8003490:	4b6d      	ldr	r3, [pc, #436]	; (8003648 <HAL_RCC_OscConfig+0x4f4>)
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	4a6c      	ldr	r2, [pc, #432]	; (8003648 <HAL_RCC_OscConfig+0x4f4>)
 8003496:	f043 0304 	orr.w	r3, r3, #4
 800349a:	6213      	str	r3, [r2, #32]
 800349c:	4b6a      	ldr	r3, [pc, #424]	; (8003648 <HAL_RCC_OscConfig+0x4f4>)
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	4a69      	ldr	r2, [pc, #420]	; (8003648 <HAL_RCC_OscConfig+0x4f4>)
 80034a2:	f043 0301 	orr.w	r3, r3, #1
 80034a6:	6213      	str	r3, [r2, #32]
 80034a8:	e00b      	b.n	80034c2 <HAL_RCC_OscConfig+0x36e>
 80034aa:	4b67      	ldr	r3, [pc, #412]	; (8003648 <HAL_RCC_OscConfig+0x4f4>)
 80034ac:	6a1b      	ldr	r3, [r3, #32]
 80034ae:	4a66      	ldr	r2, [pc, #408]	; (8003648 <HAL_RCC_OscConfig+0x4f4>)
 80034b0:	f023 0301 	bic.w	r3, r3, #1
 80034b4:	6213      	str	r3, [r2, #32]
 80034b6:	4b64      	ldr	r3, [pc, #400]	; (8003648 <HAL_RCC_OscConfig+0x4f4>)
 80034b8:	6a1b      	ldr	r3, [r3, #32]
 80034ba:	4a63      	ldr	r2, [pc, #396]	; (8003648 <HAL_RCC_OscConfig+0x4f4>)
 80034bc:	f023 0304 	bic.w	r3, r3, #4
 80034c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d015      	beq.n	80034f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ca:	f7fe fb6b 	bl	8001ba4 <HAL_GetTick>
 80034ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034d0:	e00a      	b.n	80034e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034d2:	f7fe fb67 	bl	8001ba4 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d901      	bls.n	80034e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e0ab      	b.n	8003640 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034e8:	4b57      	ldr	r3, [pc, #348]	; (8003648 <HAL_RCC_OscConfig+0x4f4>)
 80034ea:	6a1b      	ldr	r3, [r3, #32]
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d0ee      	beq.n	80034d2 <HAL_RCC_OscConfig+0x37e>
 80034f4:	e014      	b.n	8003520 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034f6:	f7fe fb55 	bl	8001ba4 <HAL_GetTick>
 80034fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034fc:	e00a      	b.n	8003514 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034fe:	f7fe fb51 	bl	8001ba4 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	f241 3288 	movw	r2, #5000	; 0x1388
 800350c:	4293      	cmp	r3, r2
 800350e:	d901      	bls.n	8003514 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e095      	b.n	8003640 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003514:	4b4c      	ldr	r3, [pc, #304]	; (8003648 <HAL_RCC_OscConfig+0x4f4>)
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	f003 0302 	and.w	r3, r3, #2
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1ee      	bne.n	80034fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003520:	7dfb      	ldrb	r3, [r7, #23]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d105      	bne.n	8003532 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003526:	4b48      	ldr	r3, [pc, #288]	; (8003648 <HAL_RCC_OscConfig+0x4f4>)
 8003528:	69db      	ldr	r3, [r3, #28]
 800352a:	4a47      	ldr	r2, [pc, #284]	; (8003648 <HAL_RCC_OscConfig+0x4f4>)
 800352c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003530:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	2b00      	cmp	r3, #0
 8003538:	f000 8081 	beq.w	800363e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800353c:	4b42      	ldr	r3, [pc, #264]	; (8003648 <HAL_RCC_OscConfig+0x4f4>)
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f003 030c 	and.w	r3, r3, #12
 8003544:	2b08      	cmp	r3, #8
 8003546:	d061      	beq.n	800360c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	69db      	ldr	r3, [r3, #28]
 800354c:	2b02      	cmp	r3, #2
 800354e:	d146      	bne.n	80035de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003550:	4b3f      	ldr	r3, [pc, #252]	; (8003650 <HAL_RCC_OscConfig+0x4fc>)
 8003552:	2200      	movs	r2, #0
 8003554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003556:	f7fe fb25 	bl	8001ba4 <HAL_GetTick>
 800355a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800355c:	e008      	b.n	8003570 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800355e:	f7fe fb21 	bl	8001ba4 <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	2b02      	cmp	r3, #2
 800356a:	d901      	bls.n	8003570 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e067      	b.n	8003640 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003570:	4b35      	ldr	r3, [pc, #212]	; (8003648 <HAL_RCC_OscConfig+0x4f4>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1f0      	bne.n	800355e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003584:	d108      	bne.n	8003598 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003586:	4b30      	ldr	r3, [pc, #192]	; (8003648 <HAL_RCC_OscConfig+0x4f4>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	492d      	ldr	r1, [pc, #180]	; (8003648 <HAL_RCC_OscConfig+0x4f4>)
 8003594:	4313      	orrs	r3, r2
 8003596:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003598:	4b2b      	ldr	r3, [pc, #172]	; (8003648 <HAL_RCC_OscConfig+0x4f4>)
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a19      	ldr	r1, [r3, #32]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a8:	430b      	orrs	r3, r1
 80035aa:	4927      	ldr	r1, [pc, #156]	; (8003648 <HAL_RCC_OscConfig+0x4f4>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035b0:	4b27      	ldr	r3, [pc, #156]	; (8003650 <HAL_RCC_OscConfig+0x4fc>)
 80035b2:	2201      	movs	r2, #1
 80035b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b6:	f7fe faf5 	bl	8001ba4 <HAL_GetTick>
 80035ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035bc:	e008      	b.n	80035d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035be:	f7fe faf1 	bl	8001ba4 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d901      	bls.n	80035d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e037      	b.n	8003640 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035d0:	4b1d      	ldr	r3, [pc, #116]	; (8003648 <HAL_RCC_OscConfig+0x4f4>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d0f0      	beq.n	80035be <HAL_RCC_OscConfig+0x46a>
 80035dc:	e02f      	b.n	800363e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035de:	4b1c      	ldr	r3, [pc, #112]	; (8003650 <HAL_RCC_OscConfig+0x4fc>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e4:	f7fe fade 	bl	8001ba4 <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ec:	f7fe fada 	bl	8001ba4 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e020      	b.n	8003640 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035fe:	4b12      	ldr	r3, [pc, #72]	; (8003648 <HAL_RCC_OscConfig+0x4f4>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1f0      	bne.n	80035ec <HAL_RCC_OscConfig+0x498>
 800360a:	e018      	b.n	800363e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	69db      	ldr	r3, [r3, #28]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d101      	bne.n	8003618 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e013      	b.n	8003640 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003618:	4b0b      	ldr	r3, [pc, #44]	; (8003648 <HAL_RCC_OscConfig+0x4f4>)
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	429a      	cmp	r2, r3
 800362a:	d106      	bne.n	800363a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003636:	429a      	cmp	r2, r3
 8003638:	d001      	beq.n	800363e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e000      	b.n	8003640 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3718      	adds	r7, #24
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	40021000 	.word	0x40021000
 800364c:	40007000 	.word	0x40007000
 8003650:	42420060 	.word	0x42420060

08003654 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d101      	bne.n	8003668 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e0d0      	b.n	800380a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003668:	4b6a      	ldr	r3, [pc, #424]	; (8003814 <HAL_RCC_ClockConfig+0x1c0>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0307 	and.w	r3, r3, #7
 8003670:	683a      	ldr	r2, [r7, #0]
 8003672:	429a      	cmp	r2, r3
 8003674:	d910      	bls.n	8003698 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003676:	4b67      	ldr	r3, [pc, #412]	; (8003814 <HAL_RCC_ClockConfig+0x1c0>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f023 0207 	bic.w	r2, r3, #7
 800367e:	4965      	ldr	r1, [pc, #404]	; (8003814 <HAL_RCC_ClockConfig+0x1c0>)
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	4313      	orrs	r3, r2
 8003684:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003686:	4b63      	ldr	r3, [pc, #396]	; (8003814 <HAL_RCC_ClockConfig+0x1c0>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0307 	and.w	r3, r3, #7
 800368e:	683a      	ldr	r2, [r7, #0]
 8003690:	429a      	cmp	r2, r3
 8003692:	d001      	beq.n	8003698 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e0b8      	b.n	800380a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d020      	beq.n	80036e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0304 	and.w	r3, r3, #4
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d005      	beq.n	80036bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036b0:	4b59      	ldr	r3, [pc, #356]	; (8003818 <HAL_RCC_ClockConfig+0x1c4>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	4a58      	ldr	r2, [pc, #352]	; (8003818 <HAL_RCC_ClockConfig+0x1c4>)
 80036b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80036ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0308 	and.w	r3, r3, #8
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d005      	beq.n	80036d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036c8:	4b53      	ldr	r3, [pc, #332]	; (8003818 <HAL_RCC_ClockConfig+0x1c4>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	4a52      	ldr	r2, [pc, #328]	; (8003818 <HAL_RCC_ClockConfig+0x1c4>)
 80036ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80036d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036d4:	4b50      	ldr	r3, [pc, #320]	; (8003818 <HAL_RCC_ClockConfig+0x1c4>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	494d      	ldr	r1, [pc, #308]	; (8003818 <HAL_RCC_ClockConfig+0x1c4>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d040      	beq.n	8003774 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d107      	bne.n	800370a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036fa:	4b47      	ldr	r3, [pc, #284]	; (8003818 <HAL_RCC_ClockConfig+0x1c4>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d115      	bne.n	8003732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e07f      	b.n	800380a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	2b02      	cmp	r3, #2
 8003710:	d107      	bne.n	8003722 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003712:	4b41      	ldr	r3, [pc, #260]	; (8003818 <HAL_RCC_ClockConfig+0x1c4>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d109      	bne.n	8003732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e073      	b.n	800380a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003722:	4b3d      	ldr	r3, [pc, #244]	; (8003818 <HAL_RCC_ClockConfig+0x1c4>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e06b      	b.n	800380a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003732:	4b39      	ldr	r3, [pc, #228]	; (8003818 <HAL_RCC_ClockConfig+0x1c4>)
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f023 0203 	bic.w	r2, r3, #3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	4936      	ldr	r1, [pc, #216]	; (8003818 <HAL_RCC_ClockConfig+0x1c4>)
 8003740:	4313      	orrs	r3, r2
 8003742:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003744:	f7fe fa2e 	bl	8001ba4 <HAL_GetTick>
 8003748:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800374a:	e00a      	b.n	8003762 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800374c:	f7fe fa2a 	bl	8001ba4 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	f241 3288 	movw	r2, #5000	; 0x1388
 800375a:	4293      	cmp	r3, r2
 800375c:	d901      	bls.n	8003762 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e053      	b.n	800380a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003762:	4b2d      	ldr	r3, [pc, #180]	; (8003818 <HAL_RCC_ClockConfig+0x1c4>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f003 020c 	and.w	r2, r3, #12
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	429a      	cmp	r2, r3
 8003772:	d1eb      	bne.n	800374c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003774:	4b27      	ldr	r3, [pc, #156]	; (8003814 <HAL_RCC_ClockConfig+0x1c0>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0307 	and.w	r3, r3, #7
 800377c:	683a      	ldr	r2, [r7, #0]
 800377e:	429a      	cmp	r2, r3
 8003780:	d210      	bcs.n	80037a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003782:	4b24      	ldr	r3, [pc, #144]	; (8003814 <HAL_RCC_ClockConfig+0x1c0>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f023 0207 	bic.w	r2, r3, #7
 800378a:	4922      	ldr	r1, [pc, #136]	; (8003814 <HAL_RCC_ClockConfig+0x1c0>)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	4313      	orrs	r3, r2
 8003790:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003792:	4b20      	ldr	r3, [pc, #128]	; (8003814 <HAL_RCC_ClockConfig+0x1c0>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0307 	and.w	r3, r3, #7
 800379a:	683a      	ldr	r2, [r7, #0]
 800379c:	429a      	cmp	r2, r3
 800379e:	d001      	beq.n	80037a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e032      	b.n	800380a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0304 	and.w	r3, r3, #4
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d008      	beq.n	80037c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037b0:	4b19      	ldr	r3, [pc, #100]	; (8003818 <HAL_RCC_ClockConfig+0x1c4>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	4916      	ldr	r1, [pc, #88]	; (8003818 <HAL_RCC_ClockConfig+0x1c4>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0308 	and.w	r3, r3, #8
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d009      	beq.n	80037e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80037ce:	4b12      	ldr	r3, [pc, #72]	; (8003818 <HAL_RCC_ClockConfig+0x1c4>)
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	490e      	ldr	r1, [pc, #56]	; (8003818 <HAL_RCC_ClockConfig+0x1c4>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037e2:	f000 f821 	bl	8003828 <HAL_RCC_GetSysClockFreq>
 80037e6:	4602      	mov	r2, r0
 80037e8:	4b0b      	ldr	r3, [pc, #44]	; (8003818 <HAL_RCC_ClockConfig+0x1c4>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	091b      	lsrs	r3, r3, #4
 80037ee:	f003 030f 	and.w	r3, r3, #15
 80037f2:	490a      	ldr	r1, [pc, #40]	; (800381c <HAL_RCC_ClockConfig+0x1c8>)
 80037f4:	5ccb      	ldrb	r3, [r1, r3]
 80037f6:	fa22 f303 	lsr.w	r3, r2, r3
 80037fa:	4a09      	ldr	r2, [pc, #36]	; (8003820 <HAL_RCC_ClockConfig+0x1cc>)
 80037fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80037fe:	4b09      	ldr	r3, [pc, #36]	; (8003824 <HAL_RCC_ClockConfig+0x1d0>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4618      	mov	r0, r3
 8003804:	f7fe f98c 	bl	8001b20 <HAL_InitTick>

  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3710      	adds	r7, #16
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	40022000 	.word	0x40022000
 8003818:	40021000 	.word	0x40021000
 800381c:	08009678 	.word	0x08009678
 8003820:	20000000 	.word	0x20000000
 8003824:	20000004 	.word	0x20000004

08003828 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003828:	b490      	push	{r4, r7}
 800382a:	b08a      	sub	sp, #40	; 0x28
 800382c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800382e:	4b2a      	ldr	r3, [pc, #168]	; (80038d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003830:	1d3c      	adds	r4, r7, #4
 8003832:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003834:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003838:	f240 2301 	movw	r3, #513	; 0x201
 800383c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800383e:	2300      	movs	r3, #0
 8003840:	61fb      	str	r3, [r7, #28]
 8003842:	2300      	movs	r3, #0
 8003844:	61bb      	str	r3, [r7, #24]
 8003846:	2300      	movs	r3, #0
 8003848:	627b      	str	r3, [r7, #36]	; 0x24
 800384a:	2300      	movs	r3, #0
 800384c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800384e:	2300      	movs	r3, #0
 8003850:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003852:	4b22      	ldr	r3, [pc, #136]	; (80038dc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	f003 030c 	and.w	r3, r3, #12
 800385e:	2b04      	cmp	r3, #4
 8003860:	d002      	beq.n	8003868 <HAL_RCC_GetSysClockFreq+0x40>
 8003862:	2b08      	cmp	r3, #8
 8003864:	d003      	beq.n	800386e <HAL_RCC_GetSysClockFreq+0x46>
 8003866:	e02d      	b.n	80038c4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003868:	4b1d      	ldr	r3, [pc, #116]	; (80038e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800386a:	623b      	str	r3, [r7, #32]
      break;
 800386c:	e02d      	b.n	80038ca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	0c9b      	lsrs	r3, r3, #18
 8003872:	f003 030f 	and.w	r3, r3, #15
 8003876:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800387a:	4413      	add	r3, r2
 800387c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003880:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d013      	beq.n	80038b4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800388c:	4b13      	ldr	r3, [pc, #76]	; (80038dc <HAL_RCC_GetSysClockFreq+0xb4>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	0c5b      	lsrs	r3, r3, #17
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800389a:	4413      	add	r3, r2
 800389c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80038a0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	4a0e      	ldr	r2, [pc, #56]	; (80038e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038a6:	fb02 f203 	mul.w	r2, r2, r3
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b0:	627b      	str	r3, [r7, #36]	; 0x24
 80038b2:	e004      	b.n	80038be <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	4a0b      	ldr	r2, [pc, #44]	; (80038e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80038b8:	fb02 f303 	mul.w	r3, r2, r3
 80038bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80038be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c0:	623b      	str	r3, [r7, #32]
      break;
 80038c2:	e002      	b.n	80038ca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80038c4:	4b06      	ldr	r3, [pc, #24]	; (80038e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038c6:	623b      	str	r3, [r7, #32]
      break;
 80038c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038ca:	6a3b      	ldr	r3, [r7, #32]
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3728      	adds	r7, #40	; 0x28
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bc90      	pop	{r4, r7}
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	080095f8 	.word	0x080095f8
 80038dc:	40021000 	.word	0x40021000
 80038e0:	007a1200 	.word	0x007a1200
 80038e4:	003d0900 	.word	0x003d0900

080038e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038ec:	4b02      	ldr	r3, [pc, #8]	; (80038f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80038ee:	681b      	ldr	r3, [r3, #0]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bc80      	pop	{r7}
 80038f6:	4770      	bx	lr
 80038f8:	20000000 	.word	0x20000000

080038fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003900:	f7ff fff2 	bl	80038e8 <HAL_RCC_GetHCLKFreq>
 8003904:	4602      	mov	r2, r0
 8003906:	4b05      	ldr	r3, [pc, #20]	; (800391c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	0a1b      	lsrs	r3, r3, #8
 800390c:	f003 0307 	and.w	r3, r3, #7
 8003910:	4903      	ldr	r1, [pc, #12]	; (8003920 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003912:	5ccb      	ldrb	r3, [r1, r3]
 8003914:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003918:	4618      	mov	r0, r3
 800391a:	bd80      	pop	{r7, pc}
 800391c:	40021000 	.word	0x40021000
 8003920:	08009688 	.word	0x08009688

08003924 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800392c:	4b0a      	ldr	r3, [pc, #40]	; (8003958 <RCC_Delay+0x34>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a0a      	ldr	r2, [pc, #40]	; (800395c <RCC_Delay+0x38>)
 8003932:	fba2 2303 	umull	r2, r3, r2, r3
 8003936:	0a5b      	lsrs	r3, r3, #9
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	fb02 f303 	mul.w	r3, r2, r3
 800393e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003940:	bf00      	nop
  }
  while (Delay --);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	1e5a      	subs	r2, r3, #1
 8003946:	60fa      	str	r2, [r7, #12]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1f9      	bne.n	8003940 <RCC_Delay+0x1c>
}
 800394c:	bf00      	nop
 800394e:	bf00      	nop
 8003950:	3714      	adds	r7, #20
 8003952:	46bd      	mov	sp, r7
 8003954:	bc80      	pop	{r7}
 8003956:	4770      	bx	lr
 8003958:	20000000 	.word	0x20000000
 800395c:	10624dd3 	.word	0x10624dd3

08003960 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e041      	b.n	80039f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d106      	bne.n	800398c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f7fd ff4c 	bl	8001824 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2202      	movs	r2, #2
 8003990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	3304      	adds	r3, #4
 800399c:	4619      	mov	r1, r3
 800399e:	4610      	mov	r0, r2
 80039a0:	f000 fa9e 	bl	8003ee0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3708      	adds	r7, #8
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
	...

08003a00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b085      	sub	sp, #20
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d001      	beq.n	8003a18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e03a      	b.n	8003a8e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68da      	ldr	r2, [r3, #12]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f042 0201 	orr.w	r2, r2, #1
 8003a2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a18      	ldr	r2, [pc, #96]	; (8003a98 <HAL_TIM_Base_Start_IT+0x98>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d00e      	beq.n	8003a58 <HAL_TIM_Base_Start_IT+0x58>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a42:	d009      	beq.n	8003a58 <HAL_TIM_Base_Start_IT+0x58>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a14      	ldr	r2, [pc, #80]	; (8003a9c <HAL_TIM_Base_Start_IT+0x9c>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d004      	beq.n	8003a58 <HAL_TIM_Base_Start_IT+0x58>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a13      	ldr	r2, [pc, #76]	; (8003aa0 <HAL_TIM_Base_Start_IT+0xa0>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d111      	bne.n	8003a7c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f003 0307 	and.w	r3, r3, #7
 8003a62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2b06      	cmp	r3, #6
 8003a68:	d010      	beq.n	8003a8c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f042 0201 	orr.w	r2, r2, #1
 8003a78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a7a:	e007      	b.n	8003a8c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f042 0201 	orr.w	r2, r2, #1
 8003a8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3714      	adds	r7, #20
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bc80      	pop	{r7}
 8003a96:	4770      	bx	lr
 8003a98:	40012c00 	.word	0x40012c00
 8003a9c:	40000400 	.word	0x40000400
 8003aa0:	40000800 	.word	0x40000800

08003aa4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68da      	ldr	r2, [r3, #12]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 0201 	bic.w	r2, r2, #1
 8003aba:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6a1a      	ldr	r2, [r3, #32]
 8003ac2:	f241 1311 	movw	r3, #4369	; 0x1111
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d10f      	bne.n	8003aec <HAL_TIM_Base_Stop_IT+0x48>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	6a1a      	ldr	r2, [r3, #32]
 8003ad2:	f240 4344 	movw	r3, #1092	; 0x444
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d107      	bne.n	8003aec <HAL_TIM_Base_Stop_IT+0x48>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f022 0201 	bic.w	r2, r2, #1
 8003aea:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	370c      	adds	r7, #12
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bc80      	pop	{r7}
 8003afe:	4770      	bx	lr

08003b00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d122      	bne.n	8003b5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	f003 0302 	and.w	r3, r3, #2
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d11b      	bne.n	8003b5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f06f 0202 	mvn.w	r2, #2
 8003b2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2201      	movs	r2, #1
 8003b32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	f003 0303 	and.w	r3, r3, #3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d003      	beq.n	8003b4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 f9b1 	bl	8003eaa <HAL_TIM_IC_CaptureCallback>
 8003b48:	e005      	b.n	8003b56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 f9a4 	bl	8003e98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 f9b3 	bl	8003ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	f003 0304 	and.w	r3, r3, #4
 8003b66:	2b04      	cmp	r3, #4
 8003b68:	d122      	bne.n	8003bb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	f003 0304 	and.w	r3, r3, #4
 8003b74:	2b04      	cmp	r3, #4
 8003b76:	d11b      	bne.n	8003bb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f06f 0204 	mvn.w	r2, #4
 8003b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2202      	movs	r2, #2
 8003b86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d003      	beq.n	8003b9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 f987 	bl	8003eaa <HAL_TIM_IC_CaptureCallback>
 8003b9c:	e005      	b.n	8003baa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 f97a 	bl	8003e98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 f989 	bl	8003ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	f003 0308 	and.w	r3, r3, #8
 8003bba:	2b08      	cmp	r3, #8
 8003bbc:	d122      	bne.n	8003c04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	f003 0308 	and.w	r3, r3, #8
 8003bc8:	2b08      	cmp	r3, #8
 8003bca:	d11b      	bne.n	8003c04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f06f 0208 	mvn.w	r2, #8
 8003bd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2204      	movs	r2, #4
 8003bda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	69db      	ldr	r3, [r3, #28]
 8003be2:	f003 0303 	and.w	r3, r3, #3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d003      	beq.n	8003bf2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 f95d 	bl	8003eaa <HAL_TIM_IC_CaptureCallback>
 8003bf0:	e005      	b.n	8003bfe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 f950 	bl	8003e98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 f95f 	bl	8003ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	f003 0310 	and.w	r3, r3, #16
 8003c0e:	2b10      	cmp	r3, #16
 8003c10:	d122      	bne.n	8003c58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	f003 0310 	and.w	r3, r3, #16
 8003c1c:	2b10      	cmp	r3, #16
 8003c1e:	d11b      	bne.n	8003c58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f06f 0210 	mvn.w	r2, #16
 8003c28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2208      	movs	r2, #8
 8003c2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	69db      	ldr	r3, [r3, #28]
 8003c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d003      	beq.n	8003c46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 f933 	bl	8003eaa <HAL_TIM_IC_CaptureCallback>
 8003c44:	e005      	b.n	8003c52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 f926 	bl	8003e98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f000 f935 	bl	8003ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	f003 0301 	and.w	r3, r3, #1
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d10e      	bne.n	8003c84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	f003 0301 	and.w	r3, r3, #1
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d107      	bne.n	8003c84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f06f 0201 	mvn.w	r2, #1
 8003c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f7fd fa46 	bl	8001110 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c8e:	2b80      	cmp	r3, #128	; 0x80
 8003c90:	d10e      	bne.n	8003cb0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c9c:	2b80      	cmp	r3, #128	; 0x80
 8003c9e:	d107      	bne.n	8003cb0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 fa77 	bl	800419e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cba:	2b40      	cmp	r3, #64	; 0x40
 8003cbc:	d10e      	bne.n	8003cdc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc8:	2b40      	cmp	r3, #64	; 0x40
 8003cca:	d107      	bne.n	8003cdc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 f8f9 	bl	8003ece <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	f003 0320 	and.w	r3, r3, #32
 8003ce6:	2b20      	cmp	r3, #32
 8003ce8:	d10e      	bne.n	8003d08 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	f003 0320 	and.w	r3, r3, #32
 8003cf4:	2b20      	cmp	r3, #32
 8003cf6:	d107      	bne.n	8003d08 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f06f 0220 	mvn.w	r2, #32
 8003d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 fa42 	bl	800418c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d08:	bf00      	nop
 8003d0a:	3708      	adds	r7, #8
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d101      	bne.n	8003d28 <HAL_TIM_ConfigClockSource+0x18>
 8003d24:	2302      	movs	r3, #2
 8003d26:	e0b3      	b.n	8003e90 <HAL_TIM_ConfigClockSource+0x180>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2202      	movs	r2, #2
 8003d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d4e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d60:	d03e      	beq.n	8003de0 <HAL_TIM_ConfigClockSource+0xd0>
 8003d62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d66:	f200 8087 	bhi.w	8003e78 <HAL_TIM_ConfigClockSource+0x168>
 8003d6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d6e:	f000 8085 	beq.w	8003e7c <HAL_TIM_ConfigClockSource+0x16c>
 8003d72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d76:	d87f      	bhi.n	8003e78 <HAL_TIM_ConfigClockSource+0x168>
 8003d78:	2b70      	cmp	r3, #112	; 0x70
 8003d7a:	d01a      	beq.n	8003db2 <HAL_TIM_ConfigClockSource+0xa2>
 8003d7c:	2b70      	cmp	r3, #112	; 0x70
 8003d7e:	d87b      	bhi.n	8003e78 <HAL_TIM_ConfigClockSource+0x168>
 8003d80:	2b60      	cmp	r3, #96	; 0x60
 8003d82:	d050      	beq.n	8003e26 <HAL_TIM_ConfigClockSource+0x116>
 8003d84:	2b60      	cmp	r3, #96	; 0x60
 8003d86:	d877      	bhi.n	8003e78 <HAL_TIM_ConfigClockSource+0x168>
 8003d88:	2b50      	cmp	r3, #80	; 0x50
 8003d8a:	d03c      	beq.n	8003e06 <HAL_TIM_ConfigClockSource+0xf6>
 8003d8c:	2b50      	cmp	r3, #80	; 0x50
 8003d8e:	d873      	bhi.n	8003e78 <HAL_TIM_ConfigClockSource+0x168>
 8003d90:	2b40      	cmp	r3, #64	; 0x40
 8003d92:	d058      	beq.n	8003e46 <HAL_TIM_ConfigClockSource+0x136>
 8003d94:	2b40      	cmp	r3, #64	; 0x40
 8003d96:	d86f      	bhi.n	8003e78 <HAL_TIM_ConfigClockSource+0x168>
 8003d98:	2b30      	cmp	r3, #48	; 0x30
 8003d9a:	d064      	beq.n	8003e66 <HAL_TIM_ConfigClockSource+0x156>
 8003d9c:	2b30      	cmp	r3, #48	; 0x30
 8003d9e:	d86b      	bhi.n	8003e78 <HAL_TIM_ConfigClockSource+0x168>
 8003da0:	2b20      	cmp	r3, #32
 8003da2:	d060      	beq.n	8003e66 <HAL_TIM_ConfigClockSource+0x156>
 8003da4:	2b20      	cmp	r3, #32
 8003da6:	d867      	bhi.n	8003e78 <HAL_TIM_ConfigClockSource+0x168>
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d05c      	beq.n	8003e66 <HAL_TIM_ConfigClockSource+0x156>
 8003dac:	2b10      	cmp	r3, #16
 8003dae:	d05a      	beq.n	8003e66 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003db0:	e062      	b.n	8003e78 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6818      	ldr	r0, [r3, #0]
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	6899      	ldr	r1, [r3, #8]
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	685a      	ldr	r2, [r3, #4]
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	f000 f966 	bl	8004092 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003dd4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	609a      	str	r2, [r3, #8]
      break;
 8003dde:	e04e      	b.n	8003e7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6818      	ldr	r0, [r3, #0]
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	6899      	ldr	r1, [r3, #8]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685a      	ldr	r2, [r3, #4]
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	f000 f94f 	bl	8004092 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	689a      	ldr	r2, [r3, #8]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e02:	609a      	str	r2, [r3, #8]
      break;
 8003e04:	e03b      	b.n	8003e7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6818      	ldr	r0, [r3, #0]
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	6859      	ldr	r1, [r3, #4]
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	461a      	mov	r2, r3
 8003e14:	f000 f8c6 	bl	8003fa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2150      	movs	r1, #80	; 0x50
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 f91d 	bl	800405e <TIM_ITRx_SetConfig>
      break;
 8003e24:	e02b      	b.n	8003e7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6818      	ldr	r0, [r3, #0]
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	6859      	ldr	r1, [r3, #4]
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	461a      	mov	r2, r3
 8003e34:	f000 f8e4 	bl	8004000 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2160      	movs	r1, #96	; 0x60
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f000 f90d 	bl	800405e <TIM_ITRx_SetConfig>
      break;
 8003e44:	e01b      	b.n	8003e7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6818      	ldr	r0, [r3, #0]
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	6859      	ldr	r1, [r3, #4]
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	461a      	mov	r2, r3
 8003e54:	f000 f8a6 	bl	8003fa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2140      	movs	r1, #64	; 0x40
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f000 f8fd 	bl	800405e <TIM_ITRx_SetConfig>
      break;
 8003e64:	e00b      	b.n	8003e7e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4619      	mov	r1, r3
 8003e70:	4610      	mov	r0, r2
 8003e72:	f000 f8f4 	bl	800405e <TIM_ITRx_SetConfig>
        break;
 8003e76:	e002      	b.n	8003e7e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003e78:	bf00      	nop
 8003e7a:	e000      	b.n	8003e7e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003e7c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3710      	adds	r7, #16
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bc80      	pop	{r7}
 8003ea8:	4770      	bx	lr

08003eaa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003eaa:	b480      	push	{r7}
 8003eac:	b083      	sub	sp, #12
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003eb2:	bf00      	nop
 8003eb4:	370c      	adds	r7, #12
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bc80      	pop	{r7}
 8003eba:	4770      	bx	lr

08003ebc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ec4:	bf00      	nop
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bc80      	pop	{r7}
 8003ecc:	4770      	bx	lr

08003ece <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b083      	sub	sp, #12
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ed6:	bf00      	nop
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bc80      	pop	{r7}
 8003ede:	4770      	bx	lr

08003ee0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a29      	ldr	r2, [pc, #164]	; (8003f98 <TIM_Base_SetConfig+0xb8>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d00b      	beq.n	8003f10 <TIM_Base_SetConfig+0x30>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003efe:	d007      	beq.n	8003f10 <TIM_Base_SetConfig+0x30>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a26      	ldr	r2, [pc, #152]	; (8003f9c <TIM_Base_SetConfig+0xbc>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d003      	beq.n	8003f10 <TIM_Base_SetConfig+0x30>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a25      	ldr	r2, [pc, #148]	; (8003fa0 <TIM_Base_SetConfig+0xc0>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d108      	bne.n	8003f22 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a1c      	ldr	r2, [pc, #112]	; (8003f98 <TIM_Base_SetConfig+0xb8>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d00b      	beq.n	8003f42 <TIM_Base_SetConfig+0x62>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f30:	d007      	beq.n	8003f42 <TIM_Base_SetConfig+0x62>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a19      	ldr	r2, [pc, #100]	; (8003f9c <TIM_Base_SetConfig+0xbc>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d003      	beq.n	8003f42 <TIM_Base_SetConfig+0x62>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a18      	ldr	r2, [pc, #96]	; (8003fa0 <TIM_Base_SetConfig+0xc0>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d108      	bne.n	8003f54 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a07      	ldr	r2, [pc, #28]	; (8003f98 <TIM_Base_SetConfig+0xb8>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d103      	bne.n	8003f88 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	691a      	ldr	r2, [r3, #16]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	615a      	str	r2, [r3, #20]
}
 8003f8e:	bf00      	nop
 8003f90:	3714      	adds	r7, #20
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bc80      	pop	{r7}
 8003f96:	4770      	bx	lr
 8003f98:	40012c00 	.word	0x40012c00
 8003f9c:	40000400 	.word	0x40000400
 8003fa0:	40000800 	.word	0x40000800

08003fa4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b087      	sub	sp, #28
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6a1b      	ldr	r3, [r3, #32]
 8003fb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	f023 0201 	bic.w	r2, r3, #1
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	011b      	lsls	r3, r3, #4
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	f023 030a 	bic.w	r3, r3, #10
 8003fe0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	697a      	ldr	r2, [r7, #20]
 8003ff4:	621a      	str	r2, [r3, #32]
}
 8003ff6:	bf00      	nop
 8003ff8:	371c      	adds	r7, #28
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bc80      	pop	{r7}
 8003ffe:	4770      	bx	lr

08004000 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004000:	b480      	push	{r7}
 8004002:	b087      	sub	sp, #28
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6a1b      	ldr	r3, [r3, #32]
 8004010:	f023 0210 	bic.w	r2, r3, #16
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6a1b      	ldr	r3, [r3, #32]
 8004022:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800402a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	031b      	lsls	r3, r3, #12
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	4313      	orrs	r3, r2
 8004034:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800403c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	011b      	lsls	r3, r3, #4
 8004042:	693a      	ldr	r2, [r7, #16]
 8004044:	4313      	orrs	r3, r2
 8004046:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	621a      	str	r2, [r3, #32]
}
 8004054:	bf00      	nop
 8004056:	371c      	adds	r7, #28
 8004058:	46bd      	mov	sp, r7
 800405a:	bc80      	pop	{r7}
 800405c:	4770      	bx	lr

0800405e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800405e:	b480      	push	{r7}
 8004060:	b085      	sub	sp, #20
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
 8004066:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004074:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004076:	683a      	ldr	r2, [r7, #0]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	4313      	orrs	r3, r2
 800407c:	f043 0307 	orr.w	r3, r3, #7
 8004080:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	609a      	str	r2, [r3, #8]
}
 8004088:	bf00      	nop
 800408a:	3714      	adds	r7, #20
 800408c:	46bd      	mov	sp, r7
 800408e:	bc80      	pop	{r7}
 8004090:	4770      	bx	lr

08004092 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004092:	b480      	push	{r7}
 8004094:	b087      	sub	sp, #28
 8004096:	af00      	add	r7, sp, #0
 8004098:	60f8      	str	r0, [r7, #12]
 800409a:	60b9      	str	r1, [r7, #8]
 800409c:	607a      	str	r2, [r7, #4]
 800409e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040ac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	021a      	lsls	r2, r3, #8
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	431a      	orrs	r2, r3
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	4313      	orrs	r3, r2
 80040be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	609a      	str	r2, [r3, #8]
}
 80040c6:	bf00      	nop
 80040c8:	371c      	adds	r7, #28
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bc80      	pop	{r7}
 80040ce:	4770      	bx	lr

080040d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d101      	bne.n	80040e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040e4:	2302      	movs	r3, #2
 80040e6:	e046      	b.n	8004176 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2202      	movs	r2, #2
 80040f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800410e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	4313      	orrs	r3, r2
 8004118:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a16      	ldr	r2, [pc, #88]	; (8004180 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d00e      	beq.n	800414a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004134:	d009      	beq.n	800414a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a12      	ldr	r2, [pc, #72]	; (8004184 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d004      	beq.n	800414a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a10      	ldr	r2, [pc, #64]	; (8004188 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d10c      	bne.n	8004164 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004150:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	68ba      	ldr	r2, [r7, #8]
 8004158:	4313      	orrs	r3, r2
 800415a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68ba      	ldr	r2, [r7, #8]
 8004162:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3714      	adds	r7, #20
 800417a:	46bd      	mov	sp, r7
 800417c:	bc80      	pop	{r7}
 800417e:	4770      	bx	lr
 8004180:	40012c00 	.word	0x40012c00
 8004184:	40000400 	.word	0x40000400
 8004188:	40000800 	.word	0x40000800

0800418c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	bc80      	pop	{r7}
 800419c:	4770      	bx	lr

0800419e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800419e:	b480      	push	{r7}
 80041a0:	b083      	sub	sp, #12
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041a6:	bf00      	nop
 80041a8:	370c      	adds	r7, #12
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bc80      	pop	{r7}
 80041ae:	4770      	bx	lr

080041b0 <FIRFilter_Init>:
};




void FIRFilter_Init(FIRFilter *fir) {
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]

	/* Clear filter buffer */
	for (uint8_t n = 0; n < FIR_FILTER_LENGTH; n++) {
 80041b8:	2300      	movs	r3, #0
 80041ba:	73fb      	strb	r3, [r7, #15]
 80041bc:	e008      	b.n	80041d0 <FIRFilter_Init+0x20>

		fir->buf[n] = 0.0f;
 80041be:	7bfa      	ldrb	r2, [r7, #15]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f04f 0100 	mov.w	r1, #0
 80041c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (uint8_t n = 0; n < FIR_FILTER_LENGTH; n++) {
 80041ca:	7bfb      	ldrb	r3, [r7, #15]
 80041cc:	3301      	adds	r3, #1
 80041ce:	73fb      	strb	r3, [r7, #15]
 80041d0:	7bfb      	ldrb	r3, [r7, #15]
 80041d2:	2b1f      	cmp	r3, #31
 80041d4:	d9f3      	bls.n	80041be <FIRFilter_Init+0xe>

	}

	/* Reset buffer index */
	fir->bufIndex = 0;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	/* Clear filter output */
	fir->out = 0.0f;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f04f 0200 	mov.w	r2, #0
 80041e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

}
 80041e8:	bf00      	nop
 80041ea:	3714      	adds	r7, #20
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bc80      	pop	{r7}
 80041f0:	4770      	bx	lr
	...

080041f4 <FIRFilter_Update>:

float FIRFilter_Update(FIRFilter *fir, float inp) {
 80041f4:	b590      	push	{r4, r7, lr}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]

	/* Store latest sample in buffer */
	fir->buf[fir->bufIndex] = inp;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004204:	4619      	mov	r1, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	683a      	ldr	r2, [r7, #0]
 800420a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	/* Increment buffer index and wrap around if necessary */
	fir->bufIndex++;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004214:	3301      	adds	r3, #1
 8004216:	b2da      	uxtb	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	if (fir->bufIndex == FIR_FILTER_LENGTH) {
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004224:	2b20      	cmp	r3, #32
 8004226:	d103      	bne.n	8004230 <FIRFilter_Update+0x3c>

		fir->bufIndex = 0;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	}

	/* Compute new output sample (via convolution) */
	fir->out = 0.0f;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f04f 0200 	mov.w	r2, #0
 8004236:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

	uint8_t sumIndex = fir->bufIndex;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004240:	73fb      	strb	r3, [r7, #15]

	for (uint8_t n = 0; n < FIR_FILTER_LENGTH; n++) {
 8004242:	2300      	movs	r3, #0
 8004244:	73bb      	strb	r3, [r7, #14]
 8004246:	e023      	b.n	8004290 <FIRFilter_Update+0x9c>

		/* Decrement index and wrap if necessary */
		if (sumIndex > 0) {
 8004248:	7bfb      	ldrb	r3, [r7, #15]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d003      	beq.n	8004256 <FIRFilter_Update+0x62>

			sumIndex--;
 800424e:	7bfb      	ldrb	r3, [r7, #15]
 8004250:	3b01      	subs	r3, #1
 8004252:	73fb      	strb	r3, [r7, #15]
 8004254:	e001      	b.n	800425a <FIRFilter_Update+0x66>

		} else {

			sumIndex = FIR_FILTER_LENGTH - 1;
 8004256:	231f      	movs	r3, #31
 8004258:	73fb      	strb	r3, [r7, #15]

		}

		/* Multiply impulse response with shifted input sample and add to output */
		fir->out += FIR_IMPULSE_RESPONSE[n] * fir->buf[sumIndex];
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8004260:	7bbb      	ldrb	r3, [r7, #14]
 8004262:	4a10      	ldr	r2, [pc, #64]	; (80042a4 <FIRFilter_Update+0xb0>)
 8004264:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004268:	7bfa      	ldrb	r2, [r7, #15]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004270:	4619      	mov	r1, r3
 8004272:	f7fc fd87 	bl	8000d84 <__aeabi_fmul>
 8004276:	4603      	mov	r3, r0
 8004278:	4619      	mov	r1, r3
 800427a:	4620      	mov	r0, r4
 800427c:	f7fc fc7a 	bl	8000b74 <__addsf3>
 8004280:	4603      	mov	r3, r0
 8004282:	461a      	mov	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	for (uint8_t n = 0; n < FIR_FILTER_LENGTH; n++) {
 800428a:	7bbb      	ldrb	r3, [r7, #14]
 800428c:	3301      	adds	r3, #1
 800428e:	73bb      	strb	r3, [r7, #14]
 8004290:	7bbb      	ldrb	r3, [r7, #14]
 8004292:	2b1f      	cmp	r3, #31
 8004294:	d9d8      	bls.n	8004248 <FIRFilter_Update+0x54>

	}

	/* Return filtered output */
	return fir->out;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84

}
 800429c:	4618      	mov	r0, r3
 800429e:	3714      	adds	r7, #20
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd90      	pop	{r4, r7, pc}
 80042a4:	2000000c 	.word	0x2000000c

080042a8 <angles_update>:

#include "angles.h"


void angles_update(MPU6050 *mpu6050, ANGLES *angle)
{
 80042a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042ac:	b082      	sub	sp, #8
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
 80042b2:	6039      	str	r1, [r7, #0]
	angle->accel_x = mpu6050->accel_x;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	60da      	str	r2, [r3, #12]
	angle->accel_y = mpu6050->accel_y;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685a      	ldr	r2, [r3, #4]
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	611a      	str	r2, [r3, #16]
	angle->accel_z = mpu6050->accel_z;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	689a      	ldr	r2, [r3, #8]
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	615a      	str	r2, [r3, #20]

	angle->accel_x = FIRFilter_Update(&ax_filter, angle->accel_x);
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	4619      	mov	r1, r3
 80042d2:	4851      	ldr	r0, [pc, #324]	; (8004418 <angles_update+0x170>)
 80042d4:	f7ff ff8e 	bl	80041f4 <FIRFilter_Update>
 80042d8:	4602      	mov	r2, r0
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	60da      	str	r2, [r3, #12]
	angle->accel_y = FIRFilter_Update(&ay_filter, angle->accel_y);
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	4619      	mov	r1, r3
 80042e4:	484d      	ldr	r0, [pc, #308]	; (800441c <angles_update+0x174>)
 80042e6:	f7ff ff85 	bl	80041f4 <FIRFilter_Update>
 80042ea:	4602      	mov	r2, r0
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	611a      	str	r2, [r3, #16]
	angle->accel_z = FIRFilter_Update(&az_filter, angle->accel_z);
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	695b      	ldr	r3, [r3, #20]
 80042f4:	4619      	mov	r1, r3
 80042f6:	484a      	ldr	r0, [pc, #296]	; (8004420 <angles_update+0x178>)
 80042f8:	f7ff ff7c 	bl	80041f4 <FIRFilter_Update>
 80042fc:	4602      	mov	r2, r0
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	615a      	str	r2, [r3, #20]

	angle->yx = -1*(atan2(angle->accel_y,angle->accel_x)*180)/PI;
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	4618      	mov	r0, r3
 8004308:	f7fc f88e 	bl	8000428 <__aeabi_f2d>
 800430c:	4682      	mov	sl, r0
 800430e:	468b      	mov	fp, r1
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	4618      	mov	r0, r3
 8004316:	f7fc f887 	bl	8000428 <__aeabi_f2d>
 800431a:	4602      	mov	r2, r0
 800431c:	460b      	mov	r3, r1
 800431e:	4650      	mov	r0, sl
 8004320:	4659      	mov	r1, fp
 8004322:	f003 fe65 	bl	8007ff0 <atan2>
 8004326:	f04f 0200 	mov.w	r2, #0
 800432a:	4b3e      	ldr	r3, [pc, #248]	; (8004424 <angles_update+0x17c>)
 800432c:	f7fc f8d4 	bl	80004d8 <__aeabi_dmul>
 8004330:	4602      	mov	r2, r0
 8004332:	460b      	mov	r3, r1
 8004334:	4690      	mov	r8, r2
 8004336:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 800433a:	a335      	add	r3, pc, #212	; (adr r3, 8004410 <angles_update+0x168>)
 800433c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004340:	4640      	mov	r0, r8
 8004342:	4649      	mov	r1, r9
 8004344:	f7fc f9f2 	bl	800072c <__aeabi_ddiv>
 8004348:	4602      	mov	r2, r0
 800434a:	460b      	mov	r3, r1
 800434c:	4610      	mov	r0, r2
 800434e:	4619      	mov	r1, r3
 8004350:	f7fc fbba 	bl	8000ac8 <__aeabi_d2f>
 8004354:	4602      	mov	r2, r0
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	601a      	str	r2, [r3, #0]
	angle->xz = (atan2(angle->accel_x,angle->accel_z)*180)/PI;
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	4618      	mov	r0, r3
 8004360:	f7fc f862 	bl	8000428 <__aeabi_f2d>
 8004364:	4680      	mov	r8, r0
 8004366:	4689      	mov	r9, r1
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	695b      	ldr	r3, [r3, #20]
 800436c:	4618      	mov	r0, r3
 800436e:	f7fc f85b 	bl	8000428 <__aeabi_f2d>
 8004372:	4602      	mov	r2, r0
 8004374:	460b      	mov	r3, r1
 8004376:	4640      	mov	r0, r8
 8004378:	4649      	mov	r1, r9
 800437a:	f003 fe39 	bl	8007ff0 <atan2>
 800437e:	f04f 0200 	mov.w	r2, #0
 8004382:	4b28      	ldr	r3, [pc, #160]	; (8004424 <angles_update+0x17c>)
 8004384:	f7fc f8a8 	bl	80004d8 <__aeabi_dmul>
 8004388:	4602      	mov	r2, r0
 800438a:	460b      	mov	r3, r1
 800438c:	4610      	mov	r0, r2
 800438e:	4619      	mov	r1, r3
 8004390:	a31f      	add	r3, pc, #124	; (adr r3, 8004410 <angles_update+0x168>)
 8004392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004396:	f7fc f9c9 	bl	800072c <__aeabi_ddiv>
 800439a:	4602      	mov	r2, r0
 800439c:	460b      	mov	r3, r1
 800439e:	4610      	mov	r0, r2
 80043a0:	4619      	mov	r1, r3
 80043a2:	f7fc fb91 	bl	8000ac8 <__aeabi_d2f>
 80043a6:	4602      	mov	r2, r0
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	605a      	str	r2, [r3, #4]
	angle->yz = -1*(atan2(angle->accel_y,angle->accel_z)*180)/PI;
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	691b      	ldr	r3, [r3, #16]
 80043b0:	4618      	mov	r0, r3
 80043b2:	f7fc f839 	bl	8000428 <__aeabi_f2d>
 80043b6:	4680      	mov	r8, r0
 80043b8:	4689      	mov	r9, r1
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	4618      	mov	r0, r3
 80043c0:	f7fc f832 	bl	8000428 <__aeabi_f2d>
 80043c4:	4602      	mov	r2, r0
 80043c6:	460b      	mov	r3, r1
 80043c8:	4640      	mov	r0, r8
 80043ca:	4649      	mov	r1, r9
 80043cc:	f003 fe10 	bl	8007ff0 <atan2>
 80043d0:	f04f 0200 	mov.w	r2, #0
 80043d4:	4b13      	ldr	r3, [pc, #76]	; (8004424 <angles_update+0x17c>)
 80043d6:	f7fc f87f 	bl	80004d8 <__aeabi_dmul>
 80043da:	4602      	mov	r2, r0
 80043dc:	460b      	mov	r3, r1
 80043de:	4614      	mov	r4, r2
 80043e0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80043e4:	a30a      	add	r3, pc, #40	; (adr r3, 8004410 <angles_update+0x168>)
 80043e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ea:	4620      	mov	r0, r4
 80043ec:	4629      	mov	r1, r5
 80043ee:	f7fc f99d 	bl	800072c <__aeabi_ddiv>
 80043f2:	4602      	mov	r2, r0
 80043f4:	460b      	mov	r3, r1
 80043f6:	4610      	mov	r0, r2
 80043f8:	4619      	mov	r1, r3
 80043fa:	f7fc fb65 	bl	8000ac8 <__aeabi_d2f>
 80043fe:	4602      	mov	r2, r0
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	609a      	str	r2, [r3, #8]

	return;
 8004404:	bf00      	nop
}
 8004406:	3708      	adds	r7, #8
 8004408:	46bd      	mov	sp, r7
 800440a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800440e:	bf00      	nop
 8004410:	5443d6f4 	.word	0x5443d6f4
 8004414:	400921fb 	.word	0x400921fb
 8004418:	2000099c 	.word	0x2000099c
 800441c:	20000a6c 	.word	0x20000a6c
 8004420:	20000914 	.word	0x20000914
 8004424:	40668000 	.word	0x40668000

08004428 <gui_Init>:
 */

#include "gui_multitool.h"

void gui_Init(void)
{
 8004428:	b480      	push	{r7}
 800442a:	af00      	add	r7, sp, #0

}
 800442c:	bf00      	nop
 800442e:	46bd      	mov	sp, r7
 8004430:	bc80      	pop	{r7}
 8004432:	4770      	bx	lr

08004434 <gui_WelcomeScreen>:

void gui_WelcomeScreen(void)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	af00      	add	r7, sp, #0

	ssd1306_Fill(Black);
 8004438:	2000      	movs	r0, #0
 800443a:	f000 fbaf 	bl	8004b9c <ssd1306_Fill>
	ssd1306_SetCursor(1, 3);
 800443e:	2103      	movs	r1, #3
 8004440:	2001      	movs	r0, #1
 8004442:	f000 fd11 	bl	8004e68 <ssd1306_SetCursor>
	ssd1306_WriteString("Sistemas Embebidos", Font_7x10, White);
 8004446:	4a14      	ldr	r2, [pc, #80]	; (8004498 <gui_WelcomeScreen+0x64>)
 8004448:	2301      	movs	r3, #1
 800444a:	ca06      	ldmia	r2, {r1, r2}
 800444c:	4813      	ldr	r0, [pc, #76]	; (800449c <gui_WelcomeScreen+0x68>)
 800444e:	f000 fce5 	bl	8004e1c <ssd1306_WriteString>
	ssd1306_SetCursor(1, 19);
 8004452:	2113      	movs	r1, #19
 8004454:	2001      	movs	r0, #1
 8004456:	f000 fd07 	bl	8004e68 <ssd1306_SetCursor>
	ssd1306_WriteString("Proyecto final:", Font_7x10, White);
 800445a:	4a0f      	ldr	r2, [pc, #60]	; (8004498 <gui_WelcomeScreen+0x64>)
 800445c:	2301      	movs	r3, #1
 800445e:	ca06      	ldmia	r2, {r1, r2}
 8004460:	480f      	ldr	r0, [pc, #60]	; (80044a0 <gui_WelcomeScreen+0x6c>)
 8004462:	f000 fcdb 	bl	8004e1c <ssd1306_WriteString>
	ssd1306_SetCursor(1, 35);
 8004466:	2123      	movs	r1, #35	; 0x23
 8004468:	2001      	movs	r0, #1
 800446a:	f000 fcfd 	bl	8004e68 <ssd1306_SetCursor>
	ssd1306_WriteString("NIVEL DE BURBUJA", Font_7x10, White);
 800446e:	4a0a      	ldr	r2, [pc, #40]	; (8004498 <gui_WelcomeScreen+0x64>)
 8004470:	2301      	movs	r3, #1
 8004472:	ca06      	ldmia	r2, {r1, r2}
 8004474:	480b      	ldr	r0, [pc, #44]	; (80044a4 <gui_WelcomeScreen+0x70>)
 8004476:	f000 fcd1 	bl	8004e1c <ssd1306_WriteString>
	ssd1306_SetCursor(1, 51);
 800447a:	2133      	movs	r1, #51	; 0x33
 800447c:	2001      	movs	r0, #1
 800447e:	f000 fcf3 	bl	8004e68 <ssd1306_SetCursor>
	ssd1306_WriteString("Tomas Cornaglia", Font_7x10, White);
 8004482:	4a05      	ldr	r2, [pc, #20]	; (8004498 <gui_WelcomeScreen+0x64>)
 8004484:	2301      	movs	r3, #1
 8004486:	ca06      	ldmia	r2, {r1, r2}
 8004488:	4807      	ldr	r0, [pc, #28]	; (80044a8 <gui_WelcomeScreen+0x74>)
 800448a:	f000 fcc7 	bl	8004e1c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800448e:	f000 fba7 	bl	8004be0 <ssd1306_UpdateScreen>

	return;
 8004492:	bf00      	nop

}
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	20000098 	.word	0x20000098
 800449c:	08009608 	.word	0x08009608
 80044a0:	0800961c 	.word	0x0800961c
 80044a4:	0800962c 	.word	0x0800962c
 80044a8:	08009640 	.word	0x08009640

080044ac <gui_Bubble_1d>:

void gui_Bubble_1d(float angle, float temp)
{
 80044ac:	b5b0      	push	{r4, r5, r7, lr}
 80044ae:	b086      	sub	sp, #24
 80044b0:	af02      	add	r7, sp, #8
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
	static uint8_t radius = 7;
	static int16_t x0;
	const uint8_t y0 = 52;
 80044b6:	2334      	movs	r3, #52	; 0x34
 80044b8:	73fb      	strb	r3, [r7, #15]
	const uint8_t x1 = 10;
 80044ba:	230a      	movs	r3, #10
 80044bc:	73bb      	strb	r3, [r7, #14]
	const uint8_t x2 = 120;
 80044be:	2378      	movs	r3, #120	; 0x78
 80044c0:	737b      	strb	r3, [r7, #13]

	x0 = (angle / 60.0) * (x2 - (radius + 1) - (x2 + x1) / 2) + (x2 + x1) / 2;
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f7fb ffb0 	bl	8000428 <__aeabi_f2d>
 80044c8:	f04f 0200 	mov.w	r2, #0
 80044cc:	4b60      	ldr	r3, [pc, #384]	; (8004650 <gui_Bubble_1d+0x1a4>)
 80044ce:	f7fc f92d 	bl	800072c <__aeabi_ddiv>
 80044d2:	4602      	mov	r2, r0
 80044d4:	460b      	mov	r3, r1
 80044d6:	4614      	mov	r4, r2
 80044d8:	461d      	mov	r5, r3
 80044da:	7b7a      	ldrb	r2, [r7, #13]
 80044dc:	4b5d      	ldr	r3, [pc, #372]	; (8004654 <gui_Bubble_1d+0x1a8>)
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	3301      	adds	r3, #1
 80044e2:	1ad2      	subs	r2, r2, r3
 80044e4:	7b79      	ldrb	r1, [r7, #13]
 80044e6:	7bbb      	ldrb	r3, [r7, #14]
 80044e8:	440b      	add	r3, r1
 80044ea:	0fd9      	lsrs	r1, r3, #31
 80044ec:	440b      	add	r3, r1
 80044ee:	105b      	asrs	r3, r3, #1
 80044f0:	425b      	negs	r3, r3
 80044f2:	4413      	add	r3, r2
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7fb ff85 	bl	8000404 <__aeabi_i2d>
 80044fa:	4602      	mov	r2, r0
 80044fc:	460b      	mov	r3, r1
 80044fe:	4620      	mov	r0, r4
 8004500:	4629      	mov	r1, r5
 8004502:	f7fb ffe9 	bl	80004d8 <__aeabi_dmul>
 8004506:	4602      	mov	r2, r0
 8004508:	460b      	mov	r3, r1
 800450a:	4614      	mov	r4, r2
 800450c:	461d      	mov	r5, r3
 800450e:	7b7a      	ldrb	r2, [r7, #13]
 8004510:	7bbb      	ldrb	r3, [r7, #14]
 8004512:	4413      	add	r3, r2
 8004514:	0fda      	lsrs	r2, r3, #31
 8004516:	4413      	add	r3, r2
 8004518:	105b      	asrs	r3, r3, #1
 800451a:	4618      	mov	r0, r3
 800451c:	f7fb ff72 	bl	8000404 <__aeabi_i2d>
 8004520:	4602      	mov	r2, r0
 8004522:	460b      	mov	r3, r1
 8004524:	4620      	mov	r0, r4
 8004526:	4629      	mov	r1, r5
 8004528:	f7fb fe20 	bl	800016c <__adddf3>
 800452c:	4602      	mov	r2, r0
 800452e:	460b      	mov	r3, r1
 8004530:	4610      	mov	r0, r2
 8004532:	4619      	mov	r1, r3
 8004534:	f7fc fa80 	bl	8000a38 <__aeabi_d2iz>
 8004538:	4603      	mov	r3, r0
 800453a:	b21a      	sxth	r2, r3
 800453c:	4b46      	ldr	r3, [pc, #280]	; (8004658 <gui_Bubble_1d+0x1ac>)
 800453e:	801a      	strh	r2, [r3, #0]

	if ((x0 - (radius + 1)) <= x1)
 8004540:	4b45      	ldr	r3, [pc, #276]	; (8004658 <gui_Bubble_1d+0x1ac>)
 8004542:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004546:	461a      	mov	r2, r3
 8004548:	4b42      	ldr	r3, [pc, #264]	; (8004654 <gui_Bubble_1d+0x1a8>)
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	3301      	adds	r3, #1
 800454e:	1ad2      	subs	r2, r2, r3
 8004550:	7bbb      	ldrb	r3, [r7, #14]
 8004552:	429a      	cmp	r2, r3
 8004554:	dc0b      	bgt.n	800456e <gui_Bubble_1d+0xc2>
		x0 = x1 + (radius + 1);
 8004556:	7bbb      	ldrb	r3, [r7, #14]
 8004558:	b29a      	uxth	r2, r3
 800455a:	4b3e      	ldr	r3, [pc, #248]	; (8004654 <gui_Bubble_1d+0x1a8>)
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	b29b      	uxth	r3, r3
 8004560:	4413      	add	r3, r2
 8004562:	b29b      	uxth	r3, r3
 8004564:	3301      	adds	r3, #1
 8004566:	b29b      	uxth	r3, r3
 8004568:	b21a      	sxth	r2, r3
 800456a:	4b3b      	ldr	r3, [pc, #236]	; (8004658 <gui_Bubble_1d+0x1ac>)
 800456c:	801a      	strh	r2, [r3, #0]

	if ((x0 + (radius + 1)) >= x2)
 800456e:	4b3a      	ldr	r3, [pc, #232]	; (8004658 <gui_Bubble_1d+0x1ac>)
 8004570:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004574:	461a      	mov	r2, r3
 8004576:	4b37      	ldr	r3, [pc, #220]	; (8004654 <gui_Bubble_1d+0x1a8>)
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	3301      	adds	r3, #1
 800457c:	441a      	add	r2, r3
 800457e:	7b7b      	ldrb	r3, [r7, #13]
 8004580:	429a      	cmp	r2, r3
 8004582:	db0b      	blt.n	800459c <gui_Bubble_1d+0xf0>
		x0 = x2 - (radius + 1);
 8004584:	7b7b      	ldrb	r3, [r7, #13]
 8004586:	b29a      	uxth	r2, r3
 8004588:	4b32      	ldr	r3, [pc, #200]	; (8004654 <gui_Bubble_1d+0x1a8>)
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	b29b      	uxth	r3, r3
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	b29b      	uxth	r3, r3
 8004592:	3b01      	subs	r3, #1
 8004594:	b29b      	uxth	r3, r3
 8004596:	b21a      	sxth	r2, r3
 8004598:	4b2f      	ldr	r3, [pc, #188]	; (8004658 <gui_Bubble_1d+0x1ac>)
 800459a:	801a      	strh	r2, [r3, #0]

	ssd1306_Fill(Black);
 800459c:	2000      	movs	r0, #0
 800459e:	f000 fafd 	bl	8004b9c <ssd1306_Fill>
	ssd1306_DrawRectangle(x1, y0 - (radius + 1), x2, y0 + (radius + 1), White);
 80045a2:	4b2c      	ldr	r3, [pc, #176]	; (8004654 <gui_Bubble_1d+0x1a8>)
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	7bfa      	ldrb	r2, [r7, #15]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	3b01      	subs	r3, #1
 80045ae:	b2d9      	uxtb	r1, r3
 80045b0:	4b28      	ldr	r3, [pc, #160]	; (8004654 <gui_Bubble_1d+0x1a8>)
 80045b2:	781a      	ldrb	r2, [r3, #0]
 80045b4:	7bfb      	ldrb	r3, [r7, #15]
 80045b6:	4413      	add	r3, r2
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	3301      	adds	r3, #1
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	7b7a      	ldrb	r2, [r7, #13]
 80045c0:	7bb8      	ldrb	r0, [r7, #14]
 80045c2:	2401      	movs	r4, #1
 80045c4:	9400      	str	r4, [sp, #0]
 80045c6:	f000 fd59 	bl	800507c <ssd1306_DrawRectangle>
	ssd1306_DrawCircle(x0, y0, radius, White);
 80045ca:	4b23      	ldr	r3, [pc, #140]	; (8004658 <gui_Bubble_1d+0x1ac>)
 80045cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045d0:	b2d8      	uxtb	r0, r3
 80045d2:	4b20      	ldr	r3, [pc, #128]	; (8004654 <gui_Bubble_1d+0x1a8>)
 80045d4:	781a      	ldrb	r2, [r3, #0]
 80045d6:	7bf9      	ldrb	r1, [r7, #15]
 80045d8:	2301      	movs	r3, #1
 80045da:	f000 fcc9 	bl	8004f70 <ssd1306_DrawCircle>
	ssd1306_DrawCircle(x0 + 3, y0 - 3, 2, White);
 80045de:	4b1e      	ldr	r3, [pc, #120]	; (8004658 <gui_Bubble_1d+0x1ac>)
 80045e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	3303      	adds	r3, #3
 80045e8:	b2d8      	uxtb	r0, r3
 80045ea:	7bfb      	ldrb	r3, [r7, #15]
 80045ec:	3b03      	subs	r3, #3
 80045ee:	b2d9      	uxtb	r1, r3
 80045f0:	2301      	movs	r3, #1
 80045f2:	2202      	movs	r2, #2
 80045f4:	f000 fcbc 	bl	8004f70 <ssd1306_DrawCircle>

	sprintf(MSG0, "%+.1f", angle);
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f7fb ff15 	bl	8000428 <__aeabi_f2d>
 80045fe:	4602      	mov	r2, r0
 8004600:	460b      	mov	r3, r1
 8004602:	4916      	ldr	r1, [pc, #88]	; (800465c <gui_Bubble_1d+0x1b0>)
 8004604:	4816      	ldr	r0, [pc, #88]	; (8004660 <gui_Bubble_1d+0x1b4>)
 8004606:	f001 fa41 	bl	8005a8c <siprintf>
	ssd1306_SetCursor(26, 15);
 800460a:	210f      	movs	r1, #15
 800460c:	201a      	movs	r0, #26
 800460e:	f000 fc2b 	bl	8004e68 <ssd1306_SetCursor>
	ssd1306_WriteString(MSG0, Font_16x26, White);
 8004612:	4a14      	ldr	r2, [pc, #80]	; (8004664 <gui_Bubble_1d+0x1b8>)
 8004614:	2301      	movs	r3, #1
 8004616:	ca06      	ldmia	r2, {r1, r2}
 8004618:	4811      	ldr	r0, [pc, #68]	; (8004660 <gui_Bubble_1d+0x1b4>)
 800461a:	f000 fbff 	bl	8004e1c <ssd1306_WriteString>

	sprintf(MSG0, "%+.1fC", temp);
 800461e:	6838      	ldr	r0, [r7, #0]
 8004620:	f7fb ff02 	bl	8000428 <__aeabi_f2d>
 8004624:	4602      	mov	r2, r0
 8004626:	460b      	mov	r3, r1
 8004628:	490f      	ldr	r1, [pc, #60]	; (8004668 <gui_Bubble_1d+0x1bc>)
 800462a:	480d      	ldr	r0, [pc, #52]	; (8004660 <gui_Bubble_1d+0x1b4>)
 800462c:	f001 fa2e 	bl	8005a8c <siprintf>
	ssd1306_SetCursor(1, 1);
 8004630:	2101      	movs	r1, #1
 8004632:	2001      	movs	r0, #1
 8004634:	f000 fc18 	bl	8004e68 <ssd1306_SetCursor>
	ssd1306_WriteString(MSG0, Font_6x8, White);
 8004638:	4a0c      	ldr	r2, [pc, #48]	; (800466c <gui_Bubble_1d+0x1c0>)
 800463a:	2301      	movs	r3, #1
 800463c:	ca06      	ldmia	r2, {r1, r2}
 800463e:	4808      	ldr	r0, [pc, #32]	; (8004660 <gui_Bubble_1d+0x1b4>)
 8004640:	f000 fbec 	bl	8004e1c <ssd1306_WriteString>

	ssd1306_UpdateScreen();
 8004644:	f000 facc 	bl	8004be0 <ssd1306_UpdateScreen>

	return;
 8004648:	bf00      	nop
}
 800464a:	3710      	adds	r7, #16
 800464c:	46bd      	mov	sp, r7
 800464e:	bdb0      	pop	{r4, r5, r7, pc}
 8004650:	404e0000 	.word	0x404e0000
 8004654:	2000008c 	.word	0x2000008c
 8004658:	200002d4 	.word	0x200002d4
 800465c:	08009650 	.word	0x08009650
 8004660:	200006f8 	.word	0x200006f8
 8004664:	200000a0 	.word	0x200000a0
 8004668:	08009658 	.word	0x08009658
 800466c:	20000090 	.word	0x20000090

08004670 <gui_Bubble_2d>:

void gui_Bubble_2d(float angle_xz, float angle_yz, float temp)
{
 8004670:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004674:	b08a      	sub	sp, #40	; 0x28
 8004676:	af02      	add	r7, sp, #8
 8004678:	60f8      	str	r0, [r7, #12]
 800467a:	60b9      	str	r1, [r7, #8]
 800467c:	607a      	str	r2, [r7, #4]
	uint8_t x0 = 95;
 800467e:	235f      	movs	r3, #95	; 0x5f
 8004680:	76fb      	strb	r3, [r7, #27]
	uint8_t y0 = 32;
 8004682:	2320      	movs	r3, #32
 8004684:	76bb      	strb	r3, [r7, #26]
	//	CONVERSION A COORDENADAS POLARES

	float radius;
	float theta;

	radius = sqrt(angle_yz*angle_yz + angle_xz*angle_xz);
 8004686:	68b9      	ldr	r1, [r7, #8]
 8004688:	68b8      	ldr	r0, [r7, #8]
 800468a:	f7fc fb7b 	bl	8000d84 <__aeabi_fmul>
 800468e:	4603      	mov	r3, r0
 8004690:	461c      	mov	r4, r3
 8004692:	68f9      	ldr	r1, [r7, #12]
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f7fc fb75 	bl	8000d84 <__aeabi_fmul>
 800469a:	4603      	mov	r3, r0
 800469c:	4619      	mov	r1, r3
 800469e:	4620      	mov	r0, r4
 80046a0:	f7fc fa68 	bl	8000b74 <__addsf3>
 80046a4:	4603      	mov	r3, r0
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7fb febe 	bl	8000428 <__aeabi_f2d>
 80046ac:	4602      	mov	r2, r0
 80046ae:	460b      	mov	r3, r1
 80046b0:	4610      	mov	r0, r2
 80046b2:	4619      	mov	r1, r3
 80046b4:	f003 fc9e 	bl	8007ff4 <sqrt>
 80046b8:	4602      	mov	r2, r0
 80046ba:	460b      	mov	r3, r1
 80046bc:	4610      	mov	r0, r2
 80046be:	4619      	mov	r1, r3
 80046c0:	f7fc fa02 	bl	8000ac8 <__aeabi_d2f>
 80046c4:	4603      	mov	r3, r0
 80046c6:	61fb      	str	r3, [r7, #28]

	if(radius > 26)
 80046c8:	496f      	ldr	r1, [pc, #444]	; (8004888 <gui_Bubble_2d+0x218>)
 80046ca:	69f8      	ldr	r0, [r7, #28]
 80046cc:	f7fc fd16 	bl	80010fc <__aeabi_fcmpgt>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <gui_Bubble_2d+0x6a>
		radius = 26;
 80046d6:	4b6c      	ldr	r3, [pc, #432]	; (8004888 <gui_Bubble_2d+0x218>)
 80046d8:	61fb      	str	r3, [r7, #28]

	theta = atan2(angle_xz, angle_yz);
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f7fb fea4 	bl	8000428 <__aeabi_f2d>
 80046e0:	4604      	mov	r4, r0
 80046e2:	460d      	mov	r5, r1
 80046e4:	68b8      	ldr	r0, [r7, #8]
 80046e6:	f7fb fe9f 	bl	8000428 <__aeabi_f2d>
 80046ea:	4602      	mov	r2, r0
 80046ec:	460b      	mov	r3, r1
 80046ee:	4620      	mov	r0, r4
 80046f0:	4629      	mov	r1, r5
 80046f2:	f003 fc7d 	bl	8007ff0 <atan2>
 80046f6:	4602      	mov	r2, r0
 80046f8:	460b      	mov	r3, r1
 80046fa:	4610      	mov	r0, r2
 80046fc:	4619      	mov	r1, r3
 80046fe:	f7fc f9e3 	bl	8000ac8 <__aeabi_d2f>
 8004702:	4603      	mov	r3, r0
 8004704:	617b      	str	r3, [r7, #20]

	x0 += radius * sin(theta);
 8004706:	7efb      	ldrb	r3, [r7, #27]
 8004708:	4618      	mov	r0, r3
 800470a:	f7fb fe7b 	bl	8000404 <__aeabi_i2d>
 800470e:	4604      	mov	r4, r0
 8004710:	460d      	mov	r5, r1
 8004712:	69f8      	ldr	r0, [r7, #28]
 8004714:	f7fb fe88 	bl	8000428 <__aeabi_f2d>
 8004718:	4680      	mov	r8, r0
 800471a:	4689      	mov	r9, r1
 800471c:	6978      	ldr	r0, [r7, #20]
 800471e:	f7fb fe83 	bl	8000428 <__aeabi_f2d>
 8004722:	4602      	mov	r2, r0
 8004724:	460b      	mov	r3, r1
 8004726:	4610      	mov	r0, r2
 8004728:	4619      	mov	r1, r3
 800472a:	f003 fc1b 	bl	8007f64 <sin>
 800472e:	4602      	mov	r2, r0
 8004730:	460b      	mov	r3, r1
 8004732:	4640      	mov	r0, r8
 8004734:	4649      	mov	r1, r9
 8004736:	f7fb fecf 	bl	80004d8 <__aeabi_dmul>
 800473a:	4602      	mov	r2, r0
 800473c:	460b      	mov	r3, r1
 800473e:	4620      	mov	r0, r4
 8004740:	4629      	mov	r1, r5
 8004742:	f7fb fd13 	bl	800016c <__adddf3>
 8004746:	4602      	mov	r2, r0
 8004748:	460b      	mov	r3, r1
 800474a:	4610      	mov	r0, r2
 800474c:	4619      	mov	r1, r3
 800474e:	f7fc f99b 	bl	8000a88 <__aeabi_d2uiz>
 8004752:	4603      	mov	r3, r0
 8004754:	76fb      	strb	r3, [r7, #27]
	y0 -= radius * cos(theta);
 8004756:	7ebb      	ldrb	r3, [r7, #26]
 8004758:	4618      	mov	r0, r3
 800475a:	f7fb fe53 	bl	8000404 <__aeabi_i2d>
 800475e:	4604      	mov	r4, r0
 8004760:	460d      	mov	r5, r1
 8004762:	69f8      	ldr	r0, [r7, #28]
 8004764:	f7fb fe60 	bl	8000428 <__aeabi_f2d>
 8004768:	4680      	mov	r8, r0
 800476a:	4689      	mov	r9, r1
 800476c:	6978      	ldr	r0, [r7, #20]
 800476e:	f7fb fe5b 	bl	8000428 <__aeabi_f2d>
 8004772:	4602      	mov	r2, r0
 8004774:	460b      	mov	r3, r1
 8004776:	4610      	mov	r0, r2
 8004778:	4619      	mov	r1, r3
 800477a:	f003 fbb1 	bl	8007ee0 <cos>
 800477e:	4602      	mov	r2, r0
 8004780:	460b      	mov	r3, r1
 8004782:	4640      	mov	r0, r8
 8004784:	4649      	mov	r1, r9
 8004786:	f7fb fea7 	bl	80004d8 <__aeabi_dmul>
 800478a:	4602      	mov	r2, r0
 800478c:	460b      	mov	r3, r1
 800478e:	4620      	mov	r0, r4
 8004790:	4629      	mov	r1, r5
 8004792:	f7fb fce9 	bl	8000168 <__aeabi_dsub>
 8004796:	4602      	mov	r2, r0
 8004798:	460b      	mov	r3, r1
 800479a:	4610      	mov	r0, r2
 800479c:	4619      	mov	r1, r3
 800479e:	f7fc f973 	bl	8000a88 <__aeabi_d2uiz>
 80047a2:	4603      	mov	r3, r0
 80047a4:	76bb      	strb	r3, [r7, #26]

	//	FIN CONVERSION A COORDENADAS POLARES

	ssd1306_Fill(Black);
 80047a6:	2000      	movs	r0, #0
 80047a8:	f000 f9f8 	bl	8004b9c <ssd1306_Fill>
	ssd1306_DrawCircle(95, 32, 31, White);
 80047ac:	2301      	movs	r3, #1
 80047ae:	221f      	movs	r2, #31
 80047b0:	2120      	movs	r1, #32
 80047b2:	205f      	movs	r0, #95	; 0x5f
 80047b4:	f000 fbdc 	bl	8004f70 <ssd1306_DrawCircle>
	//ssd1306_DrawRectangle(63, 1, 126, 63, COLOR);	//	Descomentar en caso de no usar coordenadas polares
	ssd1306_Line(64, 32, 126, 32, White);
 80047b8:	2301      	movs	r3, #1
 80047ba:	9300      	str	r3, [sp, #0]
 80047bc:	2320      	movs	r3, #32
 80047be:	227e      	movs	r2, #126	; 0x7e
 80047c0:	2120      	movs	r1, #32
 80047c2:	2040      	movs	r0, #64	; 0x40
 80047c4:	f000 fb68 	bl	8004e98 <ssd1306_Line>
	ssd1306_Line(95, 1, 95, 63, White);
 80047c8:	2301      	movs	r3, #1
 80047ca:	9300      	str	r3, [sp, #0]
 80047cc:	233f      	movs	r3, #63	; 0x3f
 80047ce:	225f      	movs	r2, #95	; 0x5f
 80047d0:	2101      	movs	r1, #1
 80047d2:	205f      	movs	r0, #95	; 0x5f
 80047d4:	f000 fb60 	bl	8004e98 <ssd1306_Line>
	ssd1306_DrawRectangle(89, 26, 101, 38, White);
 80047d8:	2301      	movs	r3, #1
 80047da:	9300      	str	r3, [sp, #0]
 80047dc:	2326      	movs	r3, #38	; 0x26
 80047de:	2265      	movs	r2, #101	; 0x65
 80047e0:	211a      	movs	r1, #26
 80047e2:	2059      	movs	r0, #89	; 0x59
 80047e4:	f000 fc4a 	bl	800507c <ssd1306_DrawRectangle>
	ssd1306_DrawCircle(x0, y0, 5, White);
 80047e8:	7eb9      	ldrb	r1, [r7, #26]
 80047ea:	7ef8      	ldrb	r0, [r7, #27]
 80047ec:	2301      	movs	r3, #1
 80047ee:	2205      	movs	r2, #5
 80047f0:	f000 fbbe 	bl	8004f70 <ssd1306_DrawCircle>
	ssd1306_DrawCircle(x0+2, y0-2, 1, White);
 80047f4:	7efb      	ldrb	r3, [r7, #27]
 80047f6:	3302      	adds	r3, #2
 80047f8:	b2d8      	uxtb	r0, r3
 80047fa:	7ebb      	ldrb	r3, [r7, #26]
 80047fc:	3b02      	subs	r3, #2
 80047fe:	b2d9      	uxtb	r1, r3
 8004800:	2301      	movs	r3, #1
 8004802:	2201      	movs	r2, #1
 8004804:	f000 fbb4 	bl	8004f70 <ssd1306_DrawCircle>

	sprintf(MSG0, "X: %+.1f", angle_xz);
 8004808:	68f8      	ldr	r0, [r7, #12]
 800480a:	f7fb fe0d 	bl	8000428 <__aeabi_f2d>
 800480e:	4602      	mov	r2, r0
 8004810:	460b      	mov	r3, r1
 8004812:	491e      	ldr	r1, [pc, #120]	; (800488c <gui_Bubble_2d+0x21c>)
 8004814:	481e      	ldr	r0, [pc, #120]	; (8004890 <gui_Bubble_2d+0x220>)
 8004816:	f001 f939 	bl	8005a8c <siprintf>
	ssd1306_SetCursor(1, 28);
 800481a:	211c      	movs	r1, #28
 800481c:	2001      	movs	r0, #1
 800481e:	f000 fb23 	bl	8004e68 <ssd1306_SetCursor>
	ssd1306_WriteString(MSG0, Font_7x10, White);
 8004822:	4a1c      	ldr	r2, [pc, #112]	; (8004894 <gui_Bubble_2d+0x224>)
 8004824:	2301      	movs	r3, #1
 8004826:	ca06      	ldmia	r2, {r1, r2}
 8004828:	4819      	ldr	r0, [pc, #100]	; (8004890 <gui_Bubble_2d+0x220>)
 800482a:	f000 faf7 	bl	8004e1c <ssd1306_WriteString>

	sprintf(MSG0, "Y: %+.1f", angle_yz);
 800482e:	68b8      	ldr	r0, [r7, #8]
 8004830:	f7fb fdfa 	bl	8000428 <__aeabi_f2d>
 8004834:	4602      	mov	r2, r0
 8004836:	460b      	mov	r3, r1
 8004838:	4917      	ldr	r1, [pc, #92]	; (8004898 <gui_Bubble_2d+0x228>)
 800483a:	4815      	ldr	r0, [pc, #84]	; (8004890 <gui_Bubble_2d+0x220>)
 800483c:	f001 f926 	bl	8005a8c <siprintf>
	ssd1306_SetCursor(1, 48);
 8004840:	2130      	movs	r1, #48	; 0x30
 8004842:	2001      	movs	r0, #1
 8004844:	f000 fb10 	bl	8004e68 <ssd1306_SetCursor>
	ssd1306_WriteString(MSG0, Font_7x10, White);
 8004848:	4a12      	ldr	r2, [pc, #72]	; (8004894 <gui_Bubble_2d+0x224>)
 800484a:	2301      	movs	r3, #1
 800484c:	ca06      	ldmia	r2, {r1, r2}
 800484e:	4810      	ldr	r0, [pc, #64]	; (8004890 <gui_Bubble_2d+0x220>)
 8004850:	f000 fae4 	bl	8004e1c <ssd1306_WriteString>

	sprintf(MSG0, "%+.1fC", temp);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f7fb fde7 	bl	8000428 <__aeabi_f2d>
 800485a:	4602      	mov	r2, r0
 800485c:	460b      	mov	r3, r1
 800485e:	490f      	ldr	r1, [pc, #60]	; (800489c <gui_Bubble_2d+0x22c>)
 8004860:	480b      	ldr	r0, [pc, #44]	; (8004890 <gui_Bubble_2d+0x220>)
 8004862:	f001 f913 	bl	8005a8c <siprintf>
	ssd1306_SetCursor(1, 1);
 8004866:	2101      	movs	r1, #1
 8004868:	2001      	movs	r0, #1
 800486a:	f000 fafd 	bl	8004e68 <ssd1306_SetCursor>
	ssd1306_WriteString(MSG0, Font_6x8, White);
 800486e:	4a0c      	ldr	r2, [pc, #48]	; (80048a0 <gui_Bubble_2d+0x230>)
 8004870:	2301      	movs	r3, #1
 8004872:	ca06      	ldmia	r2, {r1, r2}
 8004874:	4806      	ldr	r0, [pc, #24]	; (8004890 <gui_Bubble_2d+0x220>)
 8004876:	f000 fad1 	bl	8004e1c <ssd1306_WriteString>

	ssd1306_UpdateScreen();
 800487a:	f000 f9b1 	bl	8004be0 <ssd1306_UpdateScreen>

	return;
 800487e:	bf00      	nop
}
 8004880:	3720      	adds	r7, #32
 8004882:	46bd      	mov	sp, r7
 8004884:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004888:	41d00000 	.word	0x41d00000
 800488c:	08009660 	.word	0x08009660
 8004890:	200006f8 	.word	0x200006f8
 8004894:	20000098 	.word	0x20000098
 8004898:	0800966c 	.word	0x0800966c
 800489c:	08009658 	.word	0x08009658
 80048a0:	20000090 	.word	0x20000090

080048a4 <mpu6050_Init>:
#include "mpu6050.h"

RAW_DATA raw;

void mpu6050_Init (MPU6050 *mpu6050)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b086      	sub	sp, #24
 80048a8:	af04      	add	r7, sp, #16
 80048aa:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 80048ac:	2064      	movs	r0, #100	; 0x64
 80048ae:	f7fd f983 	bl	8001bb8 <HAL_Delay>

	mpu6050->accel_x = 0;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f04f 0200 	mov.w	r2, #0
 80048b8:	601a      	str	r2, [r3, #0]
	mpu6050->accel_y = 0;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f04f 0200 	mov.w	r2, #0
 80048c0:	605a      	str	r2, [r3, #4]
	mpu6050->accel_z = 0;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f04f 0200 	mov.w	r2, #0
 80048c8:	609a      	str	r2, [r3, #8]

	mpu6050->temp = 0;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f04f 0200 	mov.w	r2, #0
 80048d0:	60da      	str	r2, [r3, #12]

	mpu6050->gyro_x = 0;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f04f 0200 	mov.w	r2, #0
 80048d8:	611a      	str	r2, [r3, #16]
	mpu6050->gyro_y = 0;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f04f 0200 	mov.w	r2, #0
 80048e0:	615a      	str	r2, [r3, #20]
	mpu6050->gyro_z = 0;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f04f 0200 	mov.w	r2, #0
 80048e8:	619a      	str	r2, [r3, #24]

	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDRESS | 0, PWRMNGT1_REG, 1, 0x00, 1, 100);
 80048ea:	2364      	movs	r3, #100	; 0x64
 80048ec:	9302      	str	r3, [sp, #8]
 80048ee:	2301      	movs	r3, #1
 80048f0:	9301      	str	r3, [sp, #4]
 80048f2:	2300      	movs	r3, #0
 80048f4:	9300      	str	r3, [sp, #0]
 80048f6:	2301      	movs	r3, #1
 80048f8:	226b      	movs	r2, #107	; 0x6b
 80048fa:	21d0      	movs	r1, #208	; 0xd0
 80048fc:	4804      	ldr	r0, [pc, #16]	; (8004910 <mpu6050_Init+0x6c>)
 80048fe:	f7fd fd6d 	bl	80023dc <HAL_I2C_Mem_Write>

	HAL_Delay(100);
 8004902:	2064      	movs	r0, #100	; 0x64
 8004904:	f7fd f958 	bl	8001bb8 <HAL_Delay>

	return;
 8004908:	bf00      	nop
}
 800490a:	3708      	adds	r7, #8
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}
 8004910:	2000078c 	.word	0x2000078c
 8004914:	00000000 	.word	0x00000000

08004918 <mpu6050_Get_Accel_Temp>:

	return;
}

void mpu6050_Get_Accel_Temp(MPU6050 *mpu6050)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b086      	sub	sp, #24
 800491c:	af04      	add	r7, sp, #16
 800491e:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(&MPU6050_I2C_PORT, MPU6050_ADDRESS | 0, ACCEL_XOUT_H_REG, 1, Rec_Data, 8, 1000);
 8004920:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004924:	9302      	str	r3, [sp, #8]
 8004926:	2308      	movs	r3, #8
 8004928:	9301      	str	r3, [sp, #4]
 800492a:	4b47      	ldr	r3, [pc, #284]	; (8004a48 <mpu6050_Get_Accel_Temp+0x130>)
 800492c:	9300      	str	r3, [sp, #0]
 800492e:	2301      	movs	r3, #1
 8004930:	223b      	movs	r2, #59	; 0x3b
 8004932:	21d0      	movs	r1, #208	; 0xd0
 8004934:	4845      	ldr	r0, [pc, #276]	; (8004a4c <mpu6050_Get_Accel_Temp+0x134>)
 8004936:	f7fd fe4b 	bl	80025d0 <HAL_I2C_Mem_Read>


	raw.accel_x = (Rec_Data[0] << 8 | Rec_Data [1]);
 800493a:	4b43      	ldr	r3, [pc, #268]	; (8004a48 <mpu6050_Get_Accel_Temp+0x130>)
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	021b      	lsls	r3, r3, #8
 8004940:	b21a      	sxth	r2, r3
 8004942:	4b41      	ldr	r3, [pc, #260]	; (8004a48 <mpu6050_Get_Accel_Temp+0x130>)
 8004944:	785b      	ldrb	r3, [r3, #1]
 8004946:	b21b      	sxth	r3, r3
 8004948:	4313      	orrs	r3, r2
 800494a:	b21a      	sxth	r2, r3
 800494c:	4b40      	ldr	r3, [pc, #256]	; (8004a50 <mpu6050_Get_Accel_Temp+0x138>)
 800494e:	801a      	strh	r2, [r3, #0]
	raw.accel_y = (Rec_Data[2] << 8 | Rec_Data [3]);
 8004950:	4b3d      	ldr	r3, [pc, #244]	; (8004a48 <mpu6050_Get_Accel_Temp+0x130>)
 8004952:	789b      	ldrb	r3, [r3, #2]
 8004954:	021b      	lsls	r3, r3, #8
 8004956:	b21a      	sxth	r2, r3
 8004958:	4b3b      	ldr	r3, [pc, #236]	; (8004a48 <mpu6050_Get_Accel_Temp+0x130>)
 800495a:	78db      	ldrb	r3, [r3, #3]
 800495c:	b21b      	sxth	r3, r3
 800495e:	4313      	orrs	r3, r2
 8004960:	b21a      	sxth	r2, r3
 8004962:	4b3b      	ldr	r3, [pc, #236]	; (8004a50 <mpu6050_Get_Accel_Temp+0x138>)
 8004964:	805a      	strh	r2, [r3, #2]
	raw.accel_z = (Rec_Data[4] << 8 | Rec_Data [5]);
 8004966:	4b38      	ldr	r3, [pc, #224]	; (8004a48 <mpu6050_Get_Accel_Temp+0x130>)
 8004968:	791b      	ldrb	r3, [r3, #4]
 800496a:	021b      	lsls	r3, r3, #8
 800496c:	b21a      	sxth	r2, r3
 800496e:	4b36      	ldr	r3, [pc, #216]	; (8004a48 <mpu6050_Get_Accel_Temp+0x130>)
 8004970:	795b      	ldrb	r3, [r3, #5]
 8004972:	b21b      	sxth	r3, r3
 8004974:	4313      	orrs	r3, r2
 8004976:	b21a      	sxth	r2, r3
 8004978:	4b35      	ldr	r3, [pc, #212]	; (8004a50 <mpu6050_Get_Accel_Temp+0x138>)
 800497a:	809a      	strh	r2, [r3, #4]

	raw.temp 	= (Rec_Data[6] << 8 | Rec_Data [7]);
 800497c:	4b32      	ldr	r3, [pc, #200]	; (8004a48 <mpu6050_Get_Accel_Temp+0x130>)
 800497e:	799b      	ldrb	r3, [r3, #6]
 8004980:	021b      	lsls	r3, r3, #8
 8004982:	b21a      	sxth	r2, r3
 8004984:	4b30      	ldr	r3, [pc, #192]	; (8004a48 <mpu6050_Get_Accel_Temp+0x130>)
 8004986:	79db      	ldrb	r3, [r3, #7]
 8004988:	b21b      	sxth	r3, r3
 800498a:	4313      	orrs	r3, r2
 800498c:	b21a      	sxth	r2, r3
 800498e:	4b30      	ldr	r3, [pc, #192]	; (8004a50 <mpu6050_Get_Accel_Temp+0x138>)
 8004990:	80da      	strh	r2, [r3, #6]

	mpu6050->accel_x = (float)raw.accel_x / 16384.0;
 8004992:	4b2f      	ldr	r3, [pc, #188]	; (8004a50 <mpu6050_Get_Accel_Temp+0x138>)
 8004994:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004998:	4618      	mov	r0, r3
 800499a:	f7fc f99f 	bl	8000cdc <__aeabi_i2f>
 800499e:	4603      	mov	r3, r0
 80049a0:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7fc faa1 	bl	8000eec <__aeabi_fdiv>
 80049aa:	4603      	mov	r3, r0
 80049ac:	461a      	mov	r2, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	601a      	str	r2, [r3, #0]
	mpu6050->accel_y = (float)raw.accel_y / 16384.0;
 80049b2:	4b27      	ldr	r3, [pc, #156]	; (8004a50 <mpu6050_Get_Accel_Temp+0x138>)
 80049b4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80049b8:	4618      	mov	r0, r3
 80049ba:	f7fc f98f 	bl	8000cdc <__aeabi_i2f>
 80049be:	4603      	mov	r3, r0
 80049c0:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80049c4:	4618      	mov	r0, r3
 80049c6:	f7fc fa91 	bl	8000eec <__aeabi_fdiv>
 80049ca:	4603      	mov	r3, r0
 80049cc:	461a      	mov	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	605a      	str	r2, [r3, #4]
	mpu6050->accel_z = (float)raw.accel_z / 16384.0;
 80049d2:	4b1f      	ldr	r3, [pc, #124]	; (8004a50 <mpu6050_Get_Accel_Temp+0x138>)
 80049d4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80049d8:	4618      	mov	r0, r3
 80049da:	f7fc f97f 	bl	8000cdc <__aeabi_i2f>
 80049de:	4603      	mov	r3, r0
 80049e0:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7fc fa81 	bl	8000eec <__aeabi_fdiv>
 80049ea:	4603      	mov	r3, r0
 80049ec:	461a      	mov	r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	609a      	str	r2, [r3, #8]

	mpu6050->temp 	 = (float)raw.temp    / 340.0 + 36.53;
 80049f2:	4b17      	ldr	r3, [pc, #92]	; (8004a50 <mpu6050_Get_Accel_Temp+0x138>)
 80049f4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80049f8:	4618      	mov	r0, r3
 80049fa:	f7fc f96f 	bl	8000cdc <__aeabi_i2f>
 80049fe:	4603      	mov	r3, r0
 8004a00:	4618      	mov	r0, r3
 8004a02:	f7fb fd11 	bl	8000428 <__aeabi_f2d>
 8004a06:	f04f 0200 	mov.w	r2, #0
 8004a0a:	4b12      	ldr	r3, [pc, #72]	; (8004a54 <mpu6050_Get_Accel_Temp+0x13c>)
 8004a0c:	f7fb fe8e 	bl	800072c <__aeabi_ddiv>
 8004a10:	4602      	mov	r2, r0
 8004a12:	460b      	mov	r3, r1
 8004a14:	4610      	mov	r0, r2
 8004a16:	4619      	mov	r1, r3
 8004a18:	a309      	add	r3, pc, #36	; (adr r3, 8004a40 <mpu6050_Get_Accel_Temp+0x128>)
 8004a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a1e:	f7fb fba5 	bl	800016c <__adddf3>
 8004a22:	4602      	mov	r2, r0
 8004a24:	460b      	mov	r3, r1
 8004a26:	4610      	mov	r0, r2
 8004a28:	4619      	mov	r1, r3
 8004a2a:	f7fc f84d 	bl	8000ac8 <__aeabi_d2f>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	60da      	str	r2, [r3, #12]

	return;
 8004a34:	bf00      	nop
}
 8004a36:	3708      	adds	r7, #8
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	f3af 8000 	nop.w
 8004a40:	0a3d70a4 	.word	0x0a3d70a4
 8004a44:	404243d7 	.word	0x404243d7
 8004a48:	200008bc 	.word	0x200008bc
 8004a4c:	2000078c 	.word	0x2000078c
 8004a50:	20000b80 	.word	0x20000b80
 8004a54:	40754000 	.word	0x40754000

08004a58 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8004a58:	b480      	push	{r7}
 8004a5a:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8004a5c:	bf00      	nop
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bc80      	pop	{r7}
 8004a62:	4770      	bx	lr

08004a64 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b086      	sub	sp, #24
 8004a68:	af04      	add	r7, sp, #16
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8004a6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a72:	9302      	str	r3, [sp, #8]
 8004a74:	2301      	movs	r3, #1
 8004a76:	9301      	str	r3, [sp, #4]
 8004a78:	1dfb      	adds	r3, r7, #7
 8004a7a:	9300      	str	r3, [sp, #0]
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	2200      	movs	r2, #0
 8004a80:	2178      	movs	r1, #120	; 0x78
 8004a82:	4803      	ldr	r0, [pc, #12]	; (8004a90 <ssd1306_WriteCommand+0x2c>)
 8004a84:	f7fd fcaa 	bl	80023dc <HAL_I2C_Mem_Write>
}
 8004a88:	bf00      	nop
 8004a8a:	3708      	adds	r7, #8
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	20000868 	.word	0x20000868

08004a94 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b086      	sub	sp, #24
 8004a98:	af04      	add	r7, sp, #16
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004aa6:	9202      	str	r2, [sp, #8]
 8004aa8:	9301      	str	r3, [sp, #4]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	9300      	str	r3, [sp, #0]
 8004aae:	2301      	movs	r3, #1
 8004ab0:	2240      	movs	r2, #64	; 0x40
 8004ab2:	2178      	movs	r1, #120	; 0x78
 8004ab4:	4803      	ldr	r0, [pc, #12]	; (8004ac4 <ssd1306_WriteData+0x30>)
 8004ab6:	f7fd fc91 	bl	80023dc <HAL_I2C_Mem_Write>
}
 8004aba:	bf00      	nop
 8004abc:	3708      	adds	r7, #8
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	20000868 	.word	0x20000868

08004ac8 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8004acc:	f7ff ffc4 	bl	8004a58 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8004ad0:	2064      	movs	r0, #100	; 0x64
 8004ad2:	f7fd f871 	bl	8001bb8 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8004ad6:	2000      	movs	r0, #0
 8004ad8:	f000 fb1a 	bl	8005110 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8004adc:	2020      	movs	r0, #32
 8004ade:	f7ff ffc1 	bl	8004a64 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8004ae2:	2000      	movs	r0, #0
 8004ae4:	f7ff ffbe 	bl	8004a64 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8004ae8:	20b0      	movs	r0, #176	; 0xb0
 8004aea:	f7ff ffbb 	bl	8004a64 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8004aee:	20c8      	movs	r0, #200	; 0xc8
 8004af0:	f7ff ffb8 	bl	8004a64 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8004af4:	2000      	movs	r0, #0
 8004af6:	f7ff ffb5 	bl	8004a64 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8004afa:	2010      	movs	r0, #16
 8004afc:	f7ff ffb2 	bl	8004a64 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8004b00:	2040      	movs	r0, #64	; 0x40
 8004b02:	f7ff ffaf 	bl	8004a64 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8004b06:	20ff      	movs	r0, #255	; 0xff
 8004b08:	f000 faef 	bl	80050ea <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8004b0c:	20a1      	movs	r0, #161	; 0xa1
 8004b0e:	f7ff ffa9 	bl	8004a64 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8004b12:	20a6      	movs	r0, #166	; 0xa6
 8004b14:	f7ff ffa6 	bl	8004a64 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8004b18:	20a8      	movs	r0, #168	; 0xa8
 8004b1a:	f7ff ffa3 	bl	8004a64 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8004b1e:	203f      	movs	r0, #63	; 0x3f
 8004b20:	f7ff ffa0 	bl	8004a64 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8004b24:	20a4      	movs	r0, #164	; 0xa4
 8004b26:	f7ff ff9d 	bl	8004a64 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8004b2a:	20d3      	movs	r0, #211	; 0xd3
 8004b2c:	f7ff ff9a 	bl	8004a64 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8004b30:	2000      	movs	r0, #0
 8004b32:	f7ff ff97 	bl	8004a64 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8004b36:	20d5      	movs	r0, #213	; 0xd5
 8004b38:	f7ff ff94 	bl	8004a64 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8004b3c:	20f0      	movs	r0, #240	; 0xf0
 8004b3e:	f7ff ff91 	bl	8004a64 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8004b42:	20d9      	movs	r0, #217	; 0xd9
 8004b44:	f7ff ff8e 	bl	8004a64 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8004b48:	2022      	movs	r0, #34	; 0x22
 8004b4a:	f7ff ff8b 	bl	8004a64 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8004b4e:	20da      	movs	r0, #218	; 0xda
 8004b50:	f7ff ff88 	bl	8004a64 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8004b54:	2012      	movs	r0, #18
 8004b56:	f7ff ff85 	bl	8004a64 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8004b5a:	20db      	movs	r0, #219	; 0xdb
 8004b5c:	f7ff ff82 	bl	8004a64 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8004b60:	2020      	movs	r0, #32
 8004b62:	f7ff ff7f 	bl	8004a64 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8004b66:	208d      	movs	r0, #141	; 0x8d
 8004b68:	f7ff ff7c 	bl	8004a64 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8004b6c:	2014      	movs	r0, #20
 8004b6e:	f7ff ff79 	bl	8004a64 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8004b72:	2001      	movs	r0, #1
 8004b74:	f000 facc 	bl	8005110 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8004b78:	2000      	movs	r0, #0
 8004b7a:	f000 f80f 	bl	8004b9c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8004b7e:	f000 f82f 	bl	8004be0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8004b82:	4b05      	ldr	r3, [pc, #20]	; (8004b98 <ssd1306_Init+0xd0>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8004b88:	4b03      	ldr	r3, [pc, #12]	; (8004b98 <ssd1306_Init+0xd0>)
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8004b8e:	4b02      	ldr	r3, [pc, #8]	; (8004b98 <ssd1306_Init+0xd0>)
 8004b90:	2201      	movs	r2, #1
 8004b92:	715a      	strb	r2, [r3, #5]
}
 8004b94:	bf00      	nop
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	200006e8 	.word	0x200006e8

08004b9c <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8004b9c:	b480      	push	{r7}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	60fb      	str	r3, [r7, #12]
 8004baa:	e00d      	b.n	8004bc8 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8004bac:	79fb      	ldrb	r3, [r7, #7]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d101      	bne.n	8004bb6 <ssd1306_Fill+0x1a>
 8004bb2:	2100      	movs	r1, #0
 8004bb4:	e000      	b.n	8004bb8 <ssd1306_Fill+0x1c>
 8004bb6:	21ff      	movs	r1, #255	; 0xff
 8004bb8:	4a08      	ldr	r2, [pc, #32]	; (8004bdc <ssd1306_Fill+0x40>)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	460a      	mov	r2, r1
 8004bc0:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	60fb      	str	r3, [r7, #12]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 8004bce:	d3ed      	bcc.n	8004bac <ssd1306_Fill+0x10>
    }
}
 8004bd0:	bf00      	nop
 8004bd2:	bf00      	nop
 8004bd4:	3714      	adds	r7, #20
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bc80      	pop	{r7}
 8004bda:	4770      	bx	lr
 8004bdc:	200002d8 	.word	0x200002d8

08004be0 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8004be6:	2300      	movs	r3, #0
 8004be8:	71fb      	strb	r3, [r7, #7]
 8004bea:	e01a      	b.n	8004c22 <ssd1306_UpdateScreen+0x42>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8004bec:	79fb      	ldrb	r3, [r7, #7]
 8004bee:	3b50      	subs	r3, #80	; 0x50
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7ff ff36 	bl	8004a64 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8004bf8:	2000      	movs	r0, #0
 8004bfa:	f7ff ff33 	bl	8004a64 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8004bfe:	2010      	movs	r0, #16
 8004c00:	f7ff ff30 	bl	8004a64 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8004c04:	79fa      	ldrb	r2, [r7, #7]
 8004c06:	4613      	mov	r3, r2
 8004c08:	019b      	lsls	r3, r3, #6
 8004c0a:	4413      	add	r3, r2
 8004c0c:	005b      	lsls	r3, r3, #1
 8004c0e:	461a      	mov	r2, r3
 8004c10:	4b08      	ldr	r3, [pc, #32]	; (8004c34 <ssd1306_UpdateScreen+0x54>)
 8004c12:	4413      	add	r3, r2
 8004c14:	2182      	movs	r1, #130	; 0x82
 8004c16:	4618      	mov	r0, r3
 8004c18:	f7ff ff3c 	bl	8004a94 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8004c1c:	79fb      	ldrb	r3, [r7, #7]
 8004c1e:	3301      	adds	r3, #1
 8004c20:	71fb      	strb	r3, [r7, #7]
 8004c22:	79fb      	ldrb	r3, [r7, #7]
 8004c24:	2b07      	cmp	r3, #7
 8004c26:	d9e1      	bls.n	8004bec <ssd1306_UpdateScreen+0xc>
    }
}
 8004c28:	bf00      	nop
 8004c2a:	bf00      	nop
 8004c2c:	3708      	adds	r7, #8
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	200002d8 	.word	0x200002d8

08004c38 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8004c38:	b490      	push	{r4, r7}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	4603      	mov	r3, r0
 8004c40:	71fb      	strb	r3, [r7, #7]
 8004c42:	460b      	mov	r3, r1
 8004c44:	71bb      	strb	r3, [r7, #6]
 8004c46:	4613      	mov	r3, r2
 8004c48:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8004c4a:	79fb      	ldrb	r3, [r7, #7]
 8004c4c:	2b81      	cmp	r3, #129	; 0x81
 8004c4e:	d854      	bhi.n	8004cfa <ssd1306_DrawPixel+0xc2>
 8004c50:	79bb      	ldrb	r3, [r7, #6]
 8004c52:	2b3f      	cmp	r3, #63	; 0x3f
 8004c54:	d851      	bhi.n	8004cfa <ssd1306_DrawPixel+0xc2>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8004c56:	4b2b      	ldr	r3, [pc, #172]	; (8004d04 <ssd1306_DrawPixel+0xcc>)
 8004c58:	791b      	ldrb	r3, [r3, #4]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d006      	beq.n	8004c6c <ssd1306_DrawPixel+0x34>
        color = (SSD1306_COLOR)!color;
 8004c5e:	797b      	ldrb	r3, [r7, #5]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	bf0c      	ite	eq
 8004c64:	2301      	moveq	r3, #1
 8004c66:	2300      	movne	r3, #0
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 8004c6c:	797b      	ldrb	r3, [r7, #5]
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d120      	bne.n	8004cb4 <ssd1306_DrawPixel+0x7c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8004c72:	79fa      	ldrb	r2, [r7, #7]
 8004c74:	79bb      	ldrb	r3, [r7, #6]
 8004c76:	08db      	lsrs	r3, r3, #3
 8004c78:	b2d8      	uxtb	r0, r3
 8004c7a:	4601      	mov	r1, r0
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	019b      	lsls	r3, r3, #6
 8004c80:	440b      	add	r3, r1
 8004c82:	005b      	lsls	r3, r3, #1
 8004c84:	4413      	add	r3, r2
 8004c86:	4a20      	ldr	r2, [pc, #128]	; (8004d08 <ssd1306_DrawPixel+0xd0>)
 8004c88:	5cd3      	ldrb	r3, [r2, r3]
 8004c8a:	b25a      	sxtb	r2, r3
 8004c8c:	79bb      	ldrb	r3, [r7, #6]
 8004c8e:	f003 0307 	and.w	r3, r3, #7
 8004c92:	2101      	movs	r1, #1
 8004c94:	fa01 f303 	lsl.w	r3, r1, r3
 8004c98:	b25b      	sxtb	r3, r3
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	b25c      	sxtb	r4, r3
 8004c9e:	79fa      	ldrb	r2, [r7, #7]
 8004ca0:	4601      	mov	r1, r0
 8004ca2:	460b      	mov	r3, r1
 8004ca4:	019b      	lsls	r3, r3, #6
 8004ca6:	440b      	add	r3, r1
 8004ca8:	005b      	lsls	r3, r3, #1
 8004caa:	4413      	add	r3, r2
 8004cac:	b2e1      	uxtb	r1, r4
 8004cae:	4a16      	ldr	r2, [pc, #88]	; (8004d08 <ssd1306_DrawPixel+0xd0>)
 8004cb0:	54d1      	strb	r1, [r2, r3]
 8004cb2:	e023      	b.n	8004cfc <ssd1306_DrawPixel+0xc4>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8004cb4:	79fa      	ldrb	r2, [r7, #7]
 8004cb6:	79bb      	ldrb	r3, [r7, #6]
 8004cb8:	08db      	lsrs	r3, r3, #3
 8004cba:	b2d8      	uxtb	r0, r3
 8004cbc:	4601      	mov	r1, r0
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	019b      	lsls	r3, r3, #6
 8004cc2:	440b      	add	r3, r1
 8004cc4:	005b      	lsls	r3, r3, #1
 8004cc6:	4413      	add	r3, r2
 8004cc8:	4a0f      	ldr	r2, [pc, #60]	; (8004d08 <ssd1306_DrawPixel+0xd0>)
 8004cca:	5cd3      	ldrb	r3, [r2, r3]
 8004ccc:	b25a      	sxtb	r2, r3
 8004cce:	79bb      	ldrb	r3, [r7, #6]
 8004cd0:	f003 0307 	and.w	r3, r3, #7
 8004cd4:	2101      	movs	r1, #1
 8004cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8004cda:	b25b      	sxtb	r3, r3
 8004cdc:	43db      	mvns	r3, r3
 8004cde:	b25b      	sxtb	r3, r3
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	b25c      	sxtb	r4, r3
 8004ce4:	79fa      	ldrb	r2, [r7, #7]
 8004ce6:	4601      	mov	r1, r0
 8004ce8:	460b      	mov	r3, r1
 8004cea:	019b      	lsls	r3, r3, #6
 8004cec:	440b      	add	r3, r1
 8004cee:	005b      	lsls	r3, r3, #1
 8004cf0:	4413      	add	r3, r2
 8004cf2:	b2e1      	uxtb	r1, r4
 8004cf4:	4a04      	ldr	r2, [pc, #16]	; (8004d08 <ssd1306_DrawPixel+0xd0>)
 8004cf6:	54d1      	strb	r1, [r2, r3]
 8004cf8:	e000      	b.n	8004cfc <ssd1306_DrawPixel+0xc4>
        return;
 8004cfa:	bf00      	nop
    }
}
 8004cfc:	3708      	adds	r7, #8
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bc90      	pop	{r4, r7}
 8004d02:	4770      	bx	lr
 8004d04:	200006e8 	.word	0x200006e8
 8004d08:	200002d8 	.word	0x200002d8

08004d0c <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8004d0c:	b590      	push	{r4, r7, lr}
 8004d0e:	b089      	sub	sp, #36	; 0x24
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	4604      	mov	r4, r0
 8004d14:	1d38      	adds	r0, r7, #4
 8004d16:	e880 0006 	stmia.w	r0, {r1, r2}
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	4623      	mov	r3, r4
 8004d1e:	73fb      	strb	r3, [r7, #15]
 8004d20:	4613      	mov	r3, r2
 8004d22:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8004d24:	7bfb      	ldrb	r3, [r7, #15]
 8004d26:	2b1f      	cmp	r3, #31
 8004d28:	d902      	bls.n	8004d30 <ssd1306_WriteChar+0x24>
 8004d2a:	7bfb      	ldrb	r3, [r7, #15]
 8004d2c:	2b7e      	cmp	r3, #126	; 0x7e
 8004d2e:	d901      	bls.n	8004d34 <ssd1306_WriteChar+0x28>
        return 0;
 8004d30:	2300      	movs	r3, #0
 8004d32:	e06d      	b.n	8004e10 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8004d34:	4b38      	ldr	r3, [pc, #224]	; (8004e18 <ssd1306_WriteChar+0x10c>)
 8004d36:	881b      	ldrh	r3, [r3, #0]
 8004d38:	461a      	mov	r2, r3
 8004d3a:	793b      	ldrb	r3, [r7, #4]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	2b82      	cmp	r3, #130	; 0x82
 8004d40:	dc06      	bgt.n	8004d50 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8004d42:	4b35      	ldr	r3, [pc, #212]	; (8004e18 <ssd1306_WriteChar+0x10c>)
 8004d44:	885b      	ldrh	r3, [r3, #2]
 8004d46:	461a      	mov	r2, r3
 8004d48:	797b      	ldrb	r3, [r7, #5]
 8004d4a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8004d4c:	2b40      	cmp	r3, #64	; 0x40
 8004d4e:	dd01      	ble.n	8004d54 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8004d50:	2300      	movs	r3, #0
 8004d52:	e05d      	b.n	8004e10 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8004d54:	2300      	movs	r3, #0
 8004d56:	61fb      	str	r3, [r7, #28]
 8004d58:	e04c      	b.n	8004df4 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8004d5a:	68ba      	ldr	r2, [r7, #8]
 8004d5c:	7bfb      	ldrb	r3, [r7, #15]
 8004d5e:	3b20      	subs	r3, #32
 8004d60:	7979      	ldrb	r1, [r7, #5]
 8004d62:	fb01 f303 	mul.w	r3, r1, r3
 8004d66:	4619      	mov	r1, r3
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	440b      	add	r3, r1
 8004d6c:	005b      	lsls	r3, r3, #1
 8004d6e:	4413      	add	r3, r2
 8004d70:	881b      	ldrh	r3, [r3, #0]
 8004d72:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8004d74:	2300      	movs	r3, #0
 8004d76:	61bb      	str	r3, [r7, #24]
 8004d78:	e034      	b.n	8004de4 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d012      	beq.n	8004db0 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8004d8a:	4b23      	ldr	r3, [pc, #140]	; (8004e18 <ssd1306_WriteChar+0x10c>)
 8004d8c:	881b      	ldrh	r3, [r3, #0]
 8004d8e:	b2da      	uxtb	r2, r3
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	4413      	add	r3, r2
 8004d96:	b2d8      	uxtb	r0, r3
 8004d98:	4b1f      	ldr	r3, [pc, #124]	; (8004e18 <ssd1306_WriteChar+0x10c>)
 8004d9a:	885b      	ldrh	r3, [r3, #2]
 8004d9c:	b2da      	uxtb	r2, r3
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	4413      	add	r3, r2
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	7bba      	ldrb	r2, [r7, #14]
 8004da8:	4619      	mov	r1, r3
 8004daa:	f7ff ff45 	bl	8004c38 <ssd1306_DrawPixel>
 8004dae:	e016      	b.n	8004dde <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8004db0:	4b19      	ldr	r3, [pc, #100]	; (8004e18 <ssd1306_WriteChar+0x10c>)
 8004db2:	881b      	ldrh	r3, [r3, #0]
 8004db4:	b2da      	uxtb	r2, r3
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	4413      	add	r3, r2
 8004dbc:	b2d8      	uxtb	r0, r3
 8004dbe:	4b16      	ldr	r3, [pc, #88]	; (8004e18 <ssd1306_WriteChar+0x10c>)
 8004dc0:	885b      	ldrh	r3, [r3, #2]
 8004dc2:	b2da      	uxtb	r2, r3
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	4413      	add	r3, r2
 8004dca:	b2d9      	uxtb	r1, r3
 8004dcc:	7bbb      	ldrb	r3, [r7, #14]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	bf0c      	ite	eq
 8004dd2:	2301      	moveq	r3, #1
 8004dd4:	2300      	movne	r3, #0
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	461a      	mov	r2, r3
 8004dda:	f7ff ff2d 	bl	8004c38 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	3301      	adds	r3, #1
 8004de2:	61bb      	str	r3, [r7, #24]
 8004de4:	793b      	ldrb	r3, [r7, #4]
 8004de6:	461a      	mov	r2, r3
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d3c5      	bcc.n	8004d7a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	3301      	adds	r3, #1
 8004df2:	61fb      	str	r3, [r7, #28]
 8004df4:	797b      	ldrb	r3, [r7, #5]
 8004df6:	461a      	mov	r2, r3
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d3ad      	bcc.n	8004d5a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8004dfe:	4b06      	ldr	r3, [pc, #24]	; (8004e18 <ssd1306_WriteChar+0x10c>)
 8004e00:	881a      	ldrh	r2, [r3, #0]
 8004e02:	793b      	ldrb	r3, [r7, #4]
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	4413      	add	r3, r2
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	4b03      	ldr	r3, [pc, #12]	; (8004e18 <ssd1306_WriteChar+0x10c>)
 8004e0c:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8004e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3724      	adds	r7, #36	; 0x24
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd90      	pop	{r4, r7, pc}
 8004e18:	200006e8 	.word	0x200006e8

08004e1c <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	1d38      	adds	r0, r7, #4
 8004e26:	e880 0006 	stmia.w	r0, {r1, r2}
 8004e2a:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8004e2c:	e012      	b.n	8004e54 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	7818      	ldrb	r0, [r3, #0]
 8004e32:	78fb      	ldrb	r3, [r7, #3]
 8004e34:	1d3a      	adds	r2, r7, #4
 8004e36:	ca06      	ldmia	r2, {r1, r2}
 8004e38:	f7ff ff68 	bl	8004d0c <ssd1306_WriteChar>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	461a      	mov	r2, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d002      	beq.n	8004e4e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	e008      	b.n	8004e60 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	3301      	adds	r3, #1
 8004e52:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d1e8      	bne.n	8004e2e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	781b      	ldrb	r3, [r3, #0]
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	4603      	mov	r3, r0
 8004e70:	460a      	mov	r2, r1
 8004e72:	71fb      	strb	r3, [r7, #7]
 8004e74:	4613      	mov	r3, r2
 8004e76:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8004e78:	79fb      	ldrb	r3, [r7, #7]
 8004e7a:	b29a      	uxth	r2, r3
 8004e7c:	4b05      	ldr	r3, [pc, #20]	; (8004e94 <ssd1306_SetCursor+0x2c>)
 8004e7e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8004e80:	79bb      	ldrb	r3, [r7, #6]
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	4b03      	ldr	r3, [pc, #12]	; (8004e94 <ssd1306_SetCursor+0x2c>)
 8004e86:	805a      	strh	r2, [r3, #2]
}
 8004e88:	bf00      	nop
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bc80      	pop	{r7}
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	200006e8 	.word	0x200006e8

08004e98 <ssd1306_Line>:

// Draw line by Bresenhem's algorithm
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8004e98:	b590      	push	{r4, r7, lr}
 8004e9a:	b089      	sub	sp, #36	; 0x24
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	4604      	mov	r4, r0
 8004ea0:	4608      	mov	r0, r1
 8004ea2:	4611      	mov	r1, r2
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	4623      	mov	r3, r4
 8004ea8:	71fb      	strb	r3, [r7, #7]
 8004eaa:	4603      	mov	r3, r0
 8004eac:	71bb      	strb	r3, [r7, #6]
 8004eae:	460b      	mov	r3, r1
 8004eb0:	717b      	strb	r3, [r7, #5]
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	713b      	strb	r3, [r7, #4]
  int32_t deltaX = abs(x2 - x1);
 8004eb6:	797a      	ldrb	r2, [r7, #5]
 8004eb8:	79fb      	ldrb	r3, [r7, #7]
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	bfb8      	it	lt
 8004ec0:	425b      	neglt	r3, r3
 8004ec2:	61bb      	str	r3, [r7, #24]
  int32_t deltaY = abs(y2 - y1);
 8004ec4:	793a      	ldrb	r2, [r7, #4]
 8004ec6:	79bb      	ldrb	r3, [r7, #6]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	bfb8      	it	lt
 8004ece:	425b      	neglt	r3, r3
 8004ed0:	617b      	str	r3, [r7, #20]
  int32_t signX = ((x1 < x2) ? 1 : -1);
 8004ed2:	79fa      	ldrb	r2, [r7, #7]
 8004ed4:	797b      	ldrb	r3, [r7, #5]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d201      	bcs.n	8004ede <ssd1306_Line+0x46>
 8004eda:	2301      	movs	r3, #1
 8004edc:	e001      	b.n	8004ee2 <ssd1306_Line+0x4a>
 8004ede:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ee2:	613b      	str	r3, [r7, #16]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 8004ee4:	79ba      	ldrb	r2, [r7, #6]
 8004ee6:	793b      	ldrb	r3, [r7, #4]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d201      	bcs.n	8004ef0 <ssd1306_Line+0x58>
 8004eec:	2301      	movs	r3, #1
 8004eee:	e001      	b.n	8004ef4 <ssd1306_Line+0x5c>
 8004ef0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ef4:	60fb      	str	r3, [r7, #12]
  int32_t error = deltaX - deltaY;
 8004ef6:	69ba      	ldr	r2, [r7, #24]
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	61fb      	str	r3, [r7, #28]
  int32_t error2;
    
  ssd1306_DrawPixel(x2, y2, color);
 8004efe:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8004f02:	7939      	ldrb	r1, [r7, #4]
 8004f04:	797b      	ldrb	r3, [r7, #5]
 8004f06:	4618      	mov	r0, r3
 8004f08:	f7ff fe96 	bl	8004c38 <ssd1306_DrawPixel>
    while((x1 != x2) || (y1 != y2))
 8004f0c:	e024      	b.n	8004f58 <ssd1306_Line+0xc0>
    {
    ssd1306_DrawPixel(x1, y1, color);
 8004f0e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8004f12:	79b9      	ldrb	r1, [r7, #6]
 8004f14:	79fb      	ldrb	r3, [r7, #7]
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7ff fe8e 	bl	8004c38 <ssd1306_DrawPixel>
    error2 = error * 2;
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	005b      	lsls	r3, r3, #1
 8004f20:	60bb      	str	r3, [r7, #8]
    if(error2 > -deltaY)
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	425b      	negs	r3, r3
 8004f26:	68ba      	ldr	r2, [r7, #8]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	dd08      	ble.n	8004f3e <ssd1306_Line+0xa6>
    {
      error -= deltaY;
 8004f2c:	69fa      	ldr	r2, [r7, #28]
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	61fb      	str	r3, [r7, #28]
      x1 += signX;
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	b2da      	uxtb	r2, r3
 8004f38:	79fb      	ldrb	r3, [r7, #7]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	71fb      	strb	r3, [r7, #7]
    else
    {
    /*nothing to do*/
    }
        
    if(error2 < deltaX)
 8004f3e:	68ba      	ldr	r2, [r7, #8]
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	da08      	bge.n	8004f58 <ssd1306_Line+0xc0>
    {
      error += deltaX;
 8004f46:	69fa      	ldr	r2, [r7, #28]
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	4413      	add	r3, r2
 8004f4c:	61fb      	str	r3, [r7, #28]
      y1 += signY;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	b2da      	uxtb	r2, r3
 8004f52:	79bb      	ldrb	r3, [r7, #6]
 8004f54:	4413      	add	r3, r2
 8004f56:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2))
 8004f58:	79fa      	ldrb	r2, [r7, #7]
 8004f5a:	797b      	ldrb	r3, [r7, #5]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d1d6      	bne.n	8004f0e <ssd1306_Line+0x76>
 8004f60:	79ba      	ldrb	r2, [r7, #6]
 8004f62:	793b      	ldrb	r3, [r7, #4]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d1d2      	bne.n	8004f0e <ssd1306_Line+0x76>
    else
    {
    /*nothing to do*/
    }
  }
  return;
 8004f68:	bf00      	nop
}
 8004f6a:	3724      	adds	r7, #36	; 0x24
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd90      	pop	{r4, r7, pc}

08004f70 <ssd1306_DrawCircle>:
    }
    
    return;
}
//Draw circle by Bresenhem's algorithm
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8004f70:	b590      	push	{r4, r7, lr}
 8004f72:	b087      	sub	sp, #28
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	4604      	mov	r4, r0
 8004f78:	4608      	mov	r0, r1
 8004f7a:	4611      	mov	r1, r2
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	4623      	mov	r3, r4
 8004f80:	71fb      	strb	r3, [r7, #7]
 8004f82:	4603      	mov	r3, r0
 8004f84:	71bb      	strb	r3, [r7, #6]
 8004f86:	460b      	mov	r3, r1
 8004f88:	717b      	strb	r3, [r7, #5]
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	713b      	strb	r3, [r7, #4]
  int32_t x = -par_r;
 8004f8e:	797b      	ldrb	r3, [r7, #5]
 8004f90:	425b      	negs	r3, r3
 8004f92:	617b      	str	r3, [r7, #20]
  int32_t y = 0;
 8004f94:	2300      	movs	r3, #0
 8004f96:	613b      	str	r3, [r7, #16]
  int32_t err = 2 - 2 * par_r;
 8004f98:	797b      	ldrb	r3, [r7, #5]
 8004f9a:	f1c3 0301 	rsb	r3, r3, #1
 8004f9e:	005b      	lsls	r3, r3, #1
 8004fa0:	60fb      	str	r3, [r7, #12]
  int32_t e2;

  if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 8004fa2:	79fb      	ldrb	r3, [r7, #7]
 8004fa4:	2b81      	cmp	r3, #129	; 0x81
 8004fa6:	d865      	bhi.n	8005074 <ssd1306_DrawCircle+0x104>
 8004fa8:	79bb      	ldrb	r3, [r7, #6]
 8004faa:	2b3f      	cmp	r3, #63	; 0x3f
 8004fac:	d862      	bhi.n	8005074 <ssd1306_DrawCircle+0x104>
    return;
  }

    do {
      ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	79fa      	ldrb	r2, [r7, #7]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	b2d8      	uxtb	r0, r3
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	b2da      	uxtb	r2, r3
 8004fbc:	79bb      	ldrb	r3, [r7, #6]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	793a      	ldrb	r2, [r7, #4]
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	f7ff fe37 	bl	8004c38 <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	b2da      	uxtb	r2, r3
 8004fce:	79fb      	ldrb	r3, [r7, #7]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	b2d8      	uxtb	r0, r3
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	b2da      	uxtb	r2, r3
 8004fd8:	79bb      	ldrb	r3, [r7, #6]
 8004fda:	4413      	add	r3, r2
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	793a      	ldrb	r2, [r7, #4]
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	f7ff fe29 	bl	8004c38 <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	b2da      	uxtb	r2, r3
 8004fea:	79fb      	ldrb	r3, [r7, #7]
 8004fec:	4413      	add	r3, r2
 8004fee:	b2d8      	uxtb	r0, r3
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	79ba      	ldrb	r2, [r7, #6]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	793a      	ldrb	r2, [r7, #4]
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	f7ff fe1b 	bl	8004c38 <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	b2db      	uxtb	r3, r3
 8005006:	79fa      	ldrb	r2, [r7, #7]
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	b2d8      	uxtb	r0, r3
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	b2db      	uxtb	r3, r3
 8005010:	79ba      	ldrb	r2, [r7, #6]
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	b2db      	uxtb	r3, r3
 8005016:	793a      	ldrb	r2, [r7, #4]
 8005018:	4619      	mov	r1, r3
 800501a:	f7ff fe0d 	bl	8004c38 <ssd1306_DrawPixel>
        e2 = err;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	60bb      	str	r3, [r7, #8]
        if (e2 <= y) {
 8005022:	68ba      	ldr	r2, [r7, #8]
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	429a      	cmp	r2, r3
 8005028:	dc13      	bgt.n	8005052 <ssd1306_DrawCircle+0xe2>
            y++;
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	3301      	adds	r3, #1
 800502e:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	005b      	lsls	r3, r3, #1
 8005034:	3301      	adds	r3, #1
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	4413      	add	r3, r2
 800503a:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	425b      	negs	r3, r3
 8005040:	693a      	ldr	r2, [r7, #16]
 8005042:	429a      	cmp	r2, r3
 8005044:	d105      	bne.n	8005052 <ssd1306_DrawCircle+0xe2>
 8005046:	68ba      	ldr	r2, [r7, #8]
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	429a      	cmp	r2, r3
 800504c:	dc01      	bgt.n	8005052 <ssd1306_DrawCircle+0xe2>
              e2 = 0;
 800504e:	2300      	movs	r3, #0
 8005050:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          /*nothing to do*/
        }
        if(e2 > x) {
 8005052:	68ba      	ldr	r2, [r7, #8]
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	429a      	cmp	r2, r3
 8005058:	dd08      	ble.n	800506c <ssd1306_DrawCircle+0xfc>
          x++;
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	3301      	adds	r3, #1
 800505e:	617b      	str	r3, [r7, #20]
          err = err + (x * 2 + 1);
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	005b      	lsls	r3, r3, #1
 8005064:	3301      	adds	r3, #1
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	4413      	add	r3, r2
 800506a:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          /*nothing to do*/
        }
    } while(x <= 0);
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	2b00      	cmp	r3, #0
 8005070:	dd9d      	ble.n	8004fae <ssd1306_DrawCircle+0x3e>

    return;
 8005072:	e000      	b.n	8005076 <ssd1306_DrawCircle+0x106>
    return;
 8005074:	bf00      	nop
}
 8005076:	371c      	adds	r7, #28
 8005078:	46bd      	mov	sp, r7
 800507a:	bd90      	pop	{r4, r7, pc}

0800507c <ssd1306_DrawRectangle>:

//Draw rectangle
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 800507c:	b590      	push	{r4, r7, lr}
 800507e:	b085      	sub	sp, #20
 8005080:	af02      	add	r7, sp, #8
 8005082:	4604      	mov	r4, r0
 8005084:	4608      	mov	r0, r1
 8005086:	4611      	mov	r1, r2
 8005088:	461a      	mov	r2, r3
 800508a:	4623      	mov	r3, r4
 800508c:	71fb      	strb	r3, [r7, #7]
 800508e:	4603      	mov	r3, r0
 8005090:	71bb      	strb	r3, [r7, #6]
 8005092:	460b      	mov	r3, r1
 8005094:	717b      	strb	r3, [r7, #5]
 8005096:	4613      	mov	r3, r2
 8005098:	713b      	strb	r3, [r7, #4]
  ssd1306_Line(x1,y1,x2,y1,color);
 800509a:	79bc      	ldrb	r4, [r7, #6]
 800509c:	797a      	ldrb	r2, [r7, #5]
 800509e:	79b9      	ldrb	r1, [r7, #6]
 80050a0:	79f8      	ldrb	r0, [r7, #7]
 80050a2:	7e3b      	ldrb	r3, [r7, #24]
 80050a4:	9300      	str	r3, [sp, #0]
 80050a6:	4623      	mov	r3, r4
 80050a8:	f7ff fef6 	bl	8004e98 <ssd1306_Line>
  ssd1306_Line(x2,y1,x2,y2,color);
 80050ac:	793c      	ldrb	r4, [r7, #4]
 80050ae:	797a      	ldrb	r2, [r7, #5]
 80050b0:	79b9      	ldrb	r1, [r7, #6]
 80050b2:	7978      	ldrb	r0, [r7, #5]
 80050b4:	7e3b      	ldrb	r3, [r7, #24]
 80050b6:	9300      	str	r3, [sp, #0]
 80050b8:	4623      	mov	r3, r4
 80050ba:	f7ff feed 	bl	8004e98 <ssd1306_Line>
  ssd1306_Line(x2,y2,x1,y2,color);
 80050be:	793c      	ldrb	r4, [r7, #4]
 80050c0:	79fa      	ldrb	r2, [r7, #7]
 80050c2:	7939      	ldrb	r1, [r7, #4]
 80050c4:	7978      	ldrb	r0, [r7, #5]
 80050c6:	7e3b      	ldrb	r3, [r7, #24]
 80050c8:	9300      	str	r3, [sp, #0]
 80050ca:	4623      	mov	r3, r4
 80050cc:	f7ff fee4 	bl	8004e98 <ssd1306_Line>
  ssd1306_Line(x1,y2,x1,y1,color);
 80050d0:	79bc      	ldrb	r4, [r7, #6]
 80050d2:	79fa      	ldrb	r2, [r7, #7]
 80050d4:	7939      	ldrb	r1, [r7, #4]
 80050d6:	79f8      	ldrb	r0, [r7, #7]
 80050d8:	7e3b      	ldrb	r3, [r7, #24]
 80050da:	9300      	str	r3, [sp, #0]
 80050dc:	4623      	mov	r3, r4
 80050de:	f7ff fedb 	bl	8004e98 <ssd1306_Line>

  return;
 80050e2:	bf00      	nop
}
 80050e4:	370c      	adds	r7, #12
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd90      	pop	{r4, r7, pc}

080050ea <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 80050ea:	b580      	push	{r7, lr}
 80050ec:	b084      	sub	sp, #16
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	4603      	mov	r3, r0
 80050f2:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80050f4:	2381      	movs	r3, #129	; 0x81
 80050f6:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80050f8:	7bfb      	ldrb	r3, [r7, #15]
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7ff fcb2 	bl	8004a64 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8005100:	79fb      	ldrb	r3, [r7, #7]
 8005102:	4618      	mov	r0, r3
 8005104:	f7ff fcae 	bl	8004a64 <ssd1306_WriteCommand>
}
 8005108:	bf00      	nop
 800510a:	3710      	adds	r7, #16
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	4603      	mov	r3, r0
 8005118:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800511a:	79fb      	ldrb	r3, [r7, #7]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d005      	beq.n	800512c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8005120:	23af      	movs	r3, #175	; 0xaf
 8005122:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8005124:	4b08      	ldr	r3, [pc, #32]	; (8005148 <ssd1306_SetDisplayOn+0x38>)
 8005126:	2201      	movs	r2, #1
 8005128:	719a      	strb	r2, [r3, #6]
 800512a:	e004      	b.n	8005136 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 800512c:	23ae      	movs	r3, #174	; 0xae
 800512e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8005130:	4b05      	ldr	r3, [pc, #20]	; (8005148 <ssd1306_SetDisplayOn+0x38>)
 8005132:	2200      	movs	r2, #0
 8005134:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 8005136:	7bfb      	ldrb	r3, [r7, #15]
 8005138:	4618      	mov	r0, r3
 800513a:	f7ff fc93 	bl	8004a64 <ssd1306_WriteCommand>
}
 800513e:	bf00      	nop
 8005140:	3710      	adds	r7, #16
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	200006e8 	.word	0x200006e8

0800514c <__errno>:
 800514c:	4b01      	ldr	r3, [pc, #4]	; (8005154 <__errno+0x8>)
 800514e:	6818      	ldr	r0, [r3, #0]
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	200000a8 	.word	0x200000a8

08005158 <__libc_init_array>:
 8005158:	b570      	push	{r4, r5, r6, lr}
 800515a:	2600      	movs	r6, #0
 800515c:	4d0c      	ldr	r5, [pc, #48]	; (8005190 <__libc_init_array+0x38>)
 800515e:	4c0d      	ldr	r4, [pc, #52]	; (8005194 <__libc_init_array+0x3c>)
 8005160:	1b64      	subs	r4, r4, r5
 8005162:	10a4      	asrs	r4, r4, #2
 8005164:	42a6      	cmp	r6, r4
 8005166:	d109      	bne.n	800517c <__libc_init_array+0x24>
 8005168:	f004 fa38 	bl	80095dc <_init>
 800516c:	2600      	movs	r6, #0
 800516e:	4d0a      	ldr	r5, [pc, #40]	; (8005198 <__libc_init_array+0x40>)
 8005170:	4c0a      	ldr	r4, [pc, #40]	; (800519c <__libc_init_array+0x44>)
 8005172:	1b64      	subs	r4, r4, r5
 8005174:	10a4      	asrs	r4, r4, #2
 8005176:	42a6      	cmp	r6, r4
 8005178:	d105      	bne.n	8005186 <__libc_init_array+0x2e>
 800517a:	bd70      	pop	{r4, r5, r6, pc}
 800517c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005180:	4798      	blx	r3
 8005182:	3601      	adds	r6, #1
 8005184:	e7ee      	b.n	8005164 <__libc_init_array+0xc>
 8005186:	f855 3b04 	ldr.w	r3, [r5], #4
 800518a:	4798      	blx	r3
 800518c:	3601      	adds	r6, #1
 800518e:	e7f2      	b.n	8005176 <__libc_init_array+0x1e>
 8005190:	0800bd68 	.word	0x0800bd68
 8005194:	0800bd68 	.word	0x0800bd68
 8005198:	0800bd68 	.word	0x0800bd68
 800519c:	0800bd6c 	.word	0x0800bd6c

080051a0 <memcpy>:
 80051a0:	440a      	add	r2, r1
 80051a2:	4291      	cmp	r1, r2
 80051a4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80051a8:	d100      	bne.n	80051ac <memcpy+0xc>
 80051aa:	4770      	bx	lr
 80051ac:	b510      	push	{r4, lr}
 80051ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051b2:	4291      	cmp	r1, r2
 80051b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051b8:	d1f9      	bne.n	80051ae <memcpy+0xe>
 80051ba:	bd10      	pop	{r4, pc}

080051bc <memset>:
 80051bc:	4603      	mov	r3, r0
 80051be:	4402      	add	r2, r0
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d100      	bne.n	80051c6 <memset+0xa>
 80051c4:	4770      	bx	lr
 80051c6:	f803 1b01 	strb.w	r1, [r3], #1
 80051ca:	e7f9      	b.n	80051c0 <memset+0x4>

080051cc <__cvt>:
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051d2:	461f      	mov	r7, r3
 80051d4:	bfbb      	ittet	lt
 80051d6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80051da:	461f      	movlt	r7, r3
 80051dc:	2300      	movge	r3, #0
 80051de:	232d      	movlt	r3, #45	; 0x2d
 80051e0:	b088      	sub	sp, #32
 80051e2:	4614      	mov	r4, r2
 80051e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80051e6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80051e8:	7013      	strb	r3, [r2, #0]
 80051ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80051ec:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80051f0:	f023 0820 	bic.w	r8, r3, #32
 80051f4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80051f8:	d005      	beq.n	8005206 <__cvt+0x3a>
 80051fa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80051fe:	d100      	bne.n	8005202 <__cvt+0x36>
 8005200:	3501      	adds	r5, #1
 8005202:	2302      	movs	r3, #2
 8005204:	e000      	b.n	8005208 <__cvt+0x3c>
 8005206:	2303      	movs	r3, #3
 8005208:	aa07      	add	r2, sp, #28
 800520a:	9204      	str	r2, [sp, #16]
 800520c:	aa06      	add	r2, sp, #24
 800520e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005212:	e9cd 3500 	strd	r3, r5, [sp]
 8005216:	4622      	mov	r2, r4
 8005218:	463b      	mov	r3, r7
 800521a:	f000 fce5 	bl	8005be8 <_dtoa_r>
 800521e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005222:	4606      	mov	r6, r0
 8005224:	d102      	bne.n	800522c <__cvt+0x60>
 8005226:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005228:	07db      	lsls	r3, r3, #31
 800522a:	d522      	bpl.n	8005272 <__cvt+0xa6>
 800522c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005230:	eb06 0905 	add.w	r9, r6, r5
 8005234:	d110      	bne.n	8005258 <__cvt+0x8c>
 8005236:	7833      	ldrb	r3, [r6, #0]
 8005238:	2b30      	cmp	r3, #48	; 0x30
 800523a:	d10a      	bne.n	8005252 <__cvt+0x86>
 800523c:	2200      	movs	r2, #0
 800523e:	2300      	movs	r3, #0
 8005240:	4620      	mov	r0, r4
 8005242:	4639      	mov	r1, r7
 8005244:	f7fb fbb0 	bl	80009a8 <__aeabi_dcmpeq>
 8005248:	b918      	cbnz	r0, 8005252 <__cvt+0x86>
 800524a:	f1c5 0501 	rsb	r5, r5, #1
 800524e:	f8ca 5000 	str.w	r5, [sl]
 8005252:	f8da 3000 	ldr.w	r3, [sl]
 8005256:	4499      	add	r9, r3
 8005258:	2200      	movs	r2, #0
 800525a:	2300      	movs	r3, #0
 800525c:	4620      	mov	r0, r4
 800525e:	4639      	mov	r1, r7
 8005260:	f7fb fba2 	bl	80009a8 <__aeabi_dcmpeq>
 8005264:	b108      	cbz	r0, 800526a <__cvt+0x9e>
 8005266:	f8cd 901c 	str.w	r9, [sp, #28]
 800526a:	2230      	movs	r2, #48	; 0x30
 800526c:	9b07      	ldr	r3, [sp, #28]
 800526e:	454b      	cmp	r3, r9
 8005270:	d307      	bcc.n	8005282 <__cvt+0xb6>
 8005272:	4630      	mov	r0, r6
 8005274:	9b07      	ldr	r3, [sp, #28]
 8005276:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005278:	1b9b      	subs	r3, r3, r6
 800527a:	6013      	str	r3, [r2, #0]
 800527c:	b008      	add	sp, #32
 800527e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005282:	1c59      	adds	r1, r3, #1
 8005284:	9107      	str	r1, [sp, #28]
 8005286:	701a      	strb	r2, [r3, #0]
 8005288:	e7f0      	b.n	800526c <__cvt+0xa0>

0800528a <__exponent>:
 800528a:	4603      	mov	r3, r0
 800528c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800528e:	2900      	cmp	r1, #0
 8005290:	f803 2b02 	strb.w	r2, [r3], #2
 8005294:	bfb6      	itet	lt
 8005296:	222d      	movlt	r2, #45	; 0x2d
 8005298:	222b      	movge	r2, #43	; 0x2b
 800529a:	4249      	neglt	r1, r1
 800529c:	2909      	cmp	r1, #9
 800529e:	7042      	strb	r2, [r0, #1]
 80052a0:	dd2b      	ble.n	80052fa <__exponent+0x70>
 80052a2:	f10d 0407 	add.w	r4, sp, #7
 80052a6:	46a4      	mov	ip, r4
 80052a8:	270a      	movs	r7, #10
 80052aa:	fb91 f6f7 	sdiv	r6, r1, r7
 80052ae:	460a      	mov	r2, r1
 80052b0:	46a6      	mov	lr, r4
 80052b2:	fb07 1516 	mls	r5, r7, r6, r1
 80052b6:	2a63      	cmp	r2, #99	; 0x63
 80052b8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80052bc:	4631      	mov	r1, r6
 80052be:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80052c2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80052c6:	dcf0      	bgt.n	80052aa <__exponent+0x20>
 80052c8:	3130      	adds	r1, #48	; 0x30
 80052ca:	f1ae 0502 	sub.w	r5, lr, #2
 80052ce:	f804 1c01 	strb.w	r1, [r4, #-1]
 80052d2:	4629      	mov	r1, r5
 80052d4:	1c44      	adds	r4, r0, #1
 80052d6:	4561      	cmp	r1, ip
 80052d8:	d30a      	bcc.n	80052f0 <__exponent+0x66>
 80052da:	f10d 0209 	add.w	r2, sp, #9
 80052de:	eba2 020e 	sub.w	r2, r2, lr
 80052e2:	4565      	cmp	r5, ip
 80052e4:	bf88      	it	hi
 80052e6:	2200      	movhi	r2, #0
 80052e8:	4413      	add	r3, r2
 80052ea:	1a18      	subs	r0, r3, r0
 80052ec:	b003      	add	sp, #12
 80052ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052f0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80052f4:	f804 2f01 	strb.w	r2, [r4, #1]!
 80052f8:	e7ed      	b.n	80052d6 <__exponent+0x4c>
 80052fa:	2330      	movs	r3, #48	; 0x30
 80052fc:	3130      	adds	r1, #48	; 0x30
 80052fe:	7083      	strb	r3, [r0, #2]
 8005300:	70c1      	strb	r1, [r0, #3]
 8005302:	1d03      	adds	r3, r0, #4
 8005304:	e7f1      	b.n	80052ea <__exponent+0x60>
	...

08005308 <_printf_float>:
 8005308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800530c:	b091      	sub	sp, #68	; 0x44
 800530e:	460c      	mov	r4, r1
 8005310:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005314:	4616      	mov	r6, r2
 8005316:	461f      	mov	r7, r3
 8005318:	4605      	mov	r5, r0
 800531a:	f001 fa53 	bl	80067c4 <_localeconv_r>
 800531e:	6803      	ldr	r3, [r0, #0]
 8005320:	4618      	mov	r0, r3
 8005322:	9309      	str	r3, [sp, #36]	; 0x24
 8005324:	f7fa ff14 	bl	8000150 <strlen>
 8005328:	2300      	movs	r3, #0
 800532a:	930e      	str	r3, [sp, #56]	; 0x38
 800532c:	f8d8 3000 	ldr.w	r3, [r8]
 8005330:	900a      	str	r0, [sp, #40]	; 0x28
 8005332:	3307      	adds	r3, #7
 8005334:	f023 0307 	bic.w	r3, r3, #7
 8005338:	f103 0208 	add.w	r2, r3, #8
 800533c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005340:	f8d4 b000 	ldr.w	fp, [r4]
 8005344:	f8c8 2000 	str.w	r2, [r8]
 8005348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800534c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005350:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005354:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005358:	930b      	str	r3, [sp, #44]	; 0x2c
 800535a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800535e:	4640      	mov	r0, r8
 8005360:	4b9c      	ldr	r3, [pc, #624]	; (80055d4 <_printf_float+0x2cc>)
 8005362:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005364:	f7fb fb52 	bl	8000a0c <__aeabi_dcmpun>
 8005368:	bb70      	cbnz	r0, 80053c8 <_printf_float+0xc0>
 800536a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800536e:	4640      	mov	r0, r8
 8005370:	4b98      	ldr	r3, [pc, #608]	; (80055d4 <_printf_float+0x2cc>)
 8005372:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005374:	f7fb fb2c 	bl	80009d0 <__aeabi_dcmple>
 8005378:	bb30      	cbnz	r0, 80053c8 <_printf_float+0xc0>
 800537a:	2200      	movs	r2, #0
 800537c:	2300      	movs	r3, #0
 800537e:	4640      	mov	r0, r8
 8005380:	4651      	mov	r1, sl
 8005382:	f7fb fb1b 	bl	80009bc <__aeabi_dcmplt>
 8005386:	b110      	cbz	r0, 800538e <_printf_float+0x86>
 8005388:	232d      	movs	r3, #45	; 0x2d
 800538a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800538e:	4b92      	ldr	r3, [pc, #584]	; (80055d8 <_printf_float+0x2d0>)
 8005390:	4892      	ldr	r0, [pc, #584]	; (80055dc <_printf_float+0x2d4>)
 8005392:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005396:	bf94      	ite	ls
 8005398:	4698      	movls	r8, r3
 800539a:	4680      	movhi	r8, r0
 800539c:	2303      	movs	r3, #3
 800539e:	f04f 0a00 	mov.w	sl, #0
 80053a2:	6123      	str	r3, [r4, #16]
 80053a4:	f02b 0304 	bic.w	r3, fp, #4
 80053a8:	6023      	str	r3, [r4, #0]
 80053aa:	4633      	mov	r3, r6
 80053ac:	4621      	mov	r1, r4
 80053ae:	4628      	mov	r0, r5
 80053b0:	9700      	str	r7, [sp, #0]
 80053b2:	aa0f      	add	r2, sp, #60	; 0x3c
 80053b4:	f000 f9d4 	bl	8005760 <_printf_common>
 80053b8:	3001      	adds	r0, #1
 80053ba:	f040 8090 	bne.w	80054de <_printf_float+0x1d6>
 80053be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053c2:	b011      	add	sp, #68	; 0x44
 80053c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053c8:	4642      	mov	r2, r8
 80053ca:	4653      	mov	r3, sl
 80053cc:	4640      	mov	r0, r8
 80053ce:	4651      	mov	r1, sl
 80053d0:	f7fb fb1c 	bl	8000a0c <__aeabi_dcmpun>
 80053d4:	b148      	cbz	r0, 80053ea <_printf_float+0xe2>
 80053d6:	f1ba 0f00 	cmp.w	sl, #0
 80053da:	bfb8      	it	lt
 80053dc:	232d      	movlt	r3, #45	; 0x2d
 80053de:	4880      	ldr	r0, [pc, #512]	; (80055e0 <_printf_float+0x2d8>)
 80053e0:	bfb8      	it	lt
 80053e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80053e6:	4b7f      	ldr	r3, [pc, #508]	; (80055e4 <_printf_float+0x2dc>)
 80053e8:	e7d3      	b.n	8005392 <_printf_float+0x8a>
 80053ea:	6863      	ldr	r3, [r4, #4]
 80053ec:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80053f0:	1c5a      	adds	r2, r3, #1
 80053f2:	d142      	bne.n	800547a <_printf_float+0x172>
 80053f4:	2306      	movs	r3, #6
 80053f6:	6063      	str	r3, [r4, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	9206      	str	r2, [sp, #24]
 80053fc:	aa0e      	add	r2, sp, #56	; 0x38
 80053fe:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005402:	aa0d      	add	r2, sp, #52	; 0x34
 8005404:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005408:	9203      	str	r2, [sp, #12]
 800540a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800540e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005412:	6023      	str	r3, [r4, #0]
 8005414:	6863      	ldr	r3, [r4, #4]
 8005416:	4642      	mov	r2, r8
 8005418:	9300      	str	r3, [sp, #0]
 800541a:	4628      	mov	r0, r5
 800541c:	4653      	mov	r3, sl
 800541e:	910b      	str	r1, [sp, #44]	; 0x2c
 8005420:	f7ff fed4 	bl	80051cc <__cvt>
 8005424:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005426:	4680      	mov	r8, r0
 8005428:	2947      	cmp	r1, #71	; 0x47
 800542a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800542c:	d108      	bne.n	8005440 <_printf_float+0x138>
 800542e:	1cc8      	adds	r0, r1, #3
 8005430:	db02      	blt.n	8005438 <_printf_float+0x130>
 8005432:	6863      	ldr	r3, [r4, #4]
 8005434:	4299      	cmp	r1, r3
 8005436:	dd40      	ble.n	80054ba <_printf_float+0x1b2>
 8005438:	f1a9 0902 	sub.w	r9, r9, #2
 800543c:	fa5f f989 	uxtb.w	r9, r9
 8005440:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005444:	d81f      	bhi.n	8005486 <_printf_float+0x17e>
 8005446:	464a      	mov	r2, r9
 8005448:	3901      	subs	r1, #1
 800544a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800544e:	910d      	str	r1, [sp, #52]	; 0x34
 8005450:	f7ff ff1b 	bl	800528a <__exponent>
 8005454:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005456:	4682      	mov	sl, r0
 8005458:	1813      	adds	r3, r2, r0
 800545a:	2a01      	cmp	r2, #1
 800545c:	6123      	str	r3, [r4, #16]
 800545e:	dc02      	bgt.n	8005466 <_printf_float+0x15e>
 8005460:	6822      	ldr	r2, [r4, #0]
 8005462:	07d2      	lsls	r2, r2, #31
 8005464:	d501      	bpl.n	800546a <_printf_float+0x162>
 8005466:	3301      	adds	r3, #1
 8005468:	6123      	str	r3, [r4, #16]
 800546a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800546e:	2b00      	cmp	r3, #0
 8005470:	d09b      	beq.n	80053aa <_printf_float+0xa2>
 8005472:	232d      	movs	r3, #45	; 0x2d
 8005474:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005478:	e797      	b.n	80053aa <_printf_float+0xa2>
 800547a:	2947      	cmp	r1, #71	; 0x47
 800547c:	d1bc      	bne.n	80053f8 <_printf_float+0xf0>
 800547e:	2b00      	cmp	r3, #0
 8005480:	d1ba      	bne.n	80053f8 <_printf_float+0xf0>
 8005482:	2301      	movs	r3, #1
 8005484:	e7b7      	b.n	80053f6 <_printf_float+0xee>
 8005486:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800548a:	d118      	bne.n	80054be <_printf_float+0x1b6>
 800548c:	2900      	cmp	r1, #0
 800548e:	6863      	ldr	r3, [r4, #4]
 8005490:	dd0b      	ble.n	80054aa <_printf_float+0x1a2>
 8005492:	6121      	str	r1, [r4, #16]
 8005494:	b913      	cbnz	r3, 800549c <_printf_float+0x194>
 8005496:	6822      	ldr	r2, [r4, #0]
 8005498:	07d0      	lsls	r0, r2, #31
 800549a:	d502      	bpl.n	80054a2 <_printf_float+0x19a>
 800549c:	3301      	adds	r3, #1
 800549e:	440b      	add	r3, r1
 80054a0:	6123      	str	r3, [r4, #16]
 80054a2:	f04f 0a00 	mov.w	sl, #0
 80054a6:	65a1      	str	r1, [r4, #88]	; 0x58
 80054a8:	e7df      	b.n	800546a <_printf_float+0x162>
 80054aa:	b913      	cbnz	r3, 80054b2 <_printf_float+0x1aa>
 80054ac:	6822      	ldr	r2, [r4, #0]
 80054ae:	07d2      	lsls	r2, r2, #31
 80054b0:	d501      	bpl.n	80054b6 <_printf_float+0x1ae>
 80054b2:	3302      	adds	r3, #2
 80054b4:	e7f4      	b.n	80054a0 <_printf_float+0x198>
 80054b6:	2301      	movs	r3, #1
 80054b8:	e7f2      	b.n	80054a0 <_printf_float+0x198>
 80054ba:	f04f 0967 	mov.w	r9, #103	; 0x67
 80054be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054c0:	4299      	cmp	r1, r3
 80054c2:	db05      	blt.n	80054d0 <_printf_float+0x1c8>
 80054c4:	6823      	ldr	r3, [r4, #0]
 80054c6:	6121      	str	r1, [r4, #16]
 80054c8:	07d8      	lsls	r0, r3, #31
 80054ca:	d5ea      	bpl.n	80054a2 <_printf_float+0x19a>
 80054cc:	1c4b      	adds	r3, r1, #1
 80054ce:	e7e7      	b.n	80054a0 <_printf_float+0x198>
 80054d0:	2900      	cmp	r1, #0
 80054d2:	bfcc      	ite	gt
 80054d4:	2201      	movgt	r2, #1
 80054d6:	f1c1 0202 	rsble	r2, r1, #2
 80054da:	4413      	add	r3, r2
 80054dc:	e7e0      	b.n	80054a0 <_printf_float+0x198>
 80054de:	6823      	ldr	r3, [r4, #0]
 80054e0:	055a      	lsls	r2, r3, #21
 80054e2:	d407      	bmi.n	80054f4 <_printf_float+0x1ec>
 80054e4:	6923      	ldr	r3, [r4, #16]
 80054e6:	4642      	mov	r2, r8
 80054e8:	4631      	mov	r1, r6
 80054ea:	4628      	mov	r0, r5
 80054ec:	47b8      	blx	r7
 80054ee:	3001      	adds	r0, #1
 80054f0:	d12b      	bne.n	800554a <_printf_float+0x242>
 80054f2:	e764      	b.n	80053be <_printf_float+0xb6>
 80054f4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80054f8:	f240 80dd 	bls.w	80056b6 <_printf_float+0x3ae>
 80054fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005500:	2200      	movs	r2, #0
 8005502:	2300      	movs	r3, #0
 8005504:	f7fb fa50 	bl	80009a8 <__aeabi_dcmpeq>
 8005508:	2800      	cmp	r0, #0
 800550a:	d033      	beq.n	8005574 <_printf_float+0x26c>
 800550c:	2301      	movs	r3, #1
 800550e:	4631      	mov	r1, r6
 8005510:	4628      	mov	r0, r5
 8005512:	4a35      	ldr	r2, [pc, #212]	; (80055e8 <_printf_float+0x2e0>)
 8005514:	47b8      	blx	r7
 8005516:	3001      	adds	r0, #1
 8005518:	f43f af51 	beq.w	80053be <_printf_float+0xb6>
 800551c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005520:	429a      	cmp	r2, r3
 8005522:	db02      	blt.n	800552a <_printf_float+0x222>
 8005524:	6823      	ldr	r3, [r4, #0]
 8005526:	07d8      	lsls	r0, r3, #31
 8005528:	d50f      	bpl.n	800554a <_printf_float+0x242>
 800552a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800552e:	4631      	mov	r1, r6
 8005530:	4628      	mov	r0, r5
 8005532:	47b8      	blx	r7
 8005534:	3001      	adds	r0, #1
 8005536:	f43f af42 	beq.w	80053be <_printf_float+0xb6>
 800553a:	f04f 0800 	mov.w	r8, #0
 800553e:	f104 091a 	add.w	r9, r4, #26
 8005542:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005544:	3b01      	subs	r3, #1
 8005546:	4543      	cmp	r3, r8
 8005548:	dc09      	bgt.n	800555e <_printf_float+0x256>
 800554a:	6823      	ldr	r3, [r4, #0]
 800554c:	079b      	lsls	r3, r3, #30
 800554e:	f100 8102 	bmi.w	8005756 <_printf_float+0x44e>
 8005552:	68e0      	ldr	r0, [r4, #12]
 8005554:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005556:	4298      	cmp	r0, r3
 8005558:	bfb8      	it	lt
 800555a:	4618      	movlt	r0, r3
 800555c:	e731      	b.n	80053c2 <_printf_float+0xba>
 800555e:	2301      	movs	r3, #1
 8005560:	464a      	mov	r2, r9
 8005562:	4631      	mov	r1, r6
 8005564:	4628      	mov	r0, r5
 8005566:	47b8      	blx	r7
 8005568:	3001      	adds	r0, #1
 800556a:	f43f af28 	beq.w	80053be <_printf_float+0xb6>
 800556e:	f108 0801 	add.w	r8, r8, #1
 8005572:	e7e6      	b.n	8005542 <_printf_float+0x23a>
 8005574:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005576:	2b00      	cmp	r3, #0
 8005578:	dc38      	bgt.n	80055ec <_printf_float+0x2e4>
 800557a:	2301      	movs	r3, #1
 800557c:	4631      	mov	r1, r6
 800557e:	4628      	mov	r0, r5
 8005580:	4a19      	ldr	r2, [pc, #100]	; (80055e8 <_printf_float+0x2e0>)
 8005582:	47b8      	blx	r7
 8005584:	3001      	adds	r0, #1
 8005586:	f43f af1a 	beq.w	80053be <_printf_float+0xb6>
 800558a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800558e:	4313      	orrs	r3, r2
 8005590:	d102      	bne.n	8005598 <_printf_float+0x290>
 8005592:	6823      	ldr	r3, [r4, #0]
 8005594:	07d9      	lsls	r1, r3, #31
 8005596:	d5d8      	bpl.n	800554a <_printf_float+0x242>
 8005598:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800559c:	4631      	mov	r1, r6
 800559e:	4628      	mov	r0, r5
 80055a0:	47b8      	blx	r7
 80055a2:	3001      	adds	r0, #1
 80055a4:	f43f af0b 	beq.w	80053be <_printf_float+0xb6>
 80055a8:	f04f 0900 	mov.w	r9, #0
 80055ac:	f104 0a1a 	add.w	sl, r4, #26
 80055b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80055b2:	425b      	negs	r3, r3
 80055b4:	454b      	cmp	r3, r9
 80055b6:	dc01      	bgt.n	80055bc <_printf_float+0x2b4>
 80055b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055ba:	e794      	b.n	80054e6 <_printf_float+0x1de>
 80055bc:	2301      	movs	r3, #1
 80055be:	4652      	mov	r2, sl
 80055c0:	4631      	mov	r1, r6
 80055c2:	4628      	mov	r0, r5
 80055c4:	47b8      	blx	r7
 80055c6:	3001      	adds	r0, #1
 80055c8:	f43f aef9 	beq.w	80053be <_printf_float+0xb6>
 80055cc:	f109 0901 	add.w	r9, r9, #1
 80055d0:	e7ee      	b.n	80055b0 <_printf_float+0x2a8>
 80055d2:	bf00      	nop
 80055d4:	7fefffff 	.word	0x7fefffff
 80055d8:	0800b73c 	.word	0x0800b73c
 80055dc:	0800b740 	.word	0x0800b740
 80055e0:	0800b748 	.word	0x0800b748
 80055e4:	0800b744 	.word	0x0800b744
 80055e8:	0800b74c 	.word	0x0800b74c
 80055ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80055ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80055f0:	429a      	cmp	r2, r3
 80055f2:	bfa8      	it	ge
 80055f4:	461a      	movge	r2, r3
 80055f6:	2a00      	cmp	r2, #0
 80055f8:	4691      	mov	r9, r2
 80055fa:	dc37      	bgt.n	800566c <_printf_float+0x364>
 80055fc:	f04f 0b00 	mov.w	fp, #0
 8005600:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005604:	f104 021a 	add.w	r2, r4, #26
 8005608:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800560c:	ebaa 0309 	sub.w	r3, sl, r9
 8005610:	455b      	cmp	r3, fp
 8005612:	dc33      	bgt.n	800567c <_printf_float+0x374>
 8005614:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005618:	429a      	cmp	r2, r3
 800561a:	db3b      	blt.n	8005694 <_printf_float+0x38c>
 800561c:	6823      	ldr	r3, [r4, #0]
 800561e:	07da      	lsls	r2, r3, #31
 8005620:	d438      	bmi.n	8005694 <_printf_float+0x38c>
 8005622:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005624:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005626:	eba2 030a 	sub.w	r3, r2, sl
 800562a:	eba2 0901 	sub.w	r9, r2, r1
 800562e:	4599      	cmp	r9, r3
 8005630:	bfa8      	it	ge
 8005632:	4699      	movge	r9, r3
 8005634:	f1b9 0f00 	cmp.w	r9, #0
 8005638:	dc34      	bgt.n	80056a4 <_printf_float+0x39c>
 800563a:	f04f 0800 	mov.w	r8, #0
 800563e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005642:	f104 0a1a 	add.w	sl, r4, #26
 8005646:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800564a:	1a9b      	subs	r3, r3, r2
 800564c:	eba3 0309 	sub.w	r3, r3, r9
 8005650:	4543      	cmp	r3, r8
 8005652:	f77f af7a 	ble.w	800554a <_printf_float+0x242>
 8005656:	2301      	movs	r3, #1
 8005658:	4652      	mov	r2, sl
 800565a:	4631      	mov	r1, r6
 800565c:	4628      	mov	r0, r5
 800565e:	47b8      	blx	r7
 8005660:	3001      	adds	r0, #1
 8005662:	f43f aeac 	beq.w	80053be <_printf_float+0xb6>
 8005666:	f108 0801 	add.w	r8, r8, #1
 800566a:	e7ec      	b.n	8005646 <_printf_float+0x33e>
 800566c:	4613      	mov	r3, r2
 800566e:	4631      	mov	r1, r6
 8005670:	4642      	mov	r2, r8
 8005672:	4628      	mov	r0, r5
 8005674:	47b8      	blx	r7
 8005676:	3001      	adds	r0, #1
 8005678:	d1c0      	bne.n	80055fc <_printf_float+0x2f4>
 800567a:	e6a0      	b.n	80053be <_printf_float+0xb6>
 800567c:	2301      	movs	r3, #1
 800567e:	4631      	mov	r1, r6
 8005680:	4628      	mov	r0, r5
 8005682:	920b      	str	r2, [sp, #44]	; 0x2c
 8005684:	47b8      	blx	r7
 8005686:	3001      	adds	r0, #1
 8005688:	f43f ae99 	beq.w	80053be <_printf_float+0xb6>
 800568c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800568e:	f10b 0b01 	add.w	fp, fp, #1
 8005692:	e7b9      	b.n	8005608 <_printf_float+0x300>
 8005694:	4631      	mov	r1, r6
 8005696:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800569a:	4628      	mov	r0, r5
 800569c:	47b8      	blx	r7
 800569e:	3001      	adds	r0, #1
 80056a0:	d1bf      	bne.n	8005622 <_printf_float+0x31a>
 80056a2:	e68c      	b.n	80053be <_printf_float+0xb6>
 80056a4:	464b      	mov	r3, r9
 80056a6:	4631      	mov	r1, r6
 80056a8:	4628      	mov	r0, r5
 80056aa:	eb08 020a 	add.w	r2, r8, sl
 80056ae:	47b8      	blx	r7
 80056b0:	3001      	adds	r0, #1
 80056b2:	d1c2      	bne.n	800563a <_printf_float+0x332>
 80056b4:	e683      	b.n	80053be <_printf_float+0xb6>
 80056b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80056b8:	2a01      	cmp	r2, #1
 80056ba:	dc01      	bgt.n	80056c0 <_printf_float+0x3b8>
 80056bc:	07db      	lsls	r3, r3, #31
 80056be:	d537      	bpl.n	8005730 <_printf_float+0x428>
 80056c0:	2301      	movs	r3, #1
 80056c2:	4642      	mov	r2, r8
 80056c4:	4631      	mov	r1, r6
 80056c6:	4628      	mov	r0, r5
 80056c8:	47b8      	blx	r7
 80056ca:	3001      	adds	r0, #1
 80056cc:	f43f ae77 	beq.w	80053be <_printf_float+0xb6>
 80056d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056d4:	4631      	mov	r1, r6
 80056d6:	4628      	mov	r0, r5
 80056d8:	47b8      	blx	r7
 80056da:	3001      	adds	r0, #1
 80056dc:	f43f ae6f 	beq.w	80053be <_printf_float+0xb6>
 80056e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80056e4:	2200      	movs	r2, #0
 80056e6:	2300      	movs	r3, #0
 80056e8:	f7fb f95e 	bl	80009a8 <__aeabi_dcmpeq>
 80056ec:	b9d8      	cbnz	r0, 8005726 <_printf_float+0x41e>
 80056ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056f0:	f108 0201 	add.w	r2, r8, #1
 80056f4:	3b01      	subs	r3, #1
 80056f6:	4631      	mov	r1, r6
 80056f8:	4628      	mov	r0, r5
 80056fa:	47b8      	blx	r7
 80056fc:	3001      	adds	r0, #1
 80056fe:	d10e      	bne.n	800571e <_printf_float+0x416>
 8005700:	e65d      	b.n	80053be <_printf_float+0xb6>
 8005702:	2301      	movs	r3, #1
 8005704:	464a      	mov	r2, r9
 8005706:	4631      	mov	r1, r6
 8005708:	4628      	mov	r0, r5
 800570a:	47b8      	blx	r7
 800570c:	3001      	adds	r0, #1
 800570e:	f43f ae56 	beq.w	80053be <_printf_float+0xb6>
 8005712:	f108 0801 	add.w	r8, r8, #1
 8005716:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005718:	3b01      	subs	r3, #1
 800571a:	4543      	cmp	r3, r8
 800571c:	dcf1      	bgt.n	8005702 <_printf_float+0x3fa>
 800571e:	4653      	mov	r3, sl
 8005720:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005724:	e6e0      	b.n	80054e8 <_printf_float+0x1e0>
 8005726:	f04f 0800 	mov.w	r8, #0
 800572a:	f104 091a 	add.w	r9, r4, #26
 800572e:	e7f2      	b.n	8005716 <_printf_float+0x40e>
 8005730:	2301      	movs	r3, #1
 8005732:	4642      	mov	r2, r8
 8005734:	e7df      	b.n	80056f6 <_printf_float+0x3ee>
 8005736:	2301      	movs	r3, #1
 8005738:	464a      	mov	r2, r9
 800573a:	4631      	mov	r1, r6
 800573c:	4628      	mov	r0, r5
 800573e:	47b8      	blx	r7
 8005740:	3001      	adds	r0, #1
 8005742:	f43f ae3c 	beq.w	80053be <_printf_float+0xb6>
 8005746:	f108 0801 	add.w	r8, r8, #1
 800574a:	68e3      	ldr	r3, [r4, #12]
 800574c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800574e:	1a5b      	subs	r3, r3, r1
 8005750:	4543      	cmp	r3, r8
 8005752:	dcf0      	bgt.n	8005736 <_printf_float+0x42e>
 8005754:	e6fd      	b.n	8005552 <_printf_float+0x24a>
 8005756:	f04f 0800 	mov.w	r8, #0
 800575a:	f104 0919 	add.w	r9, r4, #25
 800575e:	e7f4      	b.n	800574a <_printf_float+0x442>

08005760 <_printf_common>:
 8005760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005764:	4616      	mov	r6, r2
 8005766:	4699      	mov	r9, r3
 8005768:	688a      	ldr	r2, [r1, #8]
 800576a:	690b      	ldr	r3, [r1, #16]
 800576c:	4607      	mov	r7, r0
 800576e:	4293      	cmp	r3, r2
 8005770:	bfb8      	it	lt
 8005772:	4613      	movlt	r3, r2
 8005774:	6033      	str	r3, [r6, #0]
 8005776:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800577a:	460c      	mov	r4, r1
 800577c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005780:	b10a      	cbz	r2, 8005786 <_printf_common+0x26>
 8005782:	3301      	adds	r3, #1
 8005784:	6033      	str	r3, [r6, #0]
 8005786:	6823      	ldr	r3, [r4, #0]
 8005788:	0699      	lsls	r1, r3, #26
 800578a:	bf42      	ittt	mi
 800578c:	6833      	ldrmi	r3, [r6, #0]
 800578e:	3302      	addmi	r3, #2
 8005790:	6033      	strmi	r3, [r6, #0]
 8005792:	6825      	ldr	r5, [r4, #0]
 8005794:	f015 0506 	ands.w	r5, r5, #6
 8005798:	d106      	bne.n	80057a8 <_printf_common+0x48>
 800579a:	f104 0a19 	add.w	sl, r4, #25
 800579e:	68e3      	ldr	r3, [r4, #12]
 80057a0:	6832      	ldr	r2, [r6, #0]
 80057a2:	1a9b      	subs	r3, r3, r2
 80057a4:	42ab      	cmp	r3, r5
 80057a6:	dc28      	bgt.n	80057fa <_printf_common+0x9a>
 80057a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80057ac:	1e13      	subs	r3, r2, #0
 80057ae:	6822      	ldr	r2, [r4, #0]
 80057b0:	bf18      	it	ne
 80057b2:	2301      	movne	r3, #1
 80057b4:	0692      	lsls	r2, r2, #26
 80057b6:	d42d      	bmi.n	8005814 <_printf_common+0xb4>
 80057b8:	4649      	mov	r1, r9
 80057ba:	4638      	mov	r0, r7
 80057bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80057c0:	47c0      	blx	r8
 80057c2:	3001      	adds	r0, #1
 80057c4:	d020      	beq.n	8005808 <_printf_common+0xa8>
 80057c6:	6823      	ldr	r3, [r4, #0]
 80057c8:	68e5      	ldr	r5, [r4, #12]
 80057ca:	f003 0306 	and.w	r3, r3, #6
 80057ce:	2b04      	cmp	r3, #4
 80057d0:	bf18      	it	ne
 80057d2:	2500      	movne	r5, #0
 80057d4:	6832      	ldr	r2, [r6, #0]
 80057d6:	f04f 0600 	mov.w	r6, #0
 80057da:	68a3      	ldr	r3, [r4, #8]
 80057dc:	bf08      	it	eq
 80057de:	1aad      	subeq	r5, r5, r2
 80057e0:	6922      	ldr	r2, [r4, #16]
 80057e2:	bf08      	it	eq
 80057e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057e8:	4293      	cmp	r3, r2
 80057ea:	bfc4      	itt	gt
 80057ec:	1a9b      	subgt	r3, r3, r2
 80057ee:	18ed      	addgt	r5, r5, r3
 80057f0:	341a      	adds	r4, #26
 80057f2:	42b5      	cmp	r5, r6
 80057f4:	d11a      	bne.n	800582c <_printf_common+0xcc>
 80057f6:	2000      	movs	r0, #0
 80057f8:	e008      	b.n	800580c <_printf_common+0xac>
 80057fa:	2301      	movs	r3, #1
 80057fc:	4652      	mov	r2, sl
 80057fe:	4649      	mov	r1, r9
 8005800:	4638      	mov	r0, r7
 8005802:	47c0      	blx	r8
 8005804:	3001      	adds	r0, #1
 8005806:	d103      	bne.n	8005810 <_printf_common+0xb0>
 8005808:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800580c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005810:	3501      	adds	r5, #1
 8005812:	e7c4      	b.n	800579e <_printf_common+0x3e>
 8005814:	2030      	movs	r0, #48	; 0x30
 8005816:	18e1      	adds	r1, r4, r3
 8005818:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800581c:	1c5a      	adds	r2, r3, #1
 800581e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005822:	4422      	add	r2, r4
 8005824:	3302      	adds	r3, #2
 8005826:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800582a:	e7c5      	b.n	80057b8 <_printf_common+0x58>
 800582c:	2301      	movs	r3, #1
 800582e:	4622      	mov	r2, r4
 8005830:	4649      	mov	r1, r9
 8005832:	4638      	mov	r0, r7
 8005834:	47c0      	blx	r8
 8005836:	3001      	adds	r0, #1
 8005838:	d0e6      	beq.n	8005808 <_printf_common+0xa8>
 800583a:	3601      	adds	r6, #1
 800583c:	e7d9      	b.n	80057f2 <_printf_common+0x92>
	...

08005840 <_printf_i>:
 8005840:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005844:	460c      	mov	r4, r1
 8005846:	7e27      	ldrb	r7, [r4, #24]
 8005848:	4691      	mov	r9, r2
 800584a:	2f78      	cmp	r7, #120	; 0x78
 800584c:	4680      	mov	r8, r0
 800584e:	469a      	mov	sl, r3
 8005850:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005852:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005856:	d807      	bhi.n	8005868 <_printf_i+0x28>
 8005858:	2f62      	cmp	r7, #98	; 0x62
 800585a:	d80a      	bhi.n	8005872 <_printf_i+0x32>
 800585c:	2f00      	cmp	r7, #0
 800585e:	f000 80d9 	beq.w	8005a14 <_printf_i+0x1d4>
 8005862:	2f58      	cmp	r7, #88	; 0x58
 8005864:	f000 80a4 	beq.w	80059b0 <_printf_i+0x170>
 8005868:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800586c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005870:	e03a      	b.n	80058e8 <_printf_i+0xa8>
 8005872:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005876:	2b15      	cmp	r3, #21
 8005878:	d8f6      	bhi.n	8005868 <_printf_i+0x28>
 800587a:	a001      	add	r0, pc, #4	; (adr r0, 8005880 <_printf_i+0x40>)
 800587c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005880:	080058d9 	.word	0x080058d9
 8005884:	080058ed 	.word	0x080058ed
 8005888:	08005869 	.word	0x08005869
 800588c:	08005869 	.word	0x08005869
 8005890:	08005869 	.word	0x08005869
 8005894:	08005869 	.word	0x08005869
 8005898:	080058ed 	.word	0x080058ed
 800589c:	08005869 	.word	0x08005869
 80058a0:	08005869 	.word	0x08005869
 80058a4:	08005869 	.word	0x08005869
 80058a8:	08005869 	.word	0x08005869
 80058ac:	080059fb 	.word	0x080059fb
 80058b0:	0800591d 	.word	0x0800591d
 80058b4:	080059dd 	.word	0x080059dd
 80058b8:	08005869 	.word	0x08005869
 80058bc:	08005869 	.word	0x08005869
 80058c0:	08005a1d 	.word	0x08005a1d
 80058c4:	08005869 	.word	0x08005869
 80058c8:	0800591d 	.word	0x0800591d
 80058cc:	08005869 	.word	0x08005869
 80058d0:	08005869 	.word	0x08005869
 80058d4:	080059e5 	.word	0x080059e5
 80058d8:	680b      	ldr	r3, [r1, #0]
 80058da:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80058de:	1d1a      	adds	r2, r3, #4
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	600a      	str	r2, [r1, #0]
 80058e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058e8:	2301      	movs	r3, #1
 80058ea:	e0a4      	b.n	8005a36 <_printf_i+0x1f6>
 80058ec:	6825      	ldr	r5, [r4, #0]
 80058ee:	6808      	ldr	r0, [r1, #0]
 80058f0:	062e      	lsls	r6, r5, #24
 80058f2:	f100 0304 	add.w	r3, r0, #4
 80058f6:	d50a      	bpl.n	800590e <_printf_i+0xce>
 80058f8:	6805      	ldr	r5, [r0, #0]
 80058fa:	600b      	str	r3, [r1, #0]
 80058fc:	2d00      	cmp	r5, #0
 80058fe:	da03      	bge.n	8005908 <_printf_i+0xc8>
 8005900:	232d      	movs	r3, #45	; 0x2d
 8005902:	426d      	negs	r5, r5
 8005904:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005908:	230a      	movs	r3, #10
 800590a:	485e      	ldr	r0, [pc, #376]	; (8005a84 <_printf_i+0x244>)
 800590c:	e019      	b.n	8005942 <_printf_i+0x102>
 800590e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005912:	6805      	ldr	r5, [r0, #0]
 8005914:	600b      	str	r3, [r1, #0]
 8005916:	bf18      	it	ne
 8005918:	b22d      	sxthne	r5, r5
 800591a:	e7ef      	b.n	80058fc <_printf_i+0xbc>
 800591c:	680b      	ldr	r3, [r1, #0]
 800591e:	6825      	ldr	r5, [r4, #0]
 8005920:	1d18      	adds	r0, r3, #4
 8005922:	6008      	str	r0, [r1, #0]
 8005924:	0628      	lsls	r0, r5, #24
 8005926:	d501      	bpl.n	800592c <_printf_i+0xec>
 8005928:	681d      	ldr	r5, [r3, #0]
 800592a:	e002      	b.n	8005932 <_printf_i+0xf2>
 800592c:	0669      	lsls	r1, r5, #25
 800592e:	d5fb      	bpl.n	8005928 <_printf_i+0xe8>
 8005930:	881d      	ldrh	r5, [r3, #0]
 8005932:	2f6f      	cmp	r7, #111	; 0x6f
 8005934:	bf0c      	ite	eq
 8005936:	2308      	moveq	r3, #8
 8005938:	230a      	movne	r3, #10
 800593a:	4852      	ldr	r0, [pc, #328]	; (8005a84 <_printf_i+0x244>)
 800593c:	2100      	movs	r1, #0
 800593e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005942:	6866      	ldr	r6, [r4, #4]
 8005944:	2e00      	cmp	r6, #0
 8005946:	bfa8      	it	ge
 8005948:	6821      	ldrge	r1, [r4, #0]
 800594a:	60a6      	str	r6, [r4, #8]
 800594c:	bfa4      	itt	ge
 800594e:	f021 0104 	bicge.w	r1, r1, #4
 8005952:	6021      	strge	r1, [r4, #0]
 8005954:	b90d      	cbnz	r5, 800595a <_printf_i+0x11a>
 8005956:	2e00      	cmp	r6, #0
 8005958:	d04d      	beq.n	80059f6 <_printf_i+0x1b6>
 800595a:	4616      	mov	r6, r2
 800595c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005960:	fb03 5711 	mls	r7, r3, r1, r5
 8005964:	5dc7      	ldrb	r7, [r0, r7]
 8005966:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800596a:	462f      	mov	r7, r5
 800596c:	42bb      	cmp	r3, r7
 800596e:	460d      	mov	r5, r1
 8005970:	d9f4      	bls.n	800595c <_printf_i+0x11c>
 8005972:	2b08      	cmp	r3, #8
 8005974:	d10b      	bne.n	800598e <_printf_i+0x14e>
 8005976:	6823      	ldr	r3, [r4, #0]
 8005978:	07df      	lsls	r7, r3, #31
 800597a:	d508      	bpl.n	800598e <_printf_i+0x14e>
 800597c:	6923      	ldr	r3, [r4, #16]
 800597e:	6861      	ldr	r1, [r4, #4]
 8005980:	4299      	cmp	r1, r3
 8005982:	bfde      	ittt	le
 8005984:	2330      	movle	r3, #48	; 0x30
 8005986:	f806 3c01 	strble.w	r3, [r6, #-1]
 800598a:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800598e:	1b92      	subs	r2, r2, r6
 8005990:	6122      	str	r2, [r4, #16]
 8005992:	464b      	mov	r3, r9
 8005994:	4621      	mov	r1, r4
 8005996:	4640      	mov	r0, r8
 8005998:	f8cd a000 	str.w	sl, [sp]
 800599c:	aa03      	add	r2, sp, #12
 800599e:	f7ff fedf 	bl	8005760 <_printf_common>
 80059a2:	3001      	adds	r0, #1
 80059a4:	d14c      	bne.n	8005a40 <_printf_i+0x200>
 80059a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059aa:	b004      	add	sp, #16
 80059ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059b0:	4834      	ldr	r0, [pc, #208]	; (8005a84 <_printf_i+0x244>)
 80059b2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80059b6:	680e      	ldr	r6, [r1, #0]
 80059b8:	6823      	ldr	r3, [r4, #0]
 80059ba:	f856 5b04 	ldr.w	r5, [r6], #4
 80059be:	061f      	lsls	r7, r3, #24
 80059c0:	600e      	str	r6, [r1, #0]
 80059c2:	d514      	bpl.n	80059ee <_printf_i+0x1ae>
 80059c4:	07d9      	lsls	r1, r3, #31
 80059c6:	bf44      	itt	mi
 80059c8:	f043 0320 	orrmi.w	r3, r3, #32
 80059cc:	6023      	strmi	r3, [r4, #0]
 80059ce:	b91d      	cbnz	r5, 80059d8 <_printf_i+0x198>
 80059d0:	6823      	ldr	r3, [r4, #0]
 80059d2:	f023 0320 	bic.w	r3, r3, #32
 80059d6:	6023      	str	r3, [r4, #0]
 80059d8:	2310      	movs	r3, #16
 80059da:	e7af      	b.n	800593c <_printf_i+0xfc>
 80059dc:	6823      	ldr	r3, [r4, #0]
 80059de:	f043 0320 	orr.w	r3, r3, #32
 80059e2:	6023      	str	r3, [r4, #0]
 80059e4:	2378      	movs	r3, #120	; 0x78
 80059e6:	4828      	ldr	r0, [pc, #160]	; (8005a88 <_printf_i+0x248>)
 80059e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80059ec:	e7e3      	b.n	80059b6 <_printf_i+0x176>
 80059ee:	065e      	lsls	r6, r3, #25
 80059f0:	bf48      	it	mi
 80059f2:	b2ad      	uxthmi	r5, r5
 80059f4:	e7e6      	b.n	80059c4 <_printf_i+0x184>
 80059f6:	4616      	mov	r6, r2
 80059f8:	e7bb      	b.n	8005972 <_printf_i+0x132>
 80059fa:	680b      	ldr	r3, [r1, #0]
 80059fc:	6826      	ldr	r6, [r4, #0]
 80059fe:	1d1d      	adds	r5, r3, #4
 8005a00:	6960      	ldr	r0, [r4, #20]
 8005a02:	600d      	str	r5, [r1, #0]
 8005a04:	0635      	lsls	r5, r6, #24
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	d501      	bpl.n	8005a0e <_printf_i+0x1ce>
 8005a0a:	6018      	str	r0, [r3, #0]
 8005a0c:	e002      	b.n	8005a14 <_printf_i+0x1d4>
 8005a0e:	0671      	lsls	r1, r6, #25
 8005a10:	d5fb      	bpl.n	8005a0a <_printf_i+0x1ca>
 8005a12:	8018      	strh	r0, [r3, #0]
 8005a14:	2300      	movs	r3, #0
 8005a16:	4616      	mov	r6, r2
 8005a18:	6123      	str	r3, [r4, #16]
 8005a1a:	e7ba      	b.n	8005992 <_printf_i+0x152>
 8005a1c:	680b      	ldr	r3, [r1, #0]
 8005a1e:	1d1a      	adds	r2, r3, #4
 8005a20:	600a      	str	r2, [r1, #0]
 8005a22:	681e      	ldr	r6, [r3, #0]
 8005a24:	2100      	movs	r1, #0
 8005a26:	4630      	mov	r0, r6
 8005a28:	6862      	ldr	r2, [r4, #4]
 8005a2a:	f000 fed7 	bl	80067dc <memchr>
 8005a2e:	b108      	cbz	r0, 8005a34 <_printf_i+0x1f4>
 8005a30:	1b80      	subs	r0, r0, r6
 8005a32:	6060      	str	r0, [r4, #4]
 8005a34:	6863      	ldr	r3, [r4, #4]
 8005a36:	6123      	str	r3, [r4, #16]
 8005a38:	2300      	movs	r3, #0
 8005a3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a3e:	e7a8      	b.n	8005992 <_printf_i+0x152>
 8005a40:	4632      	mov	r2, r6
 8005a42:	4649      	mov	r1, r9
 8005a44:	4640      	mov	r0, r8
 8005a46:	6923      	ldr	r3, [r4, #16]
 8005a48:	47d0      	blx	sl
 8005a4a:	3001      	adds	r0, #1
 8005a4c:	d0ab      	beq.n	80059a6 <_printf_i+0x166>
 8005a4e:	6823      	ldr	r3, [r4, #0]
 8005a50:	079b      	lsls	r3, r3, #30
 8005a52:	d413      	bmi.n	8005a7c <_printf_i+0x23c>
 8005a54:	68e0      	ldr	r0, [r4, #12]
 8005a56:	9b03      	ldr	r3, [sp, #12]
 8005a58:	4298      	cmp	r0, r3
 8005a5a:	bfb8      	it	lt
 8005a5c:	4618      	movlt	r0, r3
 8005a5e:	e7a4      	b.n	80059aa <_printf_i+0x16a>
 8005a60:	2301      	movs	r3, #1
 8005a62:	4632      	mov	r2, r6
 8005a64:	4649      	mov	r1, r9
 8005a66:	4640      	mov	r0, r8
 8005a68:	47d0      	blx	sl
 8005a6a:	3001      	adds	r0, #1
 8005a6c:	d09b      	beq.n	80059a6 <_printf_i+0x166>
 8005a6e:	3501      	adds	r5, #1
 8005a70:	68e3      	ldr	r3, [r4, #12]
 8005a72:	9903      	ldr	r1, [sp, #12]
 8005a74:	1a5b      	subs	r3, r3, r1
 8005a76:	42ab      	cmp	r3, r5
 8005a78:	dcf2      	bgt.n	8005a60 <_printf_i+0x220>
 8005a7a:	e7eb      	b.n	8005a54 <_printf_i+0x214>
 8005a7c:	2500      	movs	r5, #0
 8005a7e:	f104 0619 	add.w	r6, r4, #25
 8005a82:	e7f5      	b.n	8005a70 <_printf_i+0x230>
 8005a84:	0800b74e 	.word	0x0800b74e
 8005a88:	0800b75f 	.word	0x0800b75f

08005a8c <siprintf>:
 8005a8c:	b40e      	push	{r1, r2, r3}
 8005a8e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005a92:	b500      	push	{lr}
 8005a94:	b09c      	sub	sp, #112	; 0x70
 8005a96:	ab1d      	add	r3, sp, #116	; 0x74
 8005a98:	9002      	str	r0, [sp, #8]
 8005a9a:	9006      	str	r0, [sp, #24]
 8005a9c:	9107      	str	r1, [sp, #28]
 8005a9e:	9104      	str	r1, [sp, #16]
 8005aa0:	4808      	ldr	r0, [pc, #32]	; (8005ac4 <siprintf+0x38>)
 8005aa2:	4909      	ldr	r1, [pc, #36]	; (8005ac8 <siprintf+0x3c>)
 8005aa4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005aa8:	9105      	str	r1, [sp, #20]
 8005aaa:	6800      	ldr	r0, [r0, #0]
 8005aac:	a902      	add	r1, sp, #8
 8005aae:	9301      	str	r3, [sp, #4]
 8005ab0:	f001 fb34 	bl	800711c <_svfiprintf_r>
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	9b02      	ldr	r3, [sp, #8]
 8005ab8:	701a      	strb	r2, [r3, #0]
 8005aba:	b01c      	add	sp, #112	; 0x70
 8005abc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ac0:	b003      	add	sp, #12
 8005ac2:	4770      	bx	lr
 8005ac4:	200000a8 	.word	0x200000a8
 8005ac8:	ffff0208 	.word	0xffff0208

08005acc <quorem>:
 8005acc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ad0:	6903      	ldr	r3, [r0, #16]
 8005ad2:	690c      	ldr	r4, [r1, #16]
 8005ad4:	4607      	mov	r7, r0
 8005ad6:	42a3      	cmp	r3, r4
 8005ad8:	f2c0 8083 	blt.w	8005be2 <quorem+0x116>
 8005adc:	3c01      	subs	r4, #1
 8005ade:	f100 0514 	add.w	r5, r0, #20
 8005ae2:	f101 0814 	add.w	r8, r1, #20
 8005ae6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005aea:	9301      	str	r3, [sp, #4]
 8005aec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005af0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005af4:	3301      	adds	r3, #1
 8005af6:	429a      	cmp	r2, r3
 8005af8:	fbb2 f6f3 	udiv	r6, r2, r3
 8005afc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005b00:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005b04:	d332      	bcc.n	8005b6c <quorem+0xa0>
 8005b06:	f04f 0e00 	mov.w	lr, #0
 8005b0a:	4640      	mov	r0, r8
 8005b0c:	46ac      	mov	ip, r5
 8005b0e:	46f2      	mov	sl, lr
 8005b10:	f850 2b04 	ldr.w	r2, [r0], #4
 8005b14:	b293      	uxth	r3, r2
 8005b16:	fb06 e303 	mla	r3, r6, r3, lr
 8005b1a:	0c12      	lsrs	r2, r2, #16
 8005b1c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005b20:	fb06 e202 	mla	r2, r6, r2, lr
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	ebaa 0303 	sub.w	r3, sl, r3
 8005b2a:	f8dc a000 	ldr.w	sl, [ip]
 8005b2e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005b32:	fa1f fa8a 	uxth.w	sl, sl
 8005b36:	4453      	add	r3, sl
 8005b38:	fa1f fa82 	uxth.w	sl, r2
 8005b3c:	f8dc 2000 	ldr.w	r2, [ip]
 8005b40:	4581      	cmp	r9, r0
 8005b42:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005b46:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b50:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005b54:	f84c 3b04 	str.w	r3, [ip], #4
 8005b58:	d2da      	bcs.n	8005b10 <quorem+0x44>
 8005b5a:	f855 300b 	ldr.w	r3, [r5, fp]
 8005b5e:	b92b      	cbnz	r3, 8005b6c <quorem+0xa0>
 8005b60:	9b01      	ldr	r3, [sp, #4]
 8005b62:	3b04      	subs	r3, #4
 8005b64:	429d      	cmp	r5, r3
 8005b66:	461a      	mov	r2, r3
 8005b68:	d32f      	bcc.n	8005bca <quorem+0xfe>
 8005b6a:	613c      	str	r4, [r7, #16]
 8005b6c:	4638      	mov	r0, r7
 8005b6e:	f001 f8bd 	bl	8006cec <__mcmp>
 8005b72:	2800      	cmp	r0, #0
 8005b74:	db25      	blt.n	8005bc2 <quorem+0xf6>
 8005b76:	4628      	mov	r0, r5
 8005b78:	f04f 0c00 	mov.w	ip, #0
 8005b7c:	3601      	adds	r6, #1
 8005b7e:	f858 1b04 	ldr.w	r1, [r8], #4
 8005b82:	f8d0 e000 	ldr.w	lr, [r0]
 8005b86:	b28b      	uxth	r3, r1
 8005b88:	ebac 0303 	sub.w	r3, ip, r3
 8005b8c:	fa1f f28e 	uxth.w	r2, lr
 8005b90:	4413      	add	r3, r2
 8005b92:	0c0a      	lsrs	r2, r1, #16
 8005b94:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005b98:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ba2:	45c1      	cmp	r9, r8
 8005ba4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005ba8:	f840 3b04 	str.w	r3, [r0], #4
 8005bac:	d2e7      	bcs.n	8005b7e <quorem+0xb2>
 8005bae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005bb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005bb6:	b922      	cbnz	r2, 8005bc2 <quorem+0xf6>
 8005bb8:	3b04      	subs	r3, #4
 8005bba:	429d      	cmp	r5, r3
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	d30a      	bcc.n	8005bd6 <quorem+0x10a>
 8005bc0:	613c      	str	r4, [r7, #16]
 8005bc2:	4630      	mov	r0, r6
 8005bc4:	b003      	add	sp, #12
 8005bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bca:	6812      	ldr	r2, [r2, #0]
 8005bcc:	3b04      	subs	r3, #4
 8005bce:	2a00      	cmp	r2, #0
 8005bd0:	d1cb      	bne.n	8005b6a <quorem+0x9e>
 8005bd2:	3c01      	subs	r4, #1
 8005bd4:	e7c6      	b.n	8005b64 <quorem+0x98>
 8005bd6:	6812      	ldr	r2, [r2, #0]
 8005bd8:	3b04      	subs	r3, #4
 8005bda:	2a00      	cmp	r2, #0
 8005bdc:	d1f0      	bne.n	8005bc0 <quorem+0xf4>
 8005bde:	3c01      	subs	r4, #1
 8005be0:	e7eb      	b.n	8005bba <quorem+0xee>
 8005be2:	2000      	movs	r0, #0
 8005be4:	e7ee      	b.n	8005bc4 <quorem+0xf8>
	...

08005be8 <_dtoa_r>:
 8005be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bec:	4616      	mov	r6, r2
 8005bee:	461f      	mov	r7, r3
 8005bf0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005bf2:	b099      	sub	sp, #100	; 0x64
 8005bf4:	4605      	mov	r5, r0
 8005bf6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005bfa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005bfe:	b974      	cbnz	r4, 8005c1e <_dtoa_r+0x36>
 8005c00:	2010      	movs	r0, #16
 8005c02:	f000 fde3 	bl	80067cc <malloc>
 8005c06:	4602      	mov	r2, r0
 8005c08:	6268      	str	r0, [r5, #36]	; 0x24
 8005c0a:	b920      	cbnz	r0, 8005c16 <_dtoa_r+0x2e>
 8005c0c:	21ea      	movs	r1, #234	; 0xea
 8005c0e:	4bae      	ldr	r3, [pc, #696]	; (8005ec8 <_dtoa_r+0x2e0>)
 8005c10:	48ae      	ldr	r0, [pc, #696]	; (8005ecc <_dtoa_r+0x2e4>)
 8005c12:	f001 fb93 	bl	800733c <__assert_func>
 8005c16:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005c1a:	6004      	str	r4, [r0, #0]
 8005c1c:	60c4      	str	r4, [r0, #12]
 8005c1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005c20:	6819      	ldr	r1, [r3, #0]
 8005c22:	b151      	cbz	r1, 8005c3a <_dtoa_r+0x52>
 8005c24:	685a      	ldr	r2, [r3, #4]
 8005c26:	2301      	movs	r3, #1
 8005c28:	4093      	lsls	r3, r2
 8005c2a:	604a      	str	r2, [r1, #4]
 8005c2c:	608b      	str	r3, [r1, #8]
 8005c2e:	4628      	mov	r0, r5
 8005c30:	f000 fe22 	bl	8006878 <_Bfree>
 8005c34:	2200      	movs	r2, #0
 8005c36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005c38:	601a      	str	r2, [r3, #0]
 8005c3a:	1e3b      	subs	r3, r7, #0
 8005c3c:	bfaf      	iteee	ge
 8005c3e:	2300      	movge	r3, #0
 8005c40:	2201      	movlt	r2, #1
 8005c42:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005c46:	9305      	strlt	r3, [sp, #20]
 8005c48:	bfa8      	it	ge
 8005c4a:	f8c8 3000 	strge.w	r3, [r8]
 8005c4e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005c52:	4b9f      	ldr	r3, [pc, #636]	; (8005ed0 <_dtoa_r+0x2e8>)
 8005c54:	bfb8      	it	lt
 8005c56:	f8c8 2000 	strlt.w	r2, [r8]
 8005c5a:	ea33 0309 	bics.w	r3, r3, r9
 8005c5e:	d119      	bne.n	8005c94 <_dtoa_r+0xac>
 8005c60:	f242 730f 	movw	r3, #9999	; 0x270f
 8005c64:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005c66:	6013      	str	r3, [r2, #0]
 8005c68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005c6c:	4333      	orrs	r3, r6
 8005c6e:	f000 8580 	beq.w	8006772 <_dtoa_r+0xb8a>
 8005c72:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005c74:	b953      	cbnz	r3, 8005c8c <_dtoa_r+0xa4>
 8005c76:	4b97      	ldr	r3, [pc, #604]	; (8005ed4 <_dtoa_r+0x2ec>)
 8005c78:	e022      	b.n	8005cc0 <_dtoa_r+0xd8>
 8005c7a:	4b97      	ldr	r3, [pc, #604]	; (8005ed8 <_dtoa_r+0x2f0>)
 8005c7c:	9308      	str	r3, [sp, #32]
 8005c7e:	3308      	adds	r3, #8
 8005c80:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005c82:	6013      	str	r3, [r2, #0]
 8005c84:	9808      	ldr	r0, [sp, #32]
 8005c86:	b019      	add	sp, #100	; 0x64
 8005c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c8c:	4b91      	ldr	r3, [pc, #580]	; (8005ed4 <_dtoa_r+0x2ec>)
 8005c8e:	9308      	str	r3, [sp, #32]
 8005c90:	3303      	adds	r3, #3
 8005c92:	e7f5      	b.n	8005c80 <_dtoa_r+0x98>
 8005c94:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005c98:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005c9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	f7fa fe80 	bl	80009a8 <__aeabi_dcmpeq>
 8005ca8:	4680      	mov	r8, r0
 8005caa:	b158      	cbz	r0, 8005cc4 <_dtoa_r+0xdc>
 8005cac:	2301      	movs	r3, #1
 8005cae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005cb0:	6013      	str	r3, [r2, #0]
 8005cb2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	f000 8559 	beq.w	800676c <_dtoa_r+0xb84>
 8005cba:	4888      	ldr	r0, [pc, #544]	; (8005edc <_dtoa_r+0x2f4>)
 8005cbc:	6018      	str	r0, [r3, #0]
 8005cbe:	1e43      	subs	r3, r0, #1
 8005cc0:	9308      	str	r3, [sp, #32]
 8005cc2:	e7df      	b.n	8005c84 <_dtoa_r+0x9c>
 8005cc4:	ab16      	add	r3, sp, #88	; 0x58
 8005cc6:	9301      	str	r3, [sp, #4]
 8005cc8:	ab17      	add	r3, sp, #92	; 0x5c
 8005cca:	9300      	str	r3, [sp, #0]
 8005ccc:	4628      	mov	r0, r5
 8005cce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005cd2:	f001 f8b7 	bl	8006e44 <__d2b>
 8005cd6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005cda:	4682      	mov	sl, r0
 8005cdc:	2c00      	cmp	r4, #0
 8005cde:	d07e      	beq.n	8005dde <_dtoa_r+0x1f6>
 8005ce0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005ce4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ce6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005cea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005cee:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005cf2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005cf6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	4b78      	ldr	r3, [pc, #480]	; (8005ee0 <_dtoa_r+0x2f8>)
 8005cfe:	f7fa fa33 	bl	8000168 <__aeabi_dsub>
 8005d02:	a36b      	add	r3, pc, #428	; (adr r3, 8005eb0 <_dtoa_r+0x2c8>)
 8005d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d08:	f7fa fbe6 	bl	80004d8 <__aeabi_dmul>
 8005d0c:	a36a      	add	r3, pc, #424	; (adr r3, 8005eb8 <_dtoa_r+0x2d0>)
 8005d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d12:	f7fa fa2b 	bl	800016c <__adddf3>
 8005d16:	4606      	mov	r6, r0
 8005d18:	4620      	mov	r0, r4
 8005d1a:	460f      	mov	r7, r1
 8005d1c:	f7fa fb72 	bl	8000404 <__aeabi_i2d>
 8005d20:	a367      	add	r3, pc, #412	; (adr r3, 8005ec0 <_dtoa_r+0x2d8>)
 8005d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d26:	f7fa fbd7 	bl	80004d8 <__aeabi_dmul>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	4630      	mov	r0, r6
 8005d30:	4639      	mov	r1, r7
 8005d32:	f7fa fa1b 	bl	800016c <__adddf3>
 8005d36:	4606      	mov	r6, r0
 8005d38:	460f      	mov	r7, r1
 8005d3a:	f7fa fe7d 	bl	8000a38 <__aeabi_d2iz>
 8005d3e:	2200      	movs	r2, #0
 8005d40:	4681      	mov	r9, r0
 8005d42:	2300      	movs	r3, #0
 8005d44:	4630      	mov	r0, r6
 8005d46:	4639      	mov	r1, r7
 8005d48:	f7fa fe38 	bl	80009bc <__aeabi_dcmplt>
 8005d4c:	b148      	cbz	r0, 8005d62 <_dtoa_r+0x17a>
 8005d4e:	4648      	mov	r0, r9
 8005d50:	f7fa fb58 	bl	8000404 <__aeabi_i2d>
 8005d54:	4632      	mov	r2, r6
 8005d56:	463b      	mov	r3, r7
 8005d58:	f7fa fe26 	bl	80009a8 <__aeabi_dcmpeq>
 8005d5c:	b908      	cbnz	r0, 8005d62 <_dtoa_r+0x17a>
 8005d5e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8005d62:	f1b9 0f16 	cmp.w	r9, #22
 8005d66:	d857      	bhi.n	8005e18 <_dtoa_r+0x230>
 8005d68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005d6c:	4b5d      	ldr	r3, [pc, #372]	; (8005ee4 <_dtoa_r+0x2fc>)
 8005d6e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d76:	f7fa fe21 	bl	80009bc <__aeabi_dcmplt>
 8005d7a:	2800      	cmp	r0, #0
 8005d7c:	d04e      	beq.n	8005e1c <_dtoa_r+0x234>
 8005d7e:	2300      	movs	r3, #0
 8005d80:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8005d84:	930f      	str	r3, [sp, #60]	; 0x3c
 8005d86:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005d88:	1b1c      	subs	r4, r3, r4
 8005d8a:	1e63      	subs	r3, r4, #1
 8005d8c:	9309      	str	r3, [sp, #36]	; 0x24
 8005d8e:	bf49      	itett	mi
 8005d90:	f1c4 0301 	rsbmi	r3, r4, #1
 8005d94:	2300      	movpl	r3, #0
 8005d96:	9306      	strmi	r3, [sp, #24]
 8005d98:	2300      	movmi	r3, #0
 8005d9a:	bf54      	ite	pl
 8005d9c:	9306      	strpl	r3, [sp, #24]
 8005d9e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005da0:	f1b9 0f00 	cmp.w	r9, #0
 8005da4:	db3c      	blt.n	8005e20 <_dtoa_r+0x238>
 8005da6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005da8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005dac:	444b      	add	r3, r9
 8005dae:	9309      	str	r3, [sp, #36]	; 0x24
 8005db0:	2300      	movs	r3, #0
 8005db2:	930a      	str	r3, [sp, #40]	; 0x28
 8005db4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005db6:	2b09      	cmp	r3, #9
 8005db8:	d86c      	bhi.n	8005e94 <_dtoa_r+0x2ac>
 8005dba:	2b05      	cmp	r3, #5
 8005dbc:	bfc4      	itt	gt
 8005dbe:	3b04      	subgt	r3, #4
 8005dc0:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005dc2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005dc4:	bfc8      	it	gt
 8005dc6:	2400      	movgt	r4, #0
 8005dc8:	f1a3 0302 	sub.w	r3, r3, #2
 8005dcc:	bfd8      	it	le
 8005dce:	2401      	movle	r4, #1
 8005dd0:	2b03      	cmp	r3, #3
 8005dd2:	f200 808b 	bhi.w	8005eec <_dtoa_r+0x304>
 8005dd6:	e8df f003 	tbb	[pc, r3]
 8005dda:	4f2d      	.short	0x4f2d
 8005ddc:	5b4d      	.short	0x5b4d
 8005dde:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005de2:	441c      	add	r4, r3
 8005de4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005de8:	2b20      	cmp	r3, #32
 8005dea:	bfc3      	ittte	gt
 8005dec:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005df0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005df4:	fa09 f303 	lslgt.w	r3, r9, r3
 8005df8:	f1c3 0320 	rsble	r3, r3, #32
 8005dfc:	bfc6      	itte	gt
 8005dfe:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005e02:	4318      	orrgt	r0, r3
 8005e04:	fa06 f003 	lslle.w	r0, r6, r3
 8005e08:	f7fa faec 	bl	80003e4 <__aeabi_ui2d>
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005e12:	3c01      	subs	r4, #1
 8005e14:	9313      	str	r3, [sp, #76]	; 0x4c
 8005e16:	e770      	b.n	8005cfa <_dtoa_r+0x112>
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e7b3      	b.n	8005d84 <_dtoa_r+0x19c>
 8005e1c:	900f      	str	r0, [sp, #60]	; 0x3c
 8005e1e:	e7b2      	b.n	8005d86 <_dtoa_r+0x19e>
 8005e20:	9b06      	ldr	r3, [sp, #24]
 8005e22:	eba3 0309 	sub.w	r3, r3, r9
 8005e26:	9306      	str	r3, [sp, #24]
 8005e28:	f1c9 0300 	rsb	r3, r9, #0
 8005e2c:	930a      	str	r3, [sp, #40]	; 0x28
 8005e2e:	2300      	movs	r3, #0
 8005e30:	930e      	str	r3, [sp, #56]	; 0x38
 8005e32:	e7bf      	b.n	8005db4 <_dtoa_r+0x1cc>
 8005e34:	2300      	movs	r3, #0
 8005e36:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e38:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	dc59      	bgt.n	8005ef2 <_dtoa_r+0x30a>
 8005e3e:	f04f 0b01 	mov.w	fp, #1
 8005e42:	465b      	mov	r3, fp
 8005e44:	f8cd b008 	str.w	fp, [sp, #8]
 8005e48:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005e50:	6042      	str	r2, [r0, #4]
 8005e52:	2204      	movs	r2, #4
 8005e54:	f102 0614 	add.w	r6, r2, #20
 8005e58:	429e      	cmp	r6, r3
 8005e5a:	6841      	ldr	r1, [r0, #4]
 8005e5c:	d94f      	bls.n	8005efe <_dtoa_r+0x316>
 8005e5e:	4628      	mov	r0, r5
 8005e60:	f000 fcca 	bl	80067f8 <_Balloc>
 8005e64:	9008      	str	r0, [sp, #32]
 8005e66:	2800      	cmp	r0, #0
 8005e68:	d14d      	bne.n	8005f06 <_dtoa_r+0x31e>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005e70:	4b1d      	ldr	r3, [pc, #116]	; (8005ee8 <_dtoa_r+0x300>)
 8005e72:	e6cd      	b.n	8005c10 <_dtoa_r+0x28>
 8005e74:	2301      	movs	r3, #1
 8005e76:	e7de      	b.n	8005e36 <_dtoa_r+0x24e>
 8005e78:	2300      	movs	r3, #0
 8005e7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e7c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005e7e:	eb09 0b03 	add.w	fp, r9, r3
 8005e82:	f10b 0301 	add.w	r3, fp, #1
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	9302      	str	r3, [sp, #8]
 8005e8a:	bfb8      	it	lt
 8005e8c:	2301      	movlt	r3, #1
 8005e8e:	e7dd      	b.n	8005e4c <_dtoa_r+0x264>
 8005e90:	2301      	movs	r3, #1
 8005e92:	e7f2      	b.n	8005e7a <_dtoa_r+0x292>
 8005e94:	2401      	movs	r4, #1
 8005e96:	2300      	movs	r3, #0
 8005e98:	940b      	str	r4, [sp, #44]	; 0x2c
 8005e9a:	9322      	str	r3, [sp, #136]	; 0x88
 8005e9c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	2312      	movs	r3, #18
 8005ea4:	f8cd b008 	str.w	fp, [sp, #8]
 8005ea8:	9223      	str	r2, [sp, #140]	; 0x8c
 8005eaa:	e7cf      	b.n	8005e4c <_dtoa_r+0x264>
 8005eac:	f3af 8000 	nop.w
 8005eb0:	636f4361 	.word	0x636f4361
 8005eb4:	3fd287a7 	.word	0x3fd287a7
 8005eb8:	8b60c8b3 	.word	0x8b60c8b3
 8005ebc:	3fc68a28 	.word	0x3fc68a28
 8005ec0:	509f79fb 	.word	0x509f79fb
 8005ec4:	3fd34413 	.word	0x3fd34413
 8005ec8:	0800b77d 	.word	0x0800b77d
 8005ecc:	0800b794 	.word	0x0800b794
 8005ed0:	7ff00000 	.word	0x7ff00000
 8005ed4:	0800b779 	.word	0x0800b779
 8005ed8:	0800b770 	.word	0x0800b770
 8005edc:	0800b74d 	.word	0x0800b74d
 8005ee0:	3ff80000 	.word	0x3ff80000
 8005ee4:	0800b890 	.word	0x0800b890
 8005ee8:	0800b7f3 	.word	0x0800b7f3
 8005eec:	2301      	movs	r3, #1
 8005eee:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ef0:	e7d4      	b.n	8005e9c <_dtoa_r+0x2b4>
 8005ef2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8005ef6:	465b      	mov	r3, fp
 8005ef8:	f8cd b008 	str.w	fp, [sp, #8]
 8005efc:	e7a6      	b.n	8005e4c <_dtoa_r+0x264>
 8005efe:	3101      	adds	r1, #1
 8005f00:	6041      	str	r1, [r0, #4]
 8005f02:	0052      	lsls	r2, r2, #1
 8005f04:	e7a6      	b.n	8005e54 <_dtoa_r+0x26c>
 8005f06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005f08:	9a08      	ldr	r2, [sp, #32]
 8005f0a:	601a      	str	r2, [r3, #0]
 8005f0c:	9b02      	ldr	r3, [sp, #8]
 8005f0e:	2b0e      	cmp	r3, #14
 8005f10:	f200 80a8 	bhi.w	8006064 <_dtoa_r+0x47c>
 8005f14:	2c00      	cmp	r4, #0
 8005f16:	f000 80a5 	beq.w	8006064 <_dtoa_r+0x47c>
 8005f1a:	f1b9 0f00 	cmp.w	r9, #0
 8005f1e:	dd34      	ble.n	8005f8a <_dtoa_r+0x3a2>
 8005f20:	4a9a      	ldr	r2, [pc, #616]	; (800618c <_dtoa_r+0x5a4>)
 8005f22:	f009 030f 	and.w	r3, r9, #15
 8005f26:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005f2a:	f419 7f80 	tst.w	r9, #256	; 0x100
 8005f2e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005f32:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005f36:	ea4f 1429 	mov.w	r4, r9, asr #4
 8005f3a:	d016      	beq.n	8005f6a <_dtoa_r+0x382>
 8005f3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005f40:	4b93      	ldr	r3, [pc, #588]	; (8006190 <_dtoa_r+0x5a8>)
 8005f42:	2703      	movs	r7, #3
 8005f44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005f48:	f7fa fbf0 	bl	800072c <__aeabi_ddiv>
 8005f4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f50:	f004 040f 	and.w	r4, r4, #15
 8005f54:	4e8e      	ldr	r6, [pc, #568]	; (8006190 <_dtoa_r+0x5a8>)
 8005f56:	b954      	cbnz	r4, 8005f6e <_dtoa_r+0x386>
 8005f58:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005f5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f60:	f7fa fbe4 	bl	800072c <__aeabi_ddiv>
 8005f64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f68:	e029      	b.n	8005fbe <_dtoa_r+0x3d6>
 8005f6a:	2702      	movs	r7, #2
 8005f6c:	e7f2      	b.n	8005f54 <_dtoa_r+0x36c>
 8005f6e:	07e1      	lsls	r1, r4, #31
 8005f70:	d508      	bpl.n	8005f84 <_dtoa_r+0x39c>
 8005f72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005f76:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005f7a:	f7fa faad 	bl	80004d8 <__aeabi_dmul>
 8005f7e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005f82:	3701      	adds	r7, #1
 8005f84:	1064      	asrs	r4, r4, #1
 8005f86:	3608      	adds	r6, #8
 8005f88:	e7e5      	b.n	8005f56 <_dtoa_r+0x36e>
 8005f8a:	f000 80a5 	beq.w	80060d8 <_dtoa_r+0x4f0>
 8005f8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005f92:	f1c9 0400 	rsb	r4, r9, #0
 8005f96:	4b7d      	ldr	r3, [pc, #500]	; (800618c <_dtoa_r+0x5a4>)
 8005f98:	f004 020f 	and.w	r2, r4, #15
 8005f9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa4:	f7fa fa98 	bl	80004d8 <__aeabi_dmul>
 8005fa8:	2702      	movs	r7, #2
 8005faa:	2300      	movs	r3, #0
 8005fac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005fb0:	4e77      	ldr	r6, [pc, #476]	; (8006190 <_dtoa_r+0x5a8>)
 8005fb2:	1124      	asrs	r4, r4, #4
 8005fb4:	2c00      	cmp	r4, #0
 8005fb6:	f040 8084 	bne.w	80060c2 <_dtoa_r+0x4da>
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d1d2      	bne.n	8005f64 <_dtoa_r+0x37c>
 8005fbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	f000 808b 	beq.w	80060dc <_dtoa_r+0x4f4>
 8005fc6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005fca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005fce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	4b6f      	ldr	r3, [pc, #444]	; (8006194 <_dtoa_r+0x5ac>)
 8005fd6:	f7fa fcf1 	bl	80009bc <__aeabi_dcmplt>
 8005fda:	2800      	cmp	r0, #0
 8005fdc:	d07e      	beq.n	80060dc <_dtoa_r+0x4f4>
 8005fde:	9b02      	ldr	r3, [sp, #8]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d07b      	beq.n	80060dc <_dtoa_r+0x4f4>
 8005fe4:	f1bb 0f00 	cmp.w	fp, #0
 8005fe8:	dd38      	ble.n	800605c <_dtoa_r+0x474>
 8005fea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005fee:	2200      	movs	r2, #0
 8005ff0:	4b69      	ldr	r3, [pc, #420]	; (8006198 <_dtoa_r+0x5b0>)
 8005ff2:	f7fa fa71 	bl	80004d8 <__aeabi_dmul>
 8005ff6:	465c      	mov	r4, fp
 8005ff8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ffc:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
 8006000:	3701      	adds	r7, #1
 8006002:	4638      	mov	r0, r7
 8006004:	f7fa f9fe 	bl	8000404 <__aeabi_i2d>
 8006008:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800600c:	f7fa fa64 	bl	80004d8 <__aeabi_dmul>
 8006010:	2200      	movs	r2, #0
 8006012:	4b62      	ldr	r3, [pc, #392]	; (800619c <_dtoa_r+0x5b4>)
 8006014:	f7fa f8aa 	bl	800016c <__adddf3>
 8006018:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800601c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006020:	9611      	str	r6, [sp, #68]	; 0x44
 8006022:	2c00      	cmp	r4, #0
 8006024:	d15d      	bne.n	80060e2 <_dtoa_r+0x4fa>
 8006026:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800602a:	2200      	movs	r2, #0
 800602c:	4b5c      	ldr	r3, [pc, #368]	; (80061a0 <_dtoa_r+0x5b8>)
 800602e:	f7fa f89b 	bl	8000168 <__aeabi_dsub>
 8006032:	4602      	mov	r2, r0
 8006034:	460b      	mov	r3, r1
 8006036:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800603a:	4633      	mov	r3, r6
 800603c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800603e:	f7fa fcdb 	bl	80009f8 <__aeabi_dcmpgt>
 8006042:	2800      	cmp	r0, #0
 8006044:	f040 829e 	bne.w	8006584 <_dtoa_r+0x99c>
 8006048:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800604c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800604e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006052:	f7fa fcb3 	bl	80009bc <__aeabi_dcmplt>
 8006056:	2800      	cmp	r0, #0
 8006058:	f040 8292 	bne.w	8006580 <_dtoa_r+0x998>
 800605c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006060:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006064:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006066:	2b00      	cmp	r3, #0
 8006068:	f2c0 8153 	blt.w	8006312 <_dtoa_r+0x72a>
 800606c:	f1b9 0f0e 	cmp.w	r9, #14
 8006070:	f300 814f 	bgt.w	8006312 <_dtoa_r+0x72a>
 8006074:	4b45      	ldr	r3, [pc, #276]	; (800618c <_dtoa_r+0x5a4>)
 8006076:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800607a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800607e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006082:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006084:	2b00      	cmp	r3, #0
 8006086:	f280 80db 	bge.w	8006240 <_dtoa_r+0x658>
 800608a:	9b02      	ldr	r3, [sp, #8]
 800608c:	2b00      	cmp	r3, #0
 800608e:	f300 80d7 	bgt.w	8006240 <_dtoa_r+0x658>
 8006092:	f040 8274 	bne.w	800657e <_dtoa_r+0x996>
 8006096:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800609a:	2200      	movs	r2, #0
 800609c:	4b40      	ldr	r3, [pc, #256]	; (80061a0 <_dtoa_r+0x5b8>)
 800609e:	f7fa fa1b 	bl	80004d8 <__aeabi_dmul>
 80060a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060a6:	f7fa fc9d 	bl	80009e4 <__aeabi_dcmpge>
 80060aa:	9c02      	ldr	r4, [sp, #8]
 80060ac:	4626      	mov	r6, r4
 80060ae:	2800      	cmp	r0, #0
 80060b0:	f040 824a 	bne.w	8006548 <_dtoa_r+0x960>
 80060b4:	2331      	movs	r3, #49	; 0x31
 80060b6:	9f08      	ldr	r7, [sp, #32]
 80060b8:	f109 0901 	add.w	r9, r9, #1
 80060bc:	f807 3b01 	strb.w	r3, [r7], #1
 80060c0:	e246      	b.n	8006550 <_dtoa_r+0x968>
 80060c2:	07e2      	lsls	r2, r4, #31
 80060c4:	d505      	bpl.n	80060d2 <_dtoa_r+0x4ea>
 80060c6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80060ca:	f7fa fa05 	bl	80004d8 <__aeabi_dmul>
 80060ce:	2301      	movs	r3, #1
 80060d0:	3701      	adds	r7, #1
 80060d2:	1064      	asrs	r4, r4, #1
 80060d4:	3608      	adds	r6, #8
 80060d6:	e76d      	b.n	8005fb4 <_dtoa_r+0x3cc>
 80060d8:	2702      	movs	r7, #2
 80060da:	e770      	b.n	8005fbe <_dtoa_r+0x3d6>
 80060dc:	46c8      	mov	r8, r9
 80060de:	9c02      	ldr	r4, [sp, #8]
 80060e0:	e78f      	b.n	8006002 <_dtoa_r+0x41a>
 80060e2:	9908      	ldr	r1, [sp, #32]
 80060e4:	4b29      	ldr	r3, [pc, #164]	; (800618c <_dtoa_r+0x5a4>)
 80060e6:	4421      	add	r1, r4
 80060e8:	9112      	str	r1, [sp, #72]	; 0x48
 80060ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80060ec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80060f0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80060f4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80060f8:	2900      	cmp	r1, #0
 80060fa:	d055      	beq.n	80061a8 <_dtoa_r+0x5c0>
 80060fc:	2000      	movs	r0, #0
 80060fe:	4929      	ldr	r1, [pc, #164]	; (80061a4 <_dtoa_r+0x5bc>)
 8006100:	f7fa fb14 	bl	800072c <__aeabi_ddiv>
 8006104:	463b      	mov	r3, r7
 8006106:	4632      	mov	r2, r6
 8006108:	f7fa f82e 	bl	8000168 <__aeabi_dsub>
 800610c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006110:	9f08      	ldr	r7, [sp, #32]
 8006112:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006116:	f7fa fc8f 	bl	8000a38 <__aeabi_d2iz>
 800611a:	4604      	mov	r4, r0
 800611c:	f7fa f972 	bl	8000404 <__aeabi_i2d>
 8006120:	4602      	mov	r2, r0
 8006122:	460b      	mov	r3, r1
 8006124:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006128:	f7fa f81e 	bl	8000168 <__aeabi_dsub>
 800612c:	4602      	mov	r2, r0
 800612e:	460b      	mov	r3, r1
 8006130:	3430      	adds	r4, #48	; 0x30
 8006132:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006136:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800613a:	f807 4b01 	strb.w	r4, [r7], #1
 800613e:	f7fa fc3d 	bl	80009bc <__aeabi_dcmplt>
 8006142:	2800      	cmp	r0, #0
 8006144:	d174      	bne.n	8006230 <_dtoa_r+0x648>
 8006146:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800614a:	2000      	movs	r0, #0
 800614c:	4911      	ldr	r1, [pc, #68]	; (8006194 <_dtoa_r+0x5ac>)
 800614e:	f7fa f80b 	bl	8000168 <__aeabi_dsub>
 8006152:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006156:	f7fa fc31 	bl	80009bc <__aeabi_dcmplt>
 800615a:	2800      	cmp	r0, #0
 800615c:	f040 80b6 	bne.w	80062cc <_dtoa_r+0x6e4>
 8006160:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006162:	429f      	cmp	r7, r3
 8006164:	f43f af7a 	beq.w	800605c <_dtoa_r+0x474>
 8006168:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800616c:	2200      	movs	r2, #0
 800616e:	4b0a      	ldr	r3, [pc, #40]	; (8006198 <_dtoa_r+0x5b0>)
 8006170:	f7fa f9b2 	bl	80004d8 <__aeabi_dmul>
 8006174:	2200      	movs	r2, #0
 8006176:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800617a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800617e:	4b06      	ldr	r3, [pc, #24]	; (8006198 <_dtoa_r+0x5b0>)
 8006180:	f7fa f9aa 	bl	80004d8 <__aeabi_dmul>
 8006184:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006188:	e7c3      	b.n	8006112 <_dtoa_r+0x52a>
 800618a:	bf00      	nop
 800618c:	0800b890 	.word	0x0800b890
 8006190:	0800b868 	.word	0x0800b868
 8006194:	3ff00000 	.word	0x3ff00000
 8006198:	40240000 	.word	0x40240000
 800619c:	401c0000 	.word	0x401c0000
 80061a0:	40140000 	.word	0x40140000
 80061a4:	3fe00000 	.word	0x3fe00000
 80061a8:	4630      	mov	r0, r6
 80061aa:	4639      	mov	r1, r7
 80061ac:	f7fa f994 	bl	80004d8 <__aeabi_dmul>
 80061b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80061b2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80061b6:	9c08      	ldr	r4, [sp, #32]
 80061b8:	9314      	str	r3, [sp, #80]	; 0x50
 80061ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061be:	f7fa fc3b 	bl	8000a38 <__aeabi_d2iz>
 80061c2:	9015      	str	r0, [sp, #84]	; 0x54
 80061c4:	f7fa f91e 	bl	8000404 <__aeabi_i2d>
 80061c8:	4602      	mov	r2, r0
 80061ca:	460b      	mov	r3, r1
 80061cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061d0:	f7f9 ffca 	bl	8000168 <__aeabi_dsub>
 80061d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80061d6:	4606      	mov	r6, r0
 80061d8:	3330      	adds	r3, #48	; 0x30
 80061da:	f804 3b01 	strb.w	r3, [r4], #1
 80061de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80061e0:	460f      	mov	r7, r1
 80061e2:	429c      	cmp	r4, r3
 80061e4:	f04f 0200 	mov.w	r2, #0
 80061e8:	d124      	bne.n	8006234 <_dtoa_r+0x64c>
 80061ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80061ee:	4bb3      	ldr	r3, [pc, #716]	; (80064bc <_dtoa_r+0x8d4>)
 80061f0:	f7f9 ffbc 	bl	800016c <__adddf3>
 80061f4:	4602      	mov	r2, r0
 80061f6:	460b      	mov	r3, r1
 80061f8:	4630      	mov	r0, r6
 80061fa:	4639      	mov	r1, r7
 80061fc:	f7fa fbfc 	bl	80009f8 <__aeabi_dcmpgt>
 8006200:	2800      	cmp	r0, #0
 8006202:	d162      	bne.n	80062ca <_dtoa_r+0x6e2>
 8006204:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006208:	2000      	movs	r0, #0
 800620a:	49ac      	ldr	r1, [pc, #688]	; (80064bc <_dtoa_r+0x8d4>)
 800620c:	f7f9 ffac 	bl	8000168 <__aeabi_dsub>
 8006210:	4602      	mov	r2, r0
 8006212:	460b      	mov	r3, r1
 8006214:	4630      	mov	r0, r6
 8006216:	4639      	mov	r1, r7
 8006218:	f7fa fbd0 	bl	80009bc <__aeabi_dcmplt>
 800621c:	2800      	cmp	r0, #0
 800621e:	f43f af1d 	beq.w	800605c <_dtoa_r+0x474>
 8006222:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006224:	1e7b      	subs	r3, r7, #1
 8006226:	9314      	str	r3, [sp, #80]	; 0x50
 8006228:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800622c:	2b30      	cmp	r3, #48	; 0x30
 800622e:	d0f8      	beq.n	8006222 <_dtoa_r+0x63a>
 8006230:	46c1      	mov	r9, r8
 8006232:	e03a      	b.n	80062aa <_dtoa_r+0x6c2>
 8006234:	4ba2      	ldr	r3, [pc, #648]	; (80064c0 <_dtoa_r+0x8d8>)
 8006236:	f7fa f94f 	bl	80004d8 <__aeabi_dmul>
 800623a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800623e:	e7bc      	b.n	80061ba <_dtoa_r+0x5d2>
 8006240:	9f08      	ldr	r7, [sp, #32]
 8006242:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006246:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800624a:	f7fa fa6f 	bl	800072c <__aeabi_ddiv>
 800624e:	f7fa fbf3 	bl	8000a38 <__aeabi_d2iz>
 8006252:	4604      	mov	r4, r0
 8006254:	f7fa f8d6 	bl	8000404 <__aeabi_i2d>
 8006258:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800625c:	f7fa f93c 	bl	80004d8 <__aeabi_dmul>
 8006260:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006264:	460b      	mov	r3, r1
 8006266:	4602      	mov	r2, r0
 8006268:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800626c:	f7f9 ff7c 	bl	8000168 <__aeabi_dsub>
 8006270:	f807 6b01 	strb.w	r6, [r7], #1
 8006274:	9e08      	ldr	r6, [sp, #32]
 8006276:	9b02      	ldr	r3, [sp, #8]
 8006278:	1bbe      	subs	r6, r7, r6
 800627a:	42b3      	cmp	r3, r6
 800627c:	d13a      	bne.n	80062f4 <_dtoa_r+0x70c>
 800627e:	4602      	mov	r2, r0
 8006280:	460b      	mov	r3, r1
 8006282:	f7f9 ff73 	bl	800016c <__adddf3>
 8006286:	4602      	mov	r2, r0
 8006288:	460b      	mov	r3, r1
 800628a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800628e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006292:	f7fa fbb1 	bl	80009f8 <__aeabi_dcmpgt>
 8006296:	bb58      	cbnz	r0, 80062f0 <_dtoa_r+0x708>
 8006298:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800629c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062a0:	f7fa fb82 	bl	80009a8 <__aeabi_dcmpeq>
 80062a4:	b108      	cbz	r0, 80062aa <_dtoa_r+0x6c2>
 80062a6:	07e1      	lsls	r1, r4, #31
 80062a8:	d422      	bmi.n	80062f0 <_dtoa_r+0x708>
 80062aa:	4628      	mov	r0, r5
 80062ac:	4651      	mov	r1, sl
 80062ae:	f000 fae3 	bl	8006878 <_Bfree>
 80062b2:	2300      	movs	r3, #0
 80062b4:	703b      	strb	r3, [r7, #0]
 80062b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80062b8:	f109 0001 	add.w	r0, r9, #1
 80062bc:	6018      	str	r0, [r3, #0]
 80062be:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	f43f acdf 	beq.w	8005c84 <_dtoa_r+0x9c>
 80062c6:	601f      	str	r7, [r3, #0]
 80062c8:	e4dc      	b.n	8005c84 <_dtoa_r+0x9c>
 80062ca:	4627      	mov	r7, r4
 80062cc:	463b      	mov	r3, r7
 80062ce:	461f      	mov	r7, r3
 80062d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80062d4:	2a39      	cmp	r2, #57	; 0x39
 80062d6:	d107      	bne.n	80062e8 <_dtoa_r+0x700>
 80062d8:	9a08      	ldr	r2, [sp, #32]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d1f7      	bne.n	80062ce <_dtoa_r+0x6e6>
 80062de:	2230      	movs	r2, #48	; 0x30
 80062e0:	9908      	ldr	r1, [sp, #32]
 80062e2:	f108 0801 	add.w	r8, r8, #1
 80062e6:	700a      	strb	r2, [r1, #0]
 80062e8:	781a      	ldrb	r2, [r3, #0]
 80062ea:	3201      	adds	r2, #1
 80062ec:	701a      	strb	r2, [r3, #0]
 80062ee:	e79f      	b.n	8006230 <_dtoa_r+0x648>
 80062f0:	46c8      	mov	r8, r9
 80062f2:	e7eb      	b.n	80062cc <_dtoa_r+0x6e4>
 80062f4:	2200      	movs	r2, #0
 80062f6:	4b72      	ldr	r3, [pc, #456]	; (80064c0 <_dtoa_r+0x8d8>)
 80062f8:	f7fa f8ee 	bl	80004d8 <__aeabi_dmul>
 80062fc:	4602      	mov	r2, r0
 80062fe:	460b      	mov	r3, r1
 8006300:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006304:	2200      	movs	r2, #0
 8006306:	2300      	movs	r3, #0
 8006308:	f7fa fb4e 	bl	80009a8 <__aeabi_dcmpeq>
 800630c:	2800      	cmp	r0, #0
 800630e:	d098      	beq.n	8006242 <_dtoa_r+0x65a>
 8006310:	e7cb      	b.n	80062aa <_dtoa_r+0x6c2>
 8006312:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006314:	2a00      	cmp	r2, #0
 8006316:	f000 80cd 	beq.w	80064b4 <_dtoa_r+0x8cc>
 800631a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800631c:	2a01      	cmp	r2, #1
 800631e:	f300 80af 	bgt.w	8006480 <_dtoa_r+0x898>
 8006322:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006324:	2a00      	cmp	r2, #0
 8006326:	f000 80a7 	beq.w	8006478 <_dtoa_r+0x890>
 800632a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800632e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006330:	9f06      	ldr	r7, [sp, #24]
 8006332:	9a06      	ldr	r2, [sp, #24]
 8006334:	2101      	movs	r1, #1
 8006336:	441a      	add	r2, r3
 8006338:	9206      	str	r2, [sp, #24]
 800633a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800633c:	4628      	mov	r0, r5
 800633e:	441a      	add	r2, r3
 8006340:	9209      	str	r2, [sp, #36]	; 0x24
 8006342:	f000 fb53 	bl	80069ec <__i2b>
 8006346:	4606      	mov	r6, r0
 8006348:	2f00      	cmp	r7, #0
 800634a:	dd0c      	ble.n	8006366 <_dtoa_r+0x77e>
 800634c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800634e:	2b00      	cmp	r3, #0
 8006350:	dd09      	ble.n	8006366 <_dtoa_r+0x77e>
 8006352:	42bb      	cmp	r3, r7
 8006354:	bfa8      	it	ge
 8006356:	463b      	movge	r3, r7
 8006358:	9a06      	ldr	r2, [sp, #24]
 800635a:	1aff      	subs	r7, r7, r3
 800635c:	1ad2      	subs	r2, r2, r3
 800635e:	9206      	str	r2, [sp, #24]
 8006360:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	9309      	str	r3, [sp, #36]	; 0x24
 8006366:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006368:	b1f3      	cbz	r3, 80063a8 <_dtoa_r+0x7c0>
 800636a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800636c:	2b00      	cmp	r3, #0
 800636e:	f000 80a9 	beq.w	80064c4 <_dtoa_r+0x8dc>
 8006372:	2c00      	cmp	r4, #0
 8006374:	dd10      	ble.n	8006398 <_dtoa_r+0x7b0>
 8006376:	4631      	mov	r1, r6
 8006378:	4622      	mov	r2, r4
 800637a:	4628      	mov	r0, r5
 800637c:	f000 fbf0 	bl	8006b60 <__pow5mult>
 8006380:	4652      	mov	r2, sl
 8006382:	4601      	mov	r1, r0
 8006384:	4606      	mov	r6, r0
 8006386:	4628      	mov	r0, r5
 8006388:	f000 fb46 	bl	8006a18 <__multiply>
 800638c:	4680      	mov	r8, r0
 800638e:	4651      	mov	r1, sl
 8006390:	4628      	mov	r0, r5
 8006392:	f000 fa71 	bl	8006878 <_Bfree>
 8006396:	46c2      	mov	sl, r8
 8006398:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800639a:	1b1a      	subs	r2, r3, r4
 800639c:	d004      	beq.n	80063a8 <_dtoa_r+0x7c0>
 800639e:	4651      	mov	r1, sl
 80063a0:	4628      	mov	r0, r5
 80063a2:	f000 fbdd 	bl	8006b60 <__pow5mult>
 80063a6:	4682      	mov	sl, r0
 80063a8:	2101      	movs	r1, #1
 80063aa:	4628      	mov	r0, r5
 80063ac:	f000 fb1e 	bl	80069ec <__i2b>
 80063b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80063b2:	4604      	mov	r4, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f340 8087 	ble.w	80064c8 <_dtoa_r+0x8e0>
 80063ba:	461a      	mov	r2, r3
 80063bc:	4601      	mov	r1, r0
 80063be:	4628      	mov	r0, r5
 80063c0:	f000 fbce 	bl	8006b60 <__pow5mult>
 80063c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80063c6:	4604      	mov	r4, r0
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	f340 8080 	ble.w	80064ce <_dtoa_r+0x8e6>
 80063ce:	f04f 0800 	mov.w	r8, #0
 80063d2:	6923      	ldr	r3, [r4, #16]
 80063d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80063d8:	6918      	ldr	r0, [r3, #16]
 80063da:	f000 fab9 	bl	8006950 <__hi0bits>
 80063de:	f1c0 0020 	rsb	r0, r0, #32
 80063e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063e4:	4418      	add	r0, r3
 80063e6:	f010 001f 	ands.w	r0, r0, #31
 80063ea:	f000 8092 	beq.w	8006512 <_dtoa_r+0x92a>
 80063ee:	f1c0 0320 	rsb	r3, r0, #32
 80063f2:	2b04      	cmp	r3, #4
 80063f4:	f340 808a 	ble.w	800650c <_dtoa_r+0x924>
 80063f8:	f1c0 001c 	rsb	r0, r0, #28
 80063fc:	9b06      	ldr	r3, [sp, #24]
 80063fe:	4407      	add	r7, r0
 8006400:	4403      	add	r3, r0
 8006402:	9306      	str	r3, [sp, #24]
 8006404:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006406:	4403      	add	r3, r0
 8006408:	9309      	str	r3, [sp, #36]	; 0x24
 800640a:	9b06      	ldr	r3, [sp, #24]
 800640c:	2b00      	cmp	r3, #0
 800640e:	dd05      	ble.n	800641c <_dtoa_r+0x834>
 8006410:	4651      	mov	r1, sl
 8006412:	461a      	mov	r2, r3
 8006414:	4628      	mov	r0, r5
 8006416:	f000 fbfd 	bl	8006c14 <__lshift>
 800641a:	4682      	mov	sl, r0
 800641c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800641e:	2b00      	cmp	r3, #0
 8006420:	dd05      	ble.n	800642e <_dtoa_r+0x846>
 8006422:	4621      	mov	r1, r4
 8006424:	461a      	mov	r2, r3
 8006426:	4628      	mov	r0, r5
 8006428:	f000 fbf4 	bl	8006c14 <__lshift>
 800642c:	4604      	mov	r4, r0
 800642e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006430:	2b00      	cmp	r3, #0
 8006432:	d070      	beq.n	8006516 <_dtoa_r+0x92e>
 8006434:	4621      	mov	r1, r4
 8006436:	4650      	mov	r0, sl
 8006438:	f000 fc58 	bl	8006cec <__mcmp>
 800643c:	2800      	cmp	r0, #0
 800643e:	da6a      	bge.n	8006516 <_dtoa_r+0x92e>
 8006440:	2300      	movs	r3, #0
 8006442:	4651      	mov	r1, sl
 8006444:	220a      	movs	r2, #10
 8006446:	4628      	mov	r0, r5
 8006448:	f000 fa38 	bl	80068bc <__multadd>
 800644c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800644e:	4682      	mov	sl, r0
 8006450:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8006454:	2b00      	cmp	r3, #0
 8006456:	f000 8193 	beq.w	8006780 <_dtoa_r+0xb98>
 800645a:	4631      	mov	r1, r6
 800645c:	2300      	movs	r3, #0
 800645e:	220a      	movs	r2, #10
 8006460:	4628      	mov	r0, r5
 8006462:	f000 fa2b 	bl	80068bc <__multadd>
 8006466:	f1bb 0f00 	cmp.w	fp, #0
 800646a:	4606      	mov	r6, r0
 800646c:	f300 8093 	bgt.w	8006596 <_dtoa_r+0x9ae>
 8006470:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006472:	2b02      	cmp	r3, #2
 8006474:	dc57      	bgt.n	8006526 <_dtoa_r+0x93e>
 8006476:	e08e      	b.n	8006596 <_dtoa_r+0x9ae>
 8006478:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800647a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800647e:	e756      	b.n	800632e <_dtoa_r+0x746>
 8006480:	9b02      	ldr	r3, [sp, #8]
 8006482:	1e5c      	subs	r4, r3, #1
 8006484:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006486:	42a3      	cmp	r3, r4
 8006488:	bfb7      	itett	lt
 800648a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800648c:	1b1c      	subge	r4, r3, r4
 800648e:	1ae2      	sublt	r2, r4, r3
 8006490:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006492:	bfbe      	ittt	lt
 8006494:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006496:	189b      	addlt	r3, r3, r2
 8006498:	930e      	strlt	r3, [sp, #56]	; 0x38
 800649a:	9b02      	ldr	r3, [sp, #8]
 800649c:	bfb8      	it	lt
 800649e:	2400      	movlt	r4, #0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	bfbb      	ittet	lt
 80064a4:	9b06      	ldrlt	r3, [sp, #24]
 80064a6:	9a02      	ldrlt	r2, [sp, #8]
 80064a8:	9f06      	ldrge	r7, [sp, #24]
 80064aa:	1a9f      	sublt	r7, r3, r2
 80064ac:	bfac      	ite	ge
 80064ae:	9b02      	ldrge	r3, [sp, #8]
 80064b0:	2300      	movlt	r3, #0
 80064b2:	e73e      	b.n	8006332 <_dtoa_r+0x74a>
 80064b4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80064b6:	9f06      	ldr	r7, [sp, #24]
 80064b8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80064ba:	e745      	b.n	8006348 <_dtoa_r+0x760>
 80064bc:	3fe00000 	.word	0x3fe00000
 80064c0:	40240000 	.word	0x40240000
 80064c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064c6:	e76a      	b.n	800639e <_dtoa_r+0x7b6>
 80064c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	dc19      	bgt.n	8006502 <_dtoa_r+0x91a>
 80064ce:	9b04      	ldr	r3, [sp, #16]
 80064d0:	b9bb      	cbnz	r3, 8006502 <_dtoa_r+0x91a>
 80064d2:	9b05      	ldr	r3, [sp, #20]
 80064d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80064d8:	b99b      	cbnz	r3, 8006502 <_dtoa_r+0x91a>
 80064da:	9b05      	ldr	r3, [sp, #20]
 80064dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80064e0:	0d1b      	lsrs	r3, r3, #20
 80064e2:	051b      	lsls	r3, r3, #20
 80064e4:	b183      	cbz	r3, 8006508 <_dtoa_r+0x920>
 80064e6:	f04f 0801 	mov.w	r8, #1
 80064ea:	9b06      	ldr	r3, [sp, #24]
 80064ec:	3301      	adds	r3, #1
 80064ee:	9306      	str	r3, [sp, #24]
 80064f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064f2:	3301      	adds	r3, #1
 80064f4:	9309      	str	r3, [sp, #36]	; 0x24
 80064f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	f47f af6a 	bne.w	80063d2 <_dtoa_r+0x7ea>
 80064fe:	2001      	movs	r0, #1
 8006500:	e76f      	b.n	80063e2 <_dtoa_r+0x7fa>
 8006502:	f04f 0800 	mov.w	r8, #0
 8006506:	e7f6      	b.n	80064f6 <_dtoa_r+0x90e>
 8006508:	4698      	mov	r8, r3
 800650a:	e7f4      	b.n	80064f6 <_dtoa_r+0x90e>
 800650c:	f43f af7d 	beq.w	800640a <_dtoa_r+0x822>
 8006510:	4618      	mov	r0, r3
 8006512:	301c      	adds	r0, #28
 8006514:	e772      	b.n	80063fc <_dtoa_r+0x814>
 8006516:	9b02      	ldr	r3, [sp, #8]
 8006518:	2b00      	cmp	r3, #0
 800651a:	dc36      	bgt.n	800658a <_dtoa_r+0x9a2>
 800651c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800651e:	2b02      	cmp	r3, #2
 8006520:	dd33      	ble.n	800658a <_dtoa_r+0x9a2>
 8006522:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006526:	f1bb 0f00 	cmp.w	fp, #0
 800652a:	d10d      	bne.n	8006548 <_dtoa_r+0x960>
 800652c:	4621      	mov	r1, r4
 800652e:	465b      	mov	r3, fp
 8006530:	2205      	movs	r2, #5
 8006532:	4628      	mov	r0, r5
 8006534:	f000 f9c2 	bl	80068bc <__multadd>
 8006538:	4601      	mov	r1, r0
 800653a:	4604      	mov	r4, r0
 800653c:	4650      	mov	r0, sl
 800653e:	f000 fbd5 	bl	8006cec <__mcmp>
 8006542:	2800      	cmp	r0, #0
 8006544:	f73f adb6 	bgt.w	80060b4 <_dtoa_r+0x4cc>
 8006548:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800654a:	9f08      	ldr	r7, [sp, #32]
 800654c:	ea6f 0903 	mvn.w	r9, r3
 8006550:	f04f 0800 	mov.w	r8, #0
 8006554:	4621      	mov	r1, r4
 8006556:	4628      	mov	r0, r5
 8006558:	f000 f98e 	bl	8006878 <_Bfree>
 800655c:	2e00      	cmp	r6, #0
 800655e:	f43f aea4 	beq.w	80062aa <_dtoa_r+0x6c2>
 8006562:	f1b8 0f00 	cmp.w	r8, #0
 8006566:	d005      	beq.n	8006574 <_dtoa_r+0x98c>
 8006568:	45b0      	cmp	r8, r6
 800656a:	d003      	beq.n	8006574 <_dtoa_r+0x98c>
 800656c:	4641      	mov	r1, r8
 800656e:	4628      	mov	r0, r5
 8006570:	f000 f982 	bl	8006878 <_Bfree>
 8006574:	4631      	mov	r1, r6
 8006576:	4628      	mov	r0, r5
 8006578:	f000 f97e 	bl	8006878 <_Bfree>
 800657c:	e695      	b.n	80062aa <_dtoa_r+0x6c2>
 800657e:	2400      	movs	r4, #0
 8006580:	4626      	mov	r6, r4
 8006582:	e7e1      	b.n	8006548 <_dtoa_r+0x960>
 8006584:	46c1      	mov	r9, r8
 8006586:	4626      	mov	r6, r4
 8006588:	e594      	b.n	80060b4 <_dtoa_r+0x4cc>
 800658a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800658c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006590:	2b00      	cmp	r3, #0
 8006592:	f000 80fc 	beq.w	800678e <_dtoa_r+0xba6>
 8006596:	2f00      	cmp	r7, #0
 8006598:	dd05      	ble.n	80065a6 <_dtoa_r+0x9be>
 800659a:	4631      	mov	r1, r6
 800659c:	463a      	mov	r2, r7
 800659e:	4628      	mov	r0, r5
 80065a0:	f000 fb38 	bl	8006c14 <__lshift>
 80065a4:	4606      	mov	r6, r0
 80065a6:	f1b8 0f00 	cmp.w	r8, #0
 80065aa:	d05c      	beq.n	8006666 <_dtoa_r+0xa7e>
 80065ac:	4628      	mov	r0, r5
 80065ae:	6871      	ldr	r1, [r6, #4]
 80065b0:	f000 f922 	bl	80067f8 <_Balloc>
 80065b4:	4607      	mov	r7, r0
 80065b6:	b928      	cbnz	r0, 80065c4 <_dtoa_r+0x9dc>
 80065b8:	4602      	mov	r2, r0
 80065ba:	f240 21ea 	movw	r1, #746	; 0x2ea
 80065be:	4b7e      	ldr	r3, [pc, #504]	; (80067b8 <_dtoa_r+0xbd0>)
 80065c0:	f7ff bb26 	b.w	8005c10 <_dtoa_r+0x28>
 80065c4:	6932      	ldr	r2, [r6, #16]
 80065c6:	f106 010c 	add.w	r1, r6, #12
 80065ca:	3202      	adds	r2, #2
 80065cc:	0092      	lsls	r2, r2, #2
 80065ce:	300c      	adds	r0, #12
 80065d0:	f7fe fde6 	bl	80051a0 <memcpy>
 80065d4:	2201      	movs	r2, #1
 80065d6:	4639      	mov	r1, r7
 80065d8:	4628      	mov	r0, r5
 80065da:	f000 fb1b 	bl	8006c14 <__lshift>
 80065de:	46b0      	mov	r8, r6
 80065e0:	4606      	mov	r6, r0
 80065e2:	9b08      	ldr	r3, [sp, #32]
 80065e4:	3301      	adds	r3, #1
 80065e6:	9302      	str	r3, [sp, #8]
 80065e8:	9b08      	ldr	r3, [sp, #32]
 80065ea:	445b      	add	r3, fp
 80065ec:	930a      	str	r3, [sp, #40]	; 0x28
 80065ee:	9b04      	ldr	r3, [sp, #16]
 80065f0:	f003 0301 	and.w	r3, r3, #1
 80065f4:	9309      	str	r3, [sp, #36]	; 0x24
 80065f6:	9b02      	ldr	r3, [sp, #8]
 80065f8:	4621      	mov	r1, r4
 80065fa:	4650      	mov	r0, sl
 80065fc:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8006600:	f7ff fa64 	bl	8005acc <quorem>
 8006604:	4603      	mov	r3, r0
 8006606:	4641      	mov	r1, r8
 8006608:	3330      	adds	r3, #48	; 0x30
 800660a:	9004      	str	r0, [sp, #16]
 800660c:	4650      	mov	r0, sl
 800660e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006610:	f000 fb6c 	bl	8006cec <__mcmp>
 8006614:	4632      	mov	r2, r6
 8006616:	9006      	str	r0, [sp, #24]
 8006618:	4621      	mov	r1, r4
 800661a:	4628      	mov	r0, r5
 800661c:	f000 fb82 	bl	8006d24 <__mdiff>
 8006620:	68c2      	ldr	r2, [r0, #12]
 8006622:	4607      	mov	r7, r0
 8006624:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006626:	bb02      	cbnz	r2, 800666a <_dtoa_r+0xa82>
 8006628:	4601      	mov	r1, r0
 800662a:	4650      	mov	r0, sl
 800662c:	f000 fb5e 	bl	8006cec <__mcmp>
 8006630:	4602      	mov	r2, r0
 8006632:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006634:	4639      	mov	r1, r7
 8006636:	4628      	mov	r0, r5
 8006638:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800663c:	f000 f91c 	bl	8006878 <_Bfree>
 8006640:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006642:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006644:	9f02      	ldr	r7, [sp, #8]
 8006646:	ea43 0102 	orr.w	r1, r3, r2
 800664a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800664c:	430b      	orrs	r3, r1
 800664e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006650:	d10d      	bne.n	800666e <_dtoa_r+0xa86>
 8006652:	2b39      	cmp	r3, #57	; 0x39
 8006654:	d027      	beq.n	80066a6 <_dtoa_r+0xabe>
 8006656:	9a06      	ldr	r2, [sp, #24]
 8006658:	2a00      	cmp	r2, #0
 800665a:	dd01      	ble.n	8006660 <_dtoa_r+0xa78>
 800665c:	9b04      	ldr	r3, [sp, #16]
 800665e:	3331      	adds	r3, #49	; 0x31
 8006660:	f88b 3000 	strb.w	r3, [fp]
 8006664:	e776      	b.n	8006554 <_dtoa_r+0x96c>
 8006666:	4630      	mov	r0, r6
 8006668:	e7b9      	b.n	80065de <_dtoa_r+0x9f6>
 800666a:	2201      	movs	r2, #1
 800666c:	e7e2      	b.n	8006634 <_dtoa_r+0xa4c>
 800666e:	9906      	ldr	r1, [sp, #24]
 8006670:	2900      	cmp	r1, #0
 8006672:	db04      	blt.n	800667e <_dtoa_r+0xa96>
 8006674:	9822      	ldr	r0, [sp, #136]	; 0x88
 8006676:	4301      	orrs	r1, r0
 8006678:	9809      	ldr	r0, [sp, #36]	; 0x24
 800667a:	4301      	orrs	r1, r0
 800667c:	d120      	bne.n	80066c0 <_dtoa_r+0xad8>
 800667e:	2a00      	cmp	r2, #0
 8006680:	ddee      	ble.n	8006660 <_dtoa_r+0xa78>
 8006682:	4651      	mov	r1, sl
 8006684:	2201      	movs	r2, #1
 8006686:	4628      	mov	r0, r5
 8006688:	9302      	str	r3, [sp, #8]
 800668a:	f000 fac3 	bl	8006c14 <__lshift>
 800668e:	4621      	mov	r1, r4
 8006690:	4682      	mov	sl, r0
 8006692:	f000 fb2b 	bl	8006cec <__mcmp>
 8006696:	2800      	cmp	r0, #0
 8006698:	9b02      	ldr	r3, [sp, #8]
 800669a:	dc02      	bgt.n	80066a2 <_dtoa_r+0xaba>
 800669c:	d1e0      	bne.n	8006660 <_dtoa_r+0xa78>
 800669e:	07da      	lsls	r2, r3, #31
 80066a0:	d5de      	bpl.n	8006660 <_dtoa_r+0xa78>
 80066a2:	2b39      	cmp	r3, #57	; 0x39
 80066a4:	d1da      	bne.n	800665c <_dtoa_r+0xa74>
 80066a6:	2339      	movs	r3, #57	; 0x39
 80066a8:	f88b 3000 	strb.w	r3, [fp]
 80066ac:	463b      	mov	r3, r7
 80066ae:	461f      	mov	r7, r3
 80066b0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80066b4:	3b01      	subs	r3, #1
 80066b6:	2a39      	cmp	r2, #57	; 0x39
 80066b8:	d050      	beq.n	800675c <_dtoa_r+0xb74>
 80066ba:	3201      	adds	r2, #1
 80066bc:	701a      	strb	r2, [r3, #0]
 80066be:	e749      	b.n	8006554 <_dtoa_r+0x96c>
 80066c0:	2a00      	cmp	r2, #0
 80066c2:	dd03      	ble.n	80066cc <_dtoa_r+0xae4>
 80066c4:	2b39      	cmp	r3, #57	; 0x39
 80066c6:	d0ee      	beq.n	80066a6 <_dtoa_r+0xabe>
 80066c8:	3301      	adds	r3, #1
 80066ca:	e7c9      	b.n	8006660 <_dtoa_r+0xa78>
 80066cc:	9a02      	ldr	r2, [sp, #8]
 80066ce:	990a      	ldr	r1, [sp, #40]	; 0x28
 80066d0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80066d4:	428a      	cmp	r2, r1
 80066d6:	d02a      	beq.n	800672e <_dtoa_r+0xb46>
 80066d8:	4651      	mov	r1, sl
 80066da:	2300      	movs	r3, #0
 80066dc:	220a      	movs	r2, #10
 80066de:	4628      	mov	r0, r5
 80066e0:	f000 f8ec 	bl	80068bc <__multadd>
 80066e4:	45b0      	cmp	r8, r6
 80066e6:	4682      	mov	sl, r0
 80066e8:	f04f 0300 	mov.w	r3, #0
 80066ec:	f04f 020a 	mov.w	r2, #10
 80066f0:	4641      	mov	r1, r8
 80066f2:	4628      	mov	r0, r5
 80066f4:	d107      	bne.n	8006706 <_dtoa_r+0xb1e>
 80066f6:	f000 f8e1 	bl	80068bc <__multadd>
 80066fa:	4680      	mov	r8, r0
 80066fc:	4606      	mov	r6, r0
 80066fe:	9b02      	ldr	r3, [sp, #8]
 8006700:	3301      	adds	r3, #1
 8006702:	9302      	str	r3, [sp, #8]
 8006704:	e777      	b.n	80065f6 <_dtoa_r+0xa0e>
 8006706:	f000 f8d9 	bl	80068bc <__multadd>
 800670a:	4631      	mov	r1, r6
 800670c:	4680      	mov	r8, r0
 800670e:	2300      	movs	r3, #0
 8006710:	220a      	movs	r2, #10
 8006712:	4628      	mov	r0, r5
 8006714:	f000 f8d2 	bl	80068bc <__multadd>
 8006718:	4606      	mov	r6, r0
 800671a:	e7f0      	b.n	80066fe <_dtoa_r+0xb16>
 800671c:	f1bb 0f00 	cmp.w	fp, #0
 8006720:	bfcc      	ite	gt
 8006722:	465f      	movgt	r7, fp
 8006724:	2701      	movle	r7, #1
 8006726:	f04f 0800 	mov.w	r8, #0
 800672a:	9a08      	ldr	r2, [sp, #32]
 800672c:	4417      	add	r7, r2
 800672e:	4651      	mov	r1, sl
 8006730:	2201      	movs	r2, #1
 8006732:	4628      	mov	r0, r5
 8006734:	9302      	str	r3, [sp, #8]
 8006736:	f000 fa6d 	bl	8006c14 <__lshift>
 800673a:	4621      	mov	r1, r4
 800673c:	4682      	mov	sl, r0
 800673e:	f000 fad5 	bl	8006cec <__mcmp>
 8006742:	2800      	cmp	r0, #0
 8006744:	dcb2      	bgt.n	80066ac <_dtoa_r+0xac4>
 8006746:	d102      	bne.n	800674e <_dtoa_r+0xb66>
 8006748:	9b02      	ldr	r3, [sp, #8]
 800674a:	07db      	lsls	r3, r3, #31
 800674c:	d4ae      	bmi.n	80066ac <_dtoa_r+0xac4>
 800674e:	463b      	mov	r3, r7
 8006750:	461f      	mov	r7, r3
 8006752:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006756:	2a30      	cmp	r2, #48	; 0x30
 8006758:	d0fa      	beq.n	8006750 <_dtoa_r+0xb68>
 800675a:	e6fb      	b.n	8006554 <_dtoa_r+0x96c>
 800675c:	9a08      	ldr	r2, [sp, #32]
 800675e:	429a      	cmp	r2, r3
 8006760:	d1a5      	bne.n	80066ae <_dtoa_r+0xac6>
 8006762:	2331      	movs	r3, #49	; 0x31
 8006764:	f109 0901 	add.w	r9, r9, #1
 8006768:	7013      	strb	r3, [r2, #0]
 800676a:	e6f3      	b.n	8006554 <_dtoa_r+0x96c>
 800676c:	4b13      	ldr	r3, [pc, #76]	; (80067bc <_dtoa_r+0xbd4>)
 800676e:	f7ff baa7 	b.w	8005cc0 <_dtoa_r+0xd8>
 8006772:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006774:	2b00      	cmp	r3, #0
 8006776:	f47f aa80 	bne.w	8005c7a <_dtoa_r+0x92>
 800677a:	4b11      	ldr	r3, [pc, #68]	; (80067c0 <_dtoa_r+0xbd8>)
 800677c:	f7ff baa0 	b.w	8005cc0 <_dtoa_r+0xd8>
 8006780:	f1bb 0f00 	cmp.w	fp, #0
 8006784:	dc03      	bgt.n	800678e <_dtoa_r+0xba6>
 8006786:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006788:	2b02      	cmp	r3, #2
 800678a:	f73f aecc 	bgt.w	8006526 <_dtoa_r+0x93e>
 800678e:	9f08      	ldr	r7, [sp, #32]
 8006790:	4621      	mov	r1, r4
 8006792:	4650      	mov	r0, sl
 8006794:	f7ff f99a 	bl	8005acc <quorem>
 8006798:	9a08      	ldr	r2, [sp, #32]
 800679a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800679e:	f807 3b01 	strb.w	r3, [r7], #1
 80067a2:	1aba      	subs	r2, r7, r2
 80067a4:	4593      	cmp	fp, r2
 80067a6:	ddb9      	ble.n	800671c <_dtoa_r+0xb34>
 80067a8:	4651      	mov	r1, sl
 80067aa:	2300      	movs	r3, #0
 80067ac:	220a      	movs	r2, #10
 80067ae:	4628      	mov	r0, r5
 80067b0:	f000 f884 	bl	80068bc <__multadd>
 80067b4:	4682      	mov	sl, r0
 80067b6:	e7eb      	b.n	8006790 <_dtoa_r+0xba8>
 80067b8:	0800b7f3 	.word	0x0800b7f3
 80067bc:	0800b74c 	.word	0x0800b74c
 80067c0:	0800b770 	.word	0x0800b770

080067c4 <_localeconv_r>:
 80067c4:	4800      	ldr	r0, [pc, #0]	; (80067c8 <_localeconv_r+0x4>)
 80067c6:	4770      	bx	lr
 80067c8:	200001fc 	.word	0x200001fc

080067cc <malloc>:
 80067cc:	4b02      	ldr	r3, [pc, #8]	; (80067d8 <malloc+0xc>)
 80067ce:	4601      	mov	r1, r0
 80067d0:	6818      	ldr	r0, [r3, #0]
 80067d2:	f000 bbed 	b.w	8006fb0 <_malloc_r>
 80067d6:	bf00      	nop
 80067d8:	200000a8 	.word	0x200000a8

080067dc <memchr>:
 80067dc:	4603      	mov	r3, r0
 80067de:	b510      	push	{r4, lr}
 80067e0:	b2c9      	uxtb	r1, r1
 80067e2:	4402      	add	r2, r0
 80067e4:	4293      	cmp	r3, r2
 80067e6:	4618      	mov	r0, r3
 80067e8:	d101      	bne.n	80067ee <memchr+0x12>
 80067ea:	2000      	movs	r0, #0
 80067ec:	e003      	b.n	80067f6 <memchr+0x1a>
 80067ee:	7804      	ldrb	r4, [r0, #0]
 80067f0:	3301      	adds	r3, #1
 80067f2:	428c      	cmp	r4, r1
 80067f4:	d1f6      	bne.n	80067e4 <memchr+0x8>
 80067f6:	bd10      	pop	{r4, pc}

080067f8 <_Balloc>:
 80067f8:	b570      	push	{r4, r5, r6, lr}
 80067fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80067fc:	4604      	mov	r4, r0
 80067fe:	460d      	mov	r5, r1
 8006800:	b976      	cbnz	r6, 8006820 <_Balloc+0x28>
 8006802:	2010      	movs	r0, #16
 8006804:	f7ff ffe2 	bl	80067cc <malloc>
 8006808:	4602      	mov	r2, r0
 800680a:	6260      	str	r0, [r4, #36]	; 0x24
 800680c:	b920      	cbnz	r0, 8006818 <_Balloc+0x20>
 800680e:	2166      	movs	r1, #102	; 0x66
 8006810:	4b17      	ldr	r3, [pc, #92]	; (8006870 <_Balloc+0x78>)
 8006812:	4818      	ldr	r0, [pc, #96]	; (8006874 <_Balloc+0x7c>)
 8006814:	f000 fd92 	bl	800733c <__assert_func>
 8006818:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800681c:	6006      	str	r6, [r0, #0]
 800681e:	60c6      	str	r6, [r0, #12]
 8006820:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006822:	68f3      	ldr	r3, [r6, #12]
 8006824:	b183      	cbz	r3, 8006848 <_Balloc+0x50>
 8006826:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800682e:	b9b8      	cbnz	r0, 8006860 <_Balloc+0x68>
 8006830:	2101      	movs	r1, #1
 8006832:	fa01 f605 	lsl.w	r6, r1, r5
 8006836:	1d72      	adds	r2, r6, #5
 8006838:	4620      	mov	r0, r4
 800683a:	0092      	lsls	r2, r2, #2
 800683c:	f000 fb5e 	bl	8006efc <_calloc_r>
 8006840:	b160      	cbz	r0, 800685c <_Balloc+0x64>
 8006842:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006846:	e00e      	b.n	8006866 <_Balloc+0x6e>
 8006848:	2221      	movs	r2, #33	; 0x21
 800684a:	2104      	movs	r1, #4
 800684c:	4620      	mov	r0, r4
 800684e:	f000 fb55 	bl	8006efc <_calloc_r>
 8006852:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006854:	60f0      	str	r0, [r6, #12]
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d1e4      	bne.n	8006826 <_Balloc+0x2e>
 800685c:	2000      	movs	r0, #0
 800685e:	bd70      	pop	{r4, r5, r6, pc}
 8006860:	6802      	ldr	r2, [r0, #0]
 8006862:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006866:	2300      	movs	r3, #0
 8006868:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800686c:	e7f7      	b.n	800685e <_Balloc+0x66>
 800686e:	bf00      	nop
 8006870:	0800b77d 	.word	0x0800b77d
 8006874:	0800b804 	.word	0x0800b804

08006878 <_Bfree>:
 8006878:	b570      	push	{r4, r5, r6, lr}
 800687a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800687c:	4605      	mov	r5, r0
 800687e:	460c      	mov	r4, r1
 8006880:	b976      	cbnz	r6, 80068a0 <_Bfree+0x28>
 8006882:	2010      	movs	r0, #16
 8006884:	f7ff ffa2 	bl	80067cc <malloc>
 8006888:	4602      	mov	r2, r0
 800688a:	6268      	str	r0, [r5, #36]	; 0x24
 800688c:	b920      	cbnz	r0, 8006898 <_Bfree+0x20>
 800688e:	218a      	movs	r1, #138	; 0x8a
 8006890:	4b08      	ldr	r3, [pc, #32]	; (80068b4 <_Bfree+0x3c>)
 8006892:	4809      	ldr	r0, [pc, #36]	; (80068b8 <_Bfree+0x40>)
 8006894:	f000 fd52 	bl	800733c <__assert_func>
 8006898:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800689c:	6006      	str	r6, [r0, #0]
 800689e:	60c6      	str	r6, [r0, #12]
 80068a0:	b13c      	cbz	r4, 80068b2 <_Bfree+0x3a>
 80068a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80068a4:	6862      	ldr	r2, [r4, #4]
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80068ac:	6021      	str	r1, [r4, #0]
 80068ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80068b2:	bd70      	pop	{r4, r5, r6, pc}
 80068b4:	0800b77d 	.word	0x0800b77d
 80068b8:	0800b804 	.word	0x0800b804

080068bc <__multadd>:
 80068bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068c0:	4698      	mov	r8, r3
 80068c2:	460c      	mov	r4, r1
 80068c4:	2300      	movs	r3, #0
 80068c6:	690e      	ldr	r6, [r1, #16]
 80068c8:	4607      	mov	r7, r0
 80068ca:	f101 0014 	add.w	r0, r1, #20
 80068ce:	6805      	ldr	r5, [r0, #0]
 80068d0:	3301      	adds	r3, #1
 80068d2:	b2a9      	uxth	r1, r5
 80068d4:	fb02 8101 	mla	r1, r2, r1, r8
 80068d8:	0c2d      	lsrs	r5, r5, #16
 80068da:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80068de:	fb02 c505 	mla	r5, r2, r5, ip
 80068e2:	b289      	uxth	r1, r1
 80068e4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80068e8:	429e      	cmp	r6, r3
 80068ea:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80068ee:	f840 1b04 	str.w	r1, [r0], #4
 80068f2:	dcec      	bgt.n	80068ce <__multadd+0x12>
 80068f4:	f1b8 0f00 	cmp.w	r8, #0
 80068f8:	d022      	beq.n	8006940 <__multadd+0x84>
 80068fa:	68a3      	ldr	r3, [r4, #8]
 80068fc:	42b3      	cmp	r3, r6
 80068fe:	dc19      	bgt.n	8006934 <__multadd+0x78>
 8006900:	6861      	ldr	r1, [r4, #4]
 8006902:	4638      	mov	r0, r7
 8006904:	3101      	adds	r1, #1
 8006906:	f7ff ff77 	bl	80067f8 <_Balloc>
 800690a:	4605      	mov	r5, r0
 800690c:	b928      	cbnz	r0, 800691a <__multadd+0x5e>
 800690e:	4602      	mov	r2, r0
 8006910:	21b5      	movs	r1, #181	; 0xb5
 8006912:	4b0d      	ldr	r3, [pc, #52]	; (8006948 <__multadd+0x8c>)
 8006914:	480d      	ldr	r0, [pc, #52]	; (800694c <__multadd+0x90>)
 8006916:	f000 fd11 	bl	800733c <__assert_func>
 800691a:	6922      	ldr	r2, [r4, #16]
 800691c:	f104 010c 	add.w	r1, r4, #12
 8006920:	3202      	adds	r2, #2
 8006922:	0092      	lsls	r2, r2, #2
 8006924:	300c      	adds	r0, #12
 8006926:	f7fe fc3b 	bl	80051a0 <memcpy>
 800692a:	4621      	mov	r1, r4
 800692c:	4638      	mov	r0, r7
 800692e:	f7ff ffa3 	bl	8006878 <_Bfree>
 8006932:	462c      	mov	r4, r5
 8006934:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006938:	3601      	adds	r6, #1
 800693a:	f8c3 8014 	str.w	r8, [r3, #20]
 800693e:	6126      	str	r6, [r4, #16]
 8006940:	4620      	mov	r0, r4
 8006942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006946:	bf00      	nop
 8006948:	0800b7f3 	.word	0x0800b7f3
 800694c:	0800b804 	.word	0x0800b804

08006950 <__hi0bits>:
 8006950:	0c02      	lsrs	r2, r0, #16
 8006952:	0412      	lsls	r2, r2, #16
 8006954:	4603      	mov	r3, r0
 8006956:	b9ca      	cbnz	r2, 800698c <__hi0bits+0x3c>
 8006958:	0403      	lsls	r3, r0, #16
 800695a:	2010      	movs	r0, #16
 800695c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006960:	bf04      	itt	eq
 8006962:	021b      	lsleq	r3, r3, #8
 8006964:	3008      	addeq	r0, #8
 8006966:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800696a:	bf04      	itt	eq
 800696c:	011b      	lsleq	r3, r3, #4
 800696e:	3004      	addeq	r0, #4
 8006970:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006974:	bf04      	itt	eq
 8006976:	009b      	lsleq	r3, r3, #2
 8006978:	3002      	addeq	r0, #2
 800697a:	2b00      	cmp	r3, #0
 800697c:	db05      	blt.n	800698a <__hi0bits+0x3a>
 800697e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006982:	f100 0001 	add.w	r0, r0, #1
 8006986:	bf08      	it	eq
 8006988:	2020      	moveq	r0, #32
 800698a:	4770      	bx	lr
 800698c:	2000      	movs	r0, #0
 800698e:	e7e5      	b.n	800695c <__hi0bits+0xc>

08006990 <__lo0bits>:
 8006990:	6803      	ldr	r3, [r0, #0]
 8006992:	4602      	mov	r2, r0
 8006994:	f013 0007 	ands.w	r0, r3, #7
 8006998:	d00b      	beq.n	80069b2 <__lo0bits+0x22>
 800699a:	07d9      	lsls	r1, r3, #31
 800699c:	d422      	bmi.n	80069e4 <__lo0bits+0x54>
 800699e:	0798      	lsls	r0, r3, #30
 80069a0:	bf49      	itett	mi
 80069a2:	085b      	lsrmi	r3, r3, #1
 80069a4:	089b      	lsrpl	r3, r3, #2
 80069a6:	2001      	movmi	r0, #1
 80069a8:	6013      	strmi	r3, [r2, #0]
 80069aa:	bf5c      	itt	pl
 80069ac:	2002      	movpl	r0, #2
 80069ae:	6013      	strpl	r3, [r2, #0]
 80069b0:	4770      	bx	lr
 80069b2:	b299      	uxth	r1, r3
 80069b4:	b909      	cbnz	r1, 80069ba <__lo0bits+0x2a>
 80069b6:	2010      	movs	r0, #16
 80069b8:	0c1b      	lsrs	r3, r3, #16
 80069ba:	f013 0fff 	tst.w	r3, #255	; 0xff
 80069be:	bf04      	itt	eq
 80069c0:	0a1b      	lsreq	r3, r3, #8
 80069c2:	3008      	addeq	r0, #8
 80069c4:	0719      	lsls	r1, r3, #28
 80069c6:	bf04      	itt	eq
 80069c8:	091b      	lsreq	r3, r3, #4
 80069ca:	3004      	addeq	r0, #4
 80069cc:	0799      	lsls	r1, r3, #30
 80069ce:	bf04      	itt	eq
 80069d0:	089b      	lsreq	r3, r3, #2
 80069d2:	3002      	addeq	r0, #2
 80069d4:	07d9      	lsls	r1, r3, #31
 80069d6:	d403      	bmi.n	80069e0 <__lo0bits+0x50>
 80069d8:	085b      	lsrs	r3, r3, #1
 80069da:	f100 0001 	add.w	r0, r0, #1
 80069de:	d003      	beq.n	80069e8 <__lo0bits+0x58>
 80069e0:	6013      	str	r3, [r2, #0]
 80069e2:	4770      	bx	lr
 80069e4:	2000      	movs	r0, #0
 80069e6:	4770      	bx	lr
 80069e8:	2020      	movs	r0, #32
 80069ea:	4770      	bx	lr

080069ec <__i2b>:
 80069ec:	b510      	push	{r4, lr}
 80069ee:	460c      	mov	r4, r1
 80069f0:	2101      	movs	r1, #1
 80069f2:	f7ff ff01 	bl	80067f8 <_Balloc>
 80069f6:	4602      	mov	r2, r0
 80069f8:	b928      	cbnz	r0, 8006a06 <__i2b+0x1a>
 80069fa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80069fe:	4b04      	ldr	r3, [pc, #16]	; (8006a10 <__i2b+0x24>)
 8006a00:	4804      	ldr	r0, [pc, #16]	; (8006a14 <__i2b+0x28>)
 8006a02:	f000 fc9b 	bl	800733c <__assert_func>
 8006a06:	2301      	movs	r3, #1
 8006a08:	6144      	str	r4, [r0, #20]
 8006a0a:	6103      	str	r3, [r0, #16]
 8006a0c:	bd10      	pop	{r4, pc}
 8006a0e:	bf00      	nop
 8006a10:	0800b7f3 	.word	0x0800b7f3
 8006a14:	0800b804 	.word	0x0800b804

08006a18 <__multiply>:
 8006a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a1c:	4614      	mov	r4, r2
 8006a1e:	690a      	ldr	r2, [r1, #16]
 8006a20:	6923      	ldr	r3, [r4, #16]
 8006a22:	460d      	mov	r5, r1
 8006a24:	429a      	cmp	r2, r3
 8006a26:	bfbe      	ittt	lt
 8006a28:	460b      	movlt	r3, r1
 8006a2a:	4625      	movlt	r5, r4
 8006a2c:	461c      	movlt	r4, r3
 8006a2e:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006a32:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006a36:	68ab      	ldr	r3, [r5, #8]
 8006a38:	6869      	ldr	r1, [r5, #4]
 8006a3a:	eb0a 0709 	add.w	r7, sl, r9
 8006a3e:	42bb      	cmp	r3, r7
 8006a40:	b085      	sub	sp, #20
 8006a42:	bfb8      	it	lt
 8006a44:	3101      	addlt	r1, #1
 8006a46:	f7ff fed7 	bl	80067f8 <_Balloc>
 8006a4a:	b930      	cbnz	r0, 8006a5a <__multiply+0x42>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	f240 115d 	movw	r1, #349	; 0x15d
 8006a52:	4b41      	ldr	r3, [pc, #260]	; (8006b58 <__multiply+0x140>)
 8006a54:	4841      	ldr	r0, [pc, #260]	; (8006b5c <__multiply+0x144>)
 8006a56:	f000 fc71 	bl	800733c <__assert_func>
 8006a5a:	f100 0614 	add.w	r6, r0, #20
 8006a5e:	4633      	mov	r3, r6
 8006a60:	2200      	movs	r2, #0
 8006a62:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006a66:	4543      	cmp	r3, r8
 8006a68:	d31e      	bcc.n	8006aa8 <__multiply+0x90>
 8006a6a:	f105 0c14 	add.w	ip, r5, #20
 8006a6e:	f104 0314 	add.w	r3, r4, #20
 8006a72:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006a76:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006a7a:	9202      	str	r2, [sp, #8]
 8006a7c:	ebac 0205 	sub.w	r2, ip, r5
 8006a80:	3a15      	subs	r2, #21
 8006a82:	f022 0203 	bic.w	r2, r2, #3
 8006a86:	3204      	adds	r2, #4
 8006a88:	f105 0115 	add.w	r1, r5, #21
 8006a8c:	458c      	cmp	ip, r1
 8006a8e:	bf38      	it	cc
 8006a90:	2204      	movcc	r2, #4
 8006a92:	9201      	str	r2, [sp, #4]
 8006a94:	9a02      	ldr	r2, [sp, #8]
 8006a96:	9303      	str	r3, [sp, #12]
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d808      	bhi.n	8006aae <__multiply+0x96>
 8006a9c:	2f00      	cmp	r7, #0
 8006a9e:	dc55      	bgt.n	8006b4c <__multiply+0x134>
 8006aa0:	6107      	str	r7, [r0, #16]
 8006aa2:	b005      	add	sp, #20
 8006aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aa8:	f843 2b04 	str.w	r2, [r3], #4
 8006aac:	e7db      	b.n	8006a66 <__multiply+0x4e>
 8006aae:	f8b3 a000 	ldrh.w	sl, [r3]
 8006ab2:	f1ba 0f00 	cmp.w	sl, #0
 8006ab6:	d020      	beq.n	8006afa <__multiply+0xe2>
 8006ab8:	46b1      	mov	r9, r6
 8006aba:	2200      	movs	r2, #0
 8006abc:	f105 0e14 	add.w	lr, r5, #20
 8006ac0:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006ac4:	f8d9 b000 	ldr.w	fp, [r9]
 8006ac8:	b2a1      	uxth	r1, r4
 8006aca:	fa1f fb8b 	uxth.w	fp, fp
 8006ace:	fb0a b101 	mla	r1, sl, r1, fp
 8006ad2:	4411      	add	r1, r2
 8006ad4:	f8d9 2000 	ldr.w	r2, [r9]
 8006ad8:	0c24      	lsrs	r4, r4, #16
 8006ada:	0c12      	lsrs	r2, r2, #16
 8006adc:	fb0a 2404 	mla	r4, sl, r4, r2
 8006ae0:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006ae4:	b289      	uxth	r1, r1
 8006ae6:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006aea:	45f4      	cmp	ip, lr
 8006aec:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006af0:	f849 1b04 	str.w	r1, [r9], #4
 8006af4:	d8e4      	bhi.n	8006ac0 <__multiply+0xa8>
 8006af6:	9901      	ldr	r1, [sp, #4]
 8006af8:	5072      	str	r2, [r6, r1]
 8006afa:	9a03      	ldr	r2, [sp, #12]
 8006afc:	3304      	adds	r3, #4
 8006afe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006b02:	f1b9 0f00 	cmp.w	r9, #0
 8006b06:	d01f      	beq.n	8006b48 <__multiply+0x130>
 8006b08:	46b6      	mov	lr, r6
 8006b0a:	f04f 0a00 	mov.w	sl, #0
 8006b0e:	6834      	ldr	r4, [r6, #0]
 8006b10:	f105 0114 	add.w	r1, r5, #20
 8006b14:	880a      	ldrh	r2, [r1, #0]
 8006b16:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006b1a:	b2a4      	uxth	r4, r4
 8006b1c:	fb09 b202 	mla	r2, r9, r2, fp
 8006b20:	4492      	add	sl, r2
 8006b22:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006b26:	f84e 4b04 	str.w	r4, [lr], #4
 8006b2a:	f851 4b04 	ldr.w	r4, [r1], #4
 8006b2e:	f8be 2000 	ldrh.w	r2, [lr]
 8006b32:	0c24      	lsrs	r4, r4, #16
 8006b34:	fb09 2404 	mla	r4, r9, r4, r2
 8006b38:	458c      	cmp	ip, r1
 8006b3a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8006b3e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006b42:	d8e7      	bhi.n	8006b14 <__multiply+0xfc>
 8006b44:	9a01      	ldr	r2, [sp, #4]
 8006b46:	50b4      	str	r4, [r6, r2]
 8006b48:	3604      	adds	r6, #4
 8006b4a:	e7a3      	b.n	8006a94 <__multiply+0x7c>
 8006b4c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d1a5      	bne.n	8006aa0 <__multiply+0x88>
 8006b54:	3f01      	subs	r7, #1
 8006b56:	e7a1      	b.n	8006a9c <__multiply+0x84>
 8006b58:	0800b7f3 	.word	0x0800b7f3
 8006b5c:	0800b804 	.word	0x0800b804

08006b60 <__pow5mult>:
 8006b60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b64:	4615      	mov	r5, r2
 8006b66:	f012 0203 	ands.w	r2, r2, #3
 8006b6a:	4606      	mov	r6, r0
 8006b6c:	460f      	mov	r7, r1
 8006b6e:	d007      	beq.n	8006b80 <__pow5mult+0x20>
 8006b70:	4c25      	ldr	r4, [pc, #148]	; (8006c08 <__pow5mult+0xa8>)
 8006b72:	3a01      	subs	r2, #1
 8006b74:	2300      	movs	r3, #0
 8006b76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006b7a:	f7ff fe9f 	bl	80068bc <__multadd>
 8006b7e:	4607      	mov	r7, r0
 8006b80:	10ad      	asrs	r5, r5, #2
 8006b82:	d03d      	beq.n	8006c00 <__pow5mult+0xa0>
 8006b84:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006b86:	b97c      	cbnz	r4, 8006ba8 <__pow5mult+0x48>
 8006b88:	2010      	movs	r0, #16
 8006b8a:	f7ff fe1f 	bl	80067cc <malloc>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	6270      	str	r0, [r6, #36]	; 0x24
 8006b92:	b928      	cbnz	r0, 8006ba0 <__pow5mult+0x40>
 8006b94:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006b98:	4b1c      	ldr	r3, [pc, #112]	; (8006c0c <__pow5mult+0xac>)
 8006b9a:	481d      	ldr	r0, [pc, #116]	; (8006c10 <__pow5mult+0xb0>)
 8006b9c:	f000 fbce 	bl	800733c <__assert_func>
 8006ba0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006ba4:	6004      	str	r4, [r0, #0]
 8006ba6:	60c4      	str	r4, [r0, #12]
 8006ba8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006bac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006bb0:	b94c      	cbnz	r4, 8006bc6 <__pow5mult+0x66>
 8006bb2:	f240 2171 	movw	r1, #625	; 0x271
 8006bb6:	4630      	mov	r0, r6
 8006bb8:	f7ff ff18 	bl	80069ec <__i2b>
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	4604      	mov	r4, r0
 8006bc0:	f8c8 0008 	str.w	r0, [r8, #8]
 8006bc4:	6003      	str	r3, [r0, #0]
 8006bc6:	f04f 0900 	mov.w	r9, #0
 8006bca:	07eb      	lsls	r3, r5, #31
 8006bcc:	d50a      	bpl.n	8006be4 <__pow5mult+0x84>
 8006bce:	4639      	mov	r1, r7
 8006bd0:	4622      	mov	r2, r4
 8006bd2:	4630      	mov	r0, r6
 8006bd4:	f7ff ff20 	bl	8006a18 <__multiply>
 8006bd8:	4680      	mov	r8, r0
 8006bda:	4639      	mov	r1, r7
 8006bdc:	4630      	mov	r0, r6
 8006bde:	f7ff fe4b 	bl	8006878 <_Bfree>
 8006be2:	4647      	mov	r7, r8
 8006be4:	106d      	asrs	r5, r5, #1
 8006be6:	d00b      	beq.n	8006c00 <__pow5mult+0xa0>
 8006be8:	6820      	ldr	r0, [r4, #0]
 8006bea:	b938      	cbnz	r0, 8006bfc <__pow5mult+0x9c>
 8006bec:	4622      	mov	r2, r4
 8006bee:	4621      	mov	r1, r4
 8006bf0:	4630      	mov	r0, r6
 8006bf2:	f7ff ff11 	bl	8006a18 <__multiply>
 8006bf6:	6020      	str	r0, [r4, #0]
 8006bf8:	f8c0 9000 	str.w	r9, [r0]
 8006bfc:	4604      	mov	r4, r0
 8006bfe:	e7e4      	b.n	8006bca <__pow5mult+0x6a>
 8006c00:	4638      	mov	r0, r7
 8006c02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c06:	bf00      	nop
 8006c08:	0800b958 	.word	0x0800b958
 8006c0c:	0800b77d 	.word	0x0800b77d
 8006c10:	0800b804 	.word	0x0800b804

08006c14 <__lshift>:
 8006c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c18:	460c      	mov	r4, r1
 8006c1a:	4607      	mov	r7, r0
 8006c1c:	4691      	mov	r9, r2
 8006c1e:	6923      	ldr	r3, [r4, #16]
 8006c20:	6849      	ldr	r1, [r1, #4]
 8006c22:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006c26:	68a3      	ldr	r3, [r4, #8]
 8006c28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006c2c:	f108 0601 	add.w	r6, r8, #1
 8006c30:	42b3      	cmp	r3, r6
 8006c32:	db0b      	blt.n	8006c4c <__lshift+0x38>
 8006c34:	4638      	mov	r0, r7
 8006c36:	f7ff fddf 	bl	80067f8 <_Balloc>
 8006c3a:	4605      	mov	r5, r0
 8006c3c:	b948      	cbnz	r0, 8006c52 <__lshift+0x3e>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006c44:	4b27      	ldr	r3, [pc, #156]	; (8006ce4 <__lshift+0xd0>)
 8006c46:	4828      	ldr	r0, [pc, #160]	; (8006ce8 <__lshift+0xd4>)
 8006c48:	f000 fb78 	bl	800733c <__assert_func>
 8006c4c:	3101      	adds	r1, #1
 8006c4e:	005b      	lsls	r3, r3, #1
 8006c50:	e7ee      	b.n	8006c30 <__lshift+0x1c>
 8006c52:	2300      	movs	r3, #0
 8006c54:	f100 0114 	add.w	r1, r0, #20
 8006c58:	f100 0210 	add.w	r2, r0, #16
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	4553      	cmp	r3, sl
 8006c60:	db33      	blt.n	8006cca <__lshift+0xb6>
 8006c62:	6920      	ldr	r0, [r4, #16]
 8006c64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006c68:	f104 0314 	add.w	r3, r4, #20
 8006c6c:	f019 091f 	ands.w	r9, r9, #31
 8006c70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006c74:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006c78:	d02b      	beq.n	8006cd2 <__lshift+0xbe>
 8006c7a:	468a      	mov	sl, r1
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f1c9 0e20 	rsb	lr, r9, #32
 8006c82:	6818      	ldr	r0, [r3, #0]
 8006c84:	fa00 f009 	lsl.w	r0, r0, r9
 8006c88:	4302      	orrs	r2, r0
 8006c8a:	f84a 2b04 	str.w	r2, [sl], #4
 8006c8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c92:	459c      	cmp	ip, r3
 8006c94:	fa22 f20e 	lsr.w	r2, r2, lr
 8006c98:	d8f3      	bhi.n	8006c82 <__lshift+0x6e>
 8006c9a:	ebac 0304 	sub.w	r3, ip, r4
 8006c9e:	3b15      	subs	r3, #21
 8006ca0:	f023 0303 	bic.w	r3, r3, #3
 8006ca4:	3304      	adds	r3, #4
 8006ca6:	f104 0015 	add.w	r0, r4, #21
 8006caa:	4584      	cmp	ip, r0
 8006cac:	bf38      	it	cc
 8006cae:	2304      	movcc	r3, #4
 8006cb0:	50ca      	str	r2, [r1, r3]
 8006cb2:	b10a      	cbz	r2, 8006cb8 <__lshift+0xa4>
 8006cb4:	f108 0602 	add.w	r6, r8, #2
 8006cb8:	3e01      	subs	r6, #1
 8006cba:	4638      	mov	r0, r7
 8006cbc:	4621      	mov	r1, r4
 8006cbe:	612e      	str	r6, [r5, #16]
 8006cc0:	f7ff fdda 	bl	8006878 <_Bfree>
 8006cc4:	4628      	mov	r0, r5
 8006cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cca:	f842 0f04 	str.w	r0, [r2, #4]!
 8006cce:	3301      	adds	r3, #1
 8006cd0:	e7c5      	b.n	8006c5e <__lshift+0x4a>
 8006cd2:	3904      	subs	r1, #4
 8006cd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cd8:	459c      	cmp	ip, r3
 8006cda:	f841 2f04 	str.w	r2, [r1, #4]!
 8006cde:	d8f9      	bhi.n	8006cd4 <__lshift+0xc0>
 8006ce0:	e7ea      	b.n	8006cb8 <__lshift+0xa4>
 8006ce2:	bf00      	nop
 8006ce4:	0800b7f3 	.word	0x0800b7f3
 8006ce8:	0800b804 	.word	0x0800b804

08006cec <__mcmp>:
 8006cec:	4603      	mov	r3, r0
 8006cee:	690a      	ldr	r2, [r1, #16]
 8006cf0:	6900      	ldr	r0, [r0, #16]
 8006cf2:	b530      	push	{r4, r5, lr}
 8006cf4:	1a80      	subs	r0, r0, r2
 8006cf6:	d10d      	bne.n	8006d14 <__mcmp+0x28>
 8006cf8:	3314      	adds	r3, #20
 8006cfa:	3114      	adds	r1, #20
 8006cfc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006d00:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006d04:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006d08:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006d0c:	4295      	cmp	r5, r2
 8006d0e:	d002      	beq.n	8006d16 <__mcmp+0x2a>
 8006d10:	d304      	bcc.n	8006d1c <__mcmp+0x30>
 8006d12:	2001      	movs	r0, #1
 8006d14:	bd30      	pop	{r4, r5, pc}
 8006d16:	42a3      	cmp	r3, r4
 8006d18:	d3f4      	bcc.n	8006d04 <__mcmp+0x18>
 8006d1a:	e7fb      	b.n	8006d14 <__mcmp+0x28>
 8006d1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d20:	e7f8      	b.n	8006d14 <__mcmp+0x28>
	...

08006d24 <__mdiff>:
 8006d24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d28:	460c      	mov	r4, r1
 8006d2a:	4606      	mov	r6, r0
 8006d2c:	4611      	mov	r1, r2
 8006d2e:	4620      	mov	r0, r4
 8006d30:	4692      	mov	sl, r2
 8006d32:	f7ff ffdb 	bl	8006cec <__mcmp>
 8006d36:	1e05      	subs	r5, r0, #0
 8006d38:	d111      	bne.n	8006d5e <__mdiff+0x3a>
 8006d3a:	4629      	mov	r1, r5
 8006d3c:	4630      	mov	r0, r6
 8006d3e:	f7ff fd5b 	bl	80067f8 <_Balloc>
 8006d42:	4602      	mov	r2, r0
 8006d44:	b928      	cbnz	r0, 8006d52 <__mdiff+0x2e>
 8006d46:	f240 2132 	movw	r1, #562	; 0x232
 8006d4a:	4b3c      	ldr	r3, [pc, #240]	; (8006e3c <__mdiff+0x118>)
 8006d4c:	483c      	ldr	r0, [pc, #240]	; (8006e40 <__mdiff+0x11c>)
 8006d4e:	f000 faf5 	bl	800733c <__assert_func>
 8006d52:	2301      	movs	r3, #1
 8006d54:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006d58:	4610      	mov	r0, r2
 8006d5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d5e:	bfa4      	itt	ge
 8006d60:	4653      	movge	r3, sl
 8006d62:	46a2      	movge	sl, r4
 8006d64:	4630      	mov	r0, r6
 8006d66:	f8da 1004 	ldr.w	r1, [sl, #4]
 8006d6a:	bfa6      	itte	ge
 8006d6c:	461c      	movge	r4, r3
 8006d6e:	2500      	movge	r5, #0
 8006d70:	2501      	movlt	r5, #1
 8006d72:	f7ff fd41 	bl	80067f8 <_Balloc>
 8006d76:	4602      	mov	r2, r0
 8006d78:	b918      	cbnz	r0, 8006d82 <__mdiff+0x5e>
 8006d7a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006d7e:	4b2f      	ldr	r3, [pc, #188]	; (8006e3c <__mdiff+0x118>)
 8006d80:	e7e4      	b.n	8006d4c <__mdiff+0x28>
 8006d82:	f100 0814 	add.w	r8, r0, #20
 8006d86:	f8da 7010 	ldr.w	r7, [sl, #16]
 8006d8a:	60c5      	str	r5, [r0, #12]
 8006d8c:	f04f 0c00 	mov.w	ip, #0
 8006d90:	f10a 0514 	add.w	r5, sl, #20
 8006d94:	f10a 0010 	add.w	r0, sl, #16
 8006d98:	46c2      	mov	sl, r8
 8006d9a:	6926      	ldr	r6, [r4, #16]
 8006d9c:	f104 0914 	add.w	r9, r4, #20
 8006da0:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8006da4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006da8:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8006dac:	f859 3b04 	ldr.w	r3, [r9], #4
 8006db0:	fa1f f18b 	uxth.w	r1, fp
 8006db4:	4461      	add	r1, ip
 8006db6:	fa1f fc83 	uxth.w	ip, r3
 8006dba:	0c1b      	lsrs	r3, r3, #16
 8006dbc:	eba1 010c 	sub.w	r1, r1, ip
 8006dc0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006dc4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006dc8:	b289      	uxth	r1, r1
 8006dca:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006dce:	454e      	cmp	r6, r9
 8006dd0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006dd4:	f84a 3b04 	str.w	r3, [sl], #4
 8006dd8:	d8e6      	bhi.n	8006da8 <__mdiff+0x84>
 8006dda:	1b33      	subs	r3, r6, r4
 8006ddc:	3b15      	subs	r3, #21
 8006dde:	f023 0303 	bic.w	r3, r3, #3
 8006de2:	3415      	adds	r4, #21
 8006de4:	3304      	adds	r3, #4
 8006de6:	42a6      	cmp	r6, r4
 8006de8:	bf38      	it	cc
 8006dea:	2304      	movcc	r3, #4
 8006dec:	441d      	add	r5, r3
 8006dee:	4443      	add	r3, r8
 8006df0:	461e      	mov	r6, r3
 8006df2:	462c      	mov	r4, r5
 8006df4:	4574      	cmp	r4, lr
 8006df6:	d30e      	bcc.n	8006e16 <__mdiff+0xf2>
 8006df8:	f10e 0103 	add.w	r1, lr, #3
 8006dfc:	1b49      	subs	r1, r1, r5
 8006dfe:	f021 0103 	bic.w	r1, r1, #3
 8006e02:	3d03      	subs	r5, #3
 8006e04:	45ae      	cmp	lr, r5
 8006e06:	bf38      	it	cc
 8006e08:	2100      	movcc	r1, #0
 8006e0a:	4419      	add	r1, r3
 8006e0c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006e10:	b18b      	cbz	r3, 8006e36 <__mdiff+0x112>
 8006e12:	6117      	str	r7, [r2, #16]
 8006e14:	e7a0      	b.n	8006d58 <__mdiff+0x34>
 8006e16:	f854 8b04 	ldr.w	r8, [r4], #4
 8006e1a:	fa1f f188 	uxth.w	r1, r8
 8006e1e:	4461      	add	r1, ip
 8006e20:	1408      	asrs	r0, r1, #16
 8006e22:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8006e26:	b289      	uxth	r1, r1
 8006e28:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006e2c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006e30:	f846 1b04 	str.w	r1, [r6], #4
 8006e34:	e7de      	b.n	8006df4 <__mdiff+0xd0>
 8006e36:	3f01      	subs	r7, #1
 8006e38:	e7e8      	b.n	8006e0c <__mdiff+0xe8>
 8006e3a:	bf00      	nop
 8006e3c:	0800b7f3 	.word	0x0800b7f3
 8006e40:	0800b804 	.word	0x0800b804

08006e44 <__d2b>:
 8006e44:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006e48:	2101      	movs	r1, #1
 8006e4a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006e4e:	4690      	mov	r8, r2
 8006e50:	461d      	mov	r5, r3
 8006e52:	f7ff fcd1 	bl	80067f8 <_Balloc>
 8006e56:	4604      	mov	r4, r0
 8006e58:	b930      	cbnz	r0, 8006e68 <__d2b+0x24>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	f240 310a 	movw	r1, #778	; 0x30a
 8006e60:	4b24      	ldr	r3, [pc, #144]	; (8006ef4 <__d2b+0xb0>)
 8006e62:	4825      	ldr	r0, [pc, #148]	; (8006ef8 <__d2b+0xb4>)
 8006e64:	f000 fa6a 	bl	800733c <__assert_func>
 8006e68:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006e6c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006e70:	bb2d      	cbnz	r5, 8006ebe <__d2b+0x7a>
 8006e72:	9301      	str	r3, [sp, #4]
 8006e74:	f1b8 0300 	subs.w	r3, r8, #0
 8006e78:	d026      	beq.n	8006ec8 <__d2b+0x84>
 8006e7a:	4668      	mov	r0, sp
 8006e7c:	9300      	str	r3, [sp, #0]
 8006e7e:	f7ff fd87 	bl	8006990 <__lo0bits>
 8006e82:	9900      	ldr	r1, [sp, #0]
 8006e84:	b1f0      	cbz	r0, 8006ec4 <__d2b+0x80>
 8006e86:	9a01      	ldr	r2, [sp, #4]
 8006e88:	f1c0 0320 	rsb	r3, r0, #32
 8006e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e90:	430b      	orrs	r3, r1
 8006e92:	40c2      	lsrs	r2, r0
 8006e94:	6163      	str	r3, [r4, #20]
 8006e96:	9201      	str	r2, [sp, #4]
 8006e98:	9b01      	ldr	r3, [sp, #4]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	bf14      	ite	ne
 8006e9e:	2102      	movne	r1, #2
 8006ea0:	2101      	moveq	r1, #1
 8006ea2:	61a3      	str	r3, [r4, #24]
 8006ea4:	6121      	str	r1, [r4, #16]
 8006ea6:	b1c5      	cbz	r5, 8006eda <__d2b+0x96>
 8006ea8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006eac:	4405      	add	r5, r0
 8006eae:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006eb2:	603d      	str	r5, [r7, #0]
 8006eb4:	6030      	str	r0, [r6, #0]
 8006eb6:	4620      	mov	r0, r4
 8006eb8:	b002      	add	sp, #8
 8006eba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ebe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ec2:	e7d6      	b.n	8006e72 <__d2b+0x2e>
 8006ec4:	6161      	str	r1, [r4, #20]
 8006ec6:	e7e7      	b.n	8006e98 <__d2b+0x54>
 8006ec8:	a801      	add	r0, sp, #4
 8006eca:	f7ff fd61 	bl	8006990 <__lo0bits>
 8006ece:	2101      	movs	r1, #1
 8006ed0:	9b01      	ldr	r3, [sp, #4]
 8006ed2:	6121      	str	r1, [r4, #16]
 8006ed4:	6163      	str	r3, [r4, #20]
 8006ed6:	3020      	adds	r0, #32
 8006ed8:	e7e5      	b.n	8006ea6 <__d2b+0x62>
 8006eda:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006ede:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006ee2:	6038      	str	r0, [r7, #0]
 8006ee4:	6918      	ldr	r0, [r3, #16]
 8006ee6:	f7ff fd33 	bl	8006950 <__hi0bits>
 8006eea:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006eee:	6031      	str	r1, [r6, #0]
 8006ef0:	e7e1      	b.n	8006eb6 <__d2b+0x72>
 8006ef2:	bf00      	nop
 8006ef4:	0800b7f3 	.word	0x0800b7f3
 8006ef8:	0800b804 	.word	0x0800b804

08006efc <_calloc_r>:
 8006efc:	b538      	push	{r3, r4, r5, lr}
 8006efe:	fb02 f501 	mul.w	r5, r2, r1
 8006f02:	4629      	mov	r1, r5
 8006f04:	f000 f854 	bl	8006fb0 <_malloc_r>
 8006f08:	4604      	mov	r4, r0
 8006f0a:	b118      	cbz	r0, 8006f14 <_calloc_r+0x18>
 8006f0c:	462a      	mov	r2, r5
 8006f0e:	2100      	movs	r1, #0
 8006f10:	f7fe f954 	bl	80051bc <memset>
 8006f14:	4620      	mov	r0, r4
 8006f16:	bd38      	pop	{r3, r4, r5, pc}

08006f18 <_free_r>:
 8006f18:	b538      	push	{r3, r4, r5, lr}
 8006f1a:	4605      	mov	r5, r0
 8006f1c:	2900      	cmp	r1, #0
 8006f1e:	d043      	beq.n	8006fa8 <_free_r+0x90>
 8006f20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f24:	1f0c      	subs	r4, r1, #4
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	bfb8      	it	lt
 8006f2a:	18e4      	addlt	r4, r4, r3
 8006f2c:	f000 fa62 	bl	80073f4 <__malloc_lock>
 8006f30:	4a1e      	ldr	r2, [pc, #120]	; (8006fac <_free_r+0x94>)
 8006f32:	6813      	ldr	r3, [r2, #0]
 8006f34:	4610      	mov	r0, r2
 8006f36:	b933      	cbnz	r3, 8006f46 <_free_r+0x2e>
 8006f38:	6063      	str	r3, [r4, #4]
 8006f3a:	6014      	str	r4, [r2, #0]
 8006f3c:	4628      	mov	r0, r5
 8006f3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f42:	f000 ba5d 	b.w	8007400 <__malloc_unlock>
 8006f46:	42a3      	cmp	r3, r4
 8006f48:	d90a      	bls.n	8006f60 <_free_r+0x48>
 8006f4a:	6821      	ldr	r1, [r4, #0]
 8006f4c:	1862      	adds	r2, r4, r1
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	bf01      	itttt	eq
 8006f52:	681a      	ldreq	r2, [r3, #0]
 8006f54:	685b      	ldreq	r3, [r3, #4]
 8006f56:	1852      	addeq	r2, r2, r1
 8006f58:	6022      	streq	r2, [r4, #0]
 8006f5a:	6063      	str	r3, [r4, #4]
 8006f5c:	6004      	str	r4, [r0, #0]
 8006f5e:	e7ed      	b.n	8006f3c <_free_r+0x24>
 8006f60:	461a      	mov	r2, r3
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	b10b      	cbz	r3, 8006f6a <_free_r+0x52>
 8006f66:	42a3      	cmp	r3, r4
 8006f68:	d9fa      	bls.n	8006f60 <_free_r+0x48>
 8006f6a:	6811      	ldr	r1, [r2, #0]
 8006f6c:	1850      	adds	r0, r2, r1
 8006f6e:	42a0      	cmp	r0, r4
 8006f70:	d10b      	bne.n	8006f8a <_free_r+0x72>
 8006f72:	6820      	ldr	r0, [r4, #0]
 8006f74:	4401      	add	r1, r0
 8006f76:	1850      	adds	r0, r2, r1
 8006f78:	4283      	cmp	r3, r0
 8006f7a:	6011      	str	r1, [r2, #0]
 8006f7c:	d1de      	bne.n	8006f3c <_free_r+0x24>
 8006f7e:	6818      	ldr	r0, [r3, #0]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	4401      	add	r1, r0
 8006f84:	6011      	str	r1, [r2, #0]
 8006f86:	6053      	str	r3, [r2, #4]
 8006f88:	e7d8      	b.n	8006f3c <_free_r+0x24>
 8006f8a:	d902      	bls.n	8006f92 <_free_r+0x7a>
 8006f8c:	230c      	movs	r3, #12
 8006f8e:	602b      	str	r3, [r5, #0]
 8006f90:	e7d4      	b.n	8006f3c <_free_r+0x24>
 8006f92:	6820      	ldr	r0, [r4, #0]
 8006f94:	1821      	adds	r1, r4, r0
 8006f96:	428b      	cmp	r3, r1
 8006f98:	bf01      	itttt	eq
 8006f9a:	6819      	ldreq	r1, [r3, #0]
 8006f9c:	685b      	ldreq	r3, [r3, #4]
 8006f9e:	1809      	addeq	r1, r1, r0
 8006fa0:	6021      	streq	r1, [r4, #0]
 8006fa2:	6063      	str	r3, [r4, #4]
 8006fa4:	6054      	str	r4, [r2, #4]
 8006fa6:	e7c9      	b.n	8006f3c <_free_r+0x24>
 8006fa8:	bd38      	pop	{r3, r4, r5, pc}
 8006faa:	bf00      	nop
 8006fac:	200006f0 	.word	0x200006f0

08006fb0 <_malloc_r>:
 8006fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fb2:	1ccd      	adds	r5, r1, #3
 8006fb4:	f025 0503 	bic.w	r5, r5, #3
 8006fb8:	3508      	adds	r5, #8
 8006fba:	2d0c      	cmp	r5, #12
 8006fbc:	bf38      	it	cc
 8006fbe:	250c      	movcc	r5, #12
 8006fc0:	2d00      	cmp	r5, #0
 8006fc2:	4606      	mov	r6, r0
 8006fc4:	db01      	blt.n	8006fca <_malloc_r+0x1a>
 8006fc6:	42a9      	cmp	r1, r5
 8006fc8:	d903      	bls.n	8006fd2 <_malloc_r+0x22>
 8006fca:	230c      	movs	r3, #12
 8006fcc:	6033      	str	r3, [r6, #0]
 8006fce:	2000      	movs	r0, #0
 8006fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fd2:	f000 fa0f 	bl	80073f4 <__malloc_lock>
 8006fd6:	4921      	ldr	r1, [pc, #132]	; (800705c <_malloc_r+0xac>)
 8006fd8:	680a      	ldr	r2, [r1, #0]
 8006fda:	4614      	mov	r4, r2
 8006fdc:	b99c      	cbnz	r4, 8007006 <_malloc_r+0x56>
 8006fde:	4f20      	ldr	r7, [pc, #128]	; (8007060 <_malloc_r+0xb0>)
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	b923      	cbnz	r3, 8006fee <_malloc_r+0x3e>
 8006fe4:	4621      	mov	r1, r4
 8006fe6:	4630      	mov	r0, r6
 8006fe8:	f000 f998 	bl	800731c <_sbrk_r>
 8006fec:	6038      	str	r0, [r7, #0]
 8006fee:	4629      	mov	r1, r5
 8006ff0:	4630      	mov	r0, r6
 8006ff2:	f000 f993 	bl	800731c <_sbrk_r>
 8006ff6:	1c43      	adds	r3, r0, #1
 8006ff8:	d123      	bne.n	8007042 <_malloc_r+0x92>
 8006ffa:	230c      	movs	r3, #12
 8006ffc:	4630      	mov	r0, r6
 8006ffe:	6033      	str	r3, [r6, #0]
 8007000:	f000 f9fe 	bl	8007400 <__malloc_unlock>
 8007004:	e7e3      	b.n	8006fce <_malloc_r+0x1e>
 8007006:	6823      	ldr	r3, [r4, #0]
 8007008:	1b5b      	subs	r3, r3, r5
 800700a:	d417      	bmi.n	800703c <_malloc_r+0x8c>
 800700c:	2b0b      	cmp	r3, #11
 800700e:	d903      	bls.n	8007018 <_malloc_r+0x68>
 8007010:	6023      	str	r3, [r4, #0]
 8007012:	441c      	add	r4, r3
 8007014:	6025      	str	r5, [r4, #0]
 8007016:	e004      	b.n	8007022 <_malloc_r+0x72>
 8007018:	6863      	ldr	r3, [r4, #4]
 800701a:	42a2      	cmp	r2, r4
 800701c:	bf0c      	ite	eq
 800701e:	600b      	streq	r3, [r1, #0]
 8007020:	6053      	strne	r3, [r2, #4]
 8007022:	4630      	mov	r0, r6
 8007024:	f000 f9ec 	bl	8007400 <__malloc_unlock>
 8007028:	f104 000b 	add.w	r0, r4, #11
 800702c:	1d23      	adds	r3, r4, #4
 800702e:	f020 0007 	bic.w	r0, r0, #7
 8007032:	1ac2      	subs	r2, r0, r3
 8007034:	d0cc      	beq.n	8006fd0 <_malloc_r+0x20>
 8007036:	1a1b      	subs	r3, r3, r0
 8007038:	50a3      	str	r3, [r4, r2]
 800703a:	e7c9      	b.n	8006fd0 <_malloc_r+0x20>
 800703c:	4622      	mov	r2, r4
 800703e:	6864      	ldr	r4, [r4, #4]
 8007040:	e7cc      	b.n	8006fdc <_malloc_r+0x2c>
 8007042:	1cc4      	adds	r4, r0, #3
 8007044:	f024 0403 	bic.w	r4, r4, #3
 8007048:	42a0      	cmp	r0, r4
 800704a:	d0e3      	beq.n	8007014 <_malloc_r+0x64>
 800704c:	1a21      	subs	r1, r4, r0
 800704e:	4630      	mov	r0, r6
 8007050:	f000 f964 	bl	800731c <_sbrk_r>
 8007054:	3001      	adds	r0, #1
 8007056:	d1dd      	bne.n	8007014 <_malloc_r+0x64>
 8007058:	e7cf      	b.n	8006ffa <_malloc_r+0x4a>
 800705a:	bf00      	nop
 800705c:	200006f0 	.word	0x200006f0
 8007060:	200006f4 	.word	0x200006f4

08007064 <__ssputs_r>:
 8007064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007068:	688e      	ldr	r6, [r1, #8]
 800706a:	4682      	mov	sl, r0
 800706c:	429e      	cmp	r6, r3
 800706e:	460c      	mov	r4, r1
 8007070:	4690      	mov	r8, r2
 8007072:	461f      	mov	r7, r3
 8007074:	d838      	bhi.n	80070e8 <__ssputs_r+0x84>
 8007076:	898a      	ldrh	r2, [r1, #12]
 8007078:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800707c:	d032      	beq.n	80070e4 <__ssputs_r+0x80>
 800707e:	6825      	ldr	r5, [r4, #0]
 8007080:	6909      	ldr	r1, [r1, #16]
 8007082:	3301      	adds	r3, #1
 8007084:	eba5 0901 	sub.w	r9, r5, r1
 8007088:	6965      	ldr	r5, [r4, #20]
 800708a:	444b      	add	r3, r9
 800708c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007090:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007094:	106d      	asrs	r5, r5, #1
 8007096:	429d      	cmp	r5, r3
 8007098:	bf38      	it	cc
 800709a:	461d      	movcc	r5, r3
 800709c:	0553      	lsls	r3, r2, #21
 800709e:	d531      	bpl.n	8007104 <__ssputs_r+0xa0>
 80070a0:	4629      	mov	r1, r5
 80070a2:	f7ff ff85 	bl	8006fb0 <_malloc_r>
 80070a6:	4606      	mov	r6, r0
 80070a8:	b950      	cbnz	r0, 80070c0 <__ssputs_r+0x5c>
 80070aa:	230c      	movs	r3, #12
 80070ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070b0:	f8ca 3000 	str.w	r3, [sl]
 80070b4:	89a3      	ldrh	r3, [r4, #12]
 80070b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070ba:	81a3      	strh	r3, [r4, #12]
 80070bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070c0:	464a      	mov	r2, r9
 80070c2:	6921      	ldr	r1, [r4, #16]
 80070c4:	f7fe f86c 	bl	80051a0 <memcpy>
 80070c8:	89a3      	ldrh	r3, [r4, #12]
 80070ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80070ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070d2:	81a3      	strh	r3, [r4, #12]
 80070d4:	6126      	str	r6, [r4, #16]
 80070d6:	444e      	add	r6, r9
 80070d8:	6026      	str	r6, [r4, #0]
 80070da:	463e      	mov	r6, r7
 80070dc:	6165      	str	r5, [r4, #20]
 80070de:	eba5 0509 	sub.w	r5, r5, r9
 80070e2:	60a5      	str	r5, [r4, #8]
 80070e4:	42be      	cmp	r6, r7
 80070e6:	d900      	bls.n	80070ea <__ssputs_r+0x86>
 80070e8:	463e      	mov	r6, r7
 80070ea:	4632      	mov	r2, r6
 80070ec:	4641      	mov	r1, r8
 80070ee:	6820      	ldr	r0, [r4, #0]
 80070f0:	f000 f966 	bl	80073c0 <memmove>
 80070f4:	68a3      	ldr	r3, [r4, #8]
 80070f6:	6822      	ldr	r2, [r4, #0]
 80070f8:	1b9b      	subs	r3, r3, r6
 80070fa:	4432      	add	r2, r6
 80070fc:	2000      	movs	r0, #0
 80070fe:	60a3      	str	r3, [r4, #8]
 8007100:	6022      	str	r2, [r4, #0]
 8007102:	e7db      	b.n	80070bc <__ssputs_r+0x58>
 8007104:	462a      	mov	r2, r5
 8007106:	f000 f981 	bl	800740c <_realloc_r>
 800710a:	4606      	mov	r6, r0
 800710c:	2800      	cmp	r0, #0
 800710e:	d1e1      	bne.n	80070d4 <__ssputs_r+0x70>
 8007110:	4650      	mov	r0, sl
 8007112:	6921      	ldr	r1, [r4, #16]
 8007114:	f7ff ff00 	bl	8006f18 <_free_r>
 8007118:	e7c7      	b.n	80070aa <__ssputs_r+0x46>
	...

0800711c <_svfiprintf_r>:
 800711c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007120:	4698      	mov	r8, r3
 8007122:	898b      	ldrh	r3, [r1, #12]
 8007124:	4607      	mov	r7, r0
 8007126:	061b      	lsls	r3, r3, #24
 8007128:	460d      	mov	r5, r1
 800712a:	4614      	mov	r4, r2
 800712c:	b09d      	sub	sp, #116	; 0x74
 800712e:	d50e      	bpl.n	800714e <_svfiprintf_r+0x32>
 8007130:	690b      	ldr	r3, [r1, #16]
 8007132:	b963      	cbnz	r3, 800714e <_svfiprintf_r+0x32>
 8007134:	2140      	movs	r1, #64	; 0x40
 8007136:	f7ff ff3b 	bl	8006fb0 <_malloc_r>
 800713a:	6028      	str	r0, [r5, #0]
 800713c:	6128      	str	r0, [r5, #16]
 800713e:	b920      	cbnz	r0, 800714a <_svfiprintf_r+0x2e>
 8007140:	230c      	movs	r3, #12
 8007142:	603b      	str	r3, [r7, #0]
 8007144:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007148:	e0d1      	b.n	80072ee <_svfiprintf_r+0x1d2>
 800714a:	2340      	movs	r3, #64	; 0x40
 800714c:	616b      	str	r3, [r5, #20]
 800714e:	2300      	movs	r3, #0
 8007150:	9309      	str	r3, [sp, #36]	; 0x24
 8007152:	2320      	movs	r3, #32
 8007154:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007158:	2330      	movs	r3, #48	; 0x30
 800715a:	f04f 0901 	mov.w	r9, #1
 800715e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007162:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007308 <_svfiprintf_r+0x1ec>
 8007166:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800716a:	4623      	mov	r3, r4
 800716c:	469a      	mov	sl, r3
 800716e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007172:	b10a      	cbz	r2, 8007178 <_svfiprintf_r+0x5c>
 8007174:	2a25      	cmp	r2, #37	; 0x25
 8007176:	d1f9      	bne.n	800716c <_svfiprintf_r+0x50>
 8007178:	ebba 0b04 	subs.w	fp, sl, r4
 800717c:	d00b      	beq.n	8007196 <_svfiprintf_r+0x7a>
 800717e:	465b      	mov	r3, fp
 8007180:	4622      	mov	r2, r4
 8007182:	4629      	mov	r1, r5
 8007184:	4638      	mov	r0, r7
 8007186:	f7ff ff6d 	bl	8007064 <__ssputs_r>
 800718a:	3001      	adds	r0, #1
 800718c:	f000 80aa 	beq.w	80072e4 <_svfiprintf_r+0x1c8>
 8007190:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007192:	445a      	add	r2, fp
 8007194:	9209      	str	r2, [sp, #36]	; 0x24
 8007196:	f89a 3000 	ldrb.w	r3, [sl]
 800719a:	2b00      	cmp	r3, #0
 800719c:	f000 80a2 	beq.w	80072e4 <_svfiprintf_r+0x1c8>
 80071a0:	2300      	movs	r3, #0
 80071a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80071a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071aa:	f10a 0a01 	add.w	sl, sl, #1
 80071ae:	9304      	str	r3, [sp, #16]
 80071b0:	9307      	str	r3, [sp, #28]
 80071b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80071b6:	931a      	str	r3, [sp, #104]	; 0x68
 80071b8:	4654      	mov	r4, sl
 80071ba:	2205      	movs	r2, #5
 80071bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071c0:	4851      	ldr	r0, [pc, #324]	; (8007308 <_svfiprintf_r+0x1ec>)
 80071c2:	f7ff fb0b 	bl	80067dc <memchr>
 80071c6:	9a04      	ldr	r2, [sp, #16]
 80071c8:	b9d8      	cbnz	r0, 8007202 <_svfiprintf_r+0xe6>
 80071ca:	06d0      	lsls	r0, r2, #27
 80071cc:	bf44      	itt	mi
 80071ce:	2320      	movmi	r3, #32
 80071d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071d4:	0711      	lsls	r1, r2, #28
 80071d6:	bf44      	itt	mi
 80071d8:	232b      	movmi	r3, #43	; 0x2b
 80071da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071de:	f89a 3000 	ldrb.w	r3, [sl]
 80071e2:	2b2a      	cmp	r3, #42	; 0x2a
 80071e4:	d015      	beq.n	8007212 <_svfiprintf_r+0xf6>
 80071e6:	4654      	mov	r4, sl
 80071e8:	2000      	movs	r0, #0
 80071ea:	f04f 0c0a 	mov.w	ip, #10
 80071ee:	9a07      	ldr	r2, [sp, #28]
 80071f0:	4621      	mov	r1, r4
 80071f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071f6:	3b30      	subs	r3, #48	; 0x30
 80071f8:	2b09      	cmp	r3, #9
 80071fa:	d94e      	bls.n	800729a <_svfiprintf_r+0x17e>
 80071fc:	b1b0      	cbz	r0, 800722c <_svfiprintf_r+0x110>
 80071fe:	9207      	str	r2, [sp, #28]
 8007200:	e014      	b.n	800722c <_svfiprintf_r+0x110>
 8007202:	eba0 0308 	sub.w	r3, r0, r8
 8007206:	fa09 f303 	lsl.w	r3, r9, r3
 800720a:	4313      	orrs	r3, r2
 800720c:	46a2      	mov	sl, r4
 800720e:	9304      	str	r3, [sp, #16]
 8007210:	e7d2      	b.n	80071b8 <_svfiprintf_r+0x9c>
 8007212:	9b03      	ldr	r3, [sp, #12]
 8007214:	1d19      	adds	r1, r3, #4
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	9103      	str	r1, [sp, #12]
 800721a:	2b00      	cmp	r3, #0
 800721c:	bfbb      	ittet	lt
 800721e:	425b      	neglt	r3, r3
 8007220:	f042 0202 	orrlt.w	r2, r2, #2
 8007224:	9307      	strge	r3, [sp, #28]
 8007226:	9307      	strlt	r3, [sp, #28]
 8007228:	bfb8      	it	lt
 800722a:	9204      	strlt	r2, [sp, #16]
 800722c:	7823      	ldrb	r3, [r4, #0]
 800722e:	2b2e      	cmp	r3, #46	; 0x2e
 8007230:	d10c      	bne.n	800724c <_svfiprintf_r+0x130>
 8007232:	7863      	ldrb	r3, [r4, #1]
 8007234:	2b2a      	cmp	r3, #42	; 0x2a
 8007236:	d135      	bne.n	80072a4 <_svfiprintf_r+0x188>
 8007238:	9b03      	ldr	r3, [sp, #12]
 800723a:	3402      	adds	r4, #2
 800723c:	1d1a      	adds	r2, r3, #4
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	9203      	str	r2, [sp, #12]
 8007242:	2b00      	cmp	r3, #0
 8007244:	bfb8      	it	lt
 8007246:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800724a:	9305      	str	r3, [sp, #20]
 800724c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007318 <_svfiprintf_r+0x1fc>
 8007250:	2203      	movs	r2, #3
 8007252:	4650      	mov	r0, sl
 8007254:	7821      	ldrb	r1, [r4, #0]
 8007256:	f7ff fac1 	bl	80067dc <memchr>
 800725a:	b140      	cbz	r0, 800726e <_svfiprintf_r+0x152>
 800725c:	2340      	movs	r3, #64	; 0x40
 800725e:	eba0 000a 	sub.w	r0, r0, sl
 8007262:	fa03 f000 	lsl.w	r0, r3, r0
 8007266:	9b04      	ldr	r3, [sp, #16]
 8007268:	3401      	adds	r4, #1
 800726a:	4303      	orrs	r3, r0
 800726c:	9304      	str	r3, [sp, #16]
 800726e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007272:	2206      	movs	r2, #6
 8007274:	4825      	ldr	r0, [pc, #148]	; (800730c <_svfiprintf_r+0x1f0>)
 8007276:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800727a:	f7ff faaf 	bl	80067dc <memchr>
 800727e:	2800      	cmp	r0, #0
 8007280:	d038      	beq.n	80072f4 <_svfiprintf_r+0x1d8>
 8007282:	4b23      	ldr	r3, [pc, #140]	; (8007310 <_svfiprintf_r+0x1f4>)
 8007284:	bb1b      	cbnz	r3, 80072ce <_svfiprintf_r+0x1b2>
 8007286:	9b03      	ldr	r3, [sp, #12]
 8007288:	3307      	adds	r3, #7
 800728a:	f023 0307 	bic.w	r3, r3, #7
 800728e:	3308      	adds	r3, #8
 8007290:	9303      	str	r3, [sp, #12]
 8007292:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007294:	4433      	add	r3, r6
 8007296:	9309      	str	r3, [sp, #36]	; 0x24
 8007298:	e767      	b.n	800716a <_svfiprintf_r+0x4e>
 800729a:	460c      	mov	r4, r1
 800729c:	2001      	movs	r0, #1
 800729e:	fb0c 3202 	mla	r2, ip, r2, r3
 80072a2:	e7a5      	b.n	80071f0 <_svfiprintf_r+0xd4>
 80072a4:	2300      	movs	r3, #0
 80072a6:	f04f 0c0a 	mov.w	ip, #10
 80072aa:	4619      	mov	r1, r3
 80072ac:	3401      	adds	r4, #1
 80072ae:	9305      	str	r3, [sp, #20]
 80072b0:	4620      	mov	r0, r4
 80072b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072b6:	3a30      	subs	r2, #48	; 0x30
 80072b8:	2a09      	cmp	r2, #9
 80072ba:	d903      	bls.n	80072c4 <_svfiprintf_r+0x1a8>
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d0c5      	beq.n	800724c <_svfiprintf_r+0x130>
 80072c0:	9105      	str	r1, [sp, #20]
 80072c2:	e7c3      	b.n	800724c <_svfiprintf_r+0x130>
 80072c4:	4604      	mov	r4, r0
 80072c6:	2301      	movs	r3, #1
 80072c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80072cc:	e7f0      	b.n	80072b0 <_svfiprintf_r+0x194>
 80072ce:	ab03      	add	r3, sp, #12
 80072d0:	9300      	str	r3, [sp, #0]
 80072d2:	462a      	mov	r2, r5
 80072d4:	4638      	mov	r0, r7
 80072d6:	4b0f      	ldr	r3, [pc, #60]	; (8007314 <_svfiprintf_r+0x1f8>)
 80072d8:	a904      	add	r1, sp, #16
 80072da:	f7fe f815 	bl	8005308 <_printf_float>
 80072de:	1c42      	adds	r2, r0, #1
 80072e0:	4606      	mov	r6, r0
 80072e2:	d1d6      	bne.n	8007292 <_svfiprintf_r+0x176>
 80072e4:	89ab      	ldrh	r3, [r5, #12]
 80072e6:	065b      	lsls	r3, r3, #25
 80072e8:	f53f af2c 	bmi.w	8007144 <_svfiprintf_r+0x28>
 80072ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072ee:	b01d      	add	sp, #116	; 0x74
 80072f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072f4:	ab03      	add	r3, sp, #12
 80072f6:	9300      	str	r3, [sp, #0]
 80072f8:	462a      	mov	r2, r5
 80072fa:	4638      	mov	r0, r7
 80072fc:	4b05      	ldr	r3, [pc, #20]	; (8007314 <_svfiprintf_r+0x1f8>)
 80072fe:	a904      	add	r1, sp, #16
 8007300:	f7fe fa9e 	bl	8005840 <_printf_i>
 8007304:	e7eb      	b.n	80072de <_svfiprintf_r+0x1c2>
 8007306:	bf00      	nop
 8007308:	0800b964 	.word	0x0800b964
 800730c:	0800b96e 	.word	0x0800b96e
 8007310:	08005309 	.word	0x08005309
 8007314:	08007065 	.word	0x08007065
 8007318:	0800b96a 	.word	0x0800b96a

0800731c <_sbrk_r>:
 800731c:	b538      	push	{r3, r4, r5, lr}
 800731e:	2300      	movs	r3, #0
 8007320:	4d05      	ldr	r5, [pc, #20]	; (8007338 <_sbrk_r+0x1c>)
 8007322:	4604      	mov	r4, r0
 8007324:	4608      	mov	r0, r1
 8007326:	602b      	str	r3, [r5, #0]
 8007328:	f7fa fb82 	bl	8001a30 <_sbrk>
 800732c:	1c43      	adds	r3, r0, #1
 800732e:	d102      	bne.n	8007336 <_sbrk_r+0x1a>
 8007330:	682b      	ldr	r3, [r5, #0]
 8007332:	b103      	cbz	r3, 8007336 <_sbrk_r+0x1a>
 8007334:	6023      	str	r3, [r4, #0]
 8007336:	bd38      	pop	{r3, r4, r5, pc}
 8007338:	20000b90 	.word	0x20000b90

0800733c <__assert_func>:
 800733c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800733e:	4614      	mov	r4, r2
 8007340:	461a      	mov	r2, r3
 8007342:	4b09      	ldr	r3, [pc, #36]	; (8007368 <__assert_func+0x2c>)
 8007344:	4605      	mov	r5, r0
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	68d8      	ldr	r0, [r3, #12]
 800734a:	b14c      	cbz	r4, 8007360 <__assert_func+0x24>
 800734c:	4b07      	ldr	r3, [pc, #28]	; (800736c <__assert_func+0x30>)
 800734e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007352:	9100      	str	r1, [sp, #0]
 8007354:	462b      	mov	r3, r5
 8007356:	4906      	ldr	r1, [pc, #24]	; (8007370 <__assert_func+0x34>)
 8007358:	f000 f80e 	bl	8007378 <fiprintf>
 800735c:	f000 faa2 	bl	80078a4 <abort>
 8007360:	4b04      	ldr	r3, [pc, #16]	; (8007374 <__assert_func+0x38>)
 8007362:	461c      	mov	r4, r3
 8007364:	e7f3      	b.n	800734e <__assert_func+0x12>
 8007366:	bf00      	nop
 8007368:	200000a8 	.word	0x200000a8
 800736c:	0800b975 	.word	0x0800b975
 8007370:	0800b982 	.word	0x0800b982
 8007374:	0800b9b0 	.word	0x0800b9b0

08007378 <fiprintf>:
 8007378:	b40e      	push	{r1, r2, r3}
 800737a:	b503      	push	{r0, r1, lr}
 800737c:	4601      	mov	r1, r0
 800737e:	ab03      	add	r3, sp, #12
 8007380:	4805      	ldr	r0, [pc, #20]	; (8007398 <fiprintf+0x20>)
 8007382:	f853 2b04 	ldr.w	r2, [r3], #4
 8007386:	6800      	ldr	r0, [r0, #0]
 8007388:	9301      	str	r3, [sp, #4]
 800738a:	f000 f88d 	bl	80074a8 <_vfiprintf_r>
 800738e:	b002      	add	sp, #8
 8007390:	f85d eb04 	ldr.w	lr, [sp], #4
 8007394:	b003      	add	sp, #12
 8007396:	4770      	bx	lr
 8007398:	200000a8 	.word	0x200000a8

0800739c <__ascii_mbtowc>:
 800739c:	b082      	sub	sp, #8
 800739e:	b901      	cbnz	r1, 80073a2 <__ascii_mbtowc+0x6>
 80073a0:	a901      	add	r1, sp, #4
 80073a2:	b142      	cbz	r2, 80073b6 <__ascii_mbtowc+0x1a>
 80073a4:	b14b      	cbz	r3, 80073ba <__ascii_mbtowc+0x1e>
 80073a6:	7813      	ldrb	r3, [r2, #0]
 80073a8:	600b      	str	r3, [r1, #0]
 80073aa:	7812      	ldrb	r2, [r2, #0]
 80073ac:	1e10      	subs	r0, r2, #0
 80073ae:	bf18      	it	ne
 80073b0:	2001      	movne	r0, #1
 80073b2:	b002      	add	sp, #8
 80073b4:	4770      	bx	lr
 80073b6:	4610      	mov	r0, r2
 80073b8:	e7fb      	b.n	80073b2 <__ascii_mbtowc+0x16>
 80073ba:	f06f 0001 	mvn.w	r0, #1
 80073be:	e7f8      	b.n	80073b2 <__ascii_mbtowc+0x16>

080073c0 <memmove>:
 80073c0:	4288      	cmp	r0, r1
 80073c2:	b510      	push	{r4, lr}
 80073c4:	eb01 0402 	add.w	r4, r1, r2
 80073c8:	d902      	bls.n	80073d0 <memmove+0x10>
 80073ca:	4284      	cmp	r4, r0
 80073cc:	4623      	mov	r3, r4
 80073ce:	d807      	bhi.n	80073e0 <memmove+0x20>
 80073d0:	1e43      	subs	r3, r0, #1
 80073d2:	42a1      	cmp	r1, r4
 80073d4:	d008      	beq.n	80073e8 <memmove+0x28>
 80073d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80073da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80073de:	e7f8      	b.n	80073d2 <memmove+0x12>
 80073e0:	4601      	mov	r1, r0
 80073e2:	4402      	add	r2, r0
 80073e4:	428a      	cmp	r2, r1
 80073e6:	d100      	bne.n	80073ea <memmove+0x2a>
 80073e8:	bd10      	pop	{r4, pc}
 80073ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80073ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80073f2:	e7f7      	b.n	80073e4 <memmove+0x24>

080073f4 <__malloc_lock>:
 80073f4:	4801      	ldr	r0, [pc, #4]	; (80073fc <__malloc_lock+0x8>)
 80073f6:	f000 bc15 	b.w	8007c24 <__retarget_lock_acquire_recursive>
 80073fa:	bf00      	nop
 80073fc:	20000b98 	.word	0x20000b98

08007400 <__malloc_unlock>:
 8007400:	4801      	ldr	r0, [pc, #4]	; (8007408 <__malloc_unlock+0x8>)
 8007402:	f000 bc10 	b.w	8007c26 <__retarget_lock_release_recursive>
 8007406:	bf00      	nop
 8007408:	20000b98 	.word	0x20000b98

0800740c <_realloc_r>:
 800740c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800740e:	4607      	mov	r7, r0
 8007410:	4614      	mov	r4, r2
 8007412:	460e      	mov	r6, r1
 8007414:	b921      	cbnz	r1, 8007420 <_realloc_r+0x14>
 8007416:	4611      	mov	r1, r2
 8007418:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800741c:	f7ff bdc8 	b.w	8006fb0 <_malloc_r>
 8007420:	b922      	cbnz	r2, 800742c <_realloc_r+0x20>
 8007422:	f7ff fd79 	bl	8006f18 <_free_r>
 8007426:	4625      	mov	r5, r4
 8007428:	4628      	mov	r0, r5
 800742a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800742c:	f000 fc60 	bl	8007cf0 <_malloc_usable_size_r>
 8007430:	42a0      	cmp	r0, r4
 8007432:	d20f      	bcs.n	8007454 <_realloc_r+0x48>
 8007434:	4621      	mov	r1, r4
 8007436:	4638      	mov	r0, r7
 8007438:	f7ff fdba 	bl	8006fb0 <_malloc_r>
 800743c:	4605      	mov	r5, r0
 800743e:	2800      	cmp	r0, #0
 8007440:	d0f2      	beq.n	8007428 <_realloc_r+0x1c>
 8007442:	4631      	mov	r1, r6
 8007444:	4622      	mov	r2, r4
 8007446:	f7fd feab 	bl	80051a0 <memcpy>
 800744a:	4631      	mov	r1, r6
 800744c:	4638      	mov	r0, r7
 800744e:	f7ff fd63 	bl	8006f18 <_free_r>
 8007452:	e7e9      	b.n	8007428 <_realloc_r+0x1c>
 8007454:	4635      	mov	r5, r6
 8007456:	e7e7      	b.n	8007428 <_realloc_r+0x1c>

08007458 <__sfputc_r>:
 8007458:	6893      	ldr	r3, [r2, #8]
 800745a:	b410      	push	{r4}
 800745c:	3b01      	subs	r3, #1
 800745e:	2b00      	cmp	r3, #0
 8007460:	6093      	str	r3, [r2, #8]
 8007462:	da07      	bge.n	8007474 <__sfputc_r+0x1c>
 8007464:	6994      	ldr	r4, [r2, #24]
 8007466:	42a3      	cmp	r3, r4
 8007468:	db01      	blt.n	800746e <__sfputc_r+0x16>
 800746a:	290a      	cmp	r1, #10
 800746c:	d102      	bne.n	8007474 <__sfputc_r+0x1c>
 800746e:	bc10      	pop	{r4}
 8007470:	f000 b94a 	b.w	8007708 <__swbuf_r>
 8007474:	6813      	ldr	r3, [r2, #0]
 8007476:	1c58      	adds	r0, r3, #1
 8007478:	6010      	str	r0, [r2, #0]
 800747a:	7019      	strb	r1, [r3, #0]
 800747c:	4608      	mov	r0, r1
 800747e:	bc10      	pop	{r4}
 8007480:	4770      	bx	lr

08007482 <__sfputs_r>:
 8007482:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007484:	4606      	mov	r6, r0
 8007486:	460f      	mov	r7, r1
 8007488:	4614      	mov	r4, r2
 800748a:	18d5      	adds	r5, r2, r3
 800748c:	42ac      	cmp	r4, r5
 800748e:	d101      	bne.n	8007494 <__sfputs_r+0x12>
 8007490:	2000      	movs	r0, #0
 8007492:	e007      	b.n	80074a4 <__sfputs_r+0x22>
 8007494:	463a      	mov	r2, r7
 8007496:	4630      	mov	r0, r6
 8007498:	f814 1b01 	ldrb.w	r1, [r4], #1
 800749c:	f7ff ffdc 	bl	8007458 <__sfputc_r>
 80074a0:	1c43      	adds	r3, r0, #1
 80074a2:	d1f3      	bne.n	800748c <__sfputs_r+0xa>
 80074a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080074a8 <_vfiprintf_r>:
 80074a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ac:	460d      	mov	r5, r1
 80074ae:	4614      	mov	r4, r2
 80074b0:	4698      	mov	r8, r3
 80074b2:	4606      	mov	r6, r0
 80074b4:	b09d      	sub	sp, #116	; 0x74
 80074b6:	b118      	cbz	r0, 80074c0 <_vfiprintf_r+0x18>
 80074b8:	6983      	ldr	r3, [r0, #24]
 80074ba:	b90b      	cbnz	r3, 80074c0 <_vfiprintf_r+0x18>
 80074bc:	f000 fb14 	bl	8007ae8 <__sinit>
 80074c0:	4b89      	ldr	r3, [pc, #548]	; (80076e8 <_vfiprintf_r+0x240>)
 80074c2:	429d      	cmp	r5, r3
 80074c4:	d11b      	bne.n	80074fe <_vfiprintf_r+0x56>
 80074c6:	6875      	ldr	r5, [r6, #4]
 80074c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80074ca:	07d9      	lsls	r1, r3, #31
 80074cc:	d405      	bmi.n	80074da <_vfiprintf_r+0x32>
 80074ce:	89ab      	ldrh	r3, [r5, #12]
 80074d0:	059a      	lsls	r2, r3, #22
 80074d2:	d402      	bmi.n	80074da <_vfiprintf_r+0x32>
 80074d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80074d6:	f000 fba5 	bl	8007c24 <__retarget_lock_acquire_recursive>
 80074da:	89ab      	ldrh	r3, [r5, #12]
 80074dc:	071b      	lsls	r3, r3, #28
 80074de:	d501      	bpl.n	80074e4 <_vfiprintf_r+0x3c>
 80074e0:	692b      	ldr	r3, [r5, #16]
 80074e2:	b9eb      	cbnz	r3, 8007520 <_vfiprintf_r+0x78>
 80074e4:	4629      	mov	r1, r5
 80074e6:	4630      	mov	r0, r6
 80074e8:	f000 f96e 	bl	80077c8 <__swsetup_r>
 80074ec:	b1c0      	cbz	r0, 8007520 <_vfiprintf_r+0x78>
 80074ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80074f0:	07dc      	lsls	r4, r3, #31
 80074f2:	d50e      	bpl.n	8007512 <_vfiprintf_r+0x6a>
 80074f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074f8:	b01d      	add	sp, #116	; 0x74
 80074fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074fe:	4b7b      	ldr	r3, [pc, #492]	; (80076ec <_vfiprintf_r+0x244>)
 8007500:	429d      	cmp	r5, r3
 8007502:	d101      	bne.n	8007508 <_vfiprintf_r+0x60>
 8007504:	68b5      	ldr	r5, [r6, #8]
 8007506:	e7df      	b.n	80074c8 <_vfiprintf_r+0x20>
 8007508:	4b79      	ldr	r3, [pc, #484]	; (80076f0 <_vfiprintf_r+0x248>)
 800750a:	429d      	cmp	r5, r3
 800750c:	bf08      	it	eq
 800750e:	68f5      	ldreq	r5, [r6, #12]
 8007510:	e7da      	b.n	80074c8 <_vfiprintf_r+0x20>
 8007512:	89ab      	ldrh	r3, [r5, #12]
 8007514:	0598      	lsls	r0, r3, #22
 8007516:	d4ed      	bmi.n	80074f4 <_vfiprintf_r+0x4c>
 8007518:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800751a:	f000 fb84 	bl	8007c26 <__retarget_lock_release_recursive>
 800751e:	e7e9      	b.n	80074f4 <_vfiprintf_r+0x4c>
 8007520:	2300      	movs	r3, #0
 8007522:	9309      	str	r3, [sp, #36]	; 0x24
 8007524:	2320      	movs	r3, #32
 8007526:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800752a:	2330      	movs	r3, #48	; 0x30
 800752c:	f04f 0901 	mov.w	r9, #1
 8007530:	f8cd 800c 	str.w	r8, [sp, #12]
 8007534:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80076f4 <_vfiprintf_r+0x24c>
 8007538:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800753c:	4623      	mov	r3, r4
 800753e:	469a      	mov	sl, r3
 8007540:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007544:	b10a      	cbz	r2, 800754a <_vfiprintf_r+0xa2>
 8007546:	2a25      	cmp	r2, #37	; 0x25
 8007548:	d1f9      	bne.n	800753e <_vfiprintf_r+0x96>
 800754a:	ebba 0b04 	subs.w	fp, sl, r4
 800754e:	d00b      	beq.n	8007568 <_vfiprintf_r+0xc0>
 8007550:	465b      	mov	r3, fp
 8007552:	4622      	mov	r2, r4
 8007554:	4629      	mov	r1, r5
 8007556:	4630      	mov	r0, r6
 8007558:	f7ff ff93 	bl	8007482 <__sfputs_r>
 800755c:	3001      	adds	r0, #1
 800755e:	f000 80aa 	beq.w	80076b6 <_vfiprintf_r+0x20e>
 8007562:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007564:	445a      	add	r2, fp
 8007566:	9209      	str	r2, [sp, #36]	; 0x24
 8007568:	f89a 3000 	ldrb.w	r3, [sl]
 800756c:	2b00      	cmp	r3, #0
 800756e:	f000 80a2 	beq.w	80076b6 <_vfiprintf_r+0x20e>
 8007572:	2300      	movs	r3, #0
 8007574:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007578:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800757c:	f10a 0a01 	add.w	sl, sl, #1
 8007580:	9304      	str	r3, [sp, #16]
 8007582:	9307      	str	r3, [sp, #28]
 8007584:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007588:	931a      	str	r3, [sp, #104]	; 0x68
 800758a:	4654      	mov	r4, sl
 800758c:	2205      	movs	r2, #5
 800758e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007592:	4858      	ldr	r0, [pc, #352]	; (80076f4 <_vfiprintf_r+0x24c>)
 8007594:	f7ff f922 	bl	80067dc <memchr>
 8007598:	9a04      	ldr	r2, [sp, #16]
 800759a:	b9d8      	cbnz	r0, 80075d4 <_vfiprintf_r+0x12c>
 800759c:	06d1      	lsls	r1, r2, #27
 800759e:	bf44      	itt	mi
 80075a0:	2320      	movmi	r3, #32
 80075a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075a6:	0713      	lsls	r3, r2, #28
 80075a8:	bf44      	itt	mi
 80075aa:	232b      	movmi	r3, #43	; 0x2b
 80075ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075b0:	f89a 3000 	ldrb.w	r3, [sl]
 80075b4:	2b2a      	cmp	r3, #42	; 0x2a
 80075b6:	d015      	beq.n	80075e4 <_vfiprintf_r+0x13c>
 80075b8:	4654      	mov	r4, sl
 80075ba:	2000      	movs	r0, #0
 80075bc:	f04f 0c0a 	mov.w	ip, #10
 80075c0:	9a07      	ldr	r2, [sp, #28]
 80075c2:	4621      	mov	r1, r4
 80075c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075c8:	3b30      	subs	r3, #48	; 0x30
 80075ca:	2b09      	cmp	r3, #9
 80075cc:	d94e      	bls.n	800766c <_vfiprintf_r+0x1c4>
 80075ce:	b1b0      	cbz	r0, 80075fe <_vfiprintf_r+0x156>
 80075d0:	9207      	str	r2, [sp, #28]
 80075d2:	e014      	b.n	80075fe <_vfiprintf_r+0x156>
 80075d4:	eba0 0308 	sub.w	r3, r0, r8
 80075d8:	fa09 f303 	lsl.w	r3, r9, r3
 80075dc:	4313      	orrs	r3, r2
 80075de:	46a2      	mov	sl, r4
 80075e0:	9304      	str	r3, [sp, #16]
 80075e2:	e7d2      	b.n	800758a <_vfiprintf_r+0xe2>
 80075e4:	9b03      	ldr	r3, [sp, #12]
 80075e6:	1d19      	adds	r1, r3, #4
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	9103      	str	r1, [sp, #12]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	bfbb      	ittet	lt
 80075f0:	425b      	neglt	r3, r3
 80075f2:	f042 0202 	orrlt.w	r2, r2, #2
 80075f6:	9307      	strge	r3, [sp, #28]
 80075f8:	9307      	strlt	r3, [sp, #28]
 80075fa:	bfb8      	it	lt
 80075fc:	9204      	strlt	r2, [sp, #16]
 80075fe:	7823      	ldrb	r3, [r4, #0]
 8007600:	2b2e      	cmp	r3, #46	; 0x2e
 8007602:	d10c      	bne.n	800761e <_vfiprintf_r+0x176>
 8007604:	7863      	ldrb	r3, [r4, #1]
 8007606:	2b2a      	cmp	r3, #42	; 0x2a
 8007608:	d135      	bne.n	8007676 <_vfiprintf_r+0x1ce>
 800760a:	9b03      	ldr	r3, [sp, #12]
 800760c:	3402      	adds	r4, #2
 800760e:	1d1a      	adds	r2, r3, #4
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	9203      	str	r2, [sp, #12]
 8007614:	2b00      	cmp	r3, #0
 8007616:	bfb8      	it	lt
 8007618:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800761c:	9305      	str	r3, [sp, #20]
 800761e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007704 <_vfiprintf_r+0x25c>
 8007622:	2203      	movs	r2, #3
 8007624:	4650      	mov	r0, sl
 8007626:	7821      	ldrb	r1, [r4, #0]
 8007628:	f7ff f8d8 	bl	80067dc <memchr>
 800762c:	b140      	cbz	r0, 8007640 <_vfiprintf_r+0x198>
 800762e:	2340      	movs	r3, #64	; 0x40
 8007630:	eba0 000a 	sub.w	r0, r0, sl
 8007634:	fa03 f000 	lsl.w	r0, r3, r0
 8007638:	9b04      	ldr	r3, [sp, #16]
 800763a:	3401      	adds	r4, #1
 800763c:	4303      	orrs	r3, r0
 800763e:	9304      	str	r3, [sp, #16]
 8007640:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007644:	2206      	movs	r2, #6
 8007646:	482c      	ldr	r0, [pc, #176]	; (80076f8 <_vfiprintf_r+0x250>)
 8007648:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800764c:	f7ff f8c6 	bl	80067dc <memchr>
 8007650:	2800      	cmp	r0, #0
 8007652:	d03f      	beq.n	80076d4 <_vfiprintf_r+0x22c>
 8007654:	4b29      	ldr	r3, [pc, #164]	; (80076fc <_vfiprintf_r+0x254>)
 8007656:	bb1b      	cbnz	r3, 80076a0 <_vfiprintf_r+0x1f8>
 8007658:	9b03      	ldr	r3, [sp, #12]
 800765a:	3307      	adds	r3, #7
 800765c:	f023 0307 	bic.w	r3, r3, #7
 8007660:	3308      	adds	r3, #8
 8007662:	9303      	str	r3, [sp, #12]
 8007664:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007666:	443b      	add	r3, r7
 8007668:	9309      	str	r3, [sp, #36]	; 0x24
 800766a:	e767      	b.n	800753c <_vfiprintf_r+0x94>
 800766c:	460c      	mov	r4, r1
 800766e:	2001      	movs	r0, #1
 8007670:	fb0c 3202 	mla	r2, ip, r2, r3
 8007674:	e7a5      	b.n	80075c2 <_vfiprintf_r+0x11a>
 8007676:	2300      	movs	r3, #0
 8007678:	f04f 0c0a 	mov.w	ip, #10
 800767c:	4619      	mov	r1, r3
 800767e:	3401      	adds	r4, #1
 8007680:	9305      	str	r3, [sp, #20]
 8007682:	4620      	mov	r0, r4
 8007684:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007688:	3a30      	subs	r2, #48	; 0x30
 800768a:	2a09      	cmp	r2, #9
 800768c:	d903      	bls.n	8007696 <_vfiprintf_r+0x1ee>
 800768e:	2b00      	cmp	r3, #0
 8007690:	d0c5      	beq.n	800761e <_vfiprintf_r+0x176>
 8007692:	9105      	str	r1, [sp, #20]
 8007694:	e7c3      	b.n	800761e <_vfiprintf_r+0x176>
 8007696:	4604      	mov	r4, r0
 8007698:	2301      	movs	r3, #1
 800769a:	fb0c 2101 	mla	r1, ip, r1, r2
 800769e:	e7f0      	b.n	8007682 <_vfiprintf_r+0x1da>
 80076a0:	ab03      	add	r3, sp, #12
 80076a2:	9300      	str	r3, [sp, #0]
 80076a4:	462a      	mov	r2, r5
 80076a6:	4630      	mov	r0, r6
 80076a8:	4b15      	ldr	r3, [pc, #84]	; (8007700 <_vfiprintf_r+0x258>)
 80076aa:	a904      	add	r1, sp, #16
 80076ac:	f7fd fe2c 	bl	8005308 <_printf_float>
 80076b0:	4607      	mov	r7, r0
 80076b2:	1c78      	adds	r0, r7, #1
 80076b4:	d1d6      	bne.n	8007664 <_vfiprintf_r+0x1bc>
 80076b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076b8:	07d9      	lsls	r1, r3, #31
 80076ba:	d405      	bmi.n	80076c8 <_vfiprintf_r+0x220>
 80076bc:	89ab      	ldrh	r3, [r5, #12]
 80076be:	059a      	lsls	r2, r3, #22
 80076c0:	d402      	bmi.n	80076c8 <_vfiprintf_r+0x220>
 80076c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076c4:	f000 faaf 	bl	8007c26 <__retarget_lock_release_recursive>
 80076c8:	89ab      	ldrh	r3, [r5, #12]
 80076ca:	065b      	lsls	r3, r3, #25
 80076cc:	f53f af12 	bmi.w	80074f4 <_vfiprintf_r+0x4c>
 80076d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076d2:	e711      	b.n	80074f8 <_vfiprintf_r+0x50>
 80076d4:	ab03      	add	r3, sp, #12
 80076d6:	9300      	str	r3, [sp, #0]
 80076d8:	462a      	mov	r2, r5
 80076da:	4630      	mov	r0, r6
 80076dc:	4b08      	ldr	r3, [pc, #32]	; (8007700 <_vfiprintf_r+0x258>)
 80076de:	a904      	add	r1, sp, #16
 80076e0:	f7fe f8ae 	bl	8005840 <_printf_i>
 80076e4:	e7e4      	b.n	80076b0 <_vfiprintf_r+0x208>
 80076e6:	bf00      	nop
 80076e8:	0800badc 	.word	0x0800badc
 80076ec:	0800bafc 	.word	0x0800bafc
 80076f0:	0800babc 	.word	0x0800babc
 80076f4:	0800b964 	.word	0x0800b964
 80076f8:	0800b96e 	.word	0x0800b96e
 80076fc:	08005309 	.word	0x08005309
 8007700:	08007483 	.word	0x08007483
 8007704:	0800b96a 	.word	0x0800b96a

08007708 <__swbuf_r>:
 8007708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800770a:	460e      	mov	r6, r1
 800770c:	4614      	mov	r4, r2
 800770e:	4605      	mov	r5, r0
 8007710:	b118      	cbz	r0, 800771a <__swbuf_r+0x12>
 8007712:	6983      	ldr	r3, [r0, #24]
 8007714:	b90b      	cbnz	r3, 800771a <__swbuf_r+0x12>
 8007716:	f000 f9e7 	bl	8007ae8 <__sinit>
 800771a:	4b21      	ldr	r3, [pc, #132]	; (80077a0 <__swbuf_r+0x98>)
 800771c:	429c      	cmp	r4, r3
 800771e:	d12b      	bne.n	8007778 <__swbuf_r+0x70>
 8007720:	686c      	ldr	r4, [r5, #4]
 8007722:	69a3      	ldr	r3, [r4, #24]
 8007724:	60a3      	str	r3, [r4, #8]
 8007726:	89a3      	ldrh	r3, [r4, #12]
 8007728:	071a      	lsls	r2, r3, #28
 800772a:	d52f      	bpl.n	800778c <__swbuf_r+0x84>
 800772c:	6923      	ldr	r3, [r4, #16]
 800772e:	b36b      	cbz	r3, 800778c <__swbuf_r+0x84>
 8007730:	6923      	ldr	r3, [r4, #16]
 8007732:	6820      	ldr	r0, [r4, #0]
 8007734:	b2f6      	uxtb	r6, r6
 8007736:	1ac0      	subs	r0, r0, r3
 8007738:	6963      	ldr	r3, [r4, #20]
 800773a:	4637      	mov	r7, r6
 800773c:	4283      	cmp	r3, r0
 800773e:	dc04      	bgt.n	800774a <__swbuf_r+0x42>
 8007740:	4621      	mov	r1, r4
 8007742:	4628      	mov	r0, r5
 8007744:	f000 f93c 	bl	80079c0 <_fflush_r>
 8007748:	bb30      	cbnz	r0, 8007798 <__swbuf_r+0x90>
 800774a:	68a3      	ldr	r3, [r4, #8]
 800774c:	3001      	adds	r0, #1
 800774e:	3b01      	subs	r3, #1
 8007750:	60a3      	str	r3, [r4, #8]
 8007752:	6823      	ldr	r3, [r4, #0]
 8007754:	1c5a      	adds	r2, r3, #1
 8007756:	6022      	str	r2, [r4, #0]
 8007758:	701e      	strb	r6, [r3, #0]
 800775a:	6963      	ldr	r3, [r4, #20]
 800775c:	4283      	cmp	r3, r0
 800775e:	d004      	beq.n	800776a <__swbuf_r+0x62>
 8007760:	89a3      	ldrh	r3, [r4, #12]
 8007762:	07db      	lsls	r3, r3, #31
 8007764:	d506      	bpl.n	8007774 <__swbuf_r+0x6c>
 8007766:	2e0a      	cmp	r6, #10
 8007768:	d104      	bne.n	8007774 <__swbuf_r+0x6c>
 800776a:	4621      	mov	r1, r4
 800776c:	4628      	mov	r0, r5
 800776e:	f000 f927 	bl	80079c0 <_fflush_r>
 8007772:	b988      	cbnz	r0, 8007798 <__swbuf_r+0x90>
 8007774:	4638      	mov	r0, r7
 8007776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007778:	4b0a      	ldr	r3, [pc, #40]	; (80077a4 <__swbuf_r+0x9c>)
 800777a:	429c      	cmp	r4, r3
 800777c:	d101      	bne.n	8007782 <__swbuf_r+0x7a>
 800777e:	68ac      	ldr	r4, [r5, #8]
 8007780:	e7cf      	b.n	8007722 <__swbuf_r+0x1a>
 8007782:	4b09      	ldr	r3, [pc, #36]	; (80077a8 <__swbuf_r+0xa0>)
 8007784:	429c      	cmp	r4, r3
 8007786:	bf08      	it	eq
 8007788:	68ec      	ldreq	r4, [r5, #12]
 800778a:	e7ca      	b.n	8007722 <__swbuf_r+0x1a>
 800778c:	4621      	mov	r1, r4
 800778e:	4628      	mov	r0, r5
 8007790:	f000 f81a 	bl	80077c8 <__swsetup_r>
 8007794:	2800      	cmp	r0, #0
 8007796:	d0cb      	beq.n	8007730 <__swbuf_r+0x28>
 8007798:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800779c:	e7ea      	b.n	8007774 <__swbuf_r+0x6c>
 800779e:	bf00      	nop
 80077a0:	0800badc 	.word	0x0800badc
 80077a4:	0800bafc 	.word	0x0800bafc
 80077a8:	0800babc 	.word	0x0800babc

080077ac <__ascii_wctomb>:
 80077ac:	4603      	mov	r3, r0
 80077ae:	4608      	mov	r0, r1
 80077b0:	b141      	cbz	r1, 80077c4 <__ascii_wctomb+0x18>
 80077b2:	2aff      	cmp	r2, #255	; 0xff
 80077b4:	d904      	bls.n	80077c0 <__ascii_wctomb+0x14>
 80077b6:	228a      	movs	r2, #138	; 0x8a
 80077b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077bc:	601a      	str	r2, [r3, #0]
 80077be:	4770      	bx	lr
 80077c0:	2001      	movs	r0, #1
 80077c2:	700a      	strb	r2, [r1, #0]
 80077c4:	4770      	bx	lr
	...

080077c8 <__swsetup_r>:
 80077c8:	4b32      	ldr	r3, [pc, #200]	; (8007894 <__swsetup_r+0xcc>)
 80077ca:	b570      	push	{r4, r5, r6, lr}
 80077cc:	681d      	ldr	r5, [r3, #0]
 80077ce:	4606      	mov	r6, r0
 80077d0:	460c      	mov	r4, r1
 80077d2:	b125      	cbz	r5, 80077de <__swsetup_r+0x16>
 80077d4:	69ab      	ldr	r3, [r5, #24]
 80077d6:	b913      	cbnz	r3, 80077de <__swsetup_r+0x16>
 80077d8:	4628      	mov	r0, r5
 80077da:	f000 f985 	bl	8007ae8 <__sinit>
 80077de:	4b2e      	ldr	r3, [pc, #184]	; (8007898 <__swsetup_r+0xd0>)
 80077e0:	429c      	cmp	r4, r3
 80077e2:	d10f      	bne.n	8007804 <__swsetup_r+0x3c>
 80077e4:	686c      	ldr	r4, [r5, #4]
 80077e6:	89a3      	ldrh	r3, [r4, #12]
 80077e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80077ec:	0719      	lsls	r1, r3, #28
 80077ee:	d42c      	bmi.n	800784a <__swsetup_r+0x82>
 80077f0:	06dd      	lsls	r5, r3, #27
 80077f2:	d411      	bmi.n	8007818 <__swsetup_r+0x50>
 80077f4:	2309      	movs	r3, #9
 80077f6:	6033      	str	r3, [r6, #0]
 80077f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80077fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007800:	81a3      	strh	r3, [r4, #12]
 8007802:	e03e      	b.n	8007882 <__swsetup_r+0xba>
 8007804:	4b25      	ldr	r3, [pc, #148]	; (800789c <__swsetup_r+0xd4>)
 8007806:	429c      	cmp	r4, r3
 8007808:	d101      	bne.n	800780e <__swsetup_r+0x46>
 800780a:	68ac      	ldr	r4, [r5, #8]
 800780c:	e7eb      	b.n	80077e6 <__swsetup_r+0x1e>
 800780e:	4b24      	ldr	r3, [pc, #144]	; (80078a0 <__swsetup_r+0xd8>)
 8007810:	429c      	cmp	r4, r3
 8007812:	bf08      	it	eq
 8007814:	68ec      	ldreq	r4, [r5, #12]
 8007816:	e7e6      	b.n	80077e6 <__swsetup_r+0x1e>
 8007818:	0758      	lsls	r0, r3, #29
 800781a:	d512      	bpl.n	8007842 <__swsetup_r+0x7a>
 800781c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800781e:	b141      	cbz	r1, 8007832 <__swsetup_r+0x6a>
 8007820:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007824:	4299      	cmp	r1, r3
 8007826:	d002      	beq.n	800782e <__swsetup_r+0x66>
 8007828:	4630      	mov	r0, r6
 800782a:	f7ff fb75 	bl	8006f18 <_free_r>
 800782e:	2300      	movs	r3, #0
 8007830:	6363      	str	r3, [r4, #52]	; 0x34
 8007832:	89a3      	ldrh	r3, [r4, #12]
 8007834:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007838:	81a3      	strh	r3, [r4, #12]
 800783a:	2300      	movs	r3, #0
 800783c:	6063      	str	r3, [r4, #4]
 800783e:	6923      	ldr	r3, [r4, #16]
 8007840:	6023      	str	r3, [r4, #0]
 8007842:	89a3      	ldrh	r3, [r4, #12]
 8007844:	f043 0308 	orr.w	r3, r3, #8
 8007848:	81a3      	strh	r3, [r4, #12]
 800784a:	6923      	ldr	r3, [r4, #16]
 800784c:	b94b      	cbnz	r3, 8007862 <__swsetup_r+0x9a>
 800784e:	89a3      	ldrh	r3, [r4, #12]
 8007850:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007854:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007858:	d003      	beq.n	8007862 <__swsetup_r+0x9a>
 800785a:	4621      	mov	r1, r4
 800785c:	4630      	mov	r0, r6
 800785e:	f000 fa07 	bl	8007c70 <__smakebuf_r>
 8007862:	89a0      	ldrh	r0, [r4, #12]
 8007864:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007868:	f010 0301 	ands.w	r3, r0, #1
 800786c:	d00a      	beq.n	8007884 <__swsetup_r+0xbc>
 800786e:	2300      	movs	r3, #0
 8007870:	60a3      	str	r3, [r4, #8]
 8007872:	6963      	ldr	r3, [r4, #20]
 8007874:	425b      	negs	r3, r3
 8007876:	61a3      	str	r3, [r4, #24]
 8007878:	6923      	ldr	r3, [r4, #16]
 800787a:	b943      	cbnz	r3, 800788e <__swsetup_r+0xc6>
 800787c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007880:	d1ba      	bne.n	80077f8 <__swsetup_r+0x30>
 8007882:	bd70      	pop	{r4, r5, r6, pc}
 8007884:	0781      	lsls	r1, r0, #30
 8007886:	bf58      	it	pl
 8007888:	6963      	ldrpl	r3, [r4, #20]
 800788a:	60a3      	str	r3, [r4, #8]
 800788c:	e7f4      	b.n	8007878 <__swsetup_r+0xb0>
 800788e:	2000      	movs	r0, #0
 8007890:	e7f7      	b.n	8007882 <__swsetup_r+0xba>
 8007892:	bf00      	nop
 8007894:	200000a8 	.word	0x200000a8
 8007898:	0800badc 	.word	0x0800badc
 800789c:	0800bafc 	.word	0x0800bafc
 80078a0:	0800babc 	.word	0x0800babc

080078a4 <abort>:
 80078a4:	2006      	movs	r0, #6
 80078a6:	b508      	push	{r3, lr}
 80078a8:	f000 fa52 	bl	8007d50 <raise>
 80078ac:	2001      	movs	r0, #1
 80078ae:	f7fa f84c 	bl	800194a <_exit>
	...

080078b4 <__sflush_r>:
 80078b4:	898a      	ldrh	r2, [r1, #12]
 80078b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078ba:	4605      	mov	r5, r0
 80078bc:	0710      	lsls	r0, r2, #28
 80078be:	460c      	mov	r4, r1
 80078c0:	d458      	bmi.n	8007974 <__sflush_r+0xc0>
 80078c2:	684b      	ldr	r3, [r1, #4]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	dc05      	bgt.n	80078d4 <__sflush_r+0x20>
 80078c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	dc02      	bgt.n	80078d4 <__sflush_r+0x20>
 80078ce:	2000      	movs	r0, #0
 80078d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80078d6:	2e00      	cmp	r6, #0
 80078d8:	d0f9      	beq.n	80078ce <__sflush_r+0x1a>
 80078da:	2300      	movs	r3, #0
 80078dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80078e0:	682f      	ldr	r7, [r5, #0]
 80078e2:	602b      	str	r3, [r5, #0]
 80078e4:	d032      	beq.n	800794c <__sflush_r+0x98>
 80078e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80078e8:	89a3      	ldrh	r3, [r4, #12]
 80078ea:	075a      	lsls	r2, r3, #29
 80078ec:	d505      	bpl.n	80078fa <__sflush_r+0x46>
 80078ee:	6863      	ldr	r3, [r4, #4]
 80078f0:	1ac0      	subs	r0, r0, r3
 80078f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80078f4:	b10b      	cbz	r3, 80078fa <__sflush_r+0x46>
 80078f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80078f8:	1ac0      	subs	r0, r0, r3
 80078fa:	2300      	movs	r3, #0
 80078fc:	4602      	mov	r2, r0
 80078fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007900:	4628      	mov	r0, r5
 8007902:	6a21      	ldr	r1, [r4, #32]
 8007904:	47b0      	blx	r6
 8007906:	1c43      	adds	r3, r0, #1
 8007908:	89a3      	ldrh	r3, [r4, #12]
 800790a:	d106      	bne.n	800791a <__sflush_r+0x66>
 800790c:	6829      	ldr	r1, [r5, #0]
 800790e:	291d      	cmp	r1, #29
 8007910:	d82c      	bhi.n	800796c <__sflush_r+0xb8>
 8007912:	4a2a      	ldr	r2, [pc, #168]	; (80079bc <__sflush_r+0x108>)
 8007914:	40ca      	lsrs	r2, r1
 8007916:	07d6      	lsls	r6, r2, #31
 8007918:	d528      	bpl.n	800796c <__sflush_r+0xb8>
 800791a:	2200      	movs	r2, #0
 800791c:	6062      	str	r2, [r4, #4]
 800791e:	6922      	ldr	r2, [r4, #16]
 8007920:	04d9      	lsls	r1, r3, #19
 8007922:	6022      	str	r2, [r4, #0]
 8007924:	d504      	bpl.n	8007930 <__sflush_r+0x7c>
 8007926:	1c42      	adds	r2, r0, #1
 8007928:	d101      	bne.n	800792e <__sflush_r+0x7a>
 800792a:	682b      	ldr	r3, [r5, #0]
 800792c:	b903      	cbnz	r3, 8007930 <__sflush_r+0x7c>
 800792e:	6560      	str	r0, [r4, #84]	; 0x54
 8007930:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007932:	602f      	str	r7, [r5, #0]
 8007934:	2900      	cmp	r1, #0
 8007936:	d0ca      	beq.n	80078ce <__sflush_r+0x1a>
 8007938:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800793c:	4299      	cmp	r1, r3
 800793e:	d002      	beq.n	8007946 <__sflush_r+0x92>
 8007940:	4628      	mov	r0, r5
 8007942:	f7ff fae9 	bl	8006f18 <_free_r>
 8007946:	2000      	movs	r0, #0
 8007948:	6360      	str	r0, [r4, #52]	; 0x34
 800794a:	e7c1      	b.n	80078d0 <__sflush_r+0x1c>
 800794c:	6a21      	ldr	r1, [r4, #32]
 800794e:	2301      	movs	r3, #1
 8007950:	4628      	mov	r0, r5
 8007952:	47b0      	blx	r6
 8007954:	1c41      	adds	r1, r0, #1
 8007956:	d1c7      	bne.n	80078e8 <__sflush_r+0x34>
 8007958:	682b      	ldr	r3, [r5, #0]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d0c4      	beq.n	80078e8 <__sflush_r+0x34>
 800795e:	2b1d      	cmp	r3, #29
 8007960:	d001      	beq.n	8007966 <__sflush_r+0xb2>
 8007962:	2b16      	cmp	r3, #22
 8007964:	d101      	bne.n	800796a <__sflush_r+0xb6>
 8007966:	602f      	str	r7, [r5, #0]
 8007968:	e7b1      	b.n	80078ce <__sflush_r+0x1a>
 800796a:	89a3      	ldrh	r3, [r4, #12]
 800796c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007970:	81a3      	strh	r3, [r4, #12]
 8007972:	e7ad      	b.n	80078d0 <__sflush_r+0x1c>
 8007974:	690f      	ldr	r7, [r1, #16]
 8007976:	2f00      	cmp	r7, #0
 8007978:	d0a9      	beq.n	80078ce <__sflush_r+0x1a>
 800797a:	0793      	lsls	r3, r2, #30
 800797c:	bf18      	it	ne
 800797e:	2300      	movne	r3, #0
 8007980:	680e      	ldr	r6, [r1, #0]
 8007982:	bf08      	it	eq
 8007984:	694b      	ldreq	r3, [r1, #20]
 8007986:	eba6 0807 	sub.w	r8, r6, r7
 800798a:	600f      	str	r7, [r1, #0]
 800798c:	608b      	str	r3, [r1, #8]
 800798e:	f1b8 0f00 	cmp.w	r8, #0
 8007992:	dd9c      	ble.n	80078ce <__sflush_r+0x1a>
 8007994:	4643      	mov	r3, r8
 8007996:	463a      	mov	r2, r7
 8007998:	4628      	mov	r0, r5
 800799a:	6a21      	ldr	r1, [r4, #32]
 800799c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800799e:	47b0      	blx	r6
 80079a0:	2800      	cmp	r0, #0
 80079a2:	dc06      	bgt.n	80079b2 <__sflush_r+0xfe>
 80079a4:	89a3      	ldrh	r3, [r4, #12]
 80079a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079ae:	81a3      	strh	r3, [r4, #12]
 80079b0:	e78e      	b.n	80078d0 <__sflush_r+0x1c>
 80079b2:	4407      	add	r7, r0
 80079b4:	eba8 0800 	sub.w	r8, r8, r0
 80079b8:	e7e9      	b.n	800798e <__sflush_r+0xda>
 80079ba:	bf00      	nop
 80079bc:	20400001 	.word	0x20400001

080079c0 <_fflush_r>:
 80079c0:	b538      	push	{r3, r4, r5, lr}
 80079c2:	690b      	ldr	r3, [r1, #16]
 80079c4:	4605      	mov	r5, r0
 80079c6:	460c      	mov	r4, r1
 80079c8:	b913      	cbnz	r3, 80079d0 <_fflush_r+0x10>
 80079ca:	2500      	movs	r5, #0
 80079cc:	4628      	mov	r0, r5
 80079ce:	bd38      	pop	{r3, r4, r5, pc}
 80079d0:	b118      	cbz	r0, 80079da <_fflush_r+0x1a>
 80079d2:	6983      	ldr	r3, [r0, #24]
 80079d4:	b90b      	cbnz	r3, 80079da <_fflush_r+0x1a>
 80079d6:	f000 f887 	bl	8007ae8 <__sinit>
 80079da:	4b14      	ldr	r3, [pc, #80]	; (8007a2c <_fflush_r+0x6c>)
 80079dc:	429c      	cmp	r4, r3
 80079de:	d11b      	bne.n	8007a18 <_fflush_r+0x58>
 80079e0:	686c      	ldr	r4, [r5, #4]
 80079e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d0ef      	beq.n	80079ca <_fflush_r+0xa>
 80079ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80079ec:	07d0      	lsls	r0, r2, #31
 80079ee:	d404      	bmi.n	80079fa <_fflush_r+0x3a>
 80079f0:	0599      	lsls	r1, r3, #22
 80079f2:	d402      	bmi.n	80079fa <_fflush_r+0x3a>
 80079f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079f6:	f000 f915 	bl	8007c24 <__retarget_lock_acquire_recursive>
 80079fa:	4628      	mov	r0, r5
 80079fc:	4621      	mov	r1, r4
 80079fe:	f7ff ff59 	bl	80078b4 <__sflush_r>
 8007a02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a04:	4605      	mov	r5, r0
 8007a06:	07da      	lsls	r2, r3, #31
 8007a08:	d4e0      	bmi.n	80079cc <_fflush_r+0xc>
 8007a0a:	89a3      	ldrh	r3, [r4, #12]
 8007a0c:	059b      	lsls	r3, r3, #22
 8007a0e:	d4dd      	bmi.n	80079cc <_fflush_r+0xc>
 8007a10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a12:	f000 f908 	bl	8007c26 <__retarget_lock_release_recursive>
 8007a16:	e7d9      	b.n	80079cc <_fflush_r+0xc>
 8007a18:	4b05      	ldr	r3, [pc, #20]	; (8007a30 <_fflush_r+0x70>)
 8007a1a:	429c      	cmp	r4, r3
 8007a1c:	d101      	bne.n	8007a22 <_fflush_r+0x62>
 8007a1e:	68ac      	ldr	r4, [r5, #8]
 8007a20:	e7df      	b.n	80079e2 <_fflush_r+0x22>
 8007a22:	4b04      	ldr	r3, [pc, #16]	; (8007a34 <_fflush_r+0x74>)
 8007a24:	429c      	cmp	r4, r3
 8007a26:	bf08      	it	eq
 8007a28:	68ec      	ldreq	r4, [r5, #12]
 8007a2a:	e7da      	b.n	80079e2 <_fflush_r+0x22>
 8007a2c:	0800badc 	.word	0x0800badc
 8007a30:	0800bafc 	.word	0x0800bafc
 8007a34:	0800babc 	.word	0x0800babc

08007a38 <std>:
 8007a38:	2300      	movs	r3, #0
 8007a3a:	b510      	push	{r4, lr}
 8007a3c:	4604      	mov	r4, r0
 8007a3e:	e9c0 3300 	strd	r3, r3, [r0]
 8007a42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007a46:	6083      	str	r3, [r0, #8]
 8007a48:	8181      	strh	r1, [r0, #12]
 8007a4a:	6643      	str	r3, [r0, #100]	; 0x64
 8007a4c:	81c2      	strh	r2, [r0, #14]
 8007a4e:	6183      	str	r3, [r0, #24]
 8007a50:	4619      	mov	r1, r3
 8007a52:	2208      	movs	r2, #8
 8007a54:	305c      	adds	r0, #92	; 0x5c
 8007a56:	f7fd fbb1 	bl	80051bc <memset>
 8007a5a:	4b05      	ldr	r3, [pc, #20]	; (8007a70 <std+0x38>)
 8007a5c:	6224      	str	r4, [r4, #32]
 8007a5e:	6263      	str	r3, [r4, #36]	; 0x24
 8007a60:	4b04      	ldr	r3, [pc, #16]	; (8007a74 <std+0x3c>)
 8007a62:	62a3      	str	r3, [r4, #40]	; 0x28
 8007a64:	4b04      	ldr	r3, [pc, #16]	; (8007a78 <std+0x40>)
 8007a66:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007a68:	4b04      	ldr	r3, [pc, #16]	; (8007a7c <std+0x44>)
 8007a6a:	6323      	str	r3, [r4, #48]	; 0x30
 8007a6c:	bd10      	pop	{r4, pc}
 8007a6e:	bf00      	nop
 8007a70:	08007d89 	.word	0x08007d89
 8007a74:	08007dab 	.word	0x08007dab
 8007a78:	08007de3 	.word	0x08007de3
 8007a7c:	08007e07 	.word	0x08007e07

08007a80 <_cleanup_r>:
 8007a80:	4901      	ldr	r1, [pc, #4]	; (8007a88 <_cleanup_r+0x8>)
 8007a82:	f000 b8af 	b.w	8007be4 <_fwalk_reent>
 8007a86:	bf00      	nop
 8007a88:	080079c1 	.word	0x080079c1

08007a8c <__sfmoreglue>:
 8007a8c:	b570      	push	{r4, r5, r6, lr}
 8007a8e:	2568      	movs	r5, #104	; 0x68
 8007a90:	1e4a      	subs	r2, r1, #1
 8007a92:	4355      	muls	r5, r2
 8007a94:	460e      	mov	r6, r1
 8007a96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007a9a:	f7ff fa89 	bl	8006fb0 <_malloc_r>
 8007a9e:	4604      	mov	r4, r0
 8007aa0:	b140      	cbz	r0, 8007ab4 <__sfmoreglue+0x28>
 8007aa2:	2100      	movs	r1, #0
 8007aa4:	e9c0 1600 	strd	r1, r6, [r0]
 8007aa8:	300c      	adds	r0, #12
 8007aaa:	60a0      	str	r0, [r4, #8]
 8007aac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007ab0:	f7fd fb84 	bl	80051bc <memset>
 8007ab4:	4620      	mov	r0, r4
 8007ab6:	bd70      	pop	{r4, r5, r6, pc}

08007ab8 <__sfp_lock_acquire>:
 8007ab8:	4801      	ldr	r0, [pc, #4]	; (8007ac0 <__sfp_lock_acquire+0x8>)
 8007aba:	f000 b8b3 	b.w	8007c24 <__retarget_lock_acquire_recursive>
 8007abe:	bf00      	nop
 8007ac0:	20000b9c 	.word	0x20000b9c

08007ac4 <__sfp_lock_release>:
 8007ac4:	4801      	ldr	r0, [pc, #4]	; (8007acc <__sfp_lock_release+0x8>)
 8007ac6:	f000 b8ae 	b.w	8007c26 <__retarget_lock_release_recursive>
 8007aca:	bf00      	nop
 8007acc:	20000b9c 	.word	0x20000b9c

08007ad0 <__sinit_lock_acquire>:
 8007ad0:	4801      	ldr	r0, [pc, #4]	; (8007ad8 <__sinit_lock_acquire+0x8>)
 8007ad2:	f000 b8a7 	b.w	8007c24 <__retarget_lock_acquire_recursive>
 8007ad6:	bf00      	nop
 8007ad8:	20000b97 	.word	0x20000b97

08007adc <__sinit_lock_release>:
 8007adc:	4801      	ldr	r0, [pc, #4]	; (8007ae4 <__sinit_lock_release+0x8>)
 8007ade:	f000 b8a2 	b.w	8007c26 <__retarget_lock_release_recursive>
 8007ae2:	bf00      	nop
 8007ae4:	20000b97 	.word	0x20000b97

08007ae8 <__sinit>:
 8007ae8:	b510      	push	{r4, lr}
 8007aea:	4604      	mov	r4, r0
 8007aec:	f7ff fff0 	bl	8007ad0 <__sinit_lock_acquire>
 8007af0:	69a3      	ldr	r3, [r4, #24]
 8007af2:	b11b      	cbz	r3, 8007afc <__sinit+0x14>
 8007af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007af8:	f7ff bff0 	b.w	8007adc <__sinit_lock_release>
 8007afc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007b00:	6523      	str	r3, [r4, #80]	; 0x50
 8007b02:	4b13      	ldr	r3, [pc, #76]	; (8007b50 <__sinit+0x68>)
 8007b04:	4a13      	ldr	r2, [pc, #76]	; (8007b54 <__sinit+0x6c>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	62a2      	str	r2, [r4, #40]	; 0x28
 8007b0a:	42a3      	cmp	r3, r4
 8007b0c:	bf08      	it	eq
 8007b0e:	2301      	moveq	r3, #1
 8007b10:	4620      	mov	r0, r4
 8007b12:	bf08      	it	eq
 8007b14:	61a3      	streq	r3, [r4, #24]
 8007b16:	f000 f81f 	bl	8007b58 <__sfp>
 8007b1a:	6060      	str	r0, [r4, #4]
 8007b1c:	4620      	mov	r0, r4
 8007b1e:	f000 f81b 	bl	8007b58 <__sfp>
 8007b22:	60a0      	str	r0, [r4, #8]
 8007b24:	4620      	mov	r0, r4
 8007b26:	f000 f817 	bl	8007b58 <__sfp>
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	2104      	movs	r1, #4
 8007b2e:	60e0      	str	r0, [r4, #12]
 8007b30:	6860      	ldr	r0, [r4, #4]
 8007b32:	f7ff ff81 	bl	8007a38 <std>
 8007b36:	2201      	movs	r2, #1
 8007b38:	2109      	movs	r1, #9
 8007b3a:	68a0      	ldr	r0, [r4, #8]
 8007b3c:	f7ff ff7c 	bl	8007a38 <std>
 8007b40:	2202      	movs	r2, #2
 8007b42:	2112      	movs	r1, #18
 8007b44:	68e0      	ldr	r0, [r4, #12]
 8007b46:	f7ff ff77 	bl	8007a38 <std>
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	61a3      	str	r3, [r4, #24]
 8007b4e:	e7d1      	b.n	8007af4 <__sinit+0xc>
 8007b50:	0800b738 	.word	0x0800b738
 8007b54:	08007a81 	.word	0x08007a81

08007b58 <__sfp>:
 8007b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b5a:	4607      	mov	r7, r0
 8007b5c:	f7ff ffac 	bl	8007ab8 <__sfp_lock_acquire>
 8007b60:	4b1e      	ldr	r3, [pc, #120]	; (8007bdc <__sfp+0x84>)
 8007b62:	681e      	ldr	r6, [r3, #0]
 8007b64:	69b3      	ldr	r3, [r6, #24]
 8007b66:	b913      	cbnz	r3, 8007b6e <__sfp+0x16>
 8007b68:	4630      	mov	r0, r6
 8007b6a:	f7ff ffbd 	bl	8007ae8 <__sinit>
 8007b6e:	3648      	adds	r6, #72	; 0x48
 8007b70:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007b74:	3b01      	subs	r3, #1
 8007b76:	d503      	bpl.n	8007b80 <__sfp+0x28>
 8007b78:	6833      	ldr	r3, [r6, #0]
 8007b7a:	b30b      	cbz	r3, 8007bc0 <__sfp+0x68>
 8007b7c:	6836      	ldr	r6, [r6, #0]
 8007b7e:	e7f7      	b.n	8007b70 <__sfp+0x18>
 8007b80:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007b84:	b9d5      	cbnz	r5, 8007bbc <__sfp+0x64>
 8007b86:	4b16      	ldr	r3, [pc, #88]	; (8007be0 <__sfp+0x88>)
 8007b88:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007b8c:	60e3      	str	r3, [r4, #12]
 8007b8e:	6665      	str	r5, [r4, #100]	; 0x64
 8007b90:	f000 f847 	bl	8007c22 <__retarget_lock_init_recursive>
 8007b94:	f7ff ff96 	bl	8007ac4 <__sfp_lock_release>
 8007b98:	2208      	movs	r2, #8
 8007b9a:	4629      	mov	r1, r5
 8007b9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007ba0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007ba4:	6025      	str	r5, [r4, #0]
 8007ba6:	61a5      	str	r5, [r4, #24]
 8007ba8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007bac:	f7fd fb06 	bl	80051bc <memset>
 8007bb0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007bb4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007bb8:	4620      	mov	r0, r4
 8007bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bbc:	3468      	adds	r4, #104	; 0x68
 8007bbe:	e7d9      	b.n	8007b74 <__sfp+0x1c>
 8007bc0:	2104      	movs	r1, #4
 8007bc2:	4638      	mov	r0, r7
 8007bc4:	f7ff ff62 	bl	8007a8c <__sfmoreglue>
 8007bc8:	4604      	mov	r4, r0
 8007bca:	6030      	str	r0, [r6, #0]
 8007bcc:	2800      	cmp	r0, #0
 8007bce:	d1d5      	bne.n	8007b7c <__sfp+0x24>
 8007bd0:	f7ff ff78 	bl	8007ac4 <__sfp_lock_release>
 8007bd4:	230c      	movs	r3, #12
 8007bd6:	603b      	str	r3, [r7, #0]
 8007bd8:	e7ee      	b.n	8007bb8 <__sfp+0x60>
 8007bda:	bf00      	nop
 8007bdc:	0800b738 	.word	0x0800b738
 8007be0:	ffff0001 	.word	0xffff0001

08007be4 <_fwalk_reent>:
 8007be4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007be8:	4606      	mov	r6, r0
 8007bea:	4688      	mov	r8, r1
 8007bec:	2700      	movs	r7, #0
 8007bee:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007bf2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007bf6:	f1b9 0901 	subs.w	r9, r9, #1
 8007bfa:	d505      	bpl.n	8007c08 <_fwalk_reent+0x24>
 8007bfc:	6824      	ldr	r4, [r4, #0]
 8007bfe:	2c00      	cmp	r4, #0
 8007c00:	d1f7      	bne.n	8007bf2 <_fwalk_reent+0xe>
 8007c02:	4638      	mov	r0, r7
 8007c04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c08:	89ab      	ldrh	r3, [r5, #12]
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d907      	bls.n	8007c1e <_fwalk_reent+0x3a>
 8007c0e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007c12:	3301      	adds	r3, #1
 8007c14:	d003      	beq.n	8007c1e <_fwalk_reent+0x3a>
 8007c16:	4629      	mov	r1, r5
 8007c18:	4630      	mov	r0, r6
 8007c1a:	47c0      	blx	r8
 8007c1c:	4307      	orrs	r7, r0
 8007c1e:	3568      	adds	r5, #104	; 0x68
 8007c20:	e7e9      	b.n	8007bf6 <_fwalk_reent+0x12>

08007c22 <__retarget_lock_init_recursive>:
 8007c22:	4770      	bx	lr

08007c24 <__retarget_lock_acquire_recursive>:
 8007c24:	4770      	bx	lr

08007c26 <__retarget_lock_release_recursive>:
 8007c26:	4770      	bx	lr

08007c28 <__swhatbuf_r>:
 8007c28:	b570      	push	{r4, r5, r6, lr}
 8007c2a:	460e      	mov	r6, r1
 8007c2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c30:	4614      	mov	r4, r2
 8007c32:	2900      	cmp	r1, #0
 8007c34:	461d      	mov	r5, r3
 8007c36:	b096      	sub	sp, #88	; 0x58
 8007c38:	da07      	bge.n	8007c4a <__swhatbuf_r+0x22>
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	602b      	str	r3, [r5, #0]
 8007c3e:	89b3      	ldrh	r3, [r6, #12]
 8007c40:	061a      	lsls	r2, r3, #24
 8007c42:	d410      	bmi.n	8007c66 <__swhatbuf_r+0x3e>
 8007c44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c48:	e00e      	b.n	8007c68 <__swhatbuf_r+0x40>
 8007c4a:	466a      	mov	r2, sp
 8007c4c:	f000 f902 	bl	8007e54 <_fstat_r>
 8007c50:	2800      	cmp	r0, #0
 8007c52:	dbf2      	blt.n	8007c3a <__swhatbuf_r+0x12>
 8007c54:	9a01      	ldr	r2, [sp, #4]
 8007c56:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007c5a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007c5e:	425a      	negs	r2, r3
 8007c60:	415a      	adcs	r2, r3
 8007c62:	602a      	str	r2, [r5, #0]
 8007c64:	e7ee      	b.n	8007c44 <__swhatbuf_r+0x1c>
 8007c66:	2340      	movs	r3, #64	; 0x40
 8007c68:	2000      	movs	r0, #0
 8007c6a:	6023      	str	r3, [r4, #0]
 8007c6c:	b016      	add	sp, #88	; 0x58
 8007c6e:	bd70      	pop	{r4, r5, r6, pc}

08007c70 <__smakebuf_r>:
 8007c70:	898b      	ldrh	r3, [r1, #12]
 8007c72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007c74:	079d      	lsls	r5, r3, #30
 8007c76:	4606      	mov	r6, r0
 8007c78:	460c      	mov	r4, r1
 8007c7a:	d507      	bpl.n	8007c8c <__smakebuf_r+0x1c>
 8007c7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007c80:	6023      	str	r3, [r4, #0]
 8007c82:	6123      	str	r3, [r4, #16]
 8007c84:	2301      	movs	r3, #1
 8007c86:	6163      	str	r3, [r4, #20]
 8007c88:	b002      	add	sp, #8
 8007c8a:	bd70      	pop	{r4, r5, r6, pc}
 8007c8c:	466a      	mov	r2, sp
 8007c8e:	ab01      	add	r3, sp, #4
 8007c90:	f7ff ffca 	bl	8007c28 <__swhatbuf_r>
 8007c94:	9900      	ldr	r1, [sp, #0]
 8007c96:	4605      	mov	r5, r0
 8007c98:	4630      	mov	r0, r6
 8007c9a:	f7ff f989 	bl	8006fb0 <_malloc_r>
 8007c9e:	b948      	cbnz	r0, 8007cb4 <__smakebuf_r+0x44>
 8007ca0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ca4:	059a      	lsls	r2, r3, #22
 8007ca6:	d4ef      	bmi.n	8007c88 <__smakebuf_r+0x18>
 8007ca8:	f023 0303 	bic.w	r3, r3, #3
 8007cac:	f043 0302 	orr.w	r3, r3, #2
 8007cb0:	81a3      	strh	r3, [r4, #12]
 8007cb2:	e7e3      	b.n	8007c7c <__smakebuf_r+0xc>
 8007cb4:	4b0d      	ldr	r3, [pc, #52]	; (8007cec <__smakebuf_r+0x7c>)
 8007cb6:	62b3      	str	r3, [r6, #40]	; 0x28
 8007cb8:	89a3      	ldrh	r3, [r4, #12]
 8007cba:	6020      	str	r0, [r4, #0]
 8007cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cc0:	81a3      	strh	r3, [r4, #12]
 8007cc2:	9b00      	ldr	r3, [sp, #0]
 8007cc4:	6120      	str	r0, [r4, #16]
 8007cc6:	6163      	str	r3, [r4, #20]
 8007cc8:	9b01      	ldr	r3, [sp, #4]
 8007cca:	b15b      	cbz	r3, 8007ce4 <__smakebuf_r+0x74>
 8007ccc:	4630      	mov	r0, r6
 8007cce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007cd2:	f000 f8d1 	bl	8007e78 <_isatty_r>
 8007cd6:	b128      	cbz	r0, 8007ce4 <__smakebuf_r+0x74>
 8007cd8:	89a3      	ldrh	r3, [r4, #12]
 8007cda:	f023 0303 	bic.w	r3, r3, #3
 8007cde:	f043 0301 	orr.w	r3, r3, #1
 8007ce2:	81a3      	strh	r3, [r4, #12]
 8007ce4:	89a0      	ldrh	r0, [r4, #12]
 8007ce6:	4305      	orrs	r5, r0
 8007ce8:	81a5      	strh	r5, [r4, #12]
 8007cea:	e7cd      	b.n	8007c88 <__smakebuf_r+0x18>
 8007cec:	08007a81 	.word	0x08007a81

08007cf0 <_malloc_usable_size_r>:
 8007cf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cf4:	1f18      	subs	r0, r3, #4
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	bfbc      	itt	lt
 8007cfa:	580b      	ldrlt	r3, [r1, r0]
 8007cfc:	18c0      	addlt	r0, r0, r3
 8007cfe:	4770      	bx	lr

08007d00 <_raise_r>:
 8007d00:	291f      	cmp	r1, #31
 8007d02:	b538      	push	{r3, r4, r5, lr}
 8007d04:	4604      	mov	r4, r0
 8007d06:	460d      	mov	r5, r1
 8007d08:	d904      	bls.n	8007d14 <_raise_r+0x14>
 8007d0a:	2316      	movs	r3, #22
 8007d0c:	6003      	str	r3, [r0, #0]
 8007d0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d12:	bd38      	pop	{r3, r4, r5, pc}
 8007d14:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007d16:	b112      	cbz	r2, 8007d1e <_raise_r+0x1e>
 8007d18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007d1c:	b94b      	cbnz	r3, 8007d32 <_raise_r+0x32>
 8007d1e:	4620      	mov	r0, r4
 8007d20:	f000 f830 	bl	8007d84 <_getpid_r>
 8007d24:	462a      	mov	r2, r5
 8007d26:	4601      	mov	r1, r0
 8007d28:	4620      	mov	r0, r4
 8007d2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d2e:	f000 b817 	b.w	8007d60 <_kill_r>
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d00a      	beq.n	8007d4c <_raise_r+0x4c>
 8007d36:	1c59      	adds	r1, r3, #1
 8007d38:	d103      	bne.n	8007d42 <_raise_r+0x42>
 8007d3a:	2316      	movs	r3, #22
 8007d3c:	6003      	str	r3, [r0, #0]
 8007d3e:	2001      	movs	r0, #1
 8007d40:	e7e7      	b.n	8007d12 <_raise_r+0x12>
 8007d42:	2400      	movs	r4, #0
 8007d44:	4628      	mov	r0, r5
 8007d46:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007d4a:	4798      	blx	r3
 8007d4c:	2000      	movs	r0, #0
 8007d4e:	e7e0      	b.n	8007d12 <_raise_r+0x12>

08007d50 <raise>:
 8007d50:	4b02      	ldr	r3, [pc, #8]	; (8007d5c <raise+0xc>)
 8007d52:	4601      	mov	r1, r0
 8007d54:	6818      	ldr	r0, [r3, #0]
 8007d56:	f7ff bfd3 	b.w	8007d00 <_raise_r>
 8007d5a:	bf00      	nop
 8007d5c:	200000a8 	.word	0x200000a8

08007d60 <_kill_r>:
 8007d60:	b538      	push	{r3, r4, r5, lr}
 8007d62:	2300      	movs	r3, #0
 8007d64:	4d06      	ldr	r5, [pc, #24]	; (8007d80 <_kill_r+0x20>)
 8007d66:	4604      	mov	r4, r0
 8007d68:	4608      	mov	r0, r1
 8007d6a:	4611      	mov	r1, r2
 8007d6c:	602b      	str	r3, [r5, #0]
 8007d6e:	f7f9 fddc 	bl	800192a <_kill>
 8007d72:	1c43      	adds	r3, r0, #1
 8007d74:	d102      	bne.n	8007d7c <_kill_r+0x1c>
 8007d76:	682b      	ldr	r3, [r5, #0]
 8007d78:	b103      	cbz	r3, 8007d7c <_kill_r+0x1c>
 8007d7a:	6023      	str	r3, [r4, #0]
 8007d7c:	bd38      	pop	{r3, r4, r5, pc}
 8007d7e:	bf00      	nop
 8007d80:	20000b90 	.word	0x20000b90

08007d84 <_getpid_r>:
 8007d84:	f7f9 bdca 	b.w	800191c <_getpid>

08007d88 <__sread>:
 8007d88:	b510      	push	{r4, lr}
 8007d8a:	460c      	mov	r4, r1
 8007d8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d90:	f000 f894 	bl	8007ebc <_read_r>
 8007d94:	2800      	cmp	r0, #0
 8007d96:	bfab      	itete	ge
 8007d98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007d9a:	89a3      	ldrhlt	r3, [r4, #12]
 8007d9c:	181b      	addge	r3, r3, r0
 8007d9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007da2:	bfac      	ite	ge
 8007da4:	6563      	strge	r3, [r4, #84]	; 0x54
 8007da6:	81a3      	strhlt	r3, [r4, #12]
 8007da8:	bd10      	pop	{r4, pc}

08007daa <__swrite>:
 8007daa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dae:	461f      	mov	r7, r3
 8007db0:	898b      	ldrh	r3, [r1, #12]
 8007db2:	4605      	mov	r5, r0
 8007db4:	05db      	lsls	r3, r3, #23
 8007db6:	460c      	mov	r4, r1
 8007db8:	4616      	mov	r6, r2
 8007dba:	d505      	bpl.n	8007dc8 <__swrite+0x1e>
 8007dbc:	2302      	movs	r3, #2
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dc4:	f000 f868 	bl	8007e98 <_lseek_r>
 8007dc8:	89a3      	ldrh	r3, [r4, #12]
 8007dca:	4632      	mov	r2, r6
 8007dcc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007dd0:	81a3      	strh	r3, [r4, #12]
 8007dd2:	4628      	mov	r0, r5
 8007dd4:	463b      	mov	r3, r7
 8007dd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007dda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007dde:	f000 b817 	b.w	8007e10 <_write_r>

08007de2 <__sseek>:
 8007de2:	b510      	push	{r4, lr}
 8007de4:	460c      	mov	r4, r1
 8007de6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dea:	f000 f855 	bl	8007e98 <_lseek_r>
 8007dee:	1c43      	adds	r3, r0, #1
 8007df0:	89a3      	ldrh	r3, [r4, #12]
 8007df2:	bf15      	itete	ne
 8007df4:	6560      	strne	r0, [r4, #84]	; 0x54
 8007df6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007dfa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007dfe:	81a3      	strheq	r3, [r4, #12]
 8007e00:	bf18      	it	ne
 8007e02:	81a3      	strhne	r3, [r4, #12]
 8007e04:	bd10      	pop	{r4, pc}

08007e06 <__sclose>:
 8007e06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e0a:	f000 b813 	b.w	8007e34 <_close_r>
	...

08007e10 <_write_r>:
 8007e10:	b538      	push	{r3, r4, r5, lr}
 8007e12:	4604      	mov	r4, r0
 8007e14:	4608      	mov	r0, r1
 8007e16:	4611      	mov	r1, r2
 8007e18:	2200      	movs	r2, #0
 8007e1a:	4d05      	ldr	r5, [pc, #20]	; (8007e30 <_write_r+0x20>)
 8007e1c:	602a      	str	r2, [r5, #0]
 8007e1e:	461a      	mov	r2, r3
 8007e20:	f7f9 fdba 	bl	8001998 <_write>
 8007e24:	1c43      	adds	r3, r0, #1
 8007e26:	d102      	bne.n	8007e2e <_write_r+0x1e>
 8007e28:	682b      	ldr	r3, [r5, #0]
 8007e2a:	b103      	cbz	r3, 8007e2e <_write_r+0x1e>
 8007e2c:	6023      	str	r3, [r4, #0]
 8007e2e:	bd38      	pop	{r3, r4, r5, pc}
 8007e30:	20000b90 	.word	0x20000b90

08007e34 <_close_r>:
 8007e34:	b538      	push	{r3, r4, r5, lr}
 8007e36:	2300      	movs	r3, #0
 8007e38:	4d05      	ldr	r5, [pc, #20]	; (8007e50 <_close_r+0x1c>)
 8007e3a:	4604      	mov	r4, r0
 8007e3c:	4608      	mov	r0, r1
 8007e3e:	602b      	str	r3, [r5, #0]
 8007e40:	f7f9 fdc6 	bl	80019d0 <_close>
 8007e44:	1c43      	adds	r3, r0, #1
 8007e46:	d102      	bne.n	8007e4e <_close_r+0x1a>
 8007e48:	682b      	ldr	r3, [r5, #0]
 8007e4a:	b103      	cbz	r3, 8007e4e <_close_r+0x1a>
 8007e4c:	6023      	str	r3, [r4, #0]
 8007e4e:	bd38      	pop	{r3, r4, r5, pc}
 8007e50:	20000b90 	.word	0x20000b90

08007e54 <_fstat_r>:
 8007e54:	b538      	push	{r3, r4, r5, lr}
 8007e56:	2300      	movs	r3, #0
 8007e58:	4d06      	ldr	r5, [pc, #24]	; (8007e74 <_fstat_r+0x20>)
 8007e5a:	4604      	mov	r4, r0
 8007e5c:	4608      	mov	r0, r1
 8007e5e:	4611      	mov	r1, r2
 8007e60:	602b      	str	r3, [r5, #0]
 8007e62:	f7f9 fdc0 	bl	80019e6 <_fstat>
 8007e66:	1c43      	adds	r3, r0, #1
 8007e68:	d102      	bne.n	8007e70 <_fstat_r+0x1c>
 8007e6a:	682b      	ldr	r3, [r5, #0]
 8007e6c:	b103      	cbz	r3, 8007e70 <_fstat_r+0x1c>
 8007e6e:	6023      	str	r3, [r4, #0]
 8007e70:	bd38      	pop	{r3, r4, r5, pc}
 8007e72:	bf00      	nop
 8007e74:	20000b90 	.word	0x20000b90

08007e78 <_isatty_r>:
 8007e78:	b538      	push	{r3, r4, r5, lr}
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	4d05      	ldr	r5, [pc, #20]	; (8007e94 <_isatty_r+0x1c>)
 8007e7e:	4604      	mov	r4, r0
 8007e80:	4608      	mov	r0, r1
 8007e82:	602b      	str	r3, [r5, #0]
 8007e84:	f7f9 fdbe 	bl	8001a04 <_isatty>
 8007e88:	1c43      	adds	r3, r0, #1
 8007e8a:	d102      	bne.n	8007e92 <_isatty_r+0x1a>
 8007e8c:	682b      	ldr	r3, [r5, #0]
 8007e8e:	b103      	cbz	r3, 8007e92 <_isatty_r+0x1a>
 8007e90:	6023      	str	r3, [r4, #0]
 8007e92:	bd38      	pop	{r3, r4, r5, pc}
 8007e94:	20000b90 	.word	0x20000b90

08007e98 <_lseek_r>:
 8007e98:	b538      	push	{r3, r4, r5, lr}
 8007e9a:	4604      	mov	r4, r0
 8007e9c:	4608      	mov	r0, r1
 8007e9e:	4611      	mov	r1, r2
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	4d05      	ldr	r5, [pc, #20]	; (8007eb8 <_lseek_r+0x20>)
 8007ea4:	602a      	str	r2, [r5, #0]
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	f7f9 fdb6 	bl	8001a18 <_lseek>
 8007eac:	1c43      	adds	r3, r0, #1
 8007eae:	d102      	bne.n	8007eb6 <_lseek_r+0x1e>
 8007eb0:	682b      	ldr	r3, [r5, #0]
 8007eb2:	b103      	cbz	r3, 8007eb6 <_lseek_r+0x1e>
 8007eb4:	6023      	str	r3, [r4, #0]
 8007eb6:	bd38      	pop	{r3, r4, r5, pc}
 8007eb8:	20000b90 	.word	0x20000b90

08007ebc <_read_r>:
 8007ebc:	b538      	push	{r3, r4, r5, lr}
 8007ebe:	4604      	mov	r4, r0
 8007ec0:	4608      	mov	r0, r1
 8007ec2:	4611      	mov	r1, r2
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	4d05      	ldr	r5, [pc, #20]	; (8007edc <_read_r+0x20>)
 8007ec8:	602a      	str	r2, [r5, #0]
 8007eca:	461a      	mov	r2, r3
 8007ecc:	f7f9 fd47 	bl	800195e <_read>
 8007ed0:	1c43      	adds	r3, r0, #1
 8007ed2:	d102      	bne.n	8007eda <_read_r+0x1e>
 8007ed4:	682b      	ldr	r3, [r5, #0]
 8007ed6:	b103      	cbz	r3, 8007eda <_read_r+0x1e>
 8007ed8:	6023      	str	r3, [r4, #0]
 8007eda:	bd38      	pop	{r3, r4, r5, pc}
 8007edc:	20000b90 	.word	0x20000b90

08007ee0 <cos>:
 8007ee0:	b530      	push	{r4, r5, lr}
 8007ee2:	4a1e      	ldr	r2, [pc, #120]	; (8007f5c <cos+0x7c>)
 8007ee4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	b087      	sub	sp, #28
 8007eec:	dc04      	bgt.n	8007ef8 <cos+0x18>
 8007eee:	2200      	movs	r2, #0
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	f000 fc1d 	bl	8008730 <__kernel_cos>
 8007ef6:	e006      	b.n	8007f06 <cos+0x26>
 8007ef8:	4a19      	ldr	r2, [pc, #100]	; (8007f60 <cos+0x80>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	dd05      	ble.n	8007f0a <cos+0x2a>
 8007efe:	4602      	mov	r2, r0
 8007f00:	460b      	mov	r3, r1
 8007f02:	f7f8 f931 	bl	8000168 <__aeabi_dsub>
 8007f06:	b007      	add	sp, #28
 8007f08:	bd30      	pop	{r4, r5, pc}
 8007f0a:	aa02      	add	r2, sp, #8
 8007f0c:	f000 f974 	bl	80081f8 <__ieee754_rem_pio2>
 8007f10:	f000 0003 	and.w	r0, r0, #3
 8007f14:	2801      	cmp	r0, #1
 8007f16:	d007      	beq.n	8007f28 <cos+0x48>
 8007f18:	2802      	cmp	r0, #2
 8007f1a:	d00f      	beq.n	8007f3c <cos+0x5c>
 8007f1c:	b9a8      	cbnz	r0, 8007f4a <cos+0x6a>
 8007f1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f26:	e7e4      	b.n	8007ef2 <cos+0x12>
 8007f28:	9000      	str	r0, [sp, #0]
 8007f2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f32:	f001 f805 	bl	8008f40 <__kernel_sin>
 8007f36:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8007f3a:	e7e4      	b.n	8007f06 <cos+0x26>
 8007f3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f44:	f000 fbf4 	bl	8008730 <__kernel_cos>
 8007f48:	e7f5      	b.n	8007f36 <cos+0x56>
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f50:	9300      	str	r3, [sp, #0]
 8007f52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f56:	f000 fff3 	bl	8008f40 <__kernel_sin>
 8007f5a:	e7d4      	b.n	8007f06 <cos+0x26>
 8007f5c:	3fe921fb 	.word	0x3fe921fb
 8007f60:	7fefffff 	.word	0x7fefffff

08007f64 <sin>:
 8007f64:	b530      	push	{r4, r5, lr}
 8007f66:	4a20      	ldr	r2, [pc, #128]	; (8007fe8 <sin+0x84>)
 8007f68:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	b087      	sub	sp, #28
 8007f70:	dc06      	bgt.n	8007f80 <sin+0x1c>
 8007f72:	2300      	movs	r3, #0
 8007f74:	2200      	movs	r2, #0
 8007f76:	9300      	str	r3, [sp, #0]
 8007f78:	2300      	movs	r3, #0
 8007f7a:	f000 ffe1 	bl	8008f40 <__kernel_sin>
 8007f7e:	e006      	b.n	8007f8e <sin+0x2a>
 8007f80:	4a1a      	ldr	r2, [pc, #104]	; (8007fec <sin+0x88>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	dd05      	ble.n	8007f92 <sin+0x2e>
 8007f86:	4602      	mov	r2, r0
 8007f88:	460b      	mov	r3, r1
 8007f8a:	f7f8 f8ed 	bl	8000168 <__aeabi_dsub>
 8007f8e:	b007      	add	sp, #28
 8007f90:	bd30      	pop	{r4, r5, pc}
 8007f92:	aa02      	add	r2, sp, #8
 8007f94:	f000 f930 	bl	80081f8 <__ieee754_rem_pio2>
 8007f98:	f000 0003 	and.w	r0, r0, #3
 8007f9c:	2801      	cmp	r0, #1
 8007f9e:	d009      	beq.n	8007fb4 <sin+0x50>
 8007fa0:	2802      	cmp	r0, #2
 8007fa2:	d00e      	beq.n	8007fc2 <sin+0x5e>
 8007fa4:	b9c0      	cbnz	r0, 8007fd8 <sin+0x74>
 8007fa6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007faa:	2301      	movs	r3, #1
 8007fac:	9300      	str	r3, [sp, #0]
 8007fae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fb2:	e7e2      	b.n	8007f7a <sin+0x16>
 8007fb4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fbc:	f000 fbb8 	bl	8008730 <__kernel_cos>
 8007fc0:	e7e5      	b.n	8007f8e <sin+0x2a>
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fc8:	9300      	str	r3, [sp, #0]
 8007fca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fce:	f000 ffb7 	bl	8008f40 <__kernel_sin>
 8007fd2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8007fd6:	e7da      	b.n	8007f8e <sin+0x2a>
 8007fd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fdc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fe0:	f000 fba6 	bl	8008730 <__kernel_cos>
 8007fe4:	e7f5      	b.n	8007fd2 <sin+0x6e>
 8007fe6:	bf00      	nop
 8007fe8:	3fe921fb 	.word	0x3fe921fb
 8007fec:	7fefffff 	.word	0x7fefffff

08007ff0 <atan2>:
 8007ff0:	f000 b82e 	b.w	8008050 <__ieee754_atan2>

08007ff4 <sqrt>:
 8007ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ff6:	4606      	mov	r6, r0
 8007ff8:	460f      	mov	r7, r1
 8007ffa:	f000 faed 	bl	80085d8 <__ieee754_sqrt>
 8007ffe:	4b12      	ldr	r3, [pc, #72]	; (8008048 <sqrt+0x54>)
 8008000:	4604      	mov	r4, r0
 8008002:	f993 3000 	ldrsb.w	r3, [r3]
 8008006:	460d      	mov	r5, r1
 8008008:	3301      	adds	r3, #1
 800800a:	d019      	beq.n	8008040 <sqrt+0x4c>
 800800c:	4632      	mov	r2, r6
 800800e:	463b      	mov	r3, r7
 8008010:	4630      	mov	r0, r6
 8008012:	4639      	mov	r1, r7
 8008014:	f7f8 fcfa 	bl	8000a0c <__aeabi_dcmpun>
 8008018:	b990      	cbnz	r0, 8008040 <sqrt+0x4c>
 800801a:	2200      	movs	r2, #0
 800801c:	2300      	movs	r3, #0
 800801e:	4630      	mov	r0, r6
 8008020:	4639      	mov	r1, r7
 8008022:	f7f8 fccb 	bl	80009bc <__aeabi_dcmplt>
 8008026:	b158      	cbz	r0, 8008040 <sqrt+0x4c>
 8008028:	f7fd f890 	bl	800514c <__errno>
 800802c:	2321      	movs	r3, #33	; 0x21
 800802e:	2200      	movs	r2, #0
 8008030:	6003      	str	r3, [r0, #0]
 8008032:	2300      	movs	r3, #0
 8008034:	4610      	mov	r0, r2
 8008036:	4619      	mov	r1, r3
 8008038:	f7f8 fb78 	bl	800072c <__aeabi_ddiv>
 800803c:	4604      	mov	r4, r0
 800803e:	460d      	mov	r5, r1
 8008040:	4620      	mov	r0, r4
 8008042:	4629      	mov	r1, r5
 8008044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008046:	bf00      	nop
 8008048:	20000278 	.word	0x20000278
 800804c:	00000000 	.word	0x00000000

08008050 <__ieee754_atan2>:
 8008050:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008054:	4692      	mov	sl, r2
 8008056:	4699      	mov	r9, r3
 8008058:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800805c:	461f      	mov	r7, r3
 800805e:	f1ca 0300 	rsb	r3, sl, #0
 8008062:	f8df e18c 	ldr.w	lr, [pc, #396]	; 80081f0 <__ieee754_atan2+0x1a0>
 8008066:	ea43 030a 	orr.w	r3, r3, sl
 800806a:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800806e:	4573      	cmp	r3, lr
 8008070:	4604      	mov	r4, r0
 8008072:	460d      	mov	r5, r1
 8008074:	d808      	bhi.n	8008088 <__ieee754_atan2+0x38>
 8008076:	4246      	negs	r6, r0
 8008078:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800807c:	4306      	orrs	r6, r0
 800807e:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8008082:	4576      	cmp	r6, lr
 8008084:	468c      	mov	ip, r1
 8008086:	d908      	bls.n	800809a <__ieee754_atan2+0x4a>
 8008088:	4652      	mov	r2, sl
 800808a:	464b      	mov	r3, r9
 800808c:	4620      	mov	r0, r4
 800808e:	4629      	mov	r1, r5
 8008090:	f7f8 f86c 	bl	800016c <__adddf3>
 8008094:	4604      	mov	r4, r0
 8008096:	460d      	mov	r5, r1
 8008098:	e019      	b.n	80080ce <__ieee754_atan2+0x7e>
 800809a:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 800809e:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 80080a2:	ea56 060a 	orrs.w	r6, r6, sl
 80080a6:	d103      	bne.n	80080b0 <__ieee754_atan2+0x60>
 80080a8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080ac:	f001 b800 	b.w	80090b0 <atan>
 80080b0:	17be      	asrs	r6, r7, #30
 80080b2:	f006 0602 	and.w	r6, r6, #2
 80080b6:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 80080ba:	ea53 0100 	orrs.w	r1, r3, r0
 80080be:	d10a      	bne.n	80080d6 <__ieee754_atan2+0x86>
 80080c0:	2e02      	cmp	r6, #2
 80080c2:	d067      	beq.n	8008194 <__ieee754_atan2+0x144>
 80080c4:	2e03      	cmp	r6, #3
 80080c6:	d102      	bne.n	80080ce <__ieee754_atan2+0x7e>
 80080c8:	a53b      	add	r5, pc, #236	; (adr r5, 80081b8 <__ieee754_atan2+0x168>)
 80080ca:	e9d5 4500 	ldrd	r4, r5, [r5]
 80080ce:	4620      	mov	r0, r4
 80080d0:	4629      	mov	r1, r5
 80080d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080d6:	ea52 010a 	orrs.w	r1, r2, sl
 80080da:	d106      	bne.n	80080ea <__ieee754_atan2+0x9a>
 80080dc:	f1bc 0f00 	cmp.w	ip, #0
 80080e0:	da63      	bge.n	80081aa <__ieee754_atan2+0x15a>
 80080e2:	a537      	add	r5, pc, #220	; (adr r5, 80081c0 <__ieee754_atan2+0x170>)
 80080e4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80080e8:	e7f1      	b.n	80080ce <__ieee754_atan2+0x7e>
 80080ea:	4572      	cmp	r2, lr
 80080ec:	d10f      	bne.n	800810e <__ieee754_atan2+0xbe>
 80080ee:	4293      	cmp	r3, r2
 80080f0:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 80080f4:	d107      	bne.n	8008106 <__ieee754_atan2+0xb6>
 80080f6:	2e02      	cmp	r6, #2
 80080f8:	d850      	bhi.n	800819c <__ieee754_atan2+0x14c>
 80080fa:	4b3b      	ldr	r3, [pc, #236]	; (80081e8 <__ieee754_atan2+0x198>)
 80080fc:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008100:	e9d6 4500 	ldrd	r4, r5, [r6]
 8008104:	e7e3      	b.n	80080ce <__ieee754_atan2+0x7e>
 8008106:	2e02      	cmp	r6, #2
 8008108:	d84c      	bhi.n	80081a4 <__ieee754_atan2+0x154>
 800810a:	4b38      	ldr	r3, [pc, #224]	; (80081ec <__ieee754_atan2+0x19c>)
 800810c:	e7f6      	b.n	80080fc <__ieee754_atan2+0xac>
 800810e:	4573      	cmp	r3, lr
 8008110:	d0e4      	beq.n	80080dc <__ieee754_atan2+0x8c>
 8008112:	1a9b      	subs	r3, r3, r2
 8008114:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8008118:	ea4f 5223 	mov.w	r2, r3, asr #20
 800811c:	da20      	bge.n	8008160 <__ieee754_atan2+0x110>
 800811e:	2f00      	cmp	r7, #0
 8008120:	da01      	bge.n	8008126 <__ieee754_atan2+0xd6>
 8008122:	323c      	adds	r2, #60	; 0x3c
 8008124:	db20      	blt.n	8008168 <__ieee754_atan2+0x118>
 8008126:	4652      	mov	r2, sl
 8008128:	464b      	mov	r3, r9
 800812a:	4620      	mov	r0, r4
 800812c:	4629      	mov	r1, r5
 800812e:	f7f8 fafd 	bl	800072c <__aeabi_ddiv>
 8008132:	f001 f947 	bl	80093c4 <fabs>
 8008136:	f000 ffbb 	bl	80090b0 <atan>
 800813a:	4604      	mov	r4, r0
 800813c:	460d      	mov	r5, r1
 800813e:	2e01      	cmp	r6, #1
 8008140:	d015      	beq.n	800816e <__ieee754_atan2+0x11e>
 8008142:	2e02      	cmp	r6, #2
 8008144:	d017      	beq.n	8008176 <__ieee754_atan2+0x126>
 8008146:	2e00      	cmp	r6, #0
 8008148:	d0c1      	beq.n	80080ce <__ieee754_atan2+0x7e>
 800814a:	a31f      	add	r3, pc, #124	; (adr r3, 80081c8 <__ieee754_atan2+0x178>)
 800814c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008150:	4620      	mov	r0, r4
 8008152:	4629      	mov	r1, r5
 8008154:	f7f8 f808 	bl	8000168 <__aeabi_dsub>
 8008158:	a31d      	add	r3, pc, #116	; (adr r3, 80081d0 <__ieee754_atan2+0x180>)
 800815a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800815e:	e016      	b.n	800818e <__ieee754_atan2+0x13e>
 8008160:	a51d      	add	r5, pc, #116	; (adr r5, 80081d8 <__ieee754_atan2+0x188>)
 8008162:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008166:	e7ea      	b.n	800813e <__ieee754_atan2+0xee>
 8008168:	2400      	movs	r4, #0
 800816a:	2500      	movs	r5, #0
 800816c:	e7e7      	b.n	800813e <__ieee754_atan2+0xee>
 800816e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008172:	461d      	mov	r5, r3
 8008174:	e7ab      	b.n	80080ce <__ieee754_atan2+0x7e>
 8008176:	a314      	add	r3, pc, #80	; (adr r3, 80081c8 <__ieee754_atan2+0x178>)
 8008178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800817c:	4620      	mov	r0, r4
 800817e:	4629      	mov	r1, r5
 8008180:	f7f7 fff2 	bl	8000168 <__aeabi_dsub>
 8008184:	4602      	mov	r2, r0
 8008186:	460b      	mov	r3, r1
 8008188:	a111      	add	r1, pc, #68	; (adr r1, 80081d0 <__ieee754_atan2+0x180>)
 800818a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800818e:	f7f7 ffeb 	bl	8000168 <__aeabi_dsub>
 8008192:	e77f      	b.n	8008094 <__ieee754_atan2+0x44>
 8008194:	a50e      	add	r5, pc, #56	; (adr r5, 80081d0 <__ieee754_atan2+0x180>)
 8008196:	e9d5 4500 	ldrd	r4, r5, [r5]
 800819a:	e798      	b.n	80080ce <__ieee754_atan2+0x7e>
 800819c:	a510      	add	r5, pc, #64	; (adr r5, 80081e0 <__ieee754_atan2+0x190>)
 800819e:	e9d5 4500 	ldrd	r4, r5, [r5]
 80081a2:	e794      	b.n	80080ce <__ieee754_atan2+0x7e>
 80081a4:	2400      	movs	r4, #0
 80081a6:	2500      	movs	r5, #0
 80081a8:	e791      	b.n	80080ce <__ieee754_atan2+0x7e>
 80081aa:	a50b      	add	r5, pc, #44	; (adr r5, 80081d8 <__ieee754_atan2+0x188>)
 80081ac:	e9d5 4500 	ldrd	r4, r5, [r5]
 80081b0:	e78d      	b.n	80080ce <__ieee754_atan2+0x7e>
 80081b2:	bf00      	nop
 80081b4:	f3af 8000 	nop.w
 80081b8:	54442d18 	.word	0x54442d18
 80081bc:	c00921fb 	.word	0xc00921fb
 80081c0:	54442d18 	.word	0x54442d18
 80081c4:	bff921fb 	.word	0xbff921fb
 80081c8:	33145c07 	.word	0x33145c07
 80081cc:	3ca1a626 	.word	0x3ca1a626
 80081d0:	54442d18 	.word	0x54442d18
 80081d4:	400921fb 	.word	0x400921fb
 80081d8:	54442d18 	.word	0x54442d18
 80081dc:	3ff921fb 	.word	0x3ff921fb
 80081e0:	54442d18 	.word	0x54442d18
 80081e4:	3fe921fb 	.word	0x3fe921fb
 80081e8:	0800bb20 	.word	0x0800bb20
 80081ec:	0800bb38 	.word	0x0800bb38
 80081f0:	7ff00000 	.word	0x7ff00000
 80081f4:	00000000 	.word	0x00000000

080081f8 <__ieee754_rem_pio2>:
 80081f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081fc:	4614      	mov	r4, r2
 80081fe:	4ac4      	ldr	r2, [pc, #784]	; (8008510 <__ieee754_rem_pio2+0x318>)
 8008200:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8008204:	b08d      	sub	sp, #52	; 0x34
 8008206:	4592      	cmp	sl, r2
 8008208:	9104      	str	r1, [sp, #16]
 800820a:	dc07      	bgt.n	800821c <__ieee754_rem_pio2+0x24>
 800820c:	2200      	movs	r2, #0
 800820e:	2300      	movs	r3, #0
 8008210:	e9c4 0100 	strd	r0, r1, [r4]
 8008214:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8008218:	2500      	movs	r5, #0
 800821a:	e024      	b.n	8008266 <__ieee754_rem_pio2+0x6e>
 800821c:	4abd      	ldr	r2, [pc, #756]	; (8008514 <__ieee754_rem_pio2+0x31c>)
 800821e:	4592      	cmp	sl, r2
 8008220:	dc72      	bgt.n	8008308 <__ieee754_rem_pio2+0x110>
 8008222:	9b04      	ldr	r3, [sp, #16]
 8008224:	4dbc      	ldr	r5, [pc, #752]	; (8008518 <__ieee754_rem_pio2+0x320>)
 8008226:	2b00      	cmp	r3, #0
 8008228:	a3ab      	add	r3, pc, #684	; (adr r3, 80084d8 <__ieee754_rem_pio2+0x2e0>)
 800822a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800822e:	dd36      	ble.n	800829e <__ieee754_rem_pio2+0xa6>
 8008230:	f7f7 ff9a 	bl	8000168 <__aeabi_dsub>
 8008234:	45aa      	cmp	sl, r5
 8008236:	4606      	mov	r6, r0
 8008238:	460f      	mov	r7, r1
 800823a:	d018      	beq.n	800826e <__ieee754_rem_pio2+0x76>
 800823c:	a3a8      	add	r3, pc, #672	; (adr r3, 80084e0 <__ieee754_rem_pio2+0x2e8>)
 800823e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008242:	f7f7 ff91 	bl	8000168 <__aeabi_dsub>
 8008246:	4602      	mov	r2, r0
 8008248:	460b      	mov	r3, r1
 800824a:	4630      	mov	r0, r6
 800824c:	e9c4 2300 	strd	r2, r3, [r4]
 8008250:	4639      	mov	r1, r7
 8008252:	f7f7 ff89 	bl	8000168 <__aeabi_dsub>
 8008256:	a3a2      	add	r3, pc, #648	; (adr r3, 80084e0 <__ieee754_rem_pio2+0x2e8>)
 8008258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800825c:	f7f7 ff84 	bl	8000168 <__aeabi_dsub>
 8008260:	2501      	movs	r5, #1
 8008262:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008266:	4628      	mov	r0, r5
 8008268:	b00d      	add	sp, #52	; 0x34
 800826a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800826e:	a39e      	add	r3, pc, #632	; (adr r3, 80084e8 <__ieee754_rem_pio2+0x2f0>)
 8008270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008274:	f7f7 ff78 	bl	8000168 <__aeabi_dsub>
 8008278:	a39d      	add	r3, pc, #628	; (adr r3, 80084f0 <__ieee754_rem_pio2+0x2f8>)
 800827a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800827e:	4606      	mov	r6, r0
 8008280:	460f      	mov	r7, r1
 8008282:	f7f7 ff71 	bl	8000168 <__aeabi_dsub>
 8008286:	4602      	mov	r2, r0
 8008288:	460b      	mov	r3, r1
 800828a:	4630      	mov	r0, r6
 800828c:	e9c4 2300 	strd	r2, r3, [r4]
 8008290:	4639      	mov	r1, r7
 8008292:	f7f7 ff69 	bl	8000168 <__aeabi_dsub>
 8008296:	a396      	add	r3, pc, #600	; (adr r3, 80084f0 <__ieee754_rem_pio2+0x2f8>)
 8008298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800829c:	e7de      	b.n	800825c <__ieee754_rem_pio2+0x64>
 800829e:	f7f7 ff65 	bl	800016c <__adddf3>
 80082a2:	45aa      	cmp	sl, r5
 80082a4:	4606      	mov	r6, r0
 80082a6:	460f      	mov	r7, r1
 80082a8:	d016      	beq.n	80082d8 <__ieee754_rem_pio2+0xe0>
 80082aa:	a38d      	add	r3, pc, #564	; (adr r3, 80084e0 <__ieee754_rem_pio2+0x2e8>)
 80082ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b0:	f7f7 ff5c 	bl	800016c <__adddf3>
 80082b4:	4602      	mov	r2, r0
 80082b6:	460b      	mov	r3, r1
 80082b8:	4630      	mov	r0, r6
 80082ba:	e9c4 2300 	strd	r2, r3, [r4]
 80082be:	4639      	mov	r1, r7
 80082c0:	f7f7 ff52 	bl	8000168 <__aeabi_dsub>
 80082c4:	a386      	add	r3, pc, #536	; (adr r3, 80084e0 <__ieee754_rem_pio2+0x2e8>)
 80082c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ca:	f7f7 ff4f 	bl	800016c <__adddf3>
 80082ce:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80082d2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80082d6:	e7c6      	b.n	8008266 <__ieee754_rem_pio2+0x6e>
 80082d8:	a383      	add	r3, pc, #524	; (adr r3, 80084e8 <__ieee754_rem_pio2+0x2f0>)
 80082da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082de:	f7f7 ff45 	bl	800016c <__adddf3>
 80082e2:	a383      	add	r3, pc, #524	; (adr r3, 80084f0 <__ieee754_rem_pio2+0x2f8>)
 80082e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e8:	4606      	mov	r6, r0
 80082ea:	460f      	mov	r7, r1
 80082ec:	f7f7 ff3e 	bl	800016c <__adddf3>
 80082f0:	4602      	mov	r2, r0
 80082f2:	460b      	mov	r3, r1
 80082f4:	4630      	mov	r0, r6
 80082f6:	e9c4 2300 	strd	r2, r3, [r4]
 80082fa:	4639      	mov	r1, r7
 80082fc:	f7f7 ff34 	bl	8000168 <__aeabi_dsub>
 8008300:	a37b      	add	r3, pc, #492	; (adr r3, 80084f0 <__ieee754_rem_pio2+0x2f8>)
 8008302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008306:	e7e0      	b.n	80082ca <__ieee754_rem_pio2+0xd2>
 8008308:	4a84      	ldr	r2, [pc, #528]	; (800851c <__ieee754_rem_pio2+0x324>)
 800830a:	4592      	cmp	sl, r2
 800830c:	f300 80d5 	bgt.w	80084ba <__ieee754_rem_pio2+0x2c2>
 8008310:	f001 f858 	bl	80093c4 <fabs>
 8008314:	a378      	add	r3, pc, #480	; (adr r3, 80084f8 <__ieee754_rem_pio2+0x300>)
 8008316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800831a:	4606      	mov	r6, r0
 800831c:	460f      	mov	r7, r1
 800831e:	f7f8 f8db 	bl	80004d8 <__aeabi_dmul>
 8008322:	2200      	movs	r2, #0
 8008324:	4b7e      	ldr	r3, [pc, #504]	; (8008520 <__ieee754_rem_pio2+0x328>)
 8008326:	f7f7 ff21 	bl	800016c <__adddf3>
 800832a:	f7f8 fb85 	bl	8000a38 <__aeabi_d2iz>
 800832e:	4605      	mov	r5, r0
 8008330:	f7f8 f868 	bl	8000404 <__aeabi_i2d>
 8008334:	4602      	mov	r2, r0
 8008336:	460b      	mov	r3, r1
 8008338:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800833c:	a366      	add	r3, pc, #408	; (adr r3, 80084d8 <__ieee754_rem_pio2+0x2e0>)
 800833e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008342:	f7f8 f8c9 	bl	80004d8 <__aeabi_dmul>
 8008346:	4602      	mov	r2, r0
 8008348:	460b      	mov	r3, r1
 800834a:	4630      	mov	r0, r6
 800834c:	4639      	mov	r1, r7
 800834e:	f7f7 ff0b 	bl	8000168 <__aeabi_dsub>
 8008352:	a363      	add	r3, pc, #396	; (adr r3, 80084e0 <__ieee754_rem_pio2+0x2e8>)
 8008354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008358:	4680      	mov	r8, r0
 800835a:	4689      	mov	r9, r1
 800835c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008360:	f7f8 f8ba 	bl	80004d8 <__aeabi_dmul>
 8008364:	2d1f      	cmp	r5, #31
 8008366:	4606      	mov	r6, r0
 8008368:	460f      	mov	r7, r1
 800836a:	dc0e      	bgt.n	800838a <__ieee754_rem_pio2+0x192>
 800836c:	4b6d      	ldr	r3, [pc, #436]	; (8008524 <__ieee754_rem_pio2+0x32c>)
 800836e:	1e6a      	subs	r2, r5, #1
 8008370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008374:	4553      	cmp	r3, sl
 8008376:	d008      	beq.n	800838a <__ieee754_rem_pio2+0x192>
 8008378:	4632      	mov	r2, r6
 800837a:	463b      	mov	r3, r7
 800837c:	4640      	mov	r0, r8
 800837e:	4649      	mov	r1, r9
 8008380:	f7f7 fef2 	bl	8000168 <__aeabi_dsub>
 8008384:	e9c4 0100 	strd	r0, r1, [r4]
 8008388:	e013      	b.n	80083b2 <__ieee754_rem_pio2+0x1ba>
 800838a:	463b      	mov	r3, r7
 800838c:	4632      	mov	r2, r6
 800838e:	4640      	mov	r0, r8
 8008390:	4649      	mov	r1, r9
 8008392:	f7f7 fee9 	bl	8000168 <__aeabi_dsub>
 8008396:	ea4f 532a 	mov.w	r3, sl, asr #20
 800839a:	9305      	str	r3, [sp, #20]
 800839c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80083a0:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 80083a4:	f1ba 0f10 	cmp.w	sl, #16
 80083a8:	dc1f      	bgt.n	80083ea <__ieee754_rem_pio2+0x1f2>
 80083aa:	4602      	mov	r2, r0
 80083ac:	460b      	mov	r3, r1
 80083ae:	e9c4 2300 	strd	r2, r3, [r4]
 80083b2:	e9d4 2a00 	ldrd	r2, sl, [r4]
 80083b6:	4640      	mov	r0, r8
 80083b8:	4653      	mov	r3, sl
 80083ba:	4649      	mov	r1, r9
 80083bc:	f7f7 fed4 	bl	8000168 <__aeabi_dsub>
 80083c0:	4632      	mov	r2, r6
 80083c2:	463b      	mov	r3, r7
 80083c4:	f7f7 fed0 	bl	8000168 <__aeabi_dsub>
 80083c8:	460b      	mov	r3, r1
 80083ca:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80083ce:	9904      	ldr	r1, [sp, #16]
 80083d0:	4602      	mov	r2, r0
 80083d2:	2900      	cmp	r1, #0
 80083d4:	f6bf af47 	bge.w	8008266 <__ieee754_rem_pio2+0x6e>
 80083d8:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 80083dc:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80083e0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80083e4:	60e3      	str	r3, [r4, #12]
 80083e6:	426d      	negs	r5, r5
 80083e8:	e73d      	b.n	8008266 <__ieee754_rem_pio2+0x6e>
 80083ea:	a33f      	add	r3, pc, #252	; (adr r3, 80084e8 <__ieee754_rem_pio2+0x2f0>)
 80083ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083f4:	f7f8 f870 	bl	80004d8 <__aeabi_dmul>
 80083f8:	4606      	mov	r6, r0
 80083fa:	460f      	mov	r7, r1
 80083fc:	4602      	mov	r2, r0
 80083fe:	460b      	mov	r3, r1
 8008400:	4640      	mov	r0, r8
 8008402:	4649      	mov	r1, r9
 8008404:	f7f7 feb0 	bl	8000168 <__aeabi_dsub>
 8008408:	4602      	mov	r2, r0
 800840a:	460b      	mov	r3, r1
 800840c:	4682      	mov	sl, r0
 800840e:	468b      	mov	fp, r1
 8008410:	4640      	mov	r0, r8
 8008412:	4649      	mov	r1, r9
 8008414:	f7f7 fea8 	bl	8000168 <__aeabi_dsub>
 8008418:	4632      	mov	r2, r6
 800841a:	463b      	mov	r3, r7
 800841c:	f7f7 fea4 	bl	8000168 <__aeabi_dsub>
 8008420:	a333      	add	r3, pc, #204	; (adr r3, 80084f0 <__ieee754_rem_pio2+0x2f8>)
 8008422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008426:	4606      	mov	r6, r0
 8008428:	460f      	mov	r7, r1
 800842a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800842e:	f7f8 f853 	bl	80004d8 <__aeabi_dmul>
 8008432:	4632      	mov	r2, r6
 8008434:	463b      	mov	r3, r7
 8008436:	f7f7 fe97 	bl	8000168 <__aeabi_dsub>
 800843a:	4602      	mov	r2, r0
 800843c:	460b      	mov	r3, r1
 800843e:	4606      	mov	r6, r0
 8008440:	460f      	mov	r7, r1
 8008442:	4650      	mov	r0, sl
 8008444:	4659      	mov	r1, fp
 8008446:	f7f7 fe8f 	bl	8000168 <__aeabi_dsub>
 800844a:	9a05      	ldr	r2, [sp, #20]
 800844c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008450:	1ad3      	subs	r3, r2, r3
 8008452:	2b31      	cmp	r3, #49	; 0x31
 8008454:	dc06      	bgt.n	8008464 <__ieee754_rem_pio2+0x26c>
 8008456:	4602      	mov	r2, r0
 8008458:	460b      	mov	r3, r1
 800845a:	46d0      	mov	r8, sl
 800845c:	46d9      	mov	r9, fp
 800845e:	e9c4 2300 	strd	r2, r3, [r4]
 8008462:	e7a6      	b.n	80083b2 <__ieee754_rem_pio2+0x1ba>
 8008464:	a326      	add	r3, pc, #152	; (adr r3, 8008500 <__ieee754_rem_pio2+0x308>)
 8008466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800846a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800846e:	f7f8 f833 	bl	80004d8 <__aeabi_dmul>
 8008472:	4606      	mov	r6, r0
 8008474:	460f      	mov	r7, r1
 8008476:	4602      	mov	r2, r0
 8008478:	460b      	mov	r3, r1
 800847a:	4650      	mov	r0, sl
 800847c:	4659      	mov	r1, fp
 800847e:	f7f7 fe73 	bl	8000168 <__aeabi_dsub>
 8008482:	4602      	mov	r2, r0
 8008484:	460b      	mov	r3, r1
 8008486:	4680      	mov	r8, r0
 8008488:	4689      	mov	r9, r1
 800848a:	4650      	mov	r0, sl
 800848c:	4659      	mov	r1, fp
 800848e:	f7f7 fe6b 	bl	8000168 <__aeabi_dsub>
 8008492:	4632      	mov	r2, r6
 8008494:	463b      	mov	r3, r7
 8008496:	f7f7 fe67 	bl	8000168 <__aeabi_dsub>
 800849a:	a31b      	add	r3, pc, #108	; (adr r3, 8008508 <__ieee754_rem_pio2+0x310>)
 800849c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a0:	4606      	mov	r6, r0
 80084a2:	460f      	mov	r7, r1
 80084a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084a8:	f7f8 f816 	bl	80004d8 <__aeabi_dmul>
 80084ac:	4632      	mov	r2, r6
 80084ae:	463b      	mov	r3, r7
 80084b0:	f7f7 fe5a 	bl	8000168 <__aeabi_dsub>
 80084b4:	4606      	mov	r6, r0
 80084b6:	460f      	mov	r7, r1
 80084b8:	e75e      	b.n	8008378 <__ieee754_rem_pio2+0x180>
 80084ba:	4a1b      	ldr	r2, [pc, #108]	; (8008528 <__ieee754_rem_pio2+0x330>)
 80084bc:	4592      	cmp	sl, r2
 80084be:	dd35      	ble.n	800852c <__ieee754_rem_pio2+0x334>
 80084c0:	4602      	mov	r2, r0
 80084c2:	460b      	mov	r3, r1
 80084c4:	f7f7 fe50 	bl	8000168 <__aeabi_dsub>
 80084c8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80084cc:	e9c4 0100 	strd	r0, r1, [r4]
 80084d0:	e6a2      	b.n	8008218 <__ieee754_rem_pio2+0x20>
 80084d2:	bf00      	nop
 80084d4:	f3af 8000 	nop.w
 80084d8:	54400000 	.word	0x54400000
 80084dc:	3ff921fb 	.word	0x3ff921fb
 80084e0:	1a626331 	.word	0x1a626331
 80084e4:	3dd0b461 	.word	0x3dd0b461
 80084e8:	1a600000 	.word	0x1a600000
 80084ec:	3dd0b461 	.word	0x3dd0b461
 80084f0:	2e037073 	.word	0x2e037073
 80084f4:	3ba3198a 	.word	0x3ba3198a
 80084f8:	6dc9c883 	.word	0x6dc9c883
 80084fc:	3fe45f30 	.word	0x3fe45f30
 8008500:	2e000000 	.word	0x2e000000
 8008504:	3ba3198a 	.word	0x3ba3198a
 8008508:	252049c1 	.word	0x252049c1
 800850c:	397b839a 	.word	0x397b839a
 8008510:	3fe921fb 	.word	0x3fe921fb
 8008514:	4002d97b 	.word	0x4002d97b
 8008518:	3ff921fb 	.word	0x3ff921fb
 800851c:	413921fb 	.word	0x413921fb
 8008520:	3fe00000 	.word	0x3fe00000
 8008524:	0800bb50 	.word	0x0800bb50
 8008528:	7fefffff 	.word	0x7fefffff
 800852c:	ea4f 552a 	mov.w	r5, sl, asr #20
 8008530:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8008534:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8008538:	460f      	mov	r7, r1
 800853a:	4606      	mov	r6, r0
 800853c:	f7f8 fa7c 	bl	8000a38 <__aeabi_d2iz>
 8008540:	f7f7 ff60 	bl	8000404 <__aeabi_i2d>
 8008544:	4602      	mov	r2, r0
 8008546:	460b      	mov	r3, r1
 8008548:	4630      	mov	r0, r6
 800854a:	4639      	mov	r1, r7
 800854c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008550:	f7f7 fe0a 	bl	8000168 <__aeabi_dsub>
 8008554:	2200      	movs	r2, #0
 8008556:	4b1e      	ldr	r3, [pc, #120]	; (80085d0 <__ieee754_rem_pio2+0x3d8>)
 8008558:	f7f7 ffbe 	bl	80004d8 <__aeabi_dmul>
 800855c:	460f      	mov	r7, r1
 800855e:	4606      	mov	r6, r0
 8008560:	f7f8 fa6a 	bl	8000a38 <__aeabi_d2iz>
 8008564:	f7f7 ff4e 	bl	8000404 <__aeabi_i2d>
 8008568:	4602      	mov	r2, r0
 800856a:	460b      	mov	r3, r1
 800856c:	4630      	mov	r0, r6
 800856e:	4639      	mov	r1, r7
 8008570:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008574:	f7f7 fdf8 	bl	8000168 <__aeabi_dsub>
 8008578:	2200      	movs	r2, #0
 800857a:	4b15      	ldr	r3, [pc, #84]	; (80085d0 <__ieee754_rem_pio2+0x3d8>)
 800857c:	f7f7 ffac 	bl	80004d8 <__aeabi_dmul>
 8008580:	f04f 0803 	mov.w	r8, #3
 8008584:	2600      	movs	r6, #0
 8008586:	2700      	movs	r7, #0
 8008588:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800858c:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8008590:	4632      	mov	r2, r6
 8008592:	e879 0102 	ldrd	r0, r1, [r9], #-8
 8008596:	463b      	mov	r3, r7
 8008598:	46c2      	mov	sl, r8
 800859a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800859e:	f7f8 fa03 	bl	80009a8 <__aeabi_dcmpeq>
 80085a2:	2800      	cmp	r0, #0
 80085a4:	d1f4      	bne.n	8008590 <__ieee754_rem_pio2+0x398>
 80085a6:	4b0b      	ldr	r3, [pc, #44]	; (80085d4 <__ieee754_rem_pio2+0x3dc>)
 80085a8:	462a      	mov	r2, r5
 80085aa:	9301      	str	r3, [sp, #4]
 80085ac:	2302      	movs	r3, #2
 80085ae:	4621      	mov	r1, r4
 80085b0:	9300      	str	r3, [sp, #0]
 80085b2:	a806      	add	r0, sp, #24
 80085b4:	4653      	mov	r3, sl
 80085b6:	f000 f979 	bl	80088ac <__kernel_rem_pio2>
 80085ba:	9b04      	ldr	r3, [sp, #16]
 80085bc:	4605      	mov	r5, r0
 80085be:	2b00      	cmp	r3, #0
 80085c0:	f6bf ae51 	bge.w	8008266 <__ieee754_rem_pio2+0x6e>
 80085c4:	6863      	ldr	r3, [r4, #4]
 80085c6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80085ca:	6063      	str	r3, [r4, #4]
 80085cc:	68e3      	ldr	r3, [r4, #12]
 80085ce:	e707      	b.n	80083e0 <__ieee754_rem_pio2+0x1e8>
 80085d0:	41700000 	.word	0x41700000
 80085d4:	0800bbd0 	.word	0x0800bbd0

080085d8 <__ieee754_sqrt>:
 80085d8:	f8df c150 	ldr.w	ip, [pc, #336]	; 800872c <__ieee754_sqrt+0x154>
 80085dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085e0:	ea3c 0c01 	bics.w	ip, ip, r1
 80085e4:	460b      	mov	r3, r1
 80085e6:	4606      	mov	r6, r0
 80085e8:	460d      	mov	r5, r1
 80085ea:	460a      	mov	r2, r1
 80085ec:	4607      	mov	r7, r0
 80085ee:	4604      	mov	r4, r0
 80085f0:	d10e      	bne.n	8008610 <__ieee754_sqrt+0x38>
 80085f2:	4602      	mov	r2, r0
 80085f4:	f7f7 ff70 	bl	80004d8 <__aeabi_dmul>
 80085f8:	4602      	mov	r2, r0
 80085fa:	460b      	mov	r3, r1
 80085fc:	4630      	mov	r0, r6
 80085fe:	4629      	mov	r1, r5
 8008600:	f7f7 fdb4 	bl	800016c <__adddf3>
 8008604:	4606      	mov	r6, r0
 8008606:	460d      	mov	r5, r1
 8008608:	4630      	mov	r0, r6
 800860a:	4629      	mov	r1, r5
 800860c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008610:	2900      	cmp	r1, #0
 8008612:	dc0d      	bgt.n	8008630 <__ieee754_sqrt+0x58>
 8008614:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8008618:	ea5c 0707 	orrs.w	r7, ip, r7
 800861c:	d0f4      	beq.n	8008608 <__ieee754_sqrt+0x30>
 800861e:	b139      	cbz	r1, 8008630 <__ieee754_sqrt+0x58>
 8008620:	4602      	mov	r2, r0
 8008622:	f7f7 fda1 	bl	8000168 <__aeabi_dsub>
 8008626:	4602      	mov	r2, r0
 8008628:	460b      	mov	r3, r1
 800862a:	f7f8 f87f 	bl	800072c <__aeabi_ddiv>
 800862e:	e7e9      	b.n	8008604 <__ieee754_sqrt+0x2c>
 8008630:	1512      	asrs	r2, r2, #20
 8008632:	d074      	beq.n	800871e <__ieee754_sqrt+0x146>
 8008634:	2000      	movs	r0, #0
 8008636:	07d5      	lsls	r5, r2, #31
 8008638:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800863c:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 8008640:	bf5e      	ittt	pl
 8008642:	0fe3      	lsrpl	r3, r4, #31
 8008644:	0064      	lslpl	r4, r4, #1
 8008646:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800864a:	0fe3      	lsrs	r3, r4, #31
 800864c:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8008650:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8008654:	2516      	movs	r5, #22
 8008656:	4601      	mov	r1, r0
 8008658:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800865c:	1076      	asrs	r6, r6, #1
 800865e:	0064      	lsls	r4, r4, #1
 8008660:	188f      	adds	r7, r1, r2
 8008662:	429f      	cmp	r7, r3
 8008664:	bfde      	ittt	le
 8008666:	1bdb      	suble	r3, r3, r7
 8008668:	18b9      	addle	r1, r7, r2
 800866a:	1880      	addle	r0, r0, r2
 800866c:	005b      	lsls	r3, r3, #1
 800866e:	3d01      	subs	r5, #1
 8008670:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8008674:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8008678:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800867c:	d1f0      	bne.n	8008660 <__ieee754_sqrt+0x88>
 800867e:	462a      	mov	r2, r5
 8008680:	f04f 0e20 	mov.w	lr, #32
 8008684:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8008688:	428b      	cmp	r3, r1
 800868a:	eb07 0c05 	add.w	ip, r7, r5
 800868e:	dc02      	bgt.n	8008696 <__ieee754_sqrt+0xbe>
 8008690:	d113      	bne.n	80086ba <__ieee754_sqrt+0xe2>
 8008692:	45a4      	cmp	ip, r4
 8008694:	d811      	bhi.n	80086ba <__ieee754_sqrt+0xe2>
 8008696:	f1bc 0f00 	cmp.w	ip, #0
 800869a:	eb0c 0507 	add.w	r5, ip, r7
 800869e:	da43      	bge.n	8008728 <__ieee754_sqrt+0x150>
 80086a0:	2d00      	cmp	r5, #0
 80086a2:	db41      	blt.n	8008728 <__ieee754_sqrt+0x150>
 80086a4:	f101 0801 	add.w	r8, r1, #1
 80086a8:	1a5b      	subs	r3, r3, r1
 80086aa:	4641      	mov	r1, r8
 80086ac:	45a4      	cmp	ip, r4
 80086ae:	bf88      	it	hi
 80086b0:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 80086b4:	eba4 040c 	sub.w	r4, r4, ip
 80086b8:	443a      	add	r2, r7
 80086ba:	005b      	lsls	r3, r3, #1
 80086bc:	f1be 0e01 	subs.w	lr, lr, #1
 80086c0:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80086c4:	ea4f 0757 	mov.w	r7, r7, lsr #1
 80086c8:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80086cc:	d1dc      	bne.n	8008688 <__ieee754_sqrt+0xb0>
 80086ce:	4323      	orrs	r3, r4
 80086d0:	d006      	beq.n	80086e0 <__ieee754_sqrt+0x108>
 80086d2:	1c54      	adds	r4, r2, #1
 80086d4:	bf0b      	itete	eq
 80086d6:	4672      	moveq	r2, lr
 80086d8:	3201      	addne	r2, #1
 80086da:	3001      	addeq	r0, #1
 80086dc:	f022 0201 	bicne.w	r2, r2, #1
 80086e0:	1043      	asrs	r3, r0, #1
 80086e2:	07c1      	lsls	r1, r0, #31
 80086e4:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80086e8:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80086ec:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80086f0:	bf48      	it	mi
 80086f2:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80086f6:	4610      	mov	r0, r2
 80086f8:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 80086fc:	e782      	b.n	8008604 <__ieee754_sqrt+0x2c>
 80086fe:	0ae3      	lsrs	r3, r4, #11
 8008700:	3915      	subs	r1, #21
 8008702:	0564      	lsls	r4, r4, #21
 8008704:	2b00      	cmp	r3, #0
 8008706:	d0fa      	beq.n	80086fe <__ieee754_sqrt+0x126>
 8008708:	02de      	lsls	r6, r3, #11
 800870a:	d50a      	bpl.n	8008722 <__ieee754_sqrt+0x14a>
 800870c:	f1c2 0020 	rsb	r0, r2, #32
 8008710:	fa24 f000 	lsr.w	r0, r4, r0
 8008714:	1e55      	subs	r5, r2, #1
 8008716:	4094      	lsls	r4, r2
 8008718:	4303      	orrs	r3, r0
 800871a:	1b4a      	subs	r2, r1, r5
 800871c:	e78a      	b.n	8008634 <__ieee754_sqrt+0x5c>
 800871e:	4611      	mov	r1, r2
 8008720:	e7f0      	b.n	8008704 <__ieee754_sqrt+0x12c>
 8008722:	005b      	lsls	r3, r3, #1
 8008724:	3201      	adds	r2, #1
 8008726:	e7ef      	b.n	8008708 <__ieee754_sqrt+0x130>
 8008728:	4688      	mov	r8, r1
 800872a:	e7bd      	b.n	80086a8 <__ieee754_sqrt+0xd0>
 800872c:	7ff00000 	.word	0x7ff00000

08008730 <__kernel_cos>:
 8008730:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008734:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008738:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800873c:	4680      	mov	r8, r0
 800873e:	460f      	mov	r7, r1
 8008740:	e9cd 2300 	strd	r2, r3, [sp]
 8008744:	da04      	bge.n	8008750 <__kernel_cos+0x20>
 8008746:	f7f8 f977 	bl	8000a38 <__aeabi_d2iz>
 800874a:	2800      	cmp	r0, #0
 800874c:	f000 8086 	beq.w	800885c <__kernel_cos+0x12c>
 8008750:	4642      	mov	r2, r8
 8008752:	463b      	mov	r3, r7
 8008754:	4640      	mov	r0, r8
 8008756:	4639      	mov	r1, r7
 8008758:	f7f7 febe 	bl	80004d8 <__aeabi_dmul>
 800875c:	2200      	movs	r2, #0
 800875e:	4b4e      	ldr	r3, [pc, #312]	; (8008898 <__kernel_cos+0x168>)
 8008760:	4604      	mov	r4, r0
 8008762:	460d      	mov	r5, r1
 8008764:	f7f7 feb8 	bl	80004d8 <__aeabi_dmul>
 8008768:	a33f      	add	r3, pc, #252	; (adr r3, 8008868 <__kernel_cos+0x138>)
 800876a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800876e:	4682      	mov	sl, r0
 8008770:	468b      	mov	fp, r1
 8008772:	4620      	mov	r0, r4
 8008774:	4629      	mov	r1, r5
 8008776:	f7f7 feaf 	bl	80004d8 <__aeabi_dmul>
 800877a:	a33d      	add	r3, pc, #244	; (adr r3, 8008870 <__kernel_cos+0x140>)
 800877c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008780:	f7f7 fcf4 	bl	800016c <__adddf3>
 8008784:	4622      	mov	r2, r4
 8008786:	462b      	mov	r3, r5
 8008788:	f7f7 fea6 	bl	80004d8 <__aeabi_dmul>
 800878c:	a33a      	add	r3, pc, #232	; (adr r3, 8008878 <__kernel_cos+0x148>)
 800878e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008792:	f7f7 fce9 	bl	8000168 <__aeabi_dsub>
 8008796:	4622      	mov	r2, r4
 8008798:	462b      	mov	r3, r5
 800879a:	f7f7 fe9d 	bl	80004d8 <__aeabi_dmul>
 800879e:	a338      	add	r3, pc, #224	; (adr r3, 8008880 <__kernel_cos+0x150>)
 80087a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a4:	f7f7 fce2 	bl	800016c <__adddf3>
 80087a8:	4622      	mov	r2, r4
 80087aa:	462b      	mov	r3, r5
 80087ac:	f7f7 fe94 	bl	80004d8 <__aeabi_dmul>
 80087b0:	a335      	add	r3, pc, #212	; (adr r3, 8008888 <__kernel_cos+0x158>)
 80087b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b6:	f7f7 fcd7 	bl	8000168 <__aeabi_dsub>
 80087ba:	4622      	mov	r2, r4
 80087bc:	462b      	mov	r3, r5
 80087be:	f7f7 fe8b 	bl	80004d8 <__aeabi_dmul>
 80087c2:	a333      	add	r3, pc, #204	; (adr r3, 8008890 <__kernel_cos+0x160>)
 80087c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c8:	f7f7 fcd0 	bl	800016c <__adddf3>
 80087cc:	4622      	mov	r2, r4
 80087ce:	462b      	mov	r3, r5
 80087d0:	f7f7 fe82 	bl	80004d8 <__aeabi_dmul>
 80087d4:	4622      	mov	r2, r4
 80087d6:	462b      	mov	r3, r5
 80087d8:	f7f7 fe7e 	bl	80004d8 <__aeabi_dmul>
 80087dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087e0:	4604      	mov	r4, r0
 80087e2:	460d      	mov	r5, r1
 80087e4:	4640      	mov	r0, r8
 80087e6:	4639      	mov	r1, r7
 80087e8:	f7f7 fe76 	bl	80004d8 <__aeabi_dmul>
 80087ec:	460b      	mov	r3, r1
 80087ee:	4602      	mov	r2, r0
 80087f0:	4629      	mov	r1, r5
 80087f2:	4620      	mov	r0, r4
 80087f4:	f7f7 fcb8 	bl	8000168 <__aeabi_dsub>
 80087f8:	4b28      	ldr	r3, [pc, #160]	; (800889c <__kernel_cos+0x16c>)
 80087fa:	4680      	mov	r8, r0
 80087fc:	429e      	cmp	r6, r3
 80087fe:	4689      	mov	r9, r1
 8008800:	dc0e      	bgt.n	8008820 <__kernel_cos+0xf0>
 8008802:	4602      	mov	r2, r0
 8008804:	460b      	mov	r3, r1
 8008806:	4650      	mov	r0, sl
 8008808:	4659      	mov	r1, fp
 800880a:	f7f7 fcad 	bl	8000168 <__aeabi_dsub>
 800880e:	4602      	mov	r2, r0
 8008810:	2000      	movs	r0, #0
 8008812:	460b      	mov	r3, r1
 8008814:	4922      	ldr	r1, [pc, #136]	; (80088a0 <__kernel_cos+0x170>)
 8008816:	f7f7 fca7 	bl	8000168 <__aeabi_dsub>
 800881a:	b003      	add	sp, #12
 800881c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008820:	2400      	movs	r4, #0
 8008822:	4b20      	ldr	r3, [pc, #128]	; (80088a4 <__kernel_cos+0x174>)
 8008824:	4622      	mov	r2, r4
 8008826:	429e      	cmp	r6, r3
 8008828:	bfcc      	ite	gt
 800882a:	4d1f      	ldrgt	r5, [pc, #124]	; (80088a8 <__kernel_cos+0x178>)
 800882c:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8008830:	462b      	mov	r3, r5
 8008832:	2000      	movs	r0, #0
 8008834:	491a      	ldr	r1, [pc, #104]	; (80088a0 <__kernel_cos+0x170>)
 8008836:	f7f7 fc97 	bl	8000168 <__aeabi_dsub>
 800883a:	4622      	mov	r2, r4
 800883c:	4606      	mov	r6, r0
 800883e:	460f      	mov	r7, r1
 8008840:	462b      	mov	r3, r5
 8008842:	4650      	mov	r0, sl
 8008844:	4659      	mov	r1, fp
 8008846:	f7f7 fc8f 	bl	8000168 <__aeabi_dsub>
 800884a:	4642      	mov	r2, r8
 800884c:	464b      	mov	r3, r9
 800884e:	f7f7 fc8b 	bl	8000168 <__aeabi_dsub>
 8008852:	4602      	mov	r2, r0
 8008854:	460b      	mov	r3, r1
 8008856:	4630      	mov	r0, r6
 8008858:	4639      	mov	r1, r7
 800885a:	e7dc      	b.n	8008816 <__kernel_cos+0xe6>
 800885c:	2000      	movs	r0, #0
 800885e:	4910      	ldr	r1, [pc, #64]	; (80088a0 <__kernel_cos+0x170>)
 8008860:	e7db      	b.n	800881a <__kernel_cos+0xea>
 8008862:	bf00      	nop
 8008864:	f3af 8000 	nop.w
 8008868:	be8838d4 	.word	0xbe8838d4
 800886c:	bda8fae9 	.word	0xbda8fae9
 8008870:	bdb4b1c4 	.word	0xbdb4b1c4
 8008874:	3e21ee9e 	.word	0x3e21ee9e
 8008878:	809c52ad 	.word	0x809c52ad
 800887c:	3e927e4f 	.word	0x3e927e4f
 8008880:	19cb1590 	.word	0x19cb1590
 8008884:	3efa01a0 	.word	0x3efa01a0
 8008888:	16c15177 	.word	0x16c15177
 800888c:	3f56c16c 	.word	0x3f56c16c
 8008890:	5555554c 	.word	0x5555554c
 8008894:	3fa55555 	.word	0x3fa55555
 8008898:	3fe00000 	.word	0x3fe00000
 800889c:	3fd33332 	.word	0x3fd33332
 80088a0:	3ff00000 	.word	0x3ff00000
 80088a4:	3fe90000 	.word	0x3fe90000
 80088a8:	3fd20000 	.word	0x3fd20000

080088ac <__kernel_rem_pio2>:
 80088ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088b0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80088b4:	9308      	str	r3, [sp, #32]
 80088b6:	9101      	str	r1, [sp, #4]
 80088b8:	4bc0      	ldr	r3, [pc, #768]	; (8008bbc <__kernel_rem_pio2+0x310>)
 80088ba:	99a2      	ldr	r1, [sp, #648]	; 0x288
 80088bc:	f112 0f14 	cmn.w	r2, #20
 80088c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80088c4:	bfa8      	it	ge
 80088c6:	1ed4      	subge	r4, r2, #3
 80088c8:	9304      	str	r3, [sp, #16]
 80088ca:	9b08      	ldr	r3, [sp, #32]
 80088cc:	bfb8      	it	lt
 80088ce:	2400      	movlt	r4, #0
 80088d0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80088d4:	9306      	str	r3, [sp, #24]
 80088d6:	bfa4      	itt	ge
 80088d8:	2318      	movge	r3, #24
 80088da:	fb94 f4f3 	sdivge	r4, r4, r3
 80088de:	f06f 0317 	mvn.w	r3, #23
 80088e2:	fb04 3303 	mla	r3, r4, r3, r3
 80088e6:	eb03 0a02 	add.w	sl, r3, r2
 80088ea:	9a06      	ldr	r2, [sp, #24]
 80088ec:	9b04      	ldr	r3, [sp, #16]
 80088ee:	1aa7      	subs	r7, r4, r2
 80088f0:	eb03 0802 	add.w	r8, r3, r2
 80088f4:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80088f6:	2500      	movs	r5, #0
 80088f8:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80088fc:	2200      	movs	r2, #0
 80088fe:	2300      	movs	r3, #0
 8008900:	9009      	str	r0, [sp, #36]	; 0x24
 8008902:	ae20      	add	r6, sp, #128	; 0x80
 8008904:	4545      	cmp	r5, r8
 8008906:	dd19      	ble.n	800893c <__kernel_rem_pio2+0x90>
 8008908:	9b08      	ldr	r3, [sp, #32]
 800890a:	aa20      	add	r2, sp, #128	; 0x80
 800890c:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8008910:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8008914:	f1c3 0301 	rsb	r3, r3, #1
 8008918:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800891c:	9307      	str	r3, [sp, #28]
 800891e:	9b07      	ldr	r3, [sp, #28]
 8008920:	9a04      	ldr	r2, [sp, #16]
 8008922:	4443      	add	r3, r8
 8008924:	429a      	cmp	r2, r3
 8008926:	db35      	blt.n	8008994 <__kernel_rem_pio2+0xe8>
 8008928:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800892a:	2200      	movs	r2, #0
 800892c:	f1a3 0908 	sub.w	r9, r3, #8
 8008930:	2300      	movs	r3, #0
 8008932:	462f      	mov	r7, r5
 8008934:	2600      	movs	r6, #0
 8008936:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800893a:	e01f      	b.n	800897c <__kernel_rem_pio2+0xd0>
 800893c:	42ef      	cmn	r7, r5
 800893e:	d40b      	bmi.n	8008958 <__kernel_rem_pio2+0xac>
 8008940:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008944:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008948:	f7f7 fd5c 	bl	8000404 <__aeabi_i2d>
 800894c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008950:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008954:	3501      	adds	r5, #1
 8008956:	e7d5      	b.n	8008904 <__kernel_rem_pio2+0x58>
 8008958:	4610      	mov	r0, r2
 800895a:	4619      	mov	r1, r3
 800895c:	e7f8      	b.n	8008950 <__kernel_rem_pio2+0xa4>
 800895e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008962:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8008966:	f7f7 fdb7 	bl	80004d8 <__aeabi_dmul>
 800896a:	4602      	mov	r2, r0
 800896c:	460b      	mov	r3, r1
 800896e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008972:	f7f7 fbfb 	bl	800016c <__adddf3>
 8008976:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800897a:	3601      	adds	r6, #1
 800897c:	9b06      	ldr	r3, [sp, #24]
 800897e:	3f08      	subs	r7, #8
 8008980:	429e      	cmp	r6, r3
 8008982:	ddec      	ble.n	800895e <__kernel_rem_pio2+0xb2>
 8008984:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008988:	3508      	adds	r5, #8
 800898a:	e8eb 2302 	strd	r2, r3, [fp], #8
 800898e:	f108 0801 	add.w	r8, r8, #1
 8008992:	e7c4      	b.n	800891e <__kernel_rem_pio2+0x72>
 8008994:	9b04      	ldr	r3, [sp, #16]
 8008996:	aa0c      	add	r2, sp, #48	; 0x30
 8008998:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800899c:	930b      	str	r3, [sp, #44]	; 0x2c
 800899e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80089a0:	9f04      	ldr	r7, [sp, #16]
 80089a2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80089a6:	930a      	str	r3, [sp, #40]	; 0x28
 80089a8:	463e      	mov	r6, r7
 80089aa:	ab98      	add	r3, sp, #608	; 0x260
 80089ac:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 80089b0:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80089b4:	f8cd b008 	str.w	fp, [sp, #8]
 80089b8:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 80089bc:	2e00      	cmp	r6, #0
 80089be:	dc71      	bgt.n	8008aa4 <__kernel_rem_pio2+0x1f8>
 80089c0:	4652      	mov	r2, sl
 80089c2:	4620      	mov	r0, r4
 80089c4:	4629      	mov	r1, r5
 80089c6:	f000 fd83 	bl	80094d0 <scalbn>
 80089ca:	2200      	movs	r2, #0
 80089cc:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80089d0:	4604      	mov	r4, r0
 80089d2:	460d      	mov	r5, r1
 80089d4:	f7f7 fd80 	bl	80004d8 <__aeabi_dmul>
 80089d8:	f000 fcfa 	bl	80093d0 <floor>
 80089dc:	2200      	movs	r2, #0
 80089de:	4b78      	ldr	r3, [pc, #480]	; (8008bc0 <__kernel_rem_pio2+0x314>)
 80089e0:	f7f7 fd7a 	bl	80004d8 <__aeabi_dmul>
 80089e4:	4602      	mov	r2, r0
 80089e6:	460b      	mov	r3, r1
 80089e8:	4620      	mov	r0, r4
 80089ea:	4629      	mov	r1, r5
 80089ec:	f7f7 fbbc 	bl	8000168 <__aeabi_dsub>
 80089f0:	460d      	mov	r5, r1
 80089f2:	4604      	mov	r4, r0
 80089f4:	f7f8 f820 	bl	8000a38 <__aeabi_d2iz>
 80089f8:	9007      	str	r0, [sp, #28]
 80089fa:	f7f7 fd03 	bl	8000404 <__aeabi_i2d>
 80089fe:	4602      	mov	r2, r0
 8008a00:	460b      	mov	r3, r1
 8008a02:	4620      	mov	r0, r4
 8008a04:	4629      	mov	r1, r5
 8008a06:	f7f7 fbaf 	bl	8000168 <__aeabi_dsub>
 8008a0a:	f1ba 0f00 	cmp.w	sl, #0
 8008a0e:	4680      	mov	r8, r0
 8008a10:	4689      	mov	r9, r1
 8008a12:	dd70      	ble.n	8008af6 <__kernel_rem_pio2+0x24a>
 8008a14:	1e7a      	subs	r2, r7, #1
 8008a16:	ab0c      	add	r3, sp, #48	; 0x30
 8008a18:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008a1c:	9c07      	ldr	r4, [sp, #28]
 8008a1e:	f1ca 0118 	rsb	r1, sl, #24
 8008a22:	fa40 f301 	asr.w	r3, r0, r1
 8008a26:	441c      	add	r4, r3
 8008a28:	408b      	lsls	r3, r1
 8008a2a:	1ac0      	subs	r0, r0, r3
 8008a2c:	ab0c      	add	r3, sp, #48	; 0x30
 8008a2e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8008a32:	f1ca 0317 	rsb	r3, sl, #23
 8008a36:	9407      	str	r4, [sp, #28]
 8008a38:	fa40 f303 	asr.w	r3, r0, r3
 8008a3c:	9302      	str	r3, [sp, #8]
 8008a3e:	9b02      	ldr	r3, [sp, #8]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	dd66      	ble.n	8008b12 <__kernel_rem_pio2+0x266>
 8008a44:	2200      	movs	r2, #0
 8008a46:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008a4a:	4614      	mov	r4, r2
 8008a4c:	9b07      	ldr	r3, [sp, #28]
 8008a4e:	3301      	adds	r3, #1
 8008a50:	9307      	str	r3, [sp, #28]
 8008a52:	4297      	cmp	r7, r2
 8008a54:	f300 809f 	bgt.w	8008b96 <__kernel_rem_pio2+0x2ea>
 8008a58:	f1ba 0f00 	cmp.w	sl, #0
 8008a5c:	dd07      	ble.n	8008a6e <__kernel_rem_pio2+0x1c2>
 8008a5e:	f1ba 0f01 	cmp.w	sl, #1
 8008a62:	f000 80b9 	beq.w	8008bd8 <__kernel_rem_pio2+0x32c>
 8008a66:	f1ba 0f02 	cmp.w	sl, #2
 8008a6a:	f000 80bf 	beq.w	8008bec <__kernel_rem_pio2+0x340>
 8008a6e:	9b02      	ldr	r3, [sp, #8]
 8008a70:	2b02      	cmp	r3, #2
 8008a72:	d14e      	bne.n	8008b12 <__kernel_rem_pio2+0x266>
 8008a74:	4642      	mov	r2, r8
 8008a76:	464b      	mov	r3, r9
 8008a78:	2000      	movs	r0, #0
 8008a7a:	4952      	ldr	r1, [pc, #328]	; (8008bc4 <__kernel_rem_pio2+0x318>)
 8008a7c:	f7f7 fb74 	bl	8000168 <__aeabi_dsub>
 8008a80:	4680      	mov	r8, r0
 8008a82:	4689      	mov	r9, r1
 8008a84:	2c00      	cmp	r4, #0
 8008a86:	d044      	beq.n	8008b12 <__kernel_rem_pio2+0x266>
 8008a88:	4652      	mov	r2, sl
 8008a8a:	2000      	movs	r0, #0
 8008a8c:	494d      	ldr	r1, [pc, #308]	; (8008bc4 <__kernel_rem_pio2+0x318>)
 8008a8e:	f000 fd1f 	bl	80094d0 <scalbn>
 8008a92:	4602      	mov	r2, r0
 8008a94:	460b      	mov	r3, r1
 8008a96:	4640      	mov	r0, r8
 8008a98:	4649      	mov	r1, r9
 8008a9a:	f7f7 fb65 	bl	8000168 <__aeabi_dsub>
 8008a9e:	4680      	mov	r8, r0
 8008aa0:	4689      	mov	r9, r1
 8008aa2:	e036      	b.n	8008b12 <__kernel_rem_pio2+0x266>
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	4b48      	ldr	r3, [pc, #288]	; (8008bc8 <__kernel_rem_pio2+0x31c>)
 8008aa8:	4620      	mov	r0, r4
 8008aaa:	4629      	mov	r1, r5
 8008aac:	f7f7 fd14 	bl	80004d8 <__aeabi_dmul>
 8008ab0:	f7f7 ffc2 	bl	8000a38 <__aeabi_d2iz>
 8008ab4:	f7f7 fca6 	bl	8000404 <__aeabi_i2d>
 8008ab8:	2200      	movs	r2, #0
 8008aba:	4b44      	ldr	r3, [pc, #272]	; (8008bcc <__kernel_rem_pio2+0x320>)
 8008abc:	4680      	mov	r8, r0
 8008abe:	4689      	mov	r9, r1
 8008ac0:	f7f7 fd0a 	bl	80004d8 <__aeabi_dmul>
 8008ac4:	4602      	mov	r2, r0
 8008ac6:	460b      	mov	r3, r1
 8008ac8:	4620      	mov	r0, r4
 8008aca:	4629      	mov	r1, r5
 8008acc:	f7f7 fb4c 	bl	8000168 <__aeabi_dsub>
 8008ad0:	f7f7 ffb2 	bl	8000a38 <__aeabi_d2iz>
 8008ad4:	9b02      	ldr	r3, [sp, #8]
 8008ad6:	3e01      	subs	r6, #1
 8008ad8:	f843 0b04 	str.w	r0, [r3], #4
 8008adc:	9302      	str	r3, [sp, #8]
 8008ade:	ab70      	add	r3, sp, #448	; 0x1c0
 8008ae0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008ae4:	4640      	mov	r0, r8
 8008ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aea:	4649      	mov	r1, r9
 8008aec:	f7f7 fb3e 	bl	800016c <__adddf3>
 8008af0:	4604      	mov	r4, r0
 8008af2:	460d      	mov	r5, r1
 8008af4:	e762      	b.n	80089bc <__kernel_rem_pio2+0x110>
 8008af6:	d105      	bne.n	8008b04 <__kernel_rem_pio2+0x258>
 8008af8:	1e7b      	subs	r3, r7, #1
 8008afa:	aa0c      	add	r2, sp, #48	; 0x30
 8008afc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008b00:	15c3      	asrs	r3, r0, #23
 8008b02:	e79b      	b.n	8008a3c <__kernel_rem_pio2+0x190>
 8008b04:	2200      	movs	r2, #0
 8008b06:	4b32      	ldr	r3, [pc, #200]	; (8008bd0 <__kernel_rem_pio2+0x324>)
 8008b08:	f7f7 ff6c 	bl	80009e4 <__aeabi_dcmpge>
 8008b0c:	2800      	cmp	r0, #0
 8008b0e:	d13f      	bne.n	8008b90 <__kernel_rem_pio2+0x2e4>
 8008b10:	9002      	str	r0, [sp, #8]
 8008b12:	2200      	movs	r2, #0
 8008b14:	2300      	movs	r3, #0
 8008b16:	4640      	mov	r0, r8
 8008b18:	4649      	mov	r1, r9
 8008b1a:	f7f7 ff45 	bl	80009a8 <__aeabi_dcmpeq>
 8008b1e:	2800      	cmp	r0, #0
 8008b20:	f000 80b5 	beq.w	8008c8e <__kernel_rem_pio2+0x3e2>
 8008b24:	1e7c      	subs	r4, r7, #1
 8008b26:	4623      	mov	r3, r4
 8008b28:	2200      	movs	r2, #0
 8008b2a:	9904      	ldr	r1, [sp, #16]
 8008b2c:	428b      	cmp	r3, r1
 8008b2e:	da64      	bge.n	8008bfa <__kernel_rem_pio2+0x34e>
 8008b30:	2a00      	cmp	r2, #0
 8008b32:	d078      	beq.n	8008c26 <__kernel_rem_pio2+0x37a>
 8008b34:	ab0c      	add	r3, sp, #48	; 0x30
 8008b36:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008b3a:	f1aa 0a18 	sub.w	sl, sl, #24
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	f000 80a3 	beq.w	8008c8a <__kernel_rem_pio2+0x3de>
 8008b44:	4652      	mov	r2, sl
 8008b46:	2000      	movs	r0, #0
 8008b48:	491e      	ldr	r1, [pc, #120]	; (8008bc4 <__kernel_rem_pio2+0x318>)
 8008b4a:	f000 fcc1 	bl	80094d0 <scalbn>
 8008b4e:	46a2      	mov	sl, r4
 8008b50:	4606      	mov	r6, r0
 8008b52:	460f      	mov	r7, r1
 8008b54:	f04f 0800 	mov.w	r8, #0
 8008b58:	00e3      	lsls	r3, r4, #3
 8008b5a:	9306      	str	r3, [sp, #24]
 8008b5c:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8008bc8 <__kernel_rem_pio2+0x31c>
 8008b60:	ab70      	add	r3, sp, #448	; 0x1c0
 8008b62:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8008b66:	f1ba 0f00 	cmp.w	sl, #0
 8008b6a:	f280 80c6 	bge.w	8008cfa <__kernel_rem_pio2+0x44e>
 8008b6e:	4627      	mov	r7, r4
 8008b70:	f04f 0800 	mov.w	r8, #0
 8008b74:	2f00      	cmp	r7, #0
 8008b76:	f2c0 80f3 	blt.w	8008d60 <__kernel_rem_pio2+0x4b4>
 8008b7a:	4b16      	ldr	r3, [pc, #88]	; (8008bd4 <__kernel_rem_pio2+0x328>)
 8008b7c:	f04f 0a00 	mov.w	sl, #0
 8008b80:	461d      	mov	r5, r3
 8008b82:	ab70      	add	r3, sp, #448	; 0x1c0
 8008b84:	f04f 0b00 	mov.w	fp, #0
 8008b88:	2600      	movs	r6, #0
 8008b8a:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8008b8e:	e0d9      	b.n	8008d44 <__kernel_rem_pio2+0x498>
 8008b90:	2302      	movs	r3, #2
 8008b92:	9302      	str	r3, [sp, #8]
 8008b94:	e756      	b.n	8008a44 <__kernel_rem_pio2+0x198>
 8008b96:	f8db 3000 	ldr.w	r3, [fp]
 8008b9a:	b954      	cbnz	r4, 8008bb2 <__kernel_rem_pio2+0x306>
 8008b9c:	b123      	cbz	r3, 8008ba8 <__kernel_rem_pio2+0x2fc>
 8008b9e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008ba2:	f8cb 3000 	str.w	r3, [fp]
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	461c      	mov	r4, r3
 8008baa:	3201      	adds	r2, #1
 8008bac:	f10b 0b04 	add.w	fp, fp, #4
 8008bb0:	e74f      	b.n	8008a52 <__kernel_rem_pio2+0x1a6>
 8008bb2:	1acb      	subs	r3, r1, r3
 8008bb4:	f8cb 3000 	str.w	r3, [fp]
 8008bb8:	4623      	mov	r3, r4
 8008bba:	e7f5      	b.n	8008ba8 <__kernel_rem_pio2+0x2fc>
 8008bbc:	0800bd18 	.word	0x0800bd18
 8008bc0:	40200000 	.word	0x40200000
 8008bc4:	3ff00000 	.word	0x3ff00000
 8008bc8:	3e700000 	.word	0x3e700000
 8008bcc:	41700000 	.word	0x41700000
 8008bd0:	3fe00000 	.word	0x3fe00000
 8008bd4:	0800bcd8 	.word	0x0800bcd8
 8008bd8:	1e7a      	subs	r2, r7, #1
 8008bda:	ab0c      	add	r3, sp, #48	; 0x30
 8008bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008be0:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008be4:	a90c      	add	r1, sp, #48	; 0x30
 8008be6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008bea:	e740      	b.n	8008a6e <__kernel_rem_pio2+0x1c2>
 8008bec:	1e7a      	subs	r2, r7, #1
 8008bee:	ab0c      	add	r3, sp, #48	; 0x30
 8008bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bf4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008bf8:	e7f4      	b.n	8008be4 <__kernel_rem_pio2+0x338>
 8008bfa:	a90c      	add	r1, sp, #48	; 0x30
 8008bfc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008c00:	3b01      	subs	r3, #1
 8008c02:	430a      	orrs	r2, r1
 8008c04:	e791      	b.n	8008b2a <__kernel_rem_pio2+0x27e>
 8008c06:	3401      	adds	r4, #1
 8008c08:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008c0c:	2a00      	cmp	r2, #0
 8008c0e:	d0fa      	beq.n	8008c06 <__kernel_rem_pio2+0x35a>
 8008c10:	9b08      	ldr	r3, [sp, #32]
 8008c12:	1c7e      	adds	r6, r7, #1
 8008c14:	18fd      	adds	r5, r7, r3
 8008c16:	ab20      	add	r3, sp, #128	; 0x80
 8008c18:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008c1c:	443c      	add	r4, r7
 8008c1e:	42b4      	cmp	r4, r6
 8008c20:	da04      	bge.n	8008c2c <__kernel_rem_pio2+0x380>
 8008c22:	4627      	mov	r7, r4
 8008c24:	e6c0      	b.n	80089a8 <__kernel_rem_pio2+0xfc>
 8008c26:	2401      	movs	r4, #1
 8008c28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c2a:	e7ed      	b.n	8008c08 <__kernel_rem_pio2+0x35c>
 8008c2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c2e:	462f      	mov	r7, r5
 8008c30:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008c34:	f7f7 fbe6 	bl	8000404 <__aeabi_i2d>
 8008c38:	f04f 0b00 	mov.w	fp, #0
 8008c3c:	f04f 0800 	mov.w	r8, #0
 8008c40:	f04f 0900 	mov.w	r9, #0
 8008c44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c46:	e8e7 0102 	strd	r0, r1, [r7], #8
 8008c4a:	3b08      	subs	r3, #8
 8008c4c:	9302      	str	r3, [sp, #8]
 8008c4e:	9b06      	ldr	r3, [sp, #24]
 8008c50:	459b      	cmp	fp, r3
 8008c52:	dd07      	ble.n	8008c64 <__kernel_rem_pio2+0x3b8>
 8008c54:	ab70      	add	r3, sp, #448	; 0x1c0
 8008c56:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008c5a:	463d      	mov	r5, r7
 8008c5c:	e9c3 8900 	strd	r8, r9, [r3]
 8008c60:	3601      	adds	r6, #1
 8008c62:	e7dc      	b.n	8008c1e <__kernel_rem_pio2+0x372>
 8008c64:	9902      	ldr	r1, [sp, #8]
 8008c66:	f10b 0b01 	add.w	fp, fp, #1
 8008c6a:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8008c6e:	9102      	str	r1, [sp, #8]
 8008c70:	e875 0102 	ldrd	r0, r1, [r5], #-8
 8008c74:	f7f7 fc30 	bl	80004d8 <__aeabi_dmul>
 8008c78:	4602      	mov	r2, r0
 8008c7a:	460b      	mov	r3, r1
 8008c7c:	4640      	mov	r0, r8
 8008c7e:	4649      	mov	r1, r9
 8008c80:	f7f7 fa74 	bl	800016c <__adddf3>
 8008c84:	4680      	mov	r8, r0
 8008c86:	4689      	mov	r9, r1
 8008c88:	e7e1      	b.n	8008c4e <__kernel_rem_pio2+0x3a2>
 8008c8a:	3c01      	subs	r4, #1
 8008c8c:	e752      	b.n	8008b34 <__kernel_rem_pio2+0x288>
 8008c8e:	f1ca 0200 	rsb	r2, sl, #0
 8008c92:	4640      	mov	r0, r8
 8008c94:	4649      	mov	r1, r9
 8008c96:	f000 fc1b 	bl	80094d0 <scalbn>
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	4ba5      	ldr	r3, [pc, #660]	; (8008f34 <__kernel_rem_pio2+0x688>)
 8008c9e:	4604      	mov	r4, r0
 8008ca0:	460d      	mov	r5, r1
 8008ca2:	f7f7 fe9f 	bl	80009e4 <__aeabi_dcmpge>
 8008ca6:	b1f8      	cbz	r0, 8008ce8 <__kernel_rem_pio2+0x43c>
 8008ca8:	2200      	movs	r2, #0
 8008caa:	4ba3      	ldr	r3, [pc, #652]	; (8008f38 <__kernel_rem_pio2+0x68c>)
 8008cac:	4620      	mov	r0, r4
 8008cae:	4629      	mov	r1, r5
 8008cb0:	f7f7 fc12 	bl	80004d8 <__aeabi_dmul>
 8008cb4:	f7f7 fec0 	bl	8000a38 <__aeabi_d2iz>
 8008cb8:	4606      	mov	r6, r0
 8008cba:	f7f7 fba3 	bl	8000404 <__aeabi_i2d>
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	4b9c      	ldr	r3, [pc, #624]	; (8008f34 <__kernel_rem_pio2+0x688>)
 8008cc2:	f7f7 fc09 	bl	80004d8 <__aeabi_dmul>
 8008cc6:	460b      	mov	r3, r1
 8008cc8:	4602      	mov	r2, r0
 8008cca:	4629      	mov	r1, r5
 8008ccc:	4620      	mov	r0, r4
 8008cce:	f7f7 fa4b 	bl	8000168 <__aeabi_dsub>
 8008cd2:	f7f7 feb1 	bl	8000a38 <__aeabi_d2iz>
 8008cd6:	1c7c      	adds	r4, r7, #1
 8008cd8:	ab0c      	add	r3, sp, #48	; 0x30
 8008cda:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8008cde:	f10a 0a18 	add.w	sl, sl, #24
 8008ce2:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 8008ce6:	e72d      	b.n	8008b44 <__kernel_rem_pio2+0x298>
 8008ce8:	4620      	mov	r0, r4
 8008cea:	4629      	mov	r1, r5
 8008cec:	f7f7 fea4 	bl	8000a38 <__aeabi_d2iz>
 8008cf0:	ab0c      	add	r3, sp, #48	; 0x30
 8008cf2:	463c      	mov	r4, r7
 8008cf4:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8008cf8:	e724      	b.n	8008b44 <__kernel_rem_pio2+0x298>
 8008cfa:	ab0c      	add	r3, sp, #48	; 0x30
 8008cfc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8008d00:	f7f7 fb80 	bl	8000404 <__aeabi_i2d>
 8008d04:	4632      	mov	r2, r6
 8008d06:	463b      	mov	r3, r7
 8008d08:	f7f7 fbe6 	bl	80004d8 <__aeabi_dmul>
 8008d0c:	4642      	mov	r2, r8
 8008d0e:	e86b 0102 	strd	r0, r1, [fp], #-8
 8008d12:	464b      	mov	r3, r9
 8008d14:	4630      	mov	r0, r6
 8008d16:	4639      	mov	r1, r7
 8008d18:	f7f7 fbde 	bl	80004d8 <__aeabi_dmul>
 8008d1c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008d20:	4606      	mov	r6, r0
 8008d22:	460f      	mov	r7, r1
 8008d24:	e71f      	b.n	8008b66 <__kernel_rem_pio2+0x2ba>
 8008d26:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8008d2a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8008d2e:	f7f7 fbd3 	bl	80004d8 <__aeabi_dmul>
 8008d32:	4602      	mov	r2, r0
 8008d34:	460b      	mov	r3, r1
 8008d36:	4650      	mov	r0, sl
 8008d38:	4659      	mov	r1, fp
 8008d3a:	f7f7 fa17 	bl	800016c <__adddf3>
 8008d3e:	4682      	mov	sl, r0
 8008d40:	468b      	mov	fp, r1
 8008d42:	3601      	adds	r6, #1
 8008d44:	9b04      	ldr	r3, [sp, #16]
 8008d46:	429e      	cmp	r6, r3
 8008d48:	dc01      	bgt.n	8008d4e <__kernel_rem_pio2+0x4a2>
 8008d4a:	45b0      	cmp	r8, r6
 8008d4c:	daeb      	bge.n	8008d26 <__kernel_rem_pio2+0x47a>
 8008d4e:	ab48      	add	r3, sp, #288	; 0x120
 8008d50:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008d54:	e9c3 ab00 	strd	sl, fp, [r3]
 8008d58:	3f01      	subs	r7, #1
 8008d5a:	f108 0801 	add.w	r8, r8, #1
 8008d5e:	e709      	b.n	8008b74 <__kernel_rem_pio2+0x2c8>
 8008d60:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8008d62:	2b02      	cmp	r3, #2
 8008d64:	dc09      	bgt.n	8008d7a <__kernel_rem_pio2+0x4ce>
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	dc34      	bgt.n	8008dd4 <__kernel_rem_pio2+0x528>
 8008d6a:	d05e      	beq.n	8008e2a <__kernel_rem_pio2+0x57e>
 8008d6c:	9b07      	ldr	r3, [sp, #28]
 8008d6e:	f003 0007 	and.w	r0, r3, #7
 8008d72:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8008d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d7a:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8008d7c:	2b03      	cmp	r3, #3
 8008d7e:	d1f5      	bne.n	8008d6c <__kernel_rem_pio2+0x4c0>
 8008d80:	9a06      	ldr	r2, [sp, #24]
 8008d82:	ab48      	add	r3, sp, #288	; 0x120
 8008d84:	441a      	add	r2, r3
 8008d86:	4615      	mov	r5, r2
 8008d88:	4692      	mov	sl, r2
 8008d8a:	46a3      	mov	fp, r4
 8008d8c:	f1bb 0f00 	cmp.w	fp, #0
 8008d90:	dc7a      	bgt.n	8008e88 <__kernel_rem_pio2+0x5dc>
 8008d92:	46aa      	mov	sl, r5
 8008d94:	46a3      	mov	fp, r4
 8008d96:	f1bb 0f01 	cmp.w	fp, #1
 8008d9a:	f300 8094 	bgt.w	8008ec6 <__kernel_rem_pio2+0x61a>
 8008d9e:	2700      	movs	r7, #0
 8008da0:	463e      	mov	r6, r7
 8008da2:	2c01      	cmp	r4, #1
 8008da4:	f300 80ae 	bgt.w	8008f04 <__kernel_rem_pio2+0x658>
 8008da8:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 8008dac:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 8008db0:	9b02      	ldr	r3, [sp, #8]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	f040 80b0 	bne.w	8008f18 <__kernel_rem_pio2+0x66c>
 8008db8:	4603      	mov	r3, r0
 8008dba:	462a      	mov	r2, r5
 8008dbc:	9801      	ldr	r0, [sp, #4]
 8008dbe:	e9c0 2300 	strd	r2, r3, [r0]
 8008dc2:	4622      	mov	r2, r4
 8008dc4:	460b      	mov	r3, r1
 8008dc6:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008dca:	463a      	mov	r2, r7
 8008dcc:	4633      	mov	r3, r6
 8008dce:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8008dd2:	e7cb      	b.n	8008d6c <__kernel_rem_pio2+0x4c0>
 8008dd4:	2000      	movs	r0, #0
 8008dd6:	9a06      	ldr	r2, [sp, #24]
 8008dd8:	ab48      	add	r3, sp, #288	; 0x120
 8008dda:	441a      	add	r2, r3
 8008ddc:	4615      	mov	r5, r2
 8008dde:	46a0      	mov	r8, r4
 8008de0:	4601      	mov	r1, r0
 8008de2:	f1b8 0f00 	cmp.w	r8, #0
 8008de6:	da3c      	bge.n	8008e62 <__kernel_rem_pio2+0x5b6>
 8008de8:	9b02      	ldr	r3, [sp, #8]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d040      	beq.n	8008e70 <__kernel_rem_pio2+0x5c4>
 8008dee:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8008df2:	4602      	mov	r2, r0
 8008df4:	462b      	mov	r3, r5
 8008df6:	9d01      	ldr	r5, [sp, #4]
 8008df8:	2601      	movs	r6, #1
 8008dfa:	e9c5 2300 	strd	r2, r3, [r5]
 8008dfe:	460b      	mov	r3, r1
 8008e00:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8008e04:	f7f7 f9b0 	bl	8000168 <__aeabi_dsub>
 8008e08:	4684      	mov	ip, r0
 8008e0a:	460f      	mov	r7, r1
 8008e0c:	ad48      	add	r5, sp, #288	; 0x120
 8008e0e:	42b4      	cmp	r4, r6
 8008e10:	f105 0508 	add.w	r5, r5, #8
 8008e14:	da2e      	bge.n	8008e74 <__kernel_rem_pio2+0x5c8>
 8008e16:	9b02      	ldr	r3, [sp, #8]
 8008e18:	b10b      	cbz	r3, 8008e1e <__kernel_rem_pio2+0x572>
 8008e1a:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8008e1e:	4662      	mov	r2, ip
 8008e20:	463b      	mov	r3, r7
 8008e22:	9901      	ldr	r1, [sp, #4]
 8008e24:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8008e28:	e7a0      	b.n	8008d6c <__kernel_rem_pio2+0x4c0>
 8008e2a:	9a06      	ldr	r2, [sp, #24]
 8008e2c:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 8008e2e:	ab48      	add	r3, sp, #288	; 0x120
 8008e30:	441a      	add	r2, r3
 8008e32:	4615      	mov	r5, r2
 8008e34:	4637      	mov	r7, r6
 8008e36:	2c00      	cmp	r4, #0
 8008e38:	da09      	bge.n	8008e4e <__kernel_rem_pio2+0x5a2>
 8008e3a:	9b02      	ldr	r3, [sp, #8]
 8008e3c:	b10b      	cbz	r3, 8008e42 <__kernel_rem_pio2+0x596>
 8008e3e:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8008e42:	4632      	mov	r2, r6
 8008e44:	463b      	mov	r3, r7
 8008e46:	9901      	ldr	r1, [sp, #4]
 8008e48:	e9c1 2300 	strd	r2, r3, [r1]
 8008e4c:	e78e      	b.n	8008d6c <__kernel_rem_pio2+0x4c0>
 8008e4e:	4630      	mov	r0, r6
 8008e50:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8008e54:	4639      	mov	r1, r7
 8008e56:	f7f7 f989 	bl	800016c <__adddf3>
 8008e5a:	3c01      	subs	r4, #1
 8008e5c:	4606      	mov	r6, r0
 8008e5e:	460f      	mov	r7, r1
 8008e60:	e7e9      	b.n	8008e36 <__kernel_rem_pio2+0x58a>
 8008e62:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8008e66:	f7f7 f981 	bl	800016c <__adddf3>
 8008e6a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8008e6e:	e7b8      	b.n	8008de2 <__kernel_rem_pio2+0x536>
 8008e70:	460d      	mov	r5, r1
 8008e72:	e7be      	b.n	8008df2 <__kernel_rem_pio2+0x546>
 8008e74:	4660      	mov	r0, ip
 8008e76:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008e7a:	4639      	mov	r1, r7
 8008e7c:	f7f7 f976 	bl	800016c <__adddf3>
 8008e80:	3601      	adds	r6, #1
 8008e82:	4684      	mov	ip, r0
 8008e84:	460f      	mov	r7, r1
 8008e86:	e7c2      	b.n	8008e0e <__kernel_rem_pio2+0x562>
 8008e88:	e9da 6700 	ldrd	r6, r7, [sl]
 8008e8c:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8008e90:	4632      	mov	r2, r6
 8008e92:	463b      	mov	r3, r7
 8008e94:	4640      	mov	r0, r8
 8008e96:	4649      	mov	r1, r9
 8008e98:	f7f7 f968 	bl	800016c <__adddf3>
 8008e9c:	4602      	mov	r2, r0
 8008e9e:	460b      	mov	r3, r1
 8008ea0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008ea4:	4640      	mov	r0, r8
 8008ea6:	4649      	mov	r1, r9
 8008ea8:	f7f7 f95e 	bl	8000168 <__aeabi_dsub>
 8008eac:	4632      	mov	r2, r6
 8008eae:	463b      	mov	r3, r7
 8008eb0:	f7f7 f95c 	bl	800016c <__adddf3>
 8008eb4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008eb8:	e86a 0102 	strd	r0, r1, [sl], #-8
 8008ebc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008ec0:	e9ca 2300 	strd	r2, r3, [sl]
 8008ec4:	e762      	b.n	8008d8c <__kernel_rem_pio2+0x4e0>
 8008ec6:	e9da 8900 	ldrd	r8, r9, [sl]
 8008eca:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8008ece:	4642      	mov	r2, r8
 8008ed0:	464b      	mov	r3, r9
 8008ed2:	4630      	mov	r0, r6
 8008ed4:	4639      	mov	r1, r7
 8008ed6:	f7f7 f949 	bl	800016c <__adddf3>
 8008eda:	4602      	mov	r2, r0
 8008edc:	460b      	mov	r3, r1
 8008ede:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008ee2:	4630      	mov	r0, r6
 8008ee4:	4639      	mov	r1, r7
 8008ee6:	f7f7 f93f 	bl	8000168 <__aeabi_dsub>
 8008eea:	4642      	mov	r2, r8
 8008eec:	464b      	mov	r3, r9
 8008eee:	f7f7 f93d 	bl	800016c <__adddf3>
 8008ef2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ef6:	e86a 0102 	strd	r0, r1, [sl], #-8
 8008efa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008efe:	e9ca 2300 	strd	r2, r3, [sl]
 8008f02:	e748      	b.n	8008d96 <__kernel_rem_pio2+0x4ea>
 8008f04:	4638      	mov	r0, r7
 8008f06:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8008f0a:	4631      	mov	r1, r6
 8008f0c:	f7f7 f92e 	bl	800016c <__adddf3>
 8008f10:	3c01      	subs	r4, #1
 8008f12:	4607      	mov	r7, r0
 8008f14:	460e      	mov	r6, r1
 8008f16:	e744      	b.n	8008da2 <__kernel_rem_pio2+0x4f6>
 8008f18:	9b01      	ldr	r3, [sp, #4]
 8008f1a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8008f1e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8008f22:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8008f26:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8008f2a:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8008f2e:	601d      	str	r5, [r3, #0]
 8008f30:	615e      	str	r6, [r3, #20]
 8008f32:	e71b      	b.n	8008d6c <__kernel_rem_pio2+0x4c0>
 8008f34:	41700000 	.word	0x41700000
 8008f38:	3e700000 	.word	0x3e700000
 8008f3c:	00000000 	.word	0x00000000

08008f40 <__kernel_sin>:
 8008f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f44:	b086      	sub	sp, #24
 8008f46:	e9cd 2300 	strd	r2, r3, [sp]
 8008f4a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008f4e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8008f52:	4682      	mov	sl, r0
 8008f54:	460c      	mov	r4, r1
 8008f56:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8008f58:	da03      	bge.n	8008f62 <__kernel_sin+0x22>
 8008f5a:	f7f7 fd6d 	bl	8000a38 <__aeabi_d2iz>
 8008f5e:	2800      	cmp	r0, #0
 8008f60:	d050      	beq.n	8009004 <__kernel_sin+0xc4>
 8008f62:	4652      	mov	r2, sl
 8008f64:	4623      	mov	r3, r4
 8008f66:	4650      	mov	r0, sl
 8008f68:	4621      	mov	r1, r4
 8008f6a:	f7f7 fab5 	bl	80004d8 <__aeabi_dmul>
 8008f6e:	4606      	mov	r6, r0
 8008f70:	460f      	mov	r7, r1
 8008f72:	4602      	mov	r2, r0
 8008f74:	460b      	mov	r3, r1
 8008f76:	4650      	mov	r0, sl
 8008f78:	4621      	mov	r1, r4
 8008f7a:	f7f7 faad 	bl	80004d8 <__aeabi_dmul>
 8008f7e:	a33e      	add	r3, pc, #248	; (adr r3, 8009078 <__kernel_sin+0x138>)
 8008f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f84:	4680      	mov	r8, r0
 8008f86:	4689      	mov	r9, r1
 8008f88:	4630      	mov	r0, r6
 8008f8a:	4639      	mov	r1, r7
 8008f8c:	f7f7 faa4 	bl	80004d8 <__aeabi_dmul>
 8008f90:	a33b      	add	r3, pc, #236	; (adr r3, 8009080 <__kernel_sin+0x140>)
 8008f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f96:	f7f7 f8e7 	bl	8000168 <__aeabi_dsub>
 8008f9a:	4632      	mov	r2, r6
 8008f9c:	463b      	mov	r3, r7
 8008f9e:	f7f7 fa9b 	bl	80004d8 <__aeabi_dmul>
 8008fa2:	a339      	add	r3, pc, #228	; (adr r3, 8009088 <__kernel_sin+0x148>)
 8008fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa8:	f7f7 f8e0 	bl	800016c <__adddf3>
 8008fac:	4632      	mov	r2, r6
 8008fae:	463b      	mov	r3, r7
 8008fb0:	f7f7 fa92 	bl	80004d8 <__aeabi_dmul>
 8008fb4:	a336      	add	r3, pc, #216	; (adr r3, 8009090 <__kernel_sin+0x150>)
 8008fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fba:	f7f7 f8d5 	bl	8000168 <__aeabi_dsub>
 8008fbe:	4632      	mov	r2, r6
 8008fc0:	463b      	mov	r3, r7
 8008fc2:	f7f7 fa89 	bl	80004d8 <__aeabi_dmul>
 8008fc6:	a334      	add	r3, pc, #208	; (adr r3, 8009098 <__kernel_sin+0x158>)
 8008fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fcc:	f7f7 f8ce 	bl	800016c <__adddf3>
 8008fd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008fd4:	b9dd      	cbnz	r5, 800900e <__kernel_sin+0xce>
 8008fd6:	4602      	mov	r2, r0
 8008fd8:	460b      	mov	r3, r1
 8008fda:	4630      	mov	r0, r6
 8008fdc:	4639      	mov	r1, r7
 8008fde:	f7f7 fa7b 	bl	80004d8 <__aeabi_dmul>
 8008fe2:	a32f      	add	r3, pc, #188	; (adr r3, 80090a0 <__kernel_sin+0x160>)
 8008fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe8:	f7f7 f8be 	bl	8000168 <__aeabi_dsub>
 8008fec:	4642      	mov	r2, r8
 8008fee:	464b      	mov	r3, r9
 8008ff0:	f7f7 fa72 	bl	80004d8 <__aeabi_dmul>
 8008ff4:	4602      	mov	r2, r0
 8008ff6:	460b      	mov	r3, r1
 8008ff8:	4650      	mov	r0, sl
 8008ffa:	4621      	mov	r1, r4
 8008ffc:	f7f7 f8b6 	bl	800016c <__adddf3>
 8009000:	4682      	mov	sl, r0
 8009002:	460c      	mov	r4, r1
 8009004:	4650      	mov	r0, sl
 8009006:	4621      	mov	r1, r4
 8009008:	b006      	add	sp, #24
 800900a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800900e:	2200      	movs	r2, #0
 8009010:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009014:	4b24      	ldr	r3, [pc, #144]	; (80090a8 <__kernel_sin+0x168>)
 8009016:	f7f7 fa5f 	bl	80004d8 <__aeabi_dmul>
 800901a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800901e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009022:	4640      	mov	r0, r8
 8009024:	4649      	mov	r1, r9
 8009026:	f7f7 fa57 	bl	80004d8 <__aeabi_dmul>
 800902a:	4602      	mov	r2, r0
 800902c:	460b      	mov	r3, r1
 800902e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009032:	f7f7 f899 	bl	8000168 <__aeabi_dsub>
 8009036:	4632      	mov	r2, r6
 8009038:	463b      	mov	r3, r7
 800903a:	f7f7 fa4d 	bl	80004d8 <__aeabi_dmul>
 800903e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009042:	f7f7 f891 	bl	8000168 <__aeabi_dsub>
 8009046:	a316      	add	r3, pc, #88	; (adr r3, 80090a0 <__kernel_sin+0x160>)
 8009048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800904c:	4606      	mov	r6, r0
 800904e:	460f      	mov	r7, r1
 8009050:	4640      	mov	r0, r8
 8009052:	4649      	mov	r1, r9
 8009054:	f7f7 fa40 	bl	80004d8 <__aeabi_dmul>
 8009058:	4602      	mov	r2, r0
 800905a:	460b      	mov	r3, r1
 800905c:	4630      	mov	r0, r6
 800905e:	4639      	mov	r1, r7
 8009060:	f7f7 f884 	bl	800016c <__adddf3>
 8009064:	4602      	mov	r2, r0
 8009066:	460b      	mov	r3, r1
 8009068:	4650      	mov	r0, sl
 800906a:	4621      	mov	r1, r4
 800906c:	f7f7 f87c 	bl	8000168 <__aeabi_dsub>
 8009070:	e7c6      	b.n	8009000 <__kernel_sin+0xc0>
 8009072:	bf00      	nop
 8009074:	f3af 8000 	nop.w
 8009078:	5acfd57c 	.word	0x5acfd57c
 800907c:	3de5d93a 	.word	0x3de5d93a
 8009080:	8a2b9ceb 	.word	0x8a2b9ceb
 8009084:	3e5ae5e6 	.word	0x3e5ae5e6
 8009088:	57b1fe7d 	.word	0x57b1fe7d
 800908c:	3ec71de3 	.word	0x3ec71de3
 8009090:	19c161d5 	.word	0x19c161d5
 8009094:	3f2a01a0 	.word	0x3f2a01a0
 8009098:	1110f8a6 	.word	0x1110f8a6
 800909c:	3f811111 	.word	0x3f811111
 80090a0:	55555549 	.word	0x55555549
 80090a4:	3fc55555 	.word	0x3fc55555
 80090a8:	3fe00000 	.word	0x3fe00000
 80090ac:	00000000 	.word	0x00000000

080090b0 <atan>:
 80090b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090b4:	4bb6      	ldr	r3, [pc, #728]	; (8009390 <atan+0x2e0>)
 80090b6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80090ba:	429e      	cmp	r6, r3
 80090bc:	4604      	mov	r4, r0
 80090be:	460d      	mov	r5, r1
 80090c0:	468b      	mov	fp, r1
 80090c2:	dd17      	ble.n	80090f4 <atan+0x44>
 80090c4:	4bb3      	ldr	r3, [pc, #716]	; (8009394 <atan+0x2e4>)
 80090c6:	429e      	cmp	r6, r3
 80090c8:	dc01      	bgt.n	80090ce <atan+0x1e>
 80090ca:	d109      	bne.n	80090e0 <atan+0x30>
 80090cc:	b140      	cbz	r0, 80090e0 <atan+0x30>
 80090ce:	4622      	mov	r2, r4
 80090d0:	462b      	mov	r3, r5
 80090d2:	4620      	mov	r0, r4
 80090d4:	4629      	mov	r1, r5
 80090d6:	f7f7 f849 	bl	800016c <__adddf3>
 80090da:	4604      	mov	r4, r0
 80090dc:	460d      	mov	r5, r1
 80090de:	e005      	b.n	80090ec <atan+0x3c>
 80090e0:	f1bb 0f00 	cmp.w	fp, #0
 80090e4:	4cac      	ldr	r4, [pc, #688]	; (8009398 <atan+0x2e8>)
 80090e6:	f300 8121 	bgt.w	800932c <atan+0x27c>
 80090ea:	4dac      	ldr	r5, [pc, #688]	; (800939c <atan+0x2ec>)
 80090ec:	4620      	mov	r0, r4
 80090ee:	4629      	mov	r1, r5
 80090f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090f4:	4baa      	ldr	r3, [pc, #680]	; (80093a0 <atan+0x2f0>)
 80090f6:	429e      	cmp	r6, r3
 80090f8:	dc11      	bgt.n	800911e <atan+0x6e>
 80090fa:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80090fe:	429e      	cmp	r6, r3
 8009100:	dc0a      	bgt.n	8009118 <atan+0x68>
 8009102:	a38b      	add	r3, pc, #556	; (adr r3, 8009330 <atan+0x280>)
 8009104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009108:	f7f7 f830 	bl	800016c <__adddf3>
 800910c:	2200      	movs	r2, #0
 800910e:	4ba5      	ldr	r3, [pc, #660]	; (80093a4 <atan+0x2f4>)
 8009110:	f7f7 fc72 	bl	80009f8 <__aeabi_dcmpgt>
 8009114:	2800      	cmp	r0, #0
 8009116:	d1e9      	bne.n	80090ec <atan+0x3c>
 8009118:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800911c:	e027      	b.n	800916e <atan+0xbe>
 800911e:	f000 f951 	bl	80093c4 <fabs>
 8009122:	4ba1      	ldr	r3, [pc, #644]	; (80093a8 <atan+0x2f8>)
 8009124:	4604      	mov	r4, r0
 8009126:	429e      	cmp	r6, r3
 8009128:	460d      	mov	r5, r1
 800912a:	f300 80b8 	bgt.w	800929e <atan+0x1ee>
 800912e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8009132:	429e      	cmp	r6, r3
 8009134:	f300 809c 	bgt.w	8009270 <atan+0x1c0>
 8009138:	4602      	mov	r2, r0
 800913a:	460b      	mov	r3, r1
 800913c:	f7f7 f816 	bl	800016c <__adddf3>
 8009140:	2200      	movs	r2, #0
 8009142:	4b98      	ldr	r3, [pc, #608]	; (80093a4 <atan+0x2f4>)
 8009144:	f7f7 f810 	bl	8000168 <__aeabi_dsub>
 8009148:	2200      	movs	r2, #0
 800914a:	4606      	mov	r6, r0
 800914c:	460f      	mov	r7, r1
 800914e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009152:	4620      	mov	r0, r4
 8009154:	4629      	mov	r1, r5
 8009156:	f7f7 f809 	bl	800016c <__adddf3>
 800915a:	4602      	mov	r2, r0
 800915c:	460b      	mov	r3, r1
 800915e:	4630      	mov	r0, r6
 8009160:	4639      	mov	r1, r7
 8009162:	f7f7 fae3 	bl	800072c <__aeabi_ddiv>
 8009166:	f04f 0a00 	mov.w	sl, #0
 800916a:	4604      	mov	r4, r0
 800916c:	460d      	mov	r5, r1
 800916e:	4622      	mov	r2, r4
 8009170:	462b      	mov	r3, r5
 8009172:	4620      	mov	r0, r4
 8009174:	4629      	mov	r1, r5
 8009176:	f7f7 f9af 	bl	80004d8 <__aeabi_dmul>
 800917a:	4602      	mov	r2, r0
 800917c:	460b      	mov	r3, r1
 800917e:	4680      	mov	r8, r0
 8009180:	4689      	mov	r9, r1
 8009182:	f7f7 f9a9 	bl	80004d8 <__aeabi_dmul>
 8009186:	a36c      	add	r3, pc, #432	; (adr r3, 8009338 <atan+0x288>)
 8009188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800918c:	4606      	mov	r6, r0
 800918e:	460f      	mov	r7, r1
 8009190:	f7f7 f9a2 	bl	80004d8 <__aeabi_dmul>
 8009194:	a36a      	add	r3, pc, #424	; (adr r3, 8009340 <atan+0x290>)
 8009196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800919a:	f7f6 ffe7 	bl	800016c <__adddf3>
 800919e:	4632      	mov	r2, r6
 80091a0:	463b      	mov	r3, r7
 80091a2:	f7f7 f999 	bl	80004d8 <__aeabi_dmul>
 80091a6:	a368      	add	r3, pc, #416	; (adr r3, 8009348 <atan+0x298>)
 80091a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ac:	f7f6 ffde 	bl	800016c <__adddf3>
 80091b0:	4632      	mov	r2, r6
 80091b2:	463b      	mov	r3, r7
 80091b4:	f7f7 f990 	bl	80004d8 <__aeabi_dmul>
 80091b8:	a365      	add	r3, pc, #404	; (adr r3, 8009350 <atan+0x2a0>)
 80091ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091be:	f7f6 ffd5 	bl	800016c <__adddf3>
 80091c2:	4632      	mov	r2, r6
 80091c4:	463b      	mov	r3, r7
 80091c6:	f7f7 f987 	bl	80004d8 <__aeabi_dmul>
 80091ca:	a363      	add	r3, pc, #396	; (adr r3, 8009358 <atan+0x2a8>)
 80091cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d0:	f7f6 ffcc 	bl	800016c <__adddf3>
 80091d4:	4632      	mov	r2, r6
 80091d6:	463b      	mov	r3, r7
 80091d8:	f7f7 f97e 	bl	80004d8 <__aeabi_dmul>
 80091dc:	a360      	add	r3, pc, #384	; (adr r3, 8009360 <atan+0x2b0>)
 80091de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e2:	f7f6 ffc3 	bl	800016c <__adddf3>
 80091e6:	4642      	mov	r2, r8
 80091e8:	464b      	mov	r3, r9
 80091ea:	f7f7 f975 	bl	80004d8 <__aeabi_dmul>
 80091ee:	a35e      	add	r3, pc, #376	; (adr r3, 8009368 <atan+0x2b8>)
 80091f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f4:	4680      	mov	r8, r0
 80091f6:	4689      	mov	r9, r1
 80091f8:	4630      	mov	r0, r6
 80091fa:	4639      	mov	r1, r7
 80091fc:	f7f7 f96c 	bl	80004d8 <__aeabi_dmul>
 8009200:	a35b      	add	r3, pc, #364	; (adr r3, 8009370 <atan+0x2c0>)
 8009202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009206:	f7f6 ffaf 	bl	8000168 <__aeabi_dsub>
 800920a:	4632      	mov	r2, r6
 800920c:	463b      	mov	r3, r7
 800920e:	f7f7 f963 	bl	80004d8 <__aeabi_dmul>
 8009212:	a359      	add	r3, pc, #356	; (adr r3, 8009378 <atan+0x2c8>)
 8009214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009218:	f7f6 ffa6 	bl	8000168 <__aeabi_dsub>
 800921c:	4632      	mov	r2, r6
 800921e:	463b      	mov	r3, r7
 8009220:	f7f7 f95a 	bl	80004d8 <__aeabi_dmul>
 8009224:	a356      	add	r3, pc, #344	; (adr r3, 8009380 <atan+0x2d0>)
 8009226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800922a:	f7f6 ff9d 	bl	8000168 <__aeabi_dsub>
 800922e:	4632      	mov	r2, r6
 8009230:	463b      	mov	r3, r7
 8009232:	f7f7 f951 	bl	80004d8 <__aeabi_dmul>
 8009236:	a354      	add	r3, pc, #336	; (adr r3, 8009388 <atan+0x2d8>)
 8009238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800923c:	f7f6 ff94 	bl	8000168 <__aeabi_dsub>
 8009240:	4632      	mov	r2, r6
 8009242:	463b      	mov	r3, r7
 8009244:	f7f7 f948 	bl	80004d8 <__aeabi_dmul>
 8009248:	4602      	mov	r2, r0
 800924a:	460b      	mov	r3, r1
 800924c:	4640      	mov	r0, r8
 800924e:	4649      	mov	r1, r9
 8009250:	f7f6 ff8c 	bl	800016c <__adddf3>
 8009254:	4622      	mov	r2, r4
 8009256:	462b      	mov	r3, r5
 8009258:	f7f7 f93e 	bl	80004d8 <__aeabi_dmul>
 800925c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8009260:	4602      	mov	r2, r0
 8009262:	460b      	mov	r3, r1
 8009264:	d144      	bne.n	80092f0 <atan+0x240>
 8009266:	4620      	mov	r0, r4
 8009268:	4629      	mov	r1, r5
 800926a:	f7f6 ff7d 	bl	8000168 <__aeabi_dsub>
 800926e:	e734      	b.n	80090da <atan+0x2a>
 8009270:	2200      	movs	r2, #0
 8009272:	4b4c      	ldr	r3, [pc, #304]	; (80093a4 <atan+0x2f4>)
 8009274:	f7f6 ff78 	bl	8000168 <__aeabi_dsub>
 8009278:	2200      	movs	r2, #0
 800927a:	4606      	mov	r6, r0
 800927c:	460f      	mov	r7, r1
 800927e:	4620      	mov	r0, r4
 8009280:	4629      	mov	r1, r5
 8009282:	4b48      	ldr	r3, [pc, #288]	; (80093a4 <atan+0x2f4>)
 8009284:	f7f6 ff72 	bl	800016c <__adddf3>
 8009288:	4602      	mov	r2, r0
 800928a:	460b      	mov	r3, r1
 800928c:	4630      	mov	r0, r6
 800928e:	4639      	mov	r1, r7
 8009290:	f7f7 fa4c 	bl	800072c <__aeabi_ddiv>
 8009294:	f04f 0a01 	mov.w	sl, #1
 8009298:	4604      	mov	r4, r0
 800929a:	460d      	mov	r5, r1
 800929c:	e767      	b.n	800916e <atan+0xbe>
 800929e:	4b43      	ldr	r3, [pc, #268]	; (80093ac <atan+0x2fc>)
 80092a0:	429e      	cmp	r6, r3
 80092a2:	da1a      	bge.n	80092da <atan+0x22a>
 80092a4:	2200      	movs	r2, #0
 80092a6:	4b42      	ldr	r3, [pc, #264]	; (80093b0 <atan+0x300>)
 80092a8:	f7f6 ff5e 	bl	8000168 <__aeabi_dsub>
 80092ac:	2200      	movs	r2, #0
 80092ae:	4606      	mov	r6, r0
 80092b0:	460f      	mov	r7, r1
 80092b2:	4620      	mov	r0, r4
 80092b4:	4629      	mov	r1, r5
 80092b6:	4b3e      	ldr	r3, [pc, #248]	; (80093b0 <atan+0x300>)
 80092b8:	f7f7 f90e 	bl	80004d8 <__aeabi_dmul>
 80092bc:	2200      	movs	r2, #0
 80092be:	4b39      	ldr	r3, [pc, #228]	; (80093a4 <atan+0x2f4>)
 80092c0:	f7f6 ff54 	bl	800016c <__adddf3>
 80092c4:	4602      	mov	r2, r0
 80092c6:	460b      	mov	r3, r1
 80092c8:	4630      	mov	r0, r6
 80092ca:	4639      	mov	r1, r7
 80092cc:	f7f7 fa2e 	bl	800072c <__aeabi_ddiv>
 80092d0:	f04f 0a02 	mov.w	sl, #2
 80092d4:	4604      	mov	r4, r0
 80092d6:	460d      	mov	r5, r1
 80092d8:	e749      	b.n	800916e <atan+0xbe>
 80092da:	4602      	mov	r2, r0
 80092dc:	460b      	mov	r3, r1
 80092de:	2000      	movs	r0, #0
 80092e0:	4934      	ldr	r1, [pc, #208]	; (80093b4 <atan+0x304>)
 80092e2:	f7f7 fa23 	bl	800072c <__aeabi_ddiv>
 80092e6:	f04f 0a03 	mov.w	sl, #3
 80092ea:	4604      	mov	r4, r0
 80092ec:	460d      	mov	r5, r1
 80092ee:	e73e      	b.n	800916e <atan+0xbe>
 80092f0:	4b31      	ldr	r3, [pc, #196]	; (80093b8 <atan+0x308>)
 80092f2:	4e32      	ldr	r6, [pc, #200]	; (80093bc <atan+0x30c>)
 80092f4:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80092f8:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80092fc:	e9da 2300 	ldrd	r2, r3, [sl]
 8009300:	f7f6 ff32 	bl	8000168 <__aeabi_dsub>
 8009304:	4622      	mov	r2, r4
 8009306:	462b      	mov	r3, r5
 8009308:	f7f6 ff2e 	bl	8000168 <__aeabi_dsub>
 800930c:	4602      	mov	r2, r0
 800930e:	460b      	mov	r3, r1
 8009310:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009314:	f7f6 ff28 	bl	8000168 <__aeabi_dsub>
 8009318:	f1bb 0f00 	cmp.w	fp, #0
 800931c:	4604      	mov	r4, r0
 800931e:	460d      	mov	r5, r1
 8009320:	f6bf aee4 	bge.w	80090ec <atan+0x3c>
 8009324:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009328:	461d      	mov	r5, r3
 800932a:	e6df      	b.n	80090ec <atan+0x3c>
 800932c:	4d24      	ldr	r5, [pc, #144]	; (80093c0 <atan+0x310>)
 800932e:	e6dd      	b.n	80090ec <atan+0x3c>
 8009330:	8800759c 	.word	0x8800759c
 8009334:	7e37e43c 	.word	0x7e37e43c
 8009338:	e322da11 	.word	0xe322da11
 800933c:	3f90ad3a 	.word	0x3f90ad3a
 8009340:	24760deb 	.word	0x24760deb
 8009344:	3fa97b4b 	.word	0x3fa97b4b
 8009348:	a0d03d51 	.word	0xa0d03d51
 800934c:	3fb10d66 	.word	0x3fb10d66
 8009350:	c54c206e 	.word	0xc54c206e
 8009354:	3fb745cd 	.word	0x3fb745cd
 8009358:	920083ff 	.word	0x920083ff
 800935c:	3fc24924 	.word	0x3fc24924
 8009360:	5555550d 	.word	0x5555550d
 8009364:	3fd55555 	.word	0x3fd55555
 8009368:	2c6a6c2f 	.word	0x2c6a6c2f
 800936c:	bfa2b444 	.word	0xbfa2b444
 8009370:	52defd9a 	.word	0x52defd9a
 8009374:	3fadde2d 	.word	0x3fadde2d
 8009378:	af749a6d 	.word	0xaf749a6d
 800937c:	3fb3b0f2 	.word	0x3fb3b0f2
 8009380:	fe231671 	.word	0xfe231671
 8009384:	3fbc71c6 	.word	0x3fbc71c6
 8009388:	9998ebc4 	.word	0x9998ebc4
 800938c:	3fc99999 	.word	0x3fc99999
 8009390:	440fffff 	.word	0x440fffff
 8009394:	7ff00000 	.word	0x7ff00000
 8009398:	54442d18 	.word	0x54442d18
 800939c:	bff921fb 	.word	0xbff921fb
 80093a0:	3fdbffff 	.word	0x3fdbffff
 80093a4:	3ff00000 	.word	0x3ff00000
 80093a8:	3ff2ffff 	.word	0x3ff2ffff
 80093ac:	40038000 	.word	0x40038000
 80093b0:	3ff80000 	.word	0x3ff80000
 80093b4:	bff00000 	.word	0xbff00000
 80093b8:	0800bd48 	.word	0x0800bd48
 80093bc:	0800bd28 	.word	0x0800bd28
 80093c0:	3ff921fb 	.word	0x3ff921fb

080093c4 <fabs>:
 80093c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80093c8:	4770      	bx	lr
 80093ca:	0000      	movs	r0, r0
 80093cc:	0000      	movs	r0, r0
	...

080093d0 <floor>:
 80093d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093d4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 80093d8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 80093dc:	2e13      	cmp	r6, #19
 80093de:	4602      	mov	r2, r0
 80093e0:	460b      	mov	r3, r1
 80093e2:	4607      	mov	r7, r0
 80093e4:	460c      	mov	r4, r1
 80093e6:	4605      	mov	r5, r0
 80093e8:	dc34      	bgt.n	8009454 <floor+0x84>
 80093ea:	2e00      	cmp	r6, #0
 80093ec:	da15      	bge.n	800941a <floor+0x4a>
 80093ee:	a334      	add	r3, pc, #208	; (adr r3, 80094c0 <floor+0xf0>)
 80093f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f4:	f7f6 feba 	bl	800016c <__adddf3>
 80093f8:	2200      	movs	r2, #0
 80093fa:	2300      	movs	r3, #0
 80093fc:	f7f7 fafc 	bl	80009f8 <__aeabi_dcmpgt>
 8009400:	b140      	cbz	r0, 8009414 <floor+0x44>
 8009402:	2c00      	cmp	r4, #0
 8009404:	da59      	bge.n	80094ba <floor+0xea>
 8009406:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800940a:	ea57 0503 	orrs.w	r5, r7, r3
 800940e:	d001      	beq.n	8009414 <floor+0x44>
 8009410:	2500      	movs	r5, #0
 8009412:	4c2d      	ldr	r4, [pc, #180]	; (80094c8 <floor+0xf8>)
 8009414:	4623      	mov	r3, r4
 8009416:	462f      	mov	r7, r5
 8009418:	e025      	b.n	8009466 <floor+0x96>
 800941a:	4a2c      	ldr	r2, [pc, #176]	; (80094cc <floor+0xfc>)
 800941c:	fa42 f806 	asr.w	r8, r2, r6
 8009420:	ea01 0208 	and.w	r2, r1, r8
 8009424:	4302      	orrs	r2, r0
 8009426:	d01e      	beq.n	8009466 <floor+0x96>
 8009428:	a325      	add	r3, pc, #148	; (adr r3, 80094c0 <floor+0xf0>)
 800942a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800942e:	f7f6 fe9d 	bl	800016c <__adddf3>
 8009432:	2200      	movs	r2, #0
 8009434:	2300      	movs	r3, #0
 8009436:	f7f7 fadf 	bl	80009f8 <__aeabi_dcmpgt>
 800943a:	2800      	cmp	r0, #0
 800943c:	d0ea      	beq.n	8009414 <floor+0x44>
 800943e:	2c00      	cmp	r4, #0
 8009440:	bfbe      	ittt	lt
 8009442:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009446:	fa43 f606 	asrlt.w	r6, r3, r6
 800944a:	19a4      	addlt	r4, r4, r6
 800944c:	2500      	movs	r5, #0
 800944e:	ea24 0408 	bic.w	r4, r4, r8
 8009452:	e7df      	b.n	8009414 <floor+0x44>
 8009454:	2e33      	cmp	r6, #51	; 0x33
 8009456:	dd0a      	ble.n	800946e <floor+0x9e>
 8009458:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800945c:	d103      	bne.n	8009466 <floor+0x96>
 800945e:	f7f6 fe85 	bl	800016c <__adddf3>
 8009462:	4607      	mov	r7, r0
 8009464:	460b      	mov	r3, r1
 8009466:	4638      	mov	r0, r7
 8009468:	4619      	mov	r1, r3
 800946a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800946e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009472:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8009476:	fa22 f808 	lsr.w	r8, r2, r8
 800947a:	ea18 0f00 	tst.w	r8, r0
 800947e:	d0f2      	beq.n	8009466 <floor+0x96>
 8009480:	a30f      	add	r3, pc, #60	; (adr r3, 80094c0 <floor+0xf0>)
 8009482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009486:	f7f6 fe71 	bl	800016c <__adddf3>
 800948a:	2200      	movs	r2, #0
 800948c:	2300      	movs	r3, #0
 800948e:	f7f7 fab3 	bl	80009f8 <__aeabi_dcmpgt>
 8009492:	2800      	cmp	r0, #0
 8009494:	d0be      	beq.n	8009414 <floor+0x44>
 8009496:	2c00      	cmp	r4, #0
 8009498:	da02      	bge.n	80094a0 <floor+0xd0>
 800949a:	2e14      	cmp	r6, #20
 800949c:	d103      	bne.n	80094a6 <floor+0xd6>
 800949e:	3401      	adds	r4, #1
 80094a0:	ea25 0508 	bic.w	r5, r5, r8
 80094a4:	e7b6      	b.n	8009414 <floor+0x44>
 80094a6:	2301      	movs	r3, #1
 80094a8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80094ac:	fa03 f606 	lsl.w	r6, r3, r6
 80094b0:	4435      	add	r5, r6
 80094b2:	42bd      	cmp	r5, r7
 80094b4:	bf38      	it	cc
 80094b6:	18e4      	addcc	r4, r4, r3
 80094b8:	e7f2      	b.n	80094a0 <floor+0xd0>
 80094ba:	2500      	movs	r5, #0
 80094bc:	462c      	mov	r4, r5
 80094be:	e7a9      	b.n	8009414 <floor+0x44>
 80094c0:	8800759c 	.word	0x8800759c
 80094c4:	7e37e43c 	.word	0x7e37e43c
 80094c8:	bff00000 	.word	0xbff00000
 80094cc:	000fffff 	.word	0x000fffff

080094d0 <scalbn>:
 80094d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094d2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80094d6:	4604      	mov	r4, r0
 80094d8:	460d      	mov	r5, r1
 80094da:	4617      	mov	r7, r2
 80094dc:	460b      	mov	r3, r1
 80094de:	b996      	cbnz	r6, 8009506 <scalbn+0x36>
 80094e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80094e4:	4303      	orrs	r3, r0
 80094e6:	d039      	beq.n	800955c <scalbn+0x8c>
 80094e8:	4b35      	ldr	r3, [pc, #212]	; (80095c0 <scalbn+0xf0>)
 80094ea:	2200      	movs	r2, #0
 80094ec:	f7f6 fff4 	bl	80004d8 <__aeabi_dmul>
 80094f0:	4b34      	ldr	r3, [pc, #208]	; (80095c4 <scalbn+0xf4>)
 80094f2:	4604      	mov	r4, r0
 80094f4:	429f      	cmp	r7, r3
 80094f6:	460d      	mov	r5, r1
 80094f8:	da0f      	bge.n	800951a <scalbn+0x4a>
 80094fa:	a32d      	add	r3, pc, #180	; (adr r3, 80095b0 <scalbn+0xe0>)
 80094fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009500:	f7f6 ffea 	bl	80004d8 <__aeabi_dmul>
 8009504:	e006      	b.n	8009514 <scalbn+0x44>
 8009506:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800950a:	4296      	cmp	r6, r2
 800950c:	d10a      	bne.n	8009524 <scalbn+0x54>
 800950e:	4602      	mov	r2, r0
 8009510:	f7f6 fe2c 	bl	800016c <__adddf3>
 8009514:	4604      	mov	r4, r0
 8009516:	460d      	mov	r5, r1
 8009518:	e020      	b.n	800955c <scalbn+0x8c>
 800951a:	460b      	mov	r3, r1
 800951c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8009520:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8009524:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8009528:	19b9      	adds	r1, r7, r6
 800952a:	4291      	cmp	r1, r2
 800952c:	dd0e      	ble.n	800954c <scalbn+0x7c>
 800952e:	a322      	add	r3, pc, #136	; (adr r3, 80095b8 <scalbn+0xe8>)
 8009530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009534:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8009538:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800953c:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8009540:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8009544:	4820      	ldr	r0, [pc, #128]	; (80095c8 <scalbn+0xf8>)
 8009546:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800954a:	e7d9      	b.n	8009500 <scalbn+0x30>
 800954c:	2900      	cmp	r1, #0
 800954e:	dd08      	ble.n	8009562 <scalbn+0x92>
 8009550:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009554:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009558:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800955c:	4620      	mov	r0, r4
 800955e:	4629      	mov	r1, r5
 8009560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009562:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8009566:	da16      	bge.n	8009596 <scalbn+0xc6>
 8009568:	f24c 3350 	movw	r3, #50000	; 0xc350
 800956c:	429f      	cmp	r7, r3
 800956e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8009572:	dd08      	ble.n	8009586 <scalbn+0xb6>
 8009574:	4c15      	ldr	r4, [pc, #84]	; (80095cc <scalbn+0xfc>)
 8009576:	4814      	ldr	r0, [pc, #80]	; (80095c8 <scalbn+0xf8>)
 8009578:	f363 74df 	bfi	r4, r3, #31, #1
 800957c:	a30e      	add	r3, pc, #56	; (adr r3, 80095b8 <scalbn+0xe8>)
 800957e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009582:	4621      	mov	r1, r4
 8009584:	e7bc      	b.n	8009500 <scalbn+0x30>
 8009586:	4c12      	ldr	r4, [pc, #72]	; (80095d0 <scalbn+0x100>)
 8009588:	4812      	ldr	r0, [pc, #72]	; (80095d4 <scalbn+0x104>)
 800958a:	f363 74df 	bfi	r4, r3, #31, #1
 800958e:	a308      	add	r3, pc, #32	; (adr r3, 80095b0 <scalbn+0xe0>)
 8009590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009594:	e7f5      	b.n	8009582 <scalbn+0xb2>
 8009596:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800959a:	3136      	adds	r1, #54	; 0x36
 800959c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80095a0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80095a4:	4620      	mov	r0, r4
 80095a6:	4629      	mov	r1, r5
 80095a8:	2200      	movs	r2, #0
 80095aa:	4b0b      	ldr	r3, [pc, #44]	; (80095d8 <scalbn+0x108>)
 80095ac:	e7a8      	b.n	8009500 <scalbn+0x30>
 80095ae:	bf00      	nop
 80095b0:	c2f8f359 	.word	0xc2f8f359
 80095b4:	01a56e1f 	.word	0x01a56e1f
 80095b8:	8800759c 	.word	0x8800759c
 80095bc:	7e37e43c 	.word	0x7e37e43c
 80095c0:	43500000 	.word	0x43500000
 80095c4:	ffff3cb0 	.word	0xffff3cb0
 80095c8:	8800759c 	.word	0x8800759c
 80095cc:	7e37e43c 	.word	0x7e37e43c
 80095d0:	01a56e1f 	.word	0x01a56e1f
 80095d4:	c2f8f359 	.word	0xc2f8f359
 80095d8:	3c900000 	.word	0x3c900000

080095dc <_init>:
 80095dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095de:	bf00      	nop
 80095e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095e2:	bc08      	pop	{r3}
 80095e4:	469e      	mov	lr, r3
 80095e6:	4770      	bx	lr

080095e8 <_fini>:
 80095e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ea:	bf00      	nop
 80095ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095ee:	bc08      	pop	{r3}
 80095f0:	469e      	mov	lr, r3
 80095f2:	4770      	bx	lr
